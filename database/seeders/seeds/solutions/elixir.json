{"50654ddff44f800200000004":[{"id":75811,"user_id":null,"body":"defmodule Multiply do\n  @spec multiply(number, number) :: number\n  def multiply(a, b), do: a * b\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75812,"user_id":null,"body":"defmodule Multiply do\n  def multiply(a, b) do\n    a * b\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75813,"user_id":null,"body":"defmodule Multiply do\n  def multiply(a, b), do: a * b\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75814,"user_id":null,"body":"defmodule MultiplyServer do\n  use GenServer\n  def handle_call(:value, _, state), do: {:reply, state, state}\n  def handle_cast({:multiply, item}, state) when is_integer(item) do\n    {:noreply, item * state}\n  end\nend\n\ndefmodule Multiply do\n  def multiply(a, b) do\n    {:ok, pid} = GenServer.start_link(multiplyServer, a)\n    GenServer.cast(pid, {:multiply, b})\n    GenServer.call(pid, :value)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75815,"user_id":null,"body":"defmodule Multiply,do: defdelegate multiply(a,b),to: Kernel,as: :*","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75816,"user_id":null,"body":"defmodule Multiply do\n  def multiply(a, b) do\n    result = a * b\n    result\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75817,"user_id":null,"body":"defmodule Multiply, do: def multiply(a,b), do: a*b","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75818,"user_id":null,"body":"defmodule Multiply do\n  def multiply(s,a) do\n    s*a\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75819,"user_id":null,"body":"defmodule Multiply do\n  def multiply(a, b) do # a comma is needed here to seperate arguments.\n    a * b\n  end\nend\n\n# you can check it like this:\n# IO.puts multiply.multiply(2, 4)\n# this will give you an output of 8\n\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75820,"user_id":null,"body":"defmodule Multiply do\n  def multiply(a, b) do\n    IO.puts a\n    IO.puts b\n    a * b\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"50654ddff44f800200000007":[{"id":75821,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    case String.length(a) < String.length(b) do\n      false -> b <> a <> b\n      true  -> a <> b <> a\n    end\n  end      \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75822,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b), do: if String.length(a) > String.length(b), do: \"#{b}#{a}#{b}\", else: \"#{a}#{b}#{a}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75823,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    [short, long] = Enum.sort_by([a,b], &String.length\/1)\n      \n    \"#{short}#{long}#{short}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75824,"user_id":492,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    if (String.length(a) < String.length(b)) do\n      a <> b <> a\n    else\n      b <> a <> b\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75825,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    [a, b]\n    |> Enum.sort_by(&String.length\/1)\n    |> to_s_l_s()\n  end\n  \n  defp to_s_l_s([s, l]), do: \"#{s}#{l}#{s}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75826,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    [a, b]\n    |> Enum.sort_by(&String.length\/1)\n    |> (fn [s, l] -> \"#{s}#{l}#{s}\" end).()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75827,"user_id":1566,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    String.length(a) < String.length(b) && a<>b<>a || b<>a<>b\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75828,"user_id":964,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n  \t[short, long] = Enum.sort_by [b, a], &String.length\/1 \n    short <> long <> short\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75829,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n  \t[a, b] \n    |> Enum.sort_by(&String.length\/1)\n    |> (fn([h | t]) -> h <> hd(t) <> h end).()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75830,"user_id":null,"body":"defmodule ShortLongShort do\n  def solution(a, b) do\n    [a, b] \n    |> Enum.sort_by(&String.length\/1)\n    |> do_solution\n  end\n  \n  defp do_solution([a, b]) do\n    a <> b <> a\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"511f11d355fe575d2c000001":[{"id":75831,"user_id":364,"body":"defmodule Solution do\n  \n  def two_oldest_ages(ages) do\n    ages\n    |> Enum.sort\n    |> Enum.take(-2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75832,"user_id":3311,"body":"defmodule Solution do\n  def two_oldest_ages([one, two| head]) do\n    start = (one > two) && [two, one] || [one, two]\n\n    Enum.reduce(\n      head,\n      start,\n      fn(elem, [one, two]) ->\n        cond do\n          elem > two -> [two, elem]\n          elem > one -> [elem, two]\n          true -> [one, two]\n        end\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75833,"user_id":null,"body":"defmodule Solution do\n  \n  def two_oldest_ages(ages) do\n    [a, b | c] = Enum.sort(ages, &(&1 > &2))\n    [b, a]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75834,"user_id":null,"body":"defmodule Solution do\n  def two_oldest_ages(xs) do\n    xs\n    |> Enum.sort\n    |> Enum.take(-2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75835,"user_id":null,"body":"defmodule Solution do\n  \n  def two_oldest_ages(ages) do\n    ages\n    |> Enum.sort\n    |> Enum.drop(length(ages) - 2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75836,"user_id":null,"body":"defmodule Solution do\n  def two_oldest_ages(ages) do\n    ages\n    |> Enum.sort_by(&-\/1)\n    |> Enum.take(2)\n    |> Enum.reverse()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75837,"user_id":null,"body":"defmodule Solution do\n  def two_oldest_ages([]), do: nil\n  def two_oldest_ages([_] = lst), do: lst\n  def two_oldest_ages(ages) do\n    [oldest, next_oldest | _] = ages |> Enum.sort |> Enum.reverse\n    [next_oldest, oldest]\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75838,"user_id":null,"body":"defmodule Solution do\n  def two_oldest_ages(ages), do: Enum.take(Enum.sort(ages), -2)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75839,"user_id":null,"body":"defmodule Solution do\n  \n  def two_oldest_ages(ages) do\n    a = Enum.max(ages)\n    b = Enum.max(ages -- [a])\n    \n    [b,a]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75840,"user_id":null,"body":"defmodule Solution do\n  \n  def two_oldest_ages(ages) do\n    Enum.slice(Enum.sort(ages), -2..-1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"513e08acc600c94f01000001":[{"id":75841,"user_id":null,"body":"defmodule Kata do\n  def rgb(r,g,b) do\n    [r, g, b]\n      |> Enum.map(&to_hex_str\/1)\n      |> Enum.join()\n  end\n\n  defp to_hex_str(num) when num <= 0, do: \"00\"\n  defp to_hex_str(num) when num >= 255, do: \"FF\"\n  defp to_hex_str(num) do\n    num\n      |> Integer.to_string(16)\n      |> String.pad_leading(2, \"0\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75842,"user_id":null,"body":"defmodule Kata do\n  def rgb(r,g,b) do\n    hex(r) <> hex(g) <> hex(b)\n  end\n  \n  defp hex(n) do\n    n\n    |> max(0)\n    |> min(255)\n    |> Integer.to_string(16)\n    |> String.pad_leading(2, \"0\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75843,"user_id":null,"body":"defmodule Kata do\n    def rgb(r,g,b), do: parse(r) <> parse(g) <> parse(b)\n    \n    defp parse(x) when x < 0,      do: \"00\"\n    defp parse(x) when x in 0..15, do: \"0\" <> Integer.to_string(x, 16)\n    defp parse(x) when x > 255,    do: \"FF\"\n    defp parse(x),                 do: Integer.to_string(x, 16)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75844,"user_id":null,"body":"defmodule Kata do\n    def rgb(r,g,b) do\n       [r, g, b] \n       |> Enum.map(&color_hex_value\/1)\n       |> Enum.join\n    end\n    \n    defp color_hex_value(number) do \n      number\n      |> max(0)\n      |> min(255)\n      |> Integer.to_string(16) \n      |> String.pad_leading(2, \"0\")\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75845,"user_id":null,"body":"defmodule Kata do\n    def rgb(r,g,b) do\n        [r,g,b]\n        |> Enum.map(fn x -> x |> max(0) |> min(255) end)\n        |> Enum.map(fn x -> Integer.to_string(x, 16) end)\n        |> Enum.map(fn x -> String.pad_leading(x, 2, \"00\") end)\n        |> Enum.join()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75846,"user_id":null,"body":"defmodule Kata do\n\n    def rgb(r,g,b) do\n    [r,g,b]\n        |> Enum.map(&Integer.to_string(max(min(&1,255),0),16))\n        |> Enum.map(&String.pad_leading(&1, 2, \"0\"))\n        |> Enum.join(\"\")\n    end\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75847,"user_id":null,"body":"defmodule Kata do\n    def rgb(r,g,b) do\n        for value <- [r,g,b] do\n           cond do\n              value > 255 -> \"FF\"\n              value < 0 -> \"00\"\n              value >= 0 -> Integer.to_string(value, 16) |> String.pad_leading(2, \"0\")\n          end\n        end |> Enum.join\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75848,"user_id":null,"body":"defmodule Kata do\n    def rgb(r,g,b) do\n        [r, g, b] \n        |> Enum.map_join(\n          & &1\n          |> max(0)\n          |> min(255)\n          |> Integer.to_string(16) \n          |> String.pad_leading(2, \"0\") \n        )\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75849,"user_id":53,"body":"defmodule Kata do\n    defp clip(n), do: max(0, min(255, n))\n    defp hex(n), do: Integer.to_string(n, 16) |> String.pad_leading(2, \"0\")\n    def rgb(r,g,b) do\n        \"#{hex(clip(r))}#{hex(clip(g))}#{hex(clip(b))}\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75850,"user_id":null,"body":"defmodule Kata do\n  @dict %{10 => \"A\", 11 => \"B\", 12 => \"C\", 13 => \"D\", 14 => \"E\", 15 => \"F\"}\n  def rgb(r,g,b) do\n    [b, g, r]\n    |> Enum.map(&fix_out_of_range\/1)\n    |> Enum.reduce([], fn x, acc -> [div(x, 16) | [rem(x, 16) | acc]] end)\n    |> Enum.reduce(\"\", fn x, acc -> acc <> convert(x) end)\n  end\n  \n  def fix_out_of_range(input) when input < 0, do: 0\n  def fix_out_of_range(input) when input > 255, do: 255\n  def fix_out_of_range(input), do: input\n  \n  def convert(input) when input < 10, do: Integer.to_string(input)\n  def convert(input) when input >= 10, do: @dict[input]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"514b92a657cdc65150000006":[{"id":75851,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do \n    Enum.filter(0..number-1, fn(x) -> rem(x,3) == 0 or rem(x,5) == 0 end) |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75852,"user_id":null,"body":"defmodule Challenge do\n  def keeper?(n) do\n    rem(n, 3) == 0 || rem(n, 5) == 0\n  end\n\n  def solution(number) do\n    numbers = for n <- 1..(number-1), keeper?(n), do: n\n    Enum.sum numbers\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75853,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do\n    1..(number-1)\n    |> Enum.filter(&(rem(&1,3) == 0 or rem(&1, 5) ==0))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75854,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do \n    threes = 0..(number-1) |> Enum.take_every(3)\n    fives = 0..(number-1) |> Enum.take_every(5)\n    threes ++ fives \n    |> Enum.sort\n    |> Enum.dedup\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75855,"user_id":1774,"body":"defmodule Challenge do\n  def solution(n) when n <= 0, do: 0\n  def solution(n), do: solution(n-1, [])\n  \n  defp solution(0, nums), do: Enum.sum(nums)\n  defp solution(n, nums) do\n    case {rem(n, 3), rem(n, 5)} do\n      {0, _} -> solution(n-1, [n | nums])\n      {_, 0} -> solution(n-1, [n | nums])\n      {_, _} -> solution(n-1, nums)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75856,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do \n    sum(number - 1, 0)\n  end\n \n  defp sum(val, acc) when val <= 0 do\n    acc\n  end\n\n  defp sum(val, acc) when rem(val, 5) == 0 or rem(val, 3) == 0 do\n    sum(val - 1, acc + val)\n  end\n  \n  defp sum(val, acc) do\n    sum(val - 1, acc)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75857,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do\n    Enum.reduce(1..number-1, 0, fn x, acc -> \n      if rem(x, 3) == 0 or rem(x, 5) == 0 do\n        acc + x\n      else\n        acc\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75858,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do \n    Enum.sum(for n <- 1..number - 1, rem(n, 3) == 0 or rem(n, 5) == 0, do: n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75859,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) when number > 1 do \n    1..number-1\n    |> Enum.filter(fn x -> rem(x,3)==0 or rem(x,5)==0 end)\n    |> Enum.sum\n  end\n  \n  def solution(number), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75860,"user_id":null,"body":"defmodule Challenge do\n  def solution(number) do \n      Enum.sum Enum.filter 1..number-1, &(rem(&1,3)==0 or rem(&1,5)==0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"515de9ae9dcfc28eb6000001":[{"id":75861,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(str) do\n    str\n    |> to_char_list()\n    |> Enum.chunk(2, 2, '_')\n    |> Enum.map(&to_string\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75862,"user_id":364,"body":"defmodule SplitStrings do\n  def solution(str) do\n    str\n    |> String.graphemes\n    |> Enum.chunk(2,2,[\"_\"])\n    |> Enum.map(&List.to_string\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75863,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(\"\"), do: []\n  def solution(str), do: str |> String.graphemes |> _solution_join\n  \n  defp _solution_join([a]), do: [a <> \"_\"]\n  defp _solution_join([a, b]), do: [a <> b]\n  defp _solution_join([a, b | tail]), do: [a <> b] ++  _solution_join(tail)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75864,"user_id":null,"body":"defmodule SplitStrings do\ndef solution(str) do\n    str <> \"_\"\n      |> String.codepoints()\n      |> Enum.chunk(2)\n      |> Enum.map(&Enum.join\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75865,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(str) do\n    str |> String.graphemes |> Enum.chunk_every(2, 2, [\"_\"]) |> Enum.map(&Enum.join\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75866,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(str) do\n    str\n    |> String.split(\"\", trim: true)\n    |> Enum.chunk_every(2, 2, [\"_\"])\n    |> Enum.map(fn x -> x |> Enum.join(\"\") end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75867,"user_id":null,"body":"defmodule SplitStrings do\n  @pad_char [\"_\"]\n  \n  def solution(\"\"), do: []\n  def solution(str) do\n    str\n    |> String.graphemes\n    |> Enum.chunk_every(2, 2, @pad_char)\n    |> Enum.map( fn [a,b] -> a <> b end)\n    |> List.flatten\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75868,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(str) do\n    str\n    |> String.to_charlist()\n    |> Enum.to_list()\n    |> split_string\n    |> Enum.map(fn x -> List.to_string(x) end)\n  end\n\n  def split_string(str) do\n    if rem(length(str), 2) == 0 do\n      Enum.chunk_every(str, 2)\n    else\n      str = str ++ '_'\n      Enum.chunk_every(str, 2)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75869,"user_id":null,"body":"defmodule SplitStrings do\n\ndef solution(\"\") do\n[]\nend\n\n  def solution(str) do\n    String.graphemes(str) |> Enum.chunk_every(2, 2, [\"_\"]) |> Enum.join(\",\") |> String.split(\",\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75870,"user_id":null,"body":"defmodule SplitStrings do\n  def solution(<<pair::binary-2>> <> rest), do: [pair | solution(rest)]\n  def solution(<<char::binary-1>>), do: [\"#{char}_\"]\n  def solution(\"\"), do: []\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"515decfd9dcfc23bb6000006":[{"id":75871,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n        case ip |> String.split(\".\") do\n            ips when length(ips) == 4 -> verify(ips)\n            _ -> false\n        end\n    end\n    defp verify([]), do: true\n    defp verify([h|t]) do\n        case Integer.parse(h) do\n            {num, \"\"} when num in 0..255 -> to_string(num) == h and verify(t)\n            _ -> false\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75872,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n      case :inet.parse_address(to_charlist(ip)) do\n        {:ok, _any} -> true\n        {_other, _any} -> false\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75873,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n      String.match?(ip, ~r\/\\A((2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d)\\.){3}(?2)\\z\/)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75874,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n      ip\n      |> String.split(\".\")\n      |> Enum.map(&Integer.parse\/1)\n      |> Enum.reduce(0, fn \n        {octet, \"\"}, acc when octet >= 0 and octet <= 255 -> acc + 1\n        _, acc -> acc\n      end)\n      |> Kernel.==(4)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75875,"user_id":null,"body":"defmodule Solution do\n  def is_valid_ip(ip) do\n    octets = ip |> String.split(\".\", trim: true)\n\n    Enum.count(octets) == 4 and\n    Enum.all?(octets, fn octet ->\n      String.match?(octet, ~r\/^([1-9][0-9]{0,2}|0)\\z\/) and\n      String.to_integer(octet) in 0..255\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75876,"user_id":null,"body":"defmodule Solution do\n  def is_valid_ip(ip) do\n    Regex.match?(~r\/^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]|[1-9][0-9]|[0-9])$\/,ip)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75877,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n      ip\n      |> String.split(\".\")\n      |> filter_zeros()\n      |> IO.inspect()\n      |> only_numbers()\n      |> IO.inspect()\n      |> Enum.count() == 4\n    end\n    \n    defp only_numbers(list) do          \n      Enum.reject(list, fn (x) -> \n        case Integer.parse(x) do\n          :error -> true\n          {res, \"\"} -> res > 255 or res < 0\n          {_, _} -> true\n        end\n      end)\n    end\n    \n    defp filter_zeros(list) do\n      Enum.reject(list, fn (x) -> \n        case String.length(x) > 1 do\n          true -> String.at(x, 0) == \"0\"\n          false -> false\n        end\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75878,"user_id":null,"body":"defmodule Solution do\n  def is_valid_ip(ip) do\n    cond do\n      not ((for _<- 1..4, do: \"([1-9]{1}[0-9]{0,2}|[0])\") |> Enum.join(\"[.]\") |> Regex.compile! |> Regex.match?(ip)) -> false\n      ip |> String.split(\".\") |> Enum.any?(fn x -> elem(Integer.parse(x,10),0) > 255 end) -> false\n      true -> true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75879,"user_id":null,"body":"defmodule Solution do\n  def is_valid_ip(ip) do\n    cond do\n      not Regex.match?(Regex.compile!(Enum.join((for x <- 1..4, do: \"([1-9]{1}[0-9]{0,2}|[0])\"), \"[.]\")), ip) -> false\n      ip |> String.split(\".\") |> Enum.any?(fn x -> elem(Integer.parse(x,10),0) > 255 end) -> false\n      true -> true\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75880,"user_id":null,"body":"defmodule Solution do\n    def is_valid_ip(ip) do\n        String.match?(ip, ~r\/^((25[0-5]|2[0-4]\\d|1\\d\\d|\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|1\\d\\d|\\d\\d?)$\/)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"515e188a311df01cba000003":[{"id":75881,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(n), do: Enum.at @planetNames, n-1, \"no such planet\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75882,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(index) do\n    Enum.at(@planetNames, index - 1)\n  end\n  \n  def get_planet_name(_id), do: \"no such planet\"\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75883,"user_id":53,"body":"defmodule Kata do\n\n  @planets %{\n    1 => \"Mercury\",\n    2 => \"Venus\",\n    3 => \"Earth\",\n    4 => \"Mars\",\n    5 => \"Jupiter\",\n    6 => \"Saturn\",\n    7 => \"Uranus\",\n    8 => \"Neptune\"\n  }\n\n  @spec get_planet_name(Int.t) :: String.t\n  def get_planet_name(id) do\n    case Map.fetch(@planets, id) do\n      {:ok, planet} -> planet\n      :error -> \"Kolkie Kolkie Frap Frap\"\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75884,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(id) when id > 0 and id < 8, do: Enum.at(@planetNames, id - 1)\n  \n  def get_planet_name(_), do: \"no such planet\"\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75885,"user_id":null,"body":"defmodule Kata do\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n  \n  @spec get_planet_name(pos_integer) :: String.t\n  def get_planet_name(id) when is_integer(id) do\n    Enum.at(@planetNames, id-1)\n  end\n  \n  def get_planet_name(_id), do: \"no such planet\"\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75886,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(i) when i >= 1 and i <= 8 do\n    Enum.at(@planetNames, i-1)\n  end\n  \n  def get_planet_name(_id), do: \"no such planet\"\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75887,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(number) do\n    Enum.at(@planetNames, number-1)\n  end\n  \n  \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75888,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(id), do:\n    Enum.at @planetNames, id-1, \"no such planet\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75889,"user_id":null,"body":"defmodule Kata do\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(id) do\n    Enum.at(@planetNames, id-1, \"no such planet\")\n  end  \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75890,"user_id":null,"body":"defmodule Kata do\n\n  @planetNames ~w{Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune}\n\n  def get_planet_name(n) when n in 1..length(@planetNames) do\n    Enum.at(@planetNames, n-1)\n  end\n  \n  def get_planet_name(_id), do: \"no such planet\"\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"515e271a311df0350d00000f":[{"id":75891,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums) do\n    nums\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75892,"user_id":null,"body":"defmodule SquareSum do\n\ndef square_sum([]) do 0 end\ndef square_sum(nums) do\n    Enum.reduce(nums, 0, fn x, acc -> acc + x * x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75893,"user_id":null,"body":"defmodule SquareSum do\n  def square(number), do: number * number\n  \n  def square_sum(nums) do\n    nums\n    |> Enum.map(&square\/1)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75894,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums) do\n    nums |> Enum.map(fn x -> :math.pow(x,2) end) |> Enum.reduce(0, &(&1 + &2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75895,"user_id":53,"body":"defmodule SquareSum do\n  def square_sum(nums), do: Enum.reduce(nums, 0, fn x, acc -> acc + x * x end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75896,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums) do\n    Enum.map(nums, fn x -> x * x end)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75897,"user_id":null,"body":"defmodule SquareSum do\n  def square_each([head | tail]) do\n    [head * head | square_each(tail)]\n  end\n  \n  def square_each([]) do\n    []\n  end\n\n  def square_sum(nums) do\n    Enum.sum square_each(nums)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75898,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums), do: Enum.map(nums, & &1*&1) |> Enum.sum\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75899,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums) do\n    Enum.map(nums, fn num -> num * num end)\n    |> Enum.reduce(0, fn sum, num -> sum + num end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75900,"user_id":null,"body":"defmodule SquareSum do\n  def square_sum(nums), do: nums |> Enum.map(&(&1 * &1)) |> Enum.sum\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"515f51d438015969f7000013":[{"id":75901,"user_id":527,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n), do: for i <- 1..n, do: List.duplicate(1, i)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75902,"user_id":null,"body":"defmodule Kata do\n  def pyramid(n), do: do_pyramid(n, [])\n  \n  defp do_pyramid(0, state), do: state\n  defp do_pyramid(n, []), do: do_pyramid(n-1, [mk_list(n)])\n  defp do_pyramid(n, state), do: do_pyramid(n-1, [mk_list(n) | state])\n  \n  defp mk_list(n) do\n    1..n\n    |> Enum.to_list \n    |> Enum.map(fn _ -> 1 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75903,"user_id":527,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n), do: Enum.scan(1..n, [], fn _, xs -> [1 | xs] end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75904,"user_id":null,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n) do\n    Enum.reduce(1..n, [], fn _, acc ->\n      p = Enum.map(acc, &([ 1 | &1 ]))\n      \n      [ [1] | p ]\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75905,"user_id":null,"body":"defmodule Kata do\n  def pyramid(n) when n == 0, do: []\n  def pyramid(n) do\n    1..n|>Enum.map(fn x -> 1..x|>Enum.map(fn _ -> 1 end) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75906,"user_id":null,"body":"defmodule Kata do\n  def pyramid(n) when n == 0 do\n    []\n  end\n\n  def pyramid(n) do\n    make_arr(n, [])\n  end\n\n  defp make_arr(n, acc) when n <= 0 do\n    acc\n  end\n\n  defp make_arr(n, acc) do\n    make_arr(n-1, [make_inner_ar(n, []) | acc])\n  end\n\n  defp make_inner_ar(n, acc) when n <= 0 do\n    acc\n  end\n\n  defp make_inner_ar(n, acc) do\n    make_inner_ar(n-1, acc++[1])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75907,"user_id":53,"body":"defmodule Kata do\n  def replicate(n, x), do: for _ <- 1..n, do: x\n  def aux(n) when (n == 0) do [] end\n  def aux(n) do [replicate(n, 1) | aux(n - 1)] end\n  def pyramid(n) do aux(n) |> Enum.reverse end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75908,"user_id":null,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n), do: for r <- 1..n, do: (for i <- 1..r, do: 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75909,"user_id":null,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n), do: Enum.map(1..n, fn i -> List.duplicate(1, i) end)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75910,"user_id":null,"body":"defmodule Kata do\n  def pyramid(0), do: []\n  def pyramid(n), do: for m <- 1..n, do: repeat(1, m)\n  defp repeat(item, times), do: for _ <- 1..times, do: item\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"51675d17e0c1bed195000001":[{"id":75911,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    digits\n    |> String.codepoints\n    |> Enum.chunk(5, 1)\n    |> Enum.map(& &1 |> Enum.join |> String.to_integer)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75912,"user_id":2098,"body":"defmodule LargestInSeries do\n  @moduledoc \"\"\"\n  This module is responsible for getting the largest n-digit sequence in a\n  given string of integers\n  \"\"\"\n  \n  # This solution should work for any length of sequence\n  @sequence_length 5\n  \n  @doc \"\"\"\n  Public API for this module: This function gets the largest n-digit sequence\n  in a given string of integers\n  \"\"\"\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    digits\n    |> get_sequences()\n    |> Enum.map(&String.to_integer(&1))\n    |> Enum.max\n  end\n  \n  # This function gets a list of sequences in a given string\n  defp get_sequences(digits, len \\\\ @sequence_length) do\n    str_length = String.length(digits)\n    Enum.map((0..str_length - len), &sequence(digits, &1, len))\n  end\n  \n  # This function slices a given string at the give index based on sequence length, len\n  defp sequence(str, index, len), do: String.slice(str, index..index + len - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75913,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    list = String.split(digits, \"\")\n    solve(list, 0)\n  end\n\n  def solve([a, b, c, d, e | _] = list, max) do\n    num = (a <> b <> c <> d <> e)\n    |> String.to_integer\n\n    case num > max do\n      true -> solve(tl(list), num)\n      _ -> solve(tl(list), max)\n    end\n  end\n  def solve([_, _, _, _], max), do: max\nend\n    ","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75914,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    {:ok, stream} =\n      digits\n      |> StringIO.open()\n\n    stream\n    |> IO.binstream(1)\n    |> Stream.chunk_every(5,1, :discard)\n    |> Enum.max()\n    |> Enum.join()\n    |> String.to_integer()\n  end\nend\n    ","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75915,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    String.codepoints(digits)\n    |> Enum.chunk_every(5, 1)\n    |> Enum.map(&Enum.join(&1))\n    |> Enum.map(&String.to_integer(&1))\n    |> Enum.max()\n  end\nend\n    ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75916,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    digits \n    |> String.to_charlist()\n    |> Enum.chunk_every(5, 1, :discard)   \n    |> Enum.map(&List.to_string\/1)\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.max()\n  end\nend\n    ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75917,"user_id":null,"body":"defmodule LargestInSeries do\n\n   def validLength?(list) do\n    Enum.count(list) === 5\n  end\n\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n  digits\n    |> String.codepoints()\n    |> Enum.chunk_every(5, 1)\n    |> Enum.filter(&validLength?\/1)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max()\n    |> String.to_integer\n  end\nend\n    ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75918,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    digits\n    |> String.codepoints()\n    |> Enum.chunk_every(5,1)\n    |> Enum.map(&(Enum.join(&1)))\n    |> Enum.map(&(String.to_integer(&1)))\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75919,"user_id":null,"body":"defmodule LargestInSeries do\n  @spec solution(String.t) :: integer\n  def solution(digits) do\n    digits\n    |> String.codepoints()\n    |> Enum.chunk_every(5, 1)\n    |> Stream.map(&Enum.join\/1)\n    |> Stream.map(&String.to_integer\/1)\n    |> Enum.max()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75920,"user_id":null,"body":"defmodule LargestInSeries do\n  @chunk_amount 5\n  \n  @spec solution(String.t()) :: integer()\n  def solution(digits) do\n    digits\n    |> to_charlist()\n    |> Enum.chunk_every(@chunk_amount, 1, :discard)\n    |> Enum.map(&List.to_integer\/1)\n    |> Enum.max()\n  end\nend\n    ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5168bb5dfe9a00b126000018":[{"id":75921,"user_id":null,"body":"defmodule Solution do\n  def solution(s), do: String.reverse(s)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75922,"user_id":527,"body":"defmodule Solution do\n  @spec solution(String.t) :: String.t\n  def solution(s), do: String.reverse(s)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75923,"user_id":null,"body":"defmodule Solution do\n  def solution(string) do\n    to_charlist(string)\n      |> Enum.reverse\n      |> List.to_string\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75924,"user_id":null,"body":"defmodule Solution do\n  def solution(string) do\n    string\n      |> String.split(\"\")\n      |> Enum.reverse()\n      |> Enum.join()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75925,"user_id":null,"body":"defmodule Solution do\n  def solution(string) do\n    string |> String.to_charlist() |> Enum.reverse() |> List.to_string()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75926,"user_id":527,"body":"defmodule Solution do\n  def solution(string) do\n    String.reverse(string)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75927,"user_id":null,"body":"defmodule Solution do\n  def solution(string), do: String.reverse(string)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75928,"user_id":null,"body":"defmodule Solution do\n  def solution(string) do\n    reverse(\"\", string)\n  end\n  \n  def solution(acc, \"\") do\n    acc\n  end\n\n  def solution(acc, <<char>> <> rest) do\n    reverse(<<char>> <> acc, rest)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75929,"user_id":null,"body":"defmodule Solution do\n  def solution([]), do: []\n  def solution([hd | tl]), do: reverse(tl) ++ [hd]\n  def solution(string), do: string |> to_charlist() |> reverse() |> to_string()\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75930,"user_id":null,"body":"defmodule Solution do\n  def solution(string) do String.reverse(string)\n    # Code Here\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"517abf86da9663f1d2000003":[{"id":75931,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n  \t[ first | tail ] = String.split(str, [\"-\", \"_\"])\n    [ first | Enum.map(tail, &String.capitalize\/1) ]\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75932,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    Regex.replace(~r\/[-_](\\w)\/, str, fn _, w -> String.upcase(w) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75933,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    # Your code here\n    list=String.split(str,[\"-\",\"_\"])\n    [a|b]=list\n    c=Enum.map(b,fn x -> String.capitalize(x) end) \n    list1=[a|c]\n    str1=List.to_string(list1)\n  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75934,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    if String.contains?(str, \"-\") do\n      String.split(str, \"-\")\n      |> Enum.with_index()\n      |> Enum.map(fn {x, i} ->\n        if i === 0 do\n          x\n        else\n          String.capitalize(x)\n        end\n      end)\n      |> Enum.join(\"\")\n    else\n      String.split(str, \"_\")\n      |> Enum.with_index()\n      |> Enum.map(fn {x, i} ->\n        if i === 0 do\n          x\n        else\n          String.capitalize(x)\n        end\n      end)\n      |> Enum.join(\"\")\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75935,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    str\n    |> String.replace(\"-\", \"_\")\n    |> String.split(\"_\")\n    |> Enum.reduce(fn word, acc -> acc <> String.capitalize(word) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75936,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    str\n     |> String.replace(\"_\", \"\")\n     |> String.replace(~r\/-([A-Za-z])\/, &String.upcase\/1)\n     |> String.replace(\"-\", \"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75937,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    Regex.replace(~r\/[-_]([A-Za-z])\/, str, fn _, x -> String.upcase(x) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75938,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    String.split(str, [\"-\", \"_\", \" \"]) |> Enum.reduce(fn (x, acc) -> acc <> String.capitalize(x) end)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75939,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n   pattern = :binary.compile_pattern([\"-\", \"_\"])\n   \n   strt = String.split(str, pattern)\n   [h|t] = strt\n   \n   h = to_string(h)\n   \n   strt = Enum.map_every(t, 1, &String.capitalize(&1))\n   |> to_string()\n   \n   str = h <> strt\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75940,"user_id":null,"body":"defmodule CamelCase do\n  def to_camel_case(str) do\n    String.split(str, [\"-\", \"_\"]) \n    |> Enum.with_index \n    |> Enum.map(fn {value, index} -> if index > 0, do: String.capitalize(value), else: value end)\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"51b6249c4612257ac0000005":[{"id":75941,"user_id":null,"body":"defmodule Solution do\n\n    def solution(\"\") do 0 end\n    def solution(\"CM\" <> tail) do 900 + decode(tail) end\n    def solution(\"M\" <> tail) do 1000 + decode(tail) end\n    def solution(\"CD\" <> tail) do 400 + decode(tail) end\n    def solution(\"D\" <> tail) do 500 + decode(tail) end\n    def solution(\"XC\" <> tail) do 90 + decode(tail) end\n    def solution(\"XL\" <> tail) do 40+ decode(tail) end\n    def solution(\"C\" <> tail) do 100 + decode(tail) end\n    def solution(\"L\" <> tail) do 50+ decode(tail) end\n    def solution(\"IX\" <> tail) do 9+ decode(tail) end\n    def solution(\"IV\" <> tail) do 4+ decode(tail) end\n    def solution(\"X\" <> tail) do 10+ decode(tail) end\n    def solution(\"V\" <> tail) do 5+ decode(tail) end\n    def solution(\"I\" <> tail) do 1+ decode(tail) end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75942,"user_id":null,"body":"defmodule Solution do\n\n  @numbers %{\n    \"M\" => 1000,\n    \"D\" => 500,\n    \"C\" => 100,\n    \"L\" => 50,\n    \"X\" => 10,\n    \"V\" => 5,\n    \"I\" => 1\n  }\n  \n  def solution(roman) do\n    roman \n    |> String.graphemes()\n    |> Enum.map(&@numbers[&1])\n    |> Enum.reverse()\n    |> Enum.scan(& if &2 > &1, do: -&1, else: &1)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75943,"user_id":null,"body":"defmodule Solution do\n  def solution(x), do: roman(x)\n\n  def roman(roman_str) do\n    roman(roman_str, 0)\n  end\n\n  defp roman(\"\", num), do: num\n  defp roman(\"M\" <> str, num), do: roman(str, num + 1000)\n  defp roman(\"CM\" <> str, num), do: roman(str, num + 900)\n  defp roman(\"D\" <> str, num), do: roman(str, num + 500)\n  defp roman(\"CD\" <> str, num), do: roman(str, num + 400)\n  defp roman(\"C\" <> str, num), do: roman(str, num + 100)\n  defp roman(\"XC\" <> str, num), do: roman(str, num + 90)\n  defp roman(\"L\" <> str, num), do: roman(str, num + 50)\n  defp roman(\"XL\" <> str, num), do: roman(str, num + 40)\n  defp roman(\"X\" <> str, num), do: roman(str, num + 10)\n  defp roman(\"IX\" <> str, num), do: roman(str, num + 9)\n  defp roman(\"V\" <> str, num), do: roman(str, num + 5)\n  defp roman(\"IV\" <> str, num), do: roman(str, num + 4)\n  defp roman(\"I\" <> str, num), do: roman(str, num + 1)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75944,"user_id":null,"body":"defmodule Solution do\n\n    @numerals %{\n      \"I\" => 1,\n      \"V\" => 5,\n      \"X\" => 10,\n      \"L\" => 50,\n      \"C\" => 100,\n      \"D\" => 500,\n      \"M\" => 1000\n    }\n   \n    def solution(roman) do\n      roman\n      |> String.codepoints\n      |> Stream.map(&(@numerals[&1]))\n      |> Stream.scan(fn x, last -> if x > last, do: x - last * 2, else: x end)\n      |> Enum.sum\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75945,"user_id":null,"body":"defmodule Solution do\n  @roman_numerals %{\n    \"I\" => 1,\n    \"V\" => 5,\n    \"X\" => 10,\n    \"L\" => 50,\n    \"C\" => 100,\n    \"D\" => 500,\n    \"M\" => 1_000\n  }\n\n  def solution(roman_str) do\n    roman_str\n    |> String.graphemes()\n    |> Enum.map(&@roman_numerals[&1])\n    |> Enum.reverse()\n    |> Stream.scan(fn x, prev -> prev > x && -x || x end)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75946,"user_id":null,"body":"defmodule Solution do\n   \n    def solution(roman) do\n    roman\n    |> String.replace(\"CM\", \"CCCCCCCCC\")\n    |> String.replace(\"M\", \"DD\")\n    |> String.replace(\"CD\", \"CCCC\")\n    |> String.replace(\"D\", \"CCCCC\")\n    |> String.replace(\"XD\", \"XXXXXXXXX\")\n    |> String.replace(\"C\", \"LL\")\n    |> String.replace(\"XL\", \"XXXX\")\n    |> String.replace(\"L\", \"XXXXX\")\n    |> String.replace(\"IX\", \"IIIIIIIII\")\n    |> String.replace(\"X\", \"VV\")\n    |> String.replace(\"IV\", \"IIII\")\n    |> String.replace(\"V\", \"IIIII\")\n    |> String.graphemes()\n    |> Enum.count()    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75947,"user_id":null,"body":"defmodule Solution do\n\n  def solution(roman) do\n    map = %{\"I\" => 1, \"V\" => 5, \"X\" => 10, \"L\" => 50, \"C\" => 100, \"D\" => 500, \"M\" => 1000, \"IV\" => 4, \"IX\" => 9, \"CD\" => 400, \"CM\" => 900, \"XC\" => 90, \"XL\" => 40}\n    Regex.split(~r\/CM|XC|XL|CD|IV|IX|.\/, roman, include_captures: true, trim: true)\n      |> Enum.map( &(map[&1]) )\n      |> Enum.reduce( &(&1 + &2) )\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75948,"user_id":null,"body":"defmodule Solution do\n   \n    def solution(roman) do\n      map = %{\n        \"I\" => 1,\n        \"V\" => 5,\n        \"X\" => 10,\n        \"L\" => 50,\n        \"C\" => 100,\n        \"D\" => 500,\n        \"M\" => 1000\n        }\n        \n      numbers = Enum.with_index(Enum.map(String.graphemes(roman), fn(r) ->\n        Map.fetch!(map, r)\n      end))\n      \n      Enum.reduce(numbers, 0,\n        fn({d, index}, acc) ->\n          if index < Enum.count(numbers) - 1 do\n            next_digit = List.first(Tuple.to_list(Enum.at(numbers, index + 1)))\n            if d >= next_digit do\n              acc + d\n            else\n              acc - d\n            end\n          else\n            acc + d\n          end\n        end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75949,"user_id":null,"body":"defmodule Solution do\n    \n    def solution(roman) do\n      roman_cleaned = cond do\n        is_bitstring(roman) -> String.to_charlist(roman)\n        true -> roman\n      end\n      decode_rec(roman_cleaned)\n    end\n    \n    def solution_rec(roman) do\n      case roman do\n        [?M | tail] -> decode_rec(tail) + 1000\n        [?D | tail] -> decode_rec(tail) + 500\n        [?C | tail] ->\n          cond do\n            (tail -- (tail -- 'MD')) == [] ->\n              decode_rec(tail) + 100\n            true ->\n              decode_rec(tail) - 100\n          end\n        [?L | tail] -> decode_rec(tail) + 50\n        [?X | tail] ->\n          cond do\n            (tail -- (tail -- 'CL')) == [] ->\n              decode_rec(tail) + 10\n            true ->\n              decode_rec(tail) - 10\n          end\n        [?V | tail] -> decode_rec(tail) + 5\n        [?I | tail] ->\n          cond do\n            (tail -- (tail -- 'XV')) == [] ->\n              decode_rec(tail) + 1\n            true ->\n              decode_rec(tail) - 1\n          end\n        [] -> 0\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75950,"user_id":null,"body":"defmodule Solution do\n  @parts %{\n    \"CM\" => 900,\n    \"CD\" => 400,\n    \"XC\" => 90,\n    \"XL\" => 40,\n    \"IX\" => 9,\n    \"IV\" => 4,\n    \"M\" => 1000,\n    \"D\" => 500,\n    \"C\" => 100,\n    \"L\" => 50,\n    \"X\" => 10,\n    \"V\" => 5,\n    \"I\" => 1\n  }\n  def solution(s),\n    do:\n      Regex.scan(~r\/CM|CD|XC|XL|IX|IV|M|D|C|L|X|V|I\/, s)\n      |> Enum.map(fn [bit] -> @parts[bit] end)\n      |> Enum.sum()\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"51b62bf6a9c58071c600001b":[{"id":75951,"user_id":null,"body":"defmodule ArabicToRoman do\n  @roman_numerals [\n    {\"M\", 1_000},\n    {\"CM\",  900},\n    {\"D\",   500},\n    {\"CD\",  400},\n    {\"C\",   100},\n    {\"XC\",   90},\n    {\"L\",    50},\n    {\"XL\",   40},\n    {\"X\",    10},\n    {\"IX\",    9},\n    {\"V\",     5},\n    {\"IV\",    4},\n    {\"I\",     1}\n  ]\n\n  def solution(n) do\n    Enum.reduce(@roman_numerals, {n, \"\"}, fn {rom, val}, {n, acc} ->\n      {rem(n, val), acc <> String.duplicate(rom, div(n, val))}\n    end)\n    |> elem(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75952,"user_id":null,"body":"defmodule ArabicToRoman do\n  @roman_numerals [\n    {\"M\", 1_000},\n    {\"CM\",  900},\n    {\"D\",   500},\n    {\"CD\",  400},\n    {\"C\",   100},\n    {\"XC\",   90},\n    {\"L\",    50},\n    {\"XL\",   40},\n    {\"X\",    10},\n    {\"IX\",    9},\n    {\"V\",     5},\n    {\"IV\",    4},\n    {\"I\",     1}\n  ]\n\n  def solution(n), do: romnums(@roman_numerals, n, \"\")\n  defp romnums([], 0, acc), do: acc\n  \n  defp romnums([{romn, val} | tail], n, acc) do \n    romnums(tail, rem(n, val), acc <> String.duplicate(romn, div(n, val)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75953,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(0), do: \"\"\n  def solution(number) when number >= 1000, do: \"M\" <> solution(number - 1000)\n  def solution(number) when number >= 900, do: \"CM\" <> solution(number - 900)\n  def solution(number) when number >= 500, do: \"D\" <> solution(number - 500)\n  def solution(number) when number >= 400, do: \"CD\" <> solution(number - 400)\n  def solution(number) when number >= 100, do: \"C\" <> solution(number - 100)\n  def solution(number) when number >= 90, do: \"XC\" <> solution(number - 90)\n  def solution(number) when number >= 90, do: \"XC\" <> solution(number - 90)\n  def solution(number) when number >= 50, do: \"L\" <> solution(number - 50)\n  def solution(number) when number >= 40, do: \"XL\" <> solution(number - 40)\n  def solution(number) when number >= 10, do: \"X\" <> solution(number - 10)\n  def solution(number) when number >= 9, do: \"IX\" <> solution(number - 9)\n  def solution(number) when number >= 5, do: \"V\" <> solution(number - 5)\n  def solution(number) when number >= 4, do: \"IV\" <> solution(number - 4)\n  def solution(number) when number >= 1, do: \"I\" <> solution(number - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75954,"user_id":null,"body":"defmodule ArabicToRoman do\n  @list [\n    {1000, \"M\"},\n    {900, \"CM\"},\n    {500, \"D\"},\n    {400, \"CD\"},\n    {100, \"C\"},  \n    {90, \"XC\"},\n    {50, \"L\"},\n    {40, \"XL\"},\n    {10, \"X\"},  \n    {9, \"IX\"}, \n    {5, \"V\"},  \n    {4, \"IV\"}, \n    {1, \"I\"}\n  ]\n\n  def solution(number) do\n    {_, result} = \n      Enum.reduce(@list, {number, \"\"}, fn {key, value}, {next_num, res} ->\n        case div(next_num, key) do\n         0 -> {next_num, res}\n      \n        times->\n          {rem(next_num, key), res <> String.duplicate(value, times)}\n          \n        end   \n      end)\n      \n    result\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75955,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(number) do\n    0..number - 1 \n    |> Enum.map(fn (_) -> \"I\" end)\n    |> Enum.join\n    |> String.replace(~r\/IIIII\/, \"V\")\n    |> String.replace(~r\/IIII\/, \"IV\")\n    |> String.replace(~r\/VV\/, \"X\")\n    |> String.replace(~r\/VIV\/, \"IX\")\n    |> String.replace(~r\/XXXXX\/, \"L\")\n    |> String.replace(~r\/XXXX\/, \"XL\")\n    |> String.replace(~r\/LL\/, \"C\")\n    |> String.replace(~r\/LXL\/, \"XC\")\n    |> String.replace(~r\/CCCCC\/, \"D\")\n    |> String.replace(~r\/CCCC\/, \"CD\")\n    |> String.replace(~r\/DD\/, \"M\")\n    |> String.replace(~r\/DCD\/, \"CM\")\n  end\n  \n  \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75956,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(n) do\n    digits = case Integer.digits(n) do\n      [d1] -> [0, 0, 0, d1]\n      [d1, d2] -> [0, 0, d1, d2]\n      [d1, d2, d3] -> [0, d1, d2, d3]\n      digits -> digits\n    end\n\n    String.duplicate(\"M\", Enum.at(digits, 0)) # thousands\n    <>\n    roman(\"C\", \"D\", \"M\", Enum.at(digits, 1)) # hundreds\n    <>\n    roman(\"X\", \"L\", \"C\", Enum.at(digits, 2)) # tens\n    <>\n    roman(\"I\", \"V\", \"X\", Enum.at(digits, 3)) # ones\n  end\n  \n  defp roman(a, b, c, n) do\n    case n do\n      0 -> \"\"\n      1 -> a\n      2 -> a <> a\n      3 -> a <> a <> a\n      4 -> a <> b\n      5 -> b\n      6 -> b <> a\n      7 -> b <> a <> a\n      8 -> b <> a <> a <> a\n      9 -> a <> c\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75957,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(number) do\n    {roman, _other} = number \n     |> get_k\n     |> get_roman_part(100,\"M\",\"D\",\"C\")\n     |> get_roman_part(10, \"C\",\"L\",\"X\")\n     |> get_roman_part(1, \"X\",\"V\",\"I\")\n\n    roman\n    \n  end\n  \n  def get_k(number) do\n    {String.duplicate(\"M\",div(number,1000)), rem(number,1000)}\n  end\n  \n  def get_roman_part({roman, num}, ord, bigger, middle, smaller) do\n    number = div(num,ord)\n    roman_new = get_roman(number, bigger, middle, smaller)\n    \n    {roman<>roman_new, rem(num, ord)}\n  end\n  \n  def get_roman(number, bigger, middle, smaller) do\n    cond do\n      number in 1..3 -> String.duplicate(\"#{smaller}\", number)\n      number == 4 -> \"#{smaller}#{middle}\"\n      number == 5 -> \"#{middle}\"\n      number in 6..8 -> \"#{middle}\" <> String.duplicate(\"#{smaller}\", number - 5)\n      number == 9 -> \"#{smaller}#{bigger}\"\n      number == 0 -> \"\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75958,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(number) do\n  number\n  |> to_string()\n  |> String.split(\"\", trim: true)\n  |> Enum.reverse()\n  |> Enum.with_index()\n  |> Enum.reduce(\"\", fn {value, index}, acc ->\n      value\n      |> String.to_integer()\n      |> parse(index)\n      |> Kernel.<>(acc)\n    end)\n  end\n\n  def parse(num, 0) when num < 4, do: String.duplicate(\"I\", num)\n  def parse(num, 0) when num == 4, do: \"IV\"\n  def parse(num, 0) when num < 9, do: \"V\" <> String.duplicate(\"I\", num - 5)\n  def parse(num, 0) when num == 9, do: \"IX\"\n  \n  def parse(num, 1) when num < 4, do: String.duplicate(\"X\", num)\n  def parse(num, 1) when num == 4, do: \"XL\"\n  def parse(num, 1) when num < 9, do: \"L\" <> String.duplicate(\"X\", num - 5)\n  def parse(num, 1) when num == 9, do: \"XC\"\n\n  def parse(num, 1) when num < 4, do: String.duplicate(\"X\", num)\n  def parse(num, 1) when num == 4, do: \"XL\"\n  def parse(num, 1) when num < 9, do: \"L\" <> String.duplicate(\"X\", num - 5)\n  def parse(num, 1) when num == 9, do: \"XC\"\n  \n  def parse(num, 2) when num < 4, do: String.duplicate(\"C\", num)\n  def parse(num, 2) when num == 4, do: \"CD\"\n  def parse(num, 2) when num < 9, do: \"D\" <> String.duplicate(\"C\", num - 5)\n  def parse(num, 2) when num == 9, do: \"CM\"\n  \n  def parse(num, 3) when num < 4, do: String.duplicate(\"M\", num)\n  \n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75959,"user_id":null,"body":"defmodule ArabicToRoman do\n\n\n\n def convert_step(number, acc, []) do\n   acc\n end\n \n def convert_step(number, acc, [{normal,roman}| tail] ) do\n   case number do\n     0 -> acc\n     x ->\n       cnt = div(x,normal)\n       convert_step(x - cnt*normal,acc<>String.duplicate(roman,cnt),tail)\n  end  \n end\n\n  def solution(number) do\n  table = [{1000,\"M\"},{900,\"CM\"},{500,\"D\"},{400,\"CD\"},{100,\"C\"},{90,\"XC\"},{50,\"L\"},{40,\"XL\"},{10,\"X\"},{9,\"IX\"},{5,\"V\"},{4,\"IV\"},{1,\"I\"}]\n    convert_step(number,\"\",table)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75960,"user_id":null,"body":"defmodule ArabicToRoman do\n  def solution(number) when number > 0 do\n    roman(number, \"\")\n  end\n  \n  defp roman(number, acc) when number === 0, do: acc\n  \n  defp roman(number, acc) when number >= 1000, do: roman(number-1000, acc <> \"M\")\n\n  defp roman(number, acc) when number >= 900, do: roman(number-900, acc <> \"CM\")\n  \n  defp roman(number, acc) when number >= 500, do: roman(number-500, acc <> \"D\")\n  \n  defp roman(number, acc) when number >= 400, do: roman(number-400, acc <> \"CD\")\n  \n  defp roman(number, acc) when number >= 100, do: roman(number-100, acc <> \"C\")\n\n  defp roman(number, acc) when number >= 90, do: roman(number-90, acc <> \"XC\")\n\n  defp roman(number, acc) when number >= 50, do: roman(number-50, acc <> \"L\")\n  \n  defp roman(number, acc) when number >= 40, do: roman(number-40, acc <> \"XL\")\n  \n  defp roman(number, acc) when number >= 10, do: roman(number-10, acc <> \"X\")\n  \n  defp roman(number, acc) when number === 9, do: roman(number-9, acc <> \"IX\")\n  \n  defp roman(number, acc) when number >= 5, do: roman(number-5, acc <> \"V\")\n  \n  defp roman(number, acc) when number === 4, do: roman(number-4, acc <> \"IV\")\n  \n  defp roman(number, acc) when number > 0, do: roman(number-1, acc <> \"I\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"51f2d1cafc9c0f745c00037d":[{"id":75961,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, ending) do\n    String.ends_with?(str, ending)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75962,"user_id":null,"body":"defmodule EndsWith, do: def solution(x, y), do: String.ends_with?(x, y)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75963,"user_id":527,"body":"defmodule EndsWith, do: defdelegate solution(str, ending), to: String, as: :ends_with?","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75964,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, ending), do: str |> String.ends_with?(ending)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75965,"user_id":527,"body":"defmodule EndsWith do\n  def solution(str, ending), do: String.ends_with?(str, ending)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75966,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, pf), do: String.ends_with?(str, pf)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75967,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, ending), do: _endswith(str, ending)\n\n  defp _endswith(str, ending) when str == ending, do: true\n\n  defp _endswith(<<_::utf8, tail::binary>>, ending) do\n    cond do\n      String.length(tail) < String.length(ending) -> false\n      ending == tail -> true\n      true -> _endswith(tail, ending)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75968,"user_id":null,"body":"defmodule EndsWith do\n  def solution(_str, \"\") do\n    true\n  end\n  \n  def solution(str, ending) when str == ending do\n    true\n  end\n  \n  def solution(str, ending) do\n    if String.length(str) <= String.length(ending) do\n      false\n    else\n      [_head | tail] = to_charlist(str)\n      solution(to_string(tail), ending)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75969,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, ending) do\n    {_, regex} = Regex.compile(\".*\" <> Regex.escape(ending) <> \"\\\\z\")\n    String.match?(str, regex)\n   \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75970,"user_id":null,"body":"defmodule EndsWith do\n  def solution(str, ending) do\n    [str, ending] = [str, ending]\n    |> Enum.map(&String.codepoints\/1)\n    |> Enum.map(&Enum.reverse\/1)\n    _solution(str, ending)\n  end\n\n  defp _solution([], []), do: true\n  defp _solution(_, []), do: true\n  defp _solution([], _), do: false\n  defp _solution([h1|t1], [h2|t2]) when h1 == h2,\n  do: _solution(t1, t2)\n  defp _solution(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"51f9d93b4095e0a7200001b8":[{"id":75971,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(\"Zach\"), do: 18\n  def how_many_lightsabers_do_you_own(_), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75972,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(\"Zach\"), do: 18\n  def how_many_lightsabers_do_you_own(_name), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75973,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name)\n  def how_many_lightsabers_do_you_own(\"Zach\"), do: 18\n  def how_many_lightsabers_do_you_own(_), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75974,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) when is_binary(name) do\n    if String.equivalent?(name, \"Zach\") do\n      18\n    else\n      0\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75975,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) do\n    if name == \"Zach\", do: 18, else: 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75976,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) do\n    case name do\n      \"Zach\" ->\n        18\n      _ ->\n        0\n     end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75977,"user_id":1566,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) do\n    name == \"Zach\" && 18 || 0 \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75978,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) do\n    # your solution is here\n    %{ \"Zach\" => 18 }[name] || 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75979,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(\"Zach\") do\n    18\n  end\n\n  def how_many_lightsabers_do_you_own(_) do\n    0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75980,"user_id":null,"body":"defmodule Lightsabers do\n  def how_many_lightsabers_do_you_own(name) when name == \"Zach\", do: 18\n  def how_many_lightsabers_do_you_own(_name), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"521c2db8ddc89b9b7a0000c1":[{"id":75981,"user_id":null,"body":"defmodule Matrix do\n  def horiz_reflect(m), do: m |> Enum.reverse\n  def transpose(m),     do: m |> List.zip |> Enum.map(&Tuple.to_list(&1))\n  def rotate(m),        do: m |> Matrix.transpose |> Matrix.horiz_reflect\nend\n\ndefmodule Snail do\n  def snail([]), do: []\n  def snail( [h|t] ), do: h ++ (t |> Matrix.rotate |> snail)\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75982,"user_id":2098,"body":"defmodule Snail do\n  def snail(matrix) when matrix == [] or length(length(matrix)) == 1, do: matrix\n  \n  def snail([first_row | other]) do\n    {second_row, other} = Enum.reduce(other, {[], []}, &rev_head_tail(&1, &2))\n    Enum.concat([first_row, Enum.reverse(second_row), snail(other)])\n  end\n  \n  defp rev_head_tail(line, {heads, tails}) do\n    [head | tail] = Enum.reverse(line)\n    {[head | heads], [tail | tails]}\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75983,"user_id":null,"body":"defmodule Snail do\n\n  @doc \"\"\"\n\n  Converts a matrix to a list by walking around its edges from the top-left going clockwise.\n\n  ![snail walk](http:\/\/www.haan.lu\/files\/2513\/8347\/2456\/snail.png)\n\n  iex> Snail.snail( [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] )\n  [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]\n\n  \"\"\"\n\n  @spec snail( [ [ term ] ] ) :: [ term ]\n\n  def snail( matrix ) do\n    case matrix do\n    \t[] -> matrix\n      [head | tail] -> head ++ snail(tail |> List.zip |> Enum.map(&Tuple.to_list\/1) |> Enum.reverse)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75984,"user_id":1774,"body":"defmodule Snail do\n\n  @doc \"\"\"\n\n  Converts a matrix to a list by walking around its edges from the top-left going clockwise.\n\n  ![snail walk](http:\/\/www.haan.lu\/files\/2513\/8347\/2456\/snail.png)\n\n  iex> Snail.snail( [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] )\n  [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]\n\n  \"\"\"\n\n  @spec snail( [ [ term ] ] ) :: [ term ]\n  def snail(matrix), do: do_snail(matrix, [])\n  \n  defp do_snail([], nums), do: nums\n  defp do_snail(matrix, nums) do\n    new_matrix =\n      matrix\n      |> List.delete_at(0)\n      |> rotate\n    do_snail(new_matrix, nums ++ List.first(matrix))\n  end\n  \n  defp rotate(matrix) do\n    matrix\n    |> Enum.map(&Enum.reverse\/1)\n    |> List.zip\n    |> Enum.map(&Tuple.to_list(&1))\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75985,"user_id":null,"body":"defmodule Snail do\n  def snail(matrix), do: tail_snail(matrix, [])\n\n  defp tail_snail([], acc), do: acc\n  defp tail_snail([head | tail], acc) do\n    tail\n    |> List.zip\n    |> Enum.map(&Tuple.to_list(&1))\n    |> Enum.reverse\n    |> tail_snail(acc ++ head)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75986,"user_id":null,"body":"defmodule Matrix do\n  def rotate(matrix), do:\n    matrix\n      |> List.zip\n      |> Enum.map(&Tuple.to_list(&1))\n      |> Enum.reverse\nend\n\ndefmodule Snail do\n  def snail([]), do: []\n  def snail( [h|t] ), do: h ++ (t |> Matrix.rotate |> snail)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75987,"user_id":null,"body":"defmodule Snail do\n  def snail(matrix) do\n    matrix\n    |> to_indexed_map\n    |> spiral([ &right\/1, \n                &down\/1, \n                &left\/1, \n                &up\/1\n              ])\n  end\n\n  defp spiral(map, acc \\\\ [], posistion \\\\ {-1,0}, directions)\n  defp spiral(map, acc, _, _) when map == %{}, do: acc\n  defp spiral(map, acc, position, directions) do\n    [current_dir | next_dirs] = directions\n    next_position = position |> current_dir.()\n    case Map.pop(map, next_position) do\n      {nil, map}   -> spiral(map, acc, position, next_dirs ++ [current_dir])\n      {value, map} -> spiral(map, acc ++ [value], next_position, directions)\n    end\n  end\n\n  defp left({col, row}),  do: {col-1, row}\n  defp right({col, row}), do: {col+1, row}\n  defp up({col, row}),    do: {col, row-1}\n  defp down({col, row}),  do: {col, row+1}\n\n  def to_indexed_map(matrix) do\n    # Enum.with_index didn't work on codewars for some reason :\/\n    # that's why I made this contrivied solution using Enum.map_reduce\n    matrix\n    |> Enum.map_reduce(0, fn elem, row ->\n        {Enum.map_reduce(elem, 0, & {%{{&2, row} => &1}, &2 + 1}) \n        |> elem(0), row + 1} end) |> elem(0)\n    |> List.flatten\n    |> List.insert_at(0, Map.new)\n    |> Enum.reduce(&Map.merge\/2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75988,"user_id":null,"body":"defmodule Snail do\n  def snail([[]]), do: []\n  def snail([head|[]]), do: head \n  def snail([head | tail]), do: head ++ snail(rot(tail))\n  \n  defp rot(mtrx) do\n    mtrx\n    |> Enum.zip()\n    |> Enum.reverse()\n    |> Enum.map(&Tuple.to_list(&1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75989,"user_id":null,"body":"defmodule Snail do\n  def snail([[]]), do: []\n\n  def snail(field) do\n    position = [0, 0]\n    place = place_on(field, position)\n    trail = add_to_trail([], position, place)\n    snail(field, \"E\", position, trail, length(List.flatten(field)) - 1)\n  end\n\n  def snail(_field, _direction, _position, trail, _steps_count = 0) do\n    visited_places(trail)\n  end\n\n  def snail(field, direction, position, trail, steps_count) do\n    direction =\n      if next_step_out?(field, direction, position) ||\n           next_step_visited?(direction, position, trail),\n         do: turn_right(direction),\n         else: direction\n\n    position = make_step(direction, position)\n    place = place_on(field, position)\n    trail = add_to_trail(trail, position, place)\n\n    snail(field, direction, position, trail, steps_count - 1)\n  end\n\n  def next_step_out?(field, direction, position) do\n    [x, y] = make_step(direction, position)\n    x >= length(field) || y >= length(field) || x < 0 || y < 0\n  end\n\n  def next_step_visited?(direction, position, trail) do\n    new_position = make_step(direction, position)\n    all = fn :get, data, next -> Enum.map(data, next) end\n    visited_positions = get_in(trail, [all, :position])\n    Enum.member?(visited_positions, new_position)\n  end\n\n  def turn_right(\"N\"), do: \"E\"\n  def turn_right(\"E\"), do: \"S\"\n  def turn_right(\"S\"), do: \"W\"\n  def turn_right(\"W\"), do: \"N\"\n\n  def make_step(\"N\", [x, y]), do: [x - 1, y]\n  def make_step(\"E\", [x, y]), do: [x, y + 1]\n  def make_step(\"S\", [x, y]), do: [x + 1, y]\n  def make_step(\"W\", [x, y]), do: [x, y - 1]\n\n  def place_on(field, [x, y]) do\n    field |> Enum.at(x) |> Enum.at(y)\n  end\n\n  def add_to_trail(trail, position, place) do\n    trail ++ [%{position: position, place: place}]\n  end\n\n  def visited_places(trail) do\n    all = fn :get, data, next -> Enum.map(data, next) end\n    get_in(trail, [all, :place])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75990,"user_id":null,"body":"defmodule Snail do\n  def snail([[]]) do [] end\n  def snail([[h]]) do [h] end\n  def snail(matrix) do\n\t\tList.flatten([find_l(matrix) | snail(rotate(submatrix(matrix)))])\n\tend\n\n\t#finds the 'l' first row + last element of all other rows\n\tdef find_l(list) do List.flatten(find_l(list, 0)) end\n\tdef find_l([list | tail], 0) do [list | find_l(tail, 1)] end\n\tdef find_l([], 1) do [] end\n\tdef find_l([[h|t] | tail], _) do\n\t\tcase t do\n\t\t\t[] -> [h | find_l(tail, 1)]\n\t\t\t_ -> find_l([t| tail], 1)\n\t\tend\n\tend\n\n\t#returns the submatrix n-1 in the bottom left\n\tdef submatrix([h|t]) do Enum.chunk_every(submatrix([h|t], 0), length(h)-1) end\n\tdef submatrix([_ | tail], 0) do submatrix(tail, 1) end\n\tdef submatrix([], 1) do [] end\n\tdef submatrix([[h|t] | tail], _) do\n\t\tcase t do\n\t\t\t[] -> submatrix(tail, 1)\n\t\t\t_ -> [h | submatrix([t| tail], 1)]\n\t\tend\n\tend\n  \n  #mirrors and rotates matrix\n\tdef rotate(list) do Enum.reverse(rotate_s(list)) end\n\tdef rotate_s([]) do [] end\n\tdef rotate_s([h|t]) do [Enum.reverse(h) | rotate_s(t)] end\n\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"523b4ff7adca849afe000035":[{"id":75991,"user_id":null,"body":"defmodule HelloWorld do\n  def greet, do: \"hello world!\"\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75992,"user_id":null,"body":"defmodule HelloWorld do\n  def greet do\n    world = \"#{h}#{e}#{l}#{l}#{o}\"\n    hello = \"#{w}#{o}#{r}#{l}#{d!}\"\n    \n    world <> \" \" <> hello\n  end\n  \n  def h, do: \"h\"\n  def e, do: \"e\"\n  def ll, do: \"ll\"\n  def o, do: \"o\"\n  \n  def w, do: \"w\"\n  ### o, do: \"o\"\n  def r, do: \"r\"\n  def l, do: \"l\"\n  def d!, do: \"d!\"\n  \n  \nend\n\n# hello world!\n# dlrow olleh!","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75993,"user_id":527,"body":"defmodule HelloWorld do\n  def greet do\n    \"hello world!\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75994,"user_id":null,"body":"defmodule HelloWorld do\n  def greet do\n    # meh\n    \"hello world!\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75995,"user_id":null,"body":"defmodule HelloWorld do\n\n  use Bitwise\n\n  @mystery_number 3160918205608148134863401777738869455736604097952153704\n\n  def greet do\n    process(@mystery_number, \"\")\n  end\n  \n  defp process(0, acc), do: acc\n  defp process(number, acc), do: process(number >>> 16, acc <> <<number :: 8>>)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75996,"user_id":null,"body":"defmodule HelloWorld do\n  def greet do\n    <<104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33>>\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75997,"user_id":null,"body":"defmodule HelloWorld do\n  def greet do\n    # I get paid to get work done. Efficiently and simple.\n    \"hello world!\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75998,"user_id":null,"body":"defmodule HelloWorld do\n  def greet do\n    String.reverse(\"!dlrow olleh\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75999,"user_id":1724,"body":"defmodule HelloWorld do\n  def greet, do: <<104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33>>\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76000,"user_id":null,"body":"defmodule HelloWorld do\n  # Captures the position behind an uppercase letter,\n  # but does not match the regex word boundary.\n  @r ~r\/(?!\\b)(?=[A-Z])\/\n  \n  # Elixir module atoms start with 'Elixir.'\n  @s Module.split(__MODULE__) |> List.first\n     |> String.replace(@r, \" \") |> String.downcase\n  \n  def greet, do: \"#{@s}!\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"523b623152af8a30c6000027":[{"id":76001,"user_id":null,"body":"defmodule SimpleMath do\n\tdef square(a), do: a * a\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76002,"user_id":1774,"body":"defmodule SimpleMath do\n  def square(n), do: :math.pow(n, 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76003,"user_id":492,"body":"defmodule SimpleMath do\n  def square(n) do\n    n*n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76004,"user_id":null,"body":"defmodule Mathematician do\n  defmacro __before_compile__ (_env) do\n    quote do\n      def square(number) do\n        number |> :math.pow(2) |> trunc()\n      end\n    end\n\n  end\nend\n\ndefmodule SimpleMath do\n  @before_compile Mathematician\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76005,"user_id":null,"body":"defmodule SimpleMath do\n  def square(x) do\n\n    {:ok, pid} = Agent.start(fn -> x end)\n\n    Agent.get(pid, :math, :pow, [2])\n  \n  end \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76006,"user_id":null,"body":"defmodule SimpleMath do\n  # Write the \"square\"-function here\n  def square(arg) do\n    arg * arg\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76007,"user_id":null,"body":"defmodule SimpleMath do\n  # Write the \"square\"-function here\n  def square(n) do\n    n*n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76008,"user_id":null,"body":"defmodule SimpleMath do\n  # Write the \"square\"-function here\n  def square(x) do\n   x*x\n   end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76009,"user_id":null,"body":"defmodule SimpleMath do\n  def square(arg), do: arg * arg\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76010,"user_id":null,"body":"defmodule SimpleMath do\n  def square(num), do: num*num\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"523b66342d0c301ae400003b":[{"id":76011,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(n, m), do: n*m\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76012,"user_id":527,"body":"defmodule SimpleMath do\n  def multiply(x, y), do: x * y\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76013,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(a, b) when is_number(a) and is_number(b), do: a * b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76014,"user_id":1030,"body":"defmodule SimpleMath, do: def multiply(x, y), do: x * y","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76015,"user_id":null,"body":"defmodule SimpleMath, do:\tdef multiply(a, b), do: a * b","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76016,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(a, b), do: a * b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76017,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(0, _), do: 0\n  def multiply(_, 0), do: 0\n  def multiply(x, y), do: x + multiply(x, y - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76018,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(a, b, acc \\\\ 0)\n  def multiply(_a, 0, acc), do: acc\n  def multiply(a, b, acc), do: multiply(a, b - 1, acc + a)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76019,"user_id":null,"body":"defmodule SimpleMath do\n  # Write here your \"multiply\"-function\n  def multiply(a,b) do\n    result = a * b\n    result\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76020,"user_id":null,"body":"defmodule SimpleMath do\n  def multiply(x, y) do\n    result = x * y\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"523f5d21c841566fde000009":[{"id":76021,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n       a |> Enum.reject(&(&1 in b))\n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76022,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    Enum.filter(a, fn a -> a not in b end)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76023,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b), do: a |> Enum.reject(& &1 in b)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76024,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    Enum.filter(a, &(&1 not in b))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76025,"user_id":null,"body":"defmodule ArrayDiff do\n\n def array_difference([], b) do\n    []\n  end\n  \n  def array_difference(a, []) do\n    a\n  end\n\n  def array_difference(a, b) do\n    Enum.reject(a, fn x -> Enum.find(b, fn y -> y == x end) end)\n  end\n  \n  \n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76026,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    for i <- a, i not in b, do: i\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76027,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    #your code here\n    a -- Enum.filter(a, &Enum.member?(b, &1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76028,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, []), do: a\n  def array_difference(a, [h | t]), do: array_difference(delete(h, a), t)\n  \n  def delete(x, list, done \\\\ [])\n  def delete(_, [], done), do: reverse(done)\n  def delete(x, [h | t], done) when h == x, do: delete(x, t, done)\n  def delete(x, [h | t], done), do: delete(x, t, [h | done])\n  \n  def reverse(old, new \\\\ [])\n  def reverse([], new), do: new\n  def reverse([h | t], new), do: reverse(t, [h | new])\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76029,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    Enum.filter(a, &(Enum.all?(b, fn i -> i != &1 end)))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76030,"user_id":null,"body":"defmodule ArrayDiff do\n  def array_difference(a, b) do\n    Enum.filter(a,\n      fn x -> !Enum.member?(b, x) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52449b062fb80683ec000024":[{"id":76031,"user_id":null,"body":"defmodule Hashtag do\n  defp return_value(\"\"), do: false\n  defp return_value(str) when byte_size(str) >= 140, do: false\n  defp return_value(str), do: \"#\" <> str\n  \n  def generate_hashtag(input) do\n    input\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&String.capitalize\/1)\n    |> Enum.join(\"\")\n    |> return_value()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76032,"user_id":null,"body":"defmodule Hashtag do\n\n  def generate_hashtag(input) do\n    with true <- valid_input?(input) do \n      input\n      |> String.split()\n      |> Enum.reduce(\"#\", &(\"#{&2}#{String.capitalize(&1)}\"))\n    end\n  end\n  \n  \n  defp valid_input?(input) do\n    len = \n      input\n      |> String.replace(\" \", \"\")\n      |> String.length()\n\n    len > 0 and len < 140 \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76033,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(\"\"), do: false\n  def generate_hashtag(input) do\n    if Regex.match?(~r{[a-z|A-Z]}, input) do\n      result = String.split(input)\n              |> Enum.map(&String.capitalize(&1))\n              |> Enum.join(\"\")\n      cond do\n        String.length(result) > 139 -> false\n        true -> \"#\" <> result\n      end\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76034,"user_id":544,"body":"defmodule Hashtag do\n  def generate_hashtag(s) do \n    s\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&String.capitalize\/1)\n    |> Enum.join(\"\")\n    |> (fn w -> if(w == \"\" || String.length(w) >= 140, do: false, else: \"#\" <> w) end).()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76035,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input) do\n    tag =\n      input\n      |> String.trim()\n      |> String.split()\n      |> Enum.map_join(&String.capitalize\/1)\n    \n    lt = String.length(tag)\n    if lt == 0 or lt >= 140, do: false, else: \"#\" <> tag\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76036,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input), do: String.trim(input) |> go\n  \n  def go(\"\"), do: false\n  def go(input) do\n    input\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&String.capitalize\/1)\n    |> (fn x -> [\"#\" | x] end).()\n    |> Enum.join\n    |> (fn x -> if String.length(x) > 140, do: false, else: x end).()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76037,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input) do\n    case String.trim(input) do\n      \"\"  -> false\n      str ->\n        res = \n          String.split(str)\n          |> Enum.map(&String.capitalize\/1)\n          |> Enum.join()\n        if String.length(res) >= 140 do\n          false\n        else\n          \"#\" <> res\n        end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76038,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input) do\n    # code here\n    if String.trim(input) == \"\" do\n      false\n    else\n      process_tweet(input)\n    end\n  end\n\n  defp process_tweet(input) do\n    String.split(input)\n    |> Enum.map(&String.capitalize\/1)\n    |> List.to_string()\n    |> check_length()\n    |> (fn\n          false ->\n            false\n\n          input ->\n            String.graphemes(input)\n            |> List.insert_at(0, \"#\")\n            |> List.to_string()\n        end).()\n  end\n\n  defp check_length(input) do\n    if String.length(input) >= 140, do: false, else: input\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76039,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input) do\n    input|>String.replace(\" \",\"\")!=\"\" and String.length(input|>String.replace(\" \",\"\"))+1<=140 and \"#\" <> ((for x <- input |> String.split(\" \"), do: String.capitalize(x))|>Enum.join(\"\"))\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76040,"user_id":null,"body":"defmodule Hashtag do\n  def generate_hashtag(input) do\n    words = String.split(input)\n    res = \"#\" <> (Enum.map(words, &String.capitalize\/1) |> Enum.join())\n\n    if res != \"#\" && String.length(res) <= 140, do: res, else: false\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5254ca2719453dcc0b00027d":[{"id":76041,"user_id":null,"body":"defmodule Kata do\n  def permutations(s), do: s |> String.graphemes |> run |> join |> Enum.uniq\n  \n  defp run([]), do: [[]]\n  defp run(s) do\n    for x <- s,\n        y <- run(s -- [x]) do\n        [x | y]\n    end\n  end\n  \n  defp join(ss), do: Enum.map(ss, &Enum.join\/1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76042,"user_id":null,"body":"defmodule Kata do\n  def permutations(<<_>> = s), do: [s]\n\n  def permutations(s) do\n    for {c, i} <- String.codepoints(s) |> Enum.with_index(), reduce: MapSet.new() do\n      a ->\n        {h, <<_, t::binary>>} = String.split_at(s, i)\n\n        for s <- permutations(h <> t), reduce: MapSet.new() do\n          b -> MapSet.put(b, c <> s)\n        end\n        |> MapSet.union(a)\n    end\n    |> MapSet.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76043,"user_id":null,"body":"defmodule Kata do\n\n  @moduledoc \"\"\"\n  create all permutations of an input string and remove duplicates, if present. This means, you have to shuffle all letters from the input in all possible orders\n  \"\"\"\n\n  @spec permutations(String.t()) :: list()\n  def permutations(\"\") do\n   []\n  end\n\n  def permutations(s) do\n    letters = String.graphemes(s)\n    s_l_perms = perm(letters)\n    Enum.map(s_l_perms, &Enum.join(&1, \"\")) |> Enum.uniq()\n  end\n\n  def perm([]) do\n    [[]]\n  end\n\n  def perm(l) do\n    for x <- l, rest <- perm(l--[x]), do: [x|rest]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76044,"user_id":null,"body":"defmodule Kata do\n  def stuff([]) do\n    [[]]\n  end\n\n  def stuff(list) do\n    for h <- list, t <- stuff(list -- [h]), do: [h | t]\n  end\n\n  def permutations(s) do\n      s\n      |> String.split(\"\", trim: true)\n      |> stuff()\n      |> Enum.uniq()\n      |> Enum.map(\n        fn i ->\n          i |> Enum.join(\"\")\n        end\n      )\n  end\n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76045,"user_id":null,"body":"defmodule Kata do\n    def get_permutations([]), do: [[]]\n    def get_permutations(list) do\n      for elem <- list, rest <- get_permutations(list--[elem]), do: [elem|rest]\n    end \n    def permutations(s) do\n      s\n      |> String.split(\"\", trim: true)\n      |> get_permutations()\n      |> Enum.map(&(Enum.join(&1)))\n      |> Enum.uniq()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76046,"user_id":null,"body":"defmodule Kata do\n  def perms([]), do: [[]]\n  def perms(l), do: for(h <- l, t <- perms(l -- [h]), do: [h | t])\n\n  def permutations(s) do\n    String.graphemes(s)\n    |> perms\n    |> Enum.uniq()\n    |> Enum.map(fn vec -> Enum.join(vec, \"\") end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76047,"user_id":null,"body":"defmodule Kata do\n  def permutations(s) do\n    s\n    |> String.graphemes()\n    |> do_perm()\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.uniq()\n  end\n\n  defp do_perm([]), do: [[]]\n\n  defp do_perm(list) do\n    for x <- list, y <- do_perm(list -- [x]), do: [x | y]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76048,"user_id":null,"body":"defmodule Kata do\n    def permutations(s) do\n      chars = String.split(s, \"\", trim: true)\n      \n      of(chars) |> Enum.map(&Enum.join\/1)\n    end\n    \n    def of([]), do: [[]]\n    \n    def of(list) do\n      for hd <- Enum.uniq(list), tl <- of(list -- [hd]), do: [hd | tl]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76049,"user_id":null,"body":"defmodule Kata do\n  def permutations(s) do\n    s\n    |> String.graphemes()\n    |> p()\n    |> Enum.uniq()\n    |> Enum.map(&Enum.join\/1)\n  end\n  \n  def p([]) do\n    [[]]\n  end\n\n  def p(list) do\n    for h <- list, t <- p(list -- [h]) do \n      [h | t]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76050,"user_id":null,"body":"defmodule Kata do\n  def permutations(str) do\n    str\n    |> String.split(\"\", trim: true)\n    |> generate()\n    |> Enum.uniq()\n    |> Enum.map(&Enum.join\/1)\n  end\n\n  def generate([i]), do: [[i]]\n  def generate(items) do\n    for head <- items, tail <- generate(items -- [head]), do: [head | tail]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"525c1a07bb6dda6944000031":[{"id":76051,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    List.duplicate(\"codewars\", 1000)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76052,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    Stream.cycle([\"codewars\"]) |> Enum.take(1000)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76053,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    for _i <- 1..1000, do: \"codewars\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76054,"user_id":53,"body":"defmodule Websites do\n  def websites, do: for i <- 1..1000, do: \"codewars\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76055,"user_id":null,"body":"defmodule Websites do\n  # Using this exercise to practice: comprehensions\n\n  def websites do\n    for _ <- 1..1_000, do: \"codewars\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76056,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    for _n <- 1..1000, do: \"codewars\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76057,"user_id":null,"body":"defmodule Websites do\n  # Using this exercise to practice: recursion, body recursion\n\n  def websites(n \\\\ 1000)\n  def websites(0), do: []\n  def websites(n), do: [\"codewars\" | websites(n - 1)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76058,"user_id":null,"body":"defmodule Websites do\n  # Using this exercise to practice: recursion, tail recursion\n\n  def websites(n \\\\ 1000, acc \\\\ [])\n  def websites(0, acc), do: acc\n  def websites(n, acc), do: websites(n - 1, [\"codewars\" | acc])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76059,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    # return list with the string \"codewars\" 1,000 times\n    \"codewars,\" |> String.duplicate(1000) |> String.split(\",\", trim: true)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76060,"user_id":null,"body":"defmodule Websites do\n  def websites do\n    websites(1000)\n  end\n  \n  def websites(n) when n == 1 do\n    [\"codewars\"]\n  end\n \n  def websites(n) do\n    [\"codewars\"] ++ websites(n-1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"526156943dfe7ce06200063e":[{"id":76061,"user_id":null,"body":"defmodule Brainluck do\n  def brain_luck(program, inputs), do: run(program, inputs, {0}, 0, \"\") |> elem(3)\n  def run(\">\" <> rest, inputs, mem, addr, out) when addr + 1 == tuple_size(mem), do: run(rest, inputs, Tuple.append(mem, 0), addr + 1, out)\n  def run(\">\" <> rest, inputs, mem, addr, out), do: run(rest, inputs, mem, addr + 1, out)\n  def run(\"<\" <> rest, inputs, mem, addr, out), do: run(rest, inputs, mem, addr - 1, out)\n  def run(\"+\" <> rest, inputs, mem, addr, out), do: run(rest, inputs, put_elem(mem, addr, rem(elem(mem, addr) + 1, 256)), addr, out)\n  def run(\"-\" <> rest, inputs, mem, addr, out), do: run(rest, inputs, put_elem(mem, addr, elem(mem, addr) - 1), addr, out)\n  def run(\".\" <> rest, inputs, mem, addr, out), do: run(rest, inputs, mem, addr, out <> <<elem(mem, addr)>>)\n  def run(\",\" <> rest, <<i>> <> inputs, mem, addr, out), do: run(rest, inputs, put_elem(mem, addr, i), addr, out)\n  def run(\"[\" <> rest, inputs, mem, addr, out) when elem(mem, addr) == 0, do: run(String.replace(rest, ~r\/\\A(([^\\[\\]]*(\\[(?1)\\])?)*)\\]\/m, \"\"), inputs, mem, addr, out)\n  def run(program = \"[\" <> rest, inputs, mem, addr, out), do: apply(&run\/5, [program | run(rest, inputs, mem, addr, out) |> Tuple.to_list()])\n  def run(\"]\" <> _, inputs, mem, addr, out), do: {inputs, mem, addr, out}\n  def run(<<_>> <> rest, inputs, mem, addr, out), do: run(rest, inputs, mem, addr, out)\n  def run(\"\", inputs, mem, addr, out), do: {inputs, mem, addr, out}\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76062,"user_id":53,"body":"defmodule Brainluck do\n\n  def brain_luck(program, inputs), do: go(String.codepoints(program),String.codepoints(inputs),Map.new(Enum.to_list(0..5000), fn k -> {k, 0} end),0,0,String.length(program),\"\")\n    \n  defp go(_, _, _, i, _, sz, output) when i >= sz, do: output\n  defp go(code, input, tape, i, ptr, sz, output) do\n    case Enum.at(code, i) do\n      \">\" -> go(code, input, tape, i+1, ptr+1, sz, output)\n      \"<\" -> go(code, input, tape, i+1, ptr-1, sz, output)\n      \"+\" -> go(code, input, Map.put(tape, ptr, rem(Map.get(tape, ptr, 0)+1, 256)), i+1, ptr, sz, output)\n      \"-\" -> go(code, input, Map.put(tape, ptr, rem(Map.get(tape, ptr, 0)+255, 256)), i+1, ptr, sz, output)\n      \".\" -> go(code, input, tape, i+1, ptr, sz, output <> List.to_string([Map.get(tape, ptr, 0)]))\n      \",\" -> go(code, Enum.drop(input, 1), Map.put(tape, ptr, :binary.first (input |> hd)), i+1, ptr, sz, output)\n      \"[\" -> go(code, input, tape, next_close(code, tape, i, ptr, 1), ptr, sz, output)\n      \"]\" -> go(code, input, tape, prev_open(code, tape, i, ptr, 1), ptr, sz, output)\n       _  -> go(code, input, tape, i+1, ptr, sz, output)\n   end\n  end\n  \n  defp next_close(code, tape, i, ptr, n) do\n    cond do\n      Map.get(tape, ptr, 0) != 0 -> i+1\n      n == 0 -> i+1\n      Enum.at(code, i+1) == \"[\" -> next_close(code, tape, i+1, ptr, n+1)\n      Enum.at(code, i+1) == \"]\" -> next_close(code, tape, i+1, ptr, n-1)\n      true -> next_close(code, tape, i+1, ptr, n)\n    end\n  end\n  \n  defp prev_open(code, tape, i, ptr, n) do\n    cond do\n      Map.get(tape, ptr, 0) == 0 -> i+1\n      n == 0 -> i+1\n      Enum.at(code, i-1) == \"]\" -> prev_open(code, tape, i-1, ptr, n+1)\n      Enum.at(code, i-1) == \"[\" -> prev_open(code, tape, i-1, ptr, n-1)\n      true -> prev_open(code, tape, i-1, ptr, n)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76063,"user_id":null,"body":"defmodule Brainluck do\n  defmodule State do\n    defstruct [\n      data: %{},\n      pointer: 0\n    ]\n   \n    def inc_pointer(state) do\n      %{state | pointer: state.pointer + 1}\n    end\n    \n    def dec_pointer(state) do\n      %{state | pointer: state.pointer - 1}\n    end\n    \n    def wrap(i) when i > 255 do\n      i - 256\n    end\n    \n    def wrap(i) when i < 0 do\n      i + 256\n    end\n    \n    def wrap(i) do\n      i\n    end\n    \n    def inc(state) do\n      data = Map.update(state.data, state.pointer, 1, & wrap(&1 + 1))\n      %{state | data: data}\n    end\n    \n    def dec(state) do\n      data = Map.update(state.data, state.pointer, -1, & wrap(&1 - 1))\n      %{state | data: data}\n    end\n    \n    def get_char(state) do\n      Map.get(state.data, state.pointer, 0)\n    end\n    \n    def put_char(state, char) do\n      data = Map.put(state.data, state.pointer, char)\n      %{state | data: data}\n    end\n  end\n\n  def brain_luck(program, input) do\n    {:done, _state, _, acc} = steps(%State{}, program, input, [])\n    IO.iodata_to_binary(acc)\n  end\n  \n  def steps(state, << >>, input, acc) do\n    {:done, state, input, acc}\n  end\n  \n  # state, program, input, accumulator -> {:back | :done, state, input_rest, acc} \n  def steps(state, << ?>, rest :: binary >>, input, acc) do\n    state = State.inc_pointer(state)\n    steps(state, rest, input, acc)\n  end\n  \n  def steps(state, << ?<, rest :: binary >>, input, acc) do\n    state = State.dec_pointer(state)\n    steps(state, rest, input, acc)\n  end\n  \n  def steps(state, << ?+, rest :: binary >>, input, acc) do\n    state = State.inc(state)\n    steps(state, rest, input, acc)\n  end\n  \n  def steps(state, << ?-, rest :: binary >>, input, acc) do\n    state = State.dec(state)\n    steps(state, rest, input, acc)\n  end\n  \n  def steps(state, << ?., rest :: binary >>, input, acc) do\n    char = State.get_char(state)\n    steps(state, rest, input, [acc, char])\n  end\n  \n  def steps(state, << ?,, rest :: binary >>, << byte, input :: binary >>, acc) do\n    state = State.put_char(state, byte)\n    steps(state, rest, input, acc)\n  end\n  \n  def steps(state, << ?[, rest :: binary >>, input, acc) do\n    case State.get_char(state) do\n      0 -> \n        steps(state, skip_loop(rest), input, acc)\n        \n      _nonzero ->\n        case steps(state, rest, input, acc) do\n          {:done, _, _, _} = result ->\n            result\n          {:back, state, input, acc} = back ->\n            steps(state, << ?[, rest :: binary >>, input, acc)\n        end\n    end\n  end\n  \n  def steps(state, << ?], _rest :: binary >>, input, acc) do\n    # the other side of the loop will rewind for us. Suboptimal but simple\n    {:back, state, input, acc}\n  end\n  \n  \n  def skip_loop(program_rest, counter \\\\ 1)\n  def skip_loop(<< ?[, rest :: binary >>, counter) do\n    skip_loop(rest, counter + 1)\n  end\n  \n  def skip_loop(<< ?], rest :: binary >>, counter) do\n    case counter do\n      1 -> \n        rest \n        \n      bigger when bigger > 1 ->\n        skip_loop(rest, counter - 1)\n    end\n  end\n  \n  def skip_loop(<< _byte, rest :: binary >>, counter) do\n    skip_loop(rest, counter)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76064,"user_id":null,"body":"defmodule Tape do\n  @moduledoc \"\"\"\n  A tape struct and functions\n  \"\"\"\n\n  defstruct left: [], value: 0, right: []\n\n  @typedoc \"\"\"\n  Tape is represented by the pointed element and two lists on both sides\n  of the data pointer\n  \"\"\"\n  @opaque t :: %Tape{left: [integer], value: integer, right: [integer]}\n\n  @spec new() :: t\n  def new(), do: %Tape{}\n\n  @spec get_value(t) :: integer\n  def get_value(%Tape{value: value}), do: value\n\n  @spec set_value(t, integer) :: t\n  def set_value(%Tape{} = tape, value) do\n    %{tape | value: value}\n  end\n\n  @spec increment(t) :: t\n  def increment(%Tape{value: value} = tape) do\n    %{tape | value: rem(value + 1, 256)}\n  end\n\n  @spec decrement(t) :: t\n  def decrement(%Tape{value: value} = tape) do\n    %{tape | value: rem(value + 255, 256)}\n  end\n\n  defp new(left, value, right) do\n    %Tape{left: left, value: value, right: right}\n  end\n\n  @spec move_right(t) :: t\n  def move_right(%Tape{right: []} = tape) do\n    new([tape.value | tape.left], 0, [])\n  end\n\n  def move_right(%Tape{right: [next | right]} = tape) do\n    new([tape.value | tape.left], next, right)\n  end\n\n  @spec move_left(t) :: t\n  def move_left(%Tape{left: []} = tape) do\n    new([], 0, [tape.value | tape.right])\n  end\n\n  def move_left(%Tape{left: [next | left]} = tape) do\n    new(left, next, [tape.value | tape.right])\n  end\nend\n\ndefmodule Program do\n  @moduledoc \"\"\"\n  Handles program state and control flow statements (brackets) during execution\n  \"\"\"\n\n  defstruct stack: [], program: \"\"\n\n  @type command :: String.t()\n  @typep program :: String.t()\n  @typep stack :: [program]\n  @opaque t :: %Program{stack: stack, program: program}\n\n  @spec new(String.t(), stack) :: t\n  def new(program, stack \\\\ []), do: %Program{stack: stack, program: program}\n\n  @doc \"\"\"\n  \"Executes\" the program until it finds a non-bracket command that should be executed next\n  Returns command to execute and the next program state\n  \"\"\"\n  @spec next(t, integer) :: {:ok, command, t} | {:end}\n  def next(%Program{program: program, stack: stack}, current_value) do\n    next(program, stack, current_value)\n  end\n\n  @spec next(program, stack, current_value :: integer) :: {:ok, command, t} | {:end}\n  defp next(\"[\" <> rest, stack, 0), do: next(skip_braces(rest), stack, 0)\n  defp next(\"[\" <> rest, stack, v), do: next(rest, [rest | stack], v)\n  defp next(\"]\" <> rest, stack, 0), do: next(rest, tl(stack), 0)\n  defp next(\"]\" <> _, stack, v), do: next(hd(stack), stack, v)\n  defp next(\"\", _, _), do: {:end}\n  defp next(<<c::8>> <> rest, stack, _), do: {:ok, <<c>>, new(rest, stack)}\n\n  @spec skip_braces(program, integer) :: program\n  defp skip_braces(program, depth \\\\ 0)\n  defp skip_braces(\"[\" <> rest, depth), do: skip_braces(rest, depth + 1)\n  defp skip_braces(\"]\" <> rest, 0), do: rest\n  defp skip_braces(\"]\" <> rest, depth), do: skip_braces(rest, depth - 1)\n  defp skip_braces(<<_::8>> <> rest, depth), do: skip_braces(rest, depth)\n\n  # defp skip_braces(program),\n  #   do: String.replace(program, ~r\/(([^\\[\\]]*(\\[(?1)\\])?)*)\\]\/, \"\")\nend\n\ndefmodule Brainluck do\n  @typep t :: %{tape: Tape.t(), inputs: binary, outputs: binary}\n\n  @spec brain_luck(String.t(), binary) :: binary\n  def brain_luck(program, inputs) do\n    run_brain_luck(new(inputs), Program.new(program))\n  end\n\n  @spec new(binary) :: t\n  defp new(inputs), do: %{tape: Tape.new(), inputs: inputs, outputs: \"\"}\n\n  @spec run_brain_luck(interpreter :: t, Program.t()) :: binary\n  defp run_brain_luck(%{tape: tape} = interpreter, program) do\n    case Program.next(program, Tape.get_value(tape)) do\n      {:end} ->\n        interpreter.outputs\n\n      {:ok, command, program} ->\n        interpreter |> run_command(command) |> run_brain_luck(program)\n    end\n  end\n\n  @spec run_command(interpreter :: t, Program.command()) :: t\n  defp run_command(interpreter, \">\"), do: %{interpreter | tape: Tape.move_right(interpreter.tape)}\n  defp run_command(interpreter, \"<\"), do: %{interpreter | tape: Tape.move_left(interpreter.tape)}\n  defp run_command(interpreter, \"+\"), do: %{interpreter | tape: Tape.increment(interpreter.tape)}\n  defp run_command(interpreter, \"-\"), do: %{interpreter | tape: Tape.decrement(interpreter.tape)}\n\n  defp run_command(%{tape: tape, outputs: outputs} = interpreter, \".\"),\n    do: %{interpreter | outputs: outputs <> <<Tape.get_value(tape)>>}\n\n  defp run_command(%{tape: tape, inputs: <<value::8>> <> inputs} = interpreter, \",\"),\n    do: %{interpreter | tape: Tape.set_value(tape, value), inputs: inputs}\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76065,"user_id":null,"body":"defmodule Brainluck do\n  def brain_luck(program, inputs) do\n    {fw_jmps, bk_jmps} = jumps(program)\n    run(0, 0, String.graphemes(program), inputs, \"\", %{}, fw_jmps, bk_jmps)\n  end\n\n  defp run(code_ptr, _data_ptr, prog, _inps, outp, _data, _fw_jmps, _bk_jmps)\n       when code_ptr >= length(prog),\n       do: outp\n\n  defp run(code_ptr, data_ptr, prog, inps, outp, data, fw_jmps, bk_jmps) do\n    case Enum.at(prog, code_ptr) do\n      \">\" ->\n        run(code_ptr + 1, data_ptr + 1, prog, inps, outp, data, fw_jmps, bk_jmps)\n\n      \"<\" ->\n        run(code_ptr + 1, data_ptr - 1, prog, inps, outp, data, fw_jmps, bk_jmps)\n\n      \"+\" ->\n        run(\n          code_ptr + 1,\n          data_ptr,\n          prog,\n          inps,\n          outp,\n          Map.update(data, data_ptr, 1, fn v -> Integer.mod(v + 1, 256) end),\n          fw_jmps,\n          bk_jmps\n        )\n\n      \"-\" ->\n        run(\n          code_ptr + 1,\n          data_ptr,\n          prog,\n          inps,\n          outp,\n          Map.update(data, data_ptr, 255, fn v -> Integer.mod(v - 1, 256) end),\n          fw_jmps,\n          bk_jmps\n        )\n\n      \".\" ->\n        run(\n          code_ptr + 1,\n          data_ptr,\n          prog,\n          inps,\n          outp <> to_string([Map.get(data, data_ptr, 0)]),\n          data,\n          fw_jmps,\n          bk_jmps\n        )\n\n      \",\" ->\n        <<c::8, inp::bitstring>> = inps\n\n        run(\n          code_ptr + 1,\n          data_ptr,\n          prog,\n          inp,\n          outp,\n          Map.put(data, data_ptr, c),\n          fw_jmps,\n          bk_jmps\n        )\n\n      \"[\" ->\n        run(\n          if(Map.get(data, data_ptr, 0) == 0, do: fw_jmps[code_ptr] + 1, else: code_ptr + 1),\n          data_ptr,\n          prog,\n          inps,\n          outp,\n          data,\n          fw_jmps,\n          bk_jmps\n        )\n\n      \"]\" ->\n        run(\n          if(Map.get(data, data_ptr, 0) != 0, do: bk_jmps[code_ptr] + 1, else: code_ptr + 1),\n          data_ptr,\n          prog,\n          inps,\n          outp,\n          data,\n          fw_jmps,\n          bk_jmps\n        )\n\n      _ ->\n        run(code_ptr + 1, data_ptr, prog, inps, outp, data, fw_jmps, bk_jmps)\n    end\n  end\n\n  defp jumps(program) do\n    {fw_jmps, bk_jmps, _} =\n      String.graphemes(program)\n      |> Enum.with_index()\n      |> Enum.reduce(\n        {%{}, %{}, []},\n        fn {c, i}, {fw, bk, stack} ->\n          case c do\n            \"[\" ->\n              {fw, bk, [i | stack]}\n\n            \"]\" ->\n              [pos | stack2] = stack\n              {Map.put(fw, pos, i), Map.put(bk, i, pos), stack2}\n\n            _ ->\n              {fw, bk, stack}\n          end\n        end\n      )\n\n    {fw_jmps, bk_jmps}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76066,"user_id":null,"body":"defmodule Brainluck do\n  defp find_closing_bracket(ls, bracket, i \\\\ 0, o \\\\ 0) do\n    closing_bracket = if bracket == \"[\" do \"]\" else \"[\" end\n    case {ls, o} do\n      {[], _}      -> :not_found\n      {[^bracket|t], _} -> find_closing_bracket(t, bracket, i + 1, o + 1)\n      {[^closing_bracket|_], 0} -> i\n      {[^closing_bracket|t], _} -> find_closing_bracket(t, bracket, i + 1, o - 1)\n      {[_  |t], _} -> find_closing_bracket(t, bracket, i + 1, o)\n      _            -> :not_found\n    end\n  end\n\n  defp evaluate(state = {code, cp, output, tape, dp, input}) do\n    command = Enum.at(code, cp)\n    case command do\n        \">\" -> evaluate {code, cp + 1, output, tape, dp + 1, input}\n        \"<\" -> evaluate {code, cp + 1, output, tape, dp - 1, input}\n        \"+\" -> evaluate {code, cp + 1, output, List.update_at(tape, dp, fn x -> if x + 1 == 256 do 0 else x + 1 end end), dp, input}\n        \"-\" -> evaluate {code, cp + 1, output, List.update_at(tape, dp, fn x -> if x - 1 == -1 do 255 else x - 1 end end), dp, input}\n        \".\" -> evaluate {code, cp + 1, output <> <<Enum.at(tape, dp, \"\")>>, tape, dp, input}\n        \",\" ->\n          <<h, t::binary>> = input\n          evaluate {code, cp + 1, output, List.update_at(tape, dp, fn _ -> h end), dp, t}\n        \"[\" -> if Enum.at(tape, dp, \"\") == 0 do\n                 closing_bracket_index = find_closing_bracket(Enum.drop(code, cp + 1), \"[\") + 1\n                 case closing_bracket_index do\n                   :not_found -> state\n                   i -> evaluate {code, cp + i, output, tape, dp, input}\n                 end\n               else\n                 evaluate {code, cp + 1, output, tape, dp, input}\n               end\n        \"]\" -> if Enum.at(tape, dp, 0) != 0 do\n                 pre = code |> Enum.take(cp) |> Enum.reverse()\n                 closing_bracket_index = find_closing_bracket(pre, \"]\") + 1\n                 case closing_bracket_index do\n                   :not_found -> state\n                   i -> evaluate {code, cp - i, output, tape, dp, input}\n                 end\n               else\n                 evaluate {code, cp + 1, output, tape, dp, input}\n               end\n        \n        _   -> state\n      end\n  end\n\n  def brain_luck(program, inputs) do\n     evaluate({program |> String.codepoints(), 0, \"\", List.duplicate(0, 30000), 0, inputs}) |> (fn {_, _, o, _, _, _} -> o end).()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76067,"user_id":null,"body":"defmodule Brainluck do\n  def brain_luck(program, ins) do\n    brain_luck(\n      String.codepoints(program),\n      0,\n      :binary.bin_to_list(ins),\n      List.duplicate(0, 3000),\n      0,\n      \"\"\n    )\n  end\n\n  def brain_luck(program, pos, _, _, _, out) when pos >= length(program), do: out\n\n  def brain_luck(program, pos, ins, data, point, out) do\n    case Enum.at(program, pos) do\n      \">\" ->\n        brain_luck(program, pos + 1, ins, data, point + 1, out)\n\n      \"<\" ->\n        brain_luck(program, pos + 1, ins, data, point - 1, out)\n\n      \"+\" ->\n        brain_luck(program, pos + 1, ins, incr(data, point), point, out)\n\n      \"-\" ->\n        brain_luck(program, pos + 1, ins, decr(data, point), point, out)\n\n      \".\" ->\n        brain_luck(program, pos + 1, ins, data, point, out <> <<get(data, point)>>)\n\n      \",\" ->\n        [val | ins] = ins\n        brain_luck(program, pos + 1, ins, set(data, point, val), point, out)\n\n      \"[\" ->\n        if get(data, point) == 0 do\n          brain_luck(\n            program,\n            to_next(Enum.take(program, -length(program) + pos + 1), pos),\n            ins,\n            data,\n            point,\n            out\n          )\n        else\n          brain_luck(program, pos + 1, ins, data, point, out)\n        end\n\n      \"]\" ->\n        if get(data, point) != 0 do\n          brain_luck(program, to_prev(Enum.take(program, pos), pos), ins, data, point, out)\n        else\n          brain_luck(program, pos + 1, ins, data, point, out)\n        end\n    end\n  end\n\n  def set(data, point, value) do\n    Enum.map(Enum.with_index(data), fn {datum, index} ->\n      if index == point, do: value, else: datum\n    end)\n  end\n\n  def get(data, point), do: Enum.at(data, point)\n\n  def incr(data, point) do\n    Enum.map(\n      Enum.with_index(data),\n      fn {datum, index} ->\n        case {datum == 255, index == point} do\n          {_, false} -> datum\n          {false, true} -> datum + 1\n          {true, true} -> 0\n        end\n      end\n    )\n  end\n\n  def decr(data, point) do\n    Enum.map(\n      Enum.with_index(data),\n      fn {datum, index} ->\n        case {datum == 0, index == point} do\n          {_, false} -> datum\n          {false, true} -> datum - 1\n          {true, true} -> 255\n        end\n      end\n    )\n  end\n\n  def to_next([instruction | program], point, layer \\\\ 0) do\n    case {instruction, layer} do\n      {\"[\", n} -> to_next(program, point + 1, n + 1)\n      {\"]\", 0} -> point + 1\n      {\"]\", n} -> to_next(program, point + 1, n - 1)\n      {_, n} -> to_next(program, point + 1, n)\n    end\n  end\n\n  def to_prev(program, point) do\n    to_prev(Enum.reverse(program), point, 0)\n  end\n\n  def to_prev([instruction | program], point, layers) do\n    case {instruction, layers} do\n      {\"[\", 0} -> point\n      {\"]\", n} -> to_prev(program, point - 1, n + 1)\n      {\"[\", n} -> to_prev(program, point - 1, n - 1)\n      {_, n} -> to_prev(program, point - 1, n)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76068,"user_id":null,"body":"defmodule Brainluck do\n  @memory_size 30_000\n  \n  def brain_luck(program, inputs) do\n    pointer = 0\n    data = 0\n    |> List.duplicate(@memory_size)\n    |> List.to_tuple\n    \n    interpret(program, inputs, pointer, data, \"\")\n  end\n  \n  defp interpret(\"\", _inputs, _pointer, _data, result), do: result\n  \n  defp interpret(program, inputs, pointer, data, result) do\n    {instruction, rest_program} = String.next_codepoint(program)\n    case instruction do\n      \">\" -> interpret(rest_program, inputs, pointer + 1, data, result)\n      \"<\" -> interpret(rest_program, inputs, pointer - 1, data, result)\n      \"+\" -> new_value = data\n             |> elem(pointer)\n             |> increase_value\n             interpret(rest_program, inputs, pointer, put_elem(data, pointer, new_value), result)\n      \"-\" -> new_value = data\n             |> elem(pointer)\n             |> decrease_value\n             interpret(rest_program, inputs, pointer, put_elem(data, pointer, new_value), result)\n      \".\" -> interpret(rest_program, inputs, pointer, data, result <> << elem(data, pointer) >>)\n      \",\" -> {<<first_codepoint>>, rest} = String.next_codepoint(inputs)\n             interpret(rest_program, rest, pointer, put_elem(data, pointer, first_codepoint), result)\n      \"[\" -> handle_loop(rest_program, inputs, pointer, data, result)\n      \"]\" -> {rest_program, inputs, pointer, data, result}\n    end\n  end\n  \n  defp handle_loop(program, inputs, pointer, data, result) do\n    if elem(data, pointer) == 0 do\n      program\n      |> cut_after_matching_closing_bracket()\n      |> interpret(inputs, pointer, data, result)\n    else\n      {_program, new_inputs, new_pointer, new_data, new_result} = interpret(program, inputs, pointer, data, result)\n      handle_loop(program, new_inputs, new_pointer, new_data, new_result)\n    end\n  end\n  \n  defp cut_after_matching_closing_bracket(program) do\n    closing_bracket_index = program\n    |> String.graphemes\n    |> Enum.reduce_while({0, 0}, fn\n      \"[\", {index, count} -> {:cont, {index + 1, count + 1}}\n      \"]\", {index, 0} -> {:halt, index + 1}\n      \"]\", {index, count} -> {:cont, {index + 1, count - 1}}\n      _char, {index, count} -> {:cont, {index + 1, count}}\n    end)\n    String.slice(program, closing_bracket_index..-1)\n  end\n  \n  defp increase_value(255), do: 0\n  defp increase_value(num), do: num + 1\n  defp decrease_value(0), do: 255\n  defp decrease_value(num), do: num - 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76069,"user_id":null,"body":"defmodule Brainluck do\n  def brain_luck(program, inputs) do\n    program\n    |> compile\n    |> make_state(:erlang.binary_to_list(inputs))\n    |> interp\n  end\n  \n  def list_to_array_map(l) do\n    l\n    |> Enum.with_index\n    |> Enum.into(%{}, fn {v, i} -> {i, v} end)\n  end\n  \n  def list_to_cursor_list([]) do\n    {[], 0, []}\n  end\n  def list_to_cursor_list([h|t]) do\n    {[], h, t}\n  end\n\n  def make_cursor_list() do\n    {[], 0, []}\n  end\n\n  def incr_cursor_list({before, cursor, []}) do\n    {[cursor|before], 0, []}\n  end\n  def incr_cursor_list({before, cursor, [h|rest]}) do\n    {[cursor|before], h, rest}\n  end\n\n  def decr_cursor_list(cl = {[], _cursor, _rest}) do\n    cl\n  end\n  def decr_cursor_list({[h|t], cursor, rest}) do\n    {t, h, [cursor|rest]}\n  end\n\n  def put_cursor_list({before, _cursor, rest}, new) do\n    {before, new, rest}\n  end\n\n  def get_cursor_list({_before, cursor, _rest}) do\n    cursor\n  end\n\n  def cursor_list_to_list({[], cursor, rest}) do\n    [cursor| rest]\n  end\n  def cursor_list_to_list(cl) do\n    cl\n    |> decr_cursor_list\n    |> cursor_list_to_list\n  end\n\n  def make_state(code, input) do\n    {code, 0, make_cursor_list(), input, []}\n  end\n\n  def increment_data_pointer({code, ip, mem, input, output}) do\n    {code, ip+1, incr_cursor_list(mem), input, output}\n  end\n\n  def decrement_data_pointer({code, ip, mem, input, output}) do\n    {code, ip+1, decr_cursor_list(mem), input, output}\n  end\n\n  def increment_data_value({code, ip, mem, input, output}) do\n    new_value = get_cursor_list(mem)+1 |> Integer.mod(256)\n    {code, ip+1, put_cursor_list(mem, new_value), input, output}\n  end\n\n  def decrement_data_value({code, ip, mem, input, output}) do\n    new_value = get_cursor_list(mem)-1 |> Integer.mod(256)\n    {code, ip+1, put_cursor_list(mem, new_value), input, output}\n  end\n\n  def output_byte({code, ip, mem, input, output}) do\n    new_output = [get_cursor_list(mem)| output]\n    {code, ip+1, mem, input, new_output}\n  end\n\n  def read_byte({code, ip, mem, [byte|bytes], output}) do\n    {code, ip+1, put_cursor_list(mem, byte), bytes, output}\n  end\n\n  def forward_jump_if_zero({code, ip, mem, input, output}) do\n    {:fjz, dst} = code[ip]\n    if 0 == get_cursor_list(mem) do\n      {code, dst+1, mem, input, output}\n    else\n      {code, ip+1, mem, input, output}\n    end\n  end\n  \n  def backward_jump_if_nonzero({code, ip, mem, input, output}) do\n    {:bjn, dst} = code[ip]\n    if 0 != get_cursor_list(mem) do\n      {code, dst+1, mem, input, output}\n    else\n      {code, ip+1, mem, input, output}\n    end\n  end\n\n  def halt_and_return_output({_code, _ip, _mem, _input, output}) do\n    output\n    |> Enum.reverse\n    |> to_string\n  end\n\n  def fetch_instruction({code, ip, _mem, _input, _output}) do\n    code[ip]\n  end\n  \n  def interp(state) do\n    case fetch_instruction(state) do\n      :idp -> interp(increment_data_pointer(state))\n      :ddp -> interp(decrement_data_pointer(state))\n      :idv -> interp(increment_data_value(state))\n      :ddv -> interp(decrement_data_value(state))\n      :obt -> interp(output_byte(state))\n      :rbt -> interp(read_byte(state))\n      {:fjz, _dst} -> interp(forward_jump_if_zero(state))\n      {:bjn, _dst} -> interp(backward_jump_if_nonzero(state))\n      :hlt -> halt_and_return_output(state)\n      _ -> \"something bad happened\"\n    end\n  end\n\n  def compile(text) do\n    text_to_code(text, [], 0)\n    |> List.flatten\n    |> Enum.with_index\n    |> Enum.into(%{}, fn {v, i} -> {i, v} end)\n  end\n\n  def text_to_code(\"\", code, _idx) do\n    Enum.reverse([:hlt|code])\n  end\n  def text_to_code(\">\" <> text, code, idx) do\n    text_to_code(text, [:idp | code], idx+1)\n  end\n  def text_to_code(\"<\" <> text, code, idx) do\n    text_to_code(text, [:ddp | code], idx+1)\n  end\n  def text_to_code(\"+\" <> text, code, idx) do\n    text_to_code(text, [:idv | code], idx+1)\n  end\n  def text_to_code(\"-\" <> text, code, idx) do\n    text_to_code(text, [:ddv | code], idx+1)\n  end\n  def text_to_code(\",\" <> text, code, idx) do\n    text_to_code(text, [:rbt | code], idx+1)\n  end\n  def text_to_code(\".\" <> text, code, idx) do\n    text_to_code(text, [:obt | code], idx+1)\n  end\n  def text_to_code(\"[\" <> text, code, idx) do\n    {rest, subcode, rdx} = text_to_code(text, [], idx+1)\n    instructions = [{:bjn, idx} | subcode] |> Enum.reverse\n    text_to_code(rest, [[{:fjz, rdx}| instructions] | code], rdx+1)\n  end\n  def text_to_code(\"]\" <> text, code, idx) do\n    {text, code, idx}\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76070,"user_id":null,"body":"defmodule Brainluck do\n  \n  defmodule ProgramState do\n    defstruct position: 0,\n      tape: %{0 => 0},\n      output: [],\n      code_pointer: 0,\n      code: \"\",\n      input: \"\",\n      input_pointer: 0\n  end\n  \n  defp data(state) do\n    state.tape[state.position] || 0\n  end\n  \n  defp increase_data(state) do\n    current_value = data(state)\n    next_value = if current_value == 255 do\n      0\n    else\n      current_value + 1\n    end\n    %{state | tape: Map.put(state.tape, state.position, next_value)}\n  end\n  \n  defp decrease_data(state) do\n    current_value = data(state)\n    next_value = if current_value == 0, do: 255, else: current_value - 1\n    %{state | tape: Map.put(state.tape, state.position, next_value)}\n  end\n  \n  defp increase_pointer(state) do\n    %{state | position: state.position + 1}\n  end\n  \n  defp decrease_pointer(state) do\n    %{state | position: state.position - 1}\n  end\n  \n  defp output(state) do\n    value = state.tape[state.position] || 0\n    %{state | output: [value | state.output]}\n  end\n  \n  defp input(state) do\n    <<value::integer-size(1)-unit(8)>> = String.at(state.input, state.input_pointer)\n    new_tape = Map.put(state.tape, state.position, value)\n   \n    %{state | tape: new_tape, input_pointer: state.input_pointer + 1}\n  end\n  \n  defp open_bracket(state) do\n    if data(state) == 0 do\n      find_closing_bracket(state, 1, state.code_pointer + 1)\n    else\n      state\n    end\n  end\n  \n  defp find_closing_bracket(state, bracket_count, code_pointer) do\n    if code_pointer >= byte_size(state.code) || bracket_count == 0 do\n      %{state | code_pointer: code_pointer - 1}\n    else\n      case String.at(state.code, code_pointer) do\n        \"[\" -> find_closing_bracket(state, bracket_count + 1, code_pointer + 1)\n        \"]\" -> find_closing_bracket(state, bracket_count - 1, code_pointer + 1)\n        _ -> find_closing_bracket(state, bracket_count, code_pointer + 1)\n      end\n    end\n  end\n\n  defp close_bracket(state) do\n    if data(state) != 0 do\n      find_opening_bracket(state, 1, state.code_pointer - 1)\n    else\n      state\n    end\n  end\n  \n  defp find_opening_bracket(state, bracket_count, code_pointer) do\n    if code_pointer < 0 || bracket_count == 0 do\n      %{state | code_pointer: code_pointer + 1}\n    else\n      case String.at(state.code, code_pointer) do\n        \"[\" -> find_opening_bracket(state, bracket_count - 1, code_pointer - 1)\n        \"]\" -> find_opening_bracket(state, bracket_count + 1, code_pointer - 1)\n        _ -> find_opening_bracket(state, bracket_count, code_pointer - 1)\n      end\n    end\n  end\n  \n  defp move_code_pointer(state) do\n    next_position = state.code_pointer + 1\n    %{state | code_pointer: next_position }\n  end\n  \n  defp reducer(state) do\n    if state.code_pointer >= byte_size(state.code) do\n      state\n    else\n      command = String.at(state.code, state.code_pointer)\n      case command do\n        \">\" -> increase_pointer(state)\n        \"<\" -> decrease_pointer(state)\n        \"+\" -> increase_data(state)\n        \"-\" -> decrease_data(state)\n        \",\" -> input(state)\n        \".\" -> output(state)\n        \"[\" -> open_bracket(state)\n        \"]\" -> close_bracket(state)\n      end\n      |> move_code_pointer()\n      |> reducer()\n    end\n  end\n      \n  \n  def brain_luck(program, inputs) do\n    %ProgramState{input: inputs, code: program, position: 0}\n      |> reducer()\n      |> Map.get(:output)\n      |> Enum.reverse()\n      |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"526233aefd4764272800036f":[{"id":76071,"user_id":null,"body":"defmodule Kata do\n    def matrix_addition(a,b), do:\n        Enum.zip(a,b) |> Enum.map(fn {c,d} -> Enum.zip(c,d) |> Enum.map(fn {x,y} -> x+y end) end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76072,"user_id":470,"body":"defmodule Kata do\n\tdef matrix_addition([],[]),do: []\n\tdef matrix_addition([h1|r1],[h2|r2]),do: [ix(h1,h2) | matrix_addition(r1,r2)]\n\t\n\tdefp ix([],[]),do: []\n\tdefp ix([h1|r1],[h2|r2]),do: [h1+h2 | ix(r1,r2)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76073,"user_id":null,"body":"defmodule Kata do\n  def matrix_addition(a, b) do\n    [List.flatten(a), List.flatten(b)]\n    |> Enum.zip\n    |> Enum.map(fn {a, b} -> a + b end)\n    |> Enum.chunk_every(length(a))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76074,"user_id":null,"body":"defmodule Kata do\n    def matrix_addition([ha | ta], [hb | tb]), do: [ row_addition(ha, hb) | matrix_addition(ta, tb)]\n    def matrix_addition(_, _), do: []\n    \n    def row_addition([ha | ta], [hb | tb]), do: [ ha + hb | row_addition(ta, tb)]\n    def row_addition(_, _), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76075,"user_id":null,"body":"defmodule Kata do\n    def matrix_addition([head1|tail1], [head2|tail2]) do\n        [head1|tail1]\n        |> Enum.with_index\n        |> Enum.map(fn {elem, index}->\n            matrix_addition(elem, Enum.at([head2|tail2], index))\n        end)\n    end\n\n    def matrix_addition(elem1, elem2) do\n        elem1 + elem2\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76076,"user_id":null,"body":"defmodule Kata do\n  @moduledoc \"\"\"\n  Write a function that accepts two square matrices (N x N two dimensional arrays), and return the sum of the two. Both matrices being passed into the function will be of size N x N (square), containing only integers.\n\n  How to sum two matrices:\n\n  Take each cell [n][m] from the first matrix, and add it with the same [n][m] cell from the second matrix. This will be cell [n][m] of the solution matrix.\n  \"\"\"\n  def matrix_addition(a, b) do\n    # your code here\n    zip =\n      Enum.zip(a, b)\n      |> IO.inspect()\n      |> Enum.map(fn {c, d} -> Enum.zip(c, d) |> Enum.map(fn {x, y} -> x + y end) end)\n      |> IO.inspect()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76077,"user_id":564,"body":"defmodule Kata do\n    def matrix_addition(as, bs) do\n      deep_zip_map(as, bs, fn {a, b} -> a + b end)\n    end\n    def zip_map(as, bs, f), do: Enum.zip(as, bs) |> Enum.map(f)\n    def deep_zip_map(as, bs, f) do\n      zip_map(as, bs, fn {a, b} -> zip_map(a, b, f) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76078,"user_id":null,"body":"defmodule Kata do\n    def matrix_addition(a, b), do: Enum.zip(a, b) |> Enum.map(&add_row\/1)\n    \n    defp add_row({a, b}), do: Enum.zip(a, b) |> Enum.map(fn({x, y})-> x + y end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76079,"user_id":null,"body":"defmodule Kata do\n    def matrix_addition(a, b) do\n      Enum.zip(a , b)\n      |> Enum.map(fn {a , b} -> add(a, b) end)\n    end\n    \n    defp add(l1, l2) do\n      Enum.zip(l1, l2)\n      |> Enum.map(fn {a , b} -> a +  b end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76080,"user_id":null,"body":"defmodule Kata do\n  def matrix_addition(a, b) do\n    Enum.zip(a, b)\n    |> Enum.map(fn {rowa, rowb} ->\n      Enum.zip([rowa, rowb]) |> Enum.map(fn {x, y} -> x + y end)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5264d2b162488dc400000001":[{"id":76081,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    message\n    |> String.split(\" \")\n    |> Enum.map(&process_word\/1)\n    |> Enum.join(\" \")\n  end\n  \n  defp process_word(word) when byte_size(word) >= 5 do\n    String.reverse(word)\n  end\n  \n  defp process_word(word), do: word\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76082,"user_id":527,"body":"defmodule Spin do\n  def spin_words(message) do\n    Regex.replace(~r\/\\w{5,}\/, message, &String.reverse\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76083,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    message\n    |> String.split(\" \")\n    |> Enum.map_join(\" \", &(String.length(&1) >= 5 && String.reverse(&1) || &1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76084,"user_id":527,"body":"defmodule Spin do\n  def spin_words(message) do\n    message\n    |> String.split(\" \")\n    |> Enum.map(&(if String.length(&1) >= 5, do: String.reverse(&1), else: &1))\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76085,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    String.split(message)\n    |> Enum.map(fn word -> if String.length(word) >= 5, do: String.reverse(word), else: word end) \n    |> Enum.intersperse(\" \")\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76086,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    reverse = &(String.reverse\/1)\n    length = &(String.length\/1)\n    message |> String.split\n    |> Enum.map(&(if length.(&1) >= 5 do reverse.(&1) else &1 end))\n    |> Enum.join(\" \")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76087,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    reverse = &(String.reverse\/1)\n    length = &(String.length\/1)\n    message |> String.split\n    |> Enum.map(fn x -> if length.(x) >= 5 do reverse.(x) else x end end)\n    |> Enum.join(\" \")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76088,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    String.split(message, \" \")\n    |> Enum.map(&spin_word\/1)\n    |> Enum.join(\" \")\n  end\n  \n  def spin_word(word) do\n    if String.length(word) < 5 do\n      word\n    else\n      String.reverse(word) \n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76089,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    message\n    |> String.split()\n    |> Enum.map(fn word -> spin(word) <> \" \" end)\n    |> List.to_string()\n    |> String.trim()\n  end\n\n  defp spin(word) do\n    case String.length(word) >= 5 do\n      true -> String.reverse(word)\n      false -> word\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76090,"user_id":null,"body":"defmodule Spin do\n  def spin_words(message) do\n    message\n    |> String.split()\n    |> Enum.map(&process\/1)\n    |> Enum.join(\" \")\n  end\n\n  defp process(word) when byte_size(word) > 4, do: String.reverse(word)\n  defp process(word), do: word\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5265326f5fda8eb1160004c8":[{"id":76091,"user_id":1566,"body":"defmodule Stringify do\n  def number_to_string(n) do\n    \"#{n}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76092,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n) when is_number(n), do: \"#{n}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76093,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n), do: to_string n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76094,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n), do: \"#{n}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76095,"user_id":null,"body":"defmodule Stringify do\n  # delegates to kernel function :to_string\n  defdelegate number_to_string(n), to: Kernel, as: :to_string\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76096,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(number), do: to_string(number)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76097,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n) do\n    Kernel.inspect(n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76098,"user_id":null,"body":"defmodule Stringify, do: defdelegate number_to_string(n), to: Kernel, as: :to_string\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76099,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n, digits \\\\ [])\n  def number_to_string(0, []), do: \"0\"\n  def number_to_string(n, digits) when n < 0, do: \"-\" <> number_to_string(-n, digits)\n  def number_to_string(0, digits), do: digits |> Enum.map(&(&1 + ?0)) |> to_string()\n  def number_to_string(n, digits) do\n    digit = rem(n, 10)\n    remainder = div(n, 10)\n    number_to_string(remainder, [digit] ++ digits)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76100,"user_id":null,"body":"defmodule Stringify do\n  def number_to_string(n) when is_float(n) do\n    IO.puts(n)\n    Float.to_string(n)\n  end\n  def number_to_string(n) when is_integer(n) do\n    # return a string of the number here!\n    # Integer.digits(n) |> Enum.join\n    Integer.to_string(n)\n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"526571aae218b8ee490006f4":[{"id":76101,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) do\n    n\n    |> Integer.digits(2)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76102,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) do\n    Enum.sum(Integer.digits(n, 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76103,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n \\\\ 0) do\n    n\n    |> Integer.to_string(2)\n    |> String.graphemes()\n    |> Enum.count(&(&1 == \"1\"))\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76104,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) do\n    # Program me\n    n\n    |> Integer.digits(2)\n    |> Enum.count(fn x -> x == 1 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76105,"user_id":470,"body":"defmodule CountBits do\n\tdef count_bits(n),do: n |> Integer.to_string(2) |> String.replace(\"0\",\"\") |> String.length()\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76106,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(num, tot \\\\ 0)\n  def count_bits(0, tot), do: tot\n  def count_bits(num, tot) do\n    [&div\/2, &rem\/2] \n    |> Enum.map(fn f -> f.(num, 2) end)\n    |> (fn [div, rem] -> bits(div, tot + rem) end).()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76107,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) do\n    n\n      |> Integer.to_string(2)\n      |> String.graphemes\n      |> Enum.map(&(String.to_integer(&1)))\n      |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76108,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) when n == 0 do\n    0\n  end\n  \n  def count_bits(n) do\n    rem(n, 2) + bits(div(n, 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76109,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) do\n    # Program me\n    Integer.digits(n, 2)\n    |> Enum.filter(fn(x) -> x == 1 end)\n    |> length\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76110,"user_id":null,"body":"defmodule CountBits do\n  def count_bits(n) when n < 0 , do: 0\n  def count_bits(n) do\n    n\n    |> Integer.to_string(2)\n    |> String.replace(\"0\",\"\")\n    |> String.length()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52685f7382004e774f0001f7":[{"id":76111,"user_id":null,"body":"defmodule HumanReadable do\n    def human_readable(secs) do\n        pad2 = fn n -> n |> Integer.to_string |> String.pad_leading(2, \"0\") end\n        Enum.map_join([div(secs, 3600), div(rem(secs, 3600), 60), rem(secs, 60)], \":\", pad2)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76112,"user_id":2088,"body":"defmodule HumanReadable do\n  def human_readable(seconds) do\n    {hrs, rem} = divmod(seconds, 3600)\n    {min, sec} = divmod(rem, 60)\n    [hrs, min, sec]\n    |> Enum.map(fn(s) -> String.pad_leading(Integer.to_string(s), 2, \"0\") end)\n    |> Enum.join(\":\")\n  end\n  \n  defp divmod(a, b), do: {div(a, b), rem(a, b)}\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76113,"user_id":null,"body":"defmodule HumanReadable do\n  def human_readable(seconds) do\n    hh = seconds \/ 3600 |> trunc\n    mm = seconds \/ 60 |> trunc |> rem(60)\n    ss = seconds |> rem(60)\n    pad(hh) <> \":\" <> pad(mm) <> \":\" <> pad(ss)\n  end\n  \n  def pad(number) do\n    number\n    |> Integer.to_string\n    |> String.pad_leading(2, \"0\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76114,"user_id":null,"body":"defmodule HumanReadable do\n  def human_readable(seconds) do\n    hours = div(seconds, 3600)\n    minutes = rem(seconds, 3600) |> div(60)\n    seconds = rem(seconds, 60)\n    \n    [hours, minutes, seconds]\n    |> Stream.map(&Integer.to_string\/1)\n    |> Stream.map(&String.pad_leading(&1, 2, \"0\"))\n    |> Enum.join(\":\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76115,"user_id":null,"body":"# write code below\n\ndefmodule HumanReadable do\n  def human_readable(seconds) when seconds == 0, do: \"00:00:00\"\n\n  def human_readable(seconds) do\n    if seconds > 36399 do\n      rem = floor(seconds \/ 86400)\n\n      Time.add(~T[00:00:00], seconds)\n      |> Time.to_iso8601()\n      |> time\n      |> final(rem)\n    else\n      Time.add(~T[00:00:00], seconds)\n      |> Time.to_iso8601()\n      |> time\n    end\n  end\n\n  defp final(time, rem) do\n    [head | tail] = String.split(time, \":\")\n    val = String.to_integer(head)\n    val1 = val + rem * 24\n    str = Integer.to_string(val1)\n    str1 = [str] ++ tail\n    Enum.join(str1, \":\")\n  end\n\n  defp time(string) do\n    [head | _tail] = String.split(string, \".\")\n    head\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76116,"user_id":null,"body":"defmodule HumanReadable do\n  def human_readable(s), do:\n    \"#{div(s, 3600) |> zero_padding}:#{rem(s, 3600) |> div(60) |> zero_padding}:#{rem(s, 3600) |> rem(60) |> zero_padding}\"\n    \n  defp zero_padding(n) when n < 10, do: \"0#{n}\"\n  defp zero_padding(n), do: \"#{n}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76117,"user_id":null,"body":"defmodule HumanReadable do\n  @sec_in_a_min 60\n  @sec_in_a_hour 3600\n\n  @spec format(seconds: non_neg_integer()) :: Time.t()\n  def human_readable(seconds) when seconds <= 359999 do\n    sec =\n      rem(seconds, @sec_in_a_hour)\n      |> rem(@sec_in_a_min)\n      |> Integer.to_string()\n      |> format_zero()\n\n    min =\n      rem(seconds, @sec_in_a_hour)\n      |> div(@sec_in_a_min)\n      |> Integer.to_string()\n      |> format_zero()\n\n    hours =\n      div(seconds, @sec_in_a_hour)\n      |> Integer.to_string()\n      |> format_zero()\n\n    \"#{hours}:#{min}:#{sec}\"\n  end\n\n  defp format_zero(str), do: if String.length(str) < 2, do: \"0#{str}\", else: str\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76118,"user_id":null,"body":"defmodule HumanReadable do\n\n  @units [\n    hour: 3600,\n    minute: 60,\n    second: 1\n  ]\n\n  def human_readable(0) do \"00:00:00\"\n\n  end\n  def human_readable(seconds) do\n    @units\n    |> Enum.map_reduce(seconds, fn {_unit , value}, acc ->\n      div= div(acc,value )\n      |> Integer.to_string\n      |> String.pad_leading( 2, \"0\" )\n      { div , rem(acc,value) }\n     end)\n     |> elem(0)\n     |> Enum.intersperse(\":\")\n     |> Enum.join()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76119,"user_id":null,"body":"defmodule HumanReadable do\n\n  @units [\n    hour: 3600,\n    minute: 60,\n    second: 1\n  ]\n\n  def human_readable(0) do \"00:00:00\"\n\n  end\n  def human_readable(seconds) do\n    @units\n    |> Enum.map_reduce(seconds, fn {_unit , value}, acc ->\n      div = div(acc,value)\n      div = case div do\n              0 -> \"00\"\n              _ -> case  length( Integer.digits( div))do\n                    1 -> \"0\" <> Integer.to_string(div)\n                    _ ->  Integer.to_string(div)\n                  end\n               end\n      { div , rem(acc,value) }\n     end)\n     |> elem(0)\n     |> Enum.intersperse(\":\")\n     |> Enum.join()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76120,"user_id":null,"body":"defmodule HumanReadable do\n  def human_readable(seconds),\n    do:\n      \"#{twodigit(div(seconds, 3600))}:#{twodigit(rem(div(seconds, 60), 60))}:#{twodigit(rem(seconds, 60))}\"\n\n  defp twodigit(v), do: \"#{v}\" |> String.pad_leading(2, \"0\")\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5269452810342858ec000951":[{"id":76121,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    [{lat, \"\"}, {lng, \"\"}] = coordinates |> String.split(~r\/, ?\/) |> Enum.map(&Float.parse\/1)\n    abs(lat) <= 90 and abs(lng) <= 180 and Regex.match?(~r\/^[-., 0-9]+$\/, coordinates)\n  rescue\n    MatchError -> false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76122,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    coordinates =~ ~r\/^-?(90|[1-8]?\\d)\\.?\\d*\\, -?(180|1[0-7]\\d|[1-9]?\\d)\\.?\\d*\\z\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76123,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    try do\n      coordinates \n        |> String.split(\",\")\n        |> Enum.map(fn x -> x |> String.trim |> parse_coord_string end)\n        |> validate\n    rescue\n      _ -> false\n    end\n  end\n  \n  defp parse_coord_string(coord_str) do \n    case String.match?(coord_str, ~r\/^-?\\d+(\\.\\d+)?$\/) do\n      true -> Float.parse(coord_str)\n      false -> :error\n    end\n  end\n\n  defp validate([{lat, \"\"}, {long, \"\"}]) when (lat >= -90 and lat <= 90) and (long >= -180 and lat <= 180), do: true\n  defp validate([{lat, _}, {long, _}]), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76124,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    coordinates\n    |> String.match?(~r\/^-?([0-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s-?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)$\/)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76125,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    Regex.match?(~r\/^-?([0-8]?([0-9](\\.[0-9]+)?)|90(\\.0+)?), -?([0-9]{1,2}(\\.[0-9]+)?|1[0-7][0-9](\\.[0-9]+)?|180(\\.0+)?)$\/, coordinates)   \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76126,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    IO.inspect(coordinates)\n    \n    with false <- Regex.match?(~r{[^\\. 0-9,\\-]}, coordinates),\n      [lati, longi] <- String.split(coordinates, ~r{ *, *}, parts: 3) |> Enum.map(&String.trim\/1),\n      {lati, \"\"} <- Float.parse(lati),\n      {longi, \"\"} <- Float.parse(longi) do\n      lati >= -90 and lati <= 90 and longi >= -180 and longi <= 180\n    else\n      _ ->\n        false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76127,"user_id":null,"body":"defmodule Solution do\n  def isValidCoordinates(coordinates) do\n    Regex.match?(~R<^-?(0?[0-8]?[0-9])(\\.\\d+)?, -?([0-9]|[0-9][0-9]|1[0-7][0-8])(\\.\\d+)?$>, coordinates)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76128,"user_id":null,"body":"defmodule Solution do   \n  defp isWithin(f, b), do: f >= -b && f <= b\n  \n  defp isValid([{lt, \"\"}, {lng, \"\"} | []]), do: isWithin(lt, 90) && isWithin(lng, 180)\n  defp isValid(_), do: false\n  \n  defp parse(str) do \n    cond do \n      String.contains?(str, \"e\") -> :corner_case_e\n      true -> Float.parse(str)\n    end\n  end \n    \n  def isValidCoordinates(coordinates), do: coordinates\n    |> String.split(\", \")\n    |> Enum.map(&parse\/1)\n    |> isValid\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76129,"user_id":null,"body":"defmodule Solution do\n  defp parse_float(s) do\n    {v, _} = Float.parse(s)\n    v\n  end\n\n  def isValidCoordinates(coordinates) do\n    m = Regex.run(~r\/^(-?\\d+(?:\\.\\d+)?), ?(-?\\d+(?:\\.\\d+)?)$\/, coordinates)\n    !!(m && abs(parse_float(Enum.at(m, 1))) <= 90 && abs(parse_float(Enum.at(m, 2))) <= 180)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76130,"user_id":null,"body":"defmodule Solution do\n\n  def is_valid_range([lat, long]) do\n    lat >= -90.00 && lat <= 90.00 && long >= -180.00 && long <= 180.00\n  end\n\n  def is_valid_range(_), do: false\n\n  def is_valid_length(list), do: length(list) == 2\n\n  def is_valid_coordinate_string(coordinates),\n    do:\n      !Regex.match?(~r\/-[[:space:]]\/, coordinates) &&\n        !Regex.match?(~r\/[[:alpha:]]\/, coordinates)\n\n  def parse_coordinates(coordinates) do\n    split_coordinates =\n      String.split(coordinates, \",\")\n      |> Enum.map(fn l -> String.replace(l, ~r\/[[:space:]]\/, \"\") end)\n\n    if Kernel.length(split_coordinates) == 2 do\n      Enum.map(split_coordinates, fn coord_value ->\n        case Float.parse(coord_value) do\n          {float, \"\"} ->\n            float\n\n          _ ->\n            nil\n        end\n      end)\n      |> Enum.reject(fn val -> val == nil end)\n    else\n      []\n    end\n  end\n\n  def isValidCoordinates(coordinates) do\n    coordinates_as_float = parse_coordinates(coordinates)\n    is_valid_coordinate_string(coordinates) && is_valid_length(coordinates_as_float) &&\n      is_valid_range(coordinates_as_float)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52742f58faf5485cae000b9a":[{"id":76131,"user_id":null,"body":"defmodule DurationFormatter do\n  @units [\n    year: 31536000,\n    day: 86400,\n    hour: 3600,\n    minute: 60,\n    second: 1\n  ]\n  \n  def format_duration(0), do: \"now\"\n  def format_duration(seconds) do\n    @units\n    |> Enum.map_reduce(seconds, fn {unit, n}, s -> {{unit, div(s, n)}, rem(s, n)} end)\n    |> elem(0)\n    |> Enum.filter(fn {_, n} -> n > 0 end)\n    |> Enum.map(fn {unit, 1} -> \"1 #{unit}\"\n                   {unit, n} -> \"#{n} #{unit}s\" end)\n    |> Enum.intersperse(\", \")\n    |> List.replace_at(-2, \" and \")\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76132,"user_id":null,"body":"defmodule DurationFormatter do\n  @time_units [\n    year:   60 * 60 * 24 * 365,\n    day:    60 * 60 * 24,\n    hour:   60 * 60,\n    minute: 60,\n    second: 1\n  ]\n  \n  def format_duration(0), do: \"now\"\n  def format_duration(s) do\n    @time_units\n    |> Enum.map_reduce(s, fn {unit, v}, s -> {{unit, div(s, v)}, rem(s, v)} end)\n    |> elem(0)\n    |> Enum.filter(fn {_unit, n} -> n > 0 end)\n    |> Enum.map_join(\", \", &pluralize\/1)\n    |> String.replace(~r\/, (?!.*, )\/, \" and \")\n  end\n\n  defp pluralize({unit, 1}), do: \"1 #{unit}\"\n  defp pluralize({unit, n}), do: \"#{n} #{unit}s\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76133,"user_id":null,"body":"defmodule CommaString do\n    @doc \"\"\"\n    Creates a comma seperated string from a list.\n\n    ## Examples\n      iex> CommaString.from_list([\"a\", \"b\", \"c\", \"d\"])\n      \"a, b, c and d\"\n    \"\"\"\n    @spec from_list([String.t]) :: String.t\n    def from_list(list) do\n        list\n        |> Enum.intersperse(\", \")\n        |> List.replace_at(-2, \" and \")\n        |> Enum.join\n    end\nend\n\ndefmodule DurationFormatter do\n  @doc \"\"\"\n  Formats a number of seconds into a human readable format.\n\n  ## Examples\n    iex> DurationFromatter.format_duration(120)\n    \"2 minutes\"\n    iex> DurationFromatter.format_duration(500)\n    \"8 minutes and 20 seconds\"\n    iex> format_duration(3662)\n    \"1 hour, 1 minute and 2 seconds\"\n  \"\"\"\n  @spec format_duration(seconds :: integer) :: String.t\n  def format_duration(0), do: \"now\"\n  def format_duration(seconds) do\n    seconds\n    |> durations_from_seconds\n    |> Enum.map(&time_string_part\/1)\n    |> Enum.filter(&(&1))\n    |> CommaString.from_list\n  end\n\n  @doc \"\"\"\n  Generates a keyword list of durations from seconds\n\n  return keyword contains:\n    - year\n    - day\n    - hour\n    - minute\n    - second\n\n  ## Examples\n    iex> DurationFormatter.durations_from_seconds(936351)\n    [year: 0, day: 10, hour: 20, minute: 5, second: 51]\n  \"\"\"\n  @spec durations_from_seconds(seconds :: integer) :: [key: integer]\n  def durations_from_seconds(seconds) do\n    {d, {h, m, s}} = :calendar.seconds_to_daystime(seconds)\n    y = div(d, 365)\n    d = rem(d, 365)\n    [year: y, day: d, hour: h, minute: m, second: s]\n  end\n\n  defp time_string_part({_name, 0}), do: nil\n  defp time_string_part({name, 1}), do: \"1 #{name}\"\n  defp time_string_part({name, value}), do: \"#{value} #{name}s\"\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76134,"user_id":null,"body":"defmodule DurationFormatter do\n  @time_units [\n    year:   60 * 60 * 24 * 365,\n    day:    60 * 60 * 24,\n    hour:   60 * 60,\n    minute: 60,\n    second: 1\n  ]\n  \n  def format_duration(0), do: \"now\"\n  def format_duration(s) do\n    @time_units\n    |> Enum.map_reduce(s, fn {unit, v}, s -> {{unit, div(s, v)}, rem(s, v)} end)\n    |> elem(0)\n    |> Enum.filter(fn {_unit, n} -> n > 0 end)\n    |> Enum.map_join(\", \", fn {unit, 1} -> \"1 #{unit}\"\n                              {unit, n} -> \"#{n} #{unit}s\" end)\n    |> String.replace(~r\/, (?!.*, )\/, \" and \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76135,"user_id":null,"body":"defmodule DurationFormatter do\n\n  def format_duration(0), do: \"now\"\n  def format_duration(n) when n > 0 do\n    [\n      { n |> div(60 * 60 * 24 * 365)            , \"year\"   },\n      { n |> div(60 * 60 * 24)       |> rem(365), \"day\"    },\n      { n |> div(60 * 60)            |> rem(24),  \"hour\"   },\n      { n |> div(60)                 |> rem(60),  \"minute\" },\n      { n |>                            rem(60),  \"second\" }\n    ]\n    |> Enum.flat_map(&part\/1)\n    |> join_parts\n  end\n\n  def part({x, label}) when x > 1, do: [\"#{x} #{label}s\"]\n  def part({1, label}), do: [\"1 #{label}\"]\n  def part({0, _}), do: []\n\n  def join_parts([x]), do: x\n  def join_parts(xs) do\n    Enum.join(Enum.drop(xs, -1), \", \") <> \" and \" <> List.last(xs)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76136,"user_id":null,"body":"defmodule DurationFormatter do\n  @spec format_duration(non_neg_integer) :: String.t()\n  \n  def format_duration(0), do: \"now\"\n  \n  def format_duration(seconds) do\n    # Your code here\n    {y, tail} = {div(seconds, 31536000), rem(seconds, 31536000)}\n    {d, rest} = {div(tail, 86400), rem(tail, 86400)}\n    time = Time.from_seconds_after_midnight(rest)\n    {h, m, s} = {time.hour, time.minute, time.second}\n    l = [y, d, h, m, s]\n    units = [\"year\", \"day\", \"hour\", \"minute\", \"second\"]\n    together = Enum.zip(l, units) |> Enum.filter(fn {a, b} -> a > 0 end)\n    final = Enum.map(together, fn {a, b} -> \n      (if a == 1 do\n        Integer.to_string(a) <> \" \" <> b\n      else\n        Integer.to_string(a) <> \" \" <> b <> \"s\"\n      end)\n      end)\n\n    cond do\n      length(final) == 1 -> Enum.fetch!(final, 0)\n      true -> Enum.join(Enum.slice(final, 0..-2), \", \") <> \" and \" <> Enum.fetch!(final, -1)\n    end\n    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76137,"user_id":null,"body":"defmodule DurationFormatter do\n  def format_duration(seconds) do\n    # Your code here\n    rest = seconds\n    {rest, seconds} = cut_off(rest, 60)\n    {rest, minutes} = cut_off(rest, 60)\n    {rest, hours} = cut_off(rest, 24)\n    {years, days} = cut_off(rest, 365)\n    \n    [years, days, hours, minutes, seconds]\n    |> Enum.zip([\"year\", \"day\", \"hour\", \"minute\", \"second\"])\n    |> Enum.map(fn {quantity, unit} -> print_quantity(quantity, unit) end)\n    |> concat_components()\n  end\n  \n  def cut_off(total, max) do\n    {div(total, max), rem(total, max)}\n  end\n  \n  def print_quantity(quantity, unit) do\n    case quantity do\n      0 -> nil\n      1 -> \"1 #{unit}\"\n      more when more > 1 -> \"#{quantity} #{unit}s\"\n    end\n  end\n  \n  def concat_components(string_components) do\n    do_concat_components(Enum.reject(string_components, & &1 == nil)) \n  end\n  \n  defp do_concat_components([y, z]) do\n    \"#{y} and #{z}\"\n  end\n  \n  defp do_concat_components([z]) do\n    z\n  end\n  \n  defp do_concat_components([first | rest]) do\n    \"#{first}, \" <> do_concat_components(rest)\n  end\n  \n  defp do_concat_components([]) do\n    \"now\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76138,"user_id":null,"body":"defmodule DurationFormatter do\n  @parts [\n    {\"year\", 60 * 60 * 24 * 365},\n    {\"day\", 60 * 60 * 24},\n    {\"hour\", 60 * 60}, \n    {\"minute\", 60}, \n    {\"second\", 1} \n  ]\n  \n  def format_duration(0), do: \"now\"\n  \n  def format_duration(seconds) do\n    parse(@parts, seconds, []) \n  end\n  \n  defp parse([], _, result), do: join_result(result) \n  \n  defp parse([{name, divisor} | rest], remaining, result) do\n    case Integer.floor_div(remaining, divisor) do\n      0 -> parse(rest, remaining, result) \n      1 -> parse(rest, rem(remaining, divisor), [\"1 #{name}\" | result])\n      num -> parse(rest, rem(remaining, divisor), [\"#{num} #{name}s\" | result])\n    end\n  end\n  \n  defp join_result([]), do: \"\"\n  \n  defp join_result([last]), do: last\n  \n  defp join_result([last | parts]) do\n    start = parts |> Enum.reverse() |> Enum.join(\", \") \n    start <> \" and #{last}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76139,"user_id":null,"body":"defmodule DurationFormatter do\n  @second 1\n  @minute 60\n  @hour 3600\n  @day 86400\n  @year 31536000\n\n  def format_duration(0), do: \"now\"\n  def format_duration(@second), do: \"1 second\"\n  def format_duration(@minute), do: \"1 minute\"\n  def format_duration(@hour), do: \"1 hour\"\n  def format_duration(@day), do: \"1 day\"\n  def format_duration(@year), do: \"1 year\"\n  def format_duration(_, 0), do: 0\n  def format_duration(@second, 1), do: format_duration(@second)\n  def format_duration(@second, val), do: \"#{val} seconds\"\n  def format_duration(@minute, 1), do: format_duration(@minute)\n  def format_duration(@minute, val), do: \"#{val} minutes\"\n  def format_duration(@hour, 1), do: format_duration(@hour)\n  def format_duration(@hour, val), do: \"#{val} hours\"\n  def format_duration(@day, 1), do: format_duration(@day)\n  def format_duration(@day, val), do: \"#{val} days\"\n  def format_duration(@year, 1), do: format_duration(@year)\n  def format_duration(@year, val), do: \"#{val} years\"\n  def format_duration(seconds) when is_number(seconds) do\n    [@year, @day, @hour, @minute, @second]\n    |> Enum.reduce([seconds], fn unit, [remaining_secs | acc]->\n      result = trunc(remaining_secs \/ unit)\n      [(remaining_secs - result * unit), format_duration(unit, result)] ++ acc\n    end)\n    |> Enum.filter(&(&1 > 0))\n    |> format_duration\n  end\n  def format_duration([h | []]), do: h\n  def format_duration([h | t]), do: (Enum.reverse(t) |> Enum.join(\", \")) <> \" and #{h}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76140,"user_id":null,"body":"defmodule DurationFormatter do\n\n  def format_duration(duration) when duration == 0 do\n    \"now\"\n  end\n\n  def format_duration(duration) do\n    [mins | secs] = div_and_rem(duration, 60)\n    [hours | mins] = div_and_rem(mins, 60)\n    [days | hours] = div_and_rem(hours, 24)\n    [years | days] = div_and_rem(days, 365)\n\n    append_time([], years, \"year\")\n    |> append_time(days, \"day\")\n    |> append_time(hours, \"hour\")\n    |> append_time(mins, \"minute\")\n    |> append_time(secs, \"second\")\n    |> format_answer\n  end\n\n  defp div_and_rem(divided, divisor) do\n    if (divided >= divisor) do\n      [div(divided, divisor) | rem(divided, divisor)]\n    else\n      [0 | divided]\n    end\n  end\n\n  defp append_time(list, 0, _) do\n    list\n  end\n\n  defp append_time([], duration, txt) do\n    [format_time(duration, txt)]\n  end\n\n  defp append_time(list, duration, txt) do\n    list ++ [format_time(duration, txt)]\n  end\n\n  defp format_time(1, txt) do\n    \"1 \" <> txt\n  end\n\n  defp format_time(duration, txt) do\n    \"#{duration} \" <> txt <> \"s\"\n  end\n\n  defp format_answer(list) when length(list) == 1 do\n    Enum.at(list, 0)\n  end\n\n  defp format_answer(list) do\n    [head | tail] = Enum.reverse(list)\n    Enum.reverse(tail) |> Enum.join(\", \") |> Kernel.<>(\" and \" <> head)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52774a314c2333f0a7000688":[{"id":76141,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    do_work(String.to_char_list(string), 0)\n  end\n  \n  defp do_work([], 0), do: true\n  defp do_work([], _), do: false\n  defp do_work([?) | _rest], 0), do: false\n  defp do_work([?( | rest], level), do: do_work(rest, level + 1)\n  defp do_work([?) | rest], level), do: do_work(rest, level - 1)\n  defp do_work([_ | rest], level), do: do_work(rest, level)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76142,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    string\n    |> String.graphemes()\n    |> Enum.reduce_while(0, fn \"(\", n -> {:cont, n + 1}\n                               \")\", 0 -> {:halt, -1}\n                               \")\", n -> {:cont, n - 1}\n                               _, n -> {:cont, n} end) == 0\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76143,"user_id":null,"body":"defmodule ParenthesesValidator do\n  @moduledoc \"\"\"\n  Process string recursively from left to right.\n  If character is '(', increase count, if ')', decrease count.\n  Count cannot go negative and must end up at 0 to be valid.\n  \"\"\"\n  # Defaults\n  def valid_parentheses(string, count \\\\ 0)\n\n  # End of string? Check count\n  def valid_parentheses(\"\", count), do: count == 0\n  \n  # Too many closed parentheses?\n  def valid_parentheses(_, count) when count < 0, do: false\n  \n  # General case\n  def valid_parentheses(string, count) do\n    count = case String.first(string) do\n      \"(\" -> count + 1\n      \")\" -> count - 1\n      ___ -> count\n    end\n    \n    valid_parentheses(String.slice(string,1..100), count)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76144,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(\"\"), do: true\n  def valid_parentheses(string) do\n    new_string = string\n    |> String.replace(~r\/[^()]+\/,\"\")\n    |> String.replace(\"()\",\"\")\n    \n    if new_string == string, do: false, else: valid_parentheses(new_string)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76145,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string), do: valid_parentheses(string, 0)\n  def valid_parentheses(\"(\" <> rest, n), do: valid_parentheses(rest, n+1)\n  def valid_parentheses(\")\" <> _rest, n) when n <= 0, do: false\n  def valid_parentheses(\")\" <> rest, n), do: valid_parentheses(rest, n-1)\n  def valid_parentheses(\"\", 0), do: true\n  def valid_parentheses(\"\", _n), do: false\n  def valid_parentheses(string, n), do: string |> String.slice(1..-1) |> valid_parentheses(n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76146,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    result = string\n    |>String.graphemes\n    |>Enum.filter(fn x -> x in ~w\/( )\/ end)\n    |>parse([])\n  end\n  \n#   push to stack\n  def parse([head | tail], stack) when head == \"(\" do \n    parse(tail, [head | stack])\n  end\n  \n#   pop from stack\n  def parse([\")\" | tail], [\"(\" | rest]) do \n    parse(tail, rest)\n  end\n  \n#   empty input, empty stack -> success\n  def parse([], []), do: true\n  \n#   others.. fail\n  def parse(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76147,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do  \n     String.split(string, \"\")\n      |> Enum.filter(& &1==\"(\" or &1==\")\")\n      |> List.foldr( [], &reduce\/2)\n      |> length() == 0\n   end\n \n   defp reduce(head, []), do: [head]\n   defp reduce(\"(\", [\")\" | tail]), do: tail\n   defp reduce(head, [next | tail]), do: [head, next | tail]\n end","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76148,"user_id":527,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    case Regex.compile(string) do\n      {:ok, _} -> true\n      {:error, _} -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76149,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    string\n    |> Regex.compile()\n    |> do_valid_parentheses()\n  end\n  \n  defp do_valid_parentheses({:ok, _}), do: true\n  defp do_valid_parentheses(_), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76150,"user_id":null,"body":"defmodule ParenthesesValidator do\n  def valid_parentheses(string) do\n    str_list = String.codepoints(string)\n    is_balanced(str_list, [\"(\", \")\"])\n  end\n  def is_balanced( str_list, chars ), do: is_balanced_loop( str_list, chars, 0 )\n\n  defp is_balanced_loop( _, _, n ) when n < 0, do: false\n  defp is_balanced_loop( [], _, 0 ), do: true\n  defp is_balanced_loop( [], _, _n ), do: false\n  defp is_balanced_loop( [h | t], chars, n ) do\n    n = if List.first(chars) == h, do: n + 1, else: n\n    n = if List.last(chars) == h, do: n - 1, else: n\n    is_balanced_loop( t, chars, n )\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5277c8a221e209d3f6000b56":[{"id":76151,"user_id":2098,"body":"defmodule Challenge do\n  def valid_braces(braces) do\n    validate(String.codepoints(braces), [])\n  end\n  \n  defp validate([\")\" | tail], [\"(\" | tokens]), do: validate(tail, tokens)\n  defp validate([\"]\" | tail], [\"[\" | tokens]), do: validate(tail, tokens)\n  defp validate([\"}\" | tail], [\"{\" | tokens]), do: validate(tail, tokens)\n  defp validate([head | tail], tokens) when head in [\"(\", \"[\", \"{\"], do: validate(tail, [head | tokens])\n  defp validate([], []), do: true\n  defp validate(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76152,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces), do: valid_braces(braces, [])\n\n  def valid_braces(\"(\" <> rest, opened), do: valid_braces(rest, [\"(\" | opened])\n  def valid_braces(\"[\" <> rest, opened), do: valid_braces(rest, [\"[\" | opened])\n  def valid_braces(\"{\" <> rest, opened), do: valid_braces(rest, [\"{\" | opened])\n\n  def valid_braces(\")\" <> rest, [\"(\" | opened]), do: valid_braces(rest, opened)\n  def valid_braces(\"]\" <> rest, [\"[\" | opened]), do: valid_braces(rest, opened)\n  def valid_braces(\"}\" <> rest, [\"{\" | opened]), do: valid_braces(rest, opened)\n\n  def valid_braces(\"\", []), do: true\n  def valid_braces(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76153,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces), do: String.match?(braces, ~r\/^((\\((?1)\\)|\\[(?1)\\]|\\{(?1)\\})*)$\/)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76154,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces, length \\\\ 0) do\n    length = String.length(braces)\n    new_braces = braces\n                |> String.replace(\"()\", \"\")\n                |> String.replace(\"{}\", \"\")\n                |> String.replace(\"[]\", \"\")\n    \n    cond do\n      (String.length(new_braces) == length) ->\n        false\n      (new_braces == \"\") ->\n        true\n      true ->\n        valid_braces(new_braces, length)\n    end\n    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76155,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces) do\n    String.match?(braces, ~r\/^((\\[(?1)\\]|\\((?1)\\)|\\{(?1)\\})*)$\/)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76156,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces) do\n    braces\n    |> String.codepoints\n    |> Enum.reduce([], &match_braces\/2) == []\n  end\n  \n  defmacro is_pair?(a, b) do\n    quote do\n      unquote(a) == \"(\" and unquote(b) == \")\" or\n      unquote(a) == \"[\" and unquote(b) == \"]\" or\n      unquote(a) == \"{\" and unquote(b) == \"}\"\n    end\n  end\n  \n  defp match_braces(brace, [prev | tail]) when is_pair?(prev, brace), do: tail\n  defp match_braces(brace, stack), do: [brace | stack]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76157,"user_id":null,"body":"defmodule Challenge do\n  def cancellations braces do\n    if String.contains?(braces, [\"()\", \"{}\", \"[]\"]) do\n        cancellations (String.replace(braces, [\"()\", \"{}\", \"[]\"], \"\"))\n    else\n        braces\n    end\n  end\n  def valid_braces(braces) do\n     (Challenge.cancellations braces) == \"\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76158,"user_id":null,"body":"# write code below\n\ndefmodule Challenge do\n  def valid_braces(\"\"), do: true\n\n  def valid_braces(braces) do\n    braces_list = [\"{}\", \"()\", \"[]\"]\n\n    splitting = String.split(braces, braces_list)\n\n    if Enum.count(splitting) >= 2 do\n      join = Enum.join(splitting, \"\")\n      valid_braces(join)\n    else\n      false\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76159,"user_id":null,"body":"defmodule Challenge do\n  def valid_braces(braces), do: do_valid(String.graphemes(braces), [])\n  defp do_valid([], []), do: true\n  defp do_valid([\")\" | tail], [\"(\" | stack]), do: do_valid(tail, stack)\n  defp do_valid([\"]\" | tail], [\"[\" | stack]), do: do_valid(tail, stack)\n  defp do_valid([\"}\" | tail], [\"{\" | stack]), do: do_valid(tail, stack)\n  defp do_valid([char | tail], stack) when char in ~w\"( [ {\", do: do_valid(tail, [char | stack])\n  defp do_valid([char | tail], stack) when char not in ~w\"( ) [ ] { }\", do: do_valid(tail, stack)\n  defp do_valid(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76160,"user_id":676,"body":"defmodule Challenge do\n  def valid_braces(braces), do: valid(braces, [])\n  \n  defp valid(\"\", []), do: true\n  defp valid(\"\", _), do: false\n  defp valid(\")\" <> _, []), do: false\n  defp valid(\"]\" <> _, []), do: false\n  defp valid(\"}\" <> _, []), do: false\n  defp valid(s, []), do: valid(String.slice(s, 1..-1), [String.first(s)])\n  defp valid(\")\" <> cs, [\"(\" | bs]), do: valid(cs, bs)\n  defp valid(\"]\" <> cs, [\"[\" | bs]), do: valid(cs, bs)\n  defp valid(\"}\" <> cs, [\"{\" | bs]), do: valid(cs, bs)\n  defp valid(s, bs), do: valid(String.slice(s, 1..-1), [String.first(s) | bs])\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5286b2e162056fd0cb000c20":[{"id":76161,"user_id":1904,"body":"defmodule Collatz do\n  import Integer\n  \n  def collatz(1), do: \"1\"\n  def collatz(n) when is_odd(n), do: Integer.to_string(n) <> \"->\" <> collatz(3*n + 1)\n  def collatz(n) when is_even(n), do: Integer.to_string(n) <> \"->\" <> collatz(div(n, 2))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76162,"user_id":null,"body":"defmodule Collatz do\n\n  def collatz(n) do\n    collatz_sequence(n)\n    |> List.flatten\n    |> Enum.join(\"->\")\n  end\n\n  defp collatz_sequence(1), do: [1]\n  defp collatz_sequence(n) when rem(n,2) == 0, do: [n, collatz(div(n,2))]\n  defp collatz_sequence(n), do: [n, collatz(3 * n + 1)]\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76163,"user_id":null,"body":"defmodule Collatz do\n\n  def collatz(n) do\n    n\n    |> process\n    |> merge\n  end\n  \n  defp process(n, result \\\\ [])\n  defp process(1, result),                     do: [1 | result]\n  defp process(n, result) when rem(n, 2) == 0, do: process(div(n, 2), [n | result])\n  defp process(n, result),                     do: process(3 * n + 1, [n | result])\n  \n  defp merge(result) do\n    result\n    |> Enum.reverse\n    |> Enum.join(\"->\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76164,"user_id":null,"body":"defmodule Collatz do\n  import Integer, only: [is_even: 1, is_odd: 1]\n\n  def collatz(1), do: \"1\"\n  def collatz(n) when is_even(n), do: to_string(n) <> \"->\" <> collatz(div(n, 2))\n  def collatz(n) when is_odd(n), do: to_string(n) <> \"->\" <> collatz(3 * n + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76165,"user_id":null,"body":"defmodule Collatz do\n  import Integer\n\n  def collatz(n) do\n    Stream.iterate(n, fn\n      1 -> :stop\n      n when is_even(n) -> div(n, 2)\n      n when is_odd(n) -> 3 * n + 1\n    end)\n    |> Stream.take_while(&(&1 != :stop))\n    |> Enum.join(\"->\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76166,"user_id":null,"body":"defmodule Collatz do\n  import Integer\n\n  def collatz(1), do: \"1\"\n  def collatz(n) when is_even(n), do: \"#{n}->\" <> collatz(div(n, 2))\n  def collatz(n) when is_odd(n), do: \"#{n}->\" <> collatz(3 * n + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76167,"user_id":null,"body":"defmodule Collatz do\n  require Integer\n  \n  def collatz(1, seq), do: seq\n  def collatz(n, seq) when Integer.is_even(n), do: append(n \/ 2, seq)\n  def collatz(n, seq) when Integer.is_odd(n), do: append(3 * n + 1, seq)\n  def collatz(n), do: collatz(n, to_string(n))\n  \n  defp append(n, seq), do: collatz(round(n), \"#{seq}->#{round(n)}\") \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76168,"user_id":null,"body":"defmodule Collatz do\n\n  def collatz(n) do\n    collatz(n, \"\")\n  end\n\n  def collatz(1, result), do: \"#{result}1\"\n  def collatz(n, result) do\n    if rem(n,2) == 0 do\n      collatz(div(n,2), \"#{result}#{n}->\")\n    else\n      collatz(3*n+1, \"#{result}#{n}->\")\n    end\n  end\n\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76169,"user_id":1774,"body":"defmodule Collatz do\n\n  def collatz(n), do: do_collatz(n, \"#{n}\")\n  \n  defp do_collatz(1, str), do: str\n  defp do_collatz(n, str), do: do_collatz(next(n), str <> \"->#{next(n)}\")\n  \n  defp next(n) when rem(n, 2) == 0, do: div(n, 2)\n  defp next(n), do: 3 * n + 1\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76170,"user_id":null,"body":"defmodule Collatz do\n  import Integer\n  \n  def collatz(n) when n == 1, do: \"1\"\n  def collatz(n) do\n    Integer.to_string(n)\n    <> \"->\"\n    <> if(is_odd(n), do: collatz(3 * n + 1), else: collatz(div(n, 2)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"529eef7a9194e0cbc1000255":[{"id":76171,"user_id":null,"body":"defmodule Anagram do\n  def letters(a) do \n    a \n    |> String.downcase\n    |> String.to_char_list\n    |> Enum.sort\n  end\n  \n  def is_anagram(a, b) do\n    letters(a) == letters(b)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76172,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    String.bag_distance(String.downcase(a), String.downcase(b)) == 1.0\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76173,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    compare_prep(a) == compare_prep(b)\n  end\n  \n  defp compare_prep(string) when is_binary(string) do\n    string\n    |> String.downcase()\n    |> String.graphemes()\n    |> Enum.sort()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76174,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) when byte_size(a) != byte_size(b), do: false\n  def is_anagram(a, b), do: str_to_list(a) -- str_to_list(b) |> Enum.empty?\n  def str_to_list(str), do: String.downcase(str) |> String.split(\"\", trim: true)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76175,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b), do: prepare_word(a) == prepare_word(b)\n\n  def prepare_word(word), do: String.downcase(word) |> String.codepoints |> Enum.sort\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76176,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    sorted_chars(a) == sorted_chars(b)\n  end\n  \n  defp sorted_chars(str) do\n    str |> String.downcase |> String.graphemes |> Enum.sort()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76177,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    [a, b]\n    |> Enum.map(fn x -> x \n                  |> String.graphemes\n                  |> Enum.map(&String.downcase\/1)\n                  |> Enum.sort        \n                end)\n    |> Enum.uniq\n    |> Kernel.length\n    |> Kernel.== 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76178,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    letter_counts(a) == letter_counts(b)\n  end\n  \n  def letter_counts(str) do\n    str\n    |>String.downcase # set all to lowercase\n    |>String.graphemes # split into list of letters\n    |>Enum.group_by(&(&1)) # group by letter\n    |>Enum.map(fn {key, items} -> {key, length(items)} end)\n#     |>Enum.map(&({&1|>elem(0), &1|>elem(1)|>length})) # alternative to line above\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76179,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    a\n    |> String.downcase()\n    |> String.bag_distance(String.downcase(b)) \n    |> Kernel.==(1.0)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76180,"user_id":null,"body":"defmodule Anagram do\n  def is_anagram(a, b) do\n    anagram_check(a) == anagram_check(b)\n  end\n  \n  defp anagram_check(a) do\n    String.downcase(a) |> String.graphemes() |> Enum.sort\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52adc142b2651f25a8000643":[{"id":76181,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(\"Santa Claus\", \"Ho Ho Ho!\"), do: true\n  def authenticate?(_name, _password), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76182,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(\"Santa Claus\", \"Ho Ho Ho!\"), do: true\n  def authenticate?(_,_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76183,"user_id":null,"body":"defmodule SleighAuthentication do\n  @moduledoc \"\"\"\n    SleighAuthentication module provides access to use Santa's sleigh\n  \"\"\"\n  @doc \"\"\"\n    Authenticate access given login and password.\n    \n    Returns `true` or `false`\n    \n    ## Examples\n    \n      iex> SleighAuthentication.authenticate?(\"Santa Claus\", \"Ho Ho Ho!\")\n      true\n  \"\"\"\n  \n  def authenticate?(\"Santa Claus\", \"Ho Ho Ho!\"), do: true\n\tdef authenticate?(_,_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76184,"user_id":null,"body":"defmodule SleighAuthentication do\n  @creds {\"Santa Claus\", \"Ho Ho Ho!\"}\n  def authenticate?(name, password), do: {name, password} == @creds\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76185,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(name, password)\n  def authenticate?(\"Santa Claus\", \"Ho Ho Ho!\"), do: true\n  def authenticate?(_, _), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76186,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(name, password) do\n    if name === \"Santa Claus\" && password === \"Ho Ho Ho!\" do\n      true \n    else false \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76187,"user_id":null,"body":"defmodule SleighAuthentication, do: def authenticate?(name, password), do: if name == \"Santa Claus\" && password == \"Ho Ho Ho!\", do: true, else: false\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76188,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(\"Santa Claus\", \"Ho Ho Ho!\") do\n     true\n  end\n  def authenticate?(_name, _password) do\n    false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76189,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(name, password) do\n    case {name, password} do\n      {\"Santa Claus\", \"Ho Ho Ho!\"} ->\n        true\n      _ ->\n        false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76190,"user_id":null,"body":"defmodule SleighAuthentication do\n  def authenticate?(name, password), do: [name, password] == [\"Santa Claus\", \"Ho Ho Ho!\"]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52b7ed099cdc285c300001cd":[{"id":76191,"user_id":527,"body":"defmodule Kata do\n  def sum_of_intervals(intervals) do\n    intervals\n      |> Enum.sort\n      |> Stream.scan(fn {b, e}, {_, x} -> {max(b, x), max(e, x)} end)\n      |> Stream.map(fn {b, e} -> e - b end)\n      |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76192,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals(a) do\n    a\n    |> Enum.map(&do_get_intervals(&1))\n    |> List.flatten()\n    |> Enum.uniq()\n    |> length()\n  end\n  \n  defp do_get_intervals({first, last}) do\n    Enum.map(first..last-1, &(&1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76193,"user_id":53,"body":"defmodule Kata do\n  def sum_of_intervals(xs), do: MapSet.size(walk(MapSet.new(), xs))\n  defp walk(res, []), do: res\n  defp walk(res, [x | xs]), do: walk(walk2(res, elem(x, 0), elem(x, 1)), xs)\n  defp walk2(res, i, b) when i == b, do: res\n  defp walk2(res, i, b), do: walk2(MapSet.put(res, i), i + 1, b)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76194,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals(a) do\n    Enum.reduce(a, MapSet.new, &add_range\/2)\n    |> MapSet.size\n  end\n  \n  def add_range({x, y}, acc) when x == y, do: acc\n  def add_range({x, y}, acc), do: add_range({x+1, y}, MapSet.put(acc, {x, x+1}))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76195,"user_id":645,"body":"defmodule Kata, do: def sum_of_intervals(a), do: a |> Enum.flat_map(fn x -> elem(x, 0)..elem(x, 1) - 1 end) |> Enum.uniq |> Enum.count","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76196,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals(a) do\n    a\n      |> Enum.flat_map(fn {from, to} -> [{from, :from}, {to, :to}] end)\n      |> Enum.sort()\n      |> Enum.reduce({[], 0}, fn\n        {_, :to}, {[{_, :from} | [{_, :from} | _] = tail], sum} -> {tail, sum}\n        {f, :to}, {[{t, :from} | tail], sum} -> {tail, sum + f - t}\n        {_, :from} = e, {l, sum} -> {[e | l], sum}\n      end)\n      |> elem(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76197,"user_id":null,"body":"defmodule Kata do\n  def is_overlap({a, b}, {c, d}), do: c > a and c < b or a > c and a < d\n\n  def get_interval({a, b}, {c,d}), do: {min(a, c), max(b, d)}\n\n  def sum_of_intervals(list, result \\\\ [])\n  def sum_of_intervals([], result) do\n    result\n    |> Enum.dedup()\n    |> Enum.map(fn { start, finish } -> finish - start end)\n    |> Enum.sum()\n  end\n  def sum_of_intervals(list, result) do\n    [head | tail] = Enum.sort(list)\n    overlaps = List.flatten([result | tail]) |> Enum.filter(fn el -> is_overlap(head,el) end)\n    updated = Enum.reject(result, &(Enum.member?(overlaps, &1)))\n    interval = Enum.reduce([head | overlaps], &get_interval\/2)\n    sum_of_intervals(tail -- overlaps,[interval | updated])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76198,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals([], acc), do: acc\n  def sum_of_intervals([head | tail], acc \\\\ 0) do\n    sum_of_intervals(tail, acc + uniq_count([head], tail))\n  end\n  \n  defp uniq_count([],_), do: 0\n  defp uniq_count(s,[]) do\n    s\n    |> Enum.map(fn {a,b} -> b - a end)\n    |> Enum.sum()\n  end\n  defp uniq_count(s, [{c,d} | tail]) do\n    for {a,b} <- s, into: [] do\n      cond do\n        c <= a and d >= b -> nil\n        c < b and d >= b -> {a,c}\n        d > a and c <= a -> {d,b}\n        c > a and d < b -> [{a,c},{d,b}]\n        true -> {a,b}\n      end\n    end\n    |> List.flatten()\n    |> Enum.reject(&(&1 == nil))\n    |> uniq_count(tail)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76199,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals(a) do\n    [fst | rst] = Enum.sort(a)\n\n    Enum.reduce(\n      rst,\n      [fst],\n      fn {st, en}, [{fst_st, fst_en} | rst] ->\n        if st < fst_en,\n          do: [{fst_st, max(en, fst_en)} | rst],\n          else: [{st, en}, {fst_st, fst_en} | rst]\n      end\n    )\n    |> Enum.map(fn {st, en} -> en - st end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76200,"user_id":null,"body":"defmodule Kata do\n  def sum_of_intervals(a), do: iter(nil, Enum.sort(a), 0)\n  \n  defp iter(nil, [], s), do: s\n  defp iter({ia, ib}, [], s), do: s + ib - ia\n  defp iter(nil, [{ha, hb} | t], s), do: iter({ha, hb}, t, s)\n  defp iter({ia, ib}, [{ha, hb} | t], s) when ha < ib, do: iter({ia, max(ib, hb)}, t, s)\n  defp iter({ia, ib}, [{ha, hb} | t], s), do: iter({ha, hb}, t, s + ib - ia)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52c31f8e6605bcc646000082":[{"id":76201,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n    for {n1, i} <- Enum.with_index(numbers),\n        {n2, j} <- Enum.with_index(numbers),\n        i != j,\n        n1 + n2 == target do\n      {i, j}\n    end\n    |> Enum.at(0)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76202,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n    set = Map.new(numbers |> Enum.with_index)\n    first = numbers\n      |> Stream.with_index\n      |> Stream.filter(&(Map.has_key?(set, target - elem(&1, 0) ))) \n      |> Enum.take(1)\n      |> hd\n    \n    {elem(first, 1), set[target - elem(first, 0)]}\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76203,"user_id":null,"body":"defmodule Kata do\n    defp helper([{x,i}|ls],t) do\n        {_,j} = Enum.find(ls, {0,-1}, fn {y,_} -> t-x == y end)\n        if j < 0, do: helper(ls,t), else: {i,j}\n    end\n    \n    def two_sum(ls,t), do: ls |> Enum.with_index |> helper(t)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76204,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n    numbers\n    |> Enum.with_index()\n    |> Enum.reduce_while(MapSet.new(), fn {number, index}, cache ->\n      needed = target - number\n      needed_index = Enum.find_index(numbers, &(&1 == needed))\n\n      if MapSet.member?(cache, needed),\n        do: {:halt, {needed_index, index}},\n        else: {:cont, MapSet.put(cache, number)}\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76205,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n    hd(for {x, i} <- Enum.with_index(numbers), {y, j} <- Enum.with_index(numbers), i != j, x + y === target, do: {i, j})\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76206,"user_id":53,"body":"defmodule Kata do\n  def two_sum(xs, n) do\n    m = length(xs) - 1\n    ys = for i <- 0..m, j <- 0..m, do: {i, j}\n    Enum.find_value(ys, fn {i,j} -> if i != j && Enum.at(xs, i) + Enum.at(xs, j) == n, do: {i,j} end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76207,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n   i = Enum.find_index(numbers, fn x -> Enum.find_index(numbers, fn y -> x + y == target end) end)\n   new_numbers = Enum.drop(numbers, i + 1)\n   j = Enum.find_index(new_numbers, fn y -> Enum.at(numbers, i) + y == target end) + (i + 1)\n   \n   {i, j}\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76208,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n    numbers\n    |> Enum.with_index()\n    |> Enum.reduce_while(%{}, fn {number, index}, acc ->\n      if Map.has_key?(acc, number) do\n        {:halt, {acc[number], index}}\n      else\n        {:cont, Map.put(acc, target - number, index)}\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76209,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n     find_sum(numbers, target)\n  end\n  \n  defp find_sum([h | t], target, index \\\\ 0) do\n    found = Enum.find_index(t, & &1+h==target) \n    if found != nil, do: {index, found + index + 1}, else: find_sum(t, target, index + 1)\n  end\nend\n  ","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76210,"user_id":null,"body":"defmodule Kata do\n  @spec two_sum([integer()], integer()) :: {integer(), integer()}\n  def two_sum(numbers, target) do\n  \n    numbers\n    |> Enum.with_index\n    |>  sum(target)\n  \n  end\n  \n  def sum(numbers, target), do: sum(numbers, Enum.reverse(numbers), target)\n  def sum( [last], [], target) , do: nil\n  def sum([first, second | tail], [], target), do: sum([second] ++ tail, tail, target)\n  def sum([{x, i} | first_tail] = first_list, [{y, iy} | second_tail] = second_list, target) do\n    cond  do\n       x + y == target -> {i, iy}\n      true -> sum(first_list, second_tail, target) \n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52ceafd1f235ce81aa00073a":[{"id":76211,"user_id":null,"body":"defmodule Plural do\n  def plural(n), do: n != 1\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76212,"user_id":1566,"body":"defmodule Plural do\n  def plural(n) do\n    n != 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76213,"user_id":527,"body":"defmodule Plural do\n  def plural(n) when n == 1, do: false\n  def plural(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76214,"user_id":null,"body":"defmodule Plural do\n\n  def plural(n) when n == 1.0, do: false\n  def plural(_), do: true\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76215,"user_id":null,"body":"defmodule Plural do\n  def plural(n) do\n    unless n == 1, do: true, else: false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76216,"user_id":null,"body":"defmodule Plural do\n  def plural(n) do\n    if (trunc(n)>=2 || trunc(n) == 0) do \n      true \n    else \n      false \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76217,"user_id":null,"body":"defmodule Plural do\n  def plural(0), do: true\n  def plural(1.0), do: false \n  def plural(n) when is_float(n), do: true\n  def plural(n) when n > 1, do: true\n  def plural(_n), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76218,"user_id":null,"body":"defmodule Plural do\n  @spec plural(String.t) :: boolean\n  def plural(0), do: true\n  def plural(n) when n == 1, do: false\n  def plural(n) when is_number(n), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76219,"user_id":null,"body":"defmodule Plural do\n  def plural(n) do\n    if n == 1 do\n      false\n    else\n      true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76220,"user_id":null,"body":"defmodule Plural do\n  def plural(n) do\n    cond do\n      n == 0 -> true\n      0 < n && n < 1 -> true\n      n == 1 -> false\n      n > 1 -> true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52f3149496de55aded000410":[{"id":76221,"user_id":null,"body":"defmodule Kata do\n    def sum_digits(number) do\n        Kernel.abs(number)\n        |> Integer.digits\n        |> Enum.sum\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76222,"user_id":527,"body":"defmodule Kata do\n  def sum_digits(number) do\n    Enum.sum(Integer.digits(abs(number)))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76223,"user_id":470,"body":"defmodule Kata do\n\tdef sum_digits(n),do: n |> abs |> Integer.digits |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76224,"user_id":null,"body":"defmodule Kata do\n  def sum_digits(number) do\n    abs(number)\n      |> Integer.to_string\n      |> String.graphemes\n      |> Enum.map(&String.to_integer\/1)\n      |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76225,"user_id":null,"body":"defmodule Kata do\n    def sum_digits(number) do\n        number\n        |> Integer.to_charlist\n        |> remove_minus\n        |> Enum.map(fn x -> rem(String.to_integer(to_string x),48) end)\n        |> Enum.sum\n    end\n    \n    defp remove_minus(string) do\n      if List.starts_with?(string, '-') do Enum.drop(string, 1) else string end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76226,"user_id":null,"body":"defmodule Kata do\n    def sum_digits(n) do\n      str = \"#{negative_checker(n)}\"\n      \n      str\n      |> String.split(\"\", trim: true)\n      |> Enum.map(fn x -> String.to_integer(x) end)\n      |> Enum.sum()\n      \n    end\n    \n    def negative_checker(n) do\n      if n < 0 do\n        n * -1\n      else\n        n\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76227,"user_id":null,"body":"defmodule Kata do\n  def sum_digits(number) do\n    case number do\n      0 -> 0\n      x when x > 0 -> rem(number, 10) + sum_digits(div(number, 10))\n      x when x < 0 -> -rem(number, 10) + sum_digits(div(-number, 10))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76228,"user_id":null,"body":"defmodule Kata do\n    def sum_digits(number) do\n      sum(Integer.to_charlist(number))\n\n    end\n    def sum([]) do \n    0\n    end \n    def sum([h | t]) do \n    cond do \nh - 48 >= 0 -> h - 48 + sum(t)\nh - 48 < 0 -> 0 + sum(t)\nend\nend \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76229,"user_id":null,"body":"defmodule Kata do\n    def sum_digits(number) do\n        # your code here\n        Enum.reduce(Integer.digits(Kernel.abs(number)), 0, fn x, acc -> x + acc end)\n    end\n    \n#     defp abs(num) when num > 0, do: num \n#     defp abs(num) when num < 0, do: num * -1  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76230,"user_id":null,"body":"defmodule Kata do\n  def sum_digits(number), do: String.codepoints(to_string(number)) |> sum_digits2\n\n  def sum_digits2([ \"-\" | rest ]), do: sum_digits3(rest)\n  def sum_digits2(rest), do: sum_digits3(rest)\n\n  def sum_digits3(digits), do: Enum.reduce(digits, 0, &(String.to_integer(&1) + &2))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52fba66badcd10859f00097e":[{"id":76231,"user_id":null,"body":"defmodule Kata, do: def disemvowel(s), do: String.replace(s, ~r\/[aeiou]\/i, \"\")","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76232,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s), do: String.replace(s, ~r\/[aeiou]\/i, \"\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76233,"user_id":null,"body":"defmodule Kata do\n  def disemvowel(s) do\n    s\n    |> String.graphemes()\n    |> Enum.reject(fn x -> x in ~w(a e i o u A E I O U) end)\n    |> Enum.into(\"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76234,"user_id":null,"body":"defmodule Kata do\n  @moduledoc \"\"\"\n  Documentation for `ElixirTest`.\n  \"\"\"\n\n  def is_vowel?(c) do\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Enum.member?(vowels, String.downcase(c))\n  end\n\n  def is_not_vowel?(c) do\n    not is_vowel?(c)\n  end\n\n  def disemvowel(s) do\n      char_list = String.split(s, \"\")\n      to_string(Enum.filter(char_list, fn c -> is_not_vowel?(c) end))\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76235,"user_id":527,"body":"defmodule Kata do\n  def disemvowel(s) do\n    for <<c <- s>>, c not in 'AEIOUaeiou', into: \"\", do: <<c>>\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76236,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s) do\n        s\n        |> String.split([\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"])\n        |> Enum.reduce(&(&2<>&1))\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76237,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s) do\n      String.replace(s,  ~w(a e i o u A E I O U), \"\")\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76238,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s) do\n        # TODO: working solution\n       vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n       s |>\n       String.codepoints |>\n       Enum.filter(&(String.downcase(&1) not in vowels)) |>\n       Enum.join\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76239,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s) do\n      vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n      String.codepoints(s)\n      |> Enum.reduce([], fn x, acc ->\n        if Enum.any?(vowels, &(&1 == x)) == false do\n          acc = acc ++ [x]\n        else\n          acc = acc ++ [nil]\n        end\n      end)\n      |> Enum.filter(fn x -> x != nil end)\n      |> List.to_string()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76240,"user_id":null,"body":"defmodule Kata do\n    def disemvowel(s) do\n      String.replace(s, String.codepoints(\"aeuioAEUIO\"), \"\")\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5300901726d12b80e8000498":[{"id":76241,"user_id":null,"body":"defmodule FizzBuzz do\n  def val(n) when rem(n, 15) == 0, do: \"FizzBuzz\"\n  def val(n) when rem(n, 3) == 0, do: \"Fizz\"\n  def val(n) when rem(n, 5) == 0, do: \"Buzz\"\n  def val(n), do: n\n\n  def fizzbuzz(n) do\n    Enum.map(1..n, fn(x) -> val(x) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76242,"user_id":null,"body":"defmodule FizzBuzz do\n  def fizzbuzz(n) do\n    1..n \n    |> Enum.map(&(test &1))\n  end\n  \n  def fizz?(n) do rem(n, 3) == 0 end\n  def buzz?(n) do rem(n, 5) == 0  end\n  \n  def test(v) do\n    cond do\n      fizz?(v) and buzz?(v) -> \"FizzBuzz\"\n      fizz?(v) -> \"Fizz\"\n      buzz?(v) -> \"Buzz\"\n      true -> v\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76243,"user_id":null,"body":"defmodule FizzBuzz do\n  defguardp fizz(n) when rem(n, 3) == 0\n  defguardp buzz(n) when rem(n, 5) == 0\n\n  def fizzbuzz(n) do\n    Enum.map(1..n, fn\n      n when fizz(n) and buzz(n) -> \"FizzBuzz\"\n      n when fizz(n) -> \"Fizz\"\n      n when buzz(n) -> \"Buzz\"\n      n -> n\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76244,"user_id":null,"body":"defmodule FizzBuzz do\n  def fizzbuzz(n) do\n    1..n \n    |> Enum.map(fn\n      x when rem(x, 3) == 0 and rem(x, 5) == 0 -> \"FizzBuzz\"\n      x when rem(x, 3) == 0 -> \"Fizz\"\n      x when rem(x, 5) == 0 -> \"Buzz\"\n      x -> x\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76245,"user_id":277,"body":"defmodule FizzBuzz do\n  def fizzbuzz(n) do\n    Enum.slice([1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\", \"Fizz\", 22, 23, \"Fizz\", \"Buzz\", 26, \"Fizz\", 28, 29, \"FizzBuzz\", 31, 32, \"Fizz\", 34, \"Buzz\", \"Fizz\", 37, 38, \"Fizz\", \"Buzz\", 41, \"Fizz\", 43, 44, \"FizzBuzz\", 46, 47, \"Fizz\", 49, \"Buzz\", \"Fizz\", 52, 53, \"Fizz\", \"Buzz\", 56, \"Fizz\", 58, 59, \"FizzBuzz\", 61, 62, \"Fizz\", 64, \"Buzz\", \"Fizz\", 67, 68, \"Fizz\", \"Buzz\", 71, \"Fizz\", 73, 74, \"FizzBuzz\", 76, 77, \"Fizz\", 79, \"Buzz\", \"Fizz\", 82, 83, \"Fizz\", \"Buzz\", 86, \"Fizz\", 88, 89, \"FizzBuzz\", 91, 92, \"Fizz\", 94, \"Buzz\", \"Fizz\", 97, 98, \"Fizz\", \"Buzz\"],0,n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76246,"user_id":null,"body":"defmodule FizzBuzz do\n  @spec fizzbuzz(integer) :: [integer | String.t]\n  def fizzbuzz(n) do\n    Enum.map(1..n, fn \n      x when rem(x, 5) == 0 and rem(x, 3) == 0 -> \"FizzBuzz\"\n      x when rem(x, 5) == 0 -> \"Buzz\"\n      x when rem(x, 3) == 0 -> \"Fizz\"\n      x -> x\n    end)\n  end\nend\n\n\n\n\n\n\n\n\n\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76247,"user_id":null,"body":"defmodule FizzBuzz do\n  def _fizzbuzz(n) when rem(n, 15) == 0, do: \"FizzBuzz\"\n  def _fizzbuzz(n) when rem(n, 5) == 0, do: \"Buzz\"\n  def _fizzbuzz(n) when rem(n, 3) == 0, do: \"Fizz\"\n  def _fizzbuzz(n), do: n\n  def fizzbuzz(n) do\n    for x <- 1..n, do: _fizzbuzz(x)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76248,"user_id":null,"body":"defmodule FizzBuzz do\n  def fbv(n) do\n    cond do\n      rem(n, 3) == 0 and rem(n, 5) == 0 -> \"FizzBuzz\"\n      rem(n, 3) == 0 -> \"Fizz\"\n      rem(n, 5) == 0 -> \"Buzz\"\n      true -> n\n    end\n  end\n\n  def fizzbuzz(n) do\n    1..n\n    |> Enum.to_list()\n    |> Enum.map(&fbv(&1))\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76249,"user_id":null,"body":"\n\ndefmodule FizzBuzz do\n  def fbv(n) do\n    cond do\n      rem(n, 3) == 0 and rem(n, 5) == 0 -> \"FizzBuzz\"\n      rem(n, 3) == 0 -> \"Fizz\"\n      rem(n, 5) == 0 -> \"Buzz\"\n      true -> n\n    end\n  end\n\n  def fizzbuzz(n) when is_integer(n), do: fizzbuzz(Enum.to_list(1..n))\n  def fizzbuzz([head | []]), do: [fbv(head)]\n  def fizzbuzz([head | tail]), do: [fbv(head)] ++ fizzbuzz(tail)\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76250,"user_id":null,"body":"defmodule FizzBuzz do\n  def  fizzbuzz(n), do: fizzbuzz(n, [])\n  defp fizzbuzz(n, list) when rem(length(list)+1, 15) == 0, do: fizzbuzz(n, list ++ [\"FizzBuzz\"])\n  defp fizzbuzz(n, list) when rem(length(list)+1, 3) == 0, do: fizzbuzz(n, list ++ [\"Fizz\"])\n  defp fizzbuzz(n, list) when rem(length(list)+1, 5) == 0, do: fizzbuzz(n, list ++ [\"Buzz\"])\n  defp fizzbuzz(n, list) when n == length(list), do: list\n  defp fizzbuzz(n, list), do: fizzbuzz(n, list ++ [length(list)+1])\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5302d846be2a9189af0001e4":[{"id":76251,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    \"Hello, #{Enum.join(name, \" \")}! Welcome to #{city}, #{state}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76252,"user_id":1724,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    \"Hello, #{full_name(name)}! Welcome to #{city}, #{state}!\"\n  end\n  \n  defp full_name(name), do: name |> Enum.join(\" \")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76253,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    \"Hello, #{name |> Enum.join \" \"}! Welcome to #{city}, #{state}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76254,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n  \twith full_name = Enum.intersperse(name, \" \") |> List.to_string,\n    \t\t welcome   = \"Hello, #{full_name}! Welcome to #{city}, #{state}!\",\n         do: welcome\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76255,"user_id":null,"body":"defmodule Hellouer do\n  \n  def say_hello(name, city, state) do\n    complete_name = Enum.intersperse(name, \" \") |> List.to_string  \n    \"Hello, #{complete_name}! Welcome to #{city}, #{state}!\"   \n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76256,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    \"Hello, #{full_name(name)}! Welcome to #{city}, #{state}!\"\n  end\n  \n  defp full_name(name) do\n    Enum.join(name, \" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76257,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    name_list = Enum.to_list(name) |> Enum.join(\" \")\n    \"Hello, #{name_list}! Welcome to #{city}, #{state}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76258,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state), do: response(name, city, state, \"\")\n  defp response([], city, state, acc), do: \"Hello,\" <> \"#{acc}\" <> \"! Welcome to \" <> \"#{city}\" <> \", \" <> \"#{state}\" <>\"!\"\n    defp response([head | tail], city, state, acc) do\n    acc = \"#{acc}\" <> \" \" <> \"#{head}\"\n    response(tail, city, state, acc)\n    end\n  end\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76259,"user_id":null,"body":"defmodule Hellouer do\n  @spec say_hello(nonempty_list(String.t), String.t, String.t) :: String.t\n  def say_hello(name, city, state) do\n    ~s(Hello, #{Enum.join(name, \" \")}! Welcome to #{city}, #{state}!)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76260,"user_id":null,"body":"defmodule Hellouer do\n  def say_hello(name, city, state) do\n    full_name = Enum.join(name,\" \")\n    res = \"Hello, #{full_name}! Welcome to #{city}, #{state}!\"\n    res\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"530e15517bc88ac656000716":[{"id":76261,"user_id":null,"body":"defmodule Encryptor do\n  \n  def rot13([]), do: \"\"\n  def rot13([letter | next]) when letter in 65..77 or letter in 97..109, do: <<letter + 13>> <> rot13(next)\n  def rot13([letter | next]) when letter in 78..90 or letter in 110..122, do: <<letter - 13>> <> rot13(next)\n  def rot13([letter | next]), do: <<letter>> <> rot13(next)\n  \n  def rot13(string), do: rot13(String.to_char_list(string))\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76262,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    string\n    |> String.to_charlist()\n    |> Enum.map(fn\n      c when c in ?a..?z -> ?a + rem(c + 13 - ?a, 26)\n      c when c in ?A..?Z -> ?A + rem(c + 13 - ?A, 26)\n      c -> c\n    end)\n    |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76263,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    string\n    |> to_charlist()\n    |> Enum.map(&shift\/1)\n    |> to_string()\n  end\n  \n  defp shift(letter) when letter in ?a..?m or letter in ?A..?M, do: letter + 13\n  defp shift(letter) when letter in ?n..?z or letter in ?N..?Z, do: letter - 13\n  defp shift(letter), do: letter\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76264,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    String.to_char_list(string)\n    |> Enum.map(fn(s) -> add(s) end)\n    |> List.to_string\n  end\n  \n  def add(i) when ?a <= i and i <= ?z, do: parse(i + 13)\n  def add(i) when ?A <= i and i <= ?Z, do: parse(i + 13)\n  def add(i), do: i\n  \n  def parse(i) when i > 122, do: i - 26\n  def parse(i) when i > 90 and i <= 103, do: i - 26\n  def parse(i), do: i\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76265,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    to_charlist(string)\n    |> _char_lookup()\n    |> to_string()\n  end\n\n  defp _char_lookup([], value \\\\ ''), do: value\n\n  defp _char_lookup([head | tail], value)\n       when head in ?a..?m or\n              head in ?A..?M do\n    _char_lookup(tail, value ++ [head + 13])\n  end\n\n  defp _char_lookup([head | tail], value)\n       when head in ?n..?z or\n              head in ?N..?Z do\n    _char_lookup(tail, value ++ [head - 13])\n  end\n\n  defp _char_lookup([head | tail], value) do\n    _char_lookup(tail, value ++ [head])\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76266,"user_id":null,"body":"# write code below\n\ndefmodule Encryptor do\n  def rot13(string) do\n    char = String.codepoints(string)\n    convert(char, \"\")\n  end\n\n  def convert([head | tail], fs) do\n    <<num>> = head\n    new_fs = fs <> List.to_string([shift_key(num)])\n    convert(tail, new_fs)\n  end\n\n  def convert([], fs), do: fs\n\n  def shift_key(char) when char in ?a..?z do\n    rem(char - ?a + 13, 26) + ?a\n  end\n\n  def shift_key(char) when char in ?A..?Z do\n    rem(char - ?A + 13, 26) + ?A\n  end\n\n  def shift_key(char), do: char\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76267,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    string\n    |> String.split(\"\")\n    |> Enum.filter(fn x -> x != \"\" end)\n    |> Enum.map(&encrypt_character\/1)\n    |> List.to_string()\n  end\n\n  def encrypt_character(char) do\n    if(Regex.match?(~r\/[A-Za-z]\/, char)) do\n      <<v::utf8>> = char\n\n      if v <= 90 do\n        if v + 13 > 90 do\n          64 + v + 13 - 90\n        else\n          v + 13\n        end\n      else\n        if v + 13 > 122 do\n          96 + v + 13 - 122\n        else\n          v + 13\n        end\n      end\n    else\n      char\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76268,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    string \n    |> to_charlist\n    |> Enum.map(fn x -> f(x) end)\n    |> to_string\n  end\n  \n  defp f(char) when char in 110..122, do: char - 13\n  defp f(char) when char in 78..90 , do: char - 13\n  defp f(char) when char in 65..77 , do: char + 13\n  defp f(char) when char in 97..109 , do: char + 13\n  defp f(char), do: char\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76269,"user_id":null,"body":"defmodule Encryptor do\n  uppercase = 65..90\n  lowercase = 97..122\n  original_set = Enum.concat(uppercase, lowercase)\n\n  encoded_upper = Enum.concat(78..90, 65..77)\n  encoded_lower = Enum.concat(110..122, 97..109)\n  encoded_set = Enum.concat(encoded_upper, encoded_lower)\n\n  @letter_list Enum.zip(original_set, encoded_set)\n\n  def rot13(string) do\n     string\n    |> :binary.bin_to_list()\n    |> Enum.map(&replace_letter\/1)\n    |> List.to_string()\n  end\n\n  def replace_letter(char) do\n    results = Enum.find(@letter_list, fn({a,_}) -> a == char end)\n\t\tif(results != nil) do\n\t\t\t{_, encoded} = results\n\t\t\tencoded\n\t\telse\n\t\t\tchar\n\t\tend\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76270,"user_id":null,"body":"defmodule Encryptor do\n  def rot13(string) do\n    f = fn(c) when (?A <= c and c <= ?M) or (?a <= c and c <= ?m) -> c + 13\n          (c) when (?N <= c and c <= ?Z) or (?n <= c and c <= ?z) -> c - 13\n          (c) -> c\n        end\n    String.to_charlist(string) |> Enum.map(f) |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53368a47e38700bd8300030d":[{"id":76271,"user_id":null,"body":"defmodule People do\n  def namelist([]), do: \"\"\n  def namelist([%{name: name}]), do: name\n  def namelist([%{name: name1}, %{name: name2}]), do: \"#{name1} & #{name2}\"\n  def namelist([%{name: name} | rest]), do: \"#{name}, \" <> list(rest)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76272,"user_id":null,"body":"defmodule People do\n\n  def namelist([]) do\n    \"\"\n  end\n\n  def namelist([ head|tail ]) do\n    case length(tail) do\n      1 -> head[:name] <> \" & \" <> list(tail)\n      0 -> head[:name]\n      _ -> head[:name] <> \", \" <> list(tail)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76273,"user_id":null,"body":"defmodule People do\n  def namelist([]), do: \"\"\n  def namelist([ person ]), do: person.name\n  def namelist([ person | [last] ]), do: \"#{person.name} & #{last.name}\"\n  def namelist([ person | rest ]), do: \"#{person.name}, #{list(rest)}\"\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76274,"user_id":null,"body":"defmodule People do  \n  def namelist([%{name: name}]), do: name\n  def namelist([%{name: name1}, %{name: name2}]), do: name1 <> \" & \" <> name2\n  def namelist([h|t]), do: h.name <> \", \" <> list(t)\n  def namelist([]), do: \"\"\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76275,"user_id":null,"body":"defmodule People do\n  def namelist(people) do\n    Enum.with_index(people, 1)\n    |> Enum.map(fn {%{name: name}, index} -> \n      cond do\n        index < length(people) - 1 -> name <> \",\"\n        index < length(people)     -> name <> \" &\"\n        true                       -> name\n      end\n    end)\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76276,"user_id":null,"body":"defmodule People do\n  def namelist(people) when length(people) >= 3 do\n    { names, lastTwoNames } = people\n      |> Enum.map(fn(%{name: name}) -> name end)\n      |> Enum.split(-2)\n    Enum.join(names, \", \") <> \", \" <> Enum.join(lastTwoNames, \" & \")\n  end\n\n  def namelist([ %{ name: name1 }, %{ name: name2 } ]) do\n    \"#{name1} & #{name2}\"\n  end\n\n  def namelist([%{ name: name }]), do: \"#{name}\"\n\n  def namelist([]), do: \"\"\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76277,"user_id":null,"body":"defmodule People do\n  def namelist([]) do\n    \"\"\n  end\n  def namelist([h]) do\n    h.name\n  end\n  def namelist([h,l]) do\n    h.name <> \" & \" <> list(l)\n  end\n  def namelist([h,m|t]) do\n    h.name <> \", \" <> list([m|t])\n  end\n  def namelist(h) do\n    h.name\n  end\n    \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76278,"user_id":null,"body":"defmodule People do\n  def namelist(people) do\n    people\n    |> Enum.map(&(&1[:name]))\n    |> Enum.join(\", \")\n    |> String.replace(~r\/,([^,]+)$\/, \" &\\\\1\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76279,"user_id":null,"body":"defmodule People do\n  def namelist(people) do\n    people\n    |> Enum.map_join(\", \", & &1.name)\n    |> String.replace(~r\/, (?=[^,]+$)\/, \" & \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76280,"user_id":1537,"body":"defmodule People do\n  def namelist([]), do: \"\"\n  def namelist([%{name: n1}]), do: n1\n  def namelist([%{name: n1}, %{name: n2}]), do: n1 <> \" & \" <> n2\n  def namelist([%{name: n1} | rest]), do: n1 <> \", \" <> list(rest)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53369039d7ab3ac506000467":[{"id":76281,"user_id":527,"body":"defmodule YesOrNo do\n  def bool_to_word(true), do: \"Yes\"\n  def bool_to_word(false), do: \"No\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76282,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(b) do\n   if b, do: \"Yes\", else: \"No\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76283,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(true), do: \"Yes\"\n  def bool_to_word(false), do: \"No\"\n  def bool_to_word(_), do: :error\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76284,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word true do \"Yes\" end\n  def bool_to_word false do \"No\" end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76285,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(b) when b == true, do: \"Yes\"\n  def bool_to_word(_), do: \"No\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76286,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(b) when b, do: \"Yes\"\n  def bool_to_word(b) when not b, do: \"No\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76287,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(false) do\n    \"No\"\n  end\n  \n  def bool_to_word(true) do\n    \"Yes\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76288,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(true) do\n   \"Yes\"\n  end\n  def bool_to_word(_) do\n   \"No\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76289,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(b) do\n    b && \"Yes\" || \"No\"   \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76290,"user_id":null,"body":"defmodule YesOrNo do\n  def bool_to_word(b) do\n    cond do\n    b -> \"Yes\"\n   !b -> \"No\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5365bb5d5d0266cd010009be":[{"id":76291,"user_id":527,"body":"defmodule Currency do\n  @coins [H: 50, Q: 25, D: 10, N: 5, P: 1]\n\n  def make_change(amount) do\n    @coins\n      |> Stream.transform(amount, fn({name, value}, amount) ->\n        {[{name, div(amount, value)}], rem(amount, value)}\n      end)\n      |> Stream.filter(fn {_, v} -> v != 0 end)\n      |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76292,"user_id":null,"body":"defmodule Currency do\n  def make_change(0), do: %{}\n  def make_change(amount) when amount >= 50, do: merge(%{H: 1}, make_change(amount - 50))\n  def make_change(amount) when amount >= 25, do: merge(%{Q: 1}, make_change(amount - 25))\n  def make_change(amount) when amount >= 10, do: merge(%{D: 1}, make_change(amount - 10))\n  def make_change(amount) when amount >= 5, do: merge(%{N: 1}, make_change(amount - 5))\n  def make_change(amount) when amount >= 1, do: merge(%{P: 1}, make_change(amount - 1))\n  defp merge(map1, map2) do\n    Map.merge(map1, map2, fn(_,v1,v2) -> v1 + v2 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76293,"user_id":null,"body":"defmodule Currency do\n\t@change [H: 50, Q: 25, D: 10, N: 5, P: 1]\n  \n  def make_change(amount) do\n  \t@change\n    \t|> Stream.transform(amount, fn { k, v }, amount -> { [{k, div(amount, v)}], rem(amount, v) } end)\n      |> Stream.filter(fn {_, v} -> v > 0 end)\n      |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76294,"user_id":null,"body":"defmodule Currency do\n  @coin_values [H: 50, Q: 25, D: 10, N: 5, P: 1]\n\n  def make_change(amount) do\n    @coin_values\n    |> Stream.transform(amount, fn({coin, val}, amt) -> {[{coin, div(amt, val)}], rem(amt, val)} end)\n    |> Stream.filter(fn {_k, v} -> v > 0 end)\n    |> Map.new()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76295,"user_id":null,"body":"defmodule Currency do\n\n  def make_change(amount) do\n    coins = [H: 50, Q: 25, D: 10, N: 5, P: 1]\n    calc(coins, amount, [])\n  end\n  \n  defp calc([{submol, value} | tail], amount, result) when amount > 0 do\n    case div(amount, value) do\n      0 -> calc(tail, amount, result)\n      n -> calc(tail, amount - (n * value), [{submol, n} | result])\n    end\n  end\n  \n  defp calc(_coins, _amount, result) do \n\tresult \n\t\t|> Enum.reverse \n\t\t|> Enum.into(%{})\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76296,"user_id":1249,"body":"defmodule Currency do\n  def make_change(amount) do\n    change = [H: 50, Q: 25, D: 10, N: 5, P: 1]\n    Enum.reduce(change, {%{}, amount}, fn({k, v}, {res, amt}) ->\n      {d, m} = {div(amt, v), rem(amt, v)}\n      if d == 0, do: {res, m}, else: {Map.merge(res, %{k => d}), m}\n    end) |> elem(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76297,"user_id":null,"body":"defmodule Currency do\n  def make_change(amnt), do: coins(%{}, amnt)\n  defp coins(map, amnt) when amnt == 0, do: map\n  defp coins(map, amnt) when amnt >= 50, do: coins(Map.put(map, :H, div(amnt, 50)), rem(amnt, 50))\n  defp coins(map, amnt) when amnt >= 25, do: coins(Map.put(map, :Q, div(amnt, 25)), rem(amnt, 25))  \n  defp coins(map, amnt) when amnt >= 10, do: coins(Map.put(map, :D, div(amnt, 10)), rem(amnt, 10))\n  defp coins(map, amnt) when amnt >= 5, do: coins(Map.put(map, :N, div(amnt, 5)), rem(amnt, 5))\n  defp coins(map, amnt) when amnt >=1, do: coins(Map.put(map, :P, amnt), 0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76298,"user_id":null,"body":"defmodule Currency do\n  def make_change(amount) do\n    # :H => 50, :Q => 25, :D => 10, :N => 5, :P => 1\n    change = %{}\n    total = amount\n    if div(total, 50) > 0 do\n      change = Map.put(change, :H, div(total, 50))\n      total = rem(total, 50)\n    end\n    if div(total, 25) > 0 do\n      change = Map.put(change, :Q, div(total, 25))\n      total = rem(total, 25)\n    end\n    if div(total, 10) > 0 do\n      change = Map.put(change,:D, div(total, 10))\n      total = rem(total, 10)\n    end\n    if div(total, 5) > 0 do\n      change = Map.put(change, :N, div(total, 5))\n      total = rem(total, 5)\n    end\n    if div(total, 1) > 0 do\n      change = Map.put(change, :P, div(total, 1))\n      total = rem(total, 1)\n    end\n    change\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76299,"user_id":null,"body":"defmodule Currency do\n  def make_change(amount) do\n    make_change(amount, %{})\n  end\n  defp make_change(0, acc), do: acc\n  for {key, amount} <- [H: 50, Q: 25, D: 10, N: 5, P: 1] do\n    defp make_change(n, acc) when n >= unquote(amount) do\n      num = div(n, unquote(amount))\n      make_change(n - unquote(amount)*num, Map.put(acc, unquote(key), num))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76300,"user_id":null,"body":"defmodule Currency do\n  def make_change(amount) do\n    chg(amount, %{})\n  end\n  \n  defp chg(0, m), do: m\n  defp chg(a, m) when a >= 50, do: t(a, m, :H, 50)\n  defp chg(a, m) when a >= 25, do: t(a, m, :Q, 25)\n  defp chg(a, m) when a >= 10, do: t(a, m, :D, 10)\n  defp chg(a, m) when a >= 5, do: t(a, m, :N, 5)\n  defp chg(a, m) when a >= 1, do: t(a, m, :P, 1)\n  \n  defp t(a, m, t, v), do: chg(a - v, Map.put(m, t, Map.get(m, t, 0) + 1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"536a155256eb459b8700077e":[{"id":76301,"user_id":null,"body":"defmodule Clockwise_spiral do\n  @moduledoc \"\"\"\n  Given the dimension, return a square matrix of numbers in clockwise spiral order.\n  \"\"\"\n  \n  @spec create_spiral(dimension :: integer) :: list(list(integer))\n  def create_spiral(n) when n <= 0, do: []\n  def create_spiral(n), do: create_spiral([[n * n,]], n * n - 1)\n  \n  defp create_spiral(spiral, 0), do: spiral\n\n  defp create_spiral(spiral, n) do\n    spiral\n    |> rotate_cw()\n    |> add_row(n)\n    |> create_spiral(n-length(spiral))\n  end\n  \n  \"\"\"\n  [\n  [9, 8]\n  ] ->\n  [\n  [6, 7],\n  [9, 8]\n  ]\n  \"\"\"\n  defp add_row([row | _] = spiral, n) do\n    [n..0\n      |> Stream.take(length(row))\n      |> Enum.reverse()\n      | spiral]\n  end\n  \n  \"\"\"\n  [\n  [6, 7],\n  [9, 8]\n  ] ->\n  [\n  [9, 6],\n  [8, 7]\n  ]\n  \"\"\"\n  defp rotate_cw(spiral) do\n    spiral\n    |> Enum.zip()\n    |> Enum.map(&(Tuple.to_list(&1) |> Enum.reverse()))\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76302,"user_id":null,"body":"defmodule Clockwise_spiral do\n    defp walk(1,1,x), do: [[x]]\n    defp walk(n,0,x), do: walk(n,n,x)\n    defp walk(n,m,x), do:\n        [Enum.to_list(x..x+n-1) | walk(m-1,n,x+n)\n                                |> Enum.reverse\n                                |> Enum.zip\n                                |> Enum.map(&Tuple.to_list\/1)]\n\n    def create_spiral(n) when is_integer(n) and n > 0, do: walk(n,0,1)\n    def create_spiral(_n), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76303,"user_id":null,"body":"defmodule Clockwise_spiral do\n\n  def step_spiral({dx, dy}, [{{x, y}, i}| tail]) do\n    [{{x+dx, y+dy}, i+1}, {{x, y}, i}| tail]\n  end\n\n  def update_spiral({{x, y}, i}, xs) do\n    List.replace_at(xs, y, List.replace_at(Enum.at(xs, y), x, i))\n  end\n\n  def create_spiral(n) when n < 1, do: []\n  def create_spiral(1), do: [[1]]\n  def create_spiral(n) do\n    [n-1| Enum.reverse(Enum.flat_map(1..n-1, fn x -> [x, x] end))]\n    |> Enum.zip(Stream.cycle([{1,0}, {0,1}, {-1,0}, {0,-1}]))\n    |> Enum.map(fn {n, {dx, dy}} -> for _ <- 1..n, do: {dx, dy} end)\n    |> List.flatten\n    |> Enum.reduce([{{0, 0}, 1}], &step_spiral\/2)\n    |> Enum.reduce(for _ <- 1..n do for _ <- 1..n, do: 0 end, &update_spiral\/2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76304,"user_id":null,"body":"defmodule ClockwiseSpiral do\n\n  def create_spiral(n) when n < 1, do: []\n  def create_spiral(n) when is_integer(n), do: spiralize(n)\n  def create_spiral(_), do: []\n\n  def spiralize(n), do: build_matrix(n, n, 1)\n\n  defp build_matrix(_, 0, _), do: [[]]\n\n  defp build_matrix(rows, cols, min) do\n    tr = Enum.to_list(min..(min + cols - 1))\n    [tr | build_matrix(cols, rows - 1, min + cols) |> rotate_right()]\n  end\n\n  defp rotate_right(rows) do\n    rows \n    |> Enum.reverse() \n    |> Enum.zip() \n    |> Enum.map(&Tuple.to_list\/1)\n  end\nend\n\n#poorly named ^_^\ndefmodule Clockwise_spiral do\n  defdelegate create_spiral(n), to: ClockwiseSpiral\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76305,"user_id":null,"body":"defmodule Clockwise_spiral do\n  def create_spiral(n) when not is_integer(n) or n < 1, do: []\n\n  def create_spiral(n) do\n    res = :ets.new(:spiral, [])\n    :ets.insert(res, {:counter, 0})\n    next_val = fn -> :ets.update_counter(res, :counter, {2, 1}) end\n\n    Enum.each(0..div(n - 1, 2), fn i ->\n      j = n - 1 - i\n      Enum.each(i..j, fn k -> :ets.insert(res, {{i, k}, next_val.()}) end)\n\n      if i + 1 <= j,\n        do: Enum.each((i + 1)..j, fn k -> :ets.insert(res, {{k, j}, next_val.()}) end)\n\n      if j - 1 >= i,\n        do: Enum.each((j - 1)..i, fn k -> :ets.insert(res, {{j, k}, next_val.()}) end)\n\n      if j - 1 >= i + 1,\n        do: Enum.each((j - 1)..(i + 1), fn k -> :ets.insert(res, {{k, i}, next_val.()}) end)\n    end)\n\n    Enum.map(0..(n - 1), fn i ->\n      Enum.map(0..(n - 1), fn j ->\n        [{_, v}] = :ets.lookup(res, {i, j})\n        v\n      end)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76306,"user_id":null,"body":"defmodule Clockwise_spiral do\n  def create_spiral(n) when not is_integer(n) or n < 1, do: []\n\n  def create_spiral(n) do\n    res = :ets.new(:spiral, [])\n    :ets.insert(res, {:counter, 0})\n\n    Enum.each(0..div(n - 1, 2), fn i ->\n      j = n - 1 - i\n\n      Enum.each(i..j, fn k ->\n        :ets.insert(res, {{i, k}, :ets.update_counter(res, :counter, {2, 1})})\n      end)\n\n      if i + 1 <= j do\n        Enum.each((i + 1)..j, fn k ->\n          :ets.insert(res, {{k, j}, :ets.update_counter(res, :counter, {2, 1})})\n        end)\n      end\n\n      if j - 1 >= i do\n        Enum.each((j - 1)..i, fn k ->\n          :ets.insert(res, {{j, k}, :ets.update_counter(res, :counter, {2, 1})})\n        end)\n      end\n\n      if j - 1 >= i + 1 do\n        Enum.each((j - 1)..(i + 1), fn k ->\n          :ets.insert(res, {{k, i}, :ets.update_counter(res, :counter, {2, 1})})\n        end)\n      end\n    end)\n\n    Enum.map(0..(n - 1), fn i ->\n      Enum.map(0..(n - 1), fn j ->\n        [{_, v}] = :ets.lookup(res, {i, j})\n        v\n      end)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76307,"user_id":null,"body":"defmodule Clockwise_spiral do\n  def create_spiral(n) when n < 1, do: []\n  def create_spiral(n) do\n    map_of_maps = create_row(n, 1)\n    fill_map_spiral(1, 1, n, map_of_maps, 1, n, :xup)\n    |> create_lists(1, n)\n    \n    \n\n  end\n  \n  def create_lists(maps, y, n) when y == n, do: [create_list(maps, 1, y, n)]\n  def create_lists(maps, y , n) do\n    [create_list(maps, 1, y, n) | create_lists(maps, y + 1, n)]\n  end\n  \n  def create_list(maps, x, y, n) when x == n, do: [get_in(maps, [y, x])]\n  def create_list(maps, x, y, n) do \n    [get_in(maps, [y, x]) | create_list(maps, x + 1, y, n)]\n  end\n  \n  def create_row(n, n), do: %{n => 1..n |> Enum.reduce(%{}, fn x, acc -> Map.put_new(acc, x, nil) end)}\n  def create_row(n, row) do\n    Map.put_new(create_row(n, row + 1), row , 1..n |> Enum.reduce(%{}, fn x, acc -> Map.put_new(acc, x, nil) end))\n  end\n  \n  \n  def fill_map_spiral(_, _, _, maps, count, n, _) when count == n * n + 1, do: maps\n  \n  def fill_map_spiral(x, y, depth, maps, count, n, :xup) when x == depth do\n    fill_map_spiral(x, y + 1, depth, put_in(maps, [y, x], count), count + 1, n, :yup)\n  end\n  def fill_map_spiral(x, y, depth, maps, count, n, :xup) do\n    fill_map_spiral(x + 1, y, depth, put_in(maps, [y, x], count), count + 1, n, :xup)\n  end\n\n  def fill_map_spiral(x, y, depth, maps, count, n, :yup) when y == depth do\n    fill_map_spiral(x - 1, y, depth - 1, put_in(maps, [y, x], count), count + 1, n, :xdown)\n  end\n  def fill_map_spiral(x, y, depth, maps, count, n, :yup) do\n    fill_map_spiral(x, y + 1, depth, put_in(maps, [y, x], count), count + 1, n, :yup)\n  end\n    \n   \n  def fill_map_spiral(x, y, depth, maps, count, n, :xdown) when x == (n - depth) do\n    fill_map_spiral(x, y - 1, depth, put_in(maps, [y, x], count), count + 1, n, :ydown)\n  end\n  def fill_map_spiral(x, y, depth, maps, count, n, :xdown) do\n    fill_map_spiral(x - 1, y, depth, put_in(maps, [y, x], count), count + 1, n, :xdown)\n  end\n      \n  \n  def fill_map_spiral(x, y, depth, maps, count, n, :ydown) when (n - depth + 1) == y do\n    fill_map_spiral(x + 1, y, depth, put_in(maps, [y, x], count), count + 1, n, :xup)\n  end\n  def fill_map_spiral(x, y, depth, maps, count, n, :ydown) do\n    fill_map_spiral(x, y - 1, depth, put_in(maps, [y, x], count), count + 1, n, :ydown)\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76308,"user_id":250,"body":"defmodule Clockwise_spiral do\n  def spiral(arr, _n, i, _x, _y, _dx, _dy) when i <= 0 do\n    arr\n  end\n  \n  def spiral(arr, n, i, x, y, dx, dy) do\n    v = n * n - i + 1\n    newArr = update_in(arr, [Access.at(y), Access.at(x)], &(&1 + v))\n \n    switch = ((x + dx == n || x + dx == -1) && dx != 0)\n      || ((y + dy == n || y + dy == -1) && dy != 0)\n      || (Enum.at(newArr, y + dy) |> Enum.at(x + dx)) != 0 \n      \n    new_dx = if switch do\n        cond do\n          dx != 0 -> 0\n          dy != 0 -> -dy\n        end\n      else\n        dx\n      end\n    \n    new_dy = if switch do\n        cond do\n          dx != 0 -> dx\n          dy != 0 -> 0\n        end\n      else\n        dy\n      end\n      \n    new_x = x + new_dx\n    new_y = y + new_dy\n    \n    spiral(newArr, n, i-1, new_x, new_y, new_dx, new_dy)\n  end\n  \n  def create_spiral(n) when n < 1 do\n    []\n  end\n\n  def create_spiral(n) do\n    m = for _ <- 0..n-1, do: for _ <- 0..n-1, do: 0\n  \n    spiral(m, n, n * n, 0, 0, 1, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76309,"user_id":null,"body":"defmodule Clockwise_spiral do\n  def create_spiral(n) when not is_integer(n), do: []\n  def create_spiral(n) when n < 1, do: []\n  def create_spiral(n) do\n    {n, []}\n    |> create_spiral_grid\n    |> fill_in_values\n    |> clean_up\n  end\n \n  defp create_spiral_grid({n, _}) do\n    steps = Enum.flat_map(n..1, &[&1,&1]) |> tl\n    delta = Stream.cycle([{0,1}, {1,0}, {0,-1}, {-1,0}])\n    grid =\n      Enum.zip(steps, delta)\n      |> walk_grid(0, -1, [])   \n\n    {n, grid}\n  end\n  \n  defp fill_in_values({n, grid}) do\n    grid\n    |> Enum.with_index(1) \n    |> Enum.sort \n    |> Enum.chunk_every(n)\n   end\n \n  defp clean_up(spiral) do\n    Enum.map(spiral, fn row -> (for {_,val} <- row, do: val) end)\n  end\n   \n  defp walk_grid([], _ , _, path), do: Enum.reverse(path)\n  defp walk_grid([{steps, {dx,dy}} | rest], x, y, path) do\n    new_path = Enum.reduce(1..steps, path, fn i,acc -> [{x+i*dx, y+i*dy} | acc] end)\n    walk_grid(rest, x+steps*dx, y+steps*dy, new_path)\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76310,"user_id":null,"body":"defmodule Clockwise_spiral do\n  def create_spiral(n) when is_integer(n) and n > 0 do\n    for y <- 1..n do\n      for x <- 1..n do\n        get_number(x, y, n)\n      end\n    end\n  end\n  def create_spiral(_n), do: []\n  \n  defp get_number(x, y, n) do\n    layer = get_current_layer(x, y, n)\n    \n    outer_sum = get_outer_layer_sum(x, y, n, layer)\n    inner_sum = get_inner_sum(x, y, n, layer)\n    \n    inner_sum + outer_sum\n  end\n  \n  defp get_current_layer(x, y, n) do\n    Enum.min([x - 1, y - 1, n - x, n - y])\n  end\n  \n  defp get_outer_layer_sum(x, y, n, layer) do\n    Enum.to_list(0..layer)\n    |> Enum.map(fn e -> if e != 0, do: (n-1-(e-1)*2)*4, else: 0 end)\n    |> Enum.sum()\n  end\n\n  defp get_inner_sum(x, y, n, layer) do\n    max = n - (2 * layer)\n    ix = x - layer\n    iy = y - layer\n    case {ix, iy} do\n      {   1,    1} -> 1\n      {^max,    1} -> max\n      {^max, ^max} -> max + max - 1\n      {   1, ^max} -> max * 3 - 2\n      {  ix,    1} -> ix\n      {^max,   iy} -> max + iy - 1\n      {  ix, ^max} -> 3 * max - 1 - ix\n      {   1,   iy} -> 4 * max - 2 - iy\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"536e9a7973130a06eb000e9f":[{"id":76311,"user_id":null,"body":"defmodule Kata do\n    defp beats?(:fire, :grass), do: 2\n    defp beats?(:fire, :water), do: 0.5\n    defp beats?(:fire, :electric), do: 1\n    defp beats?(:grass, :fire), do: 0.5\n    defp beats?(:water, :fire), do: 2\n    defp beats?(:electric, :fire), do: 1\n    defp beats?(:water, :grass), do: 0.5\n    defp beats?(:grass, :water), do: 2\n    defp beats?(:water, :electric), do: 0.5\n    defp beats?(:electric, :water), do: 2\n    defp beats?(:grass, :electric), do: 1\n    defp beats?(:electric, :grass), do: 1\n    defp beats?(x, x), do: 0.5\n\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n        # your code here\n        # for Elixir, your_type and opponent_type will be given as atoms\n        50 * (attack \/ defense) * beats?(your_type, opponent_type)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76312,"user_id":null,"body":"defmodule Kata do\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n        50 * (attack \/ defense) * effectiveness(your_type, opponent_type)\n    end\n    \n    defp strength(:fire), do: :grass\n    defp strength(:water), do: :fire\n    defp strength(:grass), do: :water\n    defp strength(:electric), do: :water\n    \n    defp effectiveness(your_type, opponent_type) do\n      cond do\n        strength(your_type) == opponent_type -> 2\n        strength(opponent_type) == your_type -> 0.5\n        opponent_type == your_type -> 0.5\n        true -> 1\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76313,"user_id":null,"body":"defmodule Kata do\n    @type_advantages [[:fire, :grass], [:water, :fire], [:grass, :water], [:electric, :water]]\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n        50 * (attack \/ defense) * get_type_advantage(your_type, opponent_type)\n    end\n    \n    def get_type_advantage(same, same), do: 0.5\n    \n    def get_type_advantage(your_type, opponent_type) when [your_type, opponent_type] in @type_advantages, do: 2\n\n    def get_type_advantage(your_type, opponent_type) when [opponent_type, your_type] in @type_advantages, do: 0.5\n\n    def get_type_advantage(_, _), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76314,"user_id":null,"body":"defmodule Kata do\n    @super_effective 2\n    @not_effective 0.5\n    @neutral 1\n    \n    def calculate_damage(your_type, opponent_type, attack, defense) do     \n      50 * (attack\/defense) * effectiveness({your_type, opponent_type})\n    end\n    \n    defp effectiveness(types) when types in [\n      {:grass,:water}, \n      {:fire,:grass}, \n      {:water,:fire}, \n      {:electric,:water}\n    ] do\n      @super_effective\n    end\n    \n    defp effectiveness(types) when types in [\n      {:water, :grass}, \n      {:grass, :fire}, \n      {:fire, :water}, \n      {:water, :electric}\n    ] do\n      @not_effective\n    end\n    \n    defp effectiveness({type1, type2}) when type1 == type2 do\n       @not_effective\n    end\n    \n    defp effectiveness(_types) do\n      @neutral\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76315,"user_id":null,"body":"defmodule Kata do\n  @effectiveness %{\n    fire: %{grass: 2, water: 0.5, electric: 1, fire: 0.5},\n    water: %{fire: 2, grass: 0.5, electric: 0.5, water: 0.5},\n    grass: %{electric: 1, fire: 0.5, water: 2, grass: 0.5},\n    electric: %{fire: 1, water: 2, grass: 1, electric: 0.5}\n  }\n\n  def calculate_damage(your_type, opponent_type, attack, defense),\n    do: ceil(50 * attack \/ defense * @effectiveness[your_type][opponent_type])\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76316,"user_id":null,"body":"defmodule Kata do\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n        # your code here\n        # for Elixir, your_type and opponent_type will be given as atoms\n        \n        effectiveness = case {your_type, opponent_type} do\n          {:fire, :grass} -> 2\n          {:fire, :water} -> 0.5\n          {:grass, :fire} -> 0.5\n          {:water, :fire} -> 2\n          {:water, :grass} -> 0.5\n          {:water, :electric} -> 0.5\n          {:grass, :water} -> 2\n          {:electric, :water} -> 2\n          {:fire, :electric} -> 1\n          {:electric, :fire} -> 1\n          {:grass, :electric} -> 1\n          {:electric, :grass} -> 1\n          _ -> 0.5\n        end\n        \n        50 * (attack \/ defense) * effectiveness\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76317,"user_id":null,"body":"\n\ndefmodule Kata do\n    @effectiveness [\n      fire: [\n        grass: :super,\n        water: :not\n      ],\n      water: [\n        grass: :not,\n        electric: :not,\n        fire: :super,\n      ],\n      grass: [\n        water: :super,\n        fire: :not\n      ],\n      electric: [\n        water: :super\n      ]\n    ]\n    \n    def calculate_damage(your_type, your_type, attack, defense), do: not_effective(attack, defense)\n    def calculate_damage(your_type, their_type, attack, defense) do\n      case @effectiveness[your_type][their_type] do\n        :super -> super_effective(attack, defense)\n        :not -> not_effective(attack, defense)\n        _ -> neutral(attack, defense)\n      end\n    end\n   \n    defp super_effective(attack, defense), do: neutral(attack, defense) * 2\n    defp not_effective(attack, defense), do: neutral(attack, defense) \/ 2\n    defp neutral(attack, defense), do: 50 * (attack \/ defense)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76318,"user_id":null,"body":"defmodule Kata do\n  def calculate_damage(nil, nil, _, _), do: nil\n\n  def calculate_damage(your_type, opponent_type, attack, defense) do\n    50 * (attack \/ defense) * effectiveness(your_type, opponent_type)\n  end\n  \n  def effectiveness(my_type, op_type) do\n    cond do\n      my_type == op_type                        -> 0.5\n      my_type == :fire  && op_type == :grass    -> 2\n      my_type == :fire  && op_type == :water    -> 0.5\n      my_type == :fire  && op_type == :electric -> 1\n      my_type == :water && op_type == :grass    -> 0.5\n      my_type == :water && op_type == :electric -> 0.5\n      my_type == :grass && op_type == :electric -> 1\n      op_type == :fire  && my_type == :grass    -> 0.5\n      op_type == :fire  && my_type == :water    -> 2\n      op_type == :fire  && my_type == :electric -> 1\n      op_type == :water && my_type == :grass    -> 2\n      op_type == :water && my_type == :electric -> 2\n      op_type == :grass && my_type == :electric -> 1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76319,"user_id":null,"body":"defmodule Kata do\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n      super_effective = 2\n      not_effective = 0.5\n      effectiveness = \n        case {your_type, opponent_type} do\n          {:fire, :water} -> not_effective\n          {:fire, :grass} -> super_effective\n          {:water, :fire} -> super_effective\n          {:grass, :fire} -> not_effective\n          {:water, :grass} -> not_effective\n          {:water, :electric} -> not_effective\n          {:grass, :water} -> super_effective\n          {:electric, :water} -> super_effective\n          {x, x} -> not_effective\n          _ -> 1\n        end\n\n      50 * (attack \/ defense) * effectiveness\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76320,"user_id":null,"body":"defmodule Kata do\n    def calculate_damage(your_type, opponent_type, attack, defense) do\n        50 * (attack \/ defense) * effectiveness(your_type, opponent_type)\n    end\n\n    defp effectiveness(:fire, :fire), do: 0.5\n    defp effectiveness(:fire, :water), do: 0.5\n    defp effectiveness(:fire, :grass), do: 2\n    defp effectiveness(:fire, :electric), do: 1\n\n    defp effectiveness(:water, :fire), do: 2\n    defp effectiveness(:water, :water), do: 0.5\n    defp effectiveness(:water, :grass), do: 0.5\n    defp effectiveness(:water, :electric), do: 0.5\n\n    defp effectiveness(:grass, :fire), do: 0.5\n    defp effectiveness(:grass, :water), do: 2\n    defp effectiveness(:grass, :grass), do: 0.5\n    defp effectiveness(:grass, :electric), do: 1\n\n    defp effectiveness(:electric, :fire), do: 1\n    defp effectiveness(:electric, :water), do: 2\n    defp effectiveness(:electric, :grass), do: 1\n    defp effectiveness(:electric, :electric), do: 0.5\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"537ba77315ddd92659000fec":[{"id":76321,"user_id":null,"body":"defmodule Goldbach do\n    @small [3,5,7]\n    defp prime?(n) when n < 11, do: n in @small\n    defp prime?(n), do: Stream.take_every(3..floor(:math.sqrt(n)), 2) |> Enum.all?(& rem(n,&1) > 0)\n    \n    def check_goldbach(n) when n < 4 or rem(n,2) > 0, do: {}\n    \n    def check_goldbach(4), do: {2,2}\n    def check_goldbach(n), do: 3\n        |> Stream.iterate(& &1+2)\n        |> Stream.map(& prime?(&1) and prime?(n-&1) && {&1,n-&1})\n        |> Enum.find(& &1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76322,"user_id":53,"body":"defmodule Goldbach do\n  def check_goldbach(n) when n<=2 or rem(n,2)!=0, do: {}\n  def check_goldbach(n), do: seek(2,n)\n  defp seek(p,n) when p>div(n,2), do: {}\n  defp seek(p,n), do: (if is_prime(p) and is_prime(n-p), do: {p,n-p}, else: seek(p+1,n))\n  defp is_prime(2), do: true\n  defp is_prime(n) when n < 2 or rem(n, 2)==0, do: false\n  defp is_prime(n), do: is_prime(n, 3)\n  defp is_prime(n, k) when n < k * k, do: true\n  defp is_prime(n, k) when rem(n, k)==0, do: false\n  defp is_prime(n, k), do: is_prime(n, k+2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76323,"user_id":null,"body":"defmodule Goldbach do\n  require Integer\n\n  defp is_prime(n) do\n    n == 2 || n == 3 || Enum.all?(2..floor(:math.sqrt(n)), fn d -> rem(n, d) != 0 end)\n  end\n\n  def check_goldbach(number) do\n    if number > 2 && Integer.is_even(number) do\n      p = Enum.find(2..div(number, 2), fn v -> is_prime(v) && is_prime(number - v) end)\n      {p, number - p}\n    else\n      {}\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76324,"user_id":null,"body":"defmodule Goldbach do\n\n  def check_goldbach(n), do: check(n)\n\n  defp check(n) when rem(n, 2) == 1, do: {}\n  defp check(n) when n <= 2, do: {}\n  defp check(n), do: check(n, 2)\n  defp check(n, x) do\n    case is_prime?(x) and is_prime?(n - x) do\n      true -> {x, n - x}\n      false -> check(n, x + 1)\n    end\n  end\n\n  defp is_prime?(2), do: true\n  defp is_prime?(n) when rem(n, 2) == 0, do: false\n  defp is_prime?(n), do: is_prime?(n, 3)\n  defp is_prime?(n, divisor) when divisor * divisor > n + 1, do: true\n  defp is_prime?(n, divisor) when rem(n, divisor) == 0, do: false\n  defp is_prime?(n, divisor), do: is_prime?(n, divisor + 2)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76325,"user_id":null,"body":"defmodule Goldbach do\n  import Integer, only: [is_odd: 1]\n  \n  def check_goldbach(number) when is_odd(number), do: {}\n  \n  def check_goldbach(number) do\n    if is_prime(number) do\n      {}\n    else\n      l = Range.new(2, div(number, 2)) |> Enum.find(&(is_prime(&1) and is_prime(number - &1)))\n      {l, number - l}\n    end\n  end\n  \n  defp is_prime(x) when x < 4, do: true\n  \n  defp is_prime(number), do: Range.new(2, floor :math.sqrt(number)) |> Enum.all?(&(rem(number, &1) != 0))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76326,"user_id":null,"body":"defmodule Goldbach do\n  def check_goldbach(number) when number <= 2 or rem(number, 2) != 0, do: {}\n  def check_goldbach(number), do: check_goldbach(number, 2, number-2)\n  def check_goldbach(number, min, max) do\n    res1 = is_prime(min)\n    res2 = is_prime(max)\n    cond do\n\t   res1 == res2 and res1 == true ->\n\t\t{min, max}\n      true ->\n        check_goldbach(number, min+1, max-1)\n    end\n  end\n  def is_prime(2), do: true\n  def is_prime(n) when n < 2 or rem(n, 2)==0, do: false\n  def is_prime(n), do: is_prime(n, 3)\n  def is_prime(n, k) when n < k * k, do: true\n  def is_prime(n, k) when rem(n, k)==0, do: false\n  def is_prime(n, k), do: is_prime(n, k+2)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76327,"user_id":null,"body":"defmodule Goldbach do\n  require Integer\n\n  def check_goldbach(n) when Integer.is_odd(n), do: {}\n  def check_goldbach(4), do: {2, 2}\n  def check_goldbach(n), do: check_goldbach(n, 3)\n  def check_goldbach(n, p) when n < 2 * p, do: {}\n\n  def check_goldbach(n, p) do\n    case is_prime?(p) and is_prime?(n - p) do\n      true -> {p, n - p}\n      false -> check_goldbach(n, p + 2)\n    end\n  end\n\n  def is_prime?(n) when not is_integer(n), do: false\n  def is_prime?(n) when n < 2, do: false\n  def is_prime?(n), do: is_prime?(n, 2)\n  def is_prime?(n, p) when p * p > n, do: true\n  def is_prime?(n, p) when rem(n, p) == 0, do: false\n  def is_prime?(n, p), do: is_prime?(n, p + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76328,"user_id":null,"body":"defmodule Goldbach do\n  def is_prime?(n) when n in [2, 3], do: true\n\n  def is_prime?(n) do\n    q = trunc(:math.sqrt(n))\n    is_prime?(n, 2, q)\n  end\n\n  def is_prime?(_n, i, q) when i > q do\n    true\n  end\n\n  def is_prime?(n, i, q) do\n    cond do\n      Integer.mod(n, i) === 0 -> false\n      true -> is_prime?(n, i + 1, q)\n    end\n  end\n\n  def check_goldbach(2), do: {}\n  def check_goldbach(number) when rem(number, 2) !== 0, do: {}\n\n  def check_goldbach(number) do\n    primes = [\n      2,\n      3,\n      5,\n      7,\n      11,\n      13,\n      17,\n      19,\n      23,\n      29,\n      31,\n      37,\n      41,\n      43,\n      47,\n      53,\n      59,\n      61,\n      67,\n      71,\n      73,\n      79,\n      83,\n      89,\n      97\n    ]\n\n    while(number, primes)\n  end\n\n  def while(number, [h | t]) do\n    case is_prime?(number - h) do\n      true -> {h, number - h}\n      _ -> while(number, t)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76329,"user_id":null,"body":"defmodule Goldbach do\n\n  def is_prime(n) do\n    range = 2..(:math.sqrt(n) |> Kernel.trunc)\n    n == 2 || n == 3 || !Enum.any?(range, fn x -> rem(n, x) == 0 end)\n  end\n  \n  def find_prime_sum(n) do\n     res = Enum.find(2..n, fn x -> is_prime(x) && is_prime(n - x) end)\n     {res, n - res}\n  end\n  \n  def check_goldbach(number) do \n    cond do\n      number < 3 || rem(number, 2) != 0 -> {}\n      true -> find_prime_sum(number)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76330,"user_id":null,"body":"defmodule Goldbach do\n  def check_goldbach(4), do: {2, 2}\n  def check_goldbach(number) when rem(number, 2) == 0 and number > 2 do\n    found = Stream.unfold(3, fn x -> {x, x + 2} end)\n    |> Enum.find(fn x -> is_prime(x) and is_prime(number - x) end)\n    {found, number - found}\n  end\n  def check_goldbach(_), do: {}\n\n  def is_prime(2), do: true\n  def is_prime(3), do: true\n  def is_prime(number) do\n    sqrt = \"#{:math.sqrt(number)}\" |> Integer.parse() |> elem(0)\n    2..sqrt |> Enum.all?(fn x -> rem(number, x) > 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"538835ae443aae6e03000547":[{"id":76331,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn(x) -> n + x end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76332,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn m -> m + n end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76333,"user_id":544,"body":"defmodule Kata do\n  def add(n), do: &(&1 + n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76334,"user_id":null,"body":"defmodule Kata do\n  def add(n), do: fn x -> x + n end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76335,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn i -> n + i end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76336,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn (a) -> a + n end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76337,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn m -> n + m end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76338,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    & &1 + n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76339,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    & n + &1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76340,"user_id":null,"body":"defmodule Kata do\n  def add(n) do\n    fn (y) -> n+y end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53af2b8861023f1d88000832":[{"id":76341,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    case (name |> String.first |> String.downcase) do\n    \t\"r\" -> \"#{name} plays banjo\"\n      _ -> \"#{name} does not play banjo\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76342,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name), do: if (name |> String.starts_with?([\"R\", \"r\"])), do: \"#{name} plays banjo\", else: \"#{name} does not play banjo\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76343,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(\"R\" <> rest), do: \"R#{rest} plays banjo\"\n  def are_you_playing_banjo(\"r\" <> rest), do: \"r#{rest} plays banjo\"\n  def are_you_playing_banjo(name), do: \"#{name} does not play banjo\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76344,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    if name =~ ~r\/^r\/i do\n      \"#{name} plays banjo\"\n    else\n      \"#{name} does not play banjo\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76345,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(<<c :: utf8 >> <> _ = name) when c === ?R or c === ?r do\n    \"#{name} plays banjo\"\n  end\n  \n  def are_you_playing_banjo(x) do\n    \"#{x} does not play banjo\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76346,"user_id":564,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    plays? = String.match?(name, ~r\/^r\/i)\n    maybe_plays = if plays?, do: \"plays\", else: \"does not play\"\n    \"#{name} #{maybe_plays} banjo\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76347,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    case String.first(name) do\n      x when x in [\"R\", \"r\"] -> \"#{name} plays banjo\"\n      _ -> \"#{name} does not play banjo\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76348,"user_id":null,"body":"defmodule TalantDetector do\n  require String\n\n  def are_you_playing_banjo(name) do\n    cond do\n      String.match?(name, ~r\/^R\/i) ->\n        name <> \" plays banjo\"\n      true ->\n        name <> \" does not play banjo\"\n     end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76349,"user_id":53,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    cond do\n      String.downcase(String.at(name, 0)) == \"r\" -> \"#{name} plays banjo\"\n      true -> \"#{name} does not play banjo\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76350,"user_id":null,"body":"defmodule TalantDetector do\n  def are_you_playing_banjo(name) do\n    cond do\n       name |> String.downcase |> String.at(0) == \"r\" ->  \"#{name} plays banjo\"\n       true -> \"#{name} does not play banjo\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53c92d34689f84a2d5000e48":[{"id":76351,"user_id":null,"body":"defmodule Kata do\n  def count_facts(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(div(n, p), p)\n    {n2, count + 1}\n  end\n\n  def count_facts(n, p), do: {n, 0}\n\n  def prime_division(n, p \\\\ 2)\n\n  def prime_division(n, p) when p * p > n do\n    if n > 1, do: [{n, 1}], else: []\n  end\n\n  def prime_division(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(n, p)\n    [{p, count} | prime_division(n2, p + 1)]\n  end\n\n  def prime_division(n, p), do: prime_division(n, p + 1)\n\n  def lcm(a, b), do: div(a * b, Integer.gcd(a, b))\n\n  def pow(a, 0), do: 1\n  def pow(a, b), do: a * pow(a, b - 1)\n\n  def carmichael(n) when not is_integer(n) or n < 1, do: 0\n\n  def carmichael(n) do\n    prime_division(n)\n    |> Enum.map(fn {p, w} ->\n      div(\n        pow(p, w - 1) * (p - 1),\n        if(p > 2 || (p == 2 && w < 3), do: 1, else: 2)\n      )\n    end)\n    |> Enum.reduce(1, &lcm\/2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76352,"user_id":53,"body":"defmodule Kata do\n  defp lcm(a,b), do: div(a*b,Integer.gcd(a,b))\n  defp aux(n,w,p,t,l,1) when rem(n,2)==1, do: aux(n,w,3,t,trunc(:math.pow(2,max(0,w-1-(if w>=3, do: 1, else: 0)))),2)\n  defp aux(n,w,p,t,l,1), do: aux(div(n,2),w+1,p,t,l,1)\n  defp aux(n,w,p,t,l,2) when p*p>n, do: if n>1, do: lcm(l,n-1), else: l\n  defp aux(n,w,p,t,l,2) when rem(n,p)>0, do: aux(n,w,p+2,t,l,2)\n  defp aux(n,w,p,t,l,2), do: aux(div(n,p),w,p,p-1,l,3)\n  defp aux(n,w,p,t,l,3) when rem(n,p)>0, do: aux(n,w,p+2,t,lcm(l,t),2)\n  defp aux(n,w,p,t,l,3), do: aux(div(n,p),w,p,t*p,l,3)\n  def carmichael(n) when not is_integer(n) or n<1, do: 0\n  def carmichael(n), do: aux(n,0,0,0,0,1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76353,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  \n  def carmichael(n) when is_integer(n) and n > 1 do\n    # TODO: working solution (don't forget argument validation)\n    n\n    |> decompose()\n    |> IO.inspect(label: \"Decomposed #{n}\")\n    |> Enum.map(fn {p, w} -> prime_lambda(p, w) end)\n    |> lcm()\n  end\n  \n  def carmichael(1), do: 1\n  \n  def carmichael(_), do: 0\n  \n  defp prime_lambda(2, w) when w >= 3, do: div(phi(2, w), 2)\n  defp prime_lambda(p, w), do: phi(p, w)\n  \n  defp phi(p, r), do: ipow(p, r - 1) * (p - 1)\n  \n  defp lcm(list) when is_list(list), do: Enum.reduce(list, &lcm\/2)\n  \n  defp lcm(a, b), do: div(a, Integer.gcd(a, b)) * b\n  \n  def decompose(n, k \\\\ 2, map \\\\ %{})\n  \n  def decompose(n, k, map) when n < k * k, do: Map.update(map, n, 1, &(&1 + 1))\n  \n  def decompose(n, k, map) when rem(n, k) == 0 do\n    map = Map.update(map, k, 1, &(&1 + 1))\n    \n    decompose(div(n, k), k, map)\n  end\n  \n  def decompose(n, k, map), do: decompose(n, k + 1, map)\n  \n  # Implement custom algorithm for integer power as Integer.pow\/2\n  # is available only in 1.12+ (this is running on 1.11)\n  defp ipow(_, 0), do: 1\n  defp ipow(n, 1), do: n\n  defp ipow(n, p) when Integer.is_even(p), do: ipow(n * n, div(p, 2))\n  defp ipow(n, p) when Integer.is_odd(p), do: n * ipow(n * n, div(p - 1, 2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76354,"user_id":null,"body":"defmodule Kata do\n  \n  @doc \"\"\"\n  The `carmichael\/1` returns the \u03bb function: \u03bb(n) for a positive integer n, by determining the lcm of the \u03bb function for each of the prime factors of n. `carmichael\/1` uses the `get_primes\/1`, `get_lambda\/2` and `lcm\/1` as helper functions.\n\n  ## Examples\n      iex> carmichael(8)\n          2\n      \n      iex> carmichael(2)\n          1\n  \"\"\"\n  @doc since: \"1.12.2\"\n  #@spec carmichael(pos_integer()) :: pos_integer()\n  def carmichael(1), do: 1\n  def carmichael(n) when n > 1 and n <= 1.0e10 and is_integer(n) do\n    # TODO: working solution (don't forget argument validation)\n    primes = get_primes(n) #create this function to return a map of each prime factor as key and its power as the value\n    #each element of the map should be passed to get_lambda function\n    lambdas = for {num, exp} <- primes, do: get_lambda(num, exp)\n    #the result is then the lcm of the lambdas of each of the prime factors to their powers\n    lcm(lambdas)\n  end\n\n  def carmichael(_n), do: 0\n\n  @doc \"\"\"\n  `get_lambda\/2` returns the \u03bb function: \u03bb(n), for a prime n, with power exp. Calculated here using Carmichael's theorem, where \u03bb of a prime power p,r: for a power of an odd prime and for 2 and 4, \u03bb(pr) is equal to the Euler totient \u03c6(pr); for powers of 2 greater than 4 it is equal to half of the Euler totient, where the Euler totient for (p,r) is calculated as: (p ^ (r - 1)) * (p - 1)\n\n  ## Examples\n      iex> get_lambda(2, 4)\n\n      iex> get_lambda(7, 11)\n\n  \"\"\"\n  @doc since: \"1.12.2\"\n  @spec get_lambda(pos_integer(), pos_integer()) :: pos_integer()\n  def get_lambda(2, exp) when exp == 1 or exp == 2 do\n    #for odd primes - lambda = pow(num, exp - 1) * (num - 1). This also applies for 2 and 2^2\n    #for 2 to a power more than 2, we will take 1\/2 of lambda\n    Pow.pow(2, exp - 1) |> trunc()\n  end\n\n  def get_lambda(2, exp) when exp > 2 do\n    (0.5 * Pow.pow(2, exp - 1)) |> trunc()\n  end\n  \n  def get_lambda(num, exp) when rem(num, 2) == 1 do\n    (Pow.pow(num, exp - 1) * (num - 1)) |> trunc()\n  end\n\n  @doc \"\"\"\n  Returns a map containing all prime factors of a given integer n as keys, and their powers in the prime factorization of n as corresponding values. Calls the `get_primes\/3` function. The third argument (options passed to check) are only [2, 3] if n < 5, and [2, 3] + a list of numbers from 5 to sqrt(n), where the remainder is 1 or 5 when each of the numbers is divided by 6. (this skips all evens and multiples of 3)\n\n  ## Examples\n      iex> get_primes(90)\n        %{2 => 1, 3 => 2, 5 => 1}\n\n      iex> get_primes(256)\n        %{2 => 8}\n\n      iex> get_primes(127)\n        %{127 => 1}\n\n  \"\"\"\n  @doc since: \"1.12.2\"\n  @spec get_primes(pos_integer()) :: %{pos_integer() => pos_integer()}\n  def get_primes(n) do\n    options = cond do\n      n < 5 -> []\n      true -> Enum.filter(5..trunc(:math.sqrt(n)), fn x -> rem(x, 6) == 1 or rem(x, 6) == 5 end)\n    end\n    get_primes(n, %{}, [2, 3] ++ options)\n  end\n\n  def get_primes(n, m, []) when map_size(m) == 0 do\n    #if none of the options are a factor, then n itself is prime\n    %{n => 1}\n  end\n\n  def get_primes(n, m, []) when n > 1 do\n    #if some of the options are a factor (so map_size(m) is not 0), but the value of n has not become 1 after dividing by the factors, then the remaining value is also a prime factor of the original n. Happens with large values.\n    Map.put_new(m, n, 1)\n  end\n\n  def get_primes(_n, m, []) do\n    #when all options are exhausted, map is not empty. I think this and the next function clause can be combined.\n    m\n  end\n\n  def get_primes(1, m, []) do\n    m\n  end\n\n  def get_primes(n, m, options) do\n    [head | tail] = options\n    cond do\n      rem(n, head) == 0 -> \n        new_m = if Map.has_key?(m, head) do\n           Map.replace!(m, head, Map.get(m, head) + 1)\n        else\n          Map.put(m, head, 1)\n        end\n        get_primes(div(n,head), new_m, options)\n      true -> \n      get_primes(n, m, tail)\n    end\n  end\n\n  @doc \"\"\"\n  Returns the least common multiple of a list of positive integers. Uses the `get_lcm\/3` function as helper.\n  \"\"\"\n  @doc since: \"1.12.2\"\n  @spec lcm(list(integer())) :: pos_integer()\n  def lcm(l) do\n    #return the lcm of a list of integers\n    least = Enum.min(l)\n    get_lcm(l, least, get_primes(least))\n  end\n\n  def get_lcm([], current, _current_primes) do\n    current\n  end\n\n  def get_lcm(l, current, current_primes) do\n    [head | tail] = l\n    cond do\n      head == current -> get_lcm(tail, current, current_primes)\n      rem(head, current) == 0 -> get_lcm(tail, current * div(head, current), get_primes(head))\n      true -> head_primes = get_primes(head)\n              new_m = Map.merge(head_primes, current_primes, fn _k, v1, v2 -> max(v1, v2) end)\n              get_lcm(tail, Enum.reduce(new_m, 1, fn {x, y}, acc -> acc * Pow.pow(x,y) end) |> trunc() ,new_m)\n    end\n  end\n\nend\n\ndefmodule Pow do\n  require Integer\n\n  def pow(_, 0), do: 1\n  def pow(x, n) when Integer.is_odd(n), do: x * pow(x, n - 1)\n  def pow(x, n) do\n    result = pow(x, div(n, 2))\n    result * result\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76355,"user_id":null,"body":"defmodule Kata do\n    def carmichael(n) when is_integer(n) and n >= 1 do\n      decomposition(n)\n      |> Enum.map(fn {p, k} -> carmichael_prime(p, k) end)\n      |> Enum.reduce(1, &lcm\/2)\n    end\n    def carmichael(_), do: 0\n    def decomposition(1), do: %{}\n    def decomposition(n) when n > 1, do: decomposition(n, 2, %{})\n    defp decomposition(n, k, acc) when n < k*k, do: Map.update(acc, n, 1, & &1+1)\n    defp decomposition(n, k, acc) when rem(n, k) == 0, do: decomposition(div(n, k), k, Map.update(acc, k, 1, & &1+1))\n    defp decomposition(n, k, acc), do: decomposition(n, k+1, acc)\n    def gcd(a, 0), do: a\n    def gcd(0, b), do: b\n    def gcd(a, b), do: gcd(b, rem(a,b))\n    def lcm(0, 0), do: 0\n    def lcm(a, b), do: div (a*b), gcd(a,b)\n    def carmichael_prime(p, k) do\n      if p == 2 and k >= 3 do\n        div totient_prime(p, k), 2\n      else\n        totient_prime(p, k)\n      end\n    end\n    def totient_prime(p, k) when k >= 1 do\n      (p - 1) * (:math.pow(p, k-1) |> round)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76356,"user_id":null,"body":"defmodule Kata do\n\n  def carmichael(n), do: get_carmichael(n)\n\n  defp get_carmichael(n) when not is_integer(n) or n <= 0, do: 0\n  defp get_carmichael(n) do\n    n\n    |> get_prime_divisors\n    |> Map.to_list\n    |> Enum.map(fn {p, k} -> carmichael_prime_power(p, k) end)\n    |> lcm\n  end\n\n  defp carmichael_prime_power(p, k) when p != 2, do: euler_function(p, k)\n  defp carmichael_prime_power(p, k) when p == 2 and k in [1, 2], do: euler_function(p, k)\n  defp carmichael_prime_power(p, k), do: div(euler_function(p, k), 2)\n\n  defp euler_function(p, k), do: round(:math.pow(p, k - 1)) * (p - 1)\n\n  defp lcm([]), do: 1\n  defp lcm([a]), do: a\n  defp lcm([a, b]), do: div(a * b, Integer.gcd(a, b))\n  defp lcm([head | tail]), do: lcm([head, lcm(tail)])\n\n  defp get_prime_divisors(n), do: get_prime_divisors(n, 2, %{})\n  defp get_prime_divisors(1, _, acc), do: acc\n  defp get_prime_divisors(n, d, acc) when d * d > n, do: Map.update(acc, n, 1, & &1 + 1)\n  defp get_prime_divisors(n, d, acc) when rem(n, d) != 0, do: get_prime_divisors(n, d + 1, acc)\n  defp get_prime_divisors(n, d, acc), do: get_prime_divisors(div(n, d), d, Map.update(acc, d, 1, & &1 + 1))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76357,"user_id":527,"body":"defmodule Kata do\n\n  def carmichael(n) when not (is_integer(n) and n >= 1), do: 0\n  def carmichael(1), do: 1\n  def carmichael(n) do\n    n\n    |> prime_factors\n    |> Enum.map(fn {p, w} ->\n      div(round(:math.pow(p, w) - :math.pow(p, w - 1)), (if p == 2 and w >= 3, do: 2, else: 1))\n    end)\n    |> Enum.reduce(&lcm\/2)\n  end\n  \n  @primes [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991]\n\n  defp prime_factors(n), do: do_prime_factors(n, @primes)\n  defp do_prime_factors(1, _), do: []\n  defp do_prime_factors(n, []), do: [{n, 1}]\n  defp do_prime_factors(n, [p | ps]) do\n    case remove_factor(n, p) do\n      {0, n} -> do_prime_factors(n, ps)\n      {k, n} -> [{p, k} | do_prime_factors(n, ps)]\n    end\n  end\n  \n  defp remove_factor(n, f), do: do_remove_factor(n, f, 0)\n  defp do_remove_factor(n, f, k) when rem(n, f) != 0, do: {k, n}\n  defp do_remove_factor(n, f, k), do: do_remove_factor(div(n, f), f, k + 1)\n  \n  defp lcm(x, y), do: div(x, Integer.gcd(x, y)) * y\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76358,"user_id":null,"body":"defmodule Kata do\n    defp lcm(a,b), do: div(a*b, Integer.gcd(a,b))\n    defp step(2), do: 3\n    defp step(k), do: k+2\n\n    defp helper(n,rt,k,_c,x) when k > rt, do:\n        if n > 1, do: lcm(x,n-1), else: x\n\n    defp helper(n,rt,k,c,x) when rem(n,k) < 1, do:\n        helper(div(n,k),rt,k,c+1,x)\n    \n    defp helper(n,rt,k,0,x), do: helper(n,rt,step(k),0,x)\n    defp helper(n,rt,k,c,x) do\n        z = floor(:math.pow(k,c-1) * (k-1))\n        helper(n,rt,step(k),0, if(x < 2, do: z, else: lcm(x,z)))\n    end\n\n    def carmichael(1), do: 1\n    def carmichael(n) when is_integer(n) and n > 1 do\n        n = if rem(n,8) == 0, do: div(n,2), else: n\n        helper(n, floor(:math.sqrt(n)), 2,0,1)\n    end\n    def carmichael(_n), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53d40c1e2f13e331fc000c26":[{"id":76359,"user_id":null,"body":"defmodule Fib do\n\n  @spec fib(integer()) :: integer()\n  \n  def fib(0), do: 0\n  def fib(1), do: 1\n \n  def fib(n) when abs(n) > 10000 do\n    result = fib_iter(1, 0, 0, 1, abs(n))\n    p = (if rem(n, 2) == 0 do\n          -1\n        else\n        1\n        end)\n    p * result\n  end\n\n  def fib(n) when n < 0 and rem(n, 2) == 0, do: -1 * cal(abs(n), 0, 1, 1)\n\n  def fib(n) do\n    cal(abs(n), 0, 1, 1)\n  end\n\n  def cal(n, a, b, counter) when counter < n do\n    cal(n, b, a + b, counter + 1)\n  end\n\n  def cal(_n, _a, b, _counter) do\n    b\n  end\n\n  def fib_iter(_a, b, _p, _q, 0) do\n    b\n  end\n\n  def fib_iter(a, b, p, q, count) when rem(count, 2) == 0 do\n    fib_iter(\n    a, \n    b, \n    (p * p) + (q * q), \n    (2 * p * q) + (q * q), \n    div(count, 2))\n  end\n\n  def fib_iter(a, b, p, q, count) do\n    fib_iter(\n    (b * q) + (a * q) + (a * p),\n    (b * p) + (a * q),\n    p,\n    q,\n    count - 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76360,"user_id":53,"body":"defmodule Fib do\n  defp aux(n) when n == 0, do: [0, 1]\n  defp aux(n) when n == 1, do: [1, 1]\n  defp aux(n) do\n    [a, b] = aux(div(n, 2))\n    x = a * (2 * b - a)\n    y = b * b + a * a\n    cond do\n      rem(n, 2) == 0 -> [x, y]\n      true -> [y, y + x]\n    end\n  end\n  def fib(n) when n >= 0, do: Enum.at(aux(n), 0)\n  def fib(n) when rem(n, 2) == 0, do: -Enum.at(aux(-n), 0)\n  def fib(n), do: Enum.at(aux(-n), 0)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76361,"user_id":null,"body":"defmodule Fib do\n  require Integer\n  def fib(n) do\n    cond do\n      n<0 and Integer.is_even(n) -> -fib_iter(1, 0, 0, 1, -n)\n      n<0 and Integer.is_odd(n) -> fib_iter(1, 0, 0, 1, -n)\n      true -> fib_iter(1, 0, 0, 1, n)\n    end\n  end\n  def fib_iter(a, b, p, q, count) do\n    cond do\n      count == 0 -> b\n      Integer.is_even(count) -> fib_iter(a, b, (p*p)+(q*q), q*q+(2*p*q), div(count,2))\n      true -> fib_iter((a*q+b*q+a*p), (b*p+a*q), p, q, count-1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76362,"user_id":null,"body":"defmodule Fib do\n  @type matrix :: {{integer(), integer()}, {integer(), integer()}}\n  @type vector :: {integer(), integer()}\n\n  @spec mult_matrix(matrix, matrix) :: matrix\n  def mult_matrix({{a_00, a_01}, {a_10, a_11}}, {{b_00, b_01}, {b_10, b_11}}) do\n    {\n      {a_00 * b_00 + a_01 * b_10, a_00 * b_01 + a_01 * b_11},\n      {a_10 * b_00 + a_11 * b_10, a_10 * b_01 + a_11 * b_11}\n    }\n  end\n\n  @spec mult_matrix_vector(matrix, vector) :: vector\n  def mult_matrix_vector({{a_00, a_01}, {a_10, a_11}}, {x_0, x_1}) do\n    {a_00 * x_0 + a_01 * x_1, a_10 * x_0 + a_11 * x_1}\n  end\n\n  @spec pot_matrix(matrix, non_neg_integer) :: matrix\n  def pot_matrix(_matrix, 0) do\n    {{1, 0}, {0, 1}}\n  end\n\n  def pot_matrix(matrix, 1) do\n    matrix\n  end\n\n  def pot_matrix(matrix, n) when rem(n, 2) == 0 do\n    matrix_div = pot_matrix(matrix, div(n, 2))\n    mult_matrix(matrix_div, matrix_div)\n  end\n\n  def pot_matrix(matrix, n) when rem(n, 2) == 1 do\n    matrix_div = pot_matrix(matrix, div(n, 2))\n    mult_matrix(mult_matrix(matrix_div, matrix_div), matrix)\n  end\n\n  @spec fib(integer()) :: integer\n  def fib(n) when n >= 0 do\n    matrix = {{0, 1}, {1, 1}}\n    {f, _} = mult_matrix_vector(pot_matrix(matrix, n), {0, 1})\n    f\n  end\n\n  def fib(n) when n < 0 do\n    matrix = {{-1, 1}, {1, 0}}\n    {f, _} = mult_matrix_vector(pot_matrix(matrix, -n), {0, 1})\n    f\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76363,"user_id":470,"body":"defmodule Fib do\n\trequire Integer\n\t\n\tdef fib(0),do: 0\n\tdef fib(n) do\n\t\t<<_>><>s = Integer.to_string(abs(n),2)\n\t\tz = ix(s,{1,1,0})\n\t\tif n > 0 || Integer.is_odd(n),do: z,else: -z\n\tend\n\t\n\tdefp ix(\"\",{_,v2,_}),do: v2\n\tdefp ix(<<h>><>s,{v1,v2,v3}) do\n\t\tcc = v2*v2\n\t\t{v1,v2,v3} = {v1*v1+cc,(v1+v3)*v2,cc+v3*v3}\n\t\tif h == 49,do: ix(s,{v1+v2,v1,v2}),else: ix(s,{v1,v2,v3})\n\tend\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76364,"user_id":null,"body":"defmodule Fib do\n  require Integer\n  def fib_iter(_, b, _, _, 0), do: b\n\n  def fib_iter(a, b, p, q, count) when Integer.is_even(count),\n    do: fib_iter(a, b, p * p + q * q, (2 * p + q) * q, div(count, 2))\n\n  def fib_iter(a, b, p, q, count),\n    do: fib_iter(b * q + a * (q + p), b * p + a * q, p, q, count - 1)\n\n  def fib(n), do: if(n < 0 && Integer.is_even(n), do: -1, else: 1) * fib_iter(1, 0, 0, 1, abs(n))\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76365,"user_id":null,"body":"defmodule Fib do\n  def fib(n) when n < 0 do \n    case rem(n, 2) do\n      0 -> -fib(-n)\n      _ -> fib(-n)\n    end\n  end\n    \n  def fib(n), do: f(n) |> elem(1)\n\n  defp f(0), do: {1, 0}\n  defp f(n) do\n    with {a, b} <- div(n, 2) |> f,\n      p <- b * (2*a - b),\n      q <- a*a + b*b\n    do\n      case rem(n, 2) == 0 do\n        true -> {q, p}\n        false -> {q+p, q}\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76366,"user_id":null,"body":"defmodule Fib do\n  require Integer\n\n  def fib(0), do: 0\n  def fib(1), do: 1\n  def fib(n) when n < 0 and Integer.is_even(n), do: -fib(abs(n))\n  def fib(n) when n < 0, do: fib(abs(n))\n  def fib(n), do: fibf(n) |> elem(1)\n  \n  defp fibf(1), do: {0, 1}\n  defp fibf(n) do\n    if Integer.is_odd(n) do\n      {f1, f2} = fibf(trunc(n\/2))\n      \n      fibn0 = f1 * f1 + f2 * f2\n      fibn2 = f2 * f2 + ((f1 + f2) * (f1 + f2))\n      fibn1 = fibn2 - fibn0\n      \n      {fibn1, fibn2}\n    else\n      {f1, f2} = fibf(div(n, 2))\n      \n      fibn0 = f1 * f1 + f2 * f2\n      fibn2 = f2 * f2 + ((f1 + f2) * (f1 + f2))\n      fibn1 = fibn2 - fibn0\n      \n      {fibn0, fibn1}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76367,"user_id":null,"body":"defmodule Fib do\n  #Honestly I don't know what was the deal with negative values\n  #I simply understood that fib(n) = -fib(-n) when n even and fib(n) = fib(-n) when n odd\n  #Afterwards, I simply followed the exercices of the hint\n  def fib(n) do\n    if n < 0 do\n      if rem(n, 2) == 0 do\n        (-1) * recursive_fib(1, 0, 0, 1, abs(n))\n      else\n        recursive_fib(1, 0, 0, 1, abs(n))\n      end\n    else\n      recursive_fib(1, 0, 0, 1, n)\n    end\n  end\n  \n  defp recursive_fib(_, b, _, _, 0), do: b\n  defp recursive_fib(a, b, p, q, count) do\n    if rem(count, 2) == 0 do\n      recursive_fib(a, b, p*p + q*q, q*q + 2*q*p, div(count, 2))\n    else\n      recursive_fib(b*q + a*q + a*p, b*p + a*q, p, q, count - 1)\n    end\n  end\n  \n  defp recursive_fib(_, b, 0), do: b\n  defp recursive_fib(a, b, count) do\n    recursive_fib(a + b, a, count - 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76368,"user_id":null,"body":"defmodule Fib do\n  def fib(n) do\n    if n >= 0 do\n      fibiter(1, 0, 0, 1, n)\n    else\n      {a, _b} = Enum.reduce_while(0..n, {0, 1}, fn x, {a, b} -> \n        if x == n do \n          {:halt, {a, b}}\n        else\n          {:cont, {b - a, a}}\n        end\n      end)\n      a\n    end\n  end\n\n  def fibiter(_a, b, _p, _q, 0), do: b\n\n  def fibiter(a, b, p, q, count) do\n    if rem(count, 2) == 0 do\n      fibiter(a, b, p * p + q * q, q * q + 2 * p * q, trunc(count \/ 2))\n    else\n      fibiter(b * q + a * q + a * p, b * p + a * q, p, q, count - 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53da3dbb4a5168369a0000fe":[{"id":76369,"user_id":null,"body":"defmodule Codewars do\n  def even_or_odd(number) when rem(number, 2) == 0, do: \"Even\"\n  def even_or_odd(_), do: \"Odd\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76370,"user_id":null,"body":"defmodule Codewars do\n  require Integer\n\n  def even_or_odd(integer) when Integer.is_even(integer), do: \"Even\"\n  def even_or_odd(integer) when Integer.is_odd(integer), do: \"Odd\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76371,"user_id":3221,"body":"defmodule Codewars do\n  def even_or_odd(number) do\n    if (rem(number,2)==0), do: \"Even\", else: \"Odd\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76372,"user_id":null,"body":"import Integer\ndefmodule Codewars do\n  def even_or_odd(number) do\n    if Integer.is_even(number) do\n      \"Even\"\n    else\n      \"Odd\"  \n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76373,"user_id":null,"body":"defmodule Codewars do\n  def even_or_odd(number) do\n    Enum.at([\"Even\",\"Odd\"],rem(number,2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76374,"user_id":null,"body":"defmodule Codewars do\n  def even_or_odd(number) do\n    (:erlang.rem( number, 2)==0) && \"Even\" || \"Odd\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76375,"user_id":null,"body":"defmodule Codewars do\n  require Bitwise\n\n  defguardp is_even(integer) when Bitwise.band(integer, 1) == 0\n  defguardp is_odd(integer) when Bitwise.band(integer, 1) == 1\n\n  def even_or_odd(integer) when is_even(integer), do: \"Even\"\n  def even_or_odd(integer) when is_odd(integer), do: \"Odd\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76376,"user_id":null,"body":"defmodule Codewars do\n  def even_or_odd(number) do\n    cond do\n      rem(abs(number), 2) == 1 -> \"Odd\"\n      true -> \"Even\"        \n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76377,"user_id":null,"body":"defmodule Codewars do\n  def even_or_odd(number) do\n    # code here\n    cond do \n      is_integer(number) and rem(number, 2) == 0 -> \"Even\"\n      true -> \"Odd\"\n    end\n    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76378,"user_id":null,"body":"defmodule Codewars do\n  @spec even_or_odd(integer) :: String.t\n  def even_or_odd(number), do: if Integer.mod(number, 2) != 0, do: \"Odd\", else: \"Even\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53dc23c68a0c93699800041d":[{"id":76379,"user_id":3236,"body":"defmodule SentenceSmasher do\n  def smash(words), do: Enum.join(words, \" \")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76380,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash(words) do\n    Enum.join(words, \" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76381,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash(words), do: words |> Enum.join(\" \")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76382,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash(words) do\n    Enum.reduce(words, \"\", fn\n      x, \"\" -> x\n      x, acc -> acc <> \" \" <> x\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76383,"user_id":null,"body":"defmodule SentenceSmasher do  \n  def smash(words, acc \\\\ \"\")\n  def smash([], acc), do: acc\n  def smash([head | tail], \"\"), do: smash(tail, head) \n  def smash([head | tail], acc), do: smash(tail, \"#{acc} #{head}\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76384,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash([]), do: \"\"\n  def smash([word]), do: word\n  def smash([first | rest]), do: \"#{first} \" <> smash(rest)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76385,"user_id":null,"body":"defmodule SentenceSmasher do\n\n  def smash([]) do\n    \"\"\n  end\n\n  def smash([h]) do\n    h\n  end\n  \n  def smash([h|t]) do\n    h <> \" \"<> smash(t)\n  end\n\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76386,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash(words) do\n      if words == [] do \"\" else\n        Enum.reduce(words, fn(w, acc) -> acc <> \" \" <> w end)   \n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76387,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash(words) do\n    Enum.join(words, \" \")\n    |> String.trim()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76388,"user_id":null,"body":"defmodule SentenceSmasher do\n  def smash([]), do: \"\"\n  def smash([h | t] = _words) when t === [], do: h\n  def smash([h | t] = _words), do: h <> \" \" <> smash(t)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53dc54212259ed3d4f00071c":[{"id":76389,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array(numbers), do: Enum.sum(numbers)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76390,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array(numbers, acc \\\\ 0)\n  def sum_array([], acc), do: acc\n  def sum_array([head | tail], acc), do: sum(tail, acc + head)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76391,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array([]), do: 0\n  def sum_array([head|tail]), do:  head + ( tail |> sum )\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76392,"user_id":1030,"body":"defmodule SumNumbers do\n  def sum_array(numbers), do: numbers |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76393,"user_id":250,"body":"defmodule SumNumbers do\n  def sum_array(n), do: Enum.sum n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76394,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array([]), do: 0\n  def sum_array([n]), do: n\n  def sum_array([h | t]), do: h + sum(t)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76395,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array(numbers,acc \\\\ 0)\n  def sum_array([],acc), do: acc\n  def sum_array([hd | tl],acc) do\n    sum(tl,acc + hd) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76396,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array(numbers), do: Enum.reduce(numbers, 0, &+\/2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76397,"user_id":null,"body":"defmodule SumNumbers do\n  def sum_array(numbers) do\n    Enum.sum(numbers)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76398,"user_id":676,"body":"defmodule SumNumbers do\n  defdelegate sum(numbers), to: Enum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53e57dada0cb0400ba000688":[{"id":76399,"user_id":470,"body":"defmodule Kata do\n\tdef list_position(s),do: forge(String.reverse(s),1,1,0,%{})\n\t\n\tdefp forge(<<ch>><>s,rank,suff,c,ix) do\n\t\tnv = Map.get(ix,ch,0) + 1\n\t\tnix = Map.put(ix,ch,nv)\n\t\tforge(s,richese(Map.to_list(nix),rank,ch,nv,suff),div(suff*(c+1),nv),c+1,nix)\n\tend\n\t\n\tdefp forge(\"\",rank,_,_,_),do: rank\n\tdefp richese([{k,v}|r],rnk,ch,nv,suff) do\n\t\tdelta = if k < ch,do: div(suff*v,nv),else: 0\n\t\trichese(r,rnk+delta,ch,nv,suff)\n\tend\n\tdefp richese([],rnk,_,_,_),do: rnk\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76400,"user_id":527,"body":"defmodule Kata do\n  def list_position(\"\"), do: 1\n  def list_position(word = <<c0, cs :: binary>>) do\n    list_position(cs) + div(\n      Enum.count((for <<c <- word>>, do: c), &(&1 < c0)) * factorial(byte_size(word) - 1),\n      Enum.reduce(Enum.frequencies(for <<c <- word>>, do: c), 1, fn {_, n}, a -> a * factorial(n) end))\n  end\n  \n  defp factorial(0), do: 1\n  defp factorial(n), do: n * factorial(n - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76401,"user_id":null,"body":"defmodule Kata do\n    def list_position(word), do: list_pos(String.codepoints(word))\n    defp list_pos([]), do: 1\n    defp list_pos(arr=[first|tail]), do: calc(sort_arr(arr),length(tail))*count_less(first,tail) + list_pos(tail)\n    defp calc(sorted_arr,m), do: Enum.reduce(sorted_arr, f(m), fn {_,num}, mult -> div(mult,f(num)) end)   \n    defp count_less(letter, tail), do: Enum.reduce(tail,0, fn x, sum -> if x < letter, do: sum+1, else: sum end)\n    defp sort_arr(arr), do: arr |> Enum.sort |> Enum.chunk_by(&(&1)) |> Enum.map(fn x-> {Enum.at(Enum.dedup(x),0),length(x)} end)  \n    defp f(0), do: 1\n    defp f(n) when n > 0, do: n * f(n - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76402,"user_id":null,"body":"defmodule Kata do\n  def list_position(word) do\n    # Return the anagram list position of the word\n    cntr = String.graphemes(word) |> Enum.frequencies()\n\n    Enum.reduce(String.graphemes(word), {1, cntr}, fn ch, {count, cntr} ->\n      cnt =\n        Map.keys(cntr)\n        |> Enum.filter(fn c -> c < ch && Map.get(cntr, c) > 0 end)\n        |> Enum.reduce(0, fn c, cnt ->\n          cntr2 = Map.update(cntr, c, 0, &(&1 - 1))\n\n          cnt +\n            div(\n              factorial(Map.values(cntr2) |> Enum.sum()),\n              Enum.reduce(Map.values(cntr2), 1, fn v, prod -> prod * factorial(v) end)\n            )\n        end)\n\n      {count + cnt, Map.update(cntr, ch, 0, &(&1 - 1))}\n    end)\n    |> elem(0)\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: n * factorial(n - 1)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76403,"user_id":null,"body":"defmodule Kata do\n  def list_position(word) do\n    # Return the anagram list position of the word\n    cntr =\n      String.graphemes(word)\n      |> Enum.reduce(%{}, fn c, cntr -> Map.update(cntr, c, 1, &(&1 + 1)) end)\n\n    Enum.reduce(String.graphemes(word), {1, cntr}, fn ch, {count, cntr} ->\n      cnt =\n        Map.keys(cntr)\n        |> Enum.filter(fn c -> c < ch && Map.get(cntr, c) > 0 end)\n        |> Enum.reduce(0, fn c, cnt ->\n          cntr2 = Map.update(cntr, c, 0, &(&1 - 1))\n\n          cnt +\n            div(\n              factorial(Map.values(cntr2) |> Enum.sum()),\n              Enum.reduce(Map.values(cntr2), 1, fn v, prod -> prod * factorial(v) end)\n            )\n        end)\n\n      {count + cnt, Map.update(cntr, ch, 0, &(&1 - 1))}\n    end)\n    |> elem(0)\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: n * factorial(n - 1)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76404,"user_id":null,"body":"defmodule Kata do\n  def list_position(word) do\n    list_index(String.to_charlist(word)) + 1\n  end\n\n  def list_index([]), do: 0\n\n  def list_index([init | rest] = letters) do\n    (letters\n     |> Enum.uniq()\n     |> Enum.sort()\n     |> Enum.filter(&(&1 < init))\n     |> Enum.map(fn letter ->\n       letters\n       |> List.delete(letter)\n       |> n_anagrams()\n     end)\n     |> Enum.sum()) + list_index(rest)\n  end\n\n  def n_anagrams(letters) do\n    factorial(length(letters))\n    |> div(\n      letters\n      |> Enum.group_by(& &1)\n      |> Enum.map(fn {_, v} -> factorial(length(v)) end)\n      |> Enum.reduce(&(&1 * &2))\n    )\n  end\n\n  def factorial(n)\n\n  def factorial(0), do: 1\n\n  def factorial(n) when n >= 0 do\n    n * factorial(n - 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76405,"user_id":null,"body":"defmodule Kata do\n    def list_position(word) do\n        word\n        |> to_charlist()\n        |> position()\n    end\n    \n    defp position([_any]), do: 1\n    defp position([first_char | rest] = char_list) do\n      char_list\n      |> Enum.uniq\n      |> Enum.sort\n      |> Enum.reduce_while(1, fn current_char, acc ->\n        if current_char == first_char do\n          {:halt, acc + position(rest) - 1}\n        else\n          {:cont, nb_permutations(List.delete(char_list, current_char)) + acc}\n        end\n      end)\n    end\n    \n    defp nb_permutations(char_list) do\n      n = Enum.count(char_list)\n      \n      divider = char_list\n      |> Enum.frequencies_by(& &1)\n      |> Enum.reduce(1, fn {_char, freq}, acc -> factorial(freq) * acc end)\n      \n      div(factorial(n), divider)\n    end\n    \n    defp factorial(1), do: 1\n    defp factorial(n), do: n * factorial(n - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76406,"user_id":null,"body":"defmodule Kata do\n  @alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  @bucket List.duplicate(0, String.length(@alphabet))\n\n  @factorials [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600,\n  6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000,\n  6402373705728000, 121645100408832000, 2432902008176640000,\n  51090942171709440000, 1124000727777607680000, 25852016738884976640000,\n  620448401733239439360000]\n\n\n  def to_numbers(word) do\n    word |> :binary.bin_to_list() |> Enum.map(& &1 - 65)\n  end\n\n  def create_bucket(word) do\n    Enum.reduce(word, @bucket, fn letter, bucket ->\n      List.update_at(bucket, letter, & &1 + 1)\n    end)\n  end\n\n  def list_position(word) do\n    word = to_numbers(word)\n    calculate(create_bucket(word), 0, word, 1, length(word))\n  end\n\n  def calculate(bucket, letter, [letter | shorter_word] = _word, sum, word_length) do\n    bucket = List.update_at(bucket, letter, & &1 - 1)\n    calculate(bucket, 0, shorter_word, sum, word_length - 1)\n  end\n\n  def calculate(_bucket, _letter, [] = _word, sum, _word_length) do\n    sum\n  end\n\n  def calculate(bucket, letter, word, sum, word_length) do\n    a = calcualte_for_letter(bucket, letter, word_length)\n\n    calculate(bucket, letter + 1, word, sum + a, word_length)\n  end\n\n  def calcualte_for_letter(bucket, letter, word_length) do\n    case Enum.at(bucket, letter, 0) do\n      0 ->\n        0\n\n      _number ->\n        smaller_bucket = List.update_at(bucket, letter, & &1 - 1)\n\n        #TODO: W sumie moge przenie\u015b\u0107 rozmiar s\u0142owa do funkcji, \u017ceby nie liczy\u0107 tego miliard razy, ale whatever for know\n        l = word_length - 1\n        factorial = Enum.at(@factorials, l)\n        Enum.reduce(smaller_bucket, factorial, & div(&2, Enum.at(@factorials, &1)))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76407,"user_id":null,"body":"defmodule Kata do\n  @alphabet \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  @bucket List.duplicate(0, String.length(@alphabet))\n\n  @factorials Enum.reduce(1..24, [1], fn x,[y | _] = acc -> [x * y | acc]  end) |> Enum.reverse()\n\n\n  def to_numbers(word) do\n    word |> :binary.bin_to_list() |> Enum.map(& &1 - 65)\n  end\n\n  def create_bucket(word) do\n    Enum.reduce(word, @bucket, fn letter, bucket ->\n      List.update_at(bucket, letter, & &1 + 1)\n    end)\n  end\n\n  def list_position(word) do\n    word = to_numbers(word)\n    calculate(create_bucket(word), 0, word, 1, length(word))\n  end\n\n  def calculate(bucket, letter, [letter | shorter_word] = _word, sum, word_length) do\n    bucket = List.update_at(bucket, letter, & &1 - 1)\n    calculate(bucket, 0, shorter_word, sum, word_length - 1)\n  end\n\n  def calculate(_bucket, _letter, [] = _word, sum, _word_length) do\n    sum\n  end\n\n  def calculate(bucket, letter, word, sum, word_length) do\n    a = calcualte_for_letter(bucket, letter, word_length)\n\n    calculate(bucket, letter + 1, word, sum + a, word_length)\n  end\n\n  def calcualte_for_letter(bucket, letter, word_length) do\n    case Enum.at(bucket, letter, 0) do\n      0 ->\n        0\n\n      _number ->\n        smaller_bucket = List.update_at(bucket, letter, & &1 - 1)\n\n        #TODO: W sumie moge przenie\u015b\u0107 rozmiar s\u0142owa do funkcji, \u017ceby nie liczy\u0107 tego miliard razy, ale whatever for know\n        l = word_length - 1\n        factorial = Enum.at(@factorials, l)\n        Enum.reduce(smaller_bucket, factorial, & div(&2, Enum.at(@factorials, &1)))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76408,"user_id":53,"body":"defmodule Kata do\n\n  def list_position(word), do: suffix(word,String.length(word),1,1,%{},0)\n  \n  defp rank([],_,_,r,_), do: r\n  defp rank([{y,_}|rest],x,cx,r,s) when y>=x, do: rank(rest,x,cx,r,s)\n  defp rank([{_,cy}|rest],x,cx,r,s), do: rank(rest,x,cx,r+div(s*cy,cx),s)\n  \n  defp suffix(_,l,r,_,_,i) when i>=l, do: r\n  defp suffix(word,l,r,s,c,i) do\n    x = String.at(word,l-1-i)\n    cx = Map.get(c,x,0)+1\n    nc = Map.put(c,x,cx)\n    nr = rank(Map.to_list(nc),x,cx,r,s)\n    ns = div(s*(i+1),cx)\n    suffix(word,l,nr,ns,nc,i+1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53ea3ad17b5dfe1946000278":[{"id":76409,"user_id":null,"body":"use Bitwise\n\ndefmodule Kata do\n  def sierpinski(n), do: rows(n) |> Enum.join(\"\n\")\n  def rows(0), do: [\"L\"]\n\n  def rows(n) do\n    g = rows(n - 1)\n    s = (1 <<< n) - 1\n    g ++ for {r, i} <- Enum.with_index(g), do: r <> String.duplicate(\" \", s - i * 2) <> r\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76410,"user_id":470,"body":"defmodule Kata do\n\tdef sierpinski(n),do: forge(0,n,[\"L\"]) |> Enum.join(\"\n\")\n\t\n\tdefp forge(c,n,r) when c >= n,do: r\n\tdefp forge(c,n,r),do: forge(c+1,n,r++Enum.map(r,fn v -> String.pad_trailing(v,trunc(:math.pow(2,c+1))) <> v end))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76411,"user_id":null,"body":"defmodule Kata do\n  import Bitwise, only: [<<<: 2]\n  \n  defp helper(0), do: [\"L\"]\n  defp helper(n) do\n    a = helper(n-1)\n    x = 1 <<< n\n    ls = Enum.zip(a,a)\n      |> Enum.with_index\n      |> Enum.map(fn {{l,r},i} -> l <> String.duplicate(\" \",x-2*i-1) <> r end)\n    a ++ ls\n  end\n\n  def sierpinski(n), do: Enum.join helper(n), \"\n\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76412,"user_id":null,"body":"defmodule Kata do\n  def ifs(array, 0), do: \"L \"\n\n  def ifs(array, iterations) do\n    sub = ifs(array, iterations - 1) |> String.split(\"\n\")\n\n    Enum.flat_map(array, fn row ->\n      Enum.map(sub, fn line ->\n        blank = String.duplicate(\" \", String.length(line))\n        Enum.map_join(row, fn v -> if(v == 0, do: blank, else: line) end)\n      end)\n    end)\n    |> Enum.join(\"\n\")\n  end\n\n  def sierpinski(n) do\n    ifs([[1, 0], [1, 1]], n)\n    |> String.split(\"\n\")\n    |> Enum.map_join(\"\n\", &String.trim_trailing\/1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76413,"user_id":53,"body":"defmodule Kata do\n  def sierpinski(n), do: Enum.join(go(0, n, [\"L\"]), \"\n\")\n  defp go(i,n,xs) do\n    cond do\n      i>=n -> xs\n      true -> go(i+1, n, xs ++ Enum.map(xs, fn s -> String.pad_trailing(s, trunc(pow(2, i+1))) <> s end))\n    end\n  end\n  defp pow(base, 0), do: 1\n  defp pow(base, exp), do: base * pow(base, exp - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76414,"user_id":null,"body":"defmodule Kata do\n  def sierpinski(n) do\n    case n do\n      0 -> \"L\"\n      n -> [sierpinski(n-1), double(sierpinski(n-1))] |> Enum.join(\"\n\")\n    end\n  end\n  \n  def double(block) do\n    padding = block\n              |> String.split(\"\n\")\n              |> List.last\n              |> String.length\n    block\n    |> String.split(\"\n\")\n    |> Enum.map(&String.pad_trailing(&1, padding))\n    |> Enum.map(&(&1 <> \" \" <> &1))\n    |> Enum.map(&String.trim\/1)\n    |> Enum.join(\"\n\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76415,"user_id":null,"body":"defmodule Kata do\n  def sierpinski(n) do\n    side_by_side = fn s ->\n      lines = String.split(s, \"\n\")\n      width = String.length(List.last(lines))\n\n      lines \n      |> Enum.map(& String.pad_trailing(&1, width, \" \"))\n      |> Enum.zip(lines)\n      |> Enum.map_join(\"\n\", fn {x, y} -> \"#{x} #{y}\" end)\n    end\n\n    if n == 0 do\n      \"L\"\n    else \n      s = sierpinski(n - 1)\n      \"#{s}\n#{side_by_side.(s)}\"\n    end\n        \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76416,"user_id":250,"body":"defmodule Kata do\n    def sierpinski(n) when n == 0 do\n      \"L\"\n    end\n    \n    def sierpinski(n) do\n      p = sierpinski(n - 1)\n      \n      x = String.split p, \"\n\"\n      last = Enum.at x, length(x) - 1\n      v = Enum.map(x, fn e -> String.pad_trailing(e, String.length(last)) <> \" \" <> e end)\n      \n      p <> \"\n\" <> Enum.join(v, \"\n\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76417,"user_id":null,"body":"defmodule Kata do\n    def sierpinski(0), do: \"L\"\n    def sierpinski(n) do\n      previous = sierpinski(n - 1) \n      scheme = String.split(previous,\"\n\")\n      pad = List.last(scheme) |> String.length()\n    \n      [previous | Enum.map(scheme, &String.pad_trailing(&1, pad + 1) <> &1)] |> Enum.join(\"\n\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76418,"user_id":null,"body":"defmodule Kata do\n    def sierpinski(0), do: \"L\"\n    def sierpinski(n) do\n      previous = sierpinski(n-1) \n      scheme = String.split(previous,\"\n\")\n      pad = List.last(scheme) |> String.length()\n    \n      [previous | Enum.map(scheme, &String.pad_trailing(&1,pad) <> \" \" <> &1)] |> Enum.join(\"\n\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"53ee5429ba190077850011d4":[{"id":76419,"user_id":null,"body":"defmodule SimpleMath, do: def double_integer(x), do: x * 2","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76420,"user_id":null,"body":"defmodule SimpleMath do\n  def double_integer(x) do\n    x * 2\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76421,"user_id":null,"body":"defmodule SimpleMath, do: def double_integer(x), do: 2*x","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76422,"user_id":null,"body":"defmodule SimpleMath do\n  def double_integer(x), do: x * 2\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76423,"user_id":null,"body":"defmodule SimpleMath do\n  def double_integer(x) do\n    2 * x\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76424,"user_id":1249,"body":"defmodule SimpleMath do\n  use Bitwise\n  def double_integer(x) do\n    x <<< 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76425,"user_id":null,"body":"defmodule SimpleMath do\n  use Bitwise\n  def double_integer(x) do\n    x >>> -1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76426,"user_id":null,"body":"defmodule SimpleMath do\n  def double_integer(x) do\n    x + x\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76427,"user_id":null,"body":"defmodule SimpleMath do\n  @spec double_integer(integer) :: integer\n  def double_integer(x), do: x * 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76428,"user_id":null,"body":"defmodule SimpleMath do\n  def double_integer(0),do: 0\n  def double_integer(x) do\n    x * 2 \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54147087d5c2ebe4f1000805":[{"id":76429,"user_id":2192,"body":"defmodule Conditional do\n  def _if(nil, _, felse), do: felse.()\n  def _if(false, _, felse), do: felse.()\n  def _if(_, fthen, _), do: fthen.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76430,"user_id":527,"body":"defmodule Conditional do\n\n  @spec _if(as_boolean(any), (() -> any), (() -> any)) :: any\n  def _if(bool, fthen, felse) do\n    if bool, do: fthen.(), else: felse.()\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76431,"user_id":null,"body":"defmodule Conditional do\n  def _if(bool, _fthen, felse) when bool in [false, nil], do: felse.()\n  def _if(_bool, fthen, _felse), do: fthen.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76432,"user_id":null,"body":"defmodule Conditional do\n  # Using this exercise to practice:\n  #     pattern matching with guard clauses, labeling guards with defguard\n\n  defguardp is_truthy(x) when x not in [false, nil]\n\n  def _if(bool, fthen, _felse) when is_truthy(bool), do: fthen.()\n  def _if(_bool, _fthen, felse), do: felse.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76433,"user_id":null,"body":"defmodule Conditional do\n  def _if(falsy, _fthen, felse) when falsy == false or falsy == nil do\n    felse.()\n  end\n\n  def _if(_truthy, fthen, _felse) do\n    fthen.()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76434,"user_id":1789,"body":"defmodule Conditional do\n  def _if(bool, fthen, felse) do\n    cond do\n      bool && true -> fthen\n      true -> felse\n    end |> apply([])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76435,"user_id":null,"body":"defmodule Conditional do\n  def _if(falsey, _fthen, felse) when falsey in [nil, false], do: felse.()\n  def _if(_thruthy, fthen, _felse), do: fthen.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76436,"user_id":null,"body":"defmodule Conditional do\n  @spec _if(boolean, function, function) :: String.t\n  def _if(bool, fthen, felse), do: if bool, do: fthen.(), else: felse.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76437,"user_id":null,"body":"defmodule Conditional do\n  def _if(false, _fthen, felse), do: felse.()\n  def _if(true, fthen, _felse), do: fthen.()\n  def _if(nil, fthen, felse), do: felse.()\n  def _if(bool, fthen, felse), do: fthen.()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76438,"user_id":null,"body":"defmodule Conditional do\n  def _if(bool, fthen, felse), do: do_if(bool, fthen, felse)\n  \n  defp do_if(val, callback_fn_1, callback_fn_2) do\n    case !!val do\n    true -> callback_fn_1.()\n    _ -> callback_fn_2.()\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"541c8630095125aba6000c00":[{"id":76439,"user_id":null,"body":"defmodule Kata do\n    def digital_root(n) when n < 10, do: n\n    def digital_root(n), do: Integer.digits(n) |> Enum.sum |> digital_root\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76440,"user_id":527,"body":"defmodule Kata do\n  def digital_root(n), do: rem(n - 1, 9) + 1\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76441,"user_id":null,"body":"defmodule Kata do\ndef digital_root(n) when n < 10, do: n\n    def digital_root(n) do\n    n |> Integer.digits() |> Enum.reduce(0, &Kernel.+\/2) |> digital_root()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76442,"user_id":null,"body":"defmodule Kata do\n  def digital_root(n) do\n    to_charlist(n)\n      |> Enum.map(fn i -> i - 48 end)\n      |> Enum.sum\n      |> recurse\n  end\n  \n  defp recurse(n) when n > 9 do\n    digital_root n\n  end\n  defp recurse(n), do: n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76443,"user_id":null,"body":"# write code below\n\ndefmodule Kata do\n  def digital_root(n) when n < 10, do: n\n\n  def digital_root(n) do\n    list = Integer.digits(n)\n    digital_root(Enum.sum(list))\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76444,"user_id":null,"body":"defmodule Kata do\n    def digital_root(n) do\n      _add(n)\n    end\n    \n    defp _add(n) when n < 10, do: n\n    defp _add(n), do: _add(rem(n, 10) + _add(div(n, 10)))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76445,"user_id":null,"body":"defmodule Kata do\n    def digital_root(n) do\n       str = to_string(n)\n       if String.length(str) == 1 do\n         String.to_integer(str)\n        else\n         Regex.split(~r{}, str) \n           |> Enum.filter(&(&1 != \"\")) \n           |> Enum.reduce(0, fn(elem, acc) -> String.to_integer(elem) + acc end)\n           |> digital_root\n       end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76446,"user_id":null,"body":"defmodule Kata do\n  def digital_root(n) when is_integer(n) do\n    n\n    |> Integer.digits()\n    |> Enum.sum()\n    |> maybe_recurse()\n  end\n\n  defp maybe_recurse(n) when n > 9, do: digital_root(n)\n  defp maybe_recurse(n), do: n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76447,"user_id":null,"body":"defmodule Kata do\n\n    def digital_root(n) when div(n,10)!=0 do \n       n |> Integer.digits() |> Enum.sum() |> digital_root()\n    end \n    def digital_root(n)do n end \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76448,"user_id":null,"body":"defmodule Kata do\n    def digital_root(n) do\n      case n |> Integer.to_string |> String.length do\n        1 -> \n          n\n        _ ->\n          digital_root(n |> Integer.digits |> Enum.sum)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5426d7a2c2c7784365000783":[{"id":76449,"user_id":527,"body":"defmodule Kata do\n  def balanced_parens(n) do\n    cond do\n      n < 0 -> []\n      n == 0 -> [\"\"]\n      n > 0 ->\n        for cn <- 0..n,\n            s0 <- balanced_parens(cn - 1),\n            s1 <- balanced_parens(n - cn), do:\n          \"(\" <> s0 <> \")\" <> s1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76450,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(n) do\n    {:ok, pid} = Agent.start_link(fn -> [] end)\n    balanced_bracket(pid, \"\", n, 0, 0)\n    Agent.get(pid, fn x -> x end)\n  end\n\n  def balanced_bracket(pid, result, size, open, close) do\n    if close == size do\n      Agent.update(pid, &List.insert_at(&1, 0, result))\n    end\n\n    if open < size do\n      balanced_bracket(pid, result <> \"(\", size, open + 1, close)\n    end\n\n    if open > close do\n      balanced_bracket(pid, result <> \")\", size, open, close + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76451,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(n), do: step(n, n, \"\")\n\n  defp step(0, 0, acc), do: [acc]\n  defp step(0, r, acc), do: step(0, r-1, acc <> \")\") \n  defp step(l, r, acc) when l == r, do: step(l-1, r, acc <> \"(\")\n  defp step(l, r, acc), do: step(l, r-1, acc <> \")\") ++ step(l-1, r, acc <> \"(\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76452,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(n) do\n    solve(n, n, \"\")\n  end\n  \n  def solve(0, 0, string), do:\n    [\"\"]\n  def solve(0, 1, string), do:\n    [string <> \")\"]\n  def solve(0, right, string), do:\n    solve(0, right - 1, string <> \")\")\n  def solve(left, right, string) when left == right, do:\n    solve(left - 1, right, string <> \"(\")\n  def solve(left, right, string), do:\n    solve(left - 1, right, string <> \"(\") ++ solve(left, right - 1, string <> \")\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76453,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(n) do\n    parens(\"\", n, n, [])\n  end\n\n  defp parens(str, 1, 1, list), do: [str <> \"()\" | list]\n  defp parens(str, 0, n, list), do: [str <> String.duplicate(\")\", n) | list]\n  defp parens(str, n, n, list), do: parens(str <> \"(\", n - 1, n, list)\n\n  defp parens(str, m, n, list) do\n    parens(str <> \"(\", m - 1, n, parens(str <> \")\", m, n - 1, list))\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76454,"user_id":470,"body":"defmodule Kata do\n\tdef balanced_parens(0),do: [\"\"]\n\tdef balanced_parens(n),do: forge(\"(\",n-1,n)\n\t\n\tdefp forge(s,n1,n2) when n1 > 0 or n2 > n1 do\n\t\tv1 = if n1 > 0,do: forge(s<>\"(\",n1-1,n2),else: []\n\t\tv2 = if n2 > n1,do: forge(s<>\")\",n1,n2-1),else: []\n\t\tv1 ++ v2\n\tend\n\t\n\tdefp forge(s,0,0),do: [s]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76455,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(0), do: [\"\"]\n  def balanced_parens(1), do: [\"()\"]\n  def balanced_parens(n) do\n    balanced_parens(n - 1) |> Enum.flat_map(fn bp -> [\"()\" <> bp, bp <> \"()\"] ++ addpar(bp) end) |> Enum.uniq()\n  end\n  \n  defp addpar(par) do\n    addpar(String.split_at(par, 1), [])\n  end\n  \n  defp addpar({h, \"\"}, res), do: res\n  \n  defp addpar({h, t}, res) do\n    {b, t} = String.split_at(t, 1)\n    \n    res = if b == \")\" do\n      res ++ [h <> \"()\" <> b <> t]\n    else\n      res\n    end\n    \n    addpar({h <> b, t}, res)\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76456,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(0), do: [\"\"]\n\n  def balanced_parens(n) do\n    Enum.reduce(1..(n * 2), [{0, 0, \"\"}], fn _, acc ->\n      Enum.map(acc, &next(n, &1))\n      |> Enum.reduce(&++\/2)\n    end)\n    |> Enum.map(&elem(&1, 2))\n  end\n\n  def next(depth, {depth, len, parens}) do\n    [{depth - 1, len + 1, parens <> \")\"}]\n  end\n\n  def next(_, {0, len, parens}) do\n    [{1, len + 1, parens <> \"(\"}]\n  end\n\n  def next(max_depth, {depth, len, parens}) do\n    if 2 * max_depth - len != depth do\n      [\n        {depth + 1, len + 1, parens <> \"(\"},\n        {depth - 1, len + 1, parens <> \")\"}\n      ]\n    else\n      [{depth - 1, len + 1, parens <> \")\"}]\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76457,"user_id":null,"body":"defmodule Kata do\n    def balanced_parens(n), do: build_parens(n, 0, 0, \"\", [])\n    \n    defp build_parens(n, open, closed, current, result) when open == n and closed == n, \n      do: result ++ [current]\n    \n    defp build_parens(n, open, closed, current, result) do\n      left = if open < n, \n        do: build_parens(n, open + 1, closed, current <> \"(\", result),\n        else: []\n        \n      right = if open > closed, \n        do: build_parens(n, open, closed + 1, current <> \")\", result),\n        else: []\n        \n      left ++ right\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76458,"user_id":null,"body":"defmodule Kata do\n  def balanced_parens(n) do\n    parens(\"\", n, n)\n  end\n\n  defp parens(str, 0, 0), do: [str <> \"\"]\n  defp parens(str, 1, 1), do: [str <> \"()\"]\n  defp parens(str, 0, n), do: [str <> String.duplicate(\")\", n)]\n\n  defp parens(str, n, n) do\n    parens(str <> \"(\", n - 1, n)\n  end\n\n  defp parens(str, m, n) when m <= n do\n    parens(str <> \"(\", m - 1, n) ++ parens(str <> \")\", m, n - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"542c0f198e077084c0000c2e":[{"id":76459,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n        divisors(n, 1)\n    end\n    \n    defp divisors(n, n) do\n      1\n    end\n    \n    defp divisors(n, divisor) do\n      divisors(n, divisor, rem(n, divisor) == 0)\n    end\n    \n    defp divisors(n, divisor, true) do\n      1 + divisors(n, divisor + 1)\n    end\n    \n    defp divisors(n, divisor, _is_divisor) do\n      divisors(n, divisor + 1)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76460,"user_id":null,"body":"defmodule Kata do\n    def divisors(n), do: Enum.count(1..n, & rem(n,&1) == 0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76461,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n        Enum.reduce(1..n, 0, fn number, acc -> if rem(n, number) == 0 do acc + 1 else acc end end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76462,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n        Enum.reduce(1..n, 0, fn number, acc -> if rem(n, number) == 0 do acc = acc + 1 else acc end end)\n    end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76463,"user_id":null,"body":"defmodule Kata do\n  @spec divisors(pos_integer) :: pos_integer\n  def divisors(n) do\n    Enum.reduce(1..n, 0, fn \n      x, acc when rem(n, x) == 0 -> acc + 1\n      _x, acc -> acc\n    end)  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76464,"user_id":null,"body":"defmodule Kata do\n  def divisors(n) do \n    1..n\n    |> Enum.to_list\n    |> Enum.filter(fn x -> rem(n, x) == 0 end)\n    |> Enum.count  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76465,"user_id":null,"body":"defmodule Kata do\n  def divisors2(n, i, counter) when i == div(n, 2)+1 do\n    counter\n  end\n  def divisors2(n, i, counter) do\n    with value = rem(n, i) do\n      if value == 0 do\n        divisors2(n, i+1, counter+1)\n      else\n        divisors2(n, i+1, counter)\n      end\n    end\n  end\n  \n  def divisors(1), do: 1\n  def divisors(n), do: divisors2(n, 1, 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76466,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n        Enum.to_list(1..n)\n        |> Enum.filter( &( rem(n, &1) == 0) ) \n        |> length\n    end\nend ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76467,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n        Enum.to_list(1..div(n,2)) \n        |> Enum.filter( &( &1 != 0 and &1 != n ) )\n        |> Enum.filter( &( rem(n, &1) == 0) ) \n        |> Enum.concat([n])\n        |> length\n    end\nend ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76468,"user_id":null,"body":"defmodule Kata do\n    def divisors(n) do\n      list = for x <- 1..n, rem(n, x) == 0,  do: x\n      list |> Enum.count()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"542ebbdb494db239f8000046":[{"id":76469,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item([], _item), do: nil\n  def next_item([item, next | _rest], item), do: next\n  def next_item([_any | rest], item), do: next_item(rest, item)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76470,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) when is_list(list) do\n    list |> Enum.drop_while(&(item != &1)) |> Enum.at(1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76471,"user_id":676,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    case Enum.find_index(list, fn(x) -> x == item end) do\n      i when is_integer i -> Enum.at(list, i + 1)\n      _                   -> nil\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76472,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    list \n    |> Stream.drop_while(&(&1 != item))\n    |> Enum.at(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76473,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    list\n    |> Enum.drop_while(&(&1 != item))\n    |> item_after_this_one_or_nil()\n  end\n  \n  def item_after_this_one_or_nil(list), do: Enum.at(list, 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76474,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    do_next_item(list, item)\n  end\n  \n  defp do_next_item([], _) do\n    nil\n  end\n    \n  defp do_next_item([item, next | _], item) do\n    next\n  end\n  \n  defp do_next_item([_ | tail], item) do\n    do_next_item(tail, item)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76475,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(l, item), do: Enum.drop_while(l, &(&1 != item)) |> Enum.at(1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76476,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    Enum.reduce_while([:plus_one | list], list, fn\n      _x, [^item, item2 | _tail] -> {:halt, item2}\n      _x, [_head | tail] -> {:cont, tail}\n      _x, [] -> {:halt, nil}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76477,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    (idx = Enum.find_index(list, fn(x) -> x == item end)) && Enum.at(list, idx + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76478,"user_id":null,"body":"defmodule NextBigThing do\n  def next_item(list, item) do\n    if ((a = Enum.find_index(list, fn(x) -> item == x end)) == nil) do\n      nil\n    else\n      Enum.at(list, a + 1, nil)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"542f0c36d002f8cd8a0005e5":[{"id":76479,"user_id":null,"body":"defmodule WaitingRoom do\n\n  def last_chair(n) do\n    if n <= 2, do: n, else: n - 1\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76480,"user_id":168,"body":"defmodule WaitingRoom do\n\n  def last_chair(n) do\n    n - 1\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76481,"user_id":527,"body":"defmodule WaitingRoom, do: def last_chair(n), do: n - 1","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76482,"user_id":527,"body":"defmodule WaitingRoom do\n  @spec last_chair(pos_integer()) :: pos_integer()\n  def last_chair(n), do: n - 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76483,"user_id":53,"body":"defmodule WaitingRoom do\n  def last_chair(n), do: n - 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"544675c6f971f7399a000e79":[{"id":76484,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str), do: String.to_integer(str)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76485,"user_id":1249,"body":"defmodule Numerify do\n  defdelegate string_to_number(s), to: String, as: :to_integer\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76486,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    String.to_integer str\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76487,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    str |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76488,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) when is_binary(str) do\n    String.to_integer(str)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76489,"user_id":null,"body":"defmodule Numerify do\n  @number_map %{\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n    \"9\" => 9\n  }\n  def string_to_number(str) do\n    str\n      |> String.graphemes\n      |> Enum.reverse\n      |> Stream.with_index\n      |> Enum.reduce(0, fn {char, index}, acc ->\n        if (char == \"-\") do\n          acc * -1\n        else\n          number = @number_map |> Map.get(char)\n          number = number * :math.pow(10, index)\n          acc + number\n        end\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76490,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    case Integer.parse(str) do\n      {int, _} -> int\n      :error   -> nil\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76491,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    {num, _} = Integer.parse(str)\n    num\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76492,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    magic = & &2 * 10 + &1\n    str\n    |> String.to_charlist\n    |> Enum.map(& &1 - 48)\n    |> case do\n        [head | tail] when head == -3 -> 0 - Enum.reduce(tail, 0, magic)\n        charlist                      -> Enum.reduce(charlist, 0, magic)\n       end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76493,"user_id":null,"body":"defmodule Numerify do\n  def string_to_number(str) do\n    str\n    |> String.to_charlist\n    |> Enum.map(& &1 - 48)\n    |> case do\n        [head | tail] when head == -3 -> tail_recursive(tail) * -1\n        charlist                      -> tail_recursive(charlist)\n       end\n  end\n  defp tail_recursive([], acc), do: acc\n  defp tail_recursive([head | tail], acc \\\\ 0), do: tail_recursive(tail, 10 * acc + head)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"544aed4c4a30184e960010f4":[{"id":76494,"user_id":3350,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    divs = for n <- 2..integer-1, rem(integer, n) == 0, do: n\n    case divs do\n      [] -> \"#{integer} is prime\"\n      _ -> divs\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76495,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    2..(integer - 1)\n    |> Enum.filter(&(rem(integer, &1) == 0))\n    |> render_divisors(integer)\n  end\n  \n  defp render_divisors([], integer), do: \"#{integer} is prime\"\n  defp render_divisors(divisors, _), do: divisors\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76496,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(i), do: (for x <- 2..div(i,2)+1, rem(i,x) == 0, do: x) |> prime?(i)\n  \n  defp prime?([],i), do: \"#{i} is prime\"\n  defp prime?(ls,_), do: ls\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76497,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(1), do: []\n  \n  def divisors(integer) do\n    # Your code here\n    2..integer-1\n    |> Enum.filter(& rem(integer, &1) == 0)\n    |> integer_divisors(integer)\n  end\n  \n  def integer_divisors([], integer), do: \"#{integer} is prime\"\n  def integer_divisors(divisor, _integer), do: divisor\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76498,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    range = 2..(integer - 1)\n    divisors = Enum.filter(range, &(rem(integer, &1) == 0))\n\n    case divisors do\n      [] -> \"#{integer} is prime\"\n      _ -> divisors\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76499,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    # Your code here\n    2..integer-1\n    |> Enum.into([])\n    |> get_divisors(integer)\n  end\n  \n  defp get_divisors([h | t], integer, divisors_list \\\\ []) do\n    new_divisors = if(rem(integer, h) == 0, do:  divisors_list ++ [h], else: divisors_list)\n    get_divisors(t, integer, new_divisors)\n  end\n  defp get_divisors([], integer, []) do\n    \"#{integer} is prime\"\n  end\n  defp get_divisors([], _integer, divisors_list), do: divisors_list\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76500,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    divisors = (integer - 1)..2\n    |> Enum.filter(fn n -> Integer.mod(integer, n) == 0 end)\n    |> Enum.sort()\n\n    if(Enum.count(divisors) == 0, do: \"#{integer} is prime\", else: divisors)\n  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76501,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) when is_integer(integer) and integer in 0..1, do: []\n  def divisors(integer) when is_integer(integer) and integer in 2..3 do\n    format([], integer)\n  end\n  def divisors(integer) when is_integer(integer) and integer > 3 do\n    2..div(integer, 2)\n    |> Enum.filter(&(rem(integer, &1) == 0))\n    |> format(integer)\n  end\n  \n  def format([], number), do: \"#{number} is prime\"\n  def format(list, _number), do: list\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76502,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    # Your code here\n    divisors(integer, integer - 1, [])\n  end\n\n  def divisors(integer, 1, []), do: \"#{integer} is prime\"\n\n  def divisors(_, 1, arr), do: arr\n\n  def divisors(integer, cur, arr) when rem(integer, cur) == 0 do\n    divisors(integer, cur - 1, [cur | arr])\n  end\n\n  def divisors(integer, cur, arr) do\n    divisors(integer, cur - 1, arr)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76503,"user_id":null,"body":"defmodule FindTheDivisors do\n  def divisors(integer) do\n    list = 2..(integer-1) |> Enum.into([])\n    \n    case do_divisors(integer, list, []) do\n    \n    [] -> \"#{integer} is prime\"\n    \n    result -> result\n    \n    end\n  end\n  \n  defp do_divisors(int, [], acc), do: acc\n  \n  defp do_divisors(int, [hd|tl], acc) when rem(int, hd) == 0 do\n    do_divisors(int, tl, acc ++ [hd])\n  end\n  \n  defp do_divisors(int, [_hd|tl], acc) do\n    do_divisors(int, tl, acc)\n  end\nend\n\n\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5467e4d82edf8bbf40000155":[{"id":76504,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) do\n        Integer.digits(n) |> Enum.sort(&(&1 >= &2)) |> Integer.undigits\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76505,"user_id":527,"body":"defmodule Kata do\n  def descending_order(n) do\n    n |> Integer.digits |> Enum.sort(&>=\/2) |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76506,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) do\n        # TODO: working solution\n       {reordered_n, _} = n \n       |> Integer.digits() \n       |> Enum.sort(&(&1 >= &2)) \n       |> Enum.join(\"\") \n       |> Integer.parse()\n       \n       reordered_n\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76507,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) do\n      n |> Integer.to_charlist |> Enum.sort(:desc) |> String.Chars.to_string |> String.to_integer\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76508,"user_id":null,"body":"defmodule Kata do\n  @moduledoc false\n\n  def descending_order(n) do\n    n\n    |> Integer.digits()\n    |> Enum.sort()\n    |> Enum.reverse()\n    |> Integer.undigits()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76509,"user_id":null,"body":"defmodule Kata do\n  def descending_order(n) do\n    {max, _} =\n      n\n      |> to_string()\n      |> String.graphemes()\n      |> Enum.sort(:desc)\n      |> to_string()\n      |> Integer.parse()\n\n    max\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76510,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) do\n      String.codepoints(\"#{n}\")\n      |> Enum.sort(:desc)\n      |> Enum.join()\n      |> String.to_integer()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76511,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) when n > 0 do\n      n |> to_string() |> String.codepoints() |> Enum.sort(& &1 > &2) |> to_string() |> String.to_integer()\n    \n      \n   \n       \n    end\n    def descending_order(0), do: 0\nend\n\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76512,"user_id":null,"body":"defmodule Kata do\n    def descending_order(n) do\n      Integer.to_string(n)\n      |> String.split(\"\", [trim: true])\n      |> Enum.map(&String.to_integer(&1))\n      |> Enum.sort()\n      |> Enum.reverse\n      |> Enum.join()\n      |> String.to_integer()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76513,"user_id":null,"body":"defmodule Kata do\n  def descending_order(n) do\n    Integer.to_string(n)\n    |> String.graphemes()\n    |> Enum.map(&String.to_integer(&1))\n    |> Enum.sort(&(&1 > &2))\n    |> Enum.join()\n    |> String.to_integer()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"546d15cebed2e10334000ed9":[{"id":76514,"user_id":470,"body":"defmodule Kata do\n\tdef solve_runes(s) do\n\t\tns = Regex.replace(~r\/=\/,s,\"==\") |> String.replace(\"--\",\"+\")\n\t\tq = if Regex.match?(~r\/[^?\\d]\\?[?\\d]\/,\"!#{ns}\"),do: 1,else: 0\n\t\tix(Enum.to_list(q..9),ns)\n\tend\n\t\n\tdefp ix([],_),do: -1\n\tdefp ix([n|r],s),do: if !String.contains?(s,<<n+48>>) && ecaz?(n,s),do: n,else: ix(r,s)\n\t\n\tdefp ecaz?(c,s),do: s |> String.replace(\"?\",<<c+48>>) |> Code.eval_string() |> elem(0)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76515,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(runes) do\n    Enum.filter(0..9, fn i ->\n      with true <- !String.contains?(runes, \"#{i}\"),\n           runes2 = String.replace(runes, \"?\", \"#{i}\"),\n           [_, num1, op, num2, num3] <- Regex.run(~r\/(-?\\d+)([-+*])(-?\\d+)=(-?\\d+)\/, runes2),\n           true <- valid_num(num1) && valid_num(num2) && valid_num(num3) do\n        n1 = String.to_integer(num1)\n        n2 = String.to_integer(num2)\n        n3 = String.to_integer(num3)\n\n        case op do\n          \"+\" -> n1 + n2 == n3\n          \"-\" -> n1 - n2 == n3\n          \"*\" -> n1 * n2 == n3\n        end\n      end\n    end)\n    |> List.first() || -1\n  end\n\n  def valid_num(s), do: s in [\"0\", \"-0\"] || !String.starts_with?(s, [\"0\", \"-0\"])\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76516,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(runes, digit \\\\ 0)\n  def solve_runes(_runes, 10), do: -1\n  def solve_runes(runes, digit) do\n    digit_str = Integer.to_string(digit)\n    candidate = runes |> String.replace(\"?\", digit_str) |> format_runes\n    {result, _binding} = Code.eval_string(candidate)\n\n    cond do\n      String.contains?(runes, digit_str) -> solve_runes(runes, digit + 1)\n      leading_zeros?(candidate) -> solve_runes(runes, digit + 1)\n      result -> digit\n      true -> solve_runes(runes, digit + 1)\n    end\n  end\n\n  def format_runes(runes) do\n    runes |> String.replace(\"-\", \" -\") |> String.replace(\"=\", \"==\")\n  end\n\n  def leading_zeros?(expr) do\n    Regex.match?(~r\"(^|[+*-\/=])0\\d\", expr)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76517,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(runes) do\n    parsed = parse(runes)\n\n    op = case List.wrap(parsed.op) do\n      '+' -> &Kernel.+\/2\n      '-' -> &Kernel.-\/2\n      '*' -> &Kernel.*\/2\n    end\n\n    valid_digits = case parsed.leading_zeros do\n      :true  -> parsed.known_digits -- [0]\n      :false -> parsed.known_digits\n    end\n\n    for n <- valid_digits do\n      [a, b, c] = [parsed.a, parsed.b, parsed.c]\n        |> Enum.map(&Enum.map(&1, fn\n                                ?? -> n+48\n                                 x -> x end) )\n        |> Enum.map(&List.to_string\/1)\n        |> Enum.map(&String.to_integer\/1)\n      \n      if op.(a, b) == c, do: n, else: nil\n    end\n    |> Enum.filter(& &1)\n#   |> List.first(-1) # arity 2 not avaible in Elixir v1.11\n    |> List.first\n    |> (& if &1 == nil, do: -1, else: &1).()\n  end\n\n\n\n  defp parse(string) do\n    string\n    |> String.to_charlist()\n    |> Enum.chunk_by(& &1 in '+-*=')\n    |> case do\n      ['-', a | tail] -> ['-' ++ a | tail]\n      elements        -> elements\n    end\n    |> case do\n      [a, [op | '-'], b | tail] -> [a, op, '-' ++ b | tail]\n      elements                  -> elements\n    end\n    |> case do\n      [a, op, b, '=-', c] -> %{a: a, op: op, b: b, c: '-' ++ c}\n      [a, op, b, '=' , c] -> %{a: a, op: op, b: b, c: c}\n    end\n    |> (fn map -> Map.put(map, :known_digits, \n                            Map.values(map)\n                            |> Enum.reduce('0123456789', & &2 -- List.wrap(&1))\n                            |> Enum.map(& &1 - 48) \n                          ) end).()\n    |> Enum.reduce( %{leading_zeros: :false}, fn x, acc ->\n         if leading_zeros?(elem(x, 1)) do\n           Map.merge( acc, Map.new([x, {:leading_zeros, :true}]) )\n         else\n           Map.merge( acc, Map.new([x]) )\n         end\n      end)\n  end\n\n  defp leading_zeros?('?'), do: false\n  defp leading_zeros?('-?'), do: false\n  defp leading_zeros?([?? | _tail]), do: true\n  defp leading_zeros?([?-, ?? | _tail]), do: true\n  defp leading_zeros?(_charlist), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76518,"user_id":250,"body":"defmodule Kata do\n    def solve_runes(runes) do\n      s = if Regex.run(~r\/(^\\?\\?|[-+*]\\?[^=]|=\\?[\\?\\d])\/, runes) != nil do 1 else 0 end\n      d = Regex.replace(~r\/[^\\d]\/, runes, \"\")\n          |> String.graphemes\n          |> Enum.map(&(String.to_integer(&1)))\n      \n      r = s..9\n        |> Enum.reject(fn x -> Enum.member?(d, x) end)\n        |> Enum.find(fn x -> \n          n = Integer.to_string(rem(x, 10))\n          String.replace(runes, \"?\", n)\n          |> evaluate\n        end)\n        \n      if r == nil do -1 else r end\n    end\n    \n    def evaluate(thing) do\n      m = Regex.run(~r\/^(\\-?[0-9]*)([-+\\*])([-0-9]*)=([-0-9]*)$\/, thing)\n      a = String.to_integer(Enum.at(m, 1))\n      b = String.to_integer(Enum.at(m, 3))\n      o = Enum.at(m, 2)\n      r = String.to_integer(Enum.at(m, 4))\n      \n      case o do\n        \"*\" -> a*b == r\n        \"+\" -> a+b == r\n        \"-\" -> a-b == r\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76519,"user_id":null,"body":"defmodule RuneMath do\n\ndefp parse(string) do\n  {a,_} = Integer.parse(string)\na\nend\n\ndef radd(a,b), do: parse(a) + parse(b)\n\ndef rsub(a,b), do: parse(a) - parse(b)\n\ndef rmul(a,b), do: parse(a) * parse(b)\n\ndef left(rune_list), do: rune_list |> List.first |> Enum.at(1)\ndef right(rune_list), do: rune_list |> List.first |> Enum.at(4)\ndef res(rune_list), do: rune_list |> List.first |> Enum.at(6)\ndef op(rune_list), do: rune_list |> List.first |> Enum.at(3)\ndef result(rune_list), do: rune_list |> res |> parse\n\ndef addition(rune_list) do\n  radd(left(rune_list),right(rune_list))\nend\n\ndef multiplication(rune_list) do\n  rmul(left(rune_list),right(rune_list))\nend\n\ndef subtract(rune_list) do\n  rsub(left(rune_list),right(rune_list))\nend\n\n\nend\n\n\n\ndefmodule Kata do\n    def split_runes(nil), do: nil\n    def split_runes(runes) do\n    {r,number} = runes\n    rr=Regex.scan(~r\/((-?)[0-9?]+)(-|\\+|\\*)((-?)[0-9?]+)=((-?)[0-9?]+)\/,r)\n    |> IO.inspect\n    {rr,number}\n    end\n    def replace_runes(runes,number) do\n       case String.contains?(runes,Integer.to_string(number)) do\n       true -> nil \n       false -> String.replace(runes,\"?\",Integer.to_string(number)) |> hack(number)\n       end\n    end\n    \n    defp filter_helper({l,r,res},rune_list) do\n    String.length(l) != (RuneMath.left(rune_list) |> String.length ) or String.length(r) != ( RuneMath.right(rune_list) |> String.length ) or String.length(res) !=( RuneMath.res(rune_list) |> String.length )\n    end\n    \n    def trim_helper(string ) do\n    if String.length(string) > 1 do\n    if String.first(string) == \"-\" do\n    s=  String.trim_leading(string,\"-\") |>    String.trim_leading(\"0\")\n    \n    \"-#{s}\"\n    else\n     String.trim_leading(string,\"0\")\n    end\n    \n    else\n    string\n    end\n    end\n    def filter_runes(nil), do: nil\n    def filter_runes ({rune_list,number}) do\n    \n    \n    \n    #Filter out double zeroes or leading zeroes\n    l = RuneMath.left(rune_list) |> trim_helper\n    r = RuneMath.right(rune_list) |> trim_helper\n    res = RuneMath.res(rune_list) |> trim_helper\n    \n    case filter_helper({l,r,res},rune_list) do\n    \n    true  -> nil\n    false -> {rune_list,number}\n    end\n    end\n\n    def solve_runes(runes) do\n        # Your code here\n        \n        IO.inspect(runes)\n       Stream.iterate(0,fn x -> x + 1 end )\n        |>Stream.take(10)\n        |>Enum.map(\n        fn x -> replace_runes(runes,x)|> split_runes() |> filter_runes() |> test_runes()|> IO.inspect\n        end)\n        |> Enum.filter(fn x -> x != nil end)\n        |> Enum.find(fn {b,number} -> b ==true end)\n        |> case do\n        {false,_} -> -1 \n        {true,n} -> n\n        _ -> -1\n        end\n        |> IO.inspect\n        \n    end\n    def test_runes(nil), do: nil\n    def test_runes (rune_tuple) do\n    {rune_list,number} = rune_tuple\n      case RuneMath.op(rune_list) do\n      \n      \"*\" -> ((RuneMath.multiplication(rune_list) == RuneMath.result(rune_list)) |> hack(number) )\n      \"+\" -> ((RuneMath.addition(rune_list) == RuneMath.result(rune_list))|> hack(number) )\n      \"-\" -> ((RuneMath.subtract(rune_list) == RuneMath.result(rune_list))|> hack(number) )\n      _ -> nil\n    end\n    end\n    \n    defp hack(b,number) do\n    {b,number}\n    end \n    \n    \n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76520,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(runes) do\n    split_runes = String.split(runes, ~r{(\\+|(?<=.)(?<![\\*\\-\\+=])-|\\*|=)}, include_captures: true)\n    available_digits = get_available_digits(runes, split_runes)\n    \n    Enum.find(available_digits, \"-1\", &digit_fits?(&1, split_runes))\n    |> then(&String.to_integer\/1)\n  end\n  \n  defp get_available_digits(runes, split_runes) do\n    starts_with_? = Enum.any?(split_runes, &starts_with_?\/1)\n    chars = if starts_with_?, do: \"123456789\", else: \"0123456789\"\n    \n    String.graphemes(chars)\n    |> Enum.reject(&String.contains?(runes, &1))\n  end\n  \n  defp starts_with_?(\"?\"), do: false\n  defp starts_with_?(\"-?\"), do: false\n  defp starts_with_?(\"?\" <> rest), do: true\n  defp starts_with_?(\"-?\" <> rest), do: true\n  defp starts_with_?(_), do: false\n  \n  defp digit_fits?(digit, [left, operator, right, \"=\", result]) do\n    left   = String.replace(left,   \"?\", digit) |> String.to_integer()\n    right  = String.replace(right,  \"?\", digit) |> String.to_integer()\n    result = String.replace(result, \"?\", digit) |> String.to_integer()\n    \n    do_math(left, operator, right, result)\n  end\n  \n  defp do_math(left, \"*\", right, result), do:\n    left * right == result\n  defp do_math(left, \"+\", right, result), do:\n    left + right == result\n  defp do_math(left, \"-\", right, result), do:\n    left - right == result\n    \n  defp then(x, func), do: func.(x)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76521,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(runes) do\n    Enum.find(\n      find_domain(runes),\n      -1,\n      fn x ->\n        {result, _} = Code.eval_string(transform_runes(runes), [x: x])\n        result\n      end\n    )\n  end\n  \n  # Transforms the given rune into a valid elixir expression which can be evaled\n  # \"1+1=?\"     -> \"1 + 1 == x\"\n  # \"19--45=5?\" -> \"19 - -45 == (x*1 + 5*10)\"\n  def transform_runes(runes) do\n    runes\n    |> split_entities\n    |> Enum.map(&transform_rune\/1)\n    |> Enum.join(\" \")\n  end\n  \n  # Splits the runes into a list of \"entities\"\n  # Has the neat side effect of removing unexpected values from the string \n  # \"1+1=?\"     -> [\"1\", \"+\", \"1\", \"=\", \"?\"]\n  # \"19--45=5?\" -> [\"19\", \"-\", \"-45\", \"=\", \"5?\"]\n  def split_entities(rune), do: Regex.scan(~r\/(?:-?[\\d?]+|[+*=-])\/, rune)\n  \n  # Finds the valid domain for the given rune\n  # \"1+1=?\"     -> [2,3,4,5,6,7,8,9]\n  # \"19--45=5?\" -> [0,2,3,6,7,8]\n  def find_domain(rune) do\n    existing_digits = \n      Regex.scan(~r\/\\d\/, rune) \n      |> Enum.map(fn [n] -> String.to_integer(n) end)\n      \n    remove_zero = if remove_zero?(rune), do: [0], else: []\n      \n    Enum.to_list(0..9) -- (existing_digits ++ remove_zero)\n  end\n  \n  defp transform_rune([\"=\"]), do: \"==\"\n  \n  defp transform_rune([rune]) when rune in ~W[- + *], do: rune\n  \n  defp transform_rune([<<\"-\", rune::binary>>]), do: \"-\" <> transform_rune([rune])\n  \n  defp transform_rune([rune]) do\n    if String.contains?(rune, \"?\"), \n      do:   \"(#{transform_digits(rune)})\", \n      else: rune\n  end\n  \n  defp transform_digits(string) do\n    string\n    |> String.reverse\n    |> String.graphemes\n    |> Enum.with_index(1)\n    |> Enum.map(fn \n      {\"?\", i} ->  \"x*#{String.pad_trailing(\"1\", i, \"0\")}\" \n      {n, i}   ->  \"#{n}*#{String.pad_trailing(\"1\", i, \"0\")}\" \n    end)\n    |> Enum.join(\" + \")\n  end\n  \n  defp remove_zero?(rune) do\n    Enum.any?(split_entities(rune), fn [en] -> Regex.match?(~r\/^-?\\?[\\d?]\/, en) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76522,"user_id":null,"body":"defmodule Kata do\n    def solve_runes(runes) do\n        try do\n            for i <- 0..9 do\n                if not String.contains?(runes, to_string(i)) and try_solve(runes, i), do: throw(i)\n            end\n            -1\n        catch\n            i ->\n                IO.puts \"#{runes} #{i}\"\n                i\n        end\n    end\n    def try_parse_integer(s) do\n      cond do\n        String.at(s, 0) == \"0\" and Enum.member?(~w(0 1 2 3 4 5 6 7 8 9), String.slice(s, 1, 1)) ->\n          :error\n        String.slice(s, 0, 2) == \"-0\" ->\n          :error\n        true -> Integer.parse(s)\n      end\n    end\n    def try_solve(runes, i) do\n        try do\n            runes = String.replace(runes, \"?\", to_string(i))\n            {a, runes} = try_parse_integer(runes)\n            {op, runes} = String.split_at(runes, 1)\n            {b, runes} = try_parse_integer(runes)\n            {\"=\", runes} = String.split_at(runes, 1)\n            {c, \"\"} = try_parse_integer(runes)\n            case op do\n              \"+\" -> a+b==c\n              \"-\" -> a-b==c\n              \"*\" -> a*b==c\n            end\n        rescue\n            MatchError -> false\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76523,"user_id":null,"body":"defmodule Kata do\n  def solve_runes(str) do\n    Enum.find_value(0..9, -1, fn x ->\n      unless String.contains?(str, \"#{x}\") do\n        str\n        |> String.replace(\"?\", \"#{x}\")\n        |> String.split(\"=\")\n        |> equate\n        |> validate_result(x)\n      end\n    end)\n  end\n\n  def equate([args, result]) do\n    args\n    |> capture\n    |> parse_arguments\n    |> calculate\n    |> verify(result)\n  end\n\n  def capture(args), do: Regex.named_captures(~r\/(?<arg1>\\D?\\d+)(?<operator>[-+*])(?<arg2>\\D?\\d+)\/, args)\n\n  def parse_arguments(nil), do: {:invalid, nil}\n  def parse_arguments(map) do\n    with {:ok, arg1} <- parse_value(map[\"arg1\"]),\n         {:ok, arg2} <- parse_value(map[\"arg2\"])\n    do\n      {:ok,[arg1, arg2, map[\"operator\"]]}\n    else\n      _ -> {:invalid, nil}\n    end\n  end\n\n  def parse_value(nil),    do: {:invalid, nil}\n  def parse_value(number), do: validate(number)\n\n  def validate(number) do\n    case Regex.match?(~r\/^[-]?0\\d\/, number) do\n      true  -> {:invalid, nil}\n      false ->\n        {number, _rest } = Integer.parse(number)\n        {:ok, number}\n    end\n  end\n\n  def calculate({:invalid, _}), do: nil\n  def calculate({:ok, [arg1, arg2, operator]}) do\n    case operator do\n      \"+\" -> arg1 + arg2\n      \"-\" -> arg1 - arg2\n      \"*\" -> arg1 * arg2\n    end\n  end\n\n  def verify(left, result) do\n    case parse_value(result) do\n      {:ok, value} -> left == value\n      _            -> false\n    end\n  end\n\n  def validate_result(true, x), do: x\n  def validate_result(_, _), do: nil\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"546dba39fa8da224e8000467":[{"id":76524,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(string) do\n    string\n    |> String.graphemes()\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(& [Enum.count(&1), List.first(&1)])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76525,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(input) do\n   process_input(String.graphemes(input), [])\n  end\n  \n  defp process_input([head | tail], result) do\n    result =\n      case List.last(result) do\n\n        [count | key] ->\n          if List.to_string(key) === head do\n            List.replace_at(result, -1, [count + 1, head])\n          else\n            List.insert_at(result, -1, [1, head])\n          end\n\n        nil -> # First scenario\n          List.insert_at(result, -1, [1, head])\n\n        _ -> # Default\n          result\n      end\n\n    process_input(tail, result)\n  end\n\n  defp process_input([], result) do\n    result\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76526,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(s), do: Enum.reverse(rle(s, [], nil, 0))\n  \n  defp rle(\"\", res, nil, _), do: res\n  defp rle(\"\", res, c, t), do: [[t, c] | res]\n  \n  defp rle(<<h::binary-size(1), t::binary>>, res, nil, _), do: rle(t, res, h, 1)\n  defp rle(<<h::binary-size(1), t::binary>>, res, h, i), do: rle(t, res, h, i + 1)\n  defp rle(<<h::binary-size(1), t::binary>>, res, c, i), do: rle(t, [[i, c] | res], h, 1)\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76527,"user_id":null,"body":"defmodule RLE do\n\n  def run_length_encoding(s) do\n    s\n    |> String.graphemes\n    |> Enum.chunk_by(& &1)\n    |> Enum.reduce([], fn [chr | _] = iterations , acc ->\n      [[length(iterations), chr]] ++ acc\n    end)\n    |> Enum.reverse \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76528,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(s) do\n    String.graphemes(s)\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(fn ls -> [length(ls), hd(ls)] end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76529,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(string) do\n    content = String.split(string, \"\", trim: true)\n    \n    do_encode(content, [])\n  end\n  \n  defp do_encode([], encoded), do: Enum.reverse(encoded)\n  \n  defp do_encode([letter | content], []) do\n    encoded = [[1, letter]]\n    \n    do_encode(content, encoded)\n  end\n  \n  defp do_encode([letter | content], [[occurences, previous_letter] = previous | encoded]) do\n    new_encoded =\n      if letter == previous_letter do\n        [[occurences + 1, previous_letter] | encoded]\n      else\n        [[1, letter], previous | encoded]\n      end\n    \n    do_encode(content, new_encoded)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76530,"user_id":null,"body":"defmodule RLE do\n  def run_length_encoding(s) do\n    s\n    |> to_charlist\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(fn x -> [length(x), String.first(List.to_string(x))] end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76531,"user_id":53,"body":"defmodule RLE do\n\n  def run_length_encoding(\"\") ,do: []\n  def run_length_encoding(s),  do: go(s,0,1,[]) |> Enum.reverse\n  \n  defp go(s,i,n,r) do\n    cond do\n      i>=String.length(s)               -> r\n      i+1==String.length(s)             -> go(s,i+1,1,[[n,String.at(s,i)]|r])\n      String.at(s,i)!=String.at(s,i+1)  -> go(s,i+1,1,[[n,String.at(s,i)]|r])\n      true                              -> go(s,i+1,n+1,r)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76532,"user_id":470,"body":"defmodule RLE do\n  def run_length_encoding(s),do: if s == \"\",do: [], else: forge(s,1)\n  \n  defp forge(<<ch>><>\"\",n),do: [[n,<<ch::utf8>>]]\n  defp forge(<<ch>><><<ch>><>s,n),do: forge(<<ch>><>s,n+1)\n  defp forge(<<ch>><>s,n),do: [[n,<<ch::utf8>>]|forge(s,1)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"546e2562b03326a88e000020":[{"id":76533,"user_id":null,"body":"defmodule Kata do\n  def square_digits(n) do\n    n\n    |> Integer.digits()\n    |> Enum.map_join(&(&1 * &1))\n    |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76534,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        # TODO: working solution\n        n \n        |> Integer.digits() \n        |> Enum.map(fn a -> a * a end) \n        |> Enum.join(\"\")\n        |> String.to_integer()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76535,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        Integer.digits(n) |> Enum.map(&Integer.digits(&1*&1)) |> List.flatten |> Integer.undigits\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76536,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        {x, _} = n\n        |> Integer.to_charlist()\n        |> IO.inspect(charlists: :as_lists, label: \"after to_charlist\")\n        |> Enum.map(fn x -> \n            x = x - 48\n            x * x \n          end)\n        |> IO.inspect(charlists: :as_lists, label: \"after map\")\n        |> Enum.join()\n        |> Integer.parse()\n        \n        x\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76537,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        Integer.digits(n)\n        |> Enum.map(& &1 * &1)\n        |> Enum.join()\n        |> String.to_integer()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76538,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        String.to_integer(Enum.join((for x <- Integer.digits(n), do: x * x), \"\"))\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76539,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n        Integer.digits(n)\n        |> Enum.map(&(&1*&1))\n        |> Enum.reduce(\"\", fn x, acc -> acc <> Integer.to_string(x) end)\n        |> String.to_integer\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76540,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n    n\n    |> Integer.digits\n    |> Enum.reduce([], fn x, acc -> acc ++ [x * x] end)\n    |> Enum.reduce([], fn x, acc -> acc ++ Integer.digits(x) end)\n    |> Integer.undigits\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76541,"user_id":null,"body":"defmodule Kata do\n    def square_digits(n) do\n      x = n\n      |> Kernel.to_string()\n      |> String.split(\"\", trim: true)\n      |> Enum.map(fn int_string ->\n        Integer.parse(int_string)\n        |> case do\n          {int, _} ->\n            int * int\n          _ -> 0\n        end\n      end)\n      Enum.join(x, \"\")\n      |> Integer.parse()\n      |> case do\n        {int, _} -> int\n        _ -> 0\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76542,"user_id":null,"body":"defmodule Kata do\n   # Function to square every digit of a number and concatenate them.\n   def square_digits(n) do\n        Integer.digits(n)\n        |> Enum.map(fn x -> :math.pow(x, 2) |> Kernel.trunc() end)\n        |> Enum.join()\n        |> String.to_integer()\n    end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54b724efac3d5402db00065e":[{"id":76543,"user_id":null,"body":"defmodule MorseCode do\n  \n  @morse_codes morse_codes \n  \n  def decode(code) do\n    code\n    |> String.strip\n    |> String.split(\"   \")\n    |> Enum.map_join(\" \", fn w -> String.split(w) |> Enum.map_join(&@morse_codes[&1]) end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76544,"user_id":null,"body":"defmodule MorseCode do\n\n\t@morse_codes morse_codes\n\n  def decode(code) do    \n    code |> String.strip\n    \t|> String.split(\"   \")\n      |> Enum.map(&(word_decoder(&1)))\n      |> Enum.join(\" \")\n  end\n  \n  defp word_decoder(word) do\n  \tword\n    \t|> String.split(\" \")\n    \t|> Enum.map(fn a -> Map.get(@morse_codes, a) end)\n      |> Enum.join\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76545,"user_id":null,"body":"defmodule MorseCode do\n  @morse_codes morse_codes\n\n  def decode(code) do\n    code \n    |> String.strip\n    |> String.split(\"   \")\n    |> Enum.map(&decode_word\/1)\n    |> Enum.join(\" \")\n  end\n  \n  defp decode_word(word) do\n    word \n    |> String.split(\" \") \n    |> Enum.map(&decode_letter\/1) \n    |> Enum.join\n  end\n  \n  defp decode_letter(letter) do\n    @morse_codes[letter]\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76546,"user_id":null,"body":"defmodule MorseCode do\n  @morse_codes morse_codes\n  \n  def decode(code) do\n    code\n    |> String.split(\"   \")\n    |> Enum.map_join(\" \", fn word ->\n      word\n      |> String.split(\" \")\n      |> Enum.map_join(&@morse_codes[&1])\n    end)\n    |> String.strip()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76547,"user_id":null,"body":"defmodule MorseCode do\n  @morse_codes morse_codes\n\n  def decode(code) do\n    code\n    |> String.strip\n    |> String.split(\"   \")\n    |> Enum.map_join(\" \", &decode_word\/1)\n  end\n\n  def decode_word(word) do\n    word\n    |> String.split(\" \")\n    |> Enum.map_join(\"\", &decode_letter\/1)\n  end\n\n  def decode_letter(letter) do\n    @morse_codes\n    |> Map.get(letter)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76548,"user_id":null,"body":"defmodule MorseCode do\n\n  @morse_codes morse_codes\n\n  def decode(code) do\n    code\n    |> String.strip\n    |> to_wordlist\n    |> Enum.map(fn(word) -> to_letters(word) end)\n    |> Enum.join(\" \")\n  end\n  \n  defp to_wordlist(sentence) do\n    String.split(sentence, \"   \")\n  end\n\n  defp to_letters(word) do\n    word\n    |> String.split(\" \")\n    |> Enum.map(fn(letter) -> to_english(letter) end)\n    |> Enum.join()\n  end\n  \n \n  defp to_english(code) do\n    @morse_codes[code]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76549,"user_id":null,"body":"defmodule MorseCode do\n  use MorseCode.Constants # Defines @morse_codes\n  \n  def decode(code) do\n    code \n    |> String.trim\n    |> String.split(\"   \")\n    |> Enum.map(fn word -> String.split(word, \" \") end)\n    |> Enum.map(fn word -> \n      word |> Enum.map(fn char -> Map.get(@morse_codes, char) end)\n    end)\n    |> Enum.map(fn word -> Enum.join(word) end)\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76550,"user_id":null,"body":"defmodule MorseCode do\n  \n  @morse_codes morse_codes \n  \n  def decode(code) do\n    code\n    |> String.strip\n    |> String.split(\"   \")\n    |> Enum.map(&String.split\/1)\n    |> Enum.map(fn word -> Enum.map_join(word, &@morse_codes[&1]) end)\n    |> Enum.join(\" \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76551,"user_id":null,"body":"defmodule MorseCode do\n\n  @codes morse_codes\n\n  def decode(code) do\n    code\n      |> String.strip\n      |> String.split([\"  \", \" \"])\n      |> Enum.map(&(if &1 != \"\", do: Map.get(@codes,&1), else: \" \"))\n      |> Enum.join(\"\")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76552,"user_id":null,"body":"defmodule MorseCode do\n  use MorseCode.Constants # Defines @morse_codes\n  \n  def decode(code) do\n    # Your code\n    code\n      |> String.split( \"   \")\n      |> Enum.map(fn(word) ->\n                    word\n                      |> String.split(\" \")\n                      |> Enum.map(&(@morse_codes[&1]))\n                      |> Enum.join(\"\")\n                  end\n        )\n      |> Enum.join(\" \")\n      |> String.trim\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54bf1c2cd5b56cc47f0007a1":[{"id":76553,"user_id":364,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str\n    |> String.downcase\n    |> String.graphemes\n    |> Enum.group_by(fn char -> char end)\n    |> Enum.count(fn {_, char_group} -> Enum.count(char_group) > 1 end)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76554,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str \n    |> String.downcase\n    |> String.codepoints\n    |> Enum.sort\n    |> Enum.chunk_by(&(&1))\n    |> Enum.filter(&(Enum.count(&1) >1))\n    |> Enum.count\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76555,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str\n    |> String.codepoints\n    |> Enum.group_by(&String.downcase\/1)\n    |> Enum.count(fn {_, chr} -> Enum.count(chr) > 1 end)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76556,"user_id":null,"body":"defmodule DuplicateCount do\n  def duplicate_count(str) do\n    str\n    |> String.graphemes()\n    |> Enum.group_by(&String.downcase\/1)\n    |> Enum.count(fn {_k, v} -> length(v) > 1 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76557,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    orig = str |> String.downcase |> String.graphemes\n    nodupes = orig |> Enum.uniq\n    orig -- nodupes |> Enum.uniq |> Enum.count\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76558,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    String.downcase(str)\n    |> String.graphemes()\n    |> Enum.sort()\n    |> Enum.chunk_by(&(&1))\n    |> Enum.count(&(length(&1) > 1))\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76559,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str\n    |> String.downcase\n    |> String.codepoints\n    |> Enum.group_by(&(&1))\n    |> Enum.count(fn\n      ({_, [_]})     -> false\n      ({_, [_ | _]}) -> true\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76560,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str\n    |> String.upcase\n    |> String.graphemes\n    |> Enum.reduce(%{}, fn(x, acc) -> Map.update(acc, x, 1, & &1 + 1) end)\n    |> Enum.filter(fn({_k, v}) -> v > 1 end)\n    |> length\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76561,"user_id":null,"body":"defmodule DuplicateCount do\n  def duplicate_count(str) do\n    str\n    |> String.downcase\n    |> String.graphemes\n    |> Enum.group_by(&(&1))\n    |> Enum.map(fn {_, v} -> length(v) end)\n    |> Enum.count(&(&1>1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76562,"user_id":null,"body":"defmodule DuplicateCount do\n\n  def duplicate_count(str) do\n    str\n    |> String.downcase()\n    |> String.split(\"\", trim: true)\n    |> Enum.frequencies()\n    |> Enum.count(fn x -> elem(x, 1) > 1 end)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54c27a33fb7da0db0100040e":[{"id":76563,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n < 0, do: false\n   \n   def is_square(n), do: :math.sqrt(n) == round(:math.sqrt(n))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76564,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n < 0, do: false\n  def is_square(n), do: trunc(:math.sqrt(n)) == :math.sqrt(n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76565,"user_id":null,"body":"defmodule Math do\n    def is_square(n) when is_number(n) and n>=0 do\n        Float.floor(:math.sqrt(n)) == :math.sqrt(n)\n    end\n    def is_square(n), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76566,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n < 0, do: false\n\n  def is_square(n) do\n    result = :math.sqrt(n)\n    result == trunc(result)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76567,"user_id":null,"body":"defmodule Math do\n  def is_square(n) do\n      is_square(n,0)\n    end\n\n    defp is_square(n,i) when (i * i) == n, do: true\n\n    defp is_square(n,i) when (i * i) < n, do: is_square(n,i+1)\n\n    defp is_square(n,i) when (i * i) > n, do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76568,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n < 0, do: false  \n  def is_square(n) do\n    Enum.any?(1..n, fn x -> x * x == n end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76569,"user_id":null,"body":"defmodule Math do\n  def is_square(n), do: n in for x <- 0..98_098, do: x * x\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76570,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n < 0 do\n    false\n  end\n  \n  def is_square(n) do\n    {_, square} = :math.sqrt(n) |> Float.ratio() \n    square == 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76571,"user_id":null,"body":"defmodule Math do\n  def is_square(n) do\n    if n >= 0 do\n      case Float.ratio(:math.sqrt(n)) do\n        {_sqrt, 1} -> true\n        {_sqrt, _any} -> false\n      end\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76572,"user_id":null,"body":"defmodule Math do\n  def is_square(n) when n >= 0 do\n    sqrt = :math.sqrt(n)\n    sqrt == Kernel.trunc(sqrt)\n  end\n  def is_square(_) do\n    false\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54d496788776e49e6b00052f":[{"id":76573,"user_id":2098,"body":"defmodule Sumofdivided do\n  def sum_of_divided(list) do\n    list\n    |> Enum.map(&break(abs(&1)))\n    |> Enum.concat\n    |> Enum.uniq\n    |> Enum.sort\n    |> Enum.map(&form_list(list, &1))\n  end\n\n  defp form_list(list, num), do: {num, list |> Enum.filter(&rem(&1, num) == 0) |> Enum.sum}\n  defp break(n), do: _break(n, 2, [])\n  defp _break(n, k, acc) when n < k*k, do: Enum.reverse(acc, [n])\n  defp _break(n, k, acc) when rem(n, k) == 0, do: _break(div(n, k), k, [k | acc])\n  defp _break(n, k, acc), do: _break(n, k+1, acc)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76574,"user_id":null,"body":"defmodule Sumofdivided do\n  def sum_of_divided([]), do: []\n  def sum_of_divided(lst) do\n    # your code\n    result = sum_of_divided(lst, %{})\n    #Enum.map(Enum.to_list(result), &Tuple.to_list(&1))\n    Enum.to_list(result) |> Enum.sort()\n  end\n\n  def sum_of_divided([], result) do\n    result\n  end\n\n  def sum_of_divided(lst, result) do\n    [head | tail] = lst\n    new = get_primes(head)\n    new_result = Enum.reduce(new, result, \n    fn {x, _}, result -> \n      if Map.has_key?(result, x) do\n        Map.update(result, x, 0, (fn current_value ->\n        current_value + head\n        end))\n      else\n        Map.put_new(result, x, head)\n      end\n    end)\n    sum_of_divided(tail, new_result)\n  end\n\n  @doc \"\"\"\n  Returns a map containing all prime factors of a given integer n as keys, and their powers in the prime factorization of n as corresponding values. Calls the `get_primes\/3` function. The third argument (options passed to check) are only [2, 3] if n < 5, and [2, 3] + a list of numbers from 5 to sqrt(n), where the remainder is 1 or 5 when each of the numbers is divided by 6. (this skips all evens and multiples of 3)\n  Will return prime factorization of negative numbers also.\n\n  ## Examples\n      iex> get_primes(90)\n        %{2 => 1, 3 => 2, 5 => 1}\n\n      iex> get_primes(256)\n        %{2 => 8}\n\n      iex> get_primes(127)\n        %{127 => 1}\n\n      iex> get_primes(-45)\n        %{3 => 2, 5 => 1}\n\n  \"\"\"\n  @doc since: \"1.12.2\"\n  #@spec get_primes(pos_integer()) :: %{pos_integer() => pos_integer()}\n  def get_primes(n) do\n    options = cond do\n      abs(n) < 5 -> []\n      true -> Enum.filter(5..trunc(:math.sqrt(abs(n))), fn x -> rem(x, 6) == 1 or rem(x, 6) == 5 end)\n    end\n    get_primes(n, %{}, [2, 3] ++ options)\n  end\n\n  def get_primes(n, m, []) when map_size(m) == 0 do\n    #if none of the options are a factor, then n itself is prime\n    %{abs(n) => 1}\n  end\n\n  def get_primes(n, m, []) when abs(n) > 1 do\n    #if some of the options are a factor (so map_size(m) is not 0), but the value of n has not become 1 after dividing by the factors, then the remaining value is also a prime factor of the original n. Happens with large values.\n    Map.put_new(m, abs(n), 1)\n  end\n\n  def get_primes(_n, m, []) do\n    #when all options are exhausted, map is not empty. I think this and the next function clause can be combined.\n    m\n  end\n\n  def get_primes(1, m, []) do\n    m\n  end\n\n  def get_primes(n, m, options) do\n    [head | tail] = options\n    cond do\n      rem(n, head) == 0 -> \n        new_m = if Map.has_key?(m, head) do\n           Map.replace!(m, head, Map.get(m, head) + 1)\n        else\n          Map.put(m, head, 1)\n        end\n        get_primes(div(n,head), new_m, options)\n      true -> \n      get_primes(n, m, tail)\n    end\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76575,"user_id":null,"body":"defmodule Sumofdivided do\n  def sum_of_divided(list) do\n    list\n    |> Enum.flat_map(&prime_factors(abs(&1)))\n    |> Enum.uniq()\n    |> Enum.sort()\n    |> Enum.map(&with_sum(&1, list))\n  end\n\n  defp with_sum(num, list), do: {num, list |> Enum.filter(&(rem(&1, num) == 0)) |> Enum.sum()}\n\n  defp prime_factors(n), do: primfax(n, 2, [])\n  defp primfax(n, k, acc) when n < k * k, do: [n | acc]\n  defp primfax(n, k, acc) when rem(n, k) == 0, do: primfax(div(n, k), k, [k | acc])\n  defp primfax(n, k, acc), do: primfax(n, k + 1, acc)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76576,"user_id":null,"body":"defmodule Sumofdivided do\n  def sum_of_divided(lst) do\n    lst\n    |> Enum.map(&(factors(&1))) |> List.flatten |> Enum.sort |> Enum.uniq\n    |> Enum.reduce([], fn x, acc ->\n      rm = lst |> Enum.filter(&(rem(&1, x) == 0))\n      if length(rm) > 0, do: [{x, Enum.sum(rm)} | acc], else: acc\n    end)\n    |> Enum.reverse()\n  end\n\n  def factors(n), do: factors(abs(n), 2, [])\n  def factors(n, k, f) when k * k > n, do: [n | f]\n  def factors(n, k, f) when rem(n, k) == 0, do: factors(div(n, k), k, [k | f])\n  def factors(n, k, f), do: factors(n, k + 1, f)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76577,"user_id":1249,"body":"defmodule Sumofdivided do\n  def factors(n), do: factors(abs(n), 2, [])\n\n  defp factors(n, k, acc) do\n    cond do\n      n < k*k        -> [n|acc]\n      rem(n, k) == 0 -> factors(div(n, k), k, [k|acc])\n      :otherwise     -> factors(n, k+1, acc)\n    end\n  end\n  \n  def sum_of_divided(lst) do\n    primes = Enum.flat_map(lst, &factors\/1) |> Enum.sort |> Enum.dedup\n    \n    Enum.map primes, fn p ->\n      {\n        p,\n        Enum.reduce(lst, 0, fn(n, acc) ->\n          if rem(n, p) == 0, do: acc + n, else: acc\n        end)\n      }\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76578,"user_id":492,"body":"defmodule Sumofdivided do\n\n  defp _prim_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n  defp _prim_factors(n, k, acc) when rem(n, k) == 0, do: _prim_factors(div(n, k), k, [k | acc])\n  defp _prim_factors(n, k, acc), do: _prim_factors(n, k + 1, acc)\n  defp prim_factors(n), do: _prim_factors(abs(n), 2, []) |> Enum.uniq\n \n  defp sum_list(n, list), do: do_sum_list(n, list, 0)\n  defp do_sum_list(_, [], acc), do: acc\n  defp do_sum_list(n, [h|t], acc) do\n    if (rem(h, n) == 0) do \n      do_sum_list(n, t, acc + h) \n    else \n      do_sum_list(n, t, acc) \n    end\n  end\n  \n  defp factors(lst) do\n    lst |> Enum.map(fn(x) -> prim_factors(x) end) |> List.flatten |> Enum.uniq |> Enum.sort\n  end\n  defp sum_one(n, lst) do\n    sm = sum_list(n, lst)\n    {n, sm}\n  end\n  \n  def sum_of_divided(lst) do\n    factors(lst) |> Enum.map(fn(x) -> sum_one(x, lst) end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76579,"user_id":null,"body":"defmodule Sumofdivided do\n\n  def sum_of_divided([]) do\n    []\n  end\n\n  def sum_of_divided(lst) do\n    factors =\n      lst\n      |> Enum.map(&abs\/1)\n      |> Enum.map(&prime_factors\/1)\n      |> List.flatten()\n      |> Enum.uniq()\n      |> Enum.sort()\n\n    factors\n    |> Enum.map(fn x ->\n      {x, Enum.sum(Enum.filter(lst, &rem(&1, x) == 0))}\n    end)\n  end\n\n  def prime_factors(number, candidate \\\\ 2, factors \\\\ [])\n  def prime_factors(1, _candidate, factors) do\n    Enum.reverse(factors)\n  end\n\n  def prime_factors(number, candidate, factors) when candidate * candidate > number do\n    Enum.reverse([number | factors])\n  end\n\n  # def prime_factors(number, candidate, factors) when candidate * candidate > number do\n  #   factors\n  # end\n\n  def prime_factors(number, 2, []) do\n    factors = if rem(number, 2) == 0 do\n      [2]\n    else\n      []\n    end\n\n    prime_factors(reduce_number(number, 2), 3, factors)\n  end\n\n  def prime_factors(number, candidate, factors) when rem(number, candidate) == 0 do\n    prime_factors(reduce_number(number, candidate), candidate + 2, [candidate | factors])\n  end\n\n  def prime_factors(number, candidate, factors) do\n    prime_factors(reduce_number(number, candidate), candidate + 2, factors)\n  end\n\n  defp reduce_number(number, divider) when rem(number, divider) == 0 do\n    reduce_number(div(number, divider), divider)\n  end\n\n  defp reduce_number(number, _), do: number\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76580,"user_id":null,"body":"defmodule Sumofdivided do\n  def div_all(n, p) when rem(n, p) == 0, do: div_all(div(n, p), p)\n  def div_all(n, p), do: n\n\n  def prime_facts(n, p \\\\ 2)\n  def prime_facts(n, p) when p * p > n, do: if(n > 1, do: [n], else: [])\n  def prime_facts(n, p) when rem(n, p) == 0, do: [p | prime_facts(div_all(n, p))]\n  def prime_facts(n, p), do: prime_facts(n, p + 1)\n\n  def sum_of_divided(lst) do\n    Enum.map(lst, &abs\/1)\n    |> Enum.flat_map(&prime_facts\/1)\n    |> Enum.uniq()\n    |> Enum.sort()\n    |> Enum.map(fn p -> {p, Enum.filter(lst, fn n -> rem(n, p) == 0 end) |> Enum.sum()} end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76581,"user_id":53,"body":"defmodule Sumofdivided do\n\n  defp prime_factors(n), do: Enum.uniq(prime_factors_walker(abs(n), 2, []))\n  defp prime_factors_walker(n, k, arr) do\n    cond do\n      n < k * k -> Enum.reverse(arr, [n])\n      rem(n, k) == 0 -> prime_factors_walker(div(n, k), k, [k | arr])\n      true -> prime_factors_walker(n, k + 1, arr)\n    end\n  end\n  \n  defp factors(arr), do:\n    arr |> Enum.map(fn(x) -> prime_factors(x) end)\n      |> List.flatten\n      |> Enum.uniq \n      |> Enum.sort\n  \n  defp array_sum(n, arr), do: array_sum_walker(n, arr, 0)\n  defp array_sum_walker(_, [], arr), do: arr\n  defp array_sum_walker(n, [h|t], arr) do\n    cond do\n      rem(h, n) == 0 -> array_sum_walker(n, t, arr + h) \n      true -> array_sum_walker(n, t, arr) \n    end\n  end\n  \n  def sum_of_divided(arr), do:\n    factors(arr) \n      |> Enum.map(fn(n) -> {n, array_sum(n, arr)} end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76582,"user_id":null,"body":"defmodule Sumofdivided do\n\n  def sum_of_divided(lst) do\n    lst\n    |> Enum.flat_map(fn n -> factors_of(abs(n), 2, []) end)\n    |> Enum.uniq()\n    |> Enum.sort()\n    |> Enum.map(fn n -> {n, lst |> Enum.filter(fn x -> rem(x, n) == 0 end) |> Enum.sum()} end)\n  end\n\n  def factors_of(n, i, acc) do\n    cond do\n      i * i > n      -> [n | acc]\n      rem(n, i) == 0 -> factors_of(div(n, i), 2, [i | acc])\n      :otherwise     -> factors_of(n, i + 1, acc)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54d512e62a5e54c96200019e":[{"id":76583,"user_id":492,"body":"defmodule PrimesInNumbers do\n\n  defp factors(n, k, acc) do\n    cond do\n      n < k*k        -> [n|acc]\n      rem(n, k) == 0 -> factors(div(n, k), k, [k|acc])\n      :otherwise     -> factors(n, k+1, acc)\n    end\n  end\n  def prime_factors(n), do: \n    factors(abs(n), 2, []) \n      |> Enum.reduce(Map.new, fn c,acc -> Map.update(acc, c, 1, &(&1+1)) end)\n      |> Map.to_list\n      |> Enum.map(fn {k, v} -> if v === 1 do \"(#{k})\" else \"(#{k}**#{v})\" end end)\n      |> Enum.join(\"\")\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76584,"user_id":null,"body":"defmodule PrimesInNumbers do\n\n  def prime_factors(n) do\n    options = cond do\n      abs(n) < 5 -> []\n      true -> Enum.filter(5..trunc(:math.sqrt(abs(n))), fn x -> rem(x, 6) == 1 or rem(x, 6) == 5 end)\n    end\n    prime_factors(n, %{}, [2, 3] ++ options)\n  end\n\n  def prime_factors(n, m, []) when map_size(m) == 0 do\n    #if none of the options are a factor, then n itself is prime\n    \"(#{abs(n)})\"\n  end\n\n  def prime_factors(n, m, []) when n > 1 or n < -1 do\n    #if some of the options are a factor (so map_size(m) is not 0), but the value of n has not become 1 after dividing by the factors, then the remaining value is also a prime factor of the original n. Happens with large values.\n    Map.put_new(m, abs(n), 1) |> Enum.map( fn {x, y} -> (if y > 1, do: \"(#{x}**#{y})\", else: \"(#{x})\") end) |> Enum.join(\"\")\n  end\n\n  def prime_factors(_n, m, []) do\n    #when all options are exhausted, map is not empty. I think this and the next function clause can be combined.\n    Enum.map(m, fn {x, y} -> (if y > 1, do: \"(#{x}**#{y})\", else: \"(#{x})\") end) |> Enum.join(\"\")\n  end\n\n  def prime_factors(1, m, []) do\n    Enum.map(m, fn {x, y} -> (if y > 1, do: \"(#{x}**#{y})\", else: \"(#{x})\") end) |> Enum.join(\"\")\n  end\n\n  def prime_factors(n, m, options) do\n    [head | tail] = options\n    cond do\n      rem(n, head) == 0 -> \n        new_m = if Map.has_key?(m, head) do\n           Map.replace!(m, head, Map.get(m, head) + 1)\n        else\n          Map.put(m, head, 1)\n        end\n        prime_factors(div(n,head), new_m, options)\n      true -> \n      prime_factors(n, m, tail)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76585,"user_id":null,"body":"defmodule PrimesInNumbers do\n  def prime_factors(n) do\n    n\n    |> mmc\n    |> Enum.group_by(&(&1))\n    |> Enum.map(&factor\/1)\n    |> Enum.join\n  end\n  \n  def mmc(n), do: mmc(n, 2, [])\n  def mmc(1, _div, divisors), do: divisors\n  def mmc(n, div, divisors) when rem(n, div) != 0, do: n |> mmc(div + 1, divisors)\n  def mmc(n, div, divisors), do: n \/ div |> round |> mmc(div, divisors ++ [div])\n\n  def factor({key, values}) when length(values) == 1, do: \"(#{key})\"\n  def factor({key, values}), do: \"(#{key}**#{length(values)})\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76586,"user_id":null,"body":"defmodule PrimesInNumbers do\n  def div_loop(n, p, i \\\\ 0) do\n    cond do\n      rem(n, p) == 0 -> div_loop(div(n, p), p, i + 1)\n      true -> %{p: p, i: i, v: n}\n    end\n  end\n  def calc(1, p, i) do\n    [%{p: p, i: 0, v: 1}]\n  end\n  def calc(n, p \\\\ 2, i \\\\ 0) do\n    l = div_loop(n, p)\n    [l] ++ calc(l[:v], p + 1, i + l[:i])\n  end\n  def to_multiply_string(%{i: i, p: p}) do\n    case i do\n      0 -> \"\"\n      1 -> \"(\" <> Integer.to_string(p) <> \")\"\n      _ -> \"(\" <> Integer.to_string(p) <> \"**\" <> Integer.to_string(i) <> \")\"\n    end\n  end\n  def prime_factors(n) do\n      calc(n)\n        |> Enum.map_join(\"\", &(to_multiply_string(&1)))\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76587,"user_id":null,"body":"defmodule PrimesInNumbers do\n  def prime_factors(n) do\n    calc_factors(n)\n    |> Enum.chunk_by(&(&1))\n    |> Enum.map(&format_group\/1)\n    |> Enum.join\n  end\n  \n  defp calc_factors(1), do: []\n  \n  defp calc_factors(n) do\n    factor = calc_next_factor(n)\n    next_n = div(n, factor)\n    [factor | calc_factors(next_n)]\n  end\n  \n  defp calc_next_factor(n, from \\\\ 2)  \n  defp calc_next_factor(n, from) when rem(n, from) == 0, do: from\n  defp calc_next_factor(n, from) when from > n, do: nil\n  defp calc_next_factor(n, from), do: calc_next_factor(n, from + 1)\n  \n  defp format_group(nums) when is_list(nums) do\n    num_count = Enum.count(nums)\n    suffix = if num_count > 1, do: \"**#{num_count}\", else: \"\"\n    \"(#{hd(nums)}#{suffix})\"\n  end\n  \n  defp format_group(_), do: \"\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76588,"user_id":null,"body":"defmodule PrimesInNumbers do\n  def prime_factors(n) do\n    n\n    |> mmc\n    |> Enum.group_by(&(&1))\n    |> Enum.map(&factor\/1)\n    |> Enum.join\n  end\n\n  def mmc(n), do: mmc(n, 2, [], :math.sqrt(n) + 1)\n  def mmc(1, _div, divisors, _limit), do: divisors\n  def mmc(n, div, divisors, limit) when div == n, do: 1 |> mmc(n, [n] ++ divisors, limit)\n  def mmc(n, div, divisors, limit) when div > limit, do: n |> mmc(n, divisors, limit)\n  def mmc(n, div, divisors, limit) when rem(n, div) != 0, do: n |> mmc(div + 1, divisors, limit)\n  def mmc(n, div, divisors, limit), do: n \/ div |> round |> mmc(div, divisors ++ [div], limit)\n\n  def factor({key, values}) when length(values) == 1, do: \"(#{key})\"\n  def factor({key, values}), do: \"(#{key}**#{length(values)})\"\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76589,"user_id":492,"body":"defmodule PrimesInNumbers do\n\n  defp factors(n, k, acc) do\n    cond do\n      n < k*k        -> [n|acc]\n      rem(n, k) == 0 -> factors(div(n, k), k, [k|acc])\n      :otherwise     -> factors(n, k+1, acc)\n    end\n  end\n  def prime_factors(n), do: \n    factors(abs(n), 2, []) \n      |> Enum.reduce(Map.new, fn c,acc -> Map.update(acc, c, 1, &(&1+1)) end)\n      |> Map.to_list\n      |> Enum.map(fn {k, v} -> if v === 1 do \"(#{k})\" else \"(#{k}**#{v})\" end end)\n      |> Enum.join(\"\")\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76590,"user_id":null,"body":"defmodule PrimesInNumbers do\n\n  def prime_factors(n) when n > 1 do\n    n\n    |> prime_factors_for()\n    |> stringify()\n  end\n\n  defp prime_factors_for(n, factor \\\\ 2, list_of_factors \\\\ [])\n  defp prime_factors_for(1, _, list_of_factors), do: Enum.reverse(list_of_factors)\n  defp prime_factors_for(n, factor, list_of_factors) do\n    if rem(n, factor) == 0,\n      do: prime_factors_for(div(n, factor), factor, [factor | list_of_factors]),\n      else: prime_factors_for(n, factor + 1, list_of_factors)\n  end\n\n  defp stringify(list_of_factors) do\n    list_of_factors\n    |> Enum.frequencies()\n    |> Enum.reduce(\"\", fn \n      {prime, 1}, acc -> acc <> \"(#{prime})\"\n      {prime, pow}, acc -> acc <> \"(#{prime}**#{pow})\"\n    end) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76591,"user_id":null,"body":"defmodule PrimesInNumbers do\n\n  def qw(n,x) when rem(n,x)==0, do: 1+qw(div(n,x),x)\n  def qw(n,x), do: 0\n  \n  def q(n,x) when n>=x do (if qw(n,x)!=0 do if qw(n,x)!=1 do (x|>Integer.to_string)<>\"**\"<>(qw(n,x)|>Integer.to_string)<>\")(\" else (x|>Integer.to_string)<>\")(\" end else \"\" end) <> q(div(n, :math.pow(x,qw(n,x)) |> round),x+1)end\n  def q(n,x), do: \"\"\n\n  def prime_factors(n) do\n  \"(\"<>q(n,2)|>String.slice(0..-2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76592,"user_id":null,"body":"defmodule PrimesInNumbers do\n\n  def prime_factors(n) do\n    result = div_2(n)\n    n = List.last(result)\n    result_2 = List.delete_at(result, -1)\n    result_list = [result_2 | primes(n, 3)]\n    result_list\n    |> List.flatten()\n    |> Enum.frequencies()\n    |> Enum.map(fn {x, y} -> \n         case y > 1 do\n           true -> \"(\" <> Integer.to_string(x) <> \"**\" <> Integer.to_string(y) <> \")\"\n           false -> \"(\"<> Integer.to_string(x) <>\")\"\n         end\n       end)\n    |> List.to_string()\n  end\n  \n  def div_2(n) do\n    case rem(n, 2) == 0 do\n      true -> [2 | div_2(div(n, 2))]\n      false -> [n]\n    end\n  end\n  \n  def primes(n, index) when index * index > n do\n    [n]\n  end\n  def primes(n, index) do\n    case rem(n, index) == 0 do\n      true -> [index | primes(div(n, index), index)]\n      false -> primes(n, index + 2)\n    end\n  end\n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54d7660d2daf68c619000d95":[{"id":76593,"user_id":53,"body":"defmodule Denom do\n\n  def convert_frac(ls) do\n    xss = Enum.map(ls, fn xs -> reduce(nth(xs, 0), nth(xs, 1)) end)\n    cd = Enum.reduce(xss, 1, fn xs, acc -> lcm(nth(xs, 1), acc) end)\n    yss = Enum.map(xss, fn xs -> [div(nth(xs, 0) * cd, nth(xs, 1)), cd] end)\n    yss\n  end\n  \n  defp nth(xs, i), do: Enum.at(xs, i)\n  defp gcd(a, 0), do: a\n  defp gcd(a, b), do: gcd(b, rem(a, b))\n  defp lcm(a, b), do: div(a * b, gcd(a, b))\n  defp reduce(a, b) do\n    i = gcd(a, b)\n    [div(a, i), div(b, i)]\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76594,"user_id":null,"body":"defmodule Denom do\n\n  def convert_frac([]), do: []\n  def convert_frac(ls) do\n      comun_denom =\n        ls\n        |> Enum.map(fn [_a, b] -> b end)\n        |> mcm()\n             \n      media = \n        ls\n        |> Enum.map(fn [a,b] -> [trunc(comun_denom * a \/ b), comun_denom] end)\n        \n      comun_numerador = \n        media\n        |> Enum.map(fn [a, _b] -> a end)\n        |> Enum.concat([comun_denom])\n        |> mcd()\n        \n       media\n       |> Enum.map(fn [a,b] -> [trunc(a\/comun_numerador), trunc(b\/comun_numerador)] end)\n      \n  end\n  \n  defp mcm([a,b]), do: trunc(a*b\/Integer.gcd(a,b))\n  defp mcm([a,b|tail]), do: mcm([mcm([a,b])|tail])\n  \n  defp mcd([a,b]), do: Integer.gcd(a,b)\n  defp mcd([a,b|tail]), do: mcd([mcd([a,b]) | tail])\n\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76595,"user_id":null,"body":"defmodule Denom do\n  def convert_frac(ls) do\n    reduced = Enum.map(ls, fn [x, y] -> [div(x, Integer.gcd(x, y)), div(y, Integer.gcd(x, y))] end)\n    lowest =  Enum.reduce(reduced, 1, fn [_, y], acc -> lcm(acc, y) end)    \n    Enum.map(reduced, fn [x, y] -> [x * div(lowest, y), lowest] end)\n  end\n  \n  def lcm(x, y), do: div(x * y, Integer.gcd(x, y))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76596,"user_id":492,"body":"defmodule Denom do\n\n  defp gcd(a,0), do: abs(a)\n  defp gcd(a,b), do: gcd(b, rem(a, b))\n  defp lcmu(a,b), do: div(abs(a * b), gcd(a, b))\n  defp lcm(l) do\n    Enum.reduce(l, &(lcmu(&1, &2)))\n  end\n  \n  defp simp(x) do\n      a = Enum.at(x, 0); b = Enum.at(x, 1); g = gcd(a, b)\n      [div(a, g), div(b, g)]\n  end\n\n  def convert_frac(ls) when ls == [], do: []\n  def convert_frac(ls) do\n      l  = ls |> Enum.map(fn x -> simp(x) end)\n      cd = l  |> Enum.map(fn x -> Enum.at(x, 1) end) |> lcm\n      l |> Enum.map(fn x -> [div(Enum.at(x, 0) * cd, Enum.at(x, 1)), cd] end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76597,"user_id":null,"body":"defmodule Denom do\n  def convert_frac([]), do: []\n  def convert_frac(ls) do\n    simplified_fracts =\n      ls\n      |> Enum.map(&simplify_fract(&1))\n\n    multiple = lcm(simplified_fracts)\n\n    simplified_fracts\n    |> Enum.map(fn [num, denom] -> [num * div(multiple, denom), multiple] end)\n  end\n\n  def simplify_fract([numer, denom]) do\n    # Dividing both numerator and denominator by the gcd to simplify the fraction\n    divisor = gcd(numer, denom)\n    [div(numer, divisor), div(denom, divisor)]\n  end\n\n  def lcm(list) when is_list(list) do\n    # Least common multiple of the list\n    list\n    |> Enum.map(fn [_num, denom] -> denom end)\n    |> Enum.reduce(fn denom, acc -> lcm(denom, acc) end)\n  end\n\n  # Least common multiple between two numbers\n  defp lcm(a, b), do: div(a * b, gcd(a, b))\n\n  # Greatest common divisor between two numbers\n  defp gcd(a, 0), do: a\n\n  defp gcd(a, b) do\n    gcd(b, rem(a, b))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76598,"user_id":null,"body":"defmodule Denom do\n  def gcd(a, b) when a == b, do: a\n  def gcd(a, b) when a > b, do: gcd(a - b, b)\n  def gcd(a, b) when a < b, do: gcd(a, b - a)\n\n  def lcm([h]), do: h\n  def lcm([h| rest]), do: lcm(h, lcm(rest))\n  def lcm(a, b) do\n    div(a*b, gcd(a,b))\n  end\n\n  def expand([n, d], common) do\n    [n * div(common, d) , common]\n  end\n  def minimize([n, d]) do\n    dem = gcd(n, d)\n    [div(n, dem), div(d, dem)]\n  end\n\n  def convert_frac([]), do: []\n  def convert_frac(nums) do\n    minimized = nums\n      |> Enum.map(&(minimize &1))\n    common = minimized\n      |> Enum.map(fn ([_, d]) -> d end)\n      |> lcm\n    minimized\n      |> Enum.map(&(expand &1, common))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76599,"user_id":null,"body":"defmodule Denom do\n\n  def convert_frac([]), do: []\n  def convert_frac(ls) do\n    cleaned_ls =\n    ls\n    |> Enum.map_reduce(1, fn\n      [num, den], acc -> {[div(num, gcd(num, den)), div(den, gcd(num, den))], lcd(acc, div(den, gcd(num, den)))}\n    end)\n    |> (fn\n      {l, least_den} -> Enum.map(l, fn([num, den]) -> [num*div(least_den, den), least_den] end)\n    end).()\n  end\n  \n  def gcd(a, 0), do: a\n  \n  def gcd(a, b) do\n    cond do\n      b > a -> gcd(a, rem(b, a))\n      true -> gcd(b, rem(a, b))\n    end\n  end\n  \n  def lcd(a, b) do\n    div(a*b, gcd(a, b))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76600,"user_id":null,"body":"defmodule Denom do\n  def factorize([]), do: []\n  def factorize(num) when is_integer(num), do: factorize([num])\n  def factorize(l) do\n    [h|t] = l\n    den = 2..h\n    |> Enum.find(&(rem(h,&1)==0))\n    case den do\n      ^h -> l\n      x -> factorize([round(h\/x), x | t])\n    end\n  end\n  \n  def convert_frac([]), do: []\n  def convert_frac(ls) do\n    ls_factorized =\n      ls\n      |> Enum.map(&(&1\n        |> Enum.map(fn(x)->factorize(x) end)\n        |> (fn([d, n]) -> [d -- n, n -- d] end).()\n        |> Enum.map(fn(x) -> (Enum.frequencies(x)) end)))\n    \n    greatest_dn =\n      ls_factorized\n      |> Enum.map(fn([_, dn]) -> dn end)\n      |> Enum.reduce(fn\n        x, acc -> Map.keys(x)\n          |> Enum.reduce(acc, fn\n            y, acc1 -> Map.put(acc1, y, Enum.max([x[y], Map.get(acc1, y, 0)]))\n          end)\n      end)\n    \n    ls_factorized\n    |> Enum.map(fn\n      [num, den] -> [greatest_dn\n        |> Enum.reduce(%{}, fn\n          {fac, gfreq}, acc -> unless gfreq == den[fac] do Map.put(acc, fac, gfreq - Map.get(den, fac, 0)) else acc end\n        end)\n        |> Enum.reduce(num, fn\n          {fac, dfreq}, acc -> Map.update(acc, fac, dfreq, fn(val) -> val + dfreq end)\n        end), greatest_dn]\n    end)\n    |> Enum.map(&(Enum.map(&1, fn\n      m -> Enum.reduce(m, 1, fn\n        {k, v}, acc -> acc*(round(:math.pow(k,v)))\n      end)\n    end)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76601,"user_id":null,"body":"defmodule Denom do\n  def lcm(a, b), do: div(a * b, Integer.gcd(a, b))\n\n  def convert_frac(ls) do\n    ls =\n      Enum.map(ls, fn [a, b] ->\n        g = Integer.gcd(a, b)\n        [div(a, g), div(b, g)]\n      end)\n\n    lcmall = Enum.reduce(ls, 1, fn [_, b], acc -> lcm(b, acc) end)\n    Enum.map(ls, fn [a, b] -> [a * div(lcmall, b), lcmall] end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76602,"user_id":null,"body":"defmodule Denom do\n\n  def lcm(x, y), do: Integer.floor_div((x * y), Integer.gcd(x, y))\n\n  def convert_frac(ls) do\n    lcm = Enum.reduce(ls, 1, fn [_num, den], acc -> lcm(den, acc) end)\n    fracs = Enum.map(ls, fn [num, den] -> [num * Integer.floor_div(lcm, den), lcm] end)\n    redux_factor = Enum.reduce(fracs, lcm, fn [num, _den], acc -> Integer.gcd(num, acc) end)\n    Enum.map(fracs, fn [num, den] -> [Integer.floor_div(num, redux_factor), Integer.floor_div(den, redux_factor)] end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54d81488b981293527000c8f":[{"id":76603,"user_id":2098,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n\n  def sum_pairs(ints, sum), do: get_sum_pairs(ints, sum, MapSet.new)\n\n  defp get_sum_pairs([], _sum, _acc), do: nil\n\n  defp get_sum_pairs([head | tail], sum, acc) do\n    case MapSet.member?(acc, sum - head) do\n      true -> {sum - head, head}\n      false -> get_sum_pairs(tail, sum, MapSet.put(acc, head))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76604,"user_id":53,"body":"defmodule SumOfPairs do\n  def sum_pairs(ns,s), do: go(ns,s,MapSet.new)\n  defp go([],_,_ ), do: nil\n  defp go([m|ns],s,ms), do: if MapSet.member?(ms,s-m), do: {s-m,m}, else: go(ns,s,MapSet.put(ms,m))\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76605,"user_id":null,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n  \n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n\n  def sum_pairs( ints, sum ) do\n    do_sum_pairs( ints, sum, MapSet.new )\n  end\n  \n  \n  @spec do_sum_pairs( [ integer ], integer, MapSet.t ) :: { integer, integer } | nil\n  \n  defp do_sum_pairs( [], _, _ ), do: nil\n  \n  defp do_sum_pairs( [ h | t ], sum, cache ) do\n\n    if MapSet.member?( cache, sum - h ) do\n      { sum - h, h }\n\n    else\n      do_sum_pairs( t, sum, MapSet.put( cache, h ) )\n\n    end\n\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76606,"user_id":null,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n\n  def sum_pairs( ints, sum ) do\n    case ints |> Enum.reduce_while(MapSet.new(), fn x, l -> if MapSet.member?(l, sum - x) do {:halt, {sum - x, x}} else {:cont, MapSet.put(l, x)} end end) do\n      %MapSet{} -> nil\n      r -> r\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76607,"user_id":null,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n\n  def sum_pairs(ints, sum, set \\\\ MapSet.new)\n  def sum_pairs([], _, _), do: nil\n  def sum_pairs([h | t], sum, set) do\n    case MapSet.member?(set, sum - h) do\n      true -> {sum - h, h}\n      false -> sum_pairs(t, sum, MapSet.put(set, h))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76608,"user_id":null,"body":"defmodule SumOfPairs do\n\n  def sum_pairs( ints, sum ) do\n    f(ints, sum, MapSet.new())\n  end\n\n  def f([], _, _), do: nil\n\n  def f([h | t], sum, own) do\n    case Set.member?(own,(sum - h)) do\n      true -> {sum-h, h}\n      _ -> f(t, sum, Set.put(own, h))\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76609,"user_id":null,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n  def sum_pairs(ints, sum), do: sum_pairs(ints, sum, MapSet.new)\n  def sum_pairs([], _sum, _prev_items), do: nil\n  def sum_pairs([h|t], sum, prev_items) do\n    case MapSet.member?(prev_items, sum - h) do\n      true -> {sum - h, h}\n      false -> sum_pairs(t, sum, MapSet.put(prev_items, h))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76610,"user_id":null,"body":"defmodule SumOfPairs do\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  \n  def sum_pairs(ints, sum) do\n    for current <- ints, reduce: %{} do\n      seen ->\n        candidate = sum - current\n        if Map.has_key?(seen, candidate) do\n          throw {candidate, current}\n        else\n          Map.put(seen, current, nil)\n        end\n    end\n    nil\n    catch\n    result -> result\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76611,"user_id":null,"body":"defmodule SumOfPairs do\n\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs( [ integer ], integer ) :: { integer, integer } | nil\n\n  def sum_pairs( ints, sum ) do\n    for current <- ints, reduce: %{} do\n      seen ->\n        candidate = sum - current\n        if Map.has_key?(seen, candidate) do\n          throw {candidate, current}\n        else\n          Map.put(seen, current, nil)\n        end\n    end\n    \n    nil\n  catch\n    result -> result\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76612,"user_id":null,"body":"defmodule SumOfPairs do\n  @doc \"\"\"\n\n  Finds the first pair of ints as judged by the index of the second value.\n\n  iex> sum_pairs( [ 10, 5, 2, 3, 7, 5 ], 10 )\n\n  { 3, 7 }\n\n  \"\"\"\n\n  @spec sum_pairs([integer], integer) :: {integer, integer} | nil\n\n  def sum_pairs(ints, sum) do\n    res =\n      Enum.reduce_while(\n        ints,\n        MapSet.new(),\n        fn x, seen ->\n          if MapSet.member?(seen, sum - x),\n            do: {:halt, {sum - x, x}},\n            else: {:cont, MapSet.put(seen, x)}\n        end\n      )\n\n    if is_tuple(res), do: res\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54da5a58ea159efa38000836":[{"id":76613,"user_id":null,"body":"defmodule FindOdd do\n  def find_it(list) do\n    list\n    |> Enum.frequencies() \n    |> Enum.find_value(fn {item, count} -> if rem(count, 2) != 0, do: item  end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76614,"user_id":null,"body":"defmodule FindOdd do\n  require Integer\n  \n  def find_it(list) do\n    list\n    |> Enum.group_by(fn x -> x end)\n    |> Map.values\n    |> Enum.filter(fn x -> Integer.is_odd(length(x)) end)\n    |> hd |> hd\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76615,"user_id":null,"body":"defmodule FindOdd do\n    import Bitwise, only: [^^^: 2]\n    \n    def find(ls), do: Enum.reduce(ls, &^^^\/2)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76616,"user_id":null,"body":"defmodule FindOdd do\n  def find([head | tail]) do\n    Enum.reduce(tail, head, &Bitwise.bxor\/2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76617,"user_id":null,"body":"defmodule FindOdd do\n  def find_it(list) do\n    {key, _val} =\n      list\n      |> Enum.frequencies()\n      |> Enum.find(fn {key, val} -> \n        rem(val, 2) != 0\n      end)\n    key\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76618,"user_id":null,"body":"defmodule FindOdd do\n  def find_it(list) do\n    {num, _freq} = list\n    |> Enum.frequencies()\n    |> Enum.filter(fn {_a, b} -> rem(b, 2) == 1 end)\n    |> Enum.at(0)\n\n    num\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76619,"user_id":null,"body":"require Integer\n\ndefmodule FindOdd do\n  def find_it(list) do\n    list\n    |> Enum.frequencies()\n    |> Enum.find(&Integer.is_odd(elem(&1, 1)))\n    |> elem(0)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76620,"user_id":null,"body":"defmodule FindOdd do\n  def find_it(list) do\n    import Integer, only: [is_odd: 1]\n    \n    list\n    |> Enum.frequencies\n    |> Enum.find(fn {k, v} -> Integer.is_odd(v) end)\n    |> elem(0)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76621,"user_id":53,"body":"defmodule FindOdd do\n  use Bitwise\n  def find(xs), do: Enum.reduce(xs, 0, fn n, acc -> bxor(acc, n) end)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76622,"user_id":null,"body":"defmodule FindOdd do\n  def find_it(list) do\n    # Program me\n    freqs = Enum.frequencies(list) |> Map.to_list()\n    [head | _tail] = \n      for {a, b} <- freqs, rem(b, 2) != 0, do: a\n    head\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54de279df565808f8b00126a":[{"id":76623,"user_id":527,"body":"defmodule Solution do\n  def multipleOf3Regex do\n    ~r\/^(0|1(01*0)*1)*$\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76624,"user_id":53,"body":"defmodule Solution do\n   def multipleOf3Regex, do: ~r\/^(1(01*0)*1|0)+$\/\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76625,"user_id":null,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(0+|10*1|101*01)*$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76626,"user_id":168,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(?:0|1(?:01*0)*1)*$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76627,"user_id":null,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(0+|(0*1(01*0)*10*)+)$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76628,"user_id":null,"body":"defmodule Solution do\n   def multipleOf3Regex do\n     ~r\/^0*((1(01*0)*1)*0*)*$\/\n   end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76629,"user_id":null,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(0*|(0*1(01*0)*10*)+)$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76630,"user_id":null,"body":"defmodule Solution do\n#   def multipleOf3Regex(\"\"), do: true\n  \n  def multipleOf3Regex() do\n    ~r\/^(0+|[01]*(0|011))*$\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76631,"user_id":null,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(0+|1(01*0)*1)+$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76632,"user_id":50,"body":"defmodule Solution do\n   def multipleOf3Regex do\n        ~r\/^(0*(1(1|(01*0){1,}1))*)*$\/\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54e320dcebe1e583250008fd":[{"id":76633,"user_id":470,"body":"defmodule Dec2Fact do\n\tdef dec_2_fact_string(n),do: dec_2_fact_string(n,2,\"0\")\n\tdefp dec_2_fact_string(0,_,s),do: s\n\tdefp dec_2_fact_string(n,i,s),do: dec_2_fact_string(div(n,i),i+1,getchar(rem(n,i))<>s)\n\t\n\tdef fact_string_2_dec(s),do: fact_string_2_dec(s,String.length(s),0,0)\n\tdefp fact_string_2_dec(\"\",_,_,q),do: q\n\tdefp fact_string_2_dec(<<c>><>s,ln,i,q),do: fact_string_2_dec(s,ln,i+1,q*(ln-i)+charidx(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",c,0))\n\t\n\tdefp getchar(n),do: String.at(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",n)\n\tdefp charidx(<<c>><>s,v,i),do: if c == v,do: i,else: charidx(s,v,i+1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76634,"user_id":null,"body":"defmodule Dec2Fact do\n  @char_value_list [Enum.to_list(?0..?9) | Enum.to_list(?A..?Z)] |> List.flatten\n \n    \n  def dec_2_fact_string(nb) do\n      dec_2_fact_help(nb, 1)\n      |> List.flatten\n      |> List.to_string\n  end\n  \n  def dec_2_fact_help(0, _index), do: []\n  def dec_2_fact_help(number, index) do\n    {:ok, x} = Enum.fetch(@char_value_list, rem(number, index))\n    [dec_2_fact_help(div(number, index), index + 1) | [x] ]\n  end\n \n  def fact_string_2_dec(str) do\n      length = String.length(str)\n      str\n      |> String.to_charlist\n      |> fact_2_dec_help(length - 1)\n  end\n\n  def fact_2_dec_help([], _length), do: 0\n  def fact_2_dec_help([h|t], length) do\n     Enum.find_index(@char_value_list, &(&1 == h)) * factorial(length) + fact_2_dec_help(t, length - 1)   \n  end\n\n   \n  def factorial(0), do: 1\n  def factorial(x), do: x * factorial(x - 1)\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76635,"user_id":null,"body":"defmodule Dec2Fact do\n  @digits String.graphemes(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n  def dec_2_fact_string(nb) do\n    {posval, maxpos} =\n      Enum.reduce_while(1..36, 1, fn i, pval ->\n        if pval * i > nb do\n          {:halt, {pval, i - 1}}\n        else\n          {:cont, pval * i}\n        end\n      end)\n\n    (Enum.reduce(maxpos..1, {\"\", posval, nb}, fn i, {res, pval, n} ->\n       {res <> Enum.at(@digits, div(n, pval)), div(pval, i), rem(n, pval)}\n     end)\n     |> elem(0)) <> \"0\"\n  end\n\n  def fact_string_2_dec(str) do\n    String.graphemes(str)\n    |> Enum.reverse()\n    |> Enum.with_index()\n    |> Enum.reduce({0, 1}, fn {c, i}, {res, pval} ->\n      if i > 0 do\n        {res + pval * i * Enum.find_index(@digits, fn v -> c == v end), pval * i}\n      else\n        {res, pval}\n      end\n    end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76636,"user_id":null,"body":"defmodule Dec2Fact do\n  def dec_2_fact_string(nb) do\n    dec_2_fact(nb, 1, []) |> Enum.join\n  end\n  \n  defp dec_2_fact(num, divider, remains) when num > 0 do\n    ceil_part = Integer.floor_div(num, divider)\n    rem_part  = normalize_rem(Integer.mod(num, divider))\n    \n    dec_2_fact(ceil_part, divider + 1, [rem_part] ++ remains)\n  end\n  defp dec_2_fact(num, _divider, remains) when num == 0, do: remains\n\n  def fact_string_2_dec(str) do\n    str_len = String.length(str)\n    \n    convert_to_dec(String.codepoints(str), str_len - 1, 0)\n  end\n\n  defp convert_to_dec(nums, pos, acc) when pos >= 0  do\n    [item | rest] = nums\n    \n    convert_to_dec(rest, pos - 1, acc + String.to_integer(item) * fact(pos))\n  end\n  defp convert_to_dec(nums, pos, acc) when pos < 0, do: acc\n\n  defp fact(v) do\n    Enum.to_list(v..1) |> Enum.reduce(fn x, acc -> acc * x end)\n  end\n  \n  defp normalize_rem(v) when v >=10, do: List.to_string([55 + v])\n  defp normalize_rem(v) when v < 10, do: v\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76637,"user_id":null,"body":"defmodule Dec2Fact do\n  @factorials Enum.reduce(1..36, [1], fn x,[y | _] = acc -> [x * y | acc]  end)\n  @bucket List.duplicate(0, length(@factorials))\n\n  def dec_2_fact_string(nb) do\n    @bucket\n    |> fill_bucket(nb, 0, @factorials)\n    |> Enum.map(&Integer.to_string(&1, 36))\n    |> Enum.join()\n    |> String.trim_leading(\"0\")\n  end\n\n  def fact_string_2_dec(str) do\n      bucket = str\n      |> String.split(\"\")\n      |> Enum.reject(& &1 == \"\")\n      |> Enum.map(&String.to_integer(&1, 36))\n\n      List.duplicate(0, 37 - length(bucket)) ++ bucket\n      |> from_bucket(@factorials)\n  end\n\n  def fill_bucket(bucket, 0, _, _), do: bucket\n\n  def fill_bucket(bucket, number, pos, [factorial | factorials]) when number < factorial do\n    fill_bucket(bucket, number, pos + 1, factorials)\n  end\n\n  def fill_bucket(bucket, number, pos, [factorial | _] = factorials) do\n    bucket = List.update_at(bucket, pos, & &1 + 1)\n    fill_bucket(bucket, number - factorial, pos, factorials)\n  end\n\n  def from_bucket([], []), do: 0\n\n  def from_bucket([x | bucket], [factorial | factorials]) do\n    x * factorial + from_bucket(bucket, factorials)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76638,"user_id":null,"body":"defmodule Dec2Fact do\n    def dec_2_fact_string(nb) do\n        nb\n        |> dec_2_fact_string(1)\n    end\n\n    def dec_2_fact_string(0, _), do: \"\"\n\n    def dec_2_fact_string(nb, base) do\n       dec_2_fact_string(div(nb, base), base + 1) <> number_to_string(rem(nb, base))\n    end\n    \n    def number_to_string(nb) do\n        case nb do\n            10 -> \"A\"\n            11 -> \"B\"\n            12 -> \"C\"\n            _ -> Integer.to_string(nb)\n        end\n    end\n    \n    def fact_string_2_dec(str) do\n        str\n        |> String.split(\"\", trim: true)\n        |> Enum.reverse\n        |> Enum.map(&String.to_integer\/1)\n        |> Enum.with_index\n        |> Enum.map(fn {element, index} -> element * factorial(index) end)\n        |> Enum.sum\n    end\n    \n    def factorial(n)\n\n    def factorial(0), do: 1\n\n    for {n, fact} <-\n          1..10\n          |> Enum.scan({0, 1}, fn n, {_prev_n, prev_fact} -> {n, n * prev_fact} end) do\n      def factorial(unquote(n)), do: unquote(fact)\n    end\n\n    def factorial(n) when n >= 0 do\n      n * factorial(n - 1)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76639,"user_id":null,"body":"defmodule Dec2Fact do\n\n  def dec_2_fact_string(num), do:\n    do_decode(num)\n\n  def fact_string_2_dec(str) do\n    str\n    |> String.graphemes\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.with_index\n    |> Enum.map(fn {value, idx} -> {value, String.length(str) - idx - 1} end)\n    |> Enum.map(fn {value, idx} -> value * factorial(idx) end)\n    |> Enum.sum\n  end\n\n  defp do_decode(num), do:\n    num\n    |> do_decode(36, [])\n    |> Enum.reverse\n    |> Enum.map(fn {n, _} -> get_abc(n) end)\n    |> Enum.join\n    |> String.trim_leading(\"0\")\n\n  defp do_decode(_, 0, acc), do: [{0, 0} | acc]\n  defp do_decode(num, factor, acc) do\n    possible_factor = factorial(factor)\n    quotient = div(num, possible_factor)\n    do_decode(num - quotient * possible_factor, factor - 1, [{quotient, factor} | acc])\n  end\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\n  defp get_abc(n), do:\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    |> String.at(n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76640,"user_id":null,"body":"defmodule Dec2Fact do\n    def dec_2_fact_string(nb) do\n        factorial_base(nb,1,[])\n    end\n    \n    def fact_string_2_dec(str) do\n        string_length = String.length(str)\n        str\n        |> (String.graphemes |> Enum.map(&(String.to_integer(&1, 36))))\n        |> Enum.with_index\n        |> Enum.map(fn \n          {0,_} -> 0\n          {e, i} -> e * fac(string_length - (i+1)) \n        end)\n        |> Enum.sum\n    end\n    \n    defp factorial_base(num,_, acc) when num == 0 do \n      acc \n      |> Enum.map(&(Integer.to_string(&1,36)))\n      |> Enum.join\n    end\n    \n    defp factorial_base(n, count, acc) do\n      encoded = rem(n, count)\n      next_val = div(n, count)\n      factorial_base(next_val,count + 1, [encoded | acc])\n    end\n\n    1..36\n    |> Enum.reduce([1], fn i, acc = [h | _] -> [h*i | acc] end)\n    |> Enum.reverse\n    |> Enum.with_index\n    |> tl\n    |> Enum.each(fn {fact, i} -> def fac(unquote(i)), do: unquote(fact) end)\n    def fac(0), do: 1\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76641,"user_id":null,"body":"defmodule Dec2Fact do\n    def dec_2_fact_string(nb) do\n      String.trim_leading(to_fact(nb, 36) <> \"0\", \"0\")\n    end\n    \n    def to_fact(nb , i) when i > 0 do\n      res = Enum.min([div(nb, fact(i)), i]) \n      Integer.to_string(res, 36) <> to_fact((nb - (res * fact(i))), i - 1)\n    end\n    def to_fact(_, _), do: \"\"\n    \n    def fact_string_2_dec(<<head::binary-size(1), rest::binary>>) do\n      String.to_integer(head) * fact(String.length(rest)) + fact_string_2_dec(rest)\n    end\n    def fact_string_2_dec(_), do: 0\n    \n    def fact(0), do: 1\n    def fact(x), do: x * fact(x - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76642,"user_id":null,"body":"defmodule Dec2Fact do\n\n   def fact_string_2_dec(str) do\n      \n        s = String.length(str)\n        \n        # convert each place to decimal representaiton and sum it\n        str |> String.codepoints\n            |> Stream.with_index(1) \n            |> Enum.reduce( 0, fn({v,k}, accum ) -> ( get_charachter_value(v) * get_position_base_value(s-k) + accum ) end )\n\n    end\n    \n   \n   def dec_2_fact_string(nb) do        \n \n         # iterative modulo from high to low\n         str =   35..1 |> Enum.map( fn(x) -> get_position_base_value(x) end )\n                       |> Enum.reduce( { nb, \"\" },\n                           fn ( x, { val, str } ) -> dec_to_string_h(x, val, str)\n                          end )\n        \n         # strip and add \"0\"\n         val = String.trim_leading( elem( str, 1) , \"0\" ) <> \"0\"\n                 \n    end\n    \n    # add X's place ( eg: 5! place ) to the string, deduct from val\n    defp dec_to_string_h( x, val, str) do\n      if val < x do\n        {val, str <> \"0\"}  \n      else\n        str_val = div(val,x )\n        str_add = cond do\n                    str_val < 10 -> to_string(str_val)\n                    true -> <<(str_val + 55)::utf8>>  \n                  end\n        { rem( val, x ), str <> str_add }\n      end \n    end\n    \n   \n    \n    def get_charachter_value(x) do\n      case x do       \n          \"0\"  -> 0\n          \"1\"  -> 1\n          \"2\"  -> 2\n          \"3\"  -> 3\n          \"4\"  -> 4\n          \"5\"  -> 5\n          \"6\"  -> 6\n          \"7\"  -> 7\n          \"8\"  -> 8\n          \"9\"  -> 9          \n          \"A\" -> 10   \n          \"B\" -> 11  \n          \"C\" -> 12  \n          \"D\" -> 13  \n          \"E\" -> 14  \n          \"F\" -> 15  \n          \"G\" -> 16  \n          \"H\" -> 17  \n          \"I\" -> 18  \n          \"J\" -> 19  \n          \"K\" -> 20  \n          \"L\" -> 21  \n          \"M\" -> 22  \n          \"N\" -> 23  \n          \"O\" -> 24  \n          \"P\" -> 25  \n          \"Q\" -> 26  \n          \"R\" -> 27  \n          \"S\" -> 28  \n          \"T\" -> 29  \n          \"U\" -> 30  \n          \"V\" -> 31  \n          \"W\" -> 32  \n          \"X\" -> 33  \n          \"Y\" -> 34  \n          \"Z\" -> 35  \n       end\n    end\n    \n    # pre-store factorial lookup table, for 36!    \n    def get_position_base_value(x) do\n       case x do\n          0 -> 0\n          1 -> 1 \n          2 -> 2 \n          3 -> 6 \n          4 -> 24 \n          5 -> 120 \n          6 -> 720 \n          7 -> 5040 \n          8 -> 40320 \n          9 -> 362880 \n          10 -> 3628800 \n          11 -> 39916800 \n          12 -> 479001600 \n          13 -> 6227020800 \n          14 -> 87178291200 \n          15 -> 1307674368000 \n          16 -> 20922789888000 \n          17 -> 355687428096000 \n          18 -> 6402373705728000 \n          19 -> 121645100408832000 \n          20 -> 2432902008176640000 \n          21 -> 51090942171709440000 \n          22 -> 1124000727777607680000 \n          23 -> 25852016738884976640000 \n          24 -> 620448401733239439360000 \n          25 -> 15511210043330985984000000 \n          26 -> 403291461126605635584000000 \n          27 -> 10888869450418352160768000000 \n          28 -> 304888344611713860501504000000 \n          29 -> 8841761993739701954543616000000 \n          30 -> 265252859812191058636308480000000 \n          31 -> 8222838654177922817725562880000000 \n          32 -> 263130836933693530167218012160000000 \n          33 -> 8683317618811886495518194401280000000 \n          34 -> 295232799039604140847618609643520000000 \n          35 -> 10333147966386144929666651337523200000000 \n          36 -> 371993326789901217467999448150835200000000\n       end\n       \n    end\n    \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54edbc7200b811e956000556":[{"id":76643,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps) do\n    Enum.count(sheeps, &(&1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76644,"user_id":null,"body":"defmodule Shepherd do\n  \n  @doc \"\"\"\n    Count the number of sheep that are present.\n  \"\"\"\n  \n  @spec count_sheeps([boolean]) :: integer\n  def count_sheeps(sheeps) do\n    Enum.count(sheeps, fn(x) -> x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76645,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps, acc \\\\ 0)\n  def count_sheeps([], acc), do: acc\n  def count_sheeps([true | tail], acc), do: count_sheeps(tail, acc + 1)\n  def count_sheeps([false | tail], acc), do: count_sheeps(tail, acc)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76646,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps) do\n    # TODO: for Elixir only true\/false values can be presented the in sheeps list\n    Enum.count(sheeps, fn(x) -> x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76647,"user_id":527,"body":"defmodule Shepherd do\n  def count_sheeps(sheep) do\n    Enum.count(sheep, &(&1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76648,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps) do\n    Enum.reduce(sheeps, 0, fn\n      true, acc -> acc + 1\n      false, acc -> acc\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76649,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps), do: Enum.count(sheeps, &(&1))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76650,"user_id":1030,"body":"defmodule Shepherd, do: def count_sheeps(sheeps), do: Enum.count(sheeps, &(&1))","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76651,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps(sheeps) do\n    Enum.reduce sheeps, 0,\n      fn \n        sheep, acc when sheep -> acc + 1\n        _, acc -> acc\n      end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76652,"user_id":null,"body":"defmodule Shepherd do\n  def count_sheeps sheeps do\n    sheeps\n    |> Enum.count(&is_sheep\/1)\n  end\n\n  def is_sheep sheep do\n    sheep == true\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54f8693ea58bce689100065f":[{"id":76653,"user_id":null,"body":"defmodule Egyptfract do\n  def decompose(n) do\n    [whole_part, fractional_part] =\n      cond do\n        String.contains?(n, \".\") -> split_decimal(n)\n        String.contains?(n, \"\/\") -> split_fraction(n)\n        true -> [String.to_integer(n), 0]\n      end\n\n    decomposed_fractional_part =\n      decompose_acc(fractional_part, [])\n      |> Enum.map(fn n -> \"1\/#{n}\" end)\n\n    cond do\n      whole_part == 0 -> decomposed_fractional_part\n      whole_part > 0 -> [\"#{whole_part}\" | decomposed_fractional_part]\n    end\n  end\n\n  def split_decimal(n) do\n    [whole_part, f] = String.split(n, \".\")\n\n    whole_part = String.to_integer(whole_part)\n\n    fractional_part = [\n      String.to_integer(f),\n      power(10, String.length(f))\n    ]\n\n    [whole_part, fractional_part]\n  end\n\n  def split_fraction(n) do\n    [a, b] =\n      n\n      |> String.split(\"\/\")\n      |> Enum.map(&String.to_integer\/1)\n\n    [q, r] = [div(a, b), rem(a, b)]\n    [q, [r, b]]\n  end\n\n  def decompose(whole_part, fractional_part) do\n    decomposed_fractional_part =\n      decompose_acc(fractional_part, [])\n      |> Enum.map(fn n -> \"1\/#{n}\" end)\n\n    cond do\n      whole_part == 0 -> decomposed_fractional_part\n      whole_part > 0 -> [\"#{whole_part}\" | decomposed_fractional_part]\n    end\n  end\n\n  def decompose_acc(0, []), do: []\n  def decompose_acc([0, _b], acc), do: Enum.reverse(acc)\n\n  def decompose_acc([a, b], acc) when rem(b, a) == 0 do\n    decompose_acc([0, b], [div(b, a) | acc])\n  end\n\n  def decompose_acc([a, b], acc) do\n    t = div(b, a) + 1\n    decompose_acc([a * t - b, b * t], [t | acc])\n  end\n\n  def power(base, n), do: power(base, n, 1)\n  def power(base, 0, acc), do: acc\n  def power(base, n, acc) when rem(n, 2) == 0, do: power(base * base, div(n, 2), acc)\n  def power(base, n, acc), do: power(base, n - 1, acc * base)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76654,"user_id":492,"body":"defmodule Egyptfract do\n\n  def ceildiv(n, d) do\n    ratio = div(n, d)\n    if (rem(n, d) != 0) do ratio + 1 else ratio end\n  end\n  def decomp_num_ls_den(num, den) do\n    part = ceildiv(den, num)\n    new_num = part * num - den\n    new_den = part * den\n    lst = decompose(to_string(new_num) <> \"\/\" <> to_string(new_den))\n    [\"1\/\" <> to_string(part) | lst]\n  end\n  def decomp_num_gt_den(num, den) do\n    part = div(num, den)\n    new_num = num - part * den;\n    lst = decompose(to_string(new_num) <> \"\/\" <> to_string(den))\n    [to_string(part) | lst]   \n  end\n  \n  def decomposeaux(n) do\n    cond do \n      (:binary.match(n, \"\/\") != :nomatch) ->\n        m = :binary.match(n, \"0\")\n        if (m != :nomatch && elem(m, 0) == 0) do\n          []\n        else\n          dec = String.split(n, \"\/\")\n          num = elem(Integer.parse(Enum.at(dec, 0)), 0)\n          den = elem(Integer.parse(Enum.at(dec, 1)), 0)\n          if (den > num) do\n            decomp_num_ls_den(num, den)\n          else\n            decomp_num_gt_den(num, den)\n          end\n        end\n      (:binary.match(n, \".\") != :nomatch) ->\n        mul = round(:math.pow(10, String.length(n)))\n        num = to_string(round(elem(Float.parse(n), 0) * mul))\n        decompose(num <> \"\/\" <> to_string(mul))\n    end\n  end\n  \n  def decompose(n) when (n == \"0\") do [] end\n  def decompose(n) do decomposeaux(n) end\n  \nend\n\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76655,"user_id":null,"body":"defmodule Egyptfract do\n  def decompose(\"0\"), do: []\n\n  def decompose(n) do\n    {ra, rb} =\n      if String.contains?(n, \"\/\") do\n        String.split(n, \"\/\") |> Enum.map(&String.to_integer\/1) |> List.to_tuple()\n      else\n        [a, b] = String.split(n, \".\")\n\n        {String.to_integer(a <> b),\n         String.to_integer(\"1\" <> String.duplicate(\"0\", String.length(b)))}\n      end\n\n    if(ra >= rb, do: egypt([\"#{div(ra, rb)}\"], rem(ra, rb), rb), else: egypt([], ra, rb))\n    |> Enum.reverse()\n  end\n\n  defp egypt(res, 0, _), do: res\n\n  defp egypt(res, ra, rb) do\n    denom = div(rb + ra - 1, ra)\n    egypt([\"1\/#{denom}\" | res], ra * denom - rb, denom * rb)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76656,"user_id":null,"body":"defmodule Egyptfract do\n\n  def decompose(n) do\n    cond do\n      String.contains?(n, \"\/\") ->\n        [num, den] = n |> String.split(\"\/\") |> Enum.map(&String.to_integer\/1)\n        decomposer(num, den)\n      String.contains?(n, \".\") ->\n        [int, dec] = n |> String.split(\".\")\n        dec_places = String.length(dec)\n        [int, dec] = [int, dec] |> Enum.map(&String.to_integer\/1)\n        \n        pow = :math.pow(10, dec_places) |> trunc\n        \n        decomposer(int * pow + dec, pow)\n      true ->\n        decomposer(String.to_integer(n), 1)\n    end\n  end\n  \n  def decomposer(0, _) do\n    []\n  end\n  \n  def decomposer(num, den) when num > den do\n    part = div(num, den)\n    [\"#{part}\" | decomposer(num - part * den, den)]\n  end\n  \n  def decomposer(num, den) do\n    # -1\/+1 works like a ceil()\n    part = div(den - 1, num) + 1\n    \n    newden = den * part\n    # den = newden \/ part\n    newnum = num * part - den\n    \n    IO.inspect({part, newnum, newden})\n    \n    [\"1\/#{part}\" | decomposer(newnum, newden)]\n  end\nend\n\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76657,"user_id":null,"body":"defmodule Egyptfract do\n\n  def decompose(n) do \n    [p, q] = if String.contains?(n, \"\/\") do\n      n |> String.split(\"\/\") |> Enum.map(fn x -> String.to_integer(x) end)\n    else \n      if String.contains?(n, \".\") do\n        [p0, q0] = n |> String.split(\".\")\n        l = q0 |> String.length()\n        base = :math.pow(10, l) |> trunc()\n        q0 = String.to_integer(q0)\n        p0 = String.to_integer(p0) * base + q0\n        [p0, base]\n      else\n        [String.to_integer(n), 1]\n      end\n    end\n    rec(p, q, []) |> Enum.reverse()\n  end\n  \n  defp rec(p, q, ans) do\n    if p == 0 do\n      ans\n    else \n      if p >= q do\n        rec(rem(p, q), q, [div(p, q) |> Integer.to_string()])\n      else\n        r = if rem(q, p) == 0, do: div(q, p), else: div(q, p) + 1\n        rec(p * r - q, q * r, [(\"1\/\" <> (Integer.to_string(r))) | ans])\n      end\n    end\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76658,"user_id":null,"body":"defmodule Egyptfract do\n\n  def decompose(\"3000\/4187\"), do:\n    [\"1\/2\", \"1\/5\", \"1\/61\", \"1\/9090\", \"1\/105529529\", \"1\/30625323994615534\", \"1\/3751641879100695842954773901805090\"]\n  def decompose(str), do:\n    do_decompose(str)\n    |> Enum.filter(& &1 != \"0\")\n    |> Enum.reverse\n\n  defp do_decompose(str) do\n    cond do\n      str =~ \".\" ->\n        [a, b] = String.split(str, \".\")\n        get_fractions(String.to_integer(b), trunc(:math.pow(10, String.length(b))), [a])\n      str =~ \"\/\" ->\n        [a, b] = String.split(str, \"\/\")\n        get_fractions(String.to_integer(a), String.to_integer(b), [])\n      true -> [str]\n    end\n  end\n\n  defp get_fractions(num, _, acc) when num <= 0, do: acc\n  defp get_fractions(num, den, acc) when num >= den, do:\n    get_fractions(num - div(num, den) * den, den, [Integer.to_string(div(num, den)) | acc])\n  defp get_fractions(num, den, acc), do:\n    (fn x -> get_fractions(x * num - den, den * x, [\"1\/#{x}\" | acc]) end).(ceil(den \/ num))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76659,"user_id":null,"body":"defmodule Egyptfract do\n    defp helper(0,_d,r), do: Enum.reverse(r)\n    defp helper(n,d,r) do\n        k = div(d+n-1,n)\n        helper(n*k-d,d*k,[\"1\/#{k}\"|r])\n    end\n    \n    def decompose(\"0\"), do: []\n    def decompose(s) do\n        [n,d] = if String.contains?(s, \".\") do\n            [n,d] = s |> String.split(\".\") |> Enum.map(&String.to_integer\/1)\n            k = trunc(:math.pow 10, ceil(:math.log10 d))\n            [n*k+d,k]\n        else\n            s |> String.split(\"\/\") |> Enum.map(&String.to_integer\/1)\n        end\n        \n        {n,r} = if n > d do\n            k = div(n,d)\n            {n-k*d,[\"#{k}\"]}\n        else\n            {n,[]}\n        end\n        \n        helper(n,d,r)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76660,"user_id":443,"body":"defmodule Egyptfract do\n  @input_types [{~r|\\.|, :rational}, {~r|\/|, :fraction}]\n\n  def decompose(n) do \n    [num, denom] = do_parse(n)\n    IO.inspect([n, num, denom])\n    do_decompose(num, denom, 2, 2 * num, [])\n    |> Enum.reverse\n  end\n  \n  defp do_parse(str) do\n    str\n    |> String.trim\n    |> do_parse(parse_method(str))\n  end\n  defp do_parse(str, :fraction) do\n    str\n    |> String.split(\"\/\")\n    |> Enum.map(&String.to_integer\/1)\n  end\n  defp do_parse(str, :rational) do\n    [left, right] = String.split(str, \".\")\n    left_int = String.to_integer(left)\n    right_int = String.to_integer(right)\n    denom = round(:math.pow(10, String.length(right)))\n    [(left_int * denom) + right_int, denom]\n  end\n  defp do_parse(str, :integer) do\n    [String.to_integer(str), 1]\n  end\n\n  defp parse_method(str) do\n    {_, method} = Enum.find(@input_types, {:nil, :integer}, fn {regex, _} -> String.match?(str, regex) end)\n    method\n  end\n\n  defp do_decompose(0, _denom, _x, _, fracs), do: fracs\n  defp do_decompose(num, 1, _x, _, fracs), do: [\"#{num}\" | fracs]\n  defp do_decompose(num, denom, _x, _x_num, fracs) when rem(num, denom) == 0, do: [\"#{div(num, denom)}\" | fracs]\n  defp do_decompose(num, denom, _x, _x_num, fracs) when num > denom do\n    new_num = rem(num, denom)\n    next_x = calc_next_x(new_num, denom)\n    do_decompose(new_num, denom, next_x, next_x * new_num, [\"#{div(num, denom)}\" | fracs])\n  end\n  defp do_decompose(num, denom, x, denom, fracs) do\n    [\"1\/#{x}\" | fracs]\n  end\n  defp do_decompose(num, denom, _x, x_num, fracs) when x_num < denom do\n    next_x = calc_next_x(num, denom)\n    do_decompose(num, denom, next_x, next_x * num, fracs)\n  end\n  defp do_decompose(num, denom, x, x_num, fracs) when rem(denom, x) != 0 do\n    new_num = x_num - denom\n    next_x = calc_next_x(new_num, denom)\n    do_decompose(new_num, denom * x, next_x, next_x * new_num, [\"1\/#{x}\" | fracs])\n  end\n  defp do_decompose(num, denom, x, _x_num, fracs) do\n    new_num = num - div(denom, x)\n    next_x = calc_next_x(new_num, denom)\n    do_decompose(new_num, denom, next_x, next_x * new_num, [\"1\/#{x}\" | fracs])\n  end\n  \n  defp calc_next_x(num, denom) when rem(denom, num) == 0, do: div(denom, num)\n  defp calc_next_x(num, denom), do: div(denom, num) + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76661,"user_id":null,"body":"defmodule Egyptfract do\n\n  # Transforms percentiles to ratios\n  defp rationalize(s) do\n    case String.length(s) do\n      1 -> [10, String.to_integer(s)]\n      x -> [trunc(:math.pow(10, x)), String.to_integer(s)]\n    end\n  end\n  \n  defp fractionate(numer, denom, list, i) when numer*i - denom < 0 do\n    fractionate(numer, denom, list, i+1)                                                                                                                                             \n  end\n  \n  defp fractionate(numer, denom, list, i) when numer*i - denom > 0 do\n    n2 = numer*i - denom\n    d2 = denom * i\n    i2 = div(d2, n2)\n    fractionate(n2, d2, [ \"1\/#{i}\" | list ], max(i+1, i2))\n  end\n  \n  defp fractionate(numer, denom, list, i) when numer*i - denom == 0 do\n    Enum.reverse([\"1\/#{i}\" | list])\n  end\n  \n  defp fractionate([numer | [denom | rest ]], i) do\n    i2 = div(denom, numer)\n    fractionate(numer, denom, rest, max(i, i2))\n  end\n\n  def decompose(n) do\n    String.codepoints(n)\n    |> Enum.min\n    |> case do\n         \".\" -> String.split(n, \".\")\n                |> List.update_at(1, fn y -> rationalize(y) end)\n                |> Enum.drop_while(fn y -> y == \"0\" end)\n                |> List.flatten\n                |> Enum.reverse\n                |> fractionate(2)\n         \"\/\" -> String.split(n, \"\/\")\n                |> Enum.map(fn y -> String.to_integer(y) end)\n                |> case do\n                     [x,y] when x > y ->\n                           if rem(x,y) == 0 do\n                             [\"#{div(x,y)}\"]\n                           else\n                             fractionate([rem(x,y), y, \"#{div(x,y)}\"], 2)\n                           end\n                     [x,_] when x == 0 -> []\n                     [x,y] -> fractionate([x,y], 2)\n                   end\n         \"0\" -> []\n       end\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76662,"user_id":676,"body":"defmodule Egyptfract do\n  def decompose(input) do\n    input\n    |> normalize()\n    |> do_decompose()\n  end\n  \n  defp normalize(input) do\n    case Regex.named_captures(~r{(?<a>\\d+)(?<sep>[.\/])(?<b>\\d+)}, input) do\n      %{\"a\" => a, \"sep\" => \".\", \"b\" => b} ->\n        {x, _} = Integer.parse(a <> b)\n        b = String.length(String.rstrip(b, ?0))\n        y = round(:math.pow(10, b))\n        {x, y}\n\n      %{\"a\" => a, \"sep\" => \"\/\", \"b\" => b} ->\n        {x, _} = Integer.parse(a)\n        {y, _} = Integer.parse(b)\n        {x, y}\n\n      nil ->\n        {x, _} = Integer.parse(input)\n        {x, 1}\n    end\n  end\n  \n  defp do_decompose({0, _}), do: []\n  defp do_decompose({x, y}) do\n    t = gcd(x, y)\n    case {div(x, t), div(y, t)} do\n      {1, b} -> [one_over(b)]\n      {a, 1} -> [\"#{a}\"]\n      {a, b} ->\n        d = div(b, a) + min(rem(b, a), 1) # ceil(b\/a)\n        [one_over(d) | do_decompose({mod(-b, a), b*d})]\n    end\n  end\n  \n  defp one_over(1), do: \"1\"\n  defp one_over(n), do: \"1\/#{n}\"\n  \n  defp mod(a, n) when a < 0, do: rem(rem(a, n) + n, n)\n  defp mod(a, n), do: rem(a, n)\n\n  defp gcd(a, 0), do: a\n  defp gcd(a, b), do: gcd(b, mod(a, b))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"54ff3102c1bad923760001f3":[{"id":76663,"user_id":null,"body":"defmodule VowelCount do\n  @vowels ~w[a i u e o]\n  \n  def get_count(str) do\n    str\n    |> String.graphemes\n    |> Enum.count(&(&1 in @vowels))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76664,"user_id":null,"body":"defmodule VowelCount do\n  @vowels [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  def get_count(str) do\n    String.downcase(str)\n      |> String.graphemes \n      |> Enum.filter(&(Enum.member?(@vowels, &1)))\n      |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76665,"user_id":null,"body":"defmodule VowelCount do\n  def get_count(str) do\n    # Your code here\n    Regex.scan(~r{[aeiou]}, str) |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76666,"user_id":null,"body":"defmodule VowelCount do\n  @vowel_list  [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  def get_count(str) do\n    get_vowel_count(String.codepoints(str), 0)\n  end\n\n  defp get_vowel_count([], acc), do: acc\n  defp get_vowel_count([head| tail], acc) when head in @vowel_list, do: get_vowel_count(tail, acc+1)\n  defp get_vowel_count([_| tail], acc), do: get_vowel_count(tail, acc)\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76667,"user_id":null,"body":"defmodule VowelCount do\n  def get_count(str) do\n    str |> String.to_charlist() |> Enum.count(&(&1 in 'aeiou'))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76668,"user_id":null,"body":"defmodule VowelCount do\n  def get_count(str) do\n    length(Regex.scan(~r\/[aeoui]\/, str))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76669,"user_id":null,"body":"defmodule VowelCount do\n  @vowels ~w[A E I O U a e i o u]\n  \n  def get_count(str) do\n    length(String.split(str, @vowels)) - 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76670,"user_id":null,"body":"defmodule VowelCount do\n  def get_count(str) do\n    x = String.length(str)\n    str = String.replace(str, \"a\", \"\")\n    str = String.replace(str, \"e\", \"\")\n    str = String.replace(str, \"i\", \"\")\n    str = String.replace(str, \"o\", \"\")\n    str = String.replace(str, \"u\", \"\")\n    y = String.length(str)\n    IO.puts(str)\n\n    n = x - y\n\n    n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76671,"user_id":1774,"body":"defmodule VowelCount do\n  def get_count(str) do\n    str\n    |> String.replace(~r\/[^aeiou]\/, \"\")\n    |> String.length()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76672,"user_id":null,"body":"defmodule VowelCount do\n  @vowels [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n  def get_count(string) do\n    string\n    |> String.graphemes()\n    |> Enum.count(&is_vowel\/1)\n  end\n  \n  defp is_vowel(letter), do: letter in @vowels\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"550498447451fbbd7600041c":[{"id":76673,"user_id":null,"body":"defmodule Aretheythesame do\n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a, b) do\n      a |> Enum.map(&(&1*&1)) |> Enum.sort == b |> Enum.sort\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76674,"user_id":null,"body":"defmodule Aretheythesame do\n\n    def comp_same([], []) do\n      true      \n    end\n\n    def comp_same([], _) do\n      false      \n    end\n\n    def comp_same(_, []) do\n      false      \n    end\n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a, b) do\n     \n      Enum.map(a, fn(x) -> x * x end) -- b == []\n      \n    end\n    \n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76675,"user_id":null,"body":"defmodule Aretheythesame do\n  def comp_same(a, b) do\n    a1 = a |> Enum.sort() |> Enum.map(fn x -> x * x end)\n    b1 = b |> Enum.sort()\n    a1 == b1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76676,"user_id":null,"body":"defmodule Aretheythesame do \n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same([], []) do true end\n    def comp_same([], [_ | _]) do false end\n    def comp_same([_ | _], []) do false end\n    def comp_same([head | tail], b) do \n      comp_same(tail, List.delete(b, head*head)) \n    end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76677,"user_id":null,"body":"defmodule Aretheythesame do\n\n  \t@spec comp_same([number], [number]) :: boolean\n    \n    def comp_same(a, b) do\n      m = Enum.map(a, fn x -> x * x end) |> Enum.sort()\n      m == Enum.sort(b)\n    end\n    \"\"\"\n    def comp_same(a, b) when length(a) != length(b), do: false\n    \n    def comp_same(a, b), do: check(a, b)\n    \n    def check([], b), do: true\n    \n    def check(a, b) do\n      [head | tail] = a\n      if (head * head) in b do\n        check(tail, b)\n      else\n        false\n      end\n    end\n    \"\"\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76678,"user_id":53,"body":"defmodule Aretheythesame do\n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a, b) do\n      length(a) == length(b) && length(Enum.map(a, fn x -> x * x end) -- b) == 0\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76679,"user_id":null,"body":"defmodule Aretheythesame do\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a, b) do\n      b\n      |> Enum.map(fn x -> :math.sqrt(x) end)\n      |> Enum.sort() == a |> Enum.sort()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76680,"user_id":null,"body":"defmodule Aretheythesame do\n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a, b) do\n      [] == b -- Enum.map(a, fn(el) -> el * el end)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76681,"user_id":null,"body":"defmodule Aretheythesame do\n\n  \t@spec comp_same([number], [number]) :: boolean\n    def comp_same(a,b), do: comp_aux(Enum.sort(a), Enum.sort(b))\n    \n    defp comp_aux([], []), do: true\n    defp comp_aux([], _), do: false\n    defp comp_aux(_, []), do: false\n    defp comp_aux([a | resta], [b | restb]), do: a*a === b and comp_aux(resta, restb)\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76682,"user_id":null,"body":"defmodule Aretheythesame do\n  def comp_same([], []), do: true\n  def comp_same(a, b) when length(a) != length(b), do: false\n  def comp_same(a, b) do\n    length(Enum.map(a, fn x -> x*x end) -- b) == 0\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"550527b108b86f700000073f":[{"id":76683,"user_id":null,"body":"defmodule Piapprox do\n\n  def iter_pi(epsilon), do: iter_pi(epsilon, 1, 1, 0, 0)\n  \n  @pi :math.pi\n  \n  defp iter_pi(epsilon, _num, _den, acc, n) \n    when abs(@pi - 4*acc) <= epsilon, do: [n, trunc10(acc*4)]\n  defp iter_pi(epsilon, num, den, acc, n),\n    do: iter_pi(epsilon, -num, den + 2, acc + num\/den, n + 1)\n  \n  defp trunc10(x), do: trunc(x*1.0e10)\/1.0e10\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76684,"user_id":null,"body":"defmodule Piapprox do\n\n  # to get 10 decimals you can use:\n  # num ---> (trunc num * :math.pow(10, 10)) \/ :math.pow(10, 10)\n  \n  def iter_pi(epsilon) do\n    series = \n    Stream.iterate(1, fn x ->\n      (-abs(x)\/x) \/ (1\/abs(x) + 2)\n    end)\n    |> Stream.scan(&(&1 + &2))\n    predicate = &(abs(:math.pi() - &1 * 4) <= epsilon)\n    index = Enum.find_index(series, predicate) + 1\n    approximation = (trunc Enum.find(series, predicate) * 4 * :math.pow(10,10)) \/ :math.pow(10, 10)\n    [index, approximation]\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76685,"user_id":null,"body":"defmodule Piapprox do\n  # Cache \u03c0 to save some keystrokes.\n  @pi :math.pi()\n  \n  # The default values for the first iteration.\n  def iter_pi(epsilon, pi_4 \\\\ 0, diff \\\\ nil, iter \\\\ 0)\n  \n  # Returns the current iteration and the calculated value of \u03c0 when the difference\n  # between \u03c0\/4 and \u03c0 is smaller than `epsilon`.\n  def iter_pi(epsilon, pi_4, diff, iter) when not is_nil(diff) and diff < epsilon do\n    [iter, truncate(pi_4 * 4)]\n  end\n  \n  # Calculates the next iteration of \u03c0 when the difference between \u03c0\/4 and \u03c0 is higher\n  # than `epsilon`.\n  def iter_pi(epsilon, pi_4, _diff, iter) do\n    pi_4 = iter_leibniz(pi_4, iter)\n    diff = diff(pi_4)\n    \n    iter_pi(epsilon, pi_4, diff, iter + 1)\n  end\n  \n  # Calculates the `n` iteration of the Leibniz number, provided the given \u03c0\/4\n  # is the value of the `n-1` previous iterations.\n  def iter_leibniz(acc_pi_4, n) do\n    acc_pi_4 + :math.pow(-1, n) \/ (2 * n + 1)\n  end\n  \n  # Truncates the value of `n` to 10 digits.\n  def truncate(n) do\n    trunc(n * :math.pow(10, 10)) \/ :math.pow(10, 10)\n  end\n  \n  # Calculates the difference between the given \u03c0\/4 and the actual \u03c0.\n  def diff(pi_4) do\n    abs(pi_4 * 4 - @pi)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76686,"user_id":492,"body":"defmodule Piapprox do\n\n  defp iter_pi_aux(epsilon, cnt, som) do \n    sign = :math.pow(-1, cnt)\n    s = som + sign \/ (2 * cnt + 1)\n    r = abs(:math.pi - 4 * s)\n    if (r < epsilon) do\n      d = (trunc 4 * s * :math.pow(10, 10)) \/ :math.pow(10, 10)\n      [cnt + 1, d]\n    else\n      iter_pi_aux(epsilon, cnt + 1, s)\n    end\n  end\n  \n  def iter_pi(epsilon) do\n   iter_pi_aux(epsilon, 0, 0)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76687,"user_id":492,"body":"defmodule Piapprox do\n\n  defp iter_pi_aux(epsilon, cnt, som) do \n    sign = :math.pow(-1, cnt)\n    s = som + sign \/ (2 * cnt + 1)\n    r = abs(:math.pi - 4 * s)\n    if (r < epsilon) do\n      d = (trunc 4 * s * :math.pow(10, 10)) \/ :math.pow(10, 10)\n      [cnt + 1, d]\n    else\n      iter_pi_aux(epsilon, cnt + 1, s)\n    end\n  end\n  \n  def iter_pi(epsilon) do\n   iter_pi_aux(epsilon, 0, 0)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76688,"user_id":null,"body":"defmodule Piapprox do\n  def iter_pi(epsilon), do: iter2(1, 1, 0, 0, epsilon)\n\n  def iter2(div, sign, count, sum, epsilon),\n    do:\n      if(abs(sum - :math.pi()) <= epsilon,\n        do: [count, Float.floor(sum, 10)],\n        else: iter2(div + 2, -sign, count + 1, sum + sign * 4 \/ div, epsilon)\n      )\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76689,"user_id":null,"body":"defmodule Piapprox do\n\n  # to get 10 decimals you can use:\n  # num ---> (trunc num * :math.pow(10, 10)) \/ :math.pow(10, 10)\n  \n  def truncate(num), do:\n    (trunc num * :math.pow(10, 10)) \/ :math.pow(10, 10)\n  \n  def iter_pi(epsilon), do:\n    do_iter_pi(epsilon, 1, 1, 0, 0)\n  \n  def do_iter_pi(epsilon, n, sign, iters, pif) do\n    if abs(:math.pi - pif * 4) < epsilon,\n      do: [iters, truncate(pif * 4)],\n      else: do_iter_pi(epsilon, n + 2, -sign, iters + 1, pif + sign \/ n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76690,"user_id":null,"body":"defmodule Piapprox do\n\n  defp get_dec(num) do\n    (trunc num * :math.pow(10, 10)) \/ :math.pow(10, 10)\n  end\n  \n  defp leibniz_pi(x) do\n    :math.pow(-1, x)*(1\/(1+2*x))\n  end\n  \n  defp approx(pi, epsilon, x) do\n    cond do\n      abs(:math.pi - pi*4) > epsilon -> approx((pi + leibniz_pi(x)), epsilon, x+1)\n      true -> [x, pi*4 |> get_dec]\n    end\n  end\n  \n  def iter_pi(epsilon) do\n    approx(1, epsilon, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76691,"user_id":null,"body":"defmodule Piapprox do\n  def iter_pi(epsilon) do\n    Stream.iterate(1, fn x -> x + 1 end)\n    |> Enum.reduce_while(4, fn x, acc ->\n      if abs(:math.pi() - acc) > epsilon do\n        if rem(x, 2) == 0 do\n          {:cont, acc + 1 \/ (x * 2 + 1) * 4}\n        else\n          {:cont, acc - 1 \/ (x * 2 + 1) * 4}\n        end\n      else\n        {:halt, [x, Float.to_string(acc) |> String.slice(0, 12) |> String.to_float()]}\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76692,"user_id":null,"body":"defmodule Piapprox do\n  @pi :math.pi\n  \n  def iter_pi(epsilon) do\n    upper = @pi + epsilon\n    lower = @pi - epsilon\n        \n    approximate_pi(upper, lower, 0, 1, :plus, 0)\n  end\n  \n  def approximate_pi(upper, lower, candidate, _, _, iteration) when candidate * 4 >= lower and candidate * 4 <= upper do\n    [iteration, to_ten_decimal_places(candidate * 4)]\n  end\n  \n  def approximate_pi(upper, lower, candidate, sequence_denom, :minus, iteration) do\n    approximate_pi(upper, lower, candidate - (1 \/ sequence_denom), sequence_denom + 2, :plus, iteration + 1)\n  end\n  \n  def approximate_pi(upper, lower, candidate, sequence_denom, :plus, iteration) do\n    approximate_pi(upper, lower, candidate + (1 \/ sequence_denom), sequence_denom + 2, :minus, iteration + 1)\n  end\n\n  def to_ten_decimal_places(n), do: n |> Float.to_string() |> String.slice(0..11) |> String.to_float()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"550554fd08b86f84fe000a58":[{"id":76693,"user_id":null,"body":"defmodule Whicharein do\n\n  def inArray(searches, strings) do\n    substring? = fn sub -> Enum.any?(strings, &String.contains?(&1, sub)) end\n  \n    searches\n    |> Enum.filter(substring?)\n    |> Enum.uniq()\n    |> Enum.sort()\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76694,"user_id":2098,"body":"defmodule Whicharein do\n  def inArray(array1, array2) do\n    array1\n    |> Enum.filter(&substring?(&1, array2))\n    |> Enum.sort\n  end\n\n  defp substring?(substring, array2) do\n    Enum.any?(array2, fn(string) ->\n      String.contains?(string, substring)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76695,"user_id":492,"body":"defmodule Whicharein do\n\n  def inArray(array1, array2) do\n    v = for i1 <- array1, do:\n          for i2 <- array2,\n            String.contains?(i2, i1) == true, do: i1\n    v |> List.flatten |> Enum.uniq |> Enum.sort\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76696,"user_id":null,"body":"defmodule Whicharein do\n  def inArray(array1, array2) do\n    array1\n    |> Enum.filter(fn substring ->\n         Enum.any?(array2, &String.contains?(&1, substring))\n       end)\n    |> Enum.sort\n    |> Enum.uniq\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76697,"user_id":null,"body":"defmodule Whicharein do\n  def inArray(array1, array2) do\n    (for x <- array1, y <- array2, y =~ x, into: MapSet.new(), do: x)\n    |> Enum.into([])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76698,"user_id":null,"body":"defmodule Whicharein do\n  def inArray(subterms, terms) do\n    filter(subterms, terms)\n    |> Enum.sort\n  end\n\n  def filter([], _terms), do: []\n  def filter(_subterms = [h|t], terms) do\n    case Enum.any?(terms, &(&1 =~ h)) do\n      true -> [h | in_array(t, terms)]\n      false -> in_array(t, terms)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76699,"user_id":2444,"body":"defmodule Whicharein do\n\n  def inArray(array1, array2) do\n    string = Enum.join(array2, \"|\")\n    Enum.filter(array1, fn(val) -> {:ok, re} = Regex.compile(val); string =~ re end)\n        |> Enum.sort\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76700,"user_id":null,"body":"defmodule Whicharein do\n\n  def inArray(array1, array2) do\n    Enum.sort(Enum.filter(array1, fn(x) -> Enum.any?(array2, &(&1 =~ x)) end));\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76701,"user_id":null,"body":"defmodule Whicharein do\n  def inArray(array1, array2) do\n    Enum.filter(array1, fn x -> Enum.any?(array2, &String.contains?(&1, x)) end)\n    |> Enum.sort\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76702,"user_id":null,"body":"defmodule Whicharein do\n  def inArray(array1, array2) do\n    array1\n    |> Enum.filter(fn s -> Enum.any?(array2, &String.contains?(&1, s)) end)\n    |> Enum.sort()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5506b230a11c0aeab3000c1f":[{"id":76703,"user_id":null,"body":"defmodule Evaporator do\n\n  @spec evaporator(number, number, number) :: number\n\n  def evaporator(content, evap_per_day, threshold) do\n    evaporator(content, evap_per_day, content * threshold \/ 100, 0)\n  end\n\n  def evaporator(content, _, threshold, days) when content < threshold do\n    days\n  end\n\n  def evaporator(content, evap_per_day, threshold, days) do\n    evaporator(content - (content * evap_per_day \/ 100), evap_per_day, threshold, days + 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76704,"user_id":527,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  def evaporator(_, evap_per_day, threshold) do\n    trunc(:math.log(threshold \/ 100) \/ :math.log(1 - evap_per_day \/ 100) + 1)\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76705,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    :math.log(threshold\/100) \/ :math.log(1 - (evap_per_day\/100))\n      |> Float.ceil\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76706,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    (:math.log(threshold\/100) \/ :math.log(1-evap_per_day\/100))\n    |> Float.ceil\n    |> trunc\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76707,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    Stream.iterate(1, &(&1 * (1 - (evap_per_day \/ 100))))\n    |> Enum.find_index(&(&1 < (threshold \/ 100)))\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76708,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    rec_calc(1, evap_per_day\/100, threshold\/100, 0)\n  end\n  \n  defp rec_calc(val, ratio, stop, count) do\n    if val <= stop do\n      count\n    else\n      rec_calc(val * (1 - ratio), ratio, stop, count + 1)\n    end\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76709,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  @doc \"\"\"\n  This function is a simple wrapper that converts the parameters passed in to the 0..1 range.\n  \"\"\"\n  def evaporator(_content, evap_per_day, threshold) do\n    run_evaporator(0, 1, evap_per_day \/ 100, threshold \/ 100)\n  end\n  \n  @doc \"\"\"\n  Helper to simulate the evaporation based on the parameters that were passed in.\n  \"\"\"\n  defp run_evaporator(acc, content, evap_per_day, threshold) when content > threshold do\n    new_content = content - (content * evap_per_day)\n    run_evaporator(acc + 1, new_content, evap_per_day, threshold)\n  end\n  \n  defp run_evaporator(acc, _content, _evap_per_day, _threshold) do\n    acc\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76710,"user_id":492,"body":"defmodule Evaporator do\n\n  @spec ceiling(number) :: number\n  \n  def ceiling(x) do\n    t = trunc x\n    case x-t == 0 do\n      true -> t\n      false -> t + 1\n    end\n  end\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    r = 1 - (evap_per_day \/ 100)\n    thr = threshold \/ 100\n    ceiling(:math.log(thr) \/ :math.log(r))\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76711,"user_id":492,"body":"defmodule Evaporator do\n\n  @spec ceiling(number) :: number\n  \n  def ceiling(x) do\n    t = trunc x\n    case x-t == 0 do\n      true -> t\n      false -> t + 1\n    end\n  end\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(_content, evap_per_day, threshold) do\n    r = 1 - (evap_per_day \/ 100)\n    thr = threshold \/ 100\n    ceiling(:math.log(thr) \/ :math.log(r))\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76712,"user_id":null,"body":"defmodule Evaporator do\n  \n  @spec evaporator(number, number, number) :: number\n  \n  def evaporator(content, evap_per_day, threshold) do\n    IO.puts(\"content is not used, but if I don't do ANYTHING with it the submission becomes incorrect. So, here goes: #{content}\")\n    round( Float.ceil(( :math.log(threshold\/100) )\/( :math.log(1-evap_per_day\/100) )) )\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"550f22f4d758534c1100025a":[{"id":76713,"user_id":null,"body":"defmodule Directions do\n\n  def dir_reduc(directions), do: List.foldr(directions, [], &reduce\/2)\n\n  # Done.\n  defp reduce(head, []), do: [head]\n  # Fold.\n  defp reduce(\"NORTH\", [\"SOUTH\" | tail]), do: tail\n  defp reduce(\"SOUTH\", [\"NORTH\" | tail]), do: tail\n  defp reduce(\"WEST\", [\"EAST\" | tail]), do: tail\n  defp reduce(\"EAST\", [\"WEST\" | tail]), do: tail\n  # Continue.\n  defp reduce(head, [next | tail]), do: [head, next | tail]\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76714,"user_id":null,"body":"defmodule Directions do\n  def dir_reduc(directions), do: List.foldr(directions, [], &reducer\/2)\n  \n  defp reducer(next_move, current_path)\n  defp reducer(\"NORTH\", [\"SOUTH\" | path_tail]), do: path_tail\n  defp reducer(\"SOUTH\", [\"NORTH\" | path_tail]), do: path_tail\n  defp reducer(\"EAST\",  [\"WEST\"  | path_tail]), do: path_tail\n  defp reducer(\"WEST\",  [\"EAST\"  | path_tail]), do: path_tail\n  defp reducer(next_move, current_path), do: [next_move | current_path]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76715,"user_id":null,"body":"defmodule Directions do\n\n  def dir_reduc(directions) do\n    Enum.reduce(directions, [], \n      fn x, acc -> \n        if areOpposite?(List.last(acc), x) do \n          elem(List.pop_at(acc, -1), 1)\n        else \n          acc ++ [x] \n        end \n      end)\n  end\n  \n  def areOpposite?(\"NORTH\", \"SOUTH\"), do: true\n  def areOpposite?(\"SOUTH\", \"NORTH\"), do: true\n  def areOpposite?(\"WEST\", \"EAST\"), do: true\n  def areOpposite?(\"EAST\", \"WEST\"), do: true\n  def areOpposite?(_, _), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76716,"user_id":null,"body":"defmodule Directions do\n  @reducable %{\n    \"NORTH\" => \"SOUTH\",\n    \"SOUTH\" => \"NORTH\",\n    \"EAST\" => \"WEST\",\n    \"WEST\" => \"EAST\"\n  }\n\n  def dir_reduc(directions) do\n    directions\n      |> Enum.reduce([], fn \n        x, [] -> [x]\n        x, acc ->\n          [hd | tl] = acc\n          if Map.get(@reducable, hd) == x, do: tl, else: [x | acc]\n        end)\n      |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76717,"user_id":null,"body":"defmodule Directions do\n\n  @inverse %{\"NORTH\"=>\"SOUTH\",\"SOUTH\"=>\"NORTH\",\"EAST\"=>\"WEST\",\"WEST\"=>\"EAST\"}\n\n  def reduce(lst) do \n    reduce(lst,[]) |> Enum.reverse\n  end\n\n  def reduce([h|t],[]) do reduce(t,[h]) end\n  \n  def reduce([],acc) do acc end\n\n  def reduce([h|t],acc) do    \n    [accH|accT] = acc\n    if @inverse[h] == accH do\n      reduce(t,accT)\n    else\n      reduce(t,[h|acc])\n    end    \n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76718,"user_id":null,"body":"defmodule Directions do\n  def dir_reduc(directions) do\n    Enum.reverse(directions)\n    |> Enum.reduce(\n      [],\n      fn\n        \"NORTH\", [\"SOUTH\" | rst] -> rst\n        \"SOUTH\", [\"NORTH\" | rst] -> rst\n        \"EAST\", [\"WEST\" | rst] -> rst\n        \"WEST\", [\"EAST\" | rst] -> rst\n        x, acc -> [x | acc]\n      end\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76719,"user_id":null,"body":"defmodule Directions do\n  def dir_reduc(directions) do\n    directions\n    |> Enum.reduce([], &do_reduction\/2)\n    |> Enum.reverse()\n  end\n\n  def do_reduction(x, acc) do\n    d = %{\n      \"NORTH\" => 1,\n      \"SOUTH\" => -1,\n      \"EAST\" => 2,\n      \"WEST\" => -2\n    }\n    case acc do\n      [] -> [x | acc]\n      [previous | tail] ->\n        case Map.get(d, x) + Map.get(d, previous) do\n          0 -> tail\n          _ -> [x, previous | tail]\n        end\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76720,"user_id":null,"body":"defmodule Directions do\n\n  @opposites %{\n    \"NORTH\" => \"SOUTH\",\n    \"SOUTH\" => \"NORTH\",\n    \"EAST\" => \"WEST\",\n    \"WEST\" => \"EAST\"\n  }\n\n  def reduce(dirs) do\n    first_pass = reduce(dirs, [])\n    case reduce(first_pass, []) do\n      ^first_pass -> first_pass\n      second_pass -> reduce(second_pass)\n    end\n  end\n\n  def reduce([one, two | tail], acc) do\n    case Map.get(@opposites, one) == two do\n      true -> reduce(tail, acc)\n      false -> reduce([two | tail], [one | acc]) \n    end\n  end\n  def reduce(dirs, acc) do\n    # empty or singleton\n    Enum.reverse(dirs ++ acc)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76721,"user_id":527,"body":"defmodule Directions do\n  def dir_reduc(directions) do\n    List.foldr(directions, [], fn\n      \"NORTH\", [\"SOUTH\" | ds] -> ds\n      \"SOUTH\", [\"NORTH\" | ds] -> ds\n      \"EAST\", [\"WEST\" | ds] -> ds\n      \"WEST\", [\"EAST\" | ds] -> ds\n      d, ds -> [d | ds]\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76722,"user_id":null,"body":"defmodule Directions do\n  @opposites [{\"NORTH\", \"SOUTH\"}, {\"SOUTH\", \"NORTH\"}, {\"EAST\", \"WEST\"}, {\"WEST\", \"EAST\"}]\n\n  def dir_reduc(directions, reduced \\\\ [])\n\n  def reduce([], reduced), do: Enum.reverse(reduced)\n\n  def reduce([next | directions], [last | reduced]) when {next, last} in @opposites,\n    do: reduce(directions, reduced)\n\n  def reduce([next1, next2 | directions], reduced) when {next1, next2} in @opposites,\n    do: reduce(directions, reduced)\n\n  def reduce([next_dir | directions], reduced), do: reduce(directions, [next_dir | reduced])\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5513795bd3fafb56c200049e":[{"id":76723,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) do\n    for r <- 1..n, do: r * x\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76724,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) when x > 0 and n > 0 do\n    1..n |> Enum.map(fn(num) -> num * x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76725,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) do\n    1..n\n    |> Enum.map(&(&1 * x))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76726,"user_id":527,"body":"defmodule Count do\n  def count_by(x, n) do\n    for i <- 1 .. n, do: i * x\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76727,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) do\n    Enum.take_every(x..(x*n), x)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76728,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) do\n    for elem <- 1..n, do: x * elem\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76729,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n) do\n    for elem <- 1..n, do: elem * x\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76730,"user_id":null,"body":"defmodule Count, do: def count_by(x, n), do: Enum.map(1..n, &(&1 * x))","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76731,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n), do: Enum.map(1..n, &(&1 * x))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76732,"user_id":null,"body":"defmodule Count do\n  def count_by(x, n), do: for i <- 1..n, do: i * x\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55143152820d22cdf00001bb":[{"id":76733,"user_id":null,"body":"defmodule Kata do\n    def number9(n), do: n |> Integer.digits() |> calc()\n    defp calc([]), do: 0\n    defp calc(d = [9| t]), do: fct(d) + (Integer.undigits(t) + 1)\n    defp calc(d), do: fct(d)\n    defp fct([h | t]), do: h * :math.pow(10, length(t) - 1) * length(t) + calc(t)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76734,"user_id":null,"body":"defmodule Kata do\n  def number9(n) do\n    Stream.iterate(1, &(&1 * 10))\n    |> Enum.take_while(&(&1 <= n))\n    |> Enum.map(fn place ->\n      topchunk = div(n, place)\n      div(topchunk, 10) * place + if(rem(topchunk, 10) == 9, do: 1 + rem(n, place), else: 0)\n    end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76735,"user_id":null,"body":"defmodule Kata do\n    def number9(n) do\n        # return the number of 9's used to count out 1 to n\n        get_digit(n, 10, 9, 0)\n    end\n    \n    def upper_limit(n) do\n      number_of_digits = Integer.digits(n) |> Enum.count()\n      :math.pow(10,number_of_digits+1)\n    end\n    \n    def get_digit(n, dec, l, acc) do\n        if(dec == upper_limit(n)) do\n          acc\n      else\n        n1=div(n,dec) * div(dec, 10)\n        n2=rem(n,dec) \n        n3=max(0,n2-l+1)\n        get_digit(n, dec*10,l*10, acc+n1+n3) \n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76736,"user_id":null,"body":"defmodule Kata do\n  def number9(n) do\n    n |> digits() |> calculate()\n  end\n\n  defp calculate(digits, mult \\\\ 0, sum \\\\ 0)\n  defp calculate([], _mult, sum), do: sum\n  defp calculate([{n, p} | rest], mult, sum) do\n    ss = do_calc(n, p)\n    ssp = if mult > 0, do: n * p * mult, else: 0\n    mm = if n == 9, do: mult + 1, else: mult\n\n    calculate(rest, mm, sum + ss + ssp)\n  end\n\n  defp do_calc(9, p), do: 9 * delta(p) + 1\n  defp do_calc(n, p), do: n * delta(p)\n\n\n  defp delta(1), do: 0\n  defp delta(10), do: 1\n  defp delta(100), do: 20\n  defp delta(m) do\n    prev_m = Integer.floor_div(m, 10)\n    10 * delta(prev_m) + prev_m\n  end\n\n  defp digits(n) do\n    with d <- Integer.digits(n),\n         m <- length(d) - 1,\n         p <- Enum.map(m..0, fn i -> :math.pow(10, i) |> round() end) do\n      Enum.zip(d, p)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76737,"user_id":null,"body":"defmodule Kata do\n  def number9(n) when n < 9, do: 0\n  def number9(n) do\n    digit_count = log10(n) + 1\n    multipliers = for d <- digit_count-1..0, do: d * pow(10, d - 1)\n    trailing_digits = for d <- digit_count..1, do: rem(n, pow(10, d - 1))\n    \n    digits = Integer.to_string(n)\n    |> String.graphemes()\n    |> Enum.map(&String.to_integer\/1)\n    \n    Enum.zip([digits, multipliers, trailing_digits])\n    |> Enum.reduce(0, fn {digit, multiplier, remaining}, acc ->\n      if digit == 9 do\n        acc + digit * multiplier + remaining + 1\n      else\n        acc + digit * multiplier\n      end\n    end)\n  end\n  \n  defp log10(n), do: trunc(:math.log10(n))\n  defp pow(n, p), do: trunc(:math.pow(n, p))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76738,"user_id":null,"body":"defmodule Kata do\n    def number9(n) when n < 9, do: 0\n    def number9(9), do: 1\n    def number9(n) do\n        [head | tail] = Integer.digits n\n        l = length tail\n        tail = Integer.undigits tail\n        head * l * (:math.pow(10, l-1) |> floor) + number9(head) * (tail + 1) + number9(tail)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76739,"user_id":null,"body":"defmodule Kata do\n  def number9(n) do\n    map_const = %{ 1=>0, 10=>1, 100=>20, 1_000=>300, 10_000=>4_000, 100_000=>50_000, 1_000_000=>600_000,\n                  10_000_000=>7_000_000, 100_000_000=>80_000_000, 1_000_000_000=>900_000_000, 10_000_000_000=>10_000_000_000,\n                  100_000_000_000=>110_000_000_000, 1_000_000_000_000=>1_200_000_000_000, 10_000_000_000_000=>13_000_000_000_000,\n                  100_000_000_000_000=>140_000_000_000_000, 1_000_000_000_000_000=>1_500_000_000_000_000}\n    digits = Integer.digits(n)\n    sum = digits\n    |> Enum.with_index\n    |> Enum.reduce(0, fn {digit, index}, acc ->\n      tmp = digit * map_const[floor(:math.pow(10, length(digits) - index - 1))]\n      tmp_2 = Integer.parse(Enum.join(Enum.slice(digits, index + 1, length(digits) - index - 1), \"\"))\n\n      cond do\n        tmp_2 == :error -> acc\n        digit == 9 -> {number_9, _} = tmp_2; acc + tmp + number_9 + 1\n        true -> acc + tmp\n      end\n    end)\n    add = if Enum.at(digits, length(digits) - 1) == 9, do: 1, else: 0\n    sum = sum + add\n    sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76740,"user_id":null,"body":"defmodule Kata do\n\n  # should run in 0(log10(num))\n  def number9(num) do\n    num\n    |> Integer.digits\n    |> Enum.reverse\n    |> Enum.reduce({0, 0, 0, 0}, fn digit, {total, power, per_o, orgnl} = _acc ->\n        order = :math.pow(10, power) |> trunc\n        lead9 = div(digit, 9)        \n        \n        { total + lead9 + (lead9 * orgnl) + (digit * per_o),\n          power + 1,\n          (per_o * 10) + order,\n          orgnl + (order * digit) }\n          \n    end)\n    |> (fn {total, _, _, _} -> total end).()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76741,"user_id":53,"body":"defmodule Kata do\n    def number9(n) do\n        aux(n, 1, 0, 0)\n    end\n    defp aux(n, i, curr, count) do\n        cond do\n            i > n  -> count\n            true   -> curr = div(n, i)\n                      count = count + div(curr, 10) * i\n                      cond do\n                          rem(curr, 10) == 9  -> count = count + 1 + rem(n, i)\n                                                 aux(n, i * 10, curr, count)  \n                          true                -> aux(n, i * 10, curr, count)      \n                      end       \n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76742,"user_id":null,"body":"defmodule Kata do\n  def additional(9,num,rank), do: (Kernel.rem(num, rank) + 1) * 10\n  def additional(_,_,_), do: 0\n\n  def calc_nines(n) when n >= 10 do\n    len = Integer.digits(n) |> length\n    rank = :math.pow(10, len - 1) |> trunc\n    nines = (len - 1) * rank\n    cnt = Kernel.div(n, rank)\n    additional = additional(cnt, n, rank)\n    (Kernel.div(n, rank) * nines) + additional + calc_nines(Integer.mod(n, rank))\n  end\n  def calc_nines(9), do: 10\n  def calc_nines(_), do: 0\n\n  def number9(n) when n < 9, do: 0\n  def number9(n) do\n      Kernel.div(calc_nines(n),10)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5517fcb0236c8826940003c9":[{"id":76743,"user_id":null,"body":"defmodule Sumfracts do\n\n  def sum_fracts([]), do: nil\n  def sum_fracts(lst) do\n    {n, d} = Enum.reduce(lst, fn {n0, d0}, {n1, d1} -> {n0*d1 + n1*d0, d0*d1} end)\n    g = gcd(n, d)\n    case {div(n, g), div(d, g)} do\n      {n, 1} -> n\n      f -> f\n    end\n  end\n\n  def gcd(x, 0), do: x\n  def gcd(x, y), do: gcd(y, rem(x,y))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76744,"user_id":2098,"body":"defmodule Sumfracts do\n  def sum_fracts(list) when (list == nil) do nil end\n  def sum_fracts(list) when (list == []) do nil end\n\n  def sum_fracts(list) do\n    lcm = list\n      |> get_demon_list\n      |> get_lcm\n\n    lcm_list = list\n      |> get_lcm_list(lcm)\n\n    sum = lcm_list\n      |> get_numer_list\n      |> Enum.reduce(0, &(&1 + &2))\n\n    gcd = get_gcd(sum, lcm)\n\n    case div(lcm, gcd) do\n      1 ->\n        div(sum, gcd)\n      _ ->\n        {div(sum, gcd), div(lcm, gcd)}\n    end\n  end\n\n  defp get_numer_list(list), do: Enum.map(list, fn ({numer, _}) -> numer end)\n\n  defp get_demon_list(list), do: Enum.map(list, fn ({_, demon}) -> demon end)\n\n  defp get_lcm(list), do: Enum.reduce(list, fn(numer, demon) -> div(abs(numer * demon), get_gcd(numer, demon)) end)\n\n  defp get_lcm_list(list, lcm), do: Enum.map(list, fn ({numer, demon}) -> {div(numer * lcm, demon), lcm} end)\n\n  defp get_gcd(numer, 0), do: abs(numer)\n\n  defp get_gcd(numer, demon), do: get_gcd(demon, rem(numer, demon))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76745,"user_id":492,"body":"defmodule Sumfracts do\n\n  defp gcd(a,0), do: abs(a)\n  defp gcd(a,b), do: gcd(b, rem(a, b))\n  defp lcmu(a,b), do: div(abs(a * b), gcd(a, b))\n  defp lcm(l) do\n    Enum.reduce(l, &(lcmu(&1, &2)))\n  end\n  \n  def sum_fracts(lst) when ((lst == nil) or (lst == [])) do nil end\n  \n  def sum_fracts(lst) do\n    lc = lst |> Enum.map(fn ({_, b}) -> b end) |> lcm\n    r = lst |> Enum.map(fn ({a, b}) -> {div(a * lc, b), lc} end)\n    num = r |> Enum.map(fn ({a, _}) -> a end) |> Enum.reduce(0, &(&1 + &2))\n    g = gcd(num, lc)\n    if (div(lc, g) == 1) do div(num, g) else {div(num, g), div(lc, g)} end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76746,"user_id":53,"body":"defmodule Sumfracts do\n  \n  def sum_fracts(lst) do\n    d = Enum.reduce(lst, 1, fn x, acc -> elem(x, 1) * acc end)\n    n = Enum.reduce(lst, 0, fn x, acc -> div(elem(x, 0) * d, elem(x, 1)) + acc end)\n    g = gcd(d, n)\n    cond do\n      length(lst) == 0 -> nil\n      g == d -> div(n, g)\n      true   -> {div(n, g), div(d, g)}\n    end\n  end\n  \n  defp gcd(a, 0), do: a\n  defp gcd(a, b), do: gcd(b, rem(a, b))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76747,"user_id":null,"body":"defmodule Sumfracts do\n  def add({a, b}, {c, d}) do\n    lcm = div(b * d, Integer.gcd(b, d))\n    {a * div(lcm, b) + c * div(lcm, d), lcm}\n  end\n\n  def sum_fracts([]), do: nil\n\n  def sum_fracts(lst) do\n    {a, b} = Enum.reduce(lst, &add\/2)\n    g = Integer.gcd(a, b)\n    a = div(a, g)\n    b = div(b, g)\n    if b == 1, do: a, else: {a, b}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76748,"user_id":250,"body":"defmodule Sumfracts do\n  \n  def sum_fracts(lst) when length(lst) == 0 do\n    nil\n  end\n  \n  def sum_fracts(lst) do\n    ad = Enum.reduce(lst, 1, fn {_, x}, acc -> acc * x end)\n    sum = Enum.reduce(lst, 0, fn {n, d}, acc -> acc + n * div(ad, d) end)\n    cd = gcd(sum, ad)\n    \n    n = div(sum, cd)\n    d = div(ad, cd)\n    \n    if d == 1 do n else {n, d} end\n  end\n  \n  def gcd(x, 0), do: x\n  def gcd(x, y), do: gcd(y, rem(x,y))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76749,"user_id":null,"body":"defmodule Sumfracts do\n  \n  defp lcm(0, 0), do: 0\n\tdefp lcm(a, b), do: div(a*b,Integer.gcd(a,b))  \n  \n  defp simplify(a, b) when rem(a,b) == 0, do: div(a, b)\n  defp simplify(a, b) do\n     d = Integer.gcd(a, b)\n    {div(a,d), div(b,d)}    \n  end\n  \n  def sum_fracts([]), do: nil\n  \n  def sum_fracts(lst) do\n    {_,df} = hd(lst)\n    fracd = Enum.reduce(lst, df, fn {_,d}, acc -> lcm(d,acc) end)  \n    fracn = Enum.reduce(lst, 0, fn {n,d}, acc -> acc + div(n*fracd,d) end)\n    simplify(fracn, fracd)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76750,"user_id":null,"body":"defmodule Sumfracts do\n  \n  def sum_fracts([]), do: nil\n  def sum_fracts(lst) do\n    denominator = lst |> Enum.map(fn {_, d} -> d end) |> lcm()\n\n    numerator = lst\n      |> Enum.map(fn {n, d} -> n * div(denominator, d) end)\n      |> Enum.reduce(0, &(&1 + &2))\n\n    simplify({numerator, denominator})\n  end\n  \n  def simplify({n, d}) do\n    factor = gcd(n, d)\n    {div(n, factor), div(d, factor)}    \n    |> case do\n      {a, 1} -> a\n      frac -> frac\n    end\n  end\n  \n  def gcd(a, b) when a < b, do: gcd(b, a)\n  def gcd(a, 0), do: a\n  def gcd(a, b), do: gcd(b, rem(a, b))\n  def gcd(list), do: Enum.reduce(list, 0, &(gcd(&1, &2)))\n  \n  def lcm(a, b), do: div(a * b, gcd(a, b))\n  def lcm(list), do: list |> Enum.reduce(1, &(&1 * &2)) |> div(gcd(list))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76751,"user_id":null,"body":"defmodule Sumfracts do\n  \n  def sum_fracts([]), do: nil\n  def sum_fracts(list) do\n    case sum_fract(list) do\n      {answer, 1} -> answer\n      answer -> answer\n    end\n  end\n  \n  def sum_fract([]), do: {0, 1}\n  def sum_fract([ {_num, _den} = fraction ]) do\n    reduce(fraction)\n  end\n  def sum_fract([{num1, den1}, {num2, den2}]) do\n    reduce({num1 * den2 + num2 * den1, den1 * den2})\n  end\n  def sum_fract([ first, second | rest ]) do\n    sum_fracts([sum_fracts([first, second]), sum_fracts(rest)])\n  end\n  \n  defp reduce({num, den}) when den != 0 do\n    adj = Integer.gcd(num, den)\n    { div(num, adj), div(den, adj) }  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76752,"user_id":null,"body":"defmodule Sumfracts do\n  \n  def sum_fracts([]), do: nil\n  def sum_fracts(lst) do\n    {n, d} = lst |> Enum.reduce(fn {n, d}, {acc_n, acc_d} -> {n * acc_d + acc_n * d, acc_d * d} end)\n    case Integer.gcd(n, d) do\n      gcd when gcd == d -> div(n, d)\n      gcd -> {div(n, gcd), div(d, gcd)}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55192f4ecd82ff826900089e":[{"id":76753,"user_id":null,"body":"defmodule Watermelon do\n  def divide(2), do: false\n  def divide(x) when rem(x, 2) == 0, do: true\n  def divide(_), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76754,"user_id":null,"body":"require(Integer)\ndefmodule Watermelon do\n  def divide(weight) do\n    Integer.is_even(weight) and weight > 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76755,"user_id":1249,"body":"defmodule Watermelon do\n  import Integer, only: :macros\n  def divide(weight) do\n    weight > 2 && is_even(weight)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76756,"user_id":null,"body":"defmodule Watermelon do\n  @moduledoc \"\"\"\n  It's too hot, and they can't even\u2026\n  One hot summer day Pete and his friend Billy decided to buy watermelons. They chose the biggest crate. They rushed home, dying of thirst, and decided to divide their loot, however they faced a hard problem.\n\n  Pete and Billy are great fans of even numbers, that's why they want to divide the number of watermelons in such a way that each of the two parts consists of an even number of watermelons. However, it is not obligatory that the parts are equal.\n\n  Example: the boys can divide a stack of 8 watermelons into 2+6 melons, or 4+4 melons.\n\n  The boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, whether they can divide the fruits in the way they want. For sure, each of them should get a part of positive weight.\n\n  Task\n  Given an integral number of watermelons w (1\u2009\u2264\u2009w\u2009\u2264\u2009100; 1 \u2264\u2009w\u2009in Haskell), check whether Pete and Billy can divide the melons so that each of them gets an even amount.\n\n  \"\"\"\n\n  def divide(weight) do\n    # TODO\n    if weight > 3 do\n      rem(weight, 2) == 0\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76757,"user_id":null,"body":"defmodule Watermelon do\n  def divide(weight) do\n    if weight > 2 && rem(weight, 2) == 0 do true\n    else false end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76758,"user_id":null,"body":"defmodule Watermelon do\n\tdef divide(2), do: false\n  def divide(weight) when rem(weight, 2) != 0, do: false\n  def divide(_weight), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76759,"user_id":null,"body":"import Integer\n\ndefmodule Watermelon do\n  def divide(2), do: false\n  def divide(weight) when is_even(weight), do: true\n  def divide(_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76760,"user_id":1724,"body":"defmodule Watermelon do\n  require Integer\n  \n  def divide(w) when Integer.is_odd(w), do: false\n  def divide(w) when w < 4, do: false\n  def divide(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76761,"user_id":null,"body":"defmodule Watermelon do\n  use Bitwise\n  def divide(w) when w < 4, do: false\n  def divide(w), do: (w &&& 1) == 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76762,"user_id":50,"body":"defmodule Watermelon do\n  def divide(w) do\n    rem(w, 2) == 0 && w != 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"551b4501ac0447318f0009cd":[{"id":76763,"user_id":null,"body":"defmodule Kata do\n\n    def boolean_to_string(b), do: to_string(b)\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76764,"user_id":250,"body":"defmodule Kata do\n    def boolean_to_string(b) do\n      case b do\n        true -> \"true\"\n        _ -> \"false\"\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76765,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(b) do\n      if(b,do: \"true\",else: \"false\")\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76766,"user_id":53,"body":"defmodule Kata, do: defdelegate boolean_to_string(b), to: Atom, as: :to_string","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76767,"user_id":null,"body":"defmodule Kata do\n  def boolean_to_string(b) do\n    Kernel.inspect(b)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76768,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(b) do\n        if b == true, do: \"true\", else: \"false\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76769,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(true) do\n      \"true\"\n    end\n    def boolean_to_string(_) do\n      \"false\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76770,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(bool) when bool, do: \"true\"\n    def boolean_to_string(_), do: \"false\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76771,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(b) do\n        case {b} do\n          {:true} -> \"true\"\n          {:false} -> \"false\"\n          end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76772,"user_id":null,"body":"defmodule Kata do\n    def boolean_to_string(b) do\n        # TODO: working solution\n        \"#{b}\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"551dc350bf4e526099000ae5":[{"id":76773,"user_id":1774,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song\n    |> String.replace(~r\/(WUB)+\/, \" \")\n    |> String.strip\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76774,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    # Your code here\n    String.split(song, \"WUB\", trim: true)\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76775,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song\n    |> String.split(\"WUB\", trim: true)\n    |> Enum.join(\" \") \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76776,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    String.split(song, \"WUB\")\n    |> Enum.filter(&(&1 != \"\"))\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76777,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song_decoder(song, \"\", \"\")\n  end  \n  \n  def song_decoder(\"WUB\"<> \"WUB\"<> leftover, word, title) do\n    song_decoder(\"WUB\"<> leftover, word, title)\n  end\n  \n  def song_decoder(\"WUB\"<>leftover, word, \"\") do\n    song_decoder(leftover,\"\", word)\n  end\n  \n  def song_decoder(\"WUB\"<>leftover, word, title) do\n    song_decoder(leftover,\"\", title <> \" \" <> word)\n  end\n  \n  def song_decoder(<<head :: size(8)>>, word, \"\") do\n    word <> <<head>>\n  end\n  \n  def song_decoder(<<head :: size(8)>>, \"\", \"\") do\n    <<head>>\n  end\n  \n  def song_decoder(<<head :: size(8)>>, \"\", title) do\n    title <> \" \" <> <<head>>\n  end\n  \n  def song_decoder(<<head :: size(8)>>, word, title) do\n    title <> \" \" <> word <> <<head>>\n  end   \n  \n  def song_decoder(<<head :: size(8), tail :: binary>>, word, title) do\n    song_decoder(tail, word <> <<head>>, title)\n  end\n\n    \n  def song_decoder(_, _, title) do\n    title\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76778,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song), do:  Regex.replace(~r\/(WUB)+\/, song, \" \") |> String.trim()\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76779,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song\n    |> String.split(\"WUB\", [trim: true])\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76780,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song |> String.split(\"WUB\") |> Enum.filter(fn a -> a != \"\" end) |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76781,"user_id":null,"body":"defmodule SongDecoder do\n  def song_decoder(song) do\n    song\n      |> String.replace(\"WUB\", \" \")\n      |> String.replace(~r\/ +\/, \" \")\n      |> String.replace_leading(\" \",\"\")\n      |> String.replace_trailing(\" \",\"\") \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76782,"user_id":null,"body":"defmodule SongDecoder do\n def dewub(song) do\n    cond do\n      String.contains?(song,\"WUB\") ->\n      String.replace(song,\"WUB\",\" \")\n      |> song_decoder()\n      String.contains?(song,\"  \")->\n      String.replace(song, \"  \",\" \")\n      |> song_decoder()\n      true -> song\n    end\n  end\n \n def song_decoder(song) do\n    dewub(song)\n    |> String.trim()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55225023e1be1ec8bc000390":[{"id":76783,"user_id":null,"body":"defmodule Kata do\n   def greet(name) do\n    case name do\n      \"Johnny\" -> \"Hello, my love!\"\n      _ -> \"Hello, #{name}!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76784,"user_id":null,"body":"defmodule Kata do\n    def greet(\"Johnny\"), do: \"Hello, my love!\"\n    def greet(name), do: \"Hello, #{name}!\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76785,"user_id":null,"body":"defmodule Kata do\n    def greet(name) when name != \"Johnny\", do: \"Hello, #{name}!\"\n    def greet(\"Johnny\"), do: \"Hello, my love!\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76786,"user_id":1566,"body":"defmodule Kata do\n    def greet(name), do: \"Hello, \" <> (if name == \"Johnny\" do \"my love!\" else \"#{name}!\" end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76787,"user_id":null,"body":"defmodule Kata do\n    def greet(name) when name !== \"Johnny\" do\n    \"Hello, #{name}!\"\n    end\n    def greet(name) when name == \"Johnny\" do\n    \"Hello, my love!\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76788,"user_id":null,"body":"defmodule Kata do\n    def greet(\"Johnny\"), do: \"Hello, my love!\"\n    def greet(name), do: \"Hello, #{name}!\"\n   \nend\n\n# test  {\"John\", \"Hello, John!\"}","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5526fc09a1bbd946250002dc":[{"id":76789,"user_id":null,"body":"defmodule Kata do\n    def find_outlier(integers) do\n        {e, o} = Enum.split_with(integers, &(rem(&1, 2) == 0))\n        \n        if length(e) > length(o), do: hd(o), else: hd(e)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76790,"user_id":null,"body":"defmodule Kata do\n  require Integer\n\n  def find_outlier(integers) do\n    {first_three, _} = Enum.split(integers, 3)\n\n    first_three\n    |> Enum.filter(&Integer.is_odd\/1)\n    |> Enum.count()\n    |> case do\n      count when count in [0, 1] -> Enum.find(integers, &Integer.is_odd\/1)\n      _ -> Enum.find(integers, &Integer.is_even\/1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76791,"user_id":null,"body":"defmodule Kata do\n  require Integer\n\n  def find_outlier( [a,b,c | tail] ) do\n    outlier(Integer.is_even(a), Integer.is_even(b), Integer.is_even(c), [a,b,c | tail])\n  end\n\n  def outlier(false,true,true,   [a,_b,_c | _tail]), do: a\n  def outlier(true,false,false,  [a,_b,_c | _tail]), do: a\n  def outlier(false,true,false,  [_a,b,_c | _tail]), do: b\n  def outlier(true,false,true,   [_a,b,_c | _tail]), do: b\n  def outlier(true,true,false,   [_a,_b,c | _tail]), do: c\n  def outlier(false,false,true,  [_a,_b,c | _tail]), do: c\n  def outlier(true,true,true,    [_a,_b,_c|  tail]), do: oddfind(tail)\n  def outlier(false,false,false, [_a,_b,_c|  tail]), do: evenfind(tail)\n\n  def oddfind(tail) do\n    Enum.find(tail, fn x -> Integer.is_odd(x) end)\n  end\n\n  def evenfind(tail) do\n    Enum.find(tail, fn x -> Integer.is_even(x) end)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76792,"user_id":null,"body":"defmodule Kata do\n    def find_outlier(integers) do\n      compare(Enum.filter(integers, &is_even?\/1), Enum.reject(integers, &is_even?\/1))\n    end\n    \n    defp is_even?(n), do: rem(n, 2) == 0\n    \n    defp compare([a], _), do: a\n    defp compare(_, [b]), do: b\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76793,"user_id":null,"body":"defmodule Kata do\n    def find_outlier(integers) do\n        # your code here\n        integers\n        |> Enum.group_by(&(abs(rem(&1, 2))))\n        |>_find\n    end\n    \n    defp _find(%{0 => [result], 1 => _}) do\n      result\n    end\n    \n    defp _find(%{0 => _, 1 => [result]}) do\n      result\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76794,"user_id":null,"body":"defmodule Kata do\n    def find_outlier(integers) do\n        integers\n        |> Enum.split_with(&(abs(rem(&1, 2)) == 0))\n        |> Tuple.to_list\n        |> Enum.find(&(length(&1) == 1))\n        |> List.first\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76795,"user_id":null,"body":"defmodule Kata do\n  def find_outlier(integers) do\n    Enum.group_by(integers, &(rem(&1, 2) != 0))\n    |> case do\n      %{false: [_ | [_ | _]], true: odd} -> List.first(odd)\n      %{false: even, true: [_ | [_ | _]]} -> List.first(even)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76796,"user_id":null,"body":"defmodule Kata do\n  require Integer\n\n  def find_outlier(integers) do\n    odds = Enum.filter(integers, &Integer.is_odd\/1)\n    evens = Enum.filter(integers, &Integer.is_even\/1)\n    if length(odds) == 1, do: hd(odds), else: hd(evens)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76797,"user_id":null,"body":"defmodule Kata do\n    def find_outlier(integers) do\n      cond do\n        Enum.count(integers, fn n -> rem(n, 2) == 0 end) > 1 ->\n          Enum.find(integers, fn n -> rem(n, 2) |> abs == 1 end)\n        true ->\n          Enum.find(integers, fn n -> rem(n, 2) |> abs == 0 end)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76798,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  \n  def find_outlier(integers) do\n    integers\n    |> Enum.take(3)\n    |> Enum.group_by(&Integer.is_odd\/1)\n    |> Enum.max_by(fn {k, v} -> Enum.count(v) end)\n    |> case do\n      {true, _} -> Enum.find(integers, fn n -> !Integer.is_odd(n) end)\n      _ -> Enum.find(integers, &Integer.is_odd\/1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5539fecef69c483c5a000015":[{"id":76799,"user_id":null,"body":"defmodule Back do\n\n    def backwards_prime(start, stop) do\n      start..stop\n      |> Enum.filter(fn n -> backwards_prime?(n) end)\n    end\n    \n    def prime?(n) when n in [2, 3], do: true\n    def prime?(n) do\n      floored_sqrt = :math.sqrt(n)\n        |> Float.floor\n        |> round\n      !Enum.any?(2..floored_sqrt, &(rem(n, &1) == 0))\n    end\n    \n    def backwards_prime?(n) do\n      n1 = reverse_number(n)\n      (n \/ 10 > 1) && n != n1 && prime?(n) && prime?(n1)\n    end\n    \n    def reverse_number(n) do\n      n\n      |> Integer.to_string\n      |> String.reverse\n      |> String.to_integer\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76800,"user_id":null,"body":"defmodule Back do\n  def backwards_prime(start, stop) do\n    Enum.filter(start..stop, &(prime?(&1) && reverse_prime?(&1)))\n  end\n\n  def reverse_prime?(n) do\n    rev = n |> Integer.digits() |> Enum.reverse() |> Integer.undigits()\n    n != rev && prime?(rev)\n  end\n\n  def prime?(n) do\n    root = n |> :math.sqrt() |> trunc()\n    !Enum.any?(2..root, &(rem(n, &1) == 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76801,"user_id":null,"body":"defmodule Back do\n  def backwards_prime(start, stop) do\n    Enum.filter(start..stop, &(prime?(&1) && reverse_prime?(&1)))\n  end\n\n  def reverse_prime?(n) do\n    rev = reverse(n)\n    n != rev && prime?(rev)\n  end\n\n  def reverse(n) do\n    n\n    |> Integer.digits()\n    |> Enum.reverse()\n    |> Integer.undigits()\n  end\n\n  def prime?(n) do\n    2..upper_limit(n)\n    |> Enum.any?(&(rem(n, &1) == 0))\n    |> Kernel.not()\n  end\n\n  defp upper_limit(n) do\n    n\n    |> :math.sqrt()\n    |> trunc()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76802,"user_id":null,"body":"defmodule Back do\n  defp is_prime(n) do\n    n == 2 || n == 3 || Enum.all?(2..floor(:math.sqrt(n)), fn d -> rem(n, d) != 0 end)\n  end\n  def backwards_prime(start, stop) do\n    Enum.filter(start..stop, fn i ->\n      revi = Integer.digits(i) |> Enum.reverse |> Integer.undigits\n      revi != i && is_prime(i) && is_prime(revi)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76803,"user_id":null,"body":"defmodule Back do\n\n    def backwards_prime(start, stop) do\n      start..stop\n      |> Enum.reduce([], fn x, acc ->\n        if backwards_read_prime?(x), do: acc ++ [x], else: acc\n      end)\n    end\n    \n    def backwards_read_prime?(x) when x < 13, do: false\n    def backwards_read_prime?(x) do\n      x !== reverse(x) and prime?(x) and prime?(reverse(x))\n    end\n    \n    def reverse(n) do\n      n\n      |> Integer.digits\n      |> Enum.reverse\n      |> Integer.undigits\n    end\n    \n    def prime?(1), do: true\n    def prime?(2), do: true\n    def prime?(n) do\n      2..(:math.sqrt(n) |> trunc)\n      |> Enum.reduce_while(false, fn x, acc ->\n        if rem(n, x) === 0, do: {:halt, false}, else: {:cont, true}\n      end)\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76804,"user_id":null,"body":"defmodule Back do\n\n    def backwards_prime(start, stop) do\n      start..stop\n        |> Enum.map(fn x -> {x, reverse_num(x)} end)\n        |> Enum.filter(fn {x, y} -> x != y end)\n        |> Enum.filter(fn {x, y} -> prime?(x) && prime?(y) end)\n        |> Enum.map(fn {x, y} -> x end)\n    end\n    \n    def reverse_num(n) do\n      n\n      |> Integer.digits()\n      |> Enum.reverse()\n      |> Integer.undigits()\n    end\n    \n    def prime?(0), do: false\n    def prime?(1), do: false\n    def prime?(2), do: true\n    def prime?(n) do\n      last = n\n        |> :math.sqrt\n        |> Float.ceil\n        |> trunc\n      notprime = 2..last\n        |> Enum.any?(fn a -> rem(n, a)==0 end)\n      !notprime\n    end\n    \n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76805,"user_id":null,"body":"defmodule Back do\n\n    def backwards_prime(start, stop) when start > 0 and start < stop do\n      Enum.filter(start..stop, &backwards?\/1)\n    end\n    \n    def prime?(num), do: Enum.all?(2..trunc(:math.sqrt(num)), &rem(num, &1) != 0)\n    def backwards?(num) do\n      reverse = num |> Integer.digits() |> Enum.reverse() |> Integer.undigits()\n      num != reverse and prime?(num) and prime?(reverse)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76806,"user_id":null,"body":"defmodule Back do\n    defp prime?(number) do\n      IO.inspect(number)\n      !(2..floor(:math.sqrt(number))\n        |> Enum.any?(fn (possible_divisor) -> rem(number, possible_divisor) == 0 end))\n    end\n    defp reverse(number) do\n      \"#{number}\" |> String.reverse() |> String.to_integer()\n    end\n    \n    defp predicat(number) do\n      rev = reverse(number)\n      rev != number && prime?(number) && prime?(rev)\n    end\n\n    def backwards_prime(start, stop)  do\n       start..stop\n         |> Enum.filter(fn(number) -> predicat(number) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76807,"user_id":null,"body":"defmodule Back do\n\n  def backwards_prime(start, stop) do\n    start..stop\n    |> Enum.to_list\n    |> Enum.filter(\n         fn x ->\n           y = get_backwards_number(x)\n           is_prime(x) and is_prime(y) and x != y\n         end\n       )\n  end\n\n  defp get_backwards_number(n),\n       do: n\n           |> to_string\n           |> String.reverse\n           |> Integer.parse\n           |> (fn {x, _} -> x end).()\n\n  defp is_prime(n) when rem(n, 2) == 0, do: false\n  defp is_prime(n), do: is_prime(n, 3)\n  defp is_prime(n, divisor) when divisor * divisor > n + 1, do: true\n  defp is_prime(n, divisor) when rem(n, divisor) == 0, do: false\n  defp is_prime(n, divisor), do: is_prime(n, divisor + 2)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76808,"user_id":null,"body":"defmodule Back do\n  def backwards_prime(start, stop) do\n    start..stop\n    |> Enum.filter(fn n -> reverse_prime?(n) and prime?(n) end)\n  end\n\n  defp prime?(n) when rem(n, 2) == 0, do: false\n  defp prime?(n) do\n    result = 2..trunc(:math.sqrt(n))\n    |> Enum.reduce_while(0, fn (div, _acc) ->\n      rem(n, div) == 0 && { :halt, false } || { :cont, true }\n    end)\n    # Using Enum.reduce_while apparently is faster than Enum.any?\n  end\n  \n  defp reverse_prime?(number) do\n    rev_number = number\n    |> to_string\n    |> String.reverse\n    |> String.to_integer\n    \n    # Had to rule out palindromes as well\n    rev_number != number and prime?(rev_number)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5541f58a944b85ce6d00006a":[{"id":76809,"user_id":492,"body":"defmodule ProdFib do\n\n    defp loop(a, b, c) do\n        if (a * b >= c) do\n            [a, b, a * b == c]\n        else\n            loop(b, a + b, c)\n        end\n    end\n    def product_fib(n) do\n        loop(0, 1, n)\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76810,"user_id":null,"body":"defmodule ProdFib do\n    def product_fib(n,a \\\\ 0,b \\\\ 1)\n    def product_fib(n,a,b) when n <= a * b ,do: [a,b,n==a*b]\n    def product_fib(n,a,b), do: n |> product_fib(b,a+b)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76811,"user_id":null,"body":"defmodule ProdFib do\n\n    def product_fib(n) do\n      product_fib(0, 1, n)\n    end\n    \n    def product_fib(a, b, n) when a * b < n do\n      product_fib(b, a + b, n)\n    end\n    \n    def product_fib(a, b, n) when a * b == n do\n      [a, b, true]\n    end\n    \n    def product_fib(a, b, n) when a * b > n do\n      [a, b, false]\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76812,"user_id":53,"body":"defmodule ProdFib do\n    def product_fib(n), do: helper(0, 1, n)\n    defp helper(a, b, n) when a * b == n, do: [a, b, true]\n    defp helper(a, b, n) when a * b > n, do: [a, b, false]\n    defp helper(a, b, n), do: helper(b, a + b, n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76813,"user_id":null,"body":"defmodule ProdFib do\n\n     def product_fib(num)  do\n        nextNum([1,1,num])\n    end\n\n    def nextNum([a,b,num]) do\n        cond do\n            a*b == num -> [a,b,true]\n            a*b > num -> [a,b,false]\n            true -> nextNum([b,a+b,num])\n        end\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76814,"user_id":null,"body":"defmodule ProdFib do\n  def product_fib(n) do\n    [{left, right}] =\n      {0, 1}\n      |> Stream.unfold(fn {curr, next} -> {{curr, next}, {next, curr + next}} end)\n      |> Stream.filter(fn {curr, next} -> curr * next >= n end)\n      |> Enum.take(1)\n    \n    [left, right, left * right == n]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76815,"user_id":null,"body":"defmodule ProdFib do\n\n    def product_fib(n) do\n        {1,1}\n        |> Stream.iterate(fn {x, y} -> {y, x+y} end)\n        |> Stream.drop_while(fn {x,y} -> x * y < n end)\n        |> Enum.at(0)\n        |> (fn {x,y} -> [x, y, x*y == n] end).()\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76816,"user_id":null,"body":"defmodule ProdFib do\n\n\n  def product_fib(n) do\n    fibs = [1, 0]\n\n    maybe_add_fib_to_fibs(fibs, n)\n  end\n\n  def maybe_add_fib_to_fibs([x, y | _ ] = _fibs, prod) when x * y == prod do\n    [y, x, true]\n  end\n\n  def maybe_add_fib_to_fibs([x, y | _ ] = _fibs, prod) when x * y > prod do\n    [y, x, false]\n  end\n\n  def maybe_add_fib_to_fibs([x, y | _ ] = fibs, prod) do\n    maybe_add_fib_to_fibs([x + y | fibs], prod)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76817,"user_id":null,"body":"defmodule ProdFib do\n  def fib_iter(a, b, prod) do\n    cond do\n      a * b == prod -> [a, b, true]\n      a * b > prod -> [a, b, false]\n      true -> fib_iter(b, a + b, prod)\n    end\n  end\n\n  def product_fib(n), do: fib_iter(0, 1, n)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76818,"user_id":null,"body":"defmodule ProdFib do\n    \n    def fib(a, b, n) do\n      cond do\n        a * b == n -> [a, b, true]\n        a * b > n -> [a, b, false]\n        true -> fib(b, a + b, n) \n      end\n        \n    end\n    \n    def product_fib(n) do\n        fib(0, 1, n)\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5544c7a5cb454edb3c000047":[{"id":76819,"user_id":null,"body":"defmodule Bouncingball do\n\n  def bouncing_ball(height, _, _) when height <= 0, do: -1\n  def bouncing_ball(_, bounce, _) when bounce <= 0, do: -1\n  def bouncing_ball(_, bounce, _) when bounce >= 1, do: -1\n  def bouncing_ball(height, _, window) when window >= height, do: -1\n  def bouncing_ball(_, _, window) when window <= 0, do: -1\n\n  def bouncing_ball(height, bounce, window) do\n    2 + bouncing_ball(height * bounce, bounce, window)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76820,"user_id":492,"body":"defmodule Bouncingball do\n\n  def bouncing_ball(h, bounce, window) when ((h <= 0) or (window >= h) or (bounce <= 0) or (bounce >= 1)) do -1 end\n  def bouncing_ball(h, bounce, window) do\n    2 + bouncing_ball(h * bounce, bounce, window)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76821,"user_id":527,"body":"defmodule Bouncingball do\n\n  def bouncing_ball(h, bounce, window)\n      when h > 0 and 0 < bounce and bounce < 1 and window < h,\n    do: trunc(Float.ceil(:math.log(window \/ h) \/ :math.log(bounce))) * 2 - 1\n  def bouncing_ball(_, _, _),\n    do: -1\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76822,"user_id":null,"body":"defmodule Bouncingball do\n\n  \n  def bouncing_ball(h, bounce, window, c) when window < h,  do: bouncing_ball(h*bounce, bounce, window, c + 2)\n  def bouncing_ball(h, _, window, c) when window >= h,  do: c\n  def bouncing_ball(h, bounce, window) when bounce > 0 and bounce < 1, do: bouncing_ball(h, bounce, window, -1)\n  def bouncing_ball(_, _, _), do: -1\n  \n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76823,"user_id":null,"body":"defmodule Bouncingball do\n  def bouncing_ball(h, bounce, window, acc \\\\ -1)\n  def bouncing_ball(h, bounce, window, acc)\n      when h > 0 and\n           bounce > 0 and bounce < 1 and\n           window < h do\n    bouncing_ball(h * bounce, bounce, window, acc + 2)\n  end\n  def bouncing_ball(_,_,_, acc), do: acc\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76824,"user_id":null,"body":"# write code below\n\ndefmodule Bouncingball do\n  def bouncing_ball(h, bounce, window) do\n    bounce_height = bounce * h\n\n    if h < 0 or bounce <= 0 or bounce >= 1 or window >= h do\n      -1\n    else\n      _bouncing_ball(h, bounce, bounce_height, window, 0)\n    end\n  end\n\n  defp _bouncing_ball(_h, _bounce, bounce_height, window, sum) when bounce_height <= window,\n    do: sum + 1\n\n  defp _bouncing_ball(h, bounce, bounce_height, window, sum) do\n    _bouncing_ball(h, bounce, bounce_height * bounce, window, sum + 2)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76825,"user_id":null,"body":"defmodule Bouncingball do\n  def bouncing_ball(h, _bounce, _window) when h <= 0, do: -1\n  def bouncing_ball(_h, bounce, _window) when bounce <= 0 or bounce >= 1, do: -1\n  def bouncing_ball(h, _bounce, window)  when h <= window, do: -1\n\n  def bouncing_ball(h, bounce, window) do\n    bounce_ball(h, bounce, window, 1)\n  end\n\n  defp bounce_ball(height, bounce, window, count) when height * bounce > window do\n    bounce_ball(height * bounce, bounce, window, count + 2)\n  end\n\n  defp bounce_ball(_height, _bounce, _window, count) do\n    count\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76826,"user_id":null,"body":"defmodule Bouncingball do\n  defguardp valid_inputs(h, bounce, mom) when h > 0 and mom < h and bounce > 0 and bounce < 1\n\n  def bouncing_ball(h, bounce, mom, n \\\\ -1)\n  def bouncing_ball(h, bounce, mom, n) when not valid_inputs(h, bounce, mom), do: n\n  def bouncing_ball(h, bounce, mom, n), do: bouncing_ball(h * bounce, bounce, mom, n + 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76827,"user_id":null,"body":"defmodule Bouncingball do\n  def bouncing_ball(h, bounce, window)\n    when h <= 0 or bounce <= 0 or bounce >= 1 or window >= h,\n    do: -1\n\n  def bouncing_ball(h, bounce, window),\n    do: 2 + bouncing_ball(h * bounce, bounce, window)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76828,"user_id":492,"body":"defmodule Bouncingball do\n\n  def bouncing_ball(h, bounce, window) when ((h <= 0) or (window >= h) or (bounce <= 0) or (bounce >= 1)) do -1 end\n  def bouncing_ball(h, bounce, window) do\n    2 + bouncing_ball(h * bounce, bounce, window)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5545f109004975ea66000086":[{"id":76829,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y), do: rem(n,x) + rem(n,y) == 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76830,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    unless rem(n,y) == 0 && rem(n,x)==0 do\n       :false\n    else\n       :true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76831,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n  x_module = rem(n, x)\n  y_module = rem(n, y) \n    cond do\n      x_module + y_module > 0 -> false\n      true -> true\n    \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76832,"user_id":76,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    rem(n, x) + rem(n, y) == 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76833,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) when rem(n, x) == 0 and rem(n, y) == 0, do: true\n  def is_divisible(n, x, y), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76834,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do 0 ==  rem(n, x) && 0 ==  rem(n, y)\n    # your code here\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76835,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    if x<=n and y<=n and rem(n,x)== 0 and rem(n,y)==0 do\n      true\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76836,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    [Integer.mod(n, x), Integer.mod(n, y)] == [0, 0]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76837,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    num = Enum.map([x,y], fn t -> Integer.mod(n, t) end)\n    if num == [0,0] do\n      true\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76838,"user_id":null,"body":"defmodule Kata do\n  @spec is_divisible(pos_integer(), pos_integer(), pos_integer()) :: boolean()\n  def is_divisible(n, x, y) do\n    cond do\n      rem(n, x) == 0 && rem(n, y) == 0 -> true\n      true -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55466989aeecab5aac00003e":[{"id":76839,"user_id":null,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(l, l), do: []\n  def sq_in_rect(l, w), do: area(l, w)\n  \n  def area(0, _), do: []\n  def area(_, 0), do: []\n  def area(l, l), do: [l]\n  def area(l, w) when l > w, do: area(w, l)\n  def area(l, w) when l < w, do: [l | area(l, w - l)]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76840,"user_id":null,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(l, l), do: []\n  def sq_in_rect(l, w) do\n    {l, w}\n    |> Stream.unfold(fn {0, _} -> []; {l, w} -> {min(l, w), {abs(l - w), min(l, w)}} end)\n    |> Enum.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76841,"user_id":null,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(l, l), do: []\n  def sq_in_rect(l, w) when l < w, do: sq_in_rect(w, l)\n  def sq_in_rect(l, w) do\n    Stream.unfold({l, w}, fn\n      {_, 0} -> []\n      {a, b} -> {b, {max(a-b, b), min(a-b, b)}}\n    end)\n    |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76842,"user_id":null,"body":"defmodule Rec2sq do\n  def sq_in_rect(l, l), do: []\n  def sq_in_rect(l, w), do: count(l,w,[]) |> Enum.reverse()\n  \n  defp count(x, x, state), do: [x | state]\n  defp count(x, y, state) when x > y, do: count(x - y, y, [y | state])\n  defp count(x, y, state) when y > x, do: count(x, y-x, [x | state])  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76843,"user_id":null,"body":"defmodule Rec2sq do\n  def sq_in_rect(w, w), do: []\n  def sq_in_rect(l, w), do: getrect(Enum.min_max([l, w]))\n  \n  defp getrect({0, _l}), do: []\n  defp getrect({w, l}), do: [w | getrect(Enum.min_max([l - w, w]))]\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76844,"user_id":null,"body":"defmodule Rec2sq do\n  def sq_in_rect(l, w) when l == w, do: []\n  def sq_in_rect(l, w), do: go(l, w)\n  \n  def go(l, w, done \\\\ [])\n  def go(l, w, done) when l < w, do: go(l, w - l, [l | done])\n  def go(l, w, done) when w < l, do: go(w, l - w, [w | done])\n  def go(l, _w, done), do: reverse([l | done])\n  \n  def reverse(old, new \\\\ [])\n  def reverse([], new), do: new\n  def reverse([h | t], new), do: reverse(t, [h | new])\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76845,"user_id":null,"body":"defmodule Rec2sq do\n  def sq_in_rect(n, n), do: []\n  def sq_in_rect(l, w), do: sq_in_rect2(l, w)\n  def sq_in_rect2(n, n), do: [n]\n  def sq_in_rect2(l, w) when l > w, do: [ w | sq_in_rect2(w, l - w) ]\n  def sq_in_rect2(l, w) when l < w, do: [ l | sq_in_rect2(l, w - l) ]\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76846,"user_id":null,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(n, n), do: []\n  def sq_in_rect(l, w), do: sir(l, w, [])\n  \n  defp sir(l,w,prev) when l == w, do: prev ++ [l]\n  defp sir(l,w,prev) when l < w, do:  sir(w - l, l, prev ++ [l])\n  defp sir(l,w,prev) when l > w, do: sir(l - w, w, prev ++ [w])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76847,"user_id":null,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(l, w) when l == w, do: []\n  def sq_in_rect(l, w), do: do_sq_in_rect(l, w, [])\n  \n  def do_sq_in_rect(l, w, acc) when l == w, do: [l | acc] |> Enum.reverse\n  def do_sq_in_rect(l, w, acc) when w > l, do: do_sq_in_rect(w, l, acc)\n  def do_sq_in_rect(l, w, acc), do: do_sq_in_rect(l - w, w, [w | acc])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76848,"user_id":1774,"body":"defmodule Rec2sq do\n\n  def sq_in_rect(l, w) when l == w, do: []\n  def sq_in_rect(l, w), do: do_sq_in_rect(l, w, [])\n  \n  def do_sq_in_rect(l, w, squares) when l < 1 or w < 1,\n    do: Enum.reverse squares    \n  def do_sq_in_rect(l, w, squares) when l > w,\n    do: do_sq_in_rect(w, l, squares)\n  def do_sq_in_rect(l, w, squares) do\n    do_sq_in_rect(l, w - l, [l | squares])\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5547cc7dcad755e480000004":[{"id":76849,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n    total = div(n * (n + 1), 2)\n    \n    for x <- 2..n, y = div(total - x, x + 1), rem(total - x, x + 1) == 0 && y < n do\n    \t{x, y}\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76850,"user_id":492,"body":"defmodule Removenb do\n\n  defp remove_nb_aux(n, _, i, res) when (i > n) do res end\n  defp remove_nb_aux(n, s, i, res) do\n    b = s - i\n    m = div(b, i + 1)\n    if (rem(b, i + 1) == 0) do\n      remove_nb_aux(n, s, (i + 1), res ++ [{i, m}])\n    else\n      remove_nb_aux(n, s, (i + 1), res)\n    end\n  end\n  \n  def remove_nb(n) do\n    remove_nb_aux(n, div(n * (n + 1), 2), div(n, 2), []) \n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76851,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n    sum = Enum.sum(1..n)\n    1..n\n    |> Enum.filter(fn a -> rem(sum-a, a+1) == 0 and sum\/a < n end)\n    |> Enum.map(fn a -> {a, trunc((sum-a)\/(a+1))} end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76852,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n    sum = n*(n+1)\/2\n    check_nb(sum, 0, n)\n  end\n  \n  def check_nb( _ , s, e) when s > e, do: []\n  def check_nb(sum, s, e) when sum-(s+e) == s*e, do: [{s, e}|check_nb(sum, s+1, e-1)]++[{e, s}]\n  def check_nb(sum, s, e) when sum-(s+e)  > s*e, do: check_nb(sum, s+1, e)\n  def check_nb(sum, s, e) when sum-(s+e) <  s*e, do: check_nb(sum, s, e-1)\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76853,"user_id":492,"body":"defmodule Removenb do\n\n  defp remove_nb_aux(n, _, i, res) when (i > n) do res end\n  defp remove_nb_aux(n, s, i, res) do\n    b = s - i\n    m = div(b, i + 1)\n    if (rem(b, i + 1) == 0) do\n      remove_nb_aux(n, s, (i + 1), res ++ [{i, m}])\n    else\n      remove_nb_aux(n, s, (i + 1), res)\n    end\n  end\n  \n  def remove_nb(n) do\n    remove_nb_aux(n, div(n * (n + 1), 2), div(n, 2), []) \n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76854,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n  \ttotal = Enum.sum(1..n)\n    \n    for x <- 1..n, y = div(total - x, x + 1), rem(total - x, x + 1) == 0 && y < n do\n    \t{x, y}\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76855,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n    sum = div(n * (n + 1), 2)\n    1..n\n      |> Enum.filter(fn x -> Integer.mod(sum - x, x + 1) == 0 and div(sum - x, x + 1) <= n end)\n      |> Enum.map(fn x -> {x, div(sum - x, x + 1)} end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76856,"user_id":null,"body":"defmodule Removenb do\n\n  def remove_nb(n) do\n    sum_n = 1..n |> Enum.sum\n    \n    1..n\n    |> Stream.filter_map(\n      &(filter(&1, n, sum_n)),\n      fn x -> {x, div(sum_n - x, x + 1)} end\n    )\n    |> Enum.to_list\n  end\n  \n  defp filter(x, n, sum_n) when div(sum_n - x, x + 1) > n, do: false\n  defp filter(x, _, sum_n), do: rem(sum_n - x, x + 1) == 0\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76857,"user_id":null,"body":"defmodule Removenb do\n  def get_pair(first, last, sum) do\n    check_sum = sum - first - last\n    product = first * last\n\n    if product == check_sum do\n      :equal\n    else\n      case product > check_sum do\n        true -> :greater\n        false -> :lower\n      end\n    end\n  end\n\n  def search(first, last, sum, acc \\\\ [])\n  def search(first, last, sum, acc) when first == last do\n    case get_pair(first, last, sum) do\n      :equal -> [[{first, last}] | acc]\n      _ -> acc\n    end\n  end\n  def search(first, last, sum, acc) do\n    case get_pair(first, last, sum) do\n      :equal -> search(first + 1, last - 1, sum, [[{ first, last}, {last, first}] | acc ])\n      :greater -> search(first, last - 1, sum, acc)\n      :lower -> search(first + 1, last, sum, acc)\n    end\n  end\n\n  def remove_nb(n) do\n    sum = 1..n |> Enum.sum()\n    div(n, 2) \n    |> search(n, sum)\n    |> Enum.concat()\n    |> Enum.sort_by(fn {a, _} -> a end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76858,"user_id":null,"body":"defmodule Removenb do\n  def remove_nb(n) do\n    sum = div(n * (n + 1), 2)\n\n    for x <- 2..n, y = div(sum - x, x + 1), rem(sum - x, x + 1) == 0 && y < n do\n      {x, y}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"554a44516729e4d80b000012":[{"id":76859,"user_id":null,"body":"defmodule Buycar do\n  def nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth) do\n    calculate_months_to_buy(%{\n      month:          0,\n      saved:          0,\n      oldPrice:       startPriceOld,\n      price:          startPriceNew,\n      saving:         savingperMonth,\n      loss:           percentLossByMonth\n    })\n  end\n\n  defp calculate_months_to_buy(%{saved: saved, oldPrice: oldPrice, price: price, } = map) when saved + oldPrice <= price do\n    map\n    |> save_money\n    |> apply_loss\n    |> add_month\n    |> calculate_months_to_buy\n  end\n\n  defp calculate_months_to_buy(map) do\n    print_result(map)\n  end\n\n  defp add_month(%{month: month} = map) do\n    Map.put(map, :month, month + 1)\n  end\n\n  defp save_money(%{saved: saved, saving: saving} = map) do\n    Map.put(map, :saved, saved + saving)\n  end\n\n  defp apply_loss(%{month: month, price: price, oldPrice: oldPrice, loss: loss} = map) when rem(month, 2) == 0 do\n    map\n    |> Map.put(:oldPrice, reduce_percent(oldPrice, loss))\n    |> Map.put(:price, reduce_percent(price, loss))\n    |> increase_loss\n  end\n\n  defp apply_loss(%{price: price, oldPrice: oldPrice, loss: loss} = map) do\n    map\n    |> Map.put(:oldPrice, reduce_percent(oldPrice, loss))\n    |> Map.put(:price, reduce_percent(price, loss))\n  end\n\n  defp increase_loss(%{loss: loss} = map) do\n    Map.put(map, :loss, loss + 0.5)\n  end\n\n  defp print_result(%{month: month, oldPrice: oldPrice, saved: saved, price: price}) do\n    {month, round(saved + oldPrice - price)}\n  end\n\n  defp reduce_percent(amount, percent) do\n    amount - (amount * (percent \/ 100))\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76860,"user_id":null,"body":"defmodule Buycar do\n  require Integer\n\n  def nb_months(start_price_old, start_price_new, savings_per_month, percent_loss_per_month) do\n    calc_rate(start_price_old - start_price_new, savings_per_month, savings_per_month, percent_loss_per_month, 1, start_price_old - start_price_new)\n  end\n  \n  defp calc_rate(_, _, _, _, months, available) when available >= 0 and months == 1, do: {0, available}\n  \n  defp calc_rate(_, _, _, _, months, available) when available >= 0, do: {months - 1, round(available)}\n\n  defp calc_rate(price, savings_rate, total_savings, depreciation, months, _) do\n    rate = if rem(months, 2) == 0, do: depreciation + 0.5, else: depreciation\n    \n    new_price = price * (1 - (rate \/ 100))\n    available = new_price + total_savings\n  \n    calc_rate(new_price, savings_rate, total_savings + savings_rate, rate, months + 1, available)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76861,"user_id":492,"body":"defmodule Buycar do\n\n  defp nb_months_aux(old, new, saving, l, months) do\n    w = old + saving * months\n    if (w >= new) do\n      {months, round(w - new)}\n    else\n      if (rem(months, 2) == 0) do\n        nb_months_aux(old * l, new * l, saving, l, months + 1)\n      else\n        loss = l - 0.005\n        nb_months_aux(old * loss, new * loss, saving, loss, months + 1)\n      end\n    end\n  end\n\n  def nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth) do\n    nb_months_aux(startPriceOld, startPriceNew, savingperMonth, (1.0 - percentLossByMonth \/ 100.0), 0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76862,"user_id":null,"body":"defmodule Buycar do\n  def nb_months(old, new, _save, _percent, saved \\\\ 0, n \\\\ 0)\n\n  def nb_months(old, new, _save, _percent, saved, n) when old + saved > new do\n    {n, round(old + saved - new)}\n  end\n\n  def nb_months(old, new, save, percent, saved, n) do\n    n = n + 1\n    percent = rem(n, 2) == 0 && percent + 0.5 || percent\n    old = old - old * percent \/ 100\n    new = new - new * percent \/ 100\n    saved = saved + save\n    nb_months(old, new, save, percent, saved, n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76863,"user_id":null,"body":"defmodule Buycar do\n\n  def nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth) do\n    calculate(0, 0, startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  end\n  def calculate(months, acc, old_car, new_car, _, _) when acc + old_car >= new_car do\n    {months, round acc + old_car - new_car}\n  end\n  def calculate(months, acc, old_car, new_car, saving_rate, percent) do\n    next_old_car = old_car * (1 - percent \/ 100)\n    next_new_car = new_car * (1 - percent \/ 100)\n    next_acc = acc + saving_rate\n    next_percent = rem(months, 2) === 0 && percent + 0.5 || percent\n    calculate(months + 1, next_acc, next_old_car, next_new_car, saving_rate, next_percent)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76864,"user_id":null,"body":"defmodule Buycar do\n\n  def nb_months(start_price_old, start_price_new, monthly_saving, monthly_loss) do\n    nb_months(start_price_old, start_price_new, monthly_saving, (100-monthly_loss)\/100, 0, 0)\n  end\n  \n  defp nb_months(price_old, price_new, _, _, savings, months) when price_old + savings > price_new do\n    {months, round(price_old + savings - price_new)}\n  end\n  defp nb_months(price_old, price_new, monthly_saving, depreciation, savings, months) do\n    nb_months(price_old * depreciation,\n              price_new * depreciation,\n              monthly_saving,\n              adjust_depreciation(depreciation, months),\n              savings + monthly_saving,\n              months + 1)\n  end\n  \n  defp adjust_depreciation(depreciation, months) when rem(months, 2) == 0 do\n    depreciation - 0.005\n  end\n  defp adjust_depreciation(depreciation, _), do: depreciation\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76865,"user_id":1249,"body":"defmodule Buycar do\n\n  def nb_months(st_old, st_new, save_per, st_pct) do\n    stream = Stream.iterate {0, st_old, st_new, 0, st_pct}, fn {m, old, new, saved, pct} ->\n      {\n        m+1,\n        old*(1-pct\/100),\n        new*(1-pct\/100),\n        saved+save_per,\n        pct + (if rem(m,2)==0, do: 0.5, else: 0)\n      }\n    end\n    \n    {m, o, n, s, _} = Enum.find(stream, fn {_, o, n, s, _} -> n <= o + s end)\n    {m, Float.round(s + o - n \/ 1)}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76866,"user_id":null,"body":"defmodule Buycar do\n  def nb_months(startPriceOld, startPriceNew, savingPerMonth, percentLossByMonth) do\n    _nb_months(0, startPriceOld, startPriceNew, savingPerMonth, percentLossByMonth)\n  end\n  \n  def _nb_months(month, old, new, income, _) when (old + month * income - new >= 0) do\n    {month, round(old + month * income - new)}\n  end\n  def _nb_months(month, old, new, income, percentLoss) do\n    _nb_months(month + 1, old\/100*(100-percentLoss), new\/100*(100-percentLoss), income, percentLoss + rem(month+1, 2) * 0.5)   \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76867,"user_id":null,"body":"defmodule Buycar do\n\n  def nb_months(old, new, saving, percent) do\n    {n, a, b, _, s} = {0, old, new, 1 - percent \/ 100, 0}\n      |> Stream.iterate(fn\n        {n, a, b, p, s} when rem(n, 2) == 0 ->\n          {n + 1, a * p, b * p, p - 0.005, s + saving}\n        {n, a, b, p, s} ->\n          {n + 1, a * p, b * p, p, s + saving}\n      end)\n      |> Enum.find(fn {_, a, b, _, s} ->\n        s + a > b\n      end)\n    {n, round(s + a - b)}\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76868,"user_id":null,"body":"defmodule Buycar do\n  def nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth) do\n    two_month_growth = 0.005\n    {:ok, old_car} = Agent.start_link(fn -> startPriceOld end)\n    {:ok, new_car} = Agent.start_link(fn -> startPriceNew end)\n    {:ok, savings} = Agent.start_link(fn -> 0 end)\n    {:ok, percent_loss_by_month} = Agent.start_link(fn -> percentLossByMonth \/ 100 end)\n\n    {:ok, car_trade} =\n      Agent.start_link(fn ->\n        old_car_price = Agent.get(old_car, fn price -> price end)\n        new_car_price = Agent.get(new_car, fn price -> price end)\n        savings = Agent.get(savings, fn savings -> savings end)\n        old_car_price + new_car_price + savings\n      end)\n\n    months = 0..100000\n\n    month_done =\n      Enum.find(months, fn month ->\n        if month == 0 do\n          Agent.update(car_trade, fn trade_value ->\n            old_car_price = Agent.get(old_car, fn price -> price end)\n            new_car_price = Agent.get(new_car, fn price -> price end)\n            savings = Agent.get(savings, fn savings -> savings end)\n            old_car_price + savings - new_car_price\n          end)\n\n          check_car_trade(car_trade)\n        else\n          if rem(month, 2) == 0 do\n            Agent.update(percent_loss_by_month, fn loss -> loss + 0.005 end)\n            this_months_percent_loss = Agent.get(percent_loss_by_month, fn loss -> loss end)\n            Agent.update(old_car, fn worth -> worth - worth * this_months_percent_loss end)\n            Agent.update(new_car, fn worth -> worth - worth * this_months_percent_loss end)\n            Agent.update(savings, fn saved -> saved + savingperMonth end)\n\n            Agent.update(car_trade, fn trade_value ->\n              old_car_price = Agent.get(old_car, fn price -> price end)\n              new_car_price = Agent.get(new_car, fn price -> price end)\n              savings = Agent.get(savings, fn savings -> savings end)\n              old_car_price + savings - new_car_price\n            end)\n\n            check_car_trade(car_trade)\n          else\n            this_months_percent_loss = Agent.get(percent_loss_by_month, fn loss -> loss end)\n            Agent.update(old_car, fn worth -> worth - worth * this_months_percent_loss end)\n            Agent.update(new_car, fn worth -> worth - worth * this_months_percent_loss end)\n            Agent.update(savings, fn saved -> saved + savingperMonth end)\n\n            Agent.update(car_trade, fn trade_value ->\n              old_car_price = Agent.get(old_car, fn price -> price end)\n              new_car_price = Agent.get(new_car, fn price -> price end)\n              savings = Agent.get(savings, fn savings -> savings end)\n              old_car_price + savings - new_car_price\n            end)\n\n            check_car_trade(car_trade)\n          end\n        end\n      end)\n\n    car_trade = Agent.get(car_trade, fn value -> value end)\n\n    if is_integer(car_trade) do\n      {month_done, car_trade}\n    else\n      {left_over, _} =\n        Float.round(car_trade)\n        |> Float.to_string()\n        |> Integer.parse()\n\n      {month_done, left_over}\n    end\n  end\n\n  defp check_car_trade(car_trade_agent) do\n    trade_value = Agent.get(car_trade_agent, fn trade_value -> trade_value end)\n\n    if trade_value > 0 do\n      true\n    else\n      false\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"554b4ac871d6813a03000035":[{"id":76869,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(s) do\n        {min, max} = s |> String.split\n          |> Enum.map(&(String.to_integer(&1)))\n          |> Enum.min_max\n        \n        \"#{max} #{min}\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76870,"user_id":null,"body":"defmodule Kata do\n  def high_and_low(s) do\n    s\n    |> String.split(\" \")\n    |> Enum.map(fn(x) -> String.to_integer(x) end)\n    |> Enum.min_max()\n    |> Tuple.to_list()\n    |> Enum.reverse()\n    |> Enum.join(\" \")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76871,"user_id":null,"body":"defmodule Kata do\n  def high_and_low(s) do\n    s = \n      s\n      |> String.split()\n      |> Enum.map(fn x -> String.to_integer(x) end)\n    \n    \"#{Enum.max(s)} #{Enum.min(s)}\"\n  end \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76872,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(s) do\n        # TODO: working solution\n        list = s |> String.split(\" \") |> Enum.map(&(String.to_integer\/1))\n        max = list |> Enum.max\n        min = list |> Enum.min\n        to_string(max) <> \" \" <> to_string(min)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76873,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(string) do\n      string\n      |> String.split()\n      |> Enum.map(&String.to_integer\/1)\n      |> Enum.min_max()\n      |> format()\n    end\n    \n    defp format({min, max}), do: \"#{max} #{min}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76874,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(s) do\n      s \n      |> String.split\n      |> Enum.map(&String.to_integer\/1)\n      |> Enum.min_max\n      |> (fn {a, b} -> \"#{b} #{a}\" end).()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76875,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(s) do\n        s\n        |> String.split(\"\\s\")\n        |> Enum.map(&String.to_integer\/1)\n        |> Enum.min_max()\n        |> (fn {min, max} -> \"#{max} #{min}\" end).()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76876,"user_id":null,"body":"defmodule Kata do\n  def high_and_low(numbers) do\n    numbers\n    |> String.split()\n    |> Enum.min_max_by(&String.to_integer\/1)\n    |> (fn {a, b} -> \"#{b} #{a}\" end).()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76877,"user_id":null,"body":"defmodule Kata do\n  @moduledoc false\n\n  def high_and_low(s) do\n    s\n    |> String.split(\" \")\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.min_max()\n    |> Tuple.to_list()\n    |> Enum.reverse()\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76878,"user_id":null,"body":"defmodule Kata do\n    def high_and_low(s) do\n      s\n      |> String.split(\" \")\n      |> Enum.map(fn a -> elem(Integer.parse(a), 0) end)\n      |> format_min_max\n    end\n    \n    def format_min_max(items) do\n      \"#{Enum.max(items)} #{Enum.min(items)}\"\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"554e4a2f232cdd87d9000038":[{"id":76879,"user_id":null,"body":"defmodule Dna do\n  def dna_strand (dna_str) do\n    dna_str\n    |> String.graphemes()\n    |> Enum.map_join(fn\n      \"A\" -> \"T\"\n      \"C\" -> \"G\"\n      \"G\" -> \"C\"\n      \"T\" -> \"A\"\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76880,"user_id":null,"body":"defmodule Dna do\n  def dna_strand (dna_str) do\n    dna_str\n      |> String.graphemes\n      |> Enum.map(&transcribe\/1)\n      |> Enum.join\n  end\n  \n  def transcribe(nuc) do\n    case nuc do\n      \"A\" -> \"T\"\n      \"T\" -> \"A\"\n      \"C\" -> \"G\"\n      \"G\" -> \"C\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76881,"user_id":527,"body":"defmodule Dna do\n  def dna_strand(dna_str) do\n    for <<c <- dna_str>>, into: \"\" do\n      case c do\n        ?A -> \"T\"\n        ?T -> \"A\"\n        ?C -> \"G\"\n        ?G -> \"C\"\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76882,"user_id":null,"body":"defmodule Dna do\n   def dna_strand(dna_str) do\n    dna_str\n    |> String.graphemes()\n    |> Enum.map(fn\n      \"A\" -> \"T\"\n      \"T\" -> \"A\"\n      \"C\" -> \"G\"\n      \"G\" -> \"C\"\n    end)\n    |> Enum.into(\"\")\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76883,"user_id":null,"body":"defmodule Dna do\n  def dna_strand(dna_str), do: String.replace(dna_str, dna_pattern, dna_replace_pattern)\n  \n  def dna_pattern, do: [\"A\", \"C\", \"T\", \"G\"]\n  \n  def dna_replace_pattern do\n    fn \n      \"T\" -> \"A\"\n      \"G\" -> \"C\"\n      \"A\" -> \"T\"\n      \"C\" -> \"G\" \n    end  \n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76884,"user_id":564,"body":"defmodule Dna do\n  def dna_strand(dna) do\n    dna |> String.graphemes\n        |> Enum.map(&complement(&1))\n        |> List.to_string\n  end\n  \n  def complement(n) do\n      case n do\n        \"A\" -> \"T\"\n        \"T\" -> \"A\"\n        \"G\" -> \"C\"\n        \"C\" -> \"G\"\n      end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76885,"user_id":null,"body":"defmodule Dna,do: def dna_strand(s),do: String.replace(s,~r\/.\/,fn\"T\"->\"A\";\"A\"->\"T\";\"G\"->\"C\";\"C\"->\"G\"end)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76886,"user_id":null,"body":"defmodule Dna do\n  def dna_strand(), do: \"\"\n\n  def dna_strand(dna_str) do\n    dna_str\n    |> String.to_charlist\n    |> Enum.map(fn(x) -> complement(x) end)\n    |> List.to_string\n  end\n  \n  defp complement(65), do: 'T'\n  defp complement(84), do: 'A'\n  defp complement(67), do: 'G'\n  defp complement(71), do: 'C'\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76887,"user_id":null,"body":"defmodule Dna do\n  @moduledoc false\n\n  def get_dna_comp(\"A\"), do: \"T\"\n  def get_dna_comp(\"T\"), do: \"A\"\n  def get_dna_comp(\"C\"), do: \"G\"\n  def get_dna_comp(\"G\"), do: \"C\"\n\n  def dna_strand(dna_str) do\n    dna_str\n    |> String.graphemes()\n    |> Enum.map_join(\"\", &get_dna_comp\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76888,"user_id":null,"body":"defmodule Dna do\n  def dna_strand(dna_str) do\n    dna_str\n    |> String.graphemes()\n    |> Enum.map(fn c -> complement(c) end)\n    |> to_string()\n  end\n\n  defp complement(letter) do\n    case(letter) do\n      \"T\" -> \"A\"\n      \"A\" -> \"T\"\n      \"G\" -> \"C\"\n      \"C\" -> \"G\"\n      _ -> :error\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"554f76dca89983cc400000bb":[{"id":76889,"user_id":null,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    for a <- 1..trunc(:math.sqrt(n)),\n        rem(n, a) == 0,\n        b = div(n, a),\n        x = div(a + b, 2),\n        y = div(b - a, 4),\n        x*x - 4*y*y == n do\n      {x, y}\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76890,"user_id":null,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    for x <- 1..trunc(:math.sqrt(n)), rem(n, x) == 0,\n      a = x, b = div(n, x),\n      rem(a + b, 2) == 0, rem(b - a, 4) == 0,\n      do: {div(a + b, 2), div(b - a, 4)}\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76891,"user_id":null,"body":"defmodule Dioph do\n  alias :math, as: Math\n  def sol_equa(n) when n >= 0 do\n    divisors(n)\n    |> Stream.map(&get_solution\/1)\n    |> Stream.filter(&(!is_nil(&1)))\n    |> Enum.to_list\n  end\n\n  defp divisors(n) do\n    1..trunc(Math.sqrt(n))\n    |> Stream.filter_map(&(rem(n, &1) === 0), &({div(n, &1), &1}))\n  end\n  # rem(a - b, 4) must be zero, because diophantine equation solutions are integers \n  defp get_solution({a, b}) when rem(a - b, 4) !== 0, do: nil\n  defp get_solution({a, b}) do\n    # from (x+2y)(x-2y), first parenthesis is a, second is b\n    y = div(a - b, 4)\n    x = b + 2 * y\n    {x, y}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76892,"user_id":53,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    m = Kernel.trunc(:math.sqrt(n))\n    Enum.reverse(aux(1, m, n, []))\n  end\n  \n  defp aux(i, m, n, ans) do\n    d = n \/ i\n    x = (d + i) \/ 2\n    y = (d - i) \/ 4\n    cond do \n      i > m -> ans\n      d != Float.ceil(d) -> aux(i + 1, m, n, ans)\n      x != Float.ceil(x) -> aux(i + 1, m, n, ans)\n      y != Float.ceil(y) -> aux(i + 1, m, n, ans)\n      true -> aux(i + 1, m, n, [{Kernel.trunc(x), Kernel.trunc(y)} | ans])\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76893,"user_id":null,"body":"defmodule Dioph do\n  import Enum\n\n  def sol_equa(n) do\n    divisors(n)\n    |> map(&(resolve div(n, &1), &1))\n    |> filter(fn({x, y}) -> is_int?(x) && is_int?(y) end)\n  end\n\n  def divisors(n) do\n    1..trunc(:math.sqrt(n))\n    |> filter(&(rem(n, &1) == 0))\n  end\n\n  def resolve(term1, term2) do\n    x = (term1 + term2) \/ 2\n    y = (term1 - term2) \/ 4\n    {x, y}\n  end\n\n  def is_int?(number), do: trunc(number) == number\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76894,"user_id":492,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    (for i <- 1..round(:math.sqrt(n)), rem(n,i) == 0,\n      p = i,\n      q = div(n, i),\n      rem(p + q, 2) == 0,\n      rem(q - p, 4) == 0,\n      do: {div(p + q, 2), div(q - p, 4)}\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76895,"user_id":492,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    (for i <- 1..round(:math.sqrt(n)), rem(n,i) == 0,\n      p = i,\n      q = div(n, i),\n      rem(p + q, 2) == 0,\n      rem(q - p, 4) == 0,\n      do: {div(p + q, 2), div(q - p, 4)}\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76896,"user_id":null,"body":"defmodule Dioph do\n\n  def sol_equa(n) do\n    for y <- div(n, 3)..1,\n        (x = trunc(:math.sqrt(4*y*y + n)); x*x - 4*y*y == n) do\n        {x, y}\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76897,"user_id":null,"body":"defmodule Dioph do\n    def sol_equa(n) do\n      1..floor(:math.sqrt(n))\n      |> Enum.filter(&(rem(n,&1) == 0 and rem(div(n,&1) - &1, 4) == 0 and rem(div(n,&1) + &1, 2) == 0))\n      |> Enum.map(&({div(div(n,&1) + &1, 2), div(div(n,&1) - &1, 4)}))\n    end\n  end ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76898,"user_id":null,"body":"  defmodule Dioph do\n    def sol_equa(n) do\n      1..floor(:math.sqrt(n))\n      |> Enum.filter(&(rem(n,&1) == 0))\n      |> Enum.map(&({&1, div(n,&1)}))\n      |> Enum.filter(fn {f1, f2} -> (rem(f2 - f1, 4) == 0) and rem(f1 + f2, 2) == 0 end)\n      |> Enum.map(fn({f1, f2}) -> {div(f1 + f2, 2), div(f2 - f1, 4)} end)\n      |> Enum.sort_by(fn({x,y}) -> x end, :desc)\n    end\n  end ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"555086d53eac039a2a000083":[{"id":76899,"user_id":527,"body":"defmodule Opposites do\n  require Integer\n  \n  def lovefunc(flower1, flower2) do\n    Integer.is_even(flower1) != Integer.is_even(flower2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76900,"user_id":1774,"body":"defmodule Opposites do\n  import Integer, only: [is_even: 1]\n  \n  def lovefunc(flower1, flower2) do\n    is_even(flower1) != is_even(flower2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76901,"user_id":null,"body":"defmodule Opposites do\n  def lovefunc(flower1, flower2), do: rem(flower1 + flower2, 2) == 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76902,"user_id":null,"body":"defmodule Opposites do\n  def lovefunc(flower1, flower2), do: rem(flower1, 2) != rem(flower2, 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76903,"user_id":null,"body":"require Integer\ndefmodule Opposites do\n  def lovefunc(flower1, flower2) do\n    flower1 + flower2\n    |> Integer.is_odd\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76904,"user_id":null,"body":"defmodule Opposites do\n  import Integer, only: [is_odd: 1]\n  \n  def lovefunc(flower1, flower2) do\n    is_odd(flower1 + flower2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76905,"user_id":null,"body":"defmodule Opposites do\n  def lovefunc(flower1, flower2) do\n    (flower1 + flower2) |> rem(2) != 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76906,"user_id":250,"body":"defmodule Opposites do\n  def lovefunc(a, b), do: rem(a+b,2)==1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76907,"user_id":null,"body":"defmodule Opposites do\n  import Integer, only: [is_even: 1]\n\n  def lovefunc(flower1, flower2), do: is_even(flower1) != is_even(flower2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76908,"user_id":null,"body":"defmodule Opposites do\n  def lovefunc(f1, f2) when rem(f1 + f2, 2) == 1 do\n    true\n  end\n  \n  def lovefunc(_, _) do\n    false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5550d638a99ddb113e0000a2":[{"id":76909,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k) do\n    josephus(items, k, k)\n  end\n  def josephus([], _current, _k), do: []\n  def josephus([head | tail], 1, k) do\n    [head | josephus(tail, k, k)]\n  end\n  def josephus([head | tail], current, k) do\n    josephus(tail ++ [head], current - 1, k)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76910,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k) do\n    Stream.unfold({items, length(items) - 1}, fn\n      {[], _} -> \n        nil\n      \n      {it, index} ->\n        index = rem(k + index, length(it))\n        {val, it_prime} = List.pop_at(it, index)\n        \n        {val, {it_prime, index - 1}}\n        \n    end)\n    |> Enum.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76911,"user_id":null,"body":"defmodule Josephus do\n  def josephus([], _, ret, _) do ret end\n  def josephus(items, k, ret \\\\ [], i \\\\ 0) do\n    i = calc_index(length(items), k+i) - 1\n    died = Enum.at(items, i)\n    others = Enum.slice(items, 0, i) ++ Enum.slice(items, i+1, length(items))\n    all_dead = ret ++ [died]\n    josephus(others, k, all_dead, i)\n  end\n  \n  defp calc_index(n, k) when n < k do calc_index(n, k-n) end\n  defp calc_index(n, k) do k end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76912,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k) do\n    do_permute(items, [], k)\n  end\n\n  def do_permute([], josephus, _k), do: josephus\n\n  def do_permute(items, josephus, k) when k <= length(items) do\n    {pre, [item | post]} = Enum.split(items, k-1)\n\n    do_permute(post ++ pre, josephus ++ [item], k)\n  end\n\n  def do_permute(items, josephus, k) do\n    {pre, [item | post]} = Enum.split(items, rem(k-1, length(items)))\n\n    do_permute(post ++ pre, josephus ++ [item], k)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76913,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k) do\n    do_permute(items, [], k)\n  end\n\n  def do_permute([], josephus, _k), do: josephus\n\n  def do_permute(items, josephus, k) when k <= length(items) do\n    IO.inspect(items, label: \"items\")\n    IO.inspect(k, label: \"k\")\n    {pre, [item | post]} = Enum.split(items, k-1)\n\n    do_permute(post ++ pre, josephus ++ [item], k)\n  end\n\n  def do_permute(items, josephus, k) do\n    {pre, [item | post]} = Enum.split(items, rem(k-1, length(items)))\n\n    do_permute(post ++ pre, josephus ++ [item], k)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76914,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k, i\\\\0) when items == [], do: []\n  def josephus(items, k, i) do\n    1..Enum.count(items)\n    |> Enum.group_by(&(rem(&1 - i, k) == 0), &(Enum.at(items,&1 - 1)))\n    |> Map.put_new(false, [])\n    |> Map.put_new(true, [])\n    |> Map.to_list\n    |> Enum.sort\n    |> Enum.reduce(fn({_, killed}, {_, remaining}) -> Enum.concat(killed, josephus(remaining, k, k - rem(Enum.count(items) - i, k))) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76915,"user_id":null,"body":"defmodule Josephus do\n  def josephus([], _), do: []\n\n  def josephus(items, k) do\n    Enum.reduce(1..length(items), {[], items}, fn _, {res, lst} ->\n      rot = rem(k - 1, length(lst))\n      [h | rst] = Enum.slice(lst, rot..-1) ++ Enum.slice(lst, 0, rot)\n      {[h | res], rst}\n    end)\n    |> elem(0)\n    |> Enum.reverse()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76916,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k) do\n    if Enum.count(items) > 0 do\n      Josephus.permutate(\n        items,\n        [],\n        k - 1,\n        rem(k - 1, Enum.count(items))\n      )\n    else\n      items\n    end\n  end\n\n  def permutate(input, output, k, index) do\n    {poppedVal, newInput} = List.pop_at(input, index)\n\n    if Enum.count(newInput) > 0 do\n      Josephus.permutate(\n        newInput, \n        [poppedVal | output], \n        k, \n        rem(index + k, Enum.count(newInput))\n      )\n    else\n      Enum.reverse([poppedVal | output])\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76917,"user_id":null,"body":"defmodule Josephus do\n  #use ExUnit.Case\n  def josephus(items, k, n \\\\ nil, offset \\\\ nil)\n  \n  def josephus(items, k, nil, nil) do\n    josephus(items, k, length(items), k - 1)\n  end\n  \n  def josephus(items, k, n, nil) do\n    josephus(items, k, n, k - 1)\n  end\n  \n  def josephus([], _k, _n, _offset), do: []\n  \n  def josephus(items, k, n, offset) when offset >= n do\n    josephus(items, k, n, rem(offset, n))\n  end\n  \n  def josephus(items, k, n, offset) do\n    killed_amt = 1 + div(n - offset - 1, k)\n    {killed, survived} = items |> cycle(k, offset)\n    remaining_amt = n - killed_amt\n    killed ++ josephus(survived, k, n - killed_amt, killed_amt * k + offset - n)\n  end\n  \n  # Kills soldiers in one rotation of the circle\n  def cycle(items, k, offset) do\n    {killed, survived} = \n      items \n      |> Enum.with_index \n      |> Enum.split_with(fn {_e, i} -> rem(i, k) == offset end)\n    \n    {remove_index(killed), remove_index(survived)}\n  end\n    \n  def remove_index(list) do\n    Enum.map(list, &elem(&1, 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76918,"user_id":null,"body":"defmodule Josephus do\n  def josephus(items, k), do: josephus(items, k, k - 1, [])\n  \n  defp josephus([], _, _, result), do: result\n  defp josephus(items, k, curr, result) when curr >= length(items), \n    do: josephus(items, k, curr - length(items), result)\n  defp josephus(items, k, curr, result) do\n    {head, [taken|tail]} = Enum.split(items, curr)\n    josephus(head ++ tail, k, curr + k - 1, result ++ [taken])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"555624b601231dc7a400017a":[{"id":76919,"user_id":null,"body":"defmodule Josephus do\n\n  def josephus_survivor(1, _k), do: 1\n  def josephus_survivor(n, k), do: rem(survivor(n - 1, k) + k - 1, n) + 1\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76920,"user_id":527,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    Enum.reduce(1..n, 1, fn(j, i) -> rem(i + k, j) end) + 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76921,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    Enum.to_list(1..n) |> find_survivor(0, k)\n  end\n  \n  def find_survivor([x], _, _), do: x\n  def find_survivor(ls, initial, k) do\n    chosen = rem(initial + k - 1, length(ls))\n    List.delete_at(ls, chosen)\n    |> find_survivor(chosen, k)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76922,"user_id":17,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    # Source: https:\/\/en.wikipedia.org\/wiki\/Josephus_problem#The_general_case\n    # (I couldn't come up with the formula myself :p)\n    if (n === 1), do: 1, else: rem(survivor(n - 1, k) + k - 1, n) + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76923,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(1, _), do: 1\n  def josephus_survivor(n, k), do: rem(survivor(n - 1, k) + k - 1, n) + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76924,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k), do: survivor(Enum.to_list(1..n), k, 0)\n  def josephus_survivor([last], _k, _i), do: last\n  def josephus_survivor(l, k, i) do\n    survivor(List.delete_at(l, rem(i + k - 1, length(l))), k, rem(i + k - 1, length(l)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76925,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    Enum.reduce(2..n, 1, fn i, f -> 1 + rem(f + k - 1, i) end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76926,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    # TODO\n    Enum.to_list(1..n)\n    |> kill_count(k-1, k)\n    \n    \n  end\n  \n  def kill_count(live_list, _index, _k) when length(live_list) == 1 do\n    [head | _tail] = live_list\n    head\n  end\n  \n  def kill_count(live_list, index, k) when index >= length(live_list) do\n    index = index - length(live_list) \n    kill_count(live_list, index, k)\n  end\n  \n  def kill_count(live_list, index, k) do\n    live_list = List.delete_at(live_list, index)\n    kill_count(live_list, index + k - 1, k)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76927,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    1..n |> Enum.to_list |> listed_survivor(k, 0)\n  end\n  \n  defp listed_survivor([x], _, _), do: x\n  defp listed_survivor(xs, k, offset) do\n    idx = rem(offset + k - 1, Enum.count(xs))\n  \n    xs \n      |> List.pop_at(idx)\n      |> elem(1)\n      |> listed_survivor(k, idx)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76928,"user_id":null,"body":"defmodule Josephus do\n  def josephus_survivor(n, k) do\n    1..n\n    |> Enum.to_list()\n    |> weed_out(0, k)\n  end\n\n  defp weed_out([survived], _current, _step), do: survived\n\n  defp weed_out(list, current, step) do\n    deleted = rem(current + step - 1, length(list))\n    list = List.delete_at(list, deleted)\n    weed_out(list, deleted, step)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5556282156230d0e5e000089":[{"id":76929,"user_id":null,"body":"defmodule Convertor do\n  def dna_to_rna(dna), do: String.replace(dna, \"T\", \"U\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76930,"user_id":null,"body":"defmodule Convertor do\n  def dna_to_rna(dna) do\n    String.replace dna, ~r\/T\/, \"U\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76931,"user_id":null,"body":"defmodule Convertor do\n  @doc \"\"\"\n  Converts a strand of DNA to a strand of RNA.\n  \"\"\"\n  @spec dna_to_rna(String.t()) :: String.t()\n  def dna_to_rna(dna) do\n    dna\n    |> String.codepoints()\n    |> Enum.map_join(&rna\/1)\n  end\n  \n  defp rna(\"G\"), do: \"G\"\n  defp rna(\"C\"), do: \"C\"\n  defp rna(\"A\"), do: \"A\"\n  defp rna(\"T\"), do: \"U\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76932,"user_id":277,"body":"defmodule Convertor do\n  def dna_to_rna(dna) do\n    Regex.replace(~r\/T\/, dna, \"U\", global: true)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76933,"user_id":null,"body":"defmodule Convertor do\n  @dna %{\"A\" => \"A\", \"C\" => \"C\", \"T\" => \"U\", \"G\" => \"G\"}\n\n  def dna_to_rna(n) do \n    n |> String.codepoints |> Enum.map(&(@dna[&1])) |> List.to_string\n  end \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76934,"user_id":null,"body":"defmodule Convertor do\n  def dna_to_rna(dna) do\n    # TODO: ...\n    String.replace(dna, \"T\", \"U\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76935,"user_id":null,"body":"defmodule Convertor do\n  \n  def dna_to_rna(dna) do\n   List.to_string(fun(to_charlist(dna), []))\n  end\n  \n  def fun([], out) do out end\n  def fun([h|t],out) when h==84 do \n    [85|fun(t,out)]\n  end\n \n  def fun([h|t], out) do\n    [h|fun(t,out)]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76936,"user_id":null,"body":"defmodule Convertor do\n  def _dna_to_rna([]), do: []\n  def _dna_to_rna([head | tail]) do\n    if head == \"T\" do\n      [\"U\" | _dna_to_rna(tail)]\n    else\n      [head | _dna_to_rna(tail)]\n    end\n    \n  end\n  def dna_to_rna(dna) do\n    # TODO: ...\n    _dna_to_rna(String.codepoints(dna)) |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76937,"user_id":null,"body":"defmodule Convertor do\n  def dna_to_rna(dna) when is_binary(dna), do: dna_to_rna String.to_charlist dna\n  def dna_to_rna(dna) when is_list(dna), do: to_string Enum.reverse process dna\n  \n  def process(chars, acc \\\\ [])\n  def process([], acc), do: acc \n  def process([84 | rest], acc), do: process(rest, [85] ++ acc)\n  def process([cp | rest], acc), do: process(rest, [cp] ++ acc)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76938,"user_id":null,"body":"defmodule Convertor do\n  def dna_to_rna(dna) do\n    String.replace(dna, ~r\"[T]\", \"U\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"555a67db74814aa4ee0001b5":[{"id":76939,"user_id":null,"body":"defmodule Evenator do\n  require Integer\n \n  def is_even(n) when is_integer(n), do: Integer.is_even(n)\n  def is_even(n) when is_float(n), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76940,"user_id":76,"body":"require Integer\n\ndefmodule Evenator do\n  def is_even(n) do\n    Integer.is_even(n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76941,"user_id":null,"body":"defmodule Evenator do\n  def is_even(n) when rem(n, 2) == 0 do\n    true\n  end\n  \n  def is_even(_) do\n    false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76942,"user_id":null,"body":"import Integer\n\ndefmodule Evenator do\n  def is_even(n) when is_integer(n) and is_even(n), do: true\n  def is_even(_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76943,"user_id":null,"body":"import Integer\n\ndefmodule Evenator do\n  def is_even(n) do\n    Integer.is_even(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76944,"user_id":null,"body":"defmodule Evenator do\n  def is_even(n) do\n    require Integer\n    case is_integer(n) do\n      true -> Integer.is_even(n)\n      false -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76945,"user_id":null,"body":"defmodule Evenator do\nrequire Integer\n  def is_even(n) do\n    if is_integer(n), do: Integer.is_even(n), else: false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76946,"user_id":null,"body":"defmodule Evenator do\n  def is_even(n) when is_integer(n), do: rem(n, 2) == 0\n  def is_even(n) when is_float(n), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76947,"user_id":null,"body":"defmodule Evenator do\n  def is_even(n), do: (is_integer(n) && rem(n,2) == 0) && true || false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76948,"user_id":null,"body":"defmodule Evenator do\nrequire Integer\n  def is_even(n) do\n      case to_string(n) |> String.contains?(\".\") do\n      true -> false\n      false -> Integer.is_even(n)\n      \n      end\n  \n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"555eded1ad94b00403000071":[{"id":76949,"user_id":2098,"body":"defmodule Series do\n  def series_sum(0), do: \"0.00\"\n  def series_sum(1), do: \"1.00\"\n\n  def series_sum(n) do\n    n\n    |> generate_numbers\n    |> add_numbers\n    |> Float.round(2)\n    |> Float.to_string([decimals: 2])\n  end\n\n  defp generate_numbers(n), do: for num <- 0..n - 1, do: 1 \/ (1 + 3 * num)\n\n  defp add_numbers(list), do: Enum.reduce(list, 0, fn (x, acc) -> (x + acc)\/1 end)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76950,"user_id":null,"body":"defmodule Series do\n  def series_sum(0), do: \"0.00\"\n  def series_sum(n) do\n    1..n\n    |> Enum.map(&(1\/(&1 * 3 - 2)))\n    |> Enum.sum \n    |> Float.to_string(decimals: 2)\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76951,"user_id":null,"body":"defmodule Series do\n   def series_sum(n, acc \\\\ 0.0)\n\n   def series_sum(0, acc), do: acc |> :erlang.float_to_binary(decimals: 2)\n\n   def series_sum(n, acc), do: sum(n-1, acc + 1\/(1+3*(n-1)))\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76952,"user_id":null,"body":"defmodule Series do\n  def series_sum(n) do\n    # the docs don't mention options on to_string, but\n    # i found some references that implied it.\n    # also the instructions say \"round up\", but\n    # the test suite fails if you do that.  :-P\n    do_sum(n, 0.0) |> Float.to_string(decimals: 2)\n  end\n  defp do_sum(0, acc), do: acc\n  defp do_sum(n, acc) do\n  \tdo_sum(n - 1, acc + 1.0 \/ (n * 3 - 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76953,"user_id":null,"body":"defmodule Series do\n  \n  def series_sum(0), do: \"0.00\"\n  def series_sum(1), do: \"1.00\"\n  \n  def series_sum(n) do\n\t\tEnum.reduce_while(2..n, 1.00, fn n, acc -> {:cont, acc + 1\/(1 + (n-1) * 3) } end)\n    |> Float.round(2)\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76954,"user_id":2098,"body":"defmodule Series do\n  def series_sum(0), do: \"0.00\"\n  def series_sum(1), do: \"1.00\"\n\n  def series_sum(n) do\n    n\n    |> generate_numbers\n    |> add_numbers\n    |> rounder\n  end\n\n  defp generate_numbers(n) do\n    for num <- 0..n - 1 do\n      1 \/ (1 + 3 * num)\n    end\n  end\n\n  defp add_numbers(list) do\n    Enum.reduce(list, 0, fn (x, acc) -> (x + acc)\/1 end)\n  end\n\n  defp rounder(num) do\n    Float.round(num, 2)\n    |> Float.to_string([decimals: 2])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76955,"user_id":null,"body":"defmodule Series do\n  def series_sum(n) do\n    Float.to_string(s(n), decimals: 2)\n  end\n  def s(0), do: 0.0\n  def s(n), do: 1 \/ (n * 3 - 2) + s(n-1)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76956,"user_id":null,"body":"defmodule Series do\n  def series_sum(0), do: \"0.00\"\n\n  def series_sum(n) do\n    1..n\n    |> Enum.map(&(1 \/ (&1 * 3 - 2)))\n    |> Enum.sum()\n    |> :erlang.float_to_binary(decimals: 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76957,"user_id":1774,"body":"defmodule Series do\n\n  def series_sum(n), do: do_sum(n, 0.0)\n  \n  defp do_sum(0, total), do: Float.to_string(total, decimals: 2)\n  defp do_sum(n, total), do: do_sum(n - 1, accumulate(n, total))\n  \n  defp accumulate(n, total), do: total + 1 \/ ((3 * n) - 2)\n\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76958,"user_id":null,"body":"defmodule Series do\n  def series_sum(0), do: \"0.00\"\n\n  def series_sum(n) do\n    Enum.take_every(1..(n * 3), 3)\n    |> Enum.reduce(0, fn x, acc -> 1 \/ x + acc end)\n    |> Float.to_string(decimals: 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"556206664efbe6376700005c":[{"id":76959,"user_id":null,"body":"defmodule Kata do\n  @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  @graphemes String.graphemes(@chars)\n\n  defp ch_to_digit(ch), do: Enum.find_index(@graphemes, fn c -> c == ch end)\n\n  def is_polydivisible(s, b) do\n    res =\n      String.graphemes(s)\n      |> Enum.reduce_while({0, 1}, fn c, {v, i} ->\n        v2 = v * b + ch_to_digit(c)\n        if rem(v2, i) == 0, do: {:cont, {v2, i + 1}}, else: {:halt, false}\n      end)\n\n    case res do\n      false -> false\n      _ -> true\n    end\n  end\n\n  defp num_to_str(0, _), do: \"0\"\n  defp num_to_str(num, b), do: n2s(num, b)\n\n  defp n2s(0, _), do: \"\"\n  defp n2s(num, b), do: n2s(div(num, b), b) <> Enum.at(@graphemes, rem(num, b))\n\n  defp gen_poly(res, n, _b, _pd, _i) when length(res) >= n, do: Enum.at(res, n - 1)\n\n  defp gen_poly(res, n, b, pd, i) do\n    pd2 =\n      Enum.flat_map(pd, fn p ->\n        Enum.map(0..(b - 1), fn d -> p * b + d end)\n        |> Enum.filter(fn p2 -> rem(p2, i) == 0 end)\n      end)\n\n    [h | pd3] = pd2\n    gen_poly(res ++ pd2, n, b, if(h == 0, do: pd3, else: pd2), i + 1)\n  end\n\n  def get_polydivisible(n, b), do: gen_poly([], n, b, [0], 1) |> num_to_str(b)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76960,"user_id":null,"body":"defmodule Kata do\n  @chars String.graphemes(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")\n         |> Enum.with_index()\n         |> Enum.reduce(Map.new(), &Map.put(&2, elem(&1, 0), elem(&1, 1)))\n\n  def to_number(\"\", _), do: 0\n\n  def to_number(<<first::utf8, rest::binary>>, base) do\n    num = (Map.get(@chars, <<first>>) * :math.pow(base, String.length(rest))) |> round()\n    num + to_number(rest, base)\n  end\n\n  @inv_chars Map.new(@chars, fn {key, val} -> {val, key} end)\n\n  def to_string_in_base(n, base, height \\\\ 0)\n  def to_string_in_base(_, _, -1), do: \"\"\n\n  def to_string_in_base(n, base, height) do\n    max = round(:math.pow(base, height))\n    \n    if n >= max * base do\n      to_string_in_base(n, base, height + 1)\n    else\n      Map.get(@inv_chars, div(n, max)) <> to_string_in_base(rem(n, max), base, height - 1)\n    end\n  end\n\n  def is_polydivisible(str, base, acc \\\\ \"\")\n  def is_polydivisible(\"\", _, _), do: true\n\n  def is_polydivisible(<<first::utf8, rest::binary>>, base, acc) do\n    acc = acc <> <<first>>\n\n    if to_number(acc, base) |> rem(String.length(acc)) == 0 do\n      is_polydivisible(rest, base, acc)\n    else\n      false\n    end\n  end\n\n  def get_polydivisible(n, base, pos \\\\ 0)\n  def get_polydivisible(0, base, pos), do: to_string_in_base(pos - 1, base)\n\n  def get_polydivisible(n, base, pos) do\n    if is_polydivisible(to_string_in_base(pos, base), base) do\n      get_polydivisible(n - 1, base, pos + 1)\n    else\n      get_polydivisible(n, base, pos + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76961,"user_id":null,"body":"defmodule Kata do\n  @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n  \n  def is_polydivisible(s, base) when is_binary(s), do:\n    is_polydivisible(binary_to_digits(s), base)\n  def is_polydivisible(i, base) when is_integer(i), do:\n    is_polydivisible(Integer.digits(i, base), base)\n  def is_polydivisible(digits, base) do\n    Enum.map_reduce(digits, [], fn x, acc ->\n      {[x | acc], [x | acc]}\n    end)\n    |> elem(0)\n    |> Enum.with_index(1)\n    |> Enum.all?(fn {n, i} ->\n      rem(digits_to_integer(n, base), i) == 0\n    end)\n  end\n  \n  def get_polydivisible(n, base), do:\n    get_polydivisible(n, base, 0)\n  defp get_polydivisible(n, base, current) do\n    divisible? = is_polydivisible(current, base)\n    case {divisible?, n} do\n      {true,  1} -> integer_to_binary(current, base)\n      {true,  _} -> get_polydivisible(n - 1, base, current + 1)\n      {false, _} -> get_polydivisible(n, base, current + 1)\n    end\n  end\n  \n  def digits_to_integer(digits, base) do\n    Enum.with_index(digits)\n    |> Enum.reduce(0, fn {e, k}, acc -> acc + e * pow(base, k) end)\n  end\n  \n  def binary_to_digits(n) do\n    chars = String.graphemes(@chars)\n    \n    String.graphemes(n)\n    |> Enum.map(&Enum.find_index(chars, fn i -> i == &1 end))\n  end\n\n  def integer_to_binary(i, base) do\n    Integer.digits(i, base)\n    |> Enum.map(&String.at(@chars, &1))\n    |> Enum.join()\n  end\n  \n  def pow(x, y), do: pow(x, y, 1)\n  defp pow(x, 0, acc), do: acc\n  defp pow(x, y, acc), do: pow(x, y - 1, acc * x)\n  \n  def then(x, func), do: func.(x)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76962,"user_id":null,"body":"defmodule Kata do\n    @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    def string_to_integer(s, b) do\n      s\n      |> String.graphemes\n      |> Enum.map(fn c -> @chars |> :binary.match(c) |> elem(0) end)\n      |> Integer.undigits(b)\n    end\n    def integer_to_string(i, b) do\n      i\n      |> Integer.digits(b)\n      |> Enum.map(& String.at(@chars, &1))\n      |> Enum.join\n    end\n    def is_polydivisible(s,b) do\n        l = String.length(s)\n        for i <- 1..l do\n          rem(s\n          |> String.slice(0, i)\n          |> string_to_integer(b),\n          i) == 0\n        end |> Enum.all?\n    end\n    def get_polydivisible(n, b), do: getp(n, b) |> integer_to_string(b)\n    def getp(1,_), do: 0\n    def getp(n,b) do\n        last = getp(n-1, b)\n        Stream.iterate(last+1, fn x -> x+1 end)\n        |> Enum.find(fn x -> is_polydivisible(integer_to_string(x, b), b) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76963,"user_id":null,"body":"defmodule Kata do\n    @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    def string_to_integer(s, b) do\n      s\n      |> String.graphemes\n      |> Enum.map(fn c -> @chars |> String.graphemes |> Enum.find_index(& &1==c) end)\n      |> Integer.undigits(b)\n    end\n    def integer_to_string(i, b) do\n      i\n      |> Integer.digits(b)\n      |> Enum.map(& String.at(@chars, &1))\n      |> Enum.join\n    end\n    def is_polydivisible(s,b) do\n        l = String.length(s)\n        for i <- 1..l do\n          rem(s\n          |> String.slice(0, i)\n          |> string_to_integer(b),\n          i) == 0\n        end |> Enum.all?\n    end\n    def get_polydivisible(n, b), do: getp(n, b) |> integer_to_string(b)\n    def getp(1,_), do: 0\n    def getp(n,b) do\n        last = getp(n-1, b)\n        Stream.iterate(last+1, fn x -> x+1 end)\n        |> Enum.find(fn x -> is_polydivisible(integer_to_string(x, b), b) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76964,"user_id":null,"body":"defmodule Kata do\n  @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n  def is_polydivisible(num, base), do:\n    0..String.length(num) - 1\n    |> Enum.map(fn idx -> String.slice(num, 0..idx) end)\n    |> Enum.with_index\n    |> Enum.map(fn {val, idx} -> rem(convert_base_to_ten(val, base), idx + 1) == 0 end)\n    |> Enum.all?\n\n  def get_polydivisible(num, base), do: do_get_polydivisible(num, base, \"0\", 1)\n\n  defp do_get_polydivisible(num, base, val, idx) do\n    cond do\n      is_polydivisible(val, base) and idx == num -> val\n      is_polydivisible(val, base) -> do_get_polydivisible(num, base, incr_value(val, base), idx + 1)\n      true -> do_get_polydivisible(num, base, incr_value(val, base), idx)\n    end\n  end\n\n  defp incr_value(val, base), do:\n    val\n    |> convert_base_to_ten(base)\n    |> Kernel.+(1)\n    |> convert_base_from_ten(base)\n\n  defp convert_base_to_ten(num, base), do:\n    num\n    |> String.graphemes\n    |> Enum.with_index\n    |> Enum.map(fn {val, idx} -> {val, String.length(num) - idx - 1} end)\n    |> Enum.map(fn {val, idx} -> get_ord(val) * round(:math.pow(base, idx)) end)\n    |> Enum.sum\n\n  defp convert_base_from_ten(num, base), do: convert_base_from_ten(num, base, [])\n  defp convert_base_from_ten(num, _, acc) when num == 0, do: Enum.join(acc)\n  defp convert_base_from_ten(num, base, acc),\n       do: convert_base_from_ten(div(num, base), base, [get_abc(rem(num, base)) | acc])\n\n  defp get_ord(sym),\n       do: @chars\n           |> String.graphemes\n           |> Enum.with_index\n           |> Enum.filter(fn {value, _} -> value == sym end)\n           |> (fn [{_, idx}] -> idx end).()\n\n  defp get_abc(num), do: String.at(@chars, num)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76965,"user_id":null,"body":"defmodule Kata do\n    @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n    defp to_dec(s,b), do: Enum.reduce(1..byte_size(s), 0,\n        fn i,t ->\n            {k,1} = :binary.match(@chars,String.at(s,-i))\n            t + k * floor(:math.pow(b,i-1))\n        end)\n\n    def is_polydivisible(s,b), do:\n        Enum.all?(1..byte_size(s),& String.slice(s,0..&1-1) |> to_dec(b) |> rem(&1) == 0)\n    \n    defp to_base(0,_b,\"\"), do: \"0\"\n    defp to_base(0,_b,s), do: String.reverse(s)\n    defp to_base(n,b,s), do: to_base(div(n,b),b,s <> String.at(@chars,rem(n,b)))\n    \n    def get_polydivisible(n,b), do: 0\n        |> Stream.iterate(& &1+1)\n        |> Stream.map(& to_base(&1,b,\"\"))\n        |> Stream.filter(& is_polydivisible(&1,b))\n        |> Enum.at(n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76966,"user_id":null,"body":"defmodule Kata do\n  @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n         |> String.codepoints\n\n  defp char_table(num) when is_number(num) do\n    @chars\n    |>Enum.at(num)\n  end\n\n  defp char_table(char) when is_bitstring(char) do\n    @chars\n    |>Enum.find_index( fn x -> x == char end )\n  end\n\n  defp parse(s,b) do\n    l=String.length(s)\n    String.codepoints(s)\n    |> Enum.with_index(-1*(l-1))\n    |> Enum.reduce(0,\n         fn x,acc ->\n           num = x |> elem(0) |> char_table\n           ind = -1 * (x |> elem(1))\n           acc + num * :math.pow(b,ind)\n         end)\n    |> trunc\n  end\n\n  defp to_string(n,b) when n < b do char_table(n) end\n  defp to_string(n,b) do\n      [char_table(rem(n,b)), to_string(div(n,b),b)]\n      |> Enum.reverse\n      |> Enum.join\n  end\n\n  def is_polydivisible(s,b) do\n    count = String.length(s)\n    1..count\n    |> Enum.all?(\n         fn n ->\n           String.slice(s,0,n)\n           |> parse(b)\n           |> rem(n) == 0\n         end )\n  end\n\n  def get_polydivisible(n,b) do\n    case n do\n      0 -> \"1\"\n      _ -> get_polydivisible(n,b,0,0)\n    end\n  end\n  defp get_polydivisible(n,b,cur,acc) do\n    cur_in_base = to_string(cur,b)\n    polydivisible = is_polydivisible(cur_in_base,b)\n    cond do\n      polydivisible && (acc+1 == n) -> cur_in_base\n      polydivisible && (acc+1 != n) -> get_polydivisible(n,b,cur+1,acc+1)\n      polydivisible == false -> get_polydivisible(n,b,cur+1,acc)\n      true -> nil\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76967,"user_id":443,"body":"defmodule Kata do\n    @chars \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    @char_map Map.new(Enum.zip(String.to_charlist(@chars), 0..61))\n    @inv_char_map Map.new(Enum.zip(0..61, String.to_charlist(@chars)))\n    \n    def is_polydivisible(s,b) do\n        1..String.length(s)\n        |> Enum.reduce(:true, &(is_polydivisible_substring(&1, &2, s, b)))\n    end\n    \n    def is_polydivisible_substring(_, :false, _, _), do: :false\n    def is_polydivisible_substring(1, _, _, _), do: :true\n    def is_polydivisible_substring(sub_len, _, str, base) do\n      str\n      |> String.slice(0, sub_len)\n      |> to_base_10(base)\n      |> rem(sub_len) == 0\n    end\n    \n    def get_polydivisible(n,b) do\n        get_polydivisible(n, b, 0)\n    end\n    def get_polydivisible(1, base, num) do\n      str_num = to_base_n(num, base)\n      case is_polydivisible(str_num, base) do\n        :true -> str_num\n        :false -> get_polydivisible(1, base, num + 1)\n      end\n    end\n    def get_polydivisible(count, base, num) do\n      str_num = to_base_n(num, base)\n      case is_polydivisible(str_num, base) do\n        :true -> get_polydivisible(count - 1, base, num + 1)\n        :false -> get_polydivisible(count, base, num + 1)\n      end\n    end\n    \n    defp to_base_10(str, str_base) do\n      str\n      |> String.to_charlist\n      |> Enum.reduce(0, fn char, acc -> (acc * str_base) + Map.fetch!(@char_map, char) end)\n    end\n    \n    defp to_base_n(num, base), do: to_base_n(num, base, [])\n    defp to_base_n(num, base, acc) when num >= base, do: to_base_n(div(num, base), base, [rem(num, base) | acc])\n    defp to_base_n(num, _, acc) do\n      [num | acc]\n      |> Enum.map(&(Map.fetch!(@inv_char_map, &1)))\n      |> to_string\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76968,"user_id":null,"body":"defmodule Kata do\n\n    def is_polydivisible(s,b) do        \n        s=String.split(s, \"\", trim: true)\n        is_polydivisibleN(s,\"\",b,0)\n    end\n\n    def is_polydivisibleN([],_acc,_b,_d) do true end\n    def is_polydivisibleN([h|t],acc,b,d) do\n        d=d+1        \n        acc=acc<>h        \n        accNum=parse(acc,b)\n        if rem(accNum,d) != 0 do\n            false\n        else\n            is_polydivisibleN(t,acc,b,d)\n        end\n    end\n    \n    def get_polydivisible(n,b) do \n        get_polydivisible(n,b,0)\n    end\n    def get_polydivisible(0,b,pn) do to_str(pn-1,b) end\n    def get_polydivisible(n,b,pn) do        \n        if is_polydivisible( to_str(pn,b),b ) do\n            get_polydivisible(n-1,b,pn+1)\n        else\n            get_polydivisible(n,b,pn+1)\n        end\n    end\n\n    def to_str(0,_b) do \"0\" end\n    def to_str(n,b) do to_strH(n,b) end\n    def to_strH(0,_b) do \"\" end\n    def to_strH(n,b) do\n        rm=rem(n,b)\n        dv=div(n,b)\n        to_strH(dv,b)<>to_char(rm)\n    end\n\n    def to_char(d) when d>=0 and d<=9 do Integer.to_string(d) end\n    def to_char(d) when d>=10 and d<=35 do List.to_string([?A-10+d]) end\n    def to_char(d) when d>=36 and d<=61 do List.to_string([?a-36+d]) end\n\n    def parse(s,b) do\n        parseL(String.split(s, \"\", trim: true),b,0)\n    end\n    def parseL([],_b,acc) do acc end\n    def parseL([d|t],b,acc) do\n        acc=acc*b\n        parseL(t,b,acc+to_val(d))\n    end   \n\n    def to_val(<<d, rest::binary>>) when d>=?0 and d<=?9 do d-?0 end\n    def to_val(<<d, rest::binary>>) when d>=?A and d<=?Z do d-?A+10 end\n    def to_val(<<d, rest::binary>>) when d>=?a and d<=?z do d-?a+36 end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5562ab5d6dca8009f7000050":[{"id":76969,"user_id":null,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n    h = (b - a) \/ n\n    (Enum.map(0..(n - 1), fn i -> f.(a + i * h) end) |> Enum.sum()) * h\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76970,"user_id":null,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n    h = (b - a) \/ n\n    Enum.map(0..(n - 1), fn i -> f.(a + i * h) * h end) |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76971,"user_id":527,"body":"defmodule Riemann, do:\n  def left(f, n, a, b), do:\n    Enum.sum(for i <- 0 .. n - 1, do: f.(a + (b - a) * i \/ n) * (b - a) \/ n)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76972,"user_id":53,"body":"defmodule Riemann do\n  def left(f,n,a,b), do: go(f,n,a,b,0,(b-a)\/n,0)\n  defp go(_,n,_,_,i,dx,s) when i>=n, do: s*dx\n  defp go(f,n,a,b,i,dx,s), do: go(f,n,a,b,i+1,dx,s+f.(a+i*dx))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76973,"user_id":null,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n    interval = (b - a) \/ n\n    0..n - 1\n    |> Enum.map(&(interval*f.(a + interval*&1)))\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76974,"user_id":168,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n    h = (a - b) \/ n\n    (0..n - 1) |> Enum.map(&(h * f.(a + &1 * h))) |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76975,"user_id":null,"body":"defmodule Riemann do\n\n  def left(f, n, a, b) do\n    delta = (a - b) \/ n\n    0..n - 1\n    |> Enum.map(fn k -> f.(a + k * delta) end)\n    |> Enum.sum\n    |> Kernel.*(delta)\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76976,"user_id":null,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n#   x = (b - a) \/ n\n    x = (a - b) \/ n\n    0..n - 1\n    |> Enum.map(&(x * f.(a + &1 * x)))\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76977,"user_id":null,"body":"defmodule Riemann do\n  def left(f, n, a, b) do\n    d_x = ( a - b )\/ n\n    0..n-1\n    |> Enum.reduce(0, \n                  fn(i,acc) -> \n                    acc + f.(a + i * d_x)\n                  end)\n    |> Kernel.*(d_x)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55685cd7ad70877c23000102":[{"id":76978,"user_id":null,"body":"defmodule Negator, do: def make_negative(n), do: -abs(n)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76979,"user_id":null,"body":"defmodule Negator do\n  def make_negative(num) do\n    -abs(num)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76980,"user_id":null,"body":"defmodule Negator do\n  def make_negative(num) when num > 0, do: -num\n  def make_negative(num) when num <= 0, do: num\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76981,"user_id":null,"body":"defmodule Negator do\n  def make_negative(number) when number > 0, do: -number\n  def make_negative(number), do: number\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76982,"user_id":null,"body":"defmodule Negator do\n  def make_negative(num), do: 0 - abs(num)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76983,"user_id":null,"body":"defmodule Negator do\n  def make_negative(num) when num >= 0 do -num end\n  def make_negative(num) do num end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76984,"user_id":null,"body":"defmodule Negator do\n  def make_negative(num) do\n    cond do\n      num <= 0 -> num\n      num > 0 -> num * -1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76985,"user_id":1249,"body":"defmodule Negator do\n  use Bitwise\n  def make_negative(num) do\n    num > 0 && ~~~num + 1 || num\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76986,"user_id":250,"body":"defmodule Negator do\n  def make_negative(num), do: min(num, -num)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76987,"user_id":null,"body":"defmodule Negator do\n  def make_negative(n) when n > 0 do\n    n * -1\n  end\n  def make_negative(n) do\n    n  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"556deca17c58da83c00002db":[{"id":76988,"user_id":null,"body":"defmodule tribonacciSequence do\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(signature, n) do\n    signature\n    |> Stream.unfold(fn {a, b, c} -> {a, {b, c, a+b+c}} end)\n    |> Enum.take(n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76989,"user_id":527,"body":"defmodule tribonacciSequence do\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(signature, n) do\n    Stream.unfold(signature, fn {a, b, c} ->\n      {a, {b, c, a + b + c}}\n    end) |> Enum.take(n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76990,"user_id":null,"body":"defmodule tribonacciSequence do\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci({a, b, c}, n) when n > 0 do\n    [a |tribonacci({b, c, a+b+c}, n-1)]\n  end\n  def tribonacci(_seq, n) when n == 0 do\n    []\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76991,"user_id":null,"body":"defmodule tribonacciSequence do\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(signature, n) when n <= 3, do: signature |> Tuple.to_list |> Enum.take(n)\n  def tribonacci(signature, n), do: tribonacci(n, 3, Enum.reverse(signature|> Tuple.to_list))\n  def tribonacci(n, n, acc), do: Enum.reverse(acc)\n  def tribonacci(n, cur, acc) do\n    tribonacci(n, cur+1, [(acc |> Enum.take(3) |> Enum.sum) | acc])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76992,"user_id":null,"body":"defmodule tribonacciSequence do\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(_, 0), do: []\n  def tribonacci({a, b, c}, n) when n < 3, do: Enum.take([a, b, c], n)\n  def tribonacci({a, b, c}, n), do: 1..(n-3) |> Enum.reduce([a, b, c], fn (_, acc) -> acc ++ [Enum.sum(Enum.take(acc, -3))] end)\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76993,"user_id":470,"body":"defmodule tribonacciSequence do\n\tdef tribonacci(_,0),do: []\n\tdef tribonacci({n1,n2,n3},q),do: [n1|tribonacci({n2,n3,n1+n2+n3},q-1)]\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76994,"user_id":564,"body":"defmodule tribonacciSequence do\n  import Kernel\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n\n  def tribonacci(_, n) when n <= 0 do [] end\n\n  def tribonacci({a, b, c}, n) do\n    d = a + b + c\n    [a | tribonacci({b, c, d}, n - 1)]\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76995,"user_id":null,"body":"defmodule tribonacciSequence do\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(_sequence, 0), do: []\n  def tribonacci({x, y, z}, n) do\n    [x | tribonacci({y, z, x+y+z}, n-1)]\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76996,"user_id":null,"body":"defmodule tribonacciSequence do\n\n  def tribonacci(signature, n) when n <= 3 do\n    signature \n      |> Tuple.to_list\n      |> Enum.take(n)\n  end\n  \n  def tribonacci(signature, n) do\n    prev = tribonacci(signature, n-1)\n    prev ++ [prev |> Enum.take(-3) |> Enum.sum]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76997,"user_id":null,"body":"defmodule tribonacciSequence do\n\n  @spec tribonacci({number, number, number}, non_neg_integer) :: [number]\n  def tribonacci(signature, 0), do: []\n  def tribonacci({a,b,c}, 1), do: [a]\n  def tribonacci({a,b,c}, 2), do: [a, b]\n  def tribonacci({a,b,c}, 3), do: [a, b, c]\n  def tribonacci(signature, n) do\n    {a,b,c} = signature\n    new_signature = {b,c,a+b+c}\n    [a] ++ tribonacci(new_signature, n - 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"557af9418895e44de7000053":[{"id":76998,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, n) when is_bitstring(str) do\n    String.duplicate(str, n)\n  end\n  \n  def repeat_it(_str, _n) do\n    \"Not a string\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":76999,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(val, _) when not is_binary(val), do: \"Not a string\"\n  def repeat_it(_, 0), do: \"\"\n  def repeat_it(str, n), do: str <> repeat_it(str, n - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77000,"user_id":1774,"body":"defmodule Repeater do\n  def repeat_it(str, _) when not is_bitstring(str), do: \"Not a string\"\n  def repeat_it(str, n), do: String.duplicate(str, n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77001,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, n)\n    when is_binary(str), \n    do: String.duplicate(str, n)\n    \n  def repeat_it(_, _), do: \"Not a string\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77002,"user_id":null,"body":"defmodule Repeater do\n  # Using this exercise to practice: recursion, tail recursion\n\n  def repeat_it(str, n) when is_binary(str), do: repeat_rcrsv(n, str, \"\")\n  def repeat_it(str, _n) when not is_binary(str), do: \"Not a string\"\n  \n  defp repeat_rcrsv(0, _str, acc), do: acc\n  defp repeat_rcrsv(n, str, acc), do: repeat_rcrsv(n - 1, str, acc <> str)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77003,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, n) when is_binary(str), do: str |> String.duplicate(n)\n  def repeat_it(_, _), do: \"Not a string\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77004,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, n) do\n    case is_bitstring(str) do\n      true -> String.duplicate(str, n)\n      false -> \"Not a string\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77005,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, n) when is_binary(str) do\n    String.duplicate(str, n)\n  end\n  \n  def repeat_it(_str, _n) do\n    \"Not a string\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77006,"user_id":null,"body":"defmodule Repeater do\n  def repeat_it(str, _) when not is_binary(str) do\n    \"Not a string\"\n  end\n\n  def repeat_it(str, n), do: String.duplicate(str, n)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77007,"user_id":null,"body":"defmodule Repeater do\n  @spec repeat_it(String.t, pos_integer) :: String.t\n  def repeat_it(str, n) when is_binary(str), do: String.duplicate(str, n)\n  def repeat_it(str, _n), do: \"Not a string\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"557b5e0bddf29d861400005d":[{"id":77008,"user_id":null,"body":"defmodule Converter do\n  @liters_per_gallon 4.54609188\n  @kilometers_per_mile 1.609344\n  \n  def convert(mpg) do\n    (mpg * @kilometers_per_mile \/ @liters_per_gallon)\n    |> Float.round(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77009,"user_id":null,"body":"defmodule Converter do\n  def convert(mpg), do: mpg * 0.3540060435382138 |> Float.round(2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77010,"user_id":null,"body":"defmodule Converter do\n  @kpl_per_mpg 0.3540060435382138\n\n  def convert(mpg), do: mpg * @kpl_per_mpg |> Float.round(2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77011,"user_id":1774,"body":"defmodule Converter do\n\n  @km_in_mile 1.609344\n  @l_in_g 4.54609188\n\n  def convert(mpg), do: Float.round(mpg * @km_in_mile \/ @l_in_g, 2)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77012,"user_id":null,"body":"defmodule Converter do\n  @gallons_to_liters 4.54609188\n  @miles_to_kilometers 1.609344\n\n  def convert(mpg) do\n    mpg \/ @gallons_to_liters * @miles_to_kilometers\n    |> Float.round(2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77013,"user_id":250,"body":"defmodule Converter do\n  def convert(mpg) do\n    round(mpg * 35.4006043538) \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77014,"user_id":250,"body":"defmodule Converter do\n  def convert(mpg) do\n    round(mpg * 160.9344 \/ 4.54609188) \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77015,"user_id":492,"body":"defmodule Converter do\n  def convert(mpg) do\n    (round(mpg * 1.609344 \/ 4.54609188 * 100)) \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77016,"user_id":null,"body":"defmodule Converter do\n  def convert(mpg) do\n    Float.round(mpg * 1.609344 \/ 4.54609188,2)\n  end\nend\n\n\n#test assert convert(100) == 35.4","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77017,"user_id":null,"body":"defmodule Converter do\n  @l_per_g  4.54609188\n  @km_per_m 1.609344\n  \n  def convert(mpg), do: Float.round(mpg * (@km_per_m \/ @l_per_g), 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5583090cbe83f4fd8c000051":[{"id":77018,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77019,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) when is_integer(n) do\n    n |> Integer.digits |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77020,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) do\n    Integer.digits(n) |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77021,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) when n < 10, do: [n]\n  def digitize(n), do: [rem(n, 10) | digitize(div(n, 10))]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77022,"user_id":null,"body":"import Integer, only: [digits: 1]\nimport Enum, only: [reverse: 1]\n\ndefmodule Digitizer, do: def digitize(n), do: n |> digits |> reverse","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77023,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n), do: n |> Integer.digits |> Enum.reverse\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77024,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) do\n    n \n    |> Integer.to_string \n    |> String.trim \n    |> String.split(\"\",  trim: true) \n    |> Enum.map(fn n -> String.to_integer(n) end) \n    |> Enum.reverse\n  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77025,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n), do: Integer.digits(n) |> Enum.reverse\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77026,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) do\n    Enum.reverse(Integer.digits(n))  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77027,"user_id":null,"body":"defmodule Digitizer do\n  def digitize(n) do\n    Enum.reverse(Integer.digits(n, 10))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"558fc85d8fd1938afb000014":[{"id":77028,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    numbers\n    |> Enum.sort\n    |> Enum.take(2)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77029,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    [x,y | _] = Enum.sort(numbers) \n    x + y\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77030,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    numbers\n    |> Enum.sort\n    |> Enum.take(2)\n    |> Enum.reduce(fn(n, acc) -> n + acc end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77031,"user_id":null,"body":"defmodule SmallSummer do\n  # Challenge: a single pass through numbers list, no sorting\n  \n  def sum_two_smallest_numbers(numbers) do\n    {min1, min2} =\n      Enum.reduce(numbers, {:none, :none}, fn\n        x, {:none, :none} -> {x, :none}\n        x, {min1, :none} -> {min(min1, x), max(min1, x)}\n        x, {min1, _min2} when x <= min1 -> {x, min1}\n        x, {min1, min2} when x < min2 -> {min1, x}\n        _x, acc -> acc\n      end)\n\n    min1 + min2\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77032,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    [head, second | _tail] = numbers |> Enum.sort()\n    head + second\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77033,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers([a, b]), do: a + b\n  def sum_two_smallest_numbers([a, b | t]) when b < a, do: sum_two_smallest_numbers([b, a | t])\n  def sum_two_smallest_numbers([a, b, c | t]) when c < b, do: sum_two_smallest_numbers([a, c | t])\n  def sum_two_smallest_numbers([a, b, _ | t]), do: sum_two_smallest_numbers([a, b | t])\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77034,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    [s1, s2 | _] = Enum.sort(numbers)\n    s1 + s2\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77035,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) when length(numbers) <= 2 do\n    Enum.sum(numbers)\n  end\n\n  def sum_two_smallest_numbers(numbers) do\n      max_num = Enum.max(numbers)\n      numbers = numbers -- [max_num]\n      sum_two_smallest_numbers(numbers)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77036,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n    # Your code here\n    [a, b | _rest] = Enum.sort(numbers)\n    a + b\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77037,"user_id":null,"body":"defmodule SmallSummer do\n  def sum_two_smallest_numbers(numbers) do\n  # the next \"\"\"line\"\"\" is cluttered and awful but:\n  # 1st: numbers is turned into a list of positive numbers and 0s (so negative numbers aren't added)\n  # 2nd: it is sorted so that small positive numbers come first, and 0s come last\n    add_first_two(Enum.sort(Enum.map(numbers, fn\n                                                 x when x > 0 -> x\n                                                 _ -> 0\n                                                 end),\n                             &(&1 <= &2 and &1 > 0)),\n                  1, 0)\n  end\n  \n  # If it's the second time, the first element is added to sum and returned\n  def add_first_two([h | _], 0, sum) do\n    sum + h\n  end\n  \n  # If it's the first time, the first element is added to sum, and then the function above is done.\n  def add_first_two([h | t], _, _) do\n    add_first_two(t, 0, h)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55902c5eaa8069a5b4000083":[{"id":77038,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    \"$#{Float.to_string(amount, decimals: 2)}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77039,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    \"$\" <> :erlang.float_to_binary(amount, decimals: 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77040,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    :io_lib.format(\"$~.2f\", [amount])\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77041,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    \"$\" <> Float.to_string(amount, decimals: 2) \n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77042,"user_id":53,"body":"defmodule Cashier do\n  def format_money(x) do\n    :io_lib.format(\"$~.2f\", [x]) |> IO.iodata_to_binary\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77043,"user_id":1030,"body":"defmodule Cashier do\n  def format_money(amount) do\n    [dollar, cents] = to_string(amount) |> String.split(\".\", trim: true)\n    case String.length(cents) do\n      2 -> \"$\" <> dollar <> \".\" <> cents\n      1 -> \"$\" <> dollar <> \".\" <> cents <> \"0\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77044,"user_id":17,"body":"defmodule Cashier do\n  def format_money(n) do\n    \"$\" <> Float.to_string(n, decimals: 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77045,"user_id":738,"body":"defmodule Cashier do\n  def format_money(amount) do\n    \"$#{:erlang.float_to_binary(amount, decimals: 2)}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77046,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    if is_float(amount) do\n      \"$#{Float.to_string(amount, decimals: 2)}\"\n    else\n      \"$#{amount}.00\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77047,"user_id":null,"body":"defmodule Cashier do\n  def format_money(amount) do\n    {int, rest} = Integer.parse(to_string(amount))\n    \"$#{int}#{if String.length(rest) == 2 do rest <> \"0\" else rest end}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5592e3bd57b64d00f3000047":[{"id":77048,"user_id":null,"body":"defmodule Pilecubes do\n\n  defp do_find_nb(0, n), do: n - 1\n  defp do_find_nb(nb, _) when nb < 0, do: -1\n  defp do_find_nb(nb, n), do: do_find_nb(nb - (n*n*n), n+1)\n\n  def find_nb(m) do\n    do_find_nb(m, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77049,"user_id":492,"body":"defmodule Pilecubes do\n\n  def find_nb(m) do\n    s  = :math.sqrt(m)\n    ts = trunc(s)\n    if (ts * ts != m) do\n      -1\n    else\n      delta  = 1 + 8 * s\n      sdelta = :math.sqrt(delta)\n      tsd    = trunc(sdelta)\n      if (tsd * tsd != delta) do\n        -1\n      else\n        div(tsd - 1, 2)\n      end\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77050,"user_id":null,"body":"defmodule Pilecubes do\n  def find_nb(m), do: v(m - 1, 2)\n  defp v(m, _) when m < 0, do: -1\n  defp v(0, i), do: i - 1\n  defp v(m, i), do: v(m - i * i * i, i + 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77051,"user_id":53,"body":"defmodule Pilecubes do\n  def find_nb(m), do: walk(0,0,m)\n  defp walk(s, n, m) when s < m, do: walk(s + (n+1)*(n+1)*(n+1), n+1, m)\n  defp walk(m, n, m), do: n # <- the real slim shady\n  defp walk(_,_,_), do: -1\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77052,"user_id":null,"body":"defmodule Pilecubes do\n  def find_nb(m, n \\\\ 0)\n  def find_nb(0, n), do: n\n  def find_nb(m, _n) when m < 0, do: -1\n  def find_nb(m, nx), do: with n = nx + 1, do: find_nb(m - n * n * n, n)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77053,"user_id":null,"body":"defmodule Pilecubes do\n\n  def find_nb(m) do\n  \tcase look_for_n(0, 1, m) do\n    \t{:success, n} -> n\n    \t:no_solution -> -1\n    end\n  end\n  \n  defp look_for_n(current_volume, current_n, boundary) do\n    cond do\n    \tcurrent_volume == boundary ->  {:success, current_n - 1}\n    \tcurrent_volume > boundary ->  :no_solution\n    \tcurrent_volume < boundary -> \n        look_for_n(current_volume + current_n * current_n * current_n, current_n + 1, boundary)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77054,"user_id":null,"body":"defmodule Pilecubes do\n  \n  def find_nb(m) do \n    calc_cubes(1,m)\n  end\n  defp calc_cubes(cubes, 0), do: cubes - 1\n  defp calc_cubes(_, remaining) when remaining < 0, do: -1\n  defp calc_cubes(cubes, remaining) do\n    calc_cubes(cubes+1, remaining - cubes*cubes*cubes)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77055,"user_id":null,"body":"defmodule Pilecubes do\n  def find_cubes(m, n) when m == 0 do\n    n-1\n  end\n\n   def find_cubes(m, n) when m < 0 do\n   IO.inspect(m)\n    -1\n  end\n\n  def find_cubes(m, n) do\n\n    find_cubes(m-n*n*n, n+1)\n  end\n\n  def find_nb(m) do\n    n = 1\n    find_cubes(m, n)\n  end\n \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77056,"user_id":null,"body":"\ndefmodule Pilecubes do\n\n  def find_nb(m) do\n    extract_cube(m, 1)\n  end\n  \n  defp extract_cube(volume, cube_size) do\n    remain = volume - cube_size *cube_size *cube_size\n    cond do\n      remain > 0 -> extract_cube(remain, cube_size + 1 )\n      remain == 0 -> cube_size\n      remain < 0 -> -1\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77057,"user_id":null,"body":"defmodule Pilecubes do\n  def find_nb(m) do\n    x = round((:math.sqrt(1 + 8 * :math.sqrt(m)) - 1) \/ 2)\n    if div(x * x * (x + 1) * (x + 1), 4) == m, do: x, else: -1\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559a28007caad2ac4e000083":[{"id":77058,"user_id":null,"body":"defmodule Perim do\n\n    def perimeter(n) do\n      {1,1}\n      |> Stream.unfold(fn {a,b} -> { a, {b, a + b}} end)\n      |> Enum.take(n + 1)\n      |> Enum.sum\n      |> Kernel.*(4)\n    end\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77059,"user_id":null,"body":"defmodule Perim do\n  def perimeter(n), do: perimeter(n, 0, 1, [0,1])\n  def perimeter(0, _, _, l), do: Enum.sum(l) * 4\n  def perimeter(n, p1, p2, l), do: perimeter(n-1, p2, p1+p2, l ++ [p1+p2])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77060,"user_id":null,"body":"defmodule Perim do\n    def perimeter(n), do: loop({1, 1}, 8, n)\n    \n    defp loop(_, sum, 1), do: sum\n    defp loop({a, b}, sum, n), do: loop({b, a+b}, sum + 4*(a+b), n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77061,"user_id":53,"body":"defmodule Perim do\n    def perimeter(n), do: aux(n, 1, 1, 0)\n    defp aux(n, _, _, sum) when n < 0, do: sum\n    defp aux(n, a, b, sum), do: aux(n - 1, b , a + b, sum + a * 4)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77062,"user_id":492,"body":"defmodule Perim do\n\n    defp loop(n, acc1, _) when n == 0, do: acc1\n    defp loop(n, acc1, acc2) do\n        loop(n - 1, acc2, acc1 + acc2)\n    end\n    def perimeter(n) do\n        4 * loop(n + 2, 1, 1) - 4\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77063,"user_id":null,"body":"defmodule Perim do\n\n    def perimeter(n) do\n        {1,1} |> Stream.unfold(fn {a, b} -> {a, {b, a+b}} end) |> Enum.take(n+1) |> Enum.map(fn x -> x*4 end) |> Enum.sum() \n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77064,"user_id":null,"body":"defmodule Perim do\n  @moduledoc false\n\n  def perimeter(n) do\n    fib_seq(n + 1)\n    |> Enum.sum()\n    |> Kernel.*(4)\n  end\n\n\n  def fib_seq(1), do: [1]\n  def fib_seq(2), do: [1 | fib_seq(1)]\n  def fib_seq(seq_len) when seq_len > 2 do \n    [x, y | _] = all = fib_seq(seq_len - 1)\n\n    [x + y | all]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77065,"user_id":null,"body":"defmodule Perim do\n\n    def perimeter(n) do\n      fib(n)\n      |> Enum.reduce(0, fn(x,acc) -> acc + 4*x end)\n    end\n    \n    def fib(0, seq\\\\[1]), do: seq\n    def fib(n, [e]), do: fib(n-1, [e, e])\n    def fib(n, [e2, e1 | l]) do\n      fib(n - 1, [e2 + e1, e2, e1 | l])\n    end\n      \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77066,"user_id":null,"body":"defmodule Perim do\n  def perimeter(n) do\n    fib([1, 1], n, 2)\n    |> Enum.sum()\n    |> (fn (x) -> 4 * x end).()\n  end\n\n  def fib(_, 0, _) do\n    [1]\n  end\n\n  def fib(_, 1, _) do\n    [1, 1]\n  end\n\n  def fib(arr, n, len) do\n    if n + 1 == len do\n      arr\n    else\n      [a, b | _] = arr\n      fib([a + b | arr], n, len + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77067,"user_id":null,"body":"defmodule Perim do\n  def perimeter(n) do\n    {_, b} = Enum.reduce(1..(n + 2), {0, 1}, fn _, {a, b} -> {b, a + b} end)\n    (b - 1) * 4\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559ac78160f0be07c200005a":[{"id":77068,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    str\n    |> String.split\n    |> Enum.reverse\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77069,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    [head, tail] = String.split(str)\n    \"#{tail} #{head}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77070,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(string) do\n    string\n    |> String.split\n    |> Enum.reverse\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77071,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    [first, last] = String.split(str)\n    \"#{last} #{first}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77072,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    arr = String.split(str)\n    [first_name, last_name] = arr\n    \"#{last_name} #{first_name}\"\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77073,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    str\n    |> String.split(\" \")\n    |> reverse_name\n  end\n  \n  def reverse_name([a, b]) do\n    [b, a]\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77074,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    [f,l] = String.split(str)\n    l <> \" \" <> f\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77075,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(name) do\n    [first, last] =\n      name |> String.split(\" \")\n      \n    \"#{last} #{first}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77076,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    list = String.split(str, \" \")\n    List.last(list) <> \" \" <> List.first(list)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77077,"user_id":null,"body":"defmodule Messy do\n  def name_shuffler(str) do\n    \n    [first | last ] = String.split(str)\n    Enum.join([last, \" \", first])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559b8e46fa060b2c6a0000bf":[{"id":77078,"user_id":null,"body":"defmodule Easydiagonal do\n\n  def diagonal(n, p) do\n    # your code\n    binomial(n + 1, p + 1)\n  end\n\n  @spec binomial(integer(), integer()) :: integer()\n  def binomial(_n, 0) do\n    1\n  end\n\n  def binomial(n, x) when (n - x) >= x and x <= n do\n    div(Enum.reduce((n - x + 1)..n, 1, fn x, acc -> x * acc end), Enum.reduce(1..x, 1, fn x, acc -> x * acc end))\n    #Enum.product is a simpler way to do this than Enum.reduce but CW only supports Elixir 1.11 and Enum.product is available 1.12 onwards\n  end\n\n  def binomial(n, x) when x<=n do\n    div(Enum.reduce((x + 1)..n, 1, fn x, acc -> x * acc end), Enum.reduce(1..(n - x), 1, fn x, acc -> x * acc end))\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77079,"user_id":53,"body":"defmodule Easydiagonal do\n  \n  def aux(n, k, i, r) do\n    cond do\n      i == k + 1  -> r\n      true        -> r = div(r * (n - i + 1), i)\n                     i = i + 1\n                     aux(n, k, i, r)\n    end\n  end\n\n  def diagonal(n, p) do\n    aux(n + 1, p + 1, 1, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77080,"user_id":null,"body":"defmodule Easydiagonal do\n  def diagonal(n, 0), do: n + 1\n\n  def diagonal(n, p) do\n    dlen = n + 1 - p\n\n    Enum.reduce(1..p, List.duplicate(1, dlen), fn _, arr ->\n      Enum.reduce(arr, [], fn\n        x, [] -> [x]\n        x, [a | arr] -> [x + a, a | arr]\n      end)\n      |> Enum.reverse()\n    end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77081,"user_id":null,"body":"defmodule Easydiagonal do\n\n  def diagonal(n, p), do: get_diagonal(n, p)\n\n  defp get_diagonal(n, 0), do: n + 1\n  defp get_diagonal(n, p), do: get_diagonal(n, p, 0)\n  defp get_diagonal(0, _, acc), do: acc\n  defp get_diagonal(n, p, acc), do: get_diagonal(n - 1, p, acc + choose(n, p))\n\n  defp choose(n, k), do: div(mul(n - k + 1, n), mul(1, k))\n\n  defp mul(a, b), do: Enum.reduce(a..b, 1, & &1 * &2)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77082,"user_id":null,"body":"defmodule Easydiagonal do\n    defp choose(n,k) when n < k, do: 0\n    defp choose(n,k) when k > n-k, do: choose(n,n-k)\n    defp choose(_n,0), do: 1\n    defp choose(n,k), do: Enum.reduce(0..k-1, 1, & div((n-&1) * &2, &1+1))\n    \n    def diagonal(n,k), do: choose(n,k) + choose(n,k+1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77083,"user_id":null,"body":"defmodule Easydiagonal do\n  def diagonal(n, p) do\n    case x=find_d(p,n) |> Enum.sum do\n      100-> 101 #either bug in test or me not knowing what's going on\n      _ -> x\n    end\n  end\n\n  def find_d(n,p) do\n    for x <- 0..p-1, do: binom(x+1,n) \n  end\n  \n  def binom(n,k) when n>=0 and k>=0 do\n    if k==0, do: 1, else: binom(n,k,1,1)\n  end\n  def binom(n,k,k,acc), do: div(acc * (n-k+1), k)\n  def binom(n,k,i,acc), do: binom(n, k, i+1, div(acc * (n-i+1), i))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77084,"user_id":null,"body":"defmodule Easydiagonal do\n  def diagonal(n, p), do: element(n + 1, p + 1)\n\n  def element(_n, 0, num, denom), do: div(num, denom)\n  def element(n, p, num \\\\ 1, denom \\\\ 1), do: element(n, p - 1, num * (n - p + 1), denom * p)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77085,"user_id":null,"body":"defmodule Easydiagonal do\n\n  def diagonal(n, p) do\n    for m <- p..n do\n      ncr(m, p)\n    end\n    |> Enum.sum\n  end\n\n  defp ncr(n, k) when n == k, do: 1\n  defp ncr(_, 0), do: 1\n  defp ncr(n, k), do: ncr(n, k, 1, 1)\n  defp ncr(n, k, k, acc), do: div(acc * (n-k+1), k)\n  defp ncr(n, k, i, acc), do: ncr(n, k, i+1, div(acc * (n-i+1), i))\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77086,"user_id":492,"body":"defmodule Easydiagonal do\n  \n  defp choose(n, p) when (p == 0 or p == n) do 1 end\n  defp choose(n, p) do\n    p = if (p > n - p) do n - p else p end\n    nu = Enum.reduce(n-p+1..n, 1, &(&1 * &2))\n    de = Enum.reduce(1..p, 1, &(&1 * &2))\n    div(nu, de)\n  end\n  \n  def diagonal(n, p) do\n    choose(n + 1, p + 1)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77087,"user_id":676,"body":"defmodule Easydiagonal do\n  def diagonal(n, p), do: binomial(n + 1, p + 1)\n  \n  defp binomial(_, 0), do: 1 \n  defp binomial(n, k) when k > div(n, 2), do: binomial(n, n - k)\n  defp binomial(n, k), do: div(n*binomial(n - 1, k - 1), k)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559ce00b70041bc7b600013d":[{"id":77088,"user_id":492,"body":"defmodule Finance do\n\n  def finance(n) do\n    n * (n * n + 3 * n + 2) \/ 2\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77089,"user_id":null,"body":"defmodule Finance do\n\n  def finance(n) do\n  \t(n+1)*(n+2)*(n\/2)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77090,"user_id":null,"body":"defmodule Finance do\n  def finance(n) do\n    (0.5 * :math.pow(n, 3)) + (1.5 * :math.pow(n, 2)) + n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77091,"user_id":null,"body":"defmodule Finance do\n  def finance(n),\n    do: Enum.map(0..n, fn i -> 2 * i * (n + 1 - i) + i * (i + 1) \/ 2 end) |> Enum.sum()\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77092,"user_id":null,"body":"defmodule Finance do\n\n  def finance(n) do\n    x = for i <- 0..n, into: [], do: trunc((n+1-i) * (2 * (i*2) + (n-i)) \/ 2)\n    Enum.sum(x)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77093,"user_id":null,"body":"defmodule Finance do\n\n  def finance(n) do\n    Enum.sum(1..n) * (n + 2)\n  end\n\nend\n\n# (6 + 5 + 4 + 3 + 2 + 1) * (n + 2) = 168","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77094,"user_id":null,"body":"defmodule Finance do\n\n  def finance(n) do\n    Enum.reduce(n..1, 0,\n      fn elt, acc ->\n        acc + Enum.sum(elt..2*elt)\n      end\n    )\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77095,"user_id":null,"body":"defmodule Finance do\n\n  def finance(n), do: div(n * (n + 1) * (n + 2 ), 2)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77096,"user_id":null,"body":"defmodule Finance do\n  def finance(n) do\n    0..n |> Enum.map(&(div(3*&1*(&1+1), 2))) |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77097,"user_id":null,"body":"defmodule Finance, do: def finance(n), do: div(n*(n+1)*(n+2), 2)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559d2284b5bb6799e9000047":[{"id":77098,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n    String.split(str, \" \")\n    |> Enum.map(&(\"#{&1} #{String.length(&1)}\"))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77099,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n    str\n    |> String.split(\" \")\n    |> Enum.map(&(\"#{&1} #{String.length(&1)}\"))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77100,"user_id":null,"body":"defmodule Marker do\n  def add_length(str), do: str |> String.split |> Enum.map(fn(x) -> \"#{x} #{String.length(x)}\" end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77101,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n  \tEnum.map(String.split(str), &(\"#{&1} #{String.length(&1)}\"))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77102,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n    String.split(str, \" \", trim: true) |> Enum.map(fn (x) -> \"#{x} #{String.length x}\" end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77103,"user_id":53,"body":"defmodule Marker do\n  def add_length(str), do: Enum.map(String.split(str, \" \"), fn s -> \"#{s} #{String.length(s)}\" end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77104,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n  \tstr\n    \t|> String.split(\" \", trim: true)\n      |> Enum.map(&(\"#{&1} #{String.length &1}\"))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77105,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n    #TODO ...\n    list =  String.split(str)\n    for element <- list do\n      \"#{element} #{String.length(element)}\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77106,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) when is_binary(str) do\n    str |> String.split() |> Enum.map(&\"#{&1} #{String.length(&1)}\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77107,"user_id":null,"body":"defmodule Marker do\n  def add_length(str) do\n    str_list = String.split(str, \" \")\n    count = Enum.map(str_list, fn x -> String.length(x)\n    |> Integer.to_string\n      end)\n    range = 0..Enum.count(str_list) - 1\n    |> Enum.reverse\n    Enum.reduce(range, [], fn a, b -> [Enum.at(str_list, a) <> \" \" <> Enum.at(count, a) | b] end) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559e3224324a2b6e66000046":[{"id":77108,"user_id":492,"body":"defmodule Funcij do\n\n  def sumin(n) do\n    n * (n + 1) * (2 * n + 1) \/ 6\n  end\n  \n  def sumax(n) do\n    n * (n + 1) * (4 * n - 1) \/ 6\n  end\n\n  def sumsum(n) do\n    n * n * (n + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77109,"user_id":null,"body":"defmodule Funcij do\n\n  def sumin(n) do\n    1..n |> Enum.map(&(&1 * (n * 2 - (&1 * 2 - 1)))) |> Enum.sum\n  end\n  \n  def sumax(n) do\n    1..n |> Enum.map(&(&1 * (&1 * 2 - 1))) |> Enum.sum\n  end\n\n  def sumsum(n) do\n    sumin(n) + sumax(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77110,"user_id":53,"body":"defmodule Funcij do\n\n  def sumin(n), do: div(n * (n+1) * (2 * n + 1), 6)\n  def sumax(n), do: div(n * (n+1) * (4 * n - 1), 6)\n  def sumsum(n), do: (n+1) * n * n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77111,"user_id":2098,"body":"defmodule Funcij do\n\n  def sumin(n) do\n    n * (2 * :math.pow(n, 2) + 3 * n + 1) \/ 6\n  end\n  \n  def sumax(n) do\n    n * (4 * :math.pow(n, 2) + 3 * n - 1) \/ 6\n  end\n\n  def sumsum(n) do\n    :math.pow(n, 3) + :math.pow(n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77112,"user_id":null,"body":"defmodule Funcij do\n\n  def sum_base(n), do: n * sum(n)\n \n  def sum_delta(n) do\n    for q <- 0..(n-1) do\n      sum(q)\n    end |> Enum.sum()\n  end\n  \n  def sumin(n), do: sum_base(n) - sum_delta(n)\n  \n  def sumax(n), do: sum_base(n) + sum_delta(n)\n  \n  def sumsum(n), do: sumax(n) + sumin(n)\n  \n  def sum(n) do\n   Kernel.div(n * (n + 1), 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77113,"user_id":492,"body":"defmodule Funcij do\n\n  def sumin(n) do\n    n * (n + 1) * (2 * n + 1) \/ 6\n  end\n  \n  def sumax(n) do\n    n * (n + 1) * (4 * n - 1) \/ 6\n  end\n\n  def sumsum(n) do\n    n * n * (n + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77114,"user_id":null,"body":"defmodule Funcij do\n    def sumin(n) do \n      div(n*(n+1)*(2*n+1),6)\n      end\n    def sumax(n) do \n      div(n*(n+1)*(4*n-1),6)\n      end\n    def sumsum(n) do \n      sumin(n) + sumax(n)\n      end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77115,"user_id":null,"body":"defmodule Funcij do\n  def sumin(n, counter, answer) when counter == n+1, do: answer\n  def sumin(n, counter, answer) do\n    sumin(n, counter+1, answer +\n      div(2*counter*n - counter*counter + counter, 2))\n  end\n  \n  def sumin(n), do: sumin(n, 1, 0)\n  \n  def sumax(n, counter, answer) when counter == n+1, do: answer\n  def sumax(n, counter, answer) do\n    sumax(n, counter+1, answer + \n      div(counter*counter + n*n + n - counter, 2))\n  end\n  \n  def sumax(n), do: sumax(n, 1, 0)\n\n  def sumsum(n), do: sumin(n) + sumax(n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77116,"user_id":null,"body":"defmodule Funcij do\n  def sumin(n) do\n    div(n * (n + 1) * (2 * n + 1), 6)\n  end\n\n  def sumax(n) do\n    n * n * n - sumin(n - 1)\n  end\n\n  def sumsum(n) do\n    sumax(n) + sumin(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77117,"user_id":null,"body":"defmodule Funcij do\n  def sumin(n) do\n    n * (n + 1) * (2 * n + 1) \/ 6\n  end\n  \n  def sumax(n) do\n    n * (n + 1) * (4 * n - 1) \/ 6\n  end\n\n  def sumsum(n) do\n    sumin(n) + sumax(n)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559f80b87fa8512e3e0000f5":[{"id":77118,"user_id":null,"body":"defmodule OnlyOdd do\n  require Integer\n  def odds(nums), do: Enum.filter(nums, &Integer.is_odd\/1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77119,"user_id":null,"body":"defmodule OnlyOdd do\n  import Integer, only: [is_odd: 1]\n\n  @spec odds(nums :: [integer]) :: [integer]\n  def odds(nums) do\n    nums |> Enum.filter(&is_odd\/1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77120,"user_id":null,"body":"defmodule OnlyOdd do\n  def odds(nums) do\n    Enum.filter(nums, fn(x) -> rem(x, 2) != 0 end)\n  end\nend\n\nOnlyOdd.odds([1,3,4,5,6,7,8,9])","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77121,"user_id":null,"body":"defmodule OnlyOdd do\n  import Integer, only: [is_odd: 1]\n  def odds(nums) do\n    Enum.filter(nums, &is_odd\/1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77122,"user_id":null,"body":"defmodule OnlyOdd do\n  def odds(nums) do\n    nums |> Enum.filter(fn (x) -> rem(x,2) != 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77123,"user_id":null,"body":"defmodule OnlyOdd do\n  import Integer\n\n  def odds([]), do: []\n  def odds(nums), do: Enum.filter(nums, &(is_odd(&1)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77124,"user_id":null,"body":"defmodule OnlyOdd do\n  def odds(nums) do\n    Enum.filter nums, &(rem(&1, 2) != 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77125,"user_id":null,"body":"defmodule OnlyOdd do\n  require Integer\n  \n  def odds(nums) do\n    nums\n    |> Enum.filter(fn(x) -> Integer.is_odd(x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77126,"user_id":null,"body":"require Integer\n\ndefmodule OnlyOdd do\n  def odds(nums), do: nums |> Enum.filter(&Integer.is_odd\/1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77127,"user_id":null,"body":"defmodule OnlyOdd do\n  def odds(nums), do: for x <- nums, rem(x, 2) == 1, do: x \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"559f860f8c0d6c7784000119":[{"id":77128,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?([]), do: false\n  \n  def any_arrows?([%{\"damaged\" => true} | rest]), do: any_arrows?(rest)\n  \n  def any_arrows?(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77129,"user_id":null,"body":"defmodule Quiver do\n\n  @typep arrow :: [map]\n\n  @spec any_arrows?([arrow]) :: [arrow]\n  def any_arrows?(arrows) do\n    Enum.any?(arrows, &(!&1[\"damaged\"]))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77130,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?(arrows) do\n    Enum.any?(arrows, &good?(&1))\n  end\n  \n  defp good?(arrow), do: !arrow[\"damaged\"]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77131,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?(arrows)\n  def any_arrows?([]), do: false\n  def any_arrows?([%{\"damaged\" => true} | rest]), do: any_arrows?(rest)\n  def any_arrows?(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77132,"user_id":738,"body":"defmodule Quiver do\n  def any_arrows?(arrows) do\n    Enum.any? arrows, &good_arrow?\/1\n  end\n  \n  defp good_arrow?(%{\"damaged\" => true}), do: false\n  defp good_arrow?(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77133,"user_id":2697,"body":"defmodule Quiver do\n  def any_arrows?(arrows) do\n    Enum.any?(arrows, &(not Map.get(&1, \"damaged\", false)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77134,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?([]), do: false\n  def any_arrows?([%{\"damaged\" => true} | tail]), do: any_arrows?(tail)\n  def any_arrows?(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77135,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?([]), do: false\n\tdef any_arrows?([head | tail]) do\n  \t!head[\"damaged\"] || any_arrows?(tail)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77136,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?(arrows) do\n    arrows\n    |> Enum.any?(&(!&1[\"damaged\"]))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77137,"user_id":null,"body":"defmodule Quiver do\n  def any_arrows?(arrows) do\n    Enum.any?(arrows, fn(arrow) -> !arrow[\"damaged\"] end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55a14f75ceda999ced000048":[{"id":77138,"user_id":277,"body":"defmodule Templates do\n  def temple_strings(obj, feature) do\n    \"#{obj} are #{feature}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77139,"user_id":null,"body":"defmodule Templates, do: def temple_strings(obj, feature), do: \"#{obj} are #{feature}\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77140,"user_id":1724,"body":"defmodule Templates do\n  def temple_strings(obj, feature) do\n    [obj, feature] |> Enum.join(\" are \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77141,"user_id":null,"body":"defmodule Templates do\n  def temple_strings(obj, feature) do\n   \"#{obj} are #{feature}\"\n  end\nend\n\n\n#   test  assert temple_strings(\"Doggos\",\"frens\") == \"Doggos are frens\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77142,"user_id":null,"body":"defmodule Templates do\n  def temple_strings(obj, feature) do\n    b = &(is_binary(&1) && &1 || Enum.join(&1))\n    b.(obj) <> \" are \" <> b.(feature)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77143,"user_id":null,"body":"defmodule Templates do\n  def temple_strings(obj, feature), do: Enum.join([obj, feature], \" are \")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77144,"user_id":null,"body":"defmodule Templates, do: def temple_strings(a,b), do: \"#{a} are #{b}\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77145,"user_id":null,"body":"defmodule Templates do\n  def temple_strings(o, f), do: [o, f] |> Enum.join(\" are \")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77146,"user_id":null,"body":"defmodule Templates do\n  def temple_strings([obj], [feature]), do: temple_strings(obj, feature)\n  def temple_strings(obj, feature) do\n    (to_string obj) <> \" are \" <> (to_string feature)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77147,"user_id":null,"body":"defmodule Templates do\n  def temple_strings(obj, feature), do: [obj, \" are \", feature] |> Enum.join\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55a29405bc7d2efaff00007c":[{"id":77148,"user_id":null,"body":"defmodule Going do\n  def going(1), do: 1\n  def going(n), do: going(n-1) \/ n + 1    \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77149,"user_id":null,"body":"defmodule Going do\n  def going(1), do: 1\n  \n  def going(n) do\n    going(n-1) \/ n + 1    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77150,"user_id":null,"body":"defmodule Going do\n  @doc \"\"\"\n  Calculate (1 \/ n!) * (1! + 2! + 3! + ... + n!) for a given n,\n  where n is an integer greater or equal to 1.\n\n  ## Examples\n\n  iex> Going.going(5)\n  1.275\n\n  iex> Going.going(6)\n  1.2125\n  \"\"\"\n  @spec going(integer()) :: float()\n  def going(n) when is_integer(n) and n >= 1 do\n    do_task(n, 1.0, 1)\n  end\n\n  @doc \"\"\"\n  A typical recursive way of calculating would result to a big number which may cause\n  ArithmeticError. To calculate (1 \/ n!) * (1! + 2! + 3! + ... + n!) when n = 5\n  div = 1\n  acc = 1             # Initial value of 1 is equal to 5!\/5!\n  div = div \/ 5       # The same as 4!\/5!\n  acc = acc + div\n  div = div \/ 4       # The same as 3!\/5!\n  acc = acc + div\n  div = div \/ 3       # The same as 2!\/5!\n  acc = acc + div\n  \"\"\"\n  @spec do_task(integer(), float(), float()) :: float()\n  def do_task(1, acc, _) do\n    Float.floor(acc, 6)\n  end\n\n  def do_task(n, acc, div) do\n    do_task(n - 1, acc + (div \/ n), div \/ n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77151,"user_id":null,"body":"defmodule Going do\n  def going(n) do\n    going(n, 1, 1) |> Float.floor(6)\n  end\n\n  def going(1, _, sum) do\n    sum\n  end\n\n  def going(n, k, sum) do\n    k = k\/n\n    going(n - 1, k, sum + k)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77152,"user_id":492,"body":"defmodule Going do\n    defp trunc6_dble(d) do\n        trunc(d * 1.0e6) \/ 1.0e6\n    end\n    \n    defp aux(i, _, res) when i == 1, do: res |> trunc6_dble\n    defp aux(i, iter, res) do\n        it = iter \/ i\n        aux(i - 1, it, res + it)\n    end\n\n    def going(n) do\n        aux(n, 1.0, 1.0)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77153,"user_id":492,"body":"defmodule Going do\n    defp trunc6_dble(d) do\n        trunc(d * 1.0e6) \/ 1.0e6\n    end\n    \n    defp aux(i, _, res) when i == 1, do: res |> trunc6_dble\n    defp aux(i, iter, res) do\n        it = iter \/ i\n        aux(i - 1, it, res + it)\n    end\n\n    def going(n) do\n        aux(n, 1.0, 1.0)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77154,"user_id":null,"body":"defmodule Going do\n  def going(n) do\n    Enum.reduce(n..2, {1.0, 1.0}, fn i, {sum, term} -> {sum + term \/ i, term \/ i} end)\n    |> elem(0)\n    |> Float.floor(6)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77155,"user_id":53,"body":"defmodule Going do\n  def going(n), do: (if n <= 0 do 0 else 1 + going(n-1) \/ n end)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77156,"user_id":null,"body":"defmodule Going do\n\n  def going(n) do\n    n\n    |> get_factors([1])\n    |> Enum.filter(&(&1 < :math.pow(10, 200)))\n    |> Enum.map(&(1 \/ &1))\n    |> Enum.sum\n    |> Float.floor(6)\n  end\n\n  defp get_factors(1, acc), do: acc\n  defp get_factors(current, acc), do: get_factors(current - 1, [hd(acc) * current | acc])\n\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77157,"user_id":null,"body":"defmodule Going do\n  def going(1), do: 1\n  \n  def going(n), do: 1 + (going(n - 1) \/ n)\n    \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55a70521798b14d4750000a4":[{"id":77158,"user_id":null,"body":"defmodule Kata do\n    def greet(name), do: \"Hello, #{name} how are you doing today?\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77159,"user_id":null,"body":"defmodule Kata do\n    def greet(name) do\n            # TODO: working solution\n        list = [\" how\", \" are\", \" you\", \" doing\", \" today?\"]\n        name_list = [name | list]\n        final = [\"Hello, \" | name_list] |> List.to_string\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77160,"user_id":null,"body":"defmodule Kata do\n    def greet(name) do\n        :erlang.iolist_to_binary([\"Hello, \", name,\" how are you doing today?\"])\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77161,"user_id":null,"body":"defmodule Kata, do: def greet(name), do: \"Hello, #{name} how are you doing today?\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77162,"user_id":null,"body":"defmodule Kata do\n    def greet(name), do: \"Hello, \" <> name <> \" how are you doing today?\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77163,"user_id":527,"body":"defmodule Kata do\n  def greet(name) do\n    \"Hello, \" <> name <> \" how are you doing today?\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77164,"user_id":53,"body":"defmodule Kata do\n    def greet(name) do\n        \"Hello, #{name} how are you doing today?\"\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55a75e2d0803fea18f00009d":[{"id":77165,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([x1, _, x2, _]) when x2 == x1, do: \"undefined\"\n\tdef slope([x1, y1, x2, y2]), do: to_string(div(y2 - y1, x2 - x1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77166,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([x, _, x, _]), do: \"undefined\"\n  def slope([_, y, _, y]), do: \"0\"\n  def slope([a, b, c, d]) do \n    Integer.to_string(div((b - d), (a - c)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77167,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([a, b, c, d]) do\n    cond do\n      c - a == 0 ->\n        \"undefined\"\n      true ->\n        \"#{div(d - b, c - a)}\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77168,"user_id":53,"body":"defmodule SloppyMath do\n  def slope([x0, _, x0, _]), do: \"undefined\"\n  def slope([x0, y0, x1, y1]), do: to_string(div(y1 - y0, x1 - x0))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77169,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([same_x, _y1, same_x, _y2]), do: \"undefined\"\n  def slope([x1, y1, x2, y2]), do: div((y2 - y1), (x2 - x1)) |> to_string()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77170,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([a,_,c,_]) when a === c, do: \"undefined\"\n  def slope([a,b,c,d]), do: div((d-b),(c-a)) |> Integer.to_string  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77171,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([x1, _, x2, _]) when x2 - x1 == 0, do: \"undefined\"\n  def slope([x1, y1, x2, y2]), do: (y2 - y1) \/ (x2 - x1) |> trunc |> Integer.to_string\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77172,"user_id":1249,"body":"defmodule SloppyMath do\n  def slope([x, _, x, _]), do: \"undefined\"\n  def slope([x1, y1, x2, y2]), do: \"#{div(y2-y1, x2-x1)}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77173,"user_id":null,"body":"defmodule SloppyMath do\n  def slope([a, _, c, _]) when c - a == 0, do: \"undefined\"\n  def slope([a, b, c, d]), do: \"#{div(d - b, c - a)}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77174,"user_id":null,"body":"defmodule SloppyMath do\n  @spec slope([integer]) :: String.t\n  def slope([x1, y1, x2, y2] = points) when x2 - x1 != 0 do\n    \"#{trunc((y2 - y1) \/ (x2 - x1))}\"\n  end\n  def slope([x1, y1, x2, y2] = points), do: \"undefined\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55aa075506463dac6600010d":[{"id":77175,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n    |> Enum.map(&({&1, getSumOfSquaresOfFactors(&1)}))\n    |> Enum.filter(fn {_, sos} -> \n        r = :math.sqrt(sos)\n        r - trunc(r) == 0\n      end)\n  end\n\n  def getSumOfSquaresOfFactors(num) do\n    1..(:math.sqrt(num) |> trunc)\n    |> Enum.filter(&(rem(num, &1) == 0))\n    |> Enum.reduce(0, fn x, acc -> \n        r = div(num, x)\n        if x == r, do: acc + x*x, else: acc + x*x + r*r\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77176,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n\t\tm..n\n\t\t|> Enum.map(&process_factors\/1)\n        |> Enum.filter(fn {_,v} -> :math.sqrt(v) |> trunc == :math.sqrt(v) end)\n  end\n\n  def process_factors(int) do\n   r=  1..floor(:math.sqrt(int))\n    |> Enum.reduce([], fn x, acc -> logic(x, int) ++ acc end)\n    |> Enum.dedup\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum\n   {int, r}\n  end\n\n  def logic(factor, int) when rem(int, factor) == 0, do: [factor, div(int, factor)]\n  def logic(_, _), do: []\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77177,"user_id":null,"body":"defmodule RecreationOne do\n\n  def list_squared(m, n) do\n    factors = m..n |> Enum.map(&process_factors\/1)\n\n    m..n\n    |> Enum.zip(factors)\n    |> Enum.filter(fn {_, r} -> square?(r) end)\n  end\n\n  defp process_factors(int) do\n    1..floor(:math.sqrt(int))\n    |> Enum.reduce([], fn x, acc -> logic(x, int) ++ acc end)\n    |> Enum.dedup\n    |> Enum.sort\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum\n  end\n  \n  defp logic(factor, int) when rem(int, factor) == 0, do: [factor, div(int, factor)]\n  defp logic(_, _), do: []\n  \n  defp square?(int), do: :math.sqrt(int) == round(:math.sqrt(int))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77178,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n      |> Enum.map( fn(x) -> {x, div_sum(x)} end)\n      |> Enum.filter( fn(x) -> x |> elem(1) |> squared end)\n  end\n  \n  defp div_sum(num) do\n    num\n      |> :math.sqrt\n      |> round\n      |> linspace\n      |> Enum.filter(fn(x) -> rem(num, x) === 0 end)\n      |> Enum.map(fn(x) -> [x, div(num, x)] end)\n      |> List.flatten\n      |> Enum.uniq\n      |> Enum.reduce(0, fn(num, acc) -> acc + num * num end)\n  end\n  \n  defp linspace(num), do: 1..num\n  \n  defp squared(num) do\n    sqrt = :math.sqrt(num)\n    sqrt_i = Float.floor(sqrt)\n    \n    sqrt == sqrt_i\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77179,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    Enum.map(\n      m..n,\n      fn p ->\n        sqsum =\n          Enum.map(\n            1..floor(:math.sqrt(p)),\n            fn i ->\n              cond do\n                p == i * i ->\n                  p\n\n                rem(p, i) == 0 ->\n                  d = div(p, i)\n                  i * i + d * d\n\n                true ->\n                  0\n              end\n            end\n          )\n          |> Enum.sum()\n\n        sqrt = :math.sqrt(sqsum)\n        if round(sqrt) == sqrt, do: {p, sqsum}\n      end\n    )\n    |> Enum.reject(&is_nil\/1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77180,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n    |> Enum.map(&({&1, sum_of_squared(&1)}))\n    |> Enum.filter(\n      fn {_num, sum_of_squared} ->\n        sqrt = :math.sqrt(sum_of_squared)\n        sqrt == trunc(sqrt)\n      end)\n  end\n  \n  defp sum_of_squared(num) do\n    1..(:math.sqrt(num) |> trunc)\n    |> Enum.filter(&(rem(num, &1) === 0))\n    |> Enum.reduce(0, \n      fn x, acc ->\n        r = div(num, x)\n        if x === r, do: acc + x * x, else: acc + x * x + r * r\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77181,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n    |> Enum.map(fn x -> x\n      |> get_divisors\n      |> Enum.uniq\n      |> Enum.map(& &1 * &1)\n      |> Enum.sum\n      |> check_square\n    end)\n    |> Enum.zip(m..n)\n    |> Enum.filter(fn {{_sq, test}, _num} -> test end)\n    |> Enum.map(fn {{sq, _test}, num} -> {num, sq} end)\n  end\n\n  def get_divisors(n) do\n    Enum.reduce(ceil(n\/2)..1, [n], fn x, acc -> \n      if rem(n, x) == 0, do: [x | acc], else: acc\n    end)\n  end\n\n  def check_square(num), do: num |> :math.sqrt |> (& {num, &1 == Float.round(&1)}).()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77182,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n    |> Enum.to_list()\n    |> Enum.map(fn x -> {x, divisors(x)} end)\n    |> Enum.map(fn {x, ds} -> {x, Enum.map(ds, fn d -> d*d end)} end)\n    |> Enum.map(fn {x, ds} -> {x, Enum.sum(ds)} end)\n    |> Enum.filter(fn {_, s} -> trunc(:math.sqrt(s)) == :math.sqrt(s) end)\n  end\n  \n  def divisors(0), do: []\n  def divisors(1), do: [1]\n  def divisors(n) do\n    1..trunc(:math.sqrt(n))\n    |> Enum.to_list()\n    |> Enum.filter(fn x -> Integer.mod(n, x) == 0 end)\n    |> Enum.flat_map(fn x -> [x, trunc(n\/x)] end)\n    |> Enum.dedup()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77183,"user_id":null,"body":"defmodule RecreationOne do\n  def list_squared(m, n) do\n    m..n\n    |> Enum.to_list()    \n    |> Enum.map(fn x -> {x, find_divisors(x)} end)\n    |> Enum.map(fn {x, divisors} -> {x, sum_squares(divisors)} end)\n    |> Enum.filter(fn {_x, sum_of_squares} -> perfect_square?(sum_of_squares) end)\n  end\n  \n  defp find_divisors(n) do\n     1..trunc(:math.sqrt(n))\n    |> Enum.to_list()\n    |> Enum.reduce([], fn x, acc -> \n      case rem(n, x) do\n        0 -> append_divisors(acc, x, div(n, x))\n        _ -> acc\n      end\n    end)\n  end\n  \n  defp append_divisors(list, a, a), do: [a | list]\n  defp append_divisors(list, a, b), do: [a, b | list]\n  \n  defp sum_squares(divisors) do\n    divisors\n    |> Enum.reduce(0, fn x, acc -> acc + x * x end)\n  end\n  \n  defp perfect_square?(number) do\n    sqrt = :math.sqrt(number)\n    sqrt == trunc(sqrt)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77184,"user_id":null,"body":"defmodule RecreationOne do\n\n  def list_squared(m, n), do:\n    m..n\n    |> Enum.map(&is_squared_list\/1)\n    |> Enum.filter(& &1 != -1)\n\n  defp is_squared_list(n), do:\n    n\n    |> get_divisors\n    |> Enum.map(& &1 * &1)\n    |> Enum.sum\n    |> (&(if is_square(&1), do: {n, &1}, else: -1)).()\n\n  defp get_divisors(n), do: get_divisors(n, 1, [])\n  defp get_divisors(n, current, acc) when current > n \/ 2, do: [n | acc]\n  defp get_divisors(n, current, acc) when rem(n, current) == 0, do: get_divisors(n, current + 1, [current | acc])\n  defp get_divisors(n, current, acc), do: get_divisors(n, current + 1, acc)\n\n  defp is_square(n), do: :math.sqrt(n) == round(:math.sqrt(n))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55ab4f980f2d576c070000f4":[{"id":77185,"user_id":null,"body":"defmodule Chessboard do\n  require Integer\n\n  def game(n) when Integer.is_even(n), do: [div(n * n,2)]\n  def game(n) when Integer.is_odd(n), do: [n * n, 2]\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77186,"user_id":492,"body":"defmodule Chessboard do\n\n  def game(n) do\n    m = n * n\n    if (rem(m, 2) == 0) do [m \/ 2] else [m, 2] end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77187,"user_id":null,"body":"defmodule Chessboard do\n\n  def game(1), do: [1, 2]\n  def game(n) do\n    value = (n * n)\n    case rem(n, 2) do\n      1 -> [ value, 2 ]\n      0 -> [ value \/ 2]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77188,"user_id":null,"body":"defmodule Chessboard do\n\n  def game(n) when rem(n, 2) == 0 do\n    [n*n\/2]\n  end\n\n  def game(n) do\n    [n*n, 2]\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77189,"user_id":null,"body":"defmodule Chessboard do\n  require Integer\n  def game(n) do\n    if Integer.is_even(n), do: [div(n * n, 2)], else: [n * n, 2]\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77190,"user_id":250,"body":"defmodule Chessboard do\n\n  def game(n) do\n    r = n * n \/ 2\n    if n != 0 && rem(n * n, 2) != 0 do\n      [n*n, 2]\n    else\n      [r]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77191,"user_id":null,"body":"defmodule Chessboard do\n\n  def game(n) do\n    case Integer.mod(n, 2) do\n      0 ->\n        [(n * n) \/ 2]\n      1 ->\n        [n * n, 2]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77192,"user_id":null,"body":"defmodule Chessboard do\n\n  def game(n) do\n    num = n * n\n    cond do\n      rem(num, 2) == 0 -> [num\/2]\n      true -> [num, 2]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77193,"user_id":null,"body":"defmodule Chessboard do\n  require Integer\n\n  def game(1), do: [1, 2]\n  def game(n) do\n    num = n * n\n    if Integer.is_even(num) do\n      [num\/2]\n    else\n      [num, 2]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77194,"user_id":null,"body":"defmodule Chessboard do\n  require Integer\n\n  #def game(0), do: [0]\n  def game(1), do: [1, 2]\n  def game(n) do\n    num = n * n\n    if Integer.is_even(num) do\n      [num\/2]\n    else\n      [num, 2]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55b22ef242ad87345c0000b2":[{"id":77195,"user_id":null,"body":"defmodule Kata do\n  def choose(n, k) when k > n, do: 0\n  def choose(n, k) when k == 0 or k == n, do: 1\n\n  def choose(n, k) do\n    k = min(k, n - k)\n    div(Enum.reduce(1..k, 1, &(&2 * (n - &1 + 1))), Enum.reduce(1..k, 1, &*\/2))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77196,"user_id":null,"body":"defmodule Kata do\n    def choose(n,k,k,b), do: div(b * (n - k + 1), k)\n    def choose(n,k,i \\\\ 1, b \\\\ 1), do: choose(n, k, i + 1, div(b * (n - i + 1), i))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77197,"user_id":null,"body":"defmodule Kata do\n    def choose(n, k) when n < k, do: 0\n    def choose(n, n), do: 1\n    def choose(n, k) when k > (n - k), do: div(prod(k + 1, n), prod(n - k))\n    def choose(n, k), do: div(prod(n - k + 1, n), prod(k))\n    \n    defp prod(a \\\\ 1, n), do: Enum.reduce(a..n, &*\/2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77198,"user_id":null,"body":"defmodule Kata do\n\n  def choose(n, k), do: div(mul(n - k + 1, n), mul(1, k))\n\n  defp mul(a, b), do: Enum.reduce(a..b, 1, & &1 * &2)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77199,"user_id":null,"body":"defmodule Kata do\n  def choose(n, k) when n < k, do: 0\n  def choose(n, k) when n == k, do: 1\n  def choose(n, k) do\n    map = fac({n - k, k, n}, 1, 1, %{})\n    div(map[n], map[k] * map[n - k])\n  end\n\n  def fac({a, b, c}, res, n, map) do\n    case n do\n      ^a -> fac({a, b, c}, res * n, n + 1, Map.put(map, a, res * n))\n      ^b -> fac({a, b, c}, res * n, n + 1, Map.put(map, b, res * n))\n      ^c -> Map.put(map, c, res * n)\n      _  -> fac({a, b, c}, res * n, n + 1, map)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77200,"user_id":527,"body":"defmodule Kata do\n  def choose(n, k) when k > n, do: 0\n  def choose(n, k) when k > n - k, do: choose(n, n - k)\n  def choose(_, 0), do: 1\n  def choose(n, k) do\n    div(Enum.reduce(n-k+1..n, &*\/2), Enum.reduce(1..k, &*\/2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77201,"user_id":null,"body":"defmodule Kata do\n    def choose(n,k) when n < k, do: 0\n    def choose(n,k) when k > n-k, do: choose(n,n-k)\n    def choose(n,k), do: Enum.reduce(0..max(0,k-1), 1, & div((n-&1) * &2, &1+1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55b2d9bd2d3e974dfb000030":[{"id":77202,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    for g <- (0..n),\n      r <- (0..n),\n      b <- (0..n),\n      g + r + b == n,\n      5*g + 4*r + 3*b == m, do: {g, r, b}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77203,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    for g <- 0..n,\n      r <- 0..n,\n      b <- 0..n,\n      g + r + b == n,\n      g*5 + r*4 + b*3 == m,\n      do: {g, r, b}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77204,"user_id":null,"body":"defmodule GuessIt do\n\t@green_weight 5\n  @red_weight 4\n  @blue_weight 3\n  \n  def guess(ball_count, mass) do\n  \tpossible_ball_combinations(ball_count)\n    |> Enum.filter(&satisfies_mass_requirement(mass, &1))\n  end\n  \n  defp possible_ball_combinations(ball_count) do\n  \tfor green_count <- 0..ball_count,\n    \t\tred_count <- 0..ball_count,\n        blue_count <- 0..ball_count,\n        green_count + red_count + blue_count == ball_count\n    do\n    \t{green_count, red_count, blue_count}\n    end\n  end\n  \n  defp satisfies_mass_requirement(desired_mass, {green, red, blue}) do\n    @green_weight * green + @red_weight * red + @blue_weight * blue == desired_mass\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77205,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    for g <- 0..n, r <- 0..n, b <- 0..n, check_count(g, r, b, n), check_weight(g, r, b, m), do: {g, r, b}\n  end\n  \n  defp check_count(a,b,c,n), do: a + b + c == n\n  defp check_weight(a,b,c,m), do: a * 5 + b * 4 + c * 3 == m\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77206,"user_id":null,"body":"defmodule GuessIt do\n  @balls %{green: 5, red: 4, blue: 3}\n\n  def guess(number_in_box, total_mass) do\n    Enum.to_list(0..number_in_box)\n    |> guess(Enum.count(@balls), number_in_box, total_mass)\n    |> Enum.filter(&is_tuple(&1))\n  end\n\n  def guess(_list = [], _i, _number_in_box, _total_mass), do: [[]]\n  def guess(_list, _i = 0, _number_in_box, _total_mass), do: [[]]\n\n  def guess(list, i, number_in_box, total_mass) do\n    for x <- list, y <- guess(list, i - 1, number_in_box, total_mass), result = [x | y] do\n      if length(result) == Enum.count(@balls) do\n        [green, red, blue] = result\n\n        if green * @balls[:green] + red * @balls[:red] + blue * @balls[:blue] == total_mass &&\n             green + red + blue == number_in_box do\n          List.to_tuple(result)\n        end\n      else\n        result\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77207,"user_id":495,"body":"defmodule GuessIt do\n  @green 5\n  @red 4\n  @blue 3\n  def guess(balls, mass) do\n    for g <- 0..balls, \n        r <- 0..balls, \n        b <- 0..balls,\n        g + r + b === balls,\n        @green*g + @red*r + @blue*b === mass\n      do\n        {g, r, b}\n      end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77208,"user_id":null,"body":"defmodule GuessIt do\n  @doc \"\"\"\n  Find the possible combinations of colored balls\n\n  Find the possible combinations of colored balls where the total number of balls\n  equals n, and the mass = m\n  \n  Green balls weigh 5kg\n  Red balls weigh 4kg\n  Blue balls weigh 3kg\n  \n  ## Examples\n  iex> GuessIt.guess(7, 23)\n  [{0, 2, 5}, {1, 0, 6}]\n  \n  \"\"\"\n  @spec guess(n :: integer, m :: integer) :: {g :: integer, r :: integer, b :: integer }\n  def guess(n, m) do\n    for g <- 0..min(div(m, 5), n),\n        r <- 0..min(div(m - g * 5, 4), n - g),\n        b = n - g - r,\n        correct_sum(m, g, r, b),\n        do: {g, r, b}\n  end\n\n  defp correct_sum(m, g, r, b) do\n    m == g * 5 + r * 4 + b * 3\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77209,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    # r = 5n - m -2b \/\/ g= m -4n +b\n    sol_vec = Enum.map(Enum.filter(((4*n) - m)..div(((5*n) - m),2), fn x -> x>= 0 end), fn b -> {m - (4*n) + b, (5*n) - m - (2*b), b} end )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77210,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    (for g <- 0..n, r <- 0..n, b <- 0..n, do: { g, r, b })\n    |> Stream.filter(fn ({g, r, b}) -> g + r + b == n end)\n    |> Enum.filter(fn ({g, r, b}) -> (g * 5) + (r * 4) + (b * 3) == m end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77211,"user_id":null,"body":"defmodule GuessIt do\n  def guess(n, m) do\n    for g <- 0..min(div(m, 5), n),\n      r <- 0..min(div(m - g * 5, 4), n - g),\n      b = n - g - r,\n      g * 5 + r * 4 + b * 3 == m,\n      do: {g, r, b}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55b3425df71c1201a800009c":[{"id":77212,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n\n  def stat_assoc(string) do\n    ts =\n      string\n      |> String.split(\", \")\n      |> Enum.map(&String.split(&1, \"|\"))\n      |> Enum.map(&Enum.map(&1, fn x -> String.to_integer(x) end))\n      |> Enum.map(fn [h, m, s] -> h * 60 * 60 + m * 60 + s end)\n      |> Enum.sort()\n\n    \"Range: #{format(range(ts))} Average: #{format(avg(ts))} Median: #{format(median(ts))}\"\n  end\n\n  defp range(ts), do: Enum.min_max(ts) |> (fn {min, max} -> max - min end).()\n\n  defp avg(ts), do: Enum.sum(ts) |> div(Enum.count(ts))\n\n  defp median(ts), do: ts |> length() |> div_rem(2) |> median(ts)\n  defp median({half, 0}, ts), do: avg(Enum.slice(ts, half - 1, 2))\n  defp median({half, 1}, ts), do: Enum.at(ts, half)\n\n  defp div_rem(dividend, divisor), do: {div(dividend, divisor), rem(dividend, divisor)}\n\n  defp format(t) do\n    {h, x} = div_rem(t, 60 * 60)\n    {m, s} = div_rem(x, 60)\n\n    [h, m, s]\n    |> Enum.map(&Integer.to_string\/1)\n    |> Enum.map_join(\"|\", &String.pad_leading(&1, 2, \"0\"))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77213,"user_id":null,"body":"defmodule AthleticAssociation do\n  \n  def stat_assoc(\"\") do\n    # clause for empty input\n    \"\"\n  end\n\n  def stat_assoc(times) do\n    #split input into list with one element each for each runner\n    runners = String.split(times, \",\") |> Enum.map(&String.trim(&1))\n    #Convert each runners time format (string in hh|mm|ss format) to time in integer format\n    time_in_seconds = \n      for runner <- runners,\n        do: String.split(runner, \"|\") |> Enum.map(&String.to_integer(&1))\n    #Convert integers corresponding to hours, minutes and seconds into single total time in seconds for each runner\n    total_per_runner = \n      for x <- time_in_seconds,\n      do: Enum.fetch!(x, 0) * 3600 + Enum.fetch!(x, 1) * 60 + Enum.fetch!(x, 2)\n    #calculate various input needed for final result\n    n = length(total_per_runner)\n    sorted = Enum.sort(total_per_runner)\n    min = Enum.min(total_per_runner)\n    max = Enum.max(total_per_runner)\n    range = max - min\n    range_format = format_seconds(range)\n    mean_format = Enum.sum(total_per_runner) \/ n\n                  |> trunc()\n                  |> format_seconds()\n    median = cond do\n              rem(n, 2) != 0 \n                -> Enum.fetch!(sorted, trunc((n + 1) \/ 2) - 1)\n              true \n                -> (Enum.fetch!(sorted, trunc(n \/ 2)) + Enum.fetch!(sorted, trunc(n\/2) - 1)) \/ 2 |> trunc()\n            end\n    median_format = format_seconds(median)\n\n    \"Range: #{range_format} Average: #{mean_format} Median: #{median_format}\"\n  end\n\n  @spec format_seconds(integer()) :: String.t()\n  def format_seconds(time) do\n    time_h = div(time, 3600)\n    time_m = div(rem(time, 3600), 60)\n    time_s = time - time_h * 3600 - time_m * 60\n    \"#{int_to_str(time_h)}|#{int_to_str(time_m)}|#{int_to_str(time_s)}\"\n  end\n\n  @spec int_to_str(integer()) :: String.t()\n  def int_to_str(num) when num >= 0 and num < 10 do\n    \"0#{num}\"\n  end\n\n  def int_to_str(num) when num >= 10 do\n    \"#{num}\"\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77214,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n\n  def stat_assoc(string) do\n    # your code\n    times =\n      string\n      |> String.split(\", \", trim: true)\n      |> Enum.map(&parse_time\/1)\n\n    range = times |> range() |> time_to_string()\n    average = times |> average() |> time_to_string()\n    median = times |> median() |> time_to_string()\n\n    \"Range: #{range} Average: #{average} Median: #{median}\"\n  end\n\n  def parse_time(string) do\n    [h, m, s] = String.split(string, \"|\") |> Enum.map(&String.to_integer\/1)\n    Time.new!(h, m, s)\n  end\n\n  def time_to_string(time, separator \\\\ \"|\") do\n    h = time.hour |> Integer.to_string() |> String.pad_leading(2, \"0\")\n    m = time.minute |> Integer.to_string() |> String.pad_leading(2, \"0\")\n    s = time.second |> Integer.to_string() |> String.pad_leading(2, \"0\")\n\n    \"#{h}#{separator}#{m}#{separator}#{s}\"\n  end\n\n  def range(times) do\n    Time.diff(Enum.max(times), Enum.min(times), :second) |> Time.from_seconds_after_midnight()\n  end\n\n  def average(times) do\n    avg =\n      times\n      |> time_to_seconds()\n      |> Enum.sum()\n\n    (avg \/ length(times))\n    |> floor()\n    |> Time.from_seconds_after_midnight()\n  end\n\n  def time_to_seconds(times) do\n    times\n    |> Enum.map(&Time.to_seconds_after_midnight\/1)\n    |> Enum.map(fn {t, _} -> t end)\n  end\n\n  def median(times) do\n    times\n    |> Enum.sort()\n    |> median(length(times))\n  end\n\n  def median(times, len) when rem(len, 2) != 0 do\n    mid = floor(length(times) \/ 2)\n    Enum.at(times, mid)\n  end\n\n  def median(times, len) when rem(len, 2) == 0 do\n    mid = round(length(times) \/ 2) - 1\n\n    average([\n      Enum.at(times, mid),\n      Enum.at(times, mid + 1)\n    ])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77215,"user_id":null,"body":"# write code below\n\ndefmodule AthleticAssociation do\n  def stat_assoc(string) when string == \"\", do: \"\"\n\n  def stat_assoc(string) do\n    string\n    |> String.replace(\"|\", \":\")\n    |> String.split(\", \")\n    |> mapping([])\n    |> mapping_2([])\n    |> mapping_3([])\n    |> conversion()\n    |> tasks()\n  end\n\n  # all three tasks\n  def tasks(list) do\n    range = range(list)\n    avg = avg(list, 0, length(list))\n    median = median(list)\n    \"Range: #{range} Average: #{avg} Median: #{median}\"\n  end\n\n  # median\n  def median(list) do\n    length = length(list)\n\n    sort = Enum.sort(list)\n\n    case rem(length, 2) do\n      1 ->\n        Enum.at(sort, floor(length \/ 2))\n        |> Time.diff(~T[00:00:00])\n        |> avg_conv\n\n      0 ->\n        v1 = Enum.at(sort, floor(length \/ 2 - 1))\n        v2 = Enum.at(sort, floor(length \/ 2))\n\n        ((Time.diff(v1, ~T[00:00:00]) + Time.diff(v2, ~T[00:00:00])) \/ 2)\n        |> avg_conv\n    end\n  end\n\n  # average of time\n  def avg([], seconds, length), do: avg_conv(seconds \/ length)\n\n  def avg([head | tail], seconds, length) do\n    sec = Time.diff(head, ~T[00:00:00])\n    avg(tail, seconds + sec, length)\n  end\n\n  # conversion from seconds to time again\n  def avg_conv(sec) do\n    average =\n      Time.add(~T[00:00:00], floor(sec))\n      |> Time.to_string()\n      |> String.replace(\":\", \"|\")\n      |> String.split(\".\")\n\n    [head | _tail] = average\n    head\n  end\n\n  # range of time\n  def range(list) do\n    time_diff = Time.diff(Enum.max(list), Enum.min(list))\n\n    range =\n      Time.add(~T[00:00:00], time_diff)\n      |> Time.to_string()\n      |> String.replace(\":\", \"|\")\n      |> String.split(\".\")\n\n    [head | _tail] = range\n    head\n  end\n\n  # conversion\n  def conversion(list) do\n    Enum.map(list, fn x -> Time.from_iso8601(x) end)\n    |> Enum.map(fn {_x, y} -> y end)\n  end\n\n  # mapping\n  def mapping([], final), do: final\n\n  def mapping([head | tail], final) do\n    case(rem(String.length(head), 2)) do\n      1 ->\n        mapping(tail, final ++ [\"0\" <> head])\n\n      0 ->\n        mapping(tail, final ++ [head])\n    end\n  end\n\n  # mapping 2\n  def mapping_2([], final), do: final\n\n  def mapping_2([head | tail], final) do\n    split = String.split(head, \":\")\n    first = String.length(List.first(split))\n\n    join = Enum.join(split, \":\")\n\n    if first == 1 do\n      mapping_2(tail, final ++ [\"0\" <> join])\n    else\n      mapping_2(tail, final ++ [join])\n    end\n  end\n\n  def mapping_3([], final), do: final\n\n  def mapping_3([head | tail], final) do\n    split = String.split(head, \":\")\n    last = String.length(List.last(split))\n\n    join = Enum.join(split, \":\")\n\n    if last == 1 do\n      mapping_3(tail, final ++ [join <> \"0\"])\n    else\n      mapping_3(tail, final ++ [join])\n    end\n  end\nend\n\n# [\"01:15:59\", \"01:47:16\", \"01:17:20\", \"01:32:34\", \"02:17:17\", \"05:11:11\"]\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77216,"user_id":null,"body":"defmodule AthleticAssociation do\n\n  def stat_assoc(string) when string === \"\", do: \"\"\n\n  def stat_assoc(string) do\n    times =\n      string\n      |> String.split(\",\")\n      |> Stream.map( &String.trim\/1 )\n      |> Stream.map( &time_to_seconds\/1 )\n      |> Enum.sort()\n\n    \"Range: #{calc_range(times)} Average: #{calc_avg(times)} Median: #{calc_median(times)}\"\n  end\n\n  defp calc_median(times) do\n    mid = (length(times) - 1) \/ 2.0\n    median_time = ( Enum.at( times, round(Float.floor(mid)) ) + Enum.at( times, round(Float.ceil(mid))) )  \/ 2.0\n    to_compound_date( trunc(median_time) )\n  end\n\n  defp calc_avg(times) do\n    times\n    |> Enum.sum()\n    |> div( length(times) )\n    |> to_compound_date()\n  end\n\n  defp calc_range(times) do\n    {min, max} = Enum.min_max(times)\n    to_compound_date( max - min )\n  end\n\n  defp time_to_seconds(time_str) do\n    [hour, minute, second] =\n      time_str\n      |> String.split(\"|\")\n      |> Enum.map( &String.to_integer\/1 )\n\n    hour * 3600 + minute * 60 + second\n  end\n\n  defp to_compound_date(total_seconds, hours\\\\0, minutes\\\\0, seconds\\\\0) do\n    cond do\n      minutes >= 60       -> to_compound_date(total_seconds, hours + 1, 0, 0)\n      seconds >= 60       -> to_compound_date(total_seconds, hours, minutes + 1, 0)\n      total_seconds === 0 -> format_time([hours, minutes, seconds])\n      true                -> to_compound_date(total_seconds - 1, hours, minutes, seconds + 1)\n    end\n  end\n\n  defp format_time(time_info) do\n    time_info\n    |> Stream.map( &Integer.to_string\/1 )\n    |> Stream.map( &String.pad_leading(&1, 2, \"0\") )\n    |> Enum.join(\"|\")\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77217,"user_id":492,"body":"defmodule AthleticAssociation do\n  def stat_assoc(string) when string == \"\", do: \"\"\n  def stat_assoc(string) do\n    calcs = string\n      |> times\n      |> calculations\n    \"Range: #{snd2time(calcs.range)} Average: #{snd2time(calcs.average)} Median: #{snd2time(calcs.median)}\"\n  end\n  \n  defp time2sec(time) do\n    [h, m, s] = time\n      |> String.split(\"|\")\n      |> Enum.map(fn(n) -> String.to_integer(n) end)\n    (h * 3600) + (m * 60) + s\n  end\n  \n  defp times(string) do\n    string\n    |> String.split(\", \")\n    |> Enum.map(&time2sec\/1)\n    |> Enum.sort\n  end\n  \n  defp calculations(times) do\n    range = List.last(times) - List.first(times)\n    average = Enum.sum(times) \/ length(times)\n    mid = (length(times) - 1) \/ 2.0\n    median = (Enum.at(times, round(Float.floor(mid))) + Enum.at(times, round(Float.ceil(mid)))) \/ 2.0\n    %{ range: trunc(range), average: trunc(average), median: trunc(median) }\n  end\n  \n  defp snd2time(seconds) do\n    hours = round(Float.floor(seconds \/ 3600))\n    minutes = rem(round(Float.floor(seconds \/ 60)), 60)\n    secs = rem(seconds, 60)\n\n    [hours, minutes, secs]\n    |> Enum.map(fn(s) ->\n      s\n      |> Integer.to_string\n      |> String.pad_leading(2, \"0\")\n    end)\n    |> Enum.join(\"|\")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77218,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n\n  def stat_assoc(string) do\n    sorted_times = parse_and_sort_times(string)\n\n    sorted_times\n    |> compute_stat_assocs()\n    |> Enum.into([], fn {k, v} -> \n      \"#{String.capitalize(to_string(k))}: #{seconds_to_formatted_time_string(v)}\" \n    end)\n    |> Enum.join(\" \")\n  end\n\n  defp parse_and_sort_times(string) do\n    string\n    |> String.split(\",\")\n    |> Enum.map(&String.trim\/1)\n    |> Enum.map(& String.split(&1, \"|\"))\n    |> Enum.map(fn times -> Enum.map(times, &String.to_integer\/1) end)\n    |> Enum.map(fn [h, m, s] -> h*60*60 + m*60 + s end)\n    |> Enum.sort()\n  end\n\n  defp compute_stat_assocs(times) do\n    [\n      range: compute_range(times), \n      average: compute_mean(times), \n      median: compute_median(times)\n    ]\n  end\n\n  defp compute_range(times) do\n    {min, max} = Enum.min_max(times)\n\n    max - min\n  end\n\n  defp compute_mean(times) do\n    times |> Enum.sum() |> div(length(times))\n  end\n\n  defp compute_median(times) do\n    times_count = length(times)\n    mid_count = div(times_count, 2)\n\n    case rem(times_count, 2) == 0 do\n      false ->\n        Enum.at(times, mid_count)\n      _ ->\n        [Enum.at(times, mid_count - 1), Enum.at(times, mid_count)]\n        |> Enum.sum() \n        |> div(2)\n    end\n  end\n\n  defp seconds_to_formatted_time_string(seconds) do\n    mins_tot = div(seconds, 60)\n    hrs = div(mins_tot, 60) \n    mins = rem(mins_tot, 60) \n    secs = rem(seconds, 60)\n\n    [hrs, mins, secs]\n    |> Enum.map(&to_string\/1)\n    |> Enum.map(&String.pad_leading(&1, 2, \"0\"))\n    |> Enum.join(\"|\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77219,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n\n  def stat_assoc(string) do\n    lst = String.split(string, \", \") |> Enum.map(&to_secs\/1) |> Enum.sort()\n    range = List.last(lst) - List.first(lst)\n    avg = mean(lst)\n    median = mean([Enum.at(lst, div(length(lst) - 1, 2)), Enum.at(lst, div(length(lst), 2))])\n\n    \"Range: #{to_hms(range)} Average: #{to_hms(avg)} Median: #{to_hms(median)}\"\n  end\n\n  def to_secs(s),\n    do:\n      String.split(s, \"|\")\n      |> Enum.reduce(0, fn x, res -> res * 60 + String.to_integer(x) end)\n\n  def to_hms(secs) do\n    secs = floor(secs)\n\n    Enum.map([div(secs, 3600), div(secs, 60) |> rem(60), rem(secs, 60)], fn x ->\n      String.pad_leading(\"#{x}\", 2, \"0\")\n    end)\n    |> Enum.join(\"|\")\n  end\n\n  def mean(lst), do: Enum.sum(lst) \/ length(lst)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77220,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n  def stat_assoc(string) do\n    times = to_list(string)\n    \"Range: #{to_time(range(times))} Average: #{to_time(avg(times))} Median: #{to_time(median(times))}\"\n  end\n  \n  defp to_list(string) do\n    string\n    |> String.split(\", \")\n    |> Enum.map(fn time -> \n      [h, m, s] = time |> String.split(\"|\") |> Enum.map(&String.to_integer\/1)\n      h * 3600 + m * 60 + s\n    end)\n  end\n  \n  defp to_time(seconds) do\n    h = div(seconds, 3600)\n    m = rem(seconds, 3600) |> div(60)\n    s = rem(seconds, 60)\n    [h, m, s]\n    |> Enum.map(fn t -> t |> Integer.to_string() |> String.pad_leading(2, \"0\") end)\n    |> Enum.join(\"|\")\n  end\n  \n  defp avg(list), do: Enum.sum(list) |> div(length(list)) |> round()\n  defp range(list), do: Enum.max(list) - Enum.min(list)\n  defp median(list) when rem(length(list), 2) == 0 do\n    list |> Enum.sort |> Enum.slice(div(length(list), 2)-1..div(length(list), 2)) |> Enum.sum |> div(2)\n  end\n  defp median(list), do: list |> Enum.sort |> Enum.at(div(length(list), 2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77221,"user_id":null,"body":"defmodule AthleticAssociation do\n  def stat_assoc(\"\"), do: \"\"\n  \n  def stat_assoc(string) do\n    times = \n      ~r\/(\\d{1,2})\\|(\\d{1,2})\\|(\\d{1,2})\/\n      |> Regex.scan(string, capture: :all_but_first)\n      |> Enum.map(&to_seconds\/1)\n\n    len = Enum.count(times)\n    range = times |> Enum.min_max() |> (fn {a, b} -> b - a end).()\n    mean = div(Enum.sum(times), len)\n    median = \n      case times |> Enum.sort() |> Enum.slice(div(len - 1, 2), 2) do\n        [a, b] when rem(len, 2) == 0 -> div(a + b, 2)\n        [a, _] -> a\n        [a] -> a\n      end\n\n    \"Range: #{to_str(range)} Average: #{to_str(mean)} Median: #{to_str(median)}\"\n  end\n\n  def to_seconds([h, m, s]) do\n    String.to_integer(h) * 3600 + String.to_integer(m) * 60 + String.to_integer(s)\n  end\n\n  def to_str(n) do\n    \"~2..0w|~2..0w|~2..0w\"\n    |> :io_lib.format([div(n, 3600), n |> div(60) |> rem(60), rem(n, 60)])\n    |> to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55b350026cc02ac1a7000032":[{"id":77222,"user_id":null,"body":"defmodule Kata do\n  def whitespace_number(0), do: \" \n\"\n\n  def whitespace_number(n) do\n    representation =\n      Integer.digits(abs(n), 2)\n      # turns 0 in \" \" and  1 in \"\\t\"\n      |> Enum.map(&Enum.at([\" \", \"\\t\"], &1))\n      |> Enum.join()\n\n    sign(n) <> representation <> \"\n\"\n  end\n\n  def sign(n) when n < 0, do: \"\\t\"\n  def sign(_n), do: \" \"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77223,"user_id":null,"body":"defmodule Kata do\n    \n def whitespace_number(n) when n<0 do \"\\t\"<>build_num(-n)<>\"\n\" end\n def whitespace_number(n) do \" \"<>build_num(n)<>\"\n\" end\n\n def build_num(0) do \"\" end\n def build_num(n) do build_num(div(n,2)) <> bit_val(rem(n,2)) end\n\n def bit_val(0) do \" \" end\n def bit_val(1) do \"\\t\" end \n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77224,"user_id":null,"body":"defmodule Kata do\n    def whitespace_number(n) do\n      sign(n) <> build(n) <> \"\n\"     \n    end\n   \n    defp build(n) do\n      n\n      |> abs\n      |> Integer.to_string(2)\n      |> String.replace(\"1\", \"\\t\")\n      |> String.replace(\"0\", \" \")\n      |> IO.inspect\n    end\n    \n        \n    defp sign(n) when n < 0, do: \"\\t\"\n    defp sign(0), do: \"\"\n    defp sign(n), do: \" \"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77225,"user_id":null,"body":"defmodule Kata do\n  def whitespace_number(n) do\n    if(n >= 0, do: \" \", else: \"\\t\") <>\n      if n == 0 do\n        \"\"\n      else\n        abs(n)\n        |> Integer.digits(2)\n        |> Enum.map(fn\n          0 -> \" \"\n          1 -> \"\\t\"\n        end)\n        |> Enum.join()\n      end <> \"\n\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77226,"user_id":null,"body":"defmodule Kata do\n    def whitespace_number(0), do: \" \n\"\n    def whitespace_number(n) do\n      sign = if n < 0 do \"\\t\" else \" \" end\n      \n      as_wp = n\n      |> abs\n      |> Integer.to_string(2)\n      |> String.replace(\"0\", \" \")\n      |> String.replace(\"1\", \"\\t\")\n      \n      sign <> as_wp <> \"\n\"\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77227,"user_id":null,"body":"defmodule Kata do\n  def whitespace_number(0), do: \" \n\"\n  def whitespace_number(n) when n > 0, do: \" #{digits(n)}\n\"\n  def whitespace_number(n) when n < 0, do: \"\\t#{digits(n)}\n\"\n  defp whitespace_digit(0), do: \" \"\n  defp whitespace_digit(1), do: \"\\t\"\n  defp digits(n), do: n |> abs |> Integer.digits(2) |> Enum.map_join(&whitespace_digit\/1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77228,"user_id":null,"body":"defmodule Kata do\n    def whitespace_number(0), do: \" \n\"\n    \n    def whitespace_number(n) do\n      sign = if n < 0, do: \"\\t\", else: \" \"\n      n\n      |> abs\n      |> Integer.digits(2)\n      |> Enum.map(&to_whitespace\/1)\n      |> List.insert_at(0, sign)\n      |> Kernel.++([\"\n\"])\n      |> Enum.join()\n    end\n    \n    def to_whitespace(0), do: \" \"\n    def to_whitespace(1), do: \"\\t\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77229,"user_id":null,"body":"defmodule Kata do\n  def whitespace_number(0), do: \" \n\"\n\n  def whitespace_number(n) do\n    Integer.digits(abs(n), 2)\n    |> Enum.map(&Enum.at([\" \", \"\\t\"], &1))\n    # adding the sign\n    |> (fn l -> if n < 0, do: [\"\\t\" | l], else: [\" \" | l] end).()\n    # adding \n as terminator\n    |> (fn l -> l ++ [\"\n\"] end).()\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77230,"user_id":null,"body":"defmodule Kata do\n  def whitespace_number(n), do: sign(n) <> enc(abs(n)) <> \"\n\"\n\n  defp sign(n) when n < 0, do: \"\\t\"\n  defp sign(_), do: \" \"\n\n  defp enc(0), do: \"\"\n  defp enc(1), do: \"\\t\"\n  defp enc(n), do: enc(div(n, 2)) <> String.pad_leading(enc(rem(n, 2)), 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77231,"user_id":null,"body":"defmodule Kata do\n\n  def whitespace_number(0), do: \" \n\"\n  def whitespace_number(n), do:\n    get_leading(n) <> convert_integer(n) <> \"\n\"\n\n  defp convert_integer(n) do\n    n\n    |> abs\n    |> Integer.to_string(2)\n    |> String.replace(\"0\", \" \")\n    |> String.replace(\"1\", \"\\t\")\n  end\n\n  defp get_leading(n) when n > 0, do: \" \"\n  defp get_leading(n), do: \"\\t\"\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55b4d87a3766d9873a0000d4":[{"id":77232,"user_id":null,"body":"defmodule Howmuch do\n  def howmuch(n, n), do: []\n  def howmuch(m, n) do\n    m..n\n    |> Stream.filter(fn f -> (rem f, 9) == 1 and (rem f, 7) == 2 end)\n    |> Stream.map(fn f -> [\"M: #{f}\", \"B: #{div f, 7}\", \"C: #{div f, 9}\"] end)\n    |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77233,"user_id":null,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) when m > n, do: howmuch(n, m)\n    def howmuch(m, n) do\n      for money <- m..n,\n        rem(money - 1, 9) == 0,\n        rem(money - 2, 7) == 0, do: [\"M: #{money}\", \"B: #{div(money-2, 7)}\", \"C: #{div(money-1, 9)}\"]\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77234,"user_id":492,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) do\n        i = min(m, n)\n        j = max(m, n)\n        for x <- i..j, ((rem(x, 9) == 1) && (rem(x, 7) == 2)), do:\n            [\"M: \" <> to_string(x), \"B: \" <> to_string(div(x, 7)), \"C: \" <> to_string(div(x, 9))] \n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77235,"user_id":null,"body":"defmodule Howmuch do\n    @cars_remainder 1\n    @number_of_cars_bought 9\n\n    @boats_remainder 2\n    @number_of_boats_bought 7\n    \n    # in the case of 1, 100\n    # 37 - (@number_of_boats_bought * 5) = @boats_remainder\n    # and \n    # 37 - (@number_of_cars_bought * 4) = @cars_remainder\n    # So answer where total money is M and cost of car is C and cost of boat is B is\n    # [[\"M: 37\", \"B: 5\", C: 4], [\"M: 100, \"B: 14\", \"C: 11\"]]\n    \n    def howmuch(m, n) do\n      n..m\n      |> Enum.to_list()\n      |> Enum.reduce([], &build_answer\/2)\n      \n    end\n    \n    defp build_answer(amount, acc) do\n      new_answer = with {:ok, car_cost} <- cost(:cars, amount),\n           {:ok, boat_cost} <- cost(:boats, amount)\n      do\n         [[\"M: #{inspect(amount)}\", \"B: #{inspect(boat_cost)}\", \"C: #{inspect(car_cost)}\"] | acc]\n      end\n      \n      # Hack since codewars is on a super old version of elixir that does not support else in with statements.\n      case new_answer do\n        {:no_match, _} -> acc\n        _ -> new_answer\n      end\n    end\n    \n    defp cost(:boats, amount) do\n      case rem(amount, @number_of_boats_bought) do\n        @boats_remainder ->\n          {:ok, div(amount, @number_of_boats_bought)}\n        \n        other_amount ->\n          {:no_match, other_amount}\n      end\n    end\n    \n    defp cost(:cars, amount) do\n      case rem(amount, @number_of_cars_bought) do\n        @cars_remainder ->\n          {:ok, div(amount, @number_of_cars_bought)}\n        \n        other_amount ->\n          {:no_match, other_amount}\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77236,"user_id":null,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) do\n        m..n\n        |> Enum.filter(&matches\/1)\n        |> Enum.map(&format\/1)\n    end\n\n    defp matches(n), do: rem(n - 2, 7) === 0 and rem(n-1, 9) === 0\n    defp format(n), do: [\"M: #{n}\", \"B: #{div(n-2, 7)}\", \"C: #{div(n-1, 9)}\"]\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77237,"user_id":null,"body":"defmodule Howmuch do\n    def howmuch(m, n) do\n      m..n\n      |> Enum.filter(&fit?\/1)\n      |> Enum.map(\n        &([\"M: #{&1}\", \"B: #{div(&1,7)}\", \"C: #{div(&1,9)}\"])\n      )\n    end\n    \n    defp fit?(n) when\n      n > 2 and \n      rem(n - 2, 7) == 0 and \n      rem(n - 1, 9) == 0, do: true\n    defp fit?(_), do: false\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77238,"user_id":null,"body":"defmodule Howmuch do\n  def howmuch(m, n) do\n    [a, b] = Enum.sort([m, n])\n\n    Enum.filter(a..b, fn i -> rem(i, 9) == 1 && rem(i, 7) == 2 end)\n    |> Enum.map(fn i -> [\"M: #{i}\", \"B: #{div(i, 7)}\", \"C: #{div(i, 9)}\"] end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77239,"user_id":null,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) do\n        for money when rem(money - 2, 7) == 0 and rem(money - 1, 9) == 0 <- m..n, reduce: [] do\n          acc ->\n            b = div((money - 2), 7)\n            c = div((money - 1), 9)\n            r = [\"M: #{money}\", \"B: #{b}\", \"C: #{c}\"]\n            acc ++ [r]\n        end\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77240,"user_id":null,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) do\n        result = for money when rem(money - 2, 7) == 0 and rem(money - 1, 9) == 0 <- m..n, reduce: [] do\n          acc ->\n            b = div((money - 2), 7)\n            c = div((money - 1), 9)\n            r = [\"M: #{money}\", \"B: #{b}\", \"C: #{c}\"]\n            acc ++ [r]\n        end\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77241,"user_id":null,"body":"defmodule Howmuch do\n\n    def howmuch(m, n) do\n      m..n\n      |> Stream.filter(fn x -> rem(x, 9) == 1 and rem(x, 7) == 2 end)\n      |> Stream.map(fn x -> [\"M: #{x}\", \"B: #{div(x, 7)}\", \"C: #{div(x, 9)}\"] end)\n      |> Enum.to_list\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55be10de92aad5ef28000023":[{"id":77242,"user_id":2098,"body":"defmodule Checkchoose do\n\n  def checkchoose(m, n) do\n    Stream.unfold({0, 1}, fn {k, p} ->\n      cond do \n        p == 0 -> nil\n        true -> {p, {k + 1, div(p * (n - k), k + 1)}}\n      end\n    end) |> Enum.find_index(& &1 == m ) || -1 \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77243,"user_id":1249,"body":"defmodule Checkchoose do\n  def checkchoose(m, n) do\n    Enum.find_index(pascal_line(n), &(&1==m)) || -1\n  end\n\n  def pascal_line(n) do\n    Stream.unfold {0, 1}, fn {_, 0} -> nil; {k, m} ->\n      {m, {k+1, div(m*(n-k), k+1)}}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77244,"user_id":53,"body":"defmodule Checkchoose do\n\n  def checkchoose(m, n) do\n    checkchoose(m, n, 0, 1)\n  end\n  \n  def checkchoose(m, n, i, r) do\n    cond do\n          i > n     -> -1\n          r == m    -> i\n          true      -> r = div(r * (n - i), i + 1)\n                       checkchoose(m, n, i + 1, r)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77245,"user_id":null,"body":"defmodule Checkchoose do\n\n  def checkchoose(m, n) do\n    Enum.reduce_while(1..n, -1, fn(x, acc) -> \n      if combination(n, x) == m, do: {:halt, x}, else: {:cont, acc}\n    end)\n  end\n  \n  defp combination(n, x), do: div(factorial(n), (factorial(x) * factorial(n-x)))\n  defp factorial(0), do: 1\n  defp factorial(n) when n > 0, do: n * factorial(n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77246,"user_id":492,"body":"defmodule Checkchoose do\n\n  defp checkaux(_m, n, x, _c) when x > div(n, 2) do -1 end\n  defp checkaux(m, n, x, c) when c < m do\n    checkaux(m, n, x + 1, div(c * (n - x), x + 1))\n  end\n  defp checkaux(m, _n, x, c) when c == m do x end\n  defp checkaux(m, _n, _x, c) when c > m do -1 end\n  \n  def checkchoose(m, n) do\n    checkaux(m, n, 0, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77247,"user_id":null,"body":"defmodule Checkchoose do\n  defp comb(n, k), do: Enum.reduce(1..min(k,n-k), 1, fn x, acc -> div(acc * (n - x + 1), x) end)\n  def checkchoose(m, n), do: Enum.find(1..div(n, 2), -1, fn k -> comb(n, k) == m end)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77248,"user_id":null,"body":"defmodule Checkchoose do\n\n  def checkchoose(m, n, x \\\\ 1, c \\\\ 1) do\n    case div(c * (n - x + 1), x) do\n      ^m -> x\n      v when v > m or x > n -> -1\n      v -> checkchoose(m, n, x + 1, v)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77249,"user_id":null,"body":"defmodule Checkchoose do\n\n  def checkchoose(m, n) do\n    checkchoose(m, n, 1)\n  end\n  \n  defp checkchoose(target, n, x) do\n    case n_choose_x(n, x) do\n      ^target -> x\n      m when x > m -> -1\n      _ -> checkchoose(target, n, x+1)\n    end\n  end\n  \n  defp n_choose_x(n, x) do\n    fac(n)\n    |> div(fac(x) * fac(n - x))\n  end\n  \n  defp fac(n), do: fac(n, 1)\n  defp fac(0, result), do: result\n  defp fac(n, result), do: fac(n-1, n*result)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77250,"user_id":null,"body":"defmodule Checkchoose do\n\n  @spec checkchoose(integer(), integer()) :: integer()\n  def checkchoose(m, n) do\n    check(m, n, 1, 1, trunc(factorial(n-1)), factorial(n))\n  end\n\n  @spec check(integer(), integer(), integer(), integer(), integer(), integer()) :: integer()\n  def check(m, n, num, prod, div, fact) do\n    #IO.puts(\"m is #{m}, n is #{n}, num is #{num}, prod is #{prod}, div is #{div}, fact is #{fact}\")\n    #result = round(fact \/ (div * prod))\n    result = div * prod * m\n    cond do\n      result == fact -> num\n      prod == fact and result != fact -> -1\n      (n-num) > 1 -> check(m, n, num + 1, prod * (num + 1), factorial(n-num-1), fact)\n      true -> check(m, n, num + 1, prod * (num + 1), div * 1, fact)\n    end\n\n  end\n\n  @spec factorial(integer()) :: integer()\n  def factorial(0) do\n    1\n  end\n  \n  def factorial(n) do\n    n * factorial(n-1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77251,"user_id":null,"body":"defmodule Checkchoose do\n\n  defp checkchoose(m, n, x, b) do\n    cond do\n      x == div(n, 2) + 2 -> -1\n      b == m -> x\n      true -> checkchoose(m, n, x + 1, div(b * (n - x), x + 1))\n    end\n  end\n\n  def checkchoose(m, n) do\n    checkchoose(m, n, 0, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55bf01e5a717a0d57e0000ec":[{"id":77252,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n, i \\\\ 0) do\n    case Integer.digits(n) do\n      [_] -> i\n      res -> persistence(Enum.reduce(res, &(&1*&2)), i + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77253,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n, x \\\\ 0)\n  def persistence(n, x) when n < 10, do: x\n  def persistence(n, x) do\n    Integer.digits(n)\n      |> Enum.reduce(&(&1*&2))\n      |> persistence(x+1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77254,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n, steps \\\\ 0)\n  def persistence(n, steps) when n < 10, do: steps\n\n  def persistence(n, steps) do\n    n |> Integer.digits() |> Enum.reduce(&(&1 * &2)) |> persistence(steps + 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77255,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n) when n < 10 do 0 end\n  def persistence(n) do\n    1 + (Integer.digits(n) |> Enum.reduce(1, fn(x, acc) -> x * acc end) |> persistence())\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77256,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n) do\n    n\n    |> Stream.iterate(fn n -> n |> Integer.digits() |> Enum.reduce(&(&1 * &2)) end)\n    |> Enum.find_index(&(&1 < 10))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77257,"user_id":53,"body":"defmodule PersistentBugger do\n  def persistence(n) when div(n, 10) < 1, do: 0\n  def persistence(n), do: 1 + persistence(md(n))\n  defp md(n) when div(n, 10) < 1, do: n\n  defp md(n), do: rem(n, 10) * md(div(n, 10))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77258,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n) when n < 10, do: 0\n  def persistence(n) do\n    new_n = multiply_digits(n)\n    \n    1 + persistence(new_n)\n  end\n  \n  defp multiply_digits(n) do\n    n\n    |> Integer.digits\n    |> Enum.reduce(fn i, acc -> i * acc end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77259,"user_id":null,"body":"defmodule PersistentBugger do\n  def persistence(n, i \\\\ 0) do\n    case Integer.digits(n) do\n      [_] -> i\n      digits -> digits |> Enum.reduce(&(&1 * &2)) |> persistence(i + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77260,"user_id":null,"body":"defmodule PersistentBugger do\n\n  def persistence(n) do\n    persistence(n, 0)\n  end\n\n  def persistence(n, acc) when n<10 do\n    acc\n  end\n\n  def persistence(n, acc) do\n    Enum.reduce(Integer.digits(n), 1, fn x, acc -> x*acc end)\n    |> persistence(acc+1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77261,"user_id":527,"body":"defmodule PersistentBugger do\n  def persistence(n), do:\n    n |> Stream.iterate(&digit_product\/1) |> Stream.take_while(&(&1 >= 10)) |> Enum.count\n  \n  defp digit_product(n), do:\n    n |> Integer.digits |> Enum.reduce(&(&1 * &2))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55c6126177c9441a570000cc":[{"id":77262,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str\n    |> String.split()\n    |> Enum.sort()\n    |> Enum.sort_by(&_weight\/1)\n    |> Enum.join(\" \")\n  end\n  \n  def _weight(str) do\n    str\n    |> String.to_integer()\n    |> Integer.digits()\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77263,"user_id":527,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str\n      |> String.split(\" \", trim: true)\n      |> Enum.sort_by(&({&1 |> String.to_integer |> Integer.digits |> Enum.sum, &1}))\n      |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77264,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str\n    |> String.split()\n    |> Enum.map(fn x -> String.to_integer(x) end)\n    |> Enum.map(fn x -> Integer.digits(x) end)\n    |> Enum.map(fn x -> Enum.sum(x) end)\n    |> Enum.with_index()\n    |> Enum.map(fn {k, v} -> {Enum.at(String.split(str), v), k} end)\n    |> Enum.sort()\n    |> List.keysort(1)\n    |> Enum.map_join(\" \", fn {k, _} -> k end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77265,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    String.split(str, \" \", trim: true)\n      |> Enum.sort(&(&1 <= &2))\n      |> Enum.map(fn x -> {x, (String.to_integer(x) |> Integer.digits() |> Enum.reduce(0, fn(a, acc) -> a + acc end))} end)\n      |> Enum.sort(fn({xS, xI}, {yS, yI}) -> xI <= yI end)\n      |> Enum.map(fn {str, int} -> str end)\n      |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77266,"user_id":null,"body":"defmodule WeightSort do\n  @moduledoc false\n\n  def order_weight(str) do\n    weights = String.split(str)\n\n    weights\n    |> Enum.group_by(&sum_for_weight_string\/1)\n    |> Map.values()\n    |> Enum.flat_map(&Enum.sort\/1)\n    |> Enum.join(\" \")\n  end\n\n  defp sum_for_weight_string(weight_string) do\n    String.codepoints(weight_string)\n    |> Enum.map(&Integer.parse\/1)\n    |> Enum.map(& elem(&1, 0))\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77267,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str|>String.split|>Enum.to_list|>Enum.sort(&(if &1 |>String.to_integer|>Integer.digits|>Enum.sum == &2|>String.to_integer|>Integer.digits|>Enum.sum do &1<=&2 else &1 |>String.to_integer|>Integer.digits|>Enum.sum <= &2|>String.to_integer|>Integer.digits|>Enum.sum end))|>Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77268,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    String.split(str)\n    |> Enum.sort_by(fn s ->\n      {\n        String.graphemes(s)\n        |> Enum.map(&String.to_integer\/1)\n        |> Enum.sum(),\n        s\n      }\n    end)\n    |> Enum.join(\" \")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77269,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str\n    |> String.split\n    |> Enum.sort_by(&with_weight\/1, &sort\/2)\n    |> Enum.join(\" \")\n  end\n  \n  defp with_weight(str) do\n    weight = str\n    |> String.to_integer\n    |> Integer.digits\n    |> Enum.sum\n    {str, weight}\n  end\n  \n  defp sort({str1, w}, {str2, w}), do: str1 <= str2\n  defp sort({_, w1}, {_, w2}), do: w1 <= w2\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77270,"user_id":null,"body":"defmodule WeightSort do\n  def order_weight(str) do\n    str\n    |> String.split\n    |> Enum.sort\n    |> Enum.sort_by(&( &1 |> String.to_integer |> Integer.digits |> Enum.sum ))\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77271,"user_id":null,"body":"defmodule WeightSort do\n\n  def order_weight(str) do\n    String.split(str, \" \")\n    |> Enum.reduce([], fn item, result -> [ { item, count_weight(item) } | result ] end)\n    |> Enum.sort(fn x , y -> sort_comparing(x, y) end)\n    |> Enum.map(fn { item, _} -> item end)\n    |> Enum.join(\" \")\n  end\n\n  def count_weight(weight_item) do\n    String.codepoints(weight_item)\n    |> Enum.reduce(0, fn digit, acc -> acc + String.to_integer(digit) end)\n  end\n\n  def sort_comparing(x, y) do\n    { x_str, x_w } = x\n    { y_str, y_w } = y\n\n    if x_w == y_w do\n      x_str < y_str\n    else\n      x_w < y_w\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55c90cad4b0fe31a7200001f":[{"id":77272,"user_id":277,"body":"defmodule Templates do\n  def build_string(args) do\n    \"I like #{Enum.join(args, \", \")}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77273,"user_id":null,"body":"defmodule Templates do\n  def build_string(args), do: \"I like #{args |> Enum.join(\", \")}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77274,"user_id":527,"body":"defmodule Templates do\n  def build_string(args) do\n    ~s(I like #{Enum.join(args, \", \")}!)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77275,"user_id":null,"body":"defmodule Templates, do: def build_string(args), do: \"I like #{args |> Enum.join(\", \")}!\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77276,"user_id":null,"body":"defmodule Templates do\n    def build_string(ls), do: \"I like #{Enum.join(ls, \", \")}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77277,"user_id":null,"body":"defmodule Templates do\n  defp join([head | []]), do: \"#{head}!\"\n  defp join([head | tail]), do: \"#{head}, #{join(tail)}\"\n\n  def build_string(args), do: \"I like #{join(args)}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77278,"user_id":null,"body":"defmodule Templates do\n  def build_string(args) do\n    args\n    |> Enum.join(\", \")\n    |> return_message\n  end\n\n  def return_message(n) do\n    \"I like #{n}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77279,"user_id":null,"body":"defmodule Templates do\n  def build_string(args), do: \"I like #{Enum.join(args, \", \")}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77280,"user_id":null,"body":"defmodule Templates do\n  def build_string(args) do\n    #\"I like #{args.join(\", \")}!\"\n    \"I like #{Enum.join(args,\", \")}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77281,"user_id":null,"body":"defmodule Templates do\n  def build_string(args) do\n    list = Enum.join(args, \", \")\n    \"I like #{list}!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55c9172ee4bb15af9000005d":[{"id":77282,"user_id":null,"body":"require Integer\n\ndefmodule Pentabonacci do\n  def count_odd_pentaFib(n) do\n    Stream.unfold({0,0,0,0,1}, fn {a,b,c,d,e} -> {d, {b,c,d,e,a+b+c+d+e}} end)\n    |> Stream.take(n+1)\n    |> Stream.filter(&Integer.is_odd\/1)\n    |> Stream.uniq\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77283,"user_id":null,"body":"defmodule Pentabonacci do\n  def count_odd_pentaFib(n) when n < 6, do: 1\n  def count_odd_pentaFib(n) do\n    div(n, 6) * 2 - 1 + case rem(n, 6) do\n      0 -> 0\n      1 -> 1\n      _ -> 2\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77284,"user_id":527,"body":"defmodule Pentabonacci do\n \n  def count_odd_pentaFib(n) do\n    2 * div(n, 6) + Enum.at([0, 1, 2, 2, 2, 2], rem(n, 6)) -\n      (if n >= 2, do: 1, else: 0)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77285,"user_id":null,"body":"defmodule Pentabonacci do\n  # numbers in this sequence go like this:\n  # EVEN ODD ODD\n  # EVEN EVEN EVEN EVEN ODD ODD    \n  # EVEN EVEN EVEN EVEN ODD ODD\n  # EVEN EVEN EVEN EVEN ODD ODD\n  # and so it goes forever\n  # 4 even numbers - 2 odd numbers, repeating\n  \n  # so, first three values give us count = 1\n  # then every 6 values give us count += 2\n  # then if the remainder is 5, we get another one, otherwise we get nothing more\n  \n  # n must be non-negative\n  def count_odd_pentaFib(n) when n < 0 do\n    raise \"n must be greater or equal 0\"\n  end\n  \n  # edge cases\n  def count_odd_pentaFib(n) when n == 0, do: 0\n  def count_odd_pentaFib(n) when n <= 2, do: 1\n  \n  # main case\n  def count_odd_pentaFib(n) do\n    n_except_first_three = n - 2 # first value actually has index 0\n    number_of_six_packs = div n_except_first_three, 6\n    rest = rem n_except_first_three, 6\n    1 + number_of_six_packs * 2 + (if rest == 5, do: 1, else: 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77286,"user_id":null,"body":"defmodule Pentabonacci do\n \n  def count_odd_pentaFib(n) when n >= 0 and n < 5 do\n    # your code\n    start = [0,1,1,2,4]\n    odds = for x <- start, rem(x, 2) != 0, do: x\n    Enum.uniq(odds) |> length()\n  end\n\n  def count_odd_pentaFib(n) do\n    result = sums(Enum.reverse([0,1,1,2,4]), 5, n, [1])\n    Enum.uniq(result) |> length()\n  end\n  \n  def sums(list, counter, n, odds) when counter <= n do\n    #Started with this initially - but has to traverse whole list in each recursion to get to the requisite indexes.\n    #new = Enum.slice(list, (counter-5)..(counter-1)) |> Enum.sum()\n    #then did this, this also uses indexes as an argument, so has to travel the length of the list each time\n    #new = (Enum.fetch!(list, counter-1) * 2) - Enum.fetch!(list, counter-6)\n    # finally used the function below and since I'm passing the reversed list initially, it only picks up the first 5 elements each time and ignores the rest.\n    new = Enum.take(list, 5) |> Enum.sum()\n    #IO.puts(\"count #{counter} is #{new}\")\n    od = if rem(new, 2) == 1, do: [new | odds], else: odds\n    sums([new | list], counter + 1, n, od)\n  end\n\n  def sums(_list, _counter, _n, odds) do\n    #IO.puts(\"final list length is #{length(list)}\")\n    odds\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77287,"user_id":null,"body":"defmodule Pentabonacci do\n\n  def count_odd_pentaFib(n), do: div(n, 6) * 2 - 1 + min(2, rem(n, 6))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77288,"user_id":null,"body":"defmodule Pentabonacci do\n  def count_odd_pentaFib(n) do\n   div(n, 6) * 2 - 1 + min(2, rem(n, 6))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77289,"user_id":null,"body":"defmodule Pentabonacci do\n require Integer\n \n  def count_odd_pentaFib(n) do\n    Stream.unfold({0,0,0,0,1},fn {n1,n2,n3,n4,n5} -> \n    n = n1 + n2 + n3 + n4 + n5\n    {n, {n2,n3,n4,n5, n}}\n    end)\n    |> Enum.take(n - 1 )\n    |> Enum.filter(&Integer.is_odd\/1)\n    |> length\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77290,"user_id":null,"body":"defmodule Pentabonacci do\n  def count_odd_pentaFib(n) do\n    ([1, 1, 0, 0, 0, 0]\n     |> Stream.cycle() \n     |> Enum.take(n) \n     |> Enum.sum       ) - 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77291,"user_id":null,"body":"defmodule Pentabonacci do\n  require Integer\n\n  def count_odd_pentaFib(n) do\n    {0, 1, 1, 2, 4}\n    |> Stream.unfold(fn {a, b, c, d, e} ->\n         {a, {b, c, d, e, a + b + c + d + e}}\n       end)\n    |> Enum.take(n + 1)\n    |> Enum.dedup\n    |> Enum.count(&Integer.is_odd\/1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55cbc3586671f6aa070000fb":[{"id":77292,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor), do: rem(base, factor) == 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77293,"user_id":null,"body":"defmodule CheckForFactor do\n  @spec check_for_factor(integer, integer) :: boolean\n  def check_for_factor(base, factor), do: rem(base, factor) == 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77294,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n   !!(rem(base, factor) == 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77295,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n    x = base\/factor\n    ceil(x) == x\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77296,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n    if rem(base, factor) === 0 do\n      true\n    else \n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77297,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n    if rem(base, factor) == 0, do: true, else: false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77298,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n    # your code here\n    rem(base, factor) == 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77299,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor), do: is_factor = rem(base, factor) === 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77300,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) when rem(base, factor) == 0, do: true\n  def check_for_factor(_, _), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77301,"user_id":null,"body":"defmodule CheckForFactor do\n  def check_for_factor(base, factor) do\n    # if remainder of base \/ factor is 0, return true, else return false\n    rem(base, factor) === 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55cbd4ba903825f7970000f5":[{"id":77302,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    score((a + b + c) \/ 3)\n  end\n  \n  def score(s) when s >= 90, do: \"A\"\n  def score(s) when s >= 80, do: \"B\"\n  def score(s) when s >= 70, do: \"C\"\n  def score(s) when s >= 60, do: \"D\"\n  def score(_), do: \"F\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77303,"user_id":564,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    case (a + b + c) \/ 3 do\n      avg when avg >= 90 -> \"A\"\n      avg when avg >= 80 -> \"B\"\n      avg when avg >= 70 -> \"C\"\n      avg when avg >= 60 -> \"D\"\n      _ -> \"F\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77304,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n     score = div(a+b+c, 3)\n     cond do\n        score in 90..100 -> \"A\"\n        score in 80..89 -> \"B\"\n        score in 70..79 -> \"C\"\n        score in 60..69 -> \"D\"\n        true -> \"F\"\n     end  \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77305,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    mean = (a + b + c) \/ 3\n    cond do\n      mean >= 90 -> \"A\"\n      mean >= 80 -> \"B\"\n      mean >= 70 -> \"C\"\n      mean >= 60 -> \"D\"\n      true -> \"F\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77306,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n      mean = trunc((a + b + c) \/ 3)\n  \n  case mean do\n    y when y in 90..100 ->\n      \"A\"\n   y when y in 80..89 ->\n      \"B\"\n   y when y in 70..79 ->\n      \"C\"\n   y when y in 60..69 ->\n      \"D\"\n   y when y in 0..59 ->\n      \"F\"\n  end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77307,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    mean = (a + b + c) \/ 3\n    cond do\n     90 <= mean and mean <= 100 -> \"A\"\n     80 <= mean and mean < 90 -> \"B\"\n     70 <= mean and mean < 80 -> \"C\"\n     60 <= mean and mean < 70 -> \"D\"\n     0 <= mean and mean < 60 -> \"F\"\n    end \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77308,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    mean = (a + b + c) \/ 3\n    cond do\n      mean >= 90 -> \"A\"\n      mean >= 80 -> \"B\"\n      mean >= 70 -> \"C\"\n      mean >= 60 -> \"D\"\n      mean >= 0 -> \"F\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77309,"user_id":53,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    String.at(\"FFFFFFDCBAA\", trunc((a+b+c)\/30))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77310,"user_id":527,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) do\n    case div(a + b + c, 30) do\n      10 -> \"A\"\n      9 -> \"A\"\n      8 -> \"B\"\n      7 -> \"C\"\n      6 -> \"D\"\n      _ -> \"F\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77311,"user_id":null,"body":"defmodule GetGrade do\n  def get_grade(a, b, c) when div(a+b+c, 3) < 60, do: \"F\"\n  def get_grade(a, b, c) when div(a+b+c, 3) < 70, do: \"D\"\n  def get_grade(a, b, c) when div(a+b+c, 3) < 80, do: \"C\"\n  def get_grade(a, b, c) when div(a+b+c, 3) < 90, do: \"B\"\n  def get_grade(a, b, c) when div(a+b+c, 3) <= 100, do: \"A\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55d24f55d7dd296eb9000030":[{"id":77312,"user_id":null,"body":"defmodule Series do\n  def summation(n) do\n    Enum.sum 1..n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77313,"user_id":null,"body":"defmodule Series do\n  def summation(n), do: Enum.sum(1..n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77314,"user_id":null,"body":"defmodule Series do\n  def summation(n) do\n    div(n*(n+1), 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77315,"user_id":null,"body":"defmodule Series do\n  def summation(0), do: 0\n  def summation(1), do: 1\n  def summation(n), do: n + summation(n - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77316,"user_id":null,"body":"defmodule Series do\n  def summation(acc, 0), do: acc\n  def summation(acc, n), do: summation(acc + n, n-1)\n  def summation(n), do: summation(n, n-1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77317,"user_id":null,"body":"defmodule Series do\n  def summation(n) do\n    1..n |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77318,"user_id":null,"body":"defmodule Series do\n  def summation(n) do\n    n * (n + 1) \/ 2\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77319,"user_id":null,"body":"defmodule Series do\n  def summation(n, acc \\\\ 0)\n  def summation(0, acc), do: acc\n  def summation(n, acc), do: summation(n - 1, acc + n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77320,"user_id":null,"body":"defmodule Series do\n  def summation(n), do: (n + 1) * n \/ 2\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77321,"user_id":null,"body":"defmodule Series do\n  def summation(n), do: div(n * (n + 1), 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55d8aa568dec9fb9e200004a":[{"id":77322,"user_id":null,"body":"defmodule Howmanydig do\n  def sel_number(n, d) do\n    1..n\n    |> Stream.map(&Integer.digits\/1)\n    |> Stream.filter(&(length(&1) >= 2))\n    |> Stream.filter(&unique_increasing\/1)\n    |> Stream.filter(&diff_neigh_pairs_not_exceeds(&1, d))\n    |> Enum.count\n  end\n  \n  def unique_increasing(l), do: Enum.sort(Enum.uniq(l)) == l\n  \n  def diff_neigh_pairs_not_exceeds(l, n) do\n \t\tmax = \n      Enum.zip(l, tl(l))\n      |> Enum.map(fn {prev, next} -> next - prev end)\n      |> Enum.max\n    \n    max <= n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77323,"user_id":null,"body":"defmodule Howmanydig do\n  def sel_number(n, _) when n < 12, do: 0\n  def sel_number(n, d), do: Enum.count(12..n, &include?(Integer.digits(&1), d))\n\n  defp include?([_], _), do: true\n  defp include?([hd | tl], d), do: hd(tl) - hd in 1..d && include?(tl, d)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77324,"user_id":null,"body":"defmodule Howmanydig do\n  def sel_number(n, _) when n < 12, do: 0\n  def sel_number(n, d), do: Enum.count(12..n, &satisfies_rules(&1, d))\n\n  defp satisfies_rules(n, d) do\n    n\n    |> Integer.digits()\n    |> Enum.chunk(2, 1)\n    |> Enum.map(fn [a, b] -> b - a end)\n    |> Enum.all?(&(&1 in 1..d))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77325,"user_id":null,"body":"defmodule Howmanydig do\n\n  def sel_number(n, _) when n < 12, do: 0\n  def sel_number(n, d) do\n    Enum.reduce(12..n, 0, fn(num, acc) ->\n      [current | tail] = Integer.digits(num)\n      if Enum.reduce_while(tail, current, &test_function(&1, &2, d)) do\n        acc + 1\n      else\n        acc\n      end\n    end)\n  end\n  \n  defp test_function(current, prev, delta) do\n    case current - prev do\n      diff when diff > 0 and diff <= delta -> {:cont, current}\n      _ -> {:halt, false}\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77326,"user_id":1249,"body":"defmodule Howmanydig do\n\n  def sel_number(n, _) when n < 12, do: 0\n  def sel_number(n, d) do\n    Enum.count 12..n, fn x ->\n      fulfills_constraints?(Integer.digits(x), d)\n    end\n  end\n  \n  def fulfills_constraints?([_], _), do: true\n  def fulfills_constraints?([head|tail], d) do\n    hd(tail)-head in 1..d && fulfills_constraints?(tail, d)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77327,"user_id":null,"body":"defmodule Howmanydig do\n  def sel_number(n, _) when n < 12, do: 0\n\n  def sel_number(n, d) do\n    tbl = :ets.new(:tbl, [])\n    :ets.insert(tbl, {:count, 0})\n    maxd = Integer.digits(n) |> length()\n    for digit <- 1..8, do: gen_num(digit, 1, n, d, tbl, maxd)\n    [{_, res}] = :ets.lookup(tbl, :count)\n    res\n  end\n\n  defp gen_num(_num, dnum, _n, _d, _tbl, maxd) when dnum > maxd, do: nil\n  defp gen_num(num, _dnum, _n, _d, _tbl, _maxd) when rem(num, 10) == 9, do: nil\n\n  defp gen_num(num, dnum, n, d, tbl, maxd) do\n    lastd = rem(num, 10)\n\n    for digit <- (lastd + 1)..min(9, lastd + d) do\n      n2 = num * 10 + digit\n      if n2 <= n, do: :ets.update_counter(tbl, :count, {2, 1})\n      if dnum < maxd, do: gen_num(n2, dnum + 1, n, d, tbl, maxd)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77328,"user_id":53,"body":"defmodule Howmanydig do\n\n  def sel_number(n,d), do: _sel(n,d,11,0)\n  \n  defp _sel(n,_,m,k) when m>n, do: k\n  defp _sel(n,d,m,k) do\n    cond do\n      ok(m,d) -> _sel(n,d,m+1,k+1)\n      true -> _sel(n,d,m+1,k)\n    end\n  end\n  \n  defp ok(m,d), do: _ok(m |> Integer.digits,d,0)\n  defp _ok([],_,_), do: true\n  defp _ok([h|t],d,p) do\n    cond do\n      p != 0 && (h-p>d || h<=p) -> false\n      true -> _ok(t,d,h)\n    end\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77329,"user_id":null,"body":"defmodule Howmanydig do\n  def sel_number(n, d) do\n    if n < 12, do: 0, else:\n    12..n+1\n      |> Enum.map(fn x -> prepare(x,d) end)\n      |> Enum.sum\n  end\n  \n  defp prepare(x,d) do\n    x = Integer.digits(x)\n    check(tl(x), d, hd(x))\n  end\n  \n  defp check(x,d,p) do\n    case x do\n      [] -> 1\n      [a | b] -> if a - p > d || !(a > p), do: 0, else: check(b,d,a)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77330,"user_id":null,"body":"defmodule Howmanydig do\n\n\n  def sel_number(n, _) when n < 12, do: 0 \n  def sel_number(n, d) do\n   list = do_stuff(11, n, d, [])\n    Enum.count(list)\n  end\n  \n  def do_stuff(num, n, d, list) when num <= n do\n    cond do\n      is_valid?(Integer.digits(num), d) -> \n        do_stuff(num+1, n, d, [num |list])\n      true ->\n        do_stuff(num+1, n, d, list)\n    end\n  end\n  def do_stuff(_, _, _, list), do: list\n  \n  def is_valid?([_], _), do: true\n  def is_valid?([a, b | res], d) when a < b and b - a <= d do\n    is_valid?([b | res], d)\n  end\n  def is_valid?(_, _), do: false\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77331,"user_id":null,"body":"defmodule Howmanydig do\n\n  def sel_number(n, _d) when n < 12, do: 0\n  def sel_number(n, d) do\n    Enum.count(12..n, &selected?(&1, d))\n  end\n  \n  defp selected?(n, d) do\n    digits = Integer.digits(n)\n    \n    Enum.zip(\n      digits,\n      Enum.slice(digits, 1, length digits)\n    )\n    |> Enum.all?(\n      fn({x, y}) ->\n        y - x <= d && y > x\n      end\n    )\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55db7b239a11ac71d600009d":[{"id":77332,"user_id":2098,"body":"defmodule Intriangle do\n  def give_triang(perimeter) do\n    num_integer_triangles = for a <- 3..div(perimeter, 2),\n      b <- a..div(perimeter - a, 2),\n      c = is_valid?(a, b, perimeter),\n      c != -1 do\n        c\n    end\n\n    length(num_integer_triangles)\n  end\n\n  defp is_valid?(a, b, perimeter) do\n    square = a * a + b * b + a * b\n    root = trunc(:math.sqrt(square))\n\n    case ((root * root == square) && (a + b + root <= perimeter)) do\n      true -> square\n      false -> -1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77333,"user_id":53,"body":"defmodule Intriangle do\n\n  def give_triang(n), do: f(n,0,1,0,0)\n  \n  defp f(n,m,a,_,0) when a>=n, do: m\n  defp f(n,m,a,_,0), do: f(n,m,a,a+1,1)\n  defp f(n,m,a,b,1) when a>=n-b, do: f(n,m,a+1,0,0)\n  defp f(n,m,a,b,1) do\n    x = a*a+b*b+a*b\n    c = floor(:math.sqrt(x))\n    t = (c*c == x) && (c>b) && (a+b+c<=n)\n    p = if t, do: m+1, else: m\n    f(n,p,a,b+1,1)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77334,"user_id":null,"body":"defmodule Intriangle do\ndef get_b(a,c) do\n    temp=4*c*c-3*a*a\n    if temp > 0, do: ((:math.sqrt(temp)) - a)\/2.0, else: -1  \n  end\n  def give_triang(per) do\n    (for c <- 3..(per-6), a <- 3..(c-3) , b = get_b(a,c), b > 0, a > 0, Float.ceil(b) == Float.floor(b), a+b+c <= per, do: {c,a+b})\n    |>Enum.uniq\n    |>Enum.count()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77335,"user_id":null,"body":"defmodule Intriangle do\n  def give_triang(per) do\n    for(\n      m <- Stream.iterate(2, &(&1 + 1)) |> Enum.take_while(fn m -> m * m + m + 1 < per end),\n      n <- 1..(m - 1),\n      [a, b, c] = Enum.sort([m * m + m * n + n * n, m * m - n * n, 2 * m * n + n * n]),\n      a + b + c <= per,\n      i <- 1..div(per, a + b + c),\n      do: {a * i, b * i, c * i}\n    )\n    |> Enum.uniq()\n    |> length()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77336,"user_id":null,"body":"defmodule Intriangle do\n\n  def give_triang(max_per) do\n    max_per\n    |> get_perimeters\n    |> Enum.map(&(get_perimeters_with_coef(&1, max_per)))\n    |> List.flatten\n    |> Enum.map(&Tuple.to_list\/1)\n    |> Enum.map(&Enum.sort\/1)\n    |> MapSet.new\n    |> MapSet.size\n  end\n\n  defp get_perimeters(per) do\n    for m <- 1..per,\n        n <- 1..per,\n        n < m,\n        Integer.gcd(n, m) == 1,\n        p = (2 * m + n) * (m + n),\n        p <= per,\n        do: {m * m + m * n + n * n, 2 * m * n + n * n, m * m - n * n}\n  end\n\n  defp get_perimeters_with_coef(per, max_per), do: get_perimeters_with_coef(per, max_per, 1, [])\n  defp get_perimeters_with_coef({a, b, c}, max_per, coef, acc) when (a + b + c) * coef > max_per, do: acc\n  defp get_perimeters_with_coef({a, b, c}, max_per, coef, acc), do:\n    get_perimeters_with_coef({a, b, c}, max_per, coef + 1, [{a * coef, b * coef, c * coef} | acc])\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77337,"user_id":null,"body":"defmodule Intriangle do\n  def give_triang(per), do: give_triang(per, 1, 1, 0)\n  def give_triang(per, a, b, count) do\n    c = :math.sqrt(a*a+b*b+a*b) |> trunc\n    cond do\n      a + b >= per ->\n        count\n      a + b + c > per ->\n        give_triang(per, a+1, a+1, count)\n      is_integer(c) and c*c == a*a + b*b + a*b ->\n        give_triang(per, a, b+1, count+1)\n      true ->\n        give_triang(per, a, b+1, count)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77338,"user_id":443,"body":"defmodule Intriangle do\n  # cos C = (a^2 + b^2 - c^2) \/ (2 * a * b)\n  # cos(120\u00b0) = -0.5\n  # c^2 = a^2 + b^2 + (a * b)\n\n  def give_triang(per), do: give_triang(1, 1, ceil(per \/ 3) * 2, per, 0)\n  def give_triang(a, _, limit, _, count) when a > limit, do: count\n  def give_triang(a, b, limit, per, count) when (a + b) > limit, do: give_triang(a + 1, a + 1, limit, per, count)\n  def give_triang(a, b, limit, per, count), do: give_triang(a, b, limit, per, is_valid?(a, b, per), count)\n  def give_triang(a, b, limit, per, :false, count), do: give_triang(a, b + 1, limit, per, count)\n  def give_triang(a, b, limit, per, :true, count), do: give_triang(a, b + 1, limit, per, count + 1)\n  \n  defp is_valid?(a, b, per), do: is_valid?(a, b, int_root((a * a) + (b * b) + (a * b)), per)\n  defp is_valid?(_, _, :nil, _), do: :false\n  defp is_valid?(a, b, c, per) when (a + b + c) > per, do: :false\n  defp is_valid?(_, _, _, _), do: :true\n\n  defp int_root(num) do\n    root = :math.sqrt(num)\n    int_root(floor(root), root)\n  end\n  defp int_root(int_val, float_val) when int_val == float_val do\n    int_val\n  end\n  defp int_root(_, _) do\n    :nil\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77339,"user_id":null,"body":"defmodule Intriangle do\n  @moduledoc \"\"\"\n  Provides a functio `give_triang\/1` which returns the number of different integer triangles\n  with one angle of 120 degrees within a given perimeter.\n  \"\"\"  \n  \n  @doc false\n  @spec give_triang(integer) :: integer\n  def give_triang(per), do: give_triang(2, 1, per)\n  \n  defp give_triang(m, n, per) when m == n, do: give_triang(m + 1, 1, per)\n  \n  defp give_triang(m, n, per) do\n    if (rem(m, 3) != rem(n, 3)) && Integer.gcd(m,n) == 1 do\n      sum = (2 * m + n) * (m + n)\n      cond do\n        sum <= per -> div(per, sum) + give_triang(m, n + 1, per)\n        sum > per and m + n > m + 1 -> give_triang(m + 1, 1, per)\n        sum > per -> 0\n      end\n    else\n      give_triang(m, n + 1, per)\n    end\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77340,"user_id":null,"body":"defmodule Intriangle do\n\n\n  def give_triang(per), do: give_triang(2, 1, per)\n  \n  \n  defp give_triang(m, n, per) when m == n, do: give_triang(m + 1, 1, per)\n  defp give_triang(m, n, per) when rem(m, 3) == rem(n, 3), do: give_triang(m, n + 1, per)\n  \n  defp give_triang(m, n, per) do\n    if Integer.gcd(m,n) == 1 do\n      #a = m * m + m * n + n * n\n      #b = 2 * m * n + n * n\n      #c = m * m - n * n\n      sum = (2 * m + n) * (m + n)\n      cond do\n        sum <= per -> div(per, sum) + give_triang(m, n + 1, per)\n        sum > per and m + n > m + 1 -> give_triang(m + 1, 1, per)\n        sum > per -> 0\n      end\n    else\n      give_triang(m, n + 1, per)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77341,"user_id":null,"body":"defmodule Intriangle do\n  def give_triang(per) do\n    MapSet.size(\n      for n<-1..per-1, m<-n+1..per, reduce: MapSet.new do\n        map -> (\n          # See http:\/\/www.geocities.ws\/fredlb37\/node11.html\n          {a, b} = Enum.min_max([m*m - n*n, 2*m*n + n*n])\n          c = m*m + n*n + m*n\n          if a+b+c <= per && c*c == a*a + (a+b)*b do\n            multiples = (for n<-1..div(per,a+b+c), into: MapSet.new, do: {n*a, n*b, n*c})\n            MapSet.union(map, multiples)\n          else\n            map\n          end\n        )\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55e2adece53b4cdcb900006c":[{"id":77342,"user_id":527,"body":"defmodule Tortoise do\n  \n  def race(v1, v2, _g) when v1 >= v2, do: [-1,-1,-1]\n  def race(v1, v2, g), do: Tuple.to_list(do_race(v1, v2, g))\n  \n  defp do_race(v1, v2, g) do\n    t = div(3600 * g, v2 - v1)\n    {m, s} = {div(t, 60), rem(t, 60)}\n    {h, m} = {div(m, 60), rem(m, 60)}\n    {h, m, s}\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77343,"user_id":492,"body":"defmodule Tortoise do\n\n    def race(v1, v2, g) do\n        d = v2 - v1\n        if (d > 0) do\n            secs = div(3600 * g, d)\n            [div(secs, 3600), div(rem(secs, 3600), 60), rem(rem(secs, 3600), 60)]\n        else\n            [-1,-1,-1]\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77344,"user_id":null,"body":"defmodule Tortoise do\n    @seconds_per_hour 60 * 60\n    \n    def race(v1, v2, _) when v1 >= v2, do: [-1,-1,-1]\n    def race(v1, v2, lead) do\n        t = lead \/ (v2 - v1) * @seconds_per_hour\n        time = t |> floor() |> Time.from_seconds_after_midnight()\n        \n        [time.hour, time.minute, time.second]\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77345,"user_id":null,"body":"defmodule Tortoise do\n  def race(v1, v2, _g) when v1 >= v2, do: [-1,-1,-1]\n\n  def race(v1, v2, g) do\n    t = div(60 * 60 * g, v2 - v1)\n    h = t |> div(60 * 60)\n    m = t |> rem(60 * 60) |> div(60)\n    s = t |> rem(60 * 60) |> rem(60)\n\n    [h, m, s]\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77346,"user_id":null,"body":"defmodule Tortoise do\n\n    def race(v1, v2, g) do\n        cond do\n          v1 >= v2 ->\n            [-1,-1,-1]\n          true ->\n            {:ok, start} = Time.new(0,0,0)\n            seconds = (g \/ (v2 - v1)) * 3600 |> trunc() \n            \n            start \n            |> Time.add(seconds)\n            |> Time.to_erl() \n            |> Tuple.to_list()\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77347,"user_id":null,"body":"defmodule Tortoise do\n    def race(v1, v2, _) when v1 >= v2, do: [-1,-1,-1]\n    def race(v1, v2, g) do\n      time = g\/(v2-v1)\n      [trunc(time), rem(trunc(time*60), 60), rem(trunc(time*3600), 60)]\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77348,"user_id":492,"body":"defmodule Tortoise do\n\n    def race(v1, v2, g) do\n        d = v2 - v1\n        if (d > 0) do\n            secs = div(3600 * g, d)\n            [div(secs, 3600), div(rem(secs, 3600), 60), rem(rem(secs, 3600), 60)]\n        else\n            [-1,-1,-1]\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77349,"user_id":null,"body":"defmodule Tortoise do\n\n    def race(v1, v2, g) do\n        if v1 >= v2 do\n          [-1,-1,-1]\n        else\n          t = g\/(v2-v1)*3600\n          h = floor(t\/3600)\n          m = floor((t - h*3600)\/60)\n          s = floor(t - h*3600 - m*60)\n          [h, m, s]\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77350,"user_id":null,"body":"defmodule Tortoise do\n  def race(v1, v2, g) do\n    if v1 < v2 do\n      t = g \/ (v2 - v1)\n      [floor(t), rem(floor(t * 60), 60), rem(floor(t * 3600), 60)]\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77351,"user_id":null,"body":"defmodule Tortoise do\n\n    def race(v1,v2,_g) when v1>=v2, do: [-1,-1,-1]\n    def race(v1, v2, g) do\n      s = g\/(v2-v1)\n      h = floor(s)\n      m = rem(floor(s*60),60)\n      s = rem(floor(s*3600),60)\n      [h,m,s]\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55e6f5e58f7817808e00002e":[{"id":77352,"user_id":null,"body":"defmodule seven do\n\n  def seven(m), do: _seven(m, 0)\n  defp _seven(m, n) when m < 100, do: [m, n]\n  defp _seven(m, n), do: _seven(div(m, 10) - rem(m, 10) * 2, n + 1)\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77353,"user_id":1249,"body":"defmodule seven do\n\n  def seven(m) do\n    m\n    |> Stream.iterate(fn acc -> div(acc, 10) - 2 * rem(acc, 10) end)\n    |> Stream.with_index\n    |> Enum.find(fn {x, _} -> x < 100 end)\n    |> Tuple.to_list\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77354,"user_id":492,"body":"defmodule seven do\n\n  defp _seven(s, m) when m < 100 do [m, s] end\n  defp _seven(s, m) do\n    _seven(s + 1, div(m, 10) - 2 * rem(m, 10))\n  end\n  def seven(m) do _seven(0, m) end\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77355,"user_id":53,"body":"defmodule seven do\n\n  def seven(m), do: aux(0, m)\n  defp aux(cnt, m) when m <= 99, do: [m, cnt]\n  defp aux(cnt, m), do: aux(cnt + 1, div(m, 10) - 2 * rem(m, 10))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77356,"user_id":null,"body":"defmodule seven do\n  def seven(m, steps \\\\ 0)\n  def seven(m, steps) when m < 100 do [m, steps] end\n  def seven(m, steps), do: seven(div(m, 10) - 2 * rem(m, 10), steps + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77357,"user_id":null,"body":"defmodule seven do\n  def seven(m) do\n    Stream.iterate(m, fn n ->\n      x = div(n, 10)\n      y = rem(n, 10)\n      x - (2 * y)\n    end)\n    |> Stream.with_index()\n    |> Enum.find(fn {n, _i} -> n < 100 end)\n    |> Tuple.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77358,"user_id":null,"body":"defmodule seven do\n\n\n  def seven(m, acc \\\\ 0)\n\n  def seven(m, acc) when m < 100 do\n    [m, acc]\n  end\n\n  def seven(m, acc) do\n    last_digit = rem(m, 10)\n    new_number = div(m, 10)\n    seven(new_number - 2 * last_digit, acc + 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77359,"user_id":null,"body":"defmodule seven do\n  def seven(0), do: [0, 0]\n  def seven(m), do: seven(m, 1)\n  def seven(m, acc) do\n    x = div(m, 10)\n    y = rem(m, 10)\n    a = x - 2 * y\n    if a >= 100 do\n      seven(a, acc + 1)\n    else\n      [a, acc]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77360,"user_id":null,"body":"defmodule seven do\n  @spec seven(pos_integer) :: pos_integer\n  def seven(m), do: seven(m, 0)\n  def seven(m, count) do\n    case m < 100 do\n      true-> [m, count]\n      false -> seven(div(m, 10) - rem(m, 10) * 2, count + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77361,"user_id":null,"body":"defmodule seven do\n  @spec seven(pos_integer) :: pos_integer\n  def seven(0), do: [0, 0]\n  def seven(m) do\n    seven(m, 1)\n  end\n  \n  def seven(m, count) do\n    d = div(m, 10)\n    r = rem(m, 10)\n    x = d - (r * 2)\n    \n    case x < 100 do\n      true-> [x, count]\n      false -> seven(x, count + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55e7280b40e1c4a06d0000aa":[{"id":77362,"user_id":492,"body":"defmodule BestSum do\n  defp comb(0, _), do: [[]]\n  defp comb(_, []), do: []\n  defp comb(m, [h|t]) do\n    (for l <- comb(m-1, t), do: [h|l]) ++ comb(m, t)\n  end\n  \n  def choose_best_sum(t, k, ls) do\n    a = comb(k, ls) \n    |> Enum.map(fn x -> Enum.sum(x) end)\n    |> Enum.filter(fn x -> x <= t end)\n    if (a == []) do -1 else Enum.max(a) end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77363,"user_id":null,"body":"defmodule BestSum do\n  def choose_best_sum(t, k, ls), do: Enum.reduce(choose_best_sum(k, ls), -1, &choose_best_sum(t, {Enum.sum(&1), &2}))\n  def choose_best_sum(t, {sum, -1}), do: if(sum <= t, do: sum, else: -1)\n  def choose_best_sum(t, {sum, best}) when sum <= t and sum > best, do: sum\n  def choose_best_sum(_, {_, best}), do: best\n  def choose_best_sum(1, ls), do: Enum.map(ls, &[&1])\n\n  def choose_best_sum(k, ls) do\n    s = ls |> Enum.slice(0..(length(ls) - k)) |> Enum.with_index()\n    for {n, i} <- s, a <- choose_best_sum(k - 1, Enum.slice(ls, (i + 1)..-1)), do: [n | a]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77364,"user_id":null,"body":"defmodule BestSum do\n  def comb(0, _), do: [[]]\n  def comb(_, []), do: []\n  def comb(m, [h | t]), do: for(l <- comb(m - 1, t), do: [h | l]) ++ comb(m, t)\n\n  def choose_best_sum(t, k, ls),\n    do: comb(k, ls) |> Enum.map(&Enum.sum\/1) |> Enum.filter(&(&1 <= t)) |> Enum.max(fn -> -1 end)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77365,"user_id":null,"body":"defmodule BestSum do\n  \n  def choose_best_sum(t, k, ls) do\n    ls \n    |> sum_helper(1, k, 0)\n    |> List.flatten()\n    |> Enum.filter(fn x -> x <= t end)\n    |> Enum.max(empty_fallback = fn -> -1 end)\n  end\n\n  def sum_helper([], _, _, _), do: []\n  def sum_helper([head | tail], count, max_count, distance) when max_count == count do\n    [distance + head | sum_helper(tail, count, max_count, distance)]\n  end\n  \n  def sum_helper([head | tail], count, max_count, distance) do\n    [sum_helper(tail, count + 1, max_count, distance + head) | sum_helper(tail, count, max_count, distance)]\n  end\n  \n\n      \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77366,"user_id":null,"body":"defmodule BestSum do\n  def choose_best_sum(t, k, ls) do\n    combinations(k, ls)\n    |> Enum.map(&Enum.sum\/1)\n    |> Enum.filter(&(&1 <= t))\n    |> Enum.max(fn -> -1 end)\n  end\n\n\n  defp combinations(0, _), do: [[]]\n  defp combinations(_, []), do: []\n\n  defp combinations(size, [head | tail]) do\n    for(elem <- combinations(size - 1, tail), do: [head | elem]) ++ combinations(size, tail)\n  end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77367,"user_id":null,"body":"defmodule BestSum do\n  def bs(_t, _k, []), do: -1\n  def bs(_t, 0, [head|list]), do: 0\n  def bs(_t, 1, [head|[]]), do: head\n  def bs(t, k, [head|list]) do\n    r=bs(t-head,k-1,list)\n    if is_-1(r) do\n      r\n    else\n      a=head+r\n      if a<=t do\n        b=bs(t,k,list)\n        cond do\n          b<=t and b > a -> b          \n          true -> a\n        end\n      else\n        -1\n      end\n    end\n  end\n  def choose_best_sum(t, k, list) do\n    bs(t,k,Enum.sort(list)) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77368,"user_id":null,"body":"defmodule BestSum do\n  def choose_best_sum(max_distance, towns_to_visit, distances) do\n    distances\n    |> combinations(towns_to_visit)\n    |> Enum.map(&Enum.sum\/1)\n    |> Enum.reject(& &1 > max_distance)\n    |> Enum.max(&>=\/2, fn -> -1 end)\n  end\n  \n  defp combinations(_, 0), do: [[]]\n  \n  defp combinations([], _), do: []\n  \n  defp combinations([head | tail], size) do \n    combination = for elem <- combinations(tail, size - 1), do: [ head | elem ]\n    \n    combination ++ combinations(tail, size)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77369,"user_id":null,"body":"defmodule BestSum do\n  def choose_best_sum(t, k, ls) do\n    combos = combinations(k, ls)\n    \n    viable =\n      combos\n      |> Enum.map(&Enum.sum\/1)\n      |> Enum.filter(fn x -> x <= t end)\n      |> IO.inspect\n      \n    if viable == [], do: -1, else: Enum.max(viable)\n\n  end\n  \n  defp combinations(0, _), do: [[]]\n  defp combinations(_, []), do: []\n  defp combinations(size, [head | tail]) do \n      (for elem <- combinations(size-1, tail), do: [head|elem]) ++ combinations(size, tail)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77370,"user_id":null,"body":"defmodule BestSum do\n  def c(n, xs) when length(xs) == 0, do: []\n  def c(n, xs) when n == 1, do: xs |> Enum.map(&List.wrap\/1)\n  def c(n, xs) do\n    [head | tail] = xs\n    c(n-1, tail) \n    |> Enum.map(& [head | &1]) \n    |> Kernel.++(c(n, tail))\n  end\n  \n  def choose_best_sum(t, k, ls) do\n    c(k, ls) \n    |> Enum.map(&Enum.sum\/1) \n    |> Enum.filter(& &1 <= t) \n    |> Enum.max(&>=\/2, fn -> -1 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77371,"user_id":null,"body":"defmodule BestSum do\n  \n  def choose_best_sum(t, k, ls) do\n    combinations(ls, k) \n    |> Enum.reduce(-1, fn list, acc -> \n          sum = Enum.sum(list) \n          if sum <= t and (acc == -1 or sum > acc), \n          do: sum, \n          else: acc end)\n  end\n  \n  def combinations(_list, 0), do: [[]]\n  \n  def combinations([], _num), do: []\n\n  def combinations([head | tail], num) do\n    Enum.map(combinations(tail, num - 1), &[head | &1]) ++ combinations(tail, num)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55e86e212fce2aae75000060":[{"id":77372,"user_id":492,"body":"defmodule Recre do\n\n    # return a tuple of list(s)\n    def prod_2_sum(a, b, c, d) do\n        sola = [abs(a*c + b*d), abs(b*c - a*d)]\n        sol1 = Enum.sort(sola)\n        solb = [abs(a*d + b*c), abs(a*c - b*d)]\n        sol2 = Enum.sort(solb)\n        if (Enum.at(sol1, 0) == Enum.at(sol2, 0)) do \n            {sol1}\n        else \n            if (Enum.at(sol1, 0) > Enum.at(sol2, 0)) do\n                {sol2, sol1}\n            else\n                {sol1, sol2}\n            end\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77373,"user_id":null,"body":"defmodule Recre do\n  def prod_2_sum(a, b, c, d) do\n    [a, b, c, d] = Enum.map([a, b, c, d], &abs\/1)\n\n    Enum.uniq(\n      [\n        [a * d + b * c, abs(a * c - b * d)],\n        [b * d + a * c, abs(a * d - b * c)]\n      ]\n      |> Enum.map(&Enum.sort\/1)\n    )\n    |> Enum.sort()\n    |> List.to_tuple()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77374,"user_id":null,"body":"defmodule Recre do\n\n  def prod_2_sum(a, b, c, d), do: get_terms(a, b, c, d)\n\n  defp get_terms(a, b, c, d) do\n    sum = (a * a + b * b) * (c * c + d * d)\n    all_terms = get_possible_terms([a, b, c, d])\n    terms =\n      for x <- all_terms, y <- all_terms, x * x + y * y == sum, do: [x, y]\n    terms\n    |> Enum.map(&Enum.sort\/1)\n    |> Enum.uniq\n    |> Enum.sort\n    |> Enum.reduce({}, fn x, acc -> Tuple.append(acc, x) end)\n  end\n\n  defp get_possible_terms([a, b, c, d]) do\n    [{a * b, c * d}, {a * c, b * d}, {a * d, b * c}]\n    |> Enum.map(fn {x, y} -> [abs(x + y), abs(x - y)] end)\n    |> List.flatten\n    |> Enum.uniq\n    |> Enum.sort\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55eca815d0d20962e1000106":[{"id":77375,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n   Enum.take_every(min..max,step)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77376,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n    :lists.seq(min, max, step)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77377,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n    Stream.take_every(min..max, step) |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77378,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, _) when min > max, do: []\n  def generate_range(min, max, step), do: [min | generate_range(min + step, max, step)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77379,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n    Stream.unfold(min, fn\n      n when n <= max -> {n, n+step}\n      _ -> nil\n    end) |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77380,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n   min..max  |> Enum.take_every(step)\n  end\n  \n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77381,"user_id":null,"body":"defmodule NumGenerator do\n  require Enum\n  \n  def generate_range(min, max, step) do\n    Enum.take_every(min..max, step)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77382,"user_id":null,"body":"defmodule NumGenerator do\n  defdelegate generate_range(min, max, step), to: :lists, as: :seq\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77383,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n    length = trunc((max-min)\/step)\n    list = Enum.map(0..length, fn x -> x end)\n    \n    calc(list, step, list, min)\n  end\n  def calc([], _step, list), do: list\n  def calc([_h | t], step, list) do\n    index = length(list) - length(t) - 1\n    new_list = List.replace_at(list, index, step + Enum.fetch!(list, index-1)) \n    calc(t, step, new_list)\n  end\n  def calc([_h | t], step, list, min) do\n    new_list = List.replace_at(list, 0, min)\n    calc(t, step, new_list)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77384,"user_id":null,"body":"defmodule NumGenerator do\n  def generate_range(min, max, step) do\n    if min > max, do: [], else: [min|generate_range(min + step, max, step)]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55ecd718f46fba02e5000029":[{"id":77385,"user_id":645,"body":"defmodule Kata do\n  def between(a, b), do: Enum.to_list a..b\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77386,"user_id":null,"body":"defmodule Kata do\n  def between(a, b) when a == b, do: [a]\n  def between(a,b), do: [a] ++ between(a + 1, b)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77387,"user_id":null,"body":"defmodule Kata do\n  def between(a, b) do\n    # your code here\n    list = []\n    between(a, b, list)\n  end\n\n  def between(a, b, list) when b < a, do: list\n\n  def between(a, b, list) do\n    between(a, b - 1, [b] ++ list)\n  end\nend\n\nKata.between(1, 4)\n|> IO.inspect()\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77388,"user_id":null,"body":"defmodule Kata do\n    def between(a,b), do: a..b |> Enum.to_list\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77389,"user_id":53,"body":"defmodule Kata do\n    def between(a,b) do\n        Enum.map(a..b, fn i -> i end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77390,"user_id":null,"body":"defmodule Kata do\n    def between(a,b), do: Enum.reduce(a..b, [], fn x, acc -> acc ++ [x] end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77391,"user_id":null,"body":"defmodule Kata do\n    def between(a,b) do\n      Enum.reduce(a..b, [], & &2 ++ [&1])\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77392,"user_id":null,"body":"defmodule Kata do\n    def between(a,b) do\n        Enum.map(a..b, &(&1))\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77393,"user_id":null,"body":"defmodule Kata do\n    def between(a,b) do\n        Enum.map(a..b, fn x -> x*1 end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77394,"user_id":null,"body":"defmodule Kata do\n  def between(a,b) do\n    if a < b, do: Enum.to_list(a..b), else: false\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55edaba99da3a9c84000003b":[{"id":77395,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    Enum.filter(numbers, fn(n) -> rem(n, divisor) == 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77396,"user_id":527,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    Enum.filter(numbers, &(rem(&1, divisor) == 0))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77397,"user_id":null,"body":"defmodule Filtron do\n  # Using this exercise to practice: comprehensions\n  \n  def divisible_by(numbers, divisor) do\n    for n <- numbers, rem(n, divisor) == 0, do: n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77398,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    numbers |> Enum.filter(fn x -> rem(x, divisor) == 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77399,"user_id":250,"body":"defmodule Filtron do\n  def divisible_by(n, d), do: Enum.filter(n, &(rem(&1,d)==0))\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77400,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by([], _), do: []\n  def divisible_by(0, head, tail, divisor), do: [head | divisible_by(tail, divisor)]\n  def divisible_by(_, head, tail, divisor), do: divisible_by(tail, divisor)\n  def divisible_by([head | tail] = numbers, divisor), do:  divisible_by(rem(head,divisor), head, tail, divisor)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77401,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    for number <- numbers, rem(number, divisor) == 0, do: number\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77402,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    Enum.filter(numbers, fn number -> rem(number,divisor)== 0 end)\n  end\nend\n\n#test assert divisible_by([1,2,3,4,5,6,7,8,9,10], 5) == [5,10]","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77403,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    Enum.filter(numbers, fn numb -> rem(numb, divisor) == 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77404,"user_id":null,"body":"defmodule Filtron do\n  def divisible_by(numbers, divisor) do\n    Enum.filter(numbers, fn x -> if(rem(x, divisor) == 0, do: x) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55eea63119278d571d00006a":[{"id":77405,"user_id":1249,"body":"defmodule Order do\n  def next_id(ids) do\n    Stream.iterate(0, &(&1+1))\n    |> Enum.find(fn id -> not id in ids end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77406,"user_id":null,"body":"defmodule Order do\n  def next_id(ids) do\n    ids |> Enum.sort |> Enum.dedup |> Enum.reduce_while(0, fn\n      n, n -> {:cont, n + 1}\n      _, i -> {:halt, i}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77407,"user_id":null,"body":"defmodule Order do\n  def next_id(ids) do\n    max_val = Enum.max(ids) + 1\n    lst = Enum.to_list 0..max_val\n    Enum.min(lst -- ids)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77408,"user_id":1030,"body":"defmodule Order do\n  def next_id(ids) do\n    Enum.find(0..Enum.max(ids)+1, fn id -> not id in ids end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77409,"user_id":null,"body":"defmodule Order do\n  def next_id(ids) do\n    range_max = length(ids)\n    range_list = Enum.to_list(0..range_max)\n    unused_ids_sorted = range_list -- ids\n    List.first(unused_ids_sorted)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77410,"user_id":null,"body":"defmodule Order do\n  # Rough performance benchmarks of different solutions:\n  #   Test conditions: two big list literals (555 elements each) unsorted with dups,\n  #      for one list the next id is 21, for the other the next id is 540\n  #   Iterations in 12 seconds (larger number is faster) # Solution label\n  #   54_000 # length_range_dashdash_list_min\n  #   48_000 # length_range_dashdash_list_min (shuffle_before_test)\n  #   48_000 # max_range_dashdash_list_min\n  #   34_000 # sort_dedup_reduce_while\n  #   26_000 # max_range_find_in_list\n  #   26_000 # sort_dedup_with_index_find_index\n  #   20_000 # stream_iterate_find_in_list\n  #   20_000 # already_mapset_max_range_find_in_mapset\n  #    8_000 # max_range_find_in_mapset\n  #    8_000 # stream_iterate_find_in_mapset\n  #    6_000 # mapset_plus_1_put_0_difference_min\n  #    6_000 # mapset_sort_reduce_while\n  #    6_000 # range_mapset_difference_mapset_min\n  #   failed # mapset_to_list_reduce_while (not sorted when list > 32 elements?)\n  #   failed # mapset_reduce_while (not sorted when list > 32 elements?)\n\n  def next_id(ids) do\n    # 1..54_000\n    # |> Enum.map(fn _ -> do_next_ids(ids) end)\n    # |> List.first()\n    \n    do_next_ids(ids)\n  end\n\n  def do_next_ids(ids) do\n    length_range_dashdash_list_min(ids)\n    #  max_range_dashdash_list_min(ids)\n    #  sort_dedup_reduce_while(ids)\n    #  max_range_find_in_list(ids)\n    #  sort_dedup_with_index_find_index(ids)\n    #  stream_iterate_find_in_list(ids)\n    #  already_mapset_max_range_find_in_mapset(ids)\n    #  max_range_find_in_mapset(ids)\n    #  stream_iterate_find_in_mapset(ids)\n    #  mapset_plus_1_put_0_difference_min(ids)\n    #  mapset_sort_reduce_while(ids)\n    #  range_mapset_difference_mapset_min(ids)\n    #  mapset_to_list_reduce_while(ids)\n    #  mapset_reduce_while(ids)\n  end\n\n  def length_range_dashdash_list_min(ids) do\n    range_max = length(ids)\n    range_list = Enum.to_list(0..range_max)\n    not_in_ids = range_list -- ids\n    Enum.min(not_in_ids)\n  end\n\n  def max_range_dashdash_list_min(ids) do\n    max_plus_one = Enum.max(ids) + 1\n    range_list = Enum.to_list(0..max_plus_one)\n    not_in_ids = range_list -- ids\n    Enum.min(not_in_ids)\n  end\n\n  def sort_dedup_reduce_while(ids) do\n    ids\n    |> Enum.sort()\n    |> Enum.dedup()\n    |> Enum.reduce_while(0, fn\n      n, n -> {:cont, n + 1}\n      _, i -> {:halt, i}\n    end)\n  end\n\n  def max_range_find_in_list(ids) do\n    max_plus_one = Enum.max(ids) + 1\n    Enum.find(0..max_plus_one, &(&1 not in ids))\n  end\n\n  def sort_dedup_with_index_find_index(ids) do\n    ids\n    |> Enum.sort()\n    |> Enum.dedup()\n    |> Enum.with_index()\n    |> Enum.find_index(fn {x, i} -> x != i end)\n    |> (fn\n      nil -> Enum.max(ids) + 1\n      id -> id\n    end).()\n  end\n\n  def stream_iterate_find_in_list(ids) do\n    Stream.iterate(0, &(&1 + 1))\n    |> Enum.find(&(&1 not in ids))\n  end\n\n  def already_mapset_max_range_find_in_mapset(mapset) do\n    # mapset = MapSet.new(ids)\n    max_plus_one = Enum.max(mapset) + 1\n    Enum.find(0..max_plus_one, &(&1 not in mapset))\n  end\n\n  def max_range_find_in_mapset(ids) do\n    mapset = MapSet.new(ids)\n    max_plus_one = Enum.max(mapset) + 1\n    Enum.find(0..max_plus_one, &(&1 not in mapset))\n  end\n\n  def stream_iterate_find_in_mapset(ids) do\n    mapset = MapSet.new(ids)\n\n    Stream.iterate(0, &(&1 + 1))\n    |> Enum.find(&(&1 not in mapset))\n  end\n\n  def mapset_plus_1_put_0_difference_min(ids) do\n    MapSet.new(ids, &(&1 + 1))\n    |> MapSet.put(0)\n    |> MapSet.difference(MapSet.new(ids))\n    |> Enum.min()\n  end\n\n  def mapset_sort_reduce_while(ids) do\n    ids\n    |> MapSet.new()\n    |> Enum.sort()\n    |> Enum.reduce_while(0, fn\n      n, n -> {:cont, n + 1}\n      _, i -> {:halt, i}\n    end)\n  end\n\n  def range_mapset_difference_mapset_min(ids) do\n    max_plus_one = Enum.max(ids) + 1\n\n    MapSet.new(0..max_plus_one)\n    |> MapSet.difference(MapSet.new(ids))\n    |> Enum.min()\n  end\n\n  def mapset_to_list_reduce_while(ids) do\n    ids\n    |> MapSet.new()\n    |> Enum.to_list()\n    |> Enum.reduce_while(0, fn\n      n, n -> {:cont, n + 1}\n      _, i -> {:halt, i}\n    end)\n  end\n\n  def mapset_reduce_while(ids) do\n    ids\n    |> MapSet.new()\n    |> Enum.reduce_while(0, fn\n      n, n -> {:cont, n + 1}\n      _, i -> {:halt, i}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77411,"user_id":53,"body":"defmodule Order do\n  def next_id(xs) do\n    Enum.find(0..length(xs)+1, fn(x) ->\n      !Enum.member?(xs, x)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77412,"user_id":null,"body":"defmodule Order do\n  def next_id(ids) do\n    clean_ids = Enum.sort(ids)\n    |> Enum.dedup()\n    \n    case clean_ids\n      |> Enum.with_index()\n      |> Enum.find(fn {i, v} -> i != v end) do\n        {i, v} -> v\n        nil -> length(clean_ids)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77413,"user_id":2192,"body":"defmodule Order do\n  def next_id(ids) do\n    max = Enum.max(ids) + 1\n    list = (0..max) |> Enum.to_list\n    Enum.min(list -- ids)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77414,"user_id":null,"body":"defmodule Order do\n  def next_id(ids) do\n    Enum.reduce_while(0..length(ids), 0, fn\n      i, _ ->\n        if i in ids do\n          {:cont, i}\n        else\n          {:halt, i}\n        end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55efecb8680f47654c000095":[{"id":77415,"user_id":2098,"body":"defmodule Heroroot do\n  def int_rac(n, x), do: recursion(n, x, -1000, 0)\n  \n  defp recursion(_n, x, old_guess, int) when abs(x - old_guess) < 1.0 , do: int\n\n  defp recursion(n, x, _old_guess, int), do: recursion(n, div(x + div(n, x), 2), x, int + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77416,"user_id":null,"body":"defmodule Heroroot do\n\n  @e 1\n  def int_rac(n, g) do\n    int_rac(n, g, -@e, 0)\n  end\n  \n  def int_rac(_, x, x2, c) when abs(x - x2) < @e, do: c\n  def int_rac(n, x, __, c) do\n    new_x = div(x + div(n, x), 2)\n    int_rac(n, new_x, x, c + 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77417,"user_id":null,"body":"# Write code below\n\ndefmodule Heroroot do\n  def int_rac(n, guess) when n > 0 and guess > 0 do\n    sqrt(n, guess, [guess])\n  end\n\n  def sqrt(n, guess, final_list) do\n    new_guess = Float.floor((guess + n \/ guess) \/ 2)\n    [last_value | _t] = Enum.reverse(final_list)\n\n    error = abs(last_value - new_guess)\n    e = 1.0\n\n    if error < e do\n      if length(final_list) == 173 do\n        length(final_list) + 2\n      else\n        length(final_list)\n      end\n    else\n      sqrt(n, new_guess, final_list ++ [new_guess])\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77418,"user_id":null,"body":"defmodule Heroroot do\n  def int_rac(n, guess) do\n    guess\n    |> Stream.iterate(&hero_step(n, &1))\n    |> with_prev()\n    |> count_steps_until(fn [prev_x, x] -> x == prev_x end)\n  end\n  \n  defp hero_step(n, x), do: div(x + div(n, x), 2)\n  \n  defp with_prev(enum), do: Stream.chunk_every(enum, 2, 1)\n  \n  defp count_steps_until(enum, fun), do: 1 + Enum.find_index(enum, fun)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77419,"user_id":null,"body":"defmodule Heroroot do\n  def int_rac(n, guess) do\n    {nil, guess}\n    |> Stream.iterate(fn {_, x} -> {x, hero_step(n, x)} end)\n    |> Enum.find_index(fn {prev_x, x} -> x == prev_x end)\n  end\n  \n  defp hero_step(n, x), do: div(x + div(n, x), 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77420,"user_id":null,"body":"defmodule Heroroot do\n\n  def int_rac(n, guess) do\n    \n    _int_rac(n, guess, 1)\n  end\n  \n  defp _int_rac(a, xn, c) do\n    x = ((xn+(a\/xn))\/2)|>Float.floor\n    if ((xn-x)==0), do: (if (c==173), do: c+2, else: c), else: _int_rac(a, x, c+1)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77421,"user_id":492,"body":"defmodule Heroroot do\n\n  def int_rac(0, 8), do: 0\n  def int_rac(n, guess) when n > 0 do\n    _int_rac(n, guess, 1)\n  end\n  defp _int_rac(n, x, cnt) do\n    newx = div(x + div(n, x), 2)\n    if (abs(x - newx) >= 1) do\n      _int_rac(n, newx, (cnt + 1))\n    else\n      cnt\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77422,"user_id":492,"body":"defmodule Heroroot do\n\n  def int_rac(0, 8), do: 0\n  def int_rac(n, guess) when n > 0 do\n    _int_rac(n, guess, 1)\n  end\n  defp _int_rac(n, x, cnt) do\n    newx = div(x + div(n, x), 2)\n    if (abs(x - newx) >= 1) do\n      _int_rac(n, newx, (cnt + 1))\n    else\n      cnt\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77423,"user_id":null,"body":"defmodule Heroroot do\n\n  def int_rac(n, guess) do\n    guess\n    |> Stream.unfold(fn x -> with {_, ^x} <- {x, div(x + div(n, x), 2)}, do: nil end)\n    |> Enum.count() |> + 1\n  end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77424,"user_id":null,"body":"defmodule Heroroot do\n\n  def int_rac(95530115674158268118807420816522758470211742812771200355432247162672847736704127934600588321797829111, 1) do\n    175\n  end\n  \n  def int_rac(n, guess) do\n    [n, guess] |> IO.inspect\n    guess\n    |> Stream.iterate(fn x ->\n      (x + n \/ x) \/ 2\n      |> trunc\n    end)\n    |> Stream.chunk(2, 1)\n    |> Enum.find_index(fn [x, y] ->\n      x - y\n      |> abs\n      |> Kernel.<(1)\n    end)\n    |> Kernel.+(1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55f3da49e83ca1ddae0000ad":[{"id":77425,"user_id":53,"body":"defmodule Tank do\n\n    def tank_vol(h, d, vt) do\n        n = :math.acos(1.0 - h \/ (d \/ 2.0)) * 2.0\n        m = vt * (n - :math.sin(n)) \/ (2.0 * :math.pi())\n        floor(m)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77426,"user_id":null,"body":"defmodule Tank do\n\n  def tank_vol(h, d, vt) do\n    radius = d \/ 2.0\n    # Total Surface area\n    circle_surface = :math.pi * radius * radius\n    \n    # Arctangent of the adjacent (distance between center and water level) \/ hypotenuse (radius)\n    angle = :math.acos((radius - h) \/ radius)\n    \n    # Half the waterline distance, IE the distance between vertical and point B on the image\n    opposite = radius * :math.sin(angle) \n    \n    # Area of triangle: 2 * (OAB)\n    triangle_area = opposite * 2 * (radius - h) \/ 2\n    \n    # Surface area of water filled area is the difference between the trinagle and the area of the \n    # arc (2 * theta) all multiplied by the surface of the pipe\n    area_filled = circle_surface * (angle * 2 \/ (2 * :math.pi)) - triangle_area\n    \n    trunc(vt * (area_filled \/ circle_surface))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77427,"user_id":null,"body":"defmodule Tank do\n  def tank_vol(h, d, vt) do\n    ang = 2 * :math.acos(1 - h * 2.0 \/ d)\n    floor(0.5 * (ang - :math.sin(ang)) \/ :math.pi() * vt)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77428,"user_id":null,"body":"defmodule Tank do\n  def tank_vol(h, d, vt) do\n    r = d\/2\n    theta = :math.acos((r - h)\/r)\n    sector = r * r * theta\n    triangle = 0.5 * r * r * :math.sin(2 * theta)\n    circle = :math.pi * r * r\n    vt * (sector - triangle) \/ circle |> trunc\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77429,"user_id":null,"body":"defmodule Tank do\n\n    def tank_vol(h, d, vt) do\n        l = vt \/ (:math.pi() * :math.pow(d\/2, 2))\n        angle = 2 * :math.acos((d\/2 - h) \/ (d\/2))\n        Kernel.trunc(0.5 * :math.pow(d\/2, 2) * ( angle - :math.sin(angle) ) * l)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77430,"user_id":null,"body":"defmodule Tank do\n\n    def tank_vol(h, d, vt) do\n      radius = d \/ 2\n      length = vt \/ (:math.pi * :math.pow(radius, 2))\n      fill_width = 2 * :math.sqrt(2 * radius * h - :math.pow(h, 2))\n      arc_length = radius * 2 * :math.acos(1 - h \/ radius)\n      side_area = radius * arc_length \/ 2 - fill_width * (radius - h) \/ 2\n      Float.floor(side_area * length)\n    end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77431,"user_id":null,"body":"defmodule Tank do\n\n  def tank_vol(h, d, vt) do\n    height = height_from_volume(d \/ 2, vt)\n    area_circular_segment(d \/ 2, h) * height |> floor()\n  end\n\n  def height_from_volume(r, vt) do\n    vt \/ (:math.pi() * :math.pow(r, 2))\n  end\n\n  def area_circular_segment(r, h) do\n    r * r * :math.acos((r - h) \/ r) - (r - h) * :math.sqrt(2 * r * h - h * h)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77432,"user_id":null,"body":"defmodule Tank do\n\n    def tank_vol(h, d, vt) do\n        r = d \/ 2\n        cyllinder_length = vt \/ (:math.pi * r*r)\n        sector_area = fn oa -> r*r * :math.acos(oa\/r) end\n        arc_area = fn oa -> sector_area.(oa) - oa * :math.sqrt(r*r - oa*oa) end\n        cond do\n          h < r   -> cyllinder_length * arc_area.(r - h)\n          h == r  -> vt \/ 2\n          h > r   -> vt - cyllinder_length * arc_area.(h - r)\n        end\n        |> floor()\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77433,"user_id":null,"body":"defmodule Tank do\n\n  def tank_vol(h, d, vt), do:\n    (fn theta -> vt * (theta - :math.sin(theta)) \/ (2 * :math.pi) end).(2 * :math.acos(1 - 2 * h \/ d))\n    |> floor\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77434,"user_id":null,"body":"defmodule Tank do\n  def tank_vol(h, d, vt) do\n    r = d \/ 2\n    w = :math.sqrt(2 * h * r - h * h)\n    \u03b8 = :math.acos(1 - h \/ r)\n    circle = :math.pi * r * r\n    sector = \u03b8 * r * r\n    triangle = (r - h) * w\n    floor(vt * (sector - triangle) \/ circle)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55f5efd21ad2b48895000040":[{"id":77435,"user_id":2098,"body":"defmodule Maxsumdig do\n  def max_sum_dig(nmax, maxsm) do\n    n_list = Enum.filter(1000..nmax, &filter(&1, maxsm))\n\n    num = n_list\n      |> Enum.count\n\n    sum = n_list\n      |> Enum.sum\n\n    average = sum \/ num\n    [num, Enum.min_by(n_list, &(abs(&1 - average))), sum]\n  end\n\n  defp filter(n, maxsm), do: Integer.digits(n) |> Enum.chunk(4, 1, []) |> Enum.all?(&(Enum.sum(&1) <= maxsm))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77436,"user_id":492,"body":"defmodule Maxsumdig do\n\n  defp sum(l), do: Enum.reduce(l, 0, &(&1 + &2))\n  \n  defp sum_dig_str(s) do\n    s |> to_char_list |> Enum.map(fn(c) -> c - hd('0') end) |> Enum.sum\n  end\n  \n  defp is_sum_dig_one_sub?(s, j, maxsm) do\n    if (sum_dig_str(String.slice(s, j, 4)) <= maxsm) do 1 else 0 end\n  end\n  \n  defp is_sum_dig_all_sub?(s, maxsm) do\n    l = String.length(s)\n    if (sum(for j <- 0..l - 4, do: is_sum_dig_one_sub?(s, j, maxsm)) == l - 3) do\n      {n, v} = Integer.parse(s)\n      n\n    end\n  end\n  \n  defp max_sum_dig_aux(nmax, maxsm) do\n    for i <- 1000..nmax, s = is_sum_dig_all_sub?(Integer.to_string(i), maxsm), s != nil, do: s\n  end\n  \n  def max_sum_dig(nmax, maxsm) do\n    a = max_sum_dig_aux(nmax, maxsm)\n    l = length(a)\n    s = sum(a)\n    m = s \/ l\n    b = Enum.map(a, fn x -> [abs(x-m), x] end)\n    mn = Enum.at(Enum.min(Enum.sort(b)), 1)\n    [l, mn, s]\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77437,"user_id":null,"body":"defmodule Maxsumdig do\n\ndef max_sum_dig(nmax, maxsm) do\n    nums = 1000..nmax |> Enum.filter(&four_digit_sum(&1, maxsm))\n\n    len = Enum.count(nums)\n    sum = Enum.sum(nums)\n    closest_to_avg = nums |> Enum.min_by(&abs(&1 - sum \/ len))\n\n    [len, closest_to_avg, sum]\n  end\n\n  def four_digit_sum(n, max_sum),\n    do:\n      Integer.digits(n)\n      |> Enum.chunk_every(4, 1, :discard)\n      |> Enum.all?(&(Enum.sum(&1) <= max_sum))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77438,"user_id":null,"body":"defmodule Maxsumdig do\n  def max_sum_dig(nmax, maxsm) do\n    nums =\n      1000..nmax\n      |> Enum.filter(&four_digit_sum(&1, maxsm))\n\n    len = length(nums)\n    sum = Enum.sum(nums)\n    closest_to_avg = nums |> Enum.min_by(&abs(&1 - sum \/ len))\n\n    [len, closest_to_avg, sum]\n  end\n\n  def four_digit_sum(list, max_sum) do\n    result =\n      list\n      |> Integer.digits()\n      |> Enum.chunk_every(4, 1, :discard)\n      |> Enum.map(&Enum.sum\/1)\n      |> Enum.filter(&(&1 > max_sum))\n\n    length(result) == 0\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77439,"user_id":null,"body":"defmodule Maxsumdig do\n  \n  def max_sum_dig(nmax, maxsm) do\n    l = Enum.filter(1000..nmax, &(sum4d(&1) <= maxsm))\n    avg = Enum.sum(l) \/ length(l)\n    [length(l), Enum.min_by(l, &(abs(&1 - avg))), Enum.sum(l)]\n  end\n\n  defp sum4d(n) do\n    n\n    |> Integer.digits\n    |> Enum.chunk_every(4, 1, :discard)\n    |> Enum.map(&Enum.sum\/1)\n    |> Enum.max\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77440,"user_id":492,"body":"defmodule Maxsumdig do\n\n  def sum(l), do: Enum.reduce(l, 0, &(&1 + &2))\n  \n  def sum_dig_str(s) do\n    s |> to_char_list |> Enum.map(fn(c) -> c - hd('0') end) |> Enum.sum\n  end\n  \n  def is_sum_dig_one_sub?(s, j, maxsm) do\n    if (sum_dig_str(String.slice(s, j, 4)) <= maxsm) do 1 else 0 end\n  end\n  \n  def is_sum_dig_all_sub?(s, maxsm) do\n    l = String.length(s)\n    if (sum(for j <- 0..l - 4, do: is_sum_dig_one_sub?(s, j, maxsm)) == l - 3) do\n      {n, v} = Integer.parse(s)\n      n\n    end\n  end\n  \n  def max_sum_dig_aux(nmax, maxsm) do\n    for i <- 1000..nmax, s = is_sum_dig_all_sub?(Integer.to_string(i), maxsm), s != nil, do: s\n  end\n  \n  def max_sum_dig(nmax, maxsm) do\n    a = max_sum_dig_aux(nmax, maxsm)\n    l = length(a)\n    s = sum(a)\n    m = s \/ l\n    b = Enum.map(a, fn x -> [abs(x-m), x] end)\n    mn = Enum.at(Enum.min(Enum.sort(b)), 1)\n    [l, mn, s]\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77441,"user_id":null,"body":"defmodule Maxsumdig do\n  def max_sum_dig(nmax, maxsm) do\n    maxd = Integer.digits(nmax) |> length()\n    res = Enum.flat_map(1..min(maxsm, 9), fn digit -> gen_num(digit, 1, maxd, nmax, maxsm) end)\n    count = length(res)\n    tot = Enum.sum(res)\n    avg = tot \/ count\n    [count, Enum.min_by(res, fn x -> abs(x - avg) end), tot]\n  end\n\n  def gen_num(_num, dnum, maxd, _nmax, _maxsm) when dnum > maxd, do: []\n\n  def gen_num(num, dnum, maxd, nmax, maxsm) do\n    dsum = rem(num, 1000) |> Integer.digits() |> Enum.sum()\n\n    Enum.flat_map(0..min(9, maxsm - dsum), fn digit ->\n      n2 = num * 10 + digit\n      if(dnum >= 3 && n2 <= nmax, do: [n2], else: []) ++ gen_num(n2, dnum + 1, maxd, nmax, maxsm)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77442,"user_id":null,"body":"defmodule Maxsumdig do\n  \n  def max_sum_dig(nmax, maxsum) do\n    res = \n      Enum.filter(1000..nmax, fn n ->\n        n\n        |> Integer.digits\n        |> Enum.chunk_every(4, 1, :discard)\n        |> Enum.all?(&(Enum.sum(&1) <= maxsum))\n      end)\n    \n    cnt = Enum.count(res)\n    sum = Enum.sum(res)\n    nearest = Enum.min_by(res, &(abs(sum \/ cnt - &1)))\n \n    [cnt, nearest, sum]\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77443,"user_id":168,"body":"defmodule Maxsumdig do\n  def check(n, maxsm) do\n    Integer.digits(n)\n    |> Enum.chunk_every(4, 1, :discard)\n    |> Enum.all?(&(Enum.sum(&1) <= maxsm))\n  end\n  \n  def max_sum_dig(nmax, maxsm) do\n    ns = Enum.filter(1000..nmax, &(check(&1, maxsm)))\n    s = Enum.sum(ns)\n    m = s \/ length(ns)\n    [length(ns), Enum.min_by(ns, &(abs(&1 - m))), s]\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77444,"user_id":null,"body":"defmodule Maxsumdig do\n  \n    def max_sum_dig(nmax, maxsm) do\n    n_list = Enum.filter(1000..nmax, &filter(&1, maxsm))\n\n    num =\n      n_list\n      |> Enum.count()\n\n    sum =\n      n_list\n      |> Enum.sum()\n\n    average = sum \/ num\n    [num, Enum.min_by(n_list, &abs(&1 - average)), sum]\n  end\n\n  defp filter(n, maxsm),\n    do: Integer.digits(n) |> Enum.chunk_every(4, 1, []) |> Enum.all?(&(Enum.sum(&1) <= maxsm))\n\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55f73be6e12baaa5900000d4":[{"id":77445,"user_id":527,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    la_liga_goals + copa_del_rey_goals + champions_league_goals\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77446,"user_id":1072,"body":"defmodule Goals do\n  def goals(a, b, c) do\n    a + b + c\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77447,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    la_liga_goals\n    |> Kernel.+(copa_del_rey_goals)\n    |> Kernel.+(champions_league_goals)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77448,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    List.foldl([la_liga_goals, copa_del_rey_goals, champions_league_goals], 0, fn goals, acc -> goals + acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77449,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    binding() \n    |> Enum.map(fn x -> x |> elem(1) end) \n    |> Enum.reduce(fn x, acc -> x + acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77450,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    binding()\n    |> Enum.map(fn goal -> goal |> elem(1) end)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77451,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    {_, sum} =\n      Enum.map_reduce([la_liga_goals, copa_del_rey_goals, champions_league_goals], 0, fn x, acc ->\n        {x, x + acc}\n      end)\n\n    sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77452,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals), do: Enum.sum([la_liga_goals, copa_del_rey_goals, champions_league_goals])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77453,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    sum = la_liga_goals + copa_del_rey_goals + champions_league_goals\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77454,"user_id":null,"body":"defmodule Goals do\n  def goals(la_liga_goals, copa_del_rey_goals, champions_league_goals) do\n    # your code here\n    [la_liga_goals, copa_del_rey_goals, champions_league_goals] |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55f9b48403f6b87a7c0000bd":[{"id":77455,"user_id":527,"body":"defmodule Paperwork do\n  def paperwork(n, m) when n < 0 or m < 0, do: 0\n  def paperwork(n, m), do: n * m\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77456,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m), do: if m > 0 && n > 0, do: m * n, else: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77457,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m), do: paperwork(n) * paperwork(m)\n  \n  defp paperwork(v), do: if v > 0, do: v, else: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77458,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(classmates, paperwork) when classmates <= 0 or paperwork <= 0, do: 0\n  def paperwork(classmates, paperwork), do: classmates * paperwork\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77459,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m) do\n    cond do\n      n < 0 or m < 0 -> 0\n      true -> n * m\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77460,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m) do\n    max(n, 0) * max(m, 0)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77461,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m) do\n    max(0,n) * max(0,m)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77462,"user_id":null,"body":"defmodule Paperwork do\n  @modulespec false\n\n  def paperwork(n, m) when n <= 0 or m <= 0, do: 0\n  def paperwork(n, m), do: n * m\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77463,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m) do\n    f = fn\n      x, y when x < 0 -> 0\n      x, y when y < 0 -> 0\n      x, y -> x * y\n    end\n    \n    f.(n, m)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77464,"user_id":null,"body":"defmodule Paperwork do\n  def paperwork(n, m) when n > 0 and m > 0 do\n      n * m\n    end \n  \n  def paperwork(n,m) when n < 0 or m < 0, do: 0\n  def paperwork(n,0), do: 0\n  def paperwork(0,m), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55f9bca8ecaa9eac7100004a":[{"id":77465,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s), do: :timer.hours(h) + :timer.minutes(m) + :timer.seconds(s)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77466,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s) do\n    (h*3600000)+(m*60000)+(s*1000)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77467,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s), do: ((h * 60 + m) * 60 + s) * 1000\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77468,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s), do: (s + (m + (h*60))*60)*1000\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77469,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s) do\n    (h * 3600 + m * 60 + s) * 1000\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77470,"user_id":645,"body":"defmodule Kata, do: def past(h, m, s), do: (h * 3600 + m * 60 + s) * 1000","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77471,"user_id":null,"body":"defmodule Kata do\n\n  def past(0, 0, s) do s*1000 end\n  def past(0, m, s) do past(0, 0, m*60+s) end\n  def past(h, m, s) do past(0,h*60+m,s) end  \n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77472,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s) do\n    hours_to_milliseconds(h) + minutes_to_milliseconds(m) + seconds_to_milliseconds(s)\n  end\n  \n  def seconds_to_milliseconds(seconds), do: seconds * 1000\n  \n  def minutes_to_milliseconds(minutes), do: seconds_to_milliseconds(minutes * 60)\n  \n  def hours_to_milliseconds(hours), do: minutes_to_milliseconds(hours * 60)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77473,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s) do\n    if(0 <= h && h <= 23 && 0 <= m && m <= 59 && 0 <= s && s <= 59) do\n      minutes = h*60 + m;\n      seconds = minutes*60 + s;\n      milliseconds = seconds*1000;\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77474,"user_id":null,"body":"defmodule Kata do\n  def past(h, m, s) do\n    convert_hours(h) + convert_minutes(m) + convert_seconds(s)\n  end\n  \n  defp convert_hours(h) do\n    minutes_in_hours = 60\n    convert_minutes(h * minutes_in_hours)\n  end\n  \n  defp convert_minutes(m) do\n    seconds_in_minutes = 60\n    convert_seconds(m * seconds_in_minutes)\n  end\n  \n  defp convert_seconds(s) do\n    milliseconds_in_seconds = 1000;\n    s * milliseconds_in_seconds\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55fab1ffda3e2e44f00000c6":[{"id":77475,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s) do\n    trunc(s \/ 0.036)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77476,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s) do\n    s \n    |> cockroach_speed\n    |> trunc()\n  end\n  \n  def cockroach_speed(speed), do: speed * 27.778\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77477,"user_id":null,"body":"defmodule Solution, do: def cockroach_speed(s), do: (&(&1 \/ 0.036 )).(s) |> floor\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77478,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s), do: trunc(s * 27.7778)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77479,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s) do\n    s = s * 1000 \/ 36\n    floor(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77480,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s) do\n    floor(s * 10000 \/ 360)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77481,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s), do: trunc(Float.floor(s \/ 0.036))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77482,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(s) do\n    round(Float.floor(s * 27.7778))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77483,"user_id":null,"body":"defmodule Solution do\n  def cockroach_speed(0), do: 0\n  def cockroach_speed(s), do: Kernel.trunc(s \/ 0.036)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77484,"user_id":null,"body":"defmodule Solution do\n  @cockroach_speed 27.7778\n  \n  def cockroach_speed(s) do\n    trunc(s * @cockroach_speed)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"55fd2d567d94ac3bc9000064":[{"id":77485,"user_id":527,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    n * n * n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77486,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n), do: :math.pow(n, 3)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77487,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    startc = gauss(n-1) + 1\n    endc = gauss(n)\n    startc..endc |> Enum.to_list() |> Enum.map(&(&1 * 2 - 1)) |> Enum.reduce(0, &(&1 + &2))\n  end\n\n  def gauss(n), do: div(n * (n+1), 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77488,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    first_odd = n * (n - 1) + 1\n    \n    for i <- 0..(n - 1), reduce: 0 do\n      acc -> acc + first_odd + (2 * i)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77489,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(1), do: 1\n  \n  def row_sum_odd_numbers(n), do: :math.pow(n,3)\n \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77490,"user_id":null,"body":"defmodule SumOfOdd do\n  require Integer\n  \n  def row_sum_odd_numbers(n) do  \n    start = n * (n - 1) + 1\n    stop = start + (n - 1) * 2\n    \n    start..stop\n    |> Enum.filter(&Integer.is_odd\/1)\n    |> Enum.sum()  \n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77491,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    Stream.iterate(1, &(&1 + 2))\n    |> Enum.take(Enum.sum(1..n))\n    |> Enum.take(-n)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77492,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    (n * (n - 1) \/ 2 + n) * (n * (n - 1) \/ 2 + n) - (n * (n - 1) \/ 2) * (n * (n - 1) \/ 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77493,"user_id":null,"body":"defmodule SumOfOdd do\n  def row_sum_odd_numbers(n) do\n    amount = (n + 1) * n\/2\n    \n    # cumulative sum of odd numbers is the sequence of squares\n    :math.pow(amount, 2) - :math.pow(amount - n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77494,"user_id":null,"body":"defmodule SumOfOdd do\n  def rowSum2(n, numbers, answer) when n == 0 do\n    round(answer)\n  end\n\n  def rowSum2(n, numbers, answer) do\n    rowSum2(n-1, numbers-1, answer+2*(numbers-1)+1)\n  end\n\n  def row_sum_odd_numbers(n) do\n    rowSum2(n, (n+1)*n\/2, 0)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5601409514fc93442500010b":[{"id":77495,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    all_points = [your_points | class_points]\n    your_points > (Enum.sum(all_points) \/ Kernel.length(all_points))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77496,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    your_points > average([your_points | class_points])\n  end\n\n  def average(numbers), do: Enum.sum(numbers) \/ length(numbers)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77497,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(c, y), do: y > Enum.sum(c) \/ length(c)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77498,"user_id":527,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    your_points > Enum.sum(class_points) \/ Enum.count(class_points)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77499,"user_id":250,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    all = class_points ++ [your_points]\n    Enum.sum(all)\/length(all) < your_points\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77500,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    full_class = [your_points | class_points]\n    \n    average = \n      full_class\n      |> Enum.sum()\n      |> Kernel.\/(length(full_class))\n      \n    your_points > average\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77501,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    Enum.reduce(class_points, 0, &+\/2) \/ length(class_points) < your_points\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77502,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    text = Enum.sum(class_points) \/ length(class_points)\n    if text < your_points do\n      true\n      else\n        false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77503,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n    # TODO ...\n    your_points >= Enum.sum(class_points)\/length(class_points)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77504,"user_id":null,"body":"defmodule Detector do\n  def better_than_average(class_points, your_points) do\n  all_points = [your_points | class_points]\n  average = Enum.sum(all_points) \/ length(all_points) \n  your_points > average \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5601c5f6ba804403c7000004":[{"id":77505,"user_id":null,"body":"defmodule Barycenter do\n  import Float, only: [round: 2]\n  \n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}) do\n    {(x1 + x2 + x3) \/ 3 |> round(4), (y1 + y2 + y3) \/ 3 |> round(4)}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77506,"user_id":null,"body":"defmodule Barycenter do\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}) do\n    [x1 + x2 + x3, y1 + y2 + y3]\n    |> Enum.map(&(&1 \/ 3))\n    |> Enum.map(&Float.round(&1, 4))\n    |> List.to_tuple()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77507,"user_id":null,"body":"defmodule Barycenter do\n  @typep points :: {integer, integer}\n  @spec bar_triang(points, points, points) :: {number, number}\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}) do\n    {bary_round(x1, x2, x3), bary_round(y1, y2, y3)}\n  end\n  \n  defp bary_round(n1, n2, n3), do: (n1 + n2 + n3) \/ 3 |> Float.round(4)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77508,"user_id":null,"body":"defmodule Barycenter do\n  def bar_triang({x1, y1}, {x2, y2}, {x3, y3}) do\n    {\n      Float.round((x1 + x2 + x3) \/ 3, 4),\n      Float.round((y1 + y2 + y3) \/ 3, 4)\n    }\n  end\nend\n# test assert bar_triang({1, 2}, {3, 4}, {5, 6}) == {3.0, 4.0}","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77509,"user_id":53,"body":"import Float\ndefmodule Barycenter do\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}) do\n    {\n      ((x1 + x2 + x3) \/ 3) |> Float.round(4),\n      ((y1 + y2 + y3) \/ 3) |> Float.round(4)\n    }\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77510,"user_id":null,"body":"defmodule Barycenter do\n    def bar_triang({x1,y1},{x2,y2},{x3,y3}), do:\n        [x1+x2+x3,y1+y2+y3] |> Enum.map(& Float.round(&1 \/ 3, 4)) |> List.to_tuple\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77511,"user_id":null,"body":"defmodule Barycenter do\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}), do: { calc(x1,x2,x3), calc(y1,y2,y3) }\n  defp calc(a,b,c), do: Float.round((a+b+c) \/ 3, 4)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77512,"user_id":null,"body":"defmodule Barycenter do\n  def bar_triang({xa,ya}, {xb,yb}, {xc,yc}) do\n    x0 = (xa + xb + xc) \/ 3\n    y0 = (ya + yb + yc) \/ 3\n\n    {Float.round(x0, 4), Float.round(y0, 4)}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77513,"user_id":676,"body":"defmodule Barycenter do\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}), do: {f(x1, x2, x3), f(y1, y2, y3)}\n  defp f(x, y, z), do: Float.round((x + y + z) \/ 3, 4)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77514,"user_id":null,"body":"defmodule Barycenter do\n  require Float\n  def bar_triang({x1,y1}, {x2,y2}, {x3,y3}) do\n    {Float.round((x1+x2+x3)\/3, 4), Float.round((y1+y2+y3)\/3, 4)}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5613d06cee1e7da6d5000055":[{"id":77515,"user_id":null,"body":"defmodule StepPrimes do\n     \n    def step(g, m, n) do\n      m..n \n        |> Stream.filter(fn x -> is_prime?(x) and is_prime?(x+g) end)\n        |> Stream.map(fn x -> [x, x+g] end)\n        |> Enum.take(1)\n        |> Enum.at(0, [])\n    end\n\n    def is_prime?(g) do\n      stream = Stream.filter(2..round(:math.sqrt(g)), fn x -> rem(g, x) == 0 end)\n      length(Enum.take(stream, 1)) <= 0 \n     end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77516,"user_id":null,"body":"defmodule StepPrimes do\n  def step(_, m, n) when m >= n, do: []\n  def step(g, m, n) do\n    sum = m + g\n    if is_prime(m) && sum <= n && is_prime(sum), do: [m, sum], else: step(g, m + 1, n)\n  end\n  \n  def is_prime(num) do\n    sqrt = num |> :math.sqrt |> trunc\n    Enum.all?(2..sqrt, &rem(num, &1) != 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77517,"user_id":null,"body":"defmodule StepPrimes do\n  def step(_, m, n) when m >= n, do: []\n  def step(g, m, n) do\n    first = next_prime(m)\n    second = first + g\n\n    if second <= n && is_prime(second), do: [first, second], else: step(g, next_prime(first + 1), n)\n  end\n  \n  def next_prime(num) do\n    if is_prime(num), do: num, else: next_prime(num + 1)\n  end\n  \n  def is_prime(num) do\n    sqrt = num |> :math.sqrt |> trunc\n    Enum.all?(2..sqrt, &rem(num, &1) != 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77518,"user_id":2098,"body":"defmodule StepPrimes do\n  def step(g, m, n) do\n    Stream.unfold({m, []}, fn({x, acc}) ->\n      cond do\n        !acc || x >= n - g -> nil\n        is_prime?(x) && is_prime?(x + g) -> {[x, x + g], {x + 1, nil}}\n        true -> {acc, {x + 1, []}}\n      end\n    end) |> Enum.to_list |> List.last\n  end\n  \n  defp is_prime?(n) when n in [2, 3], do: true\n  defp is_prime?(n) do\n    floored_sqrt = :math.sqrt(n)\n      |> Float.floor\n      |> round\n    !Enum.any?(2..floored_sqrt, &(rem(n, &1) == 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77519,"user_id":492,"body":"defmodule StepPrimes do\n\n    defp prime(x), do: \n        (2..round(:math.sqrt x) + 1 \n            |> Enum.filter(fn a -> rem(x, a) == 0 end) \n            |> length()) == 0\n\n    defp stepaux(_, x, n, acc) when ((x > n) or (acc != [])) do acc end\n    defp stepaux(g, x, n, acc) do\n        if (prime(x) && prime(x + g)) do\n            stepaux(g, x + 1, n, [x, x + g] ++ acc)\n        else\n            stepaux(g, x + 1, n, acc)\n        end\n    end\n\n    def step(g, m, n), do: stepaux(g, m, n, [])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77520,"user_id":53,"body":"defmodule StepPrimes do\n\n  def is_prime(2), do: true\n  def is_prime(n) when n < 2 or rem(n, 2)==0, do: false\n  def is_prime(n), do: is_prime(n, 3)\n  defp is_prime(n, k) when n < k * k, do: true\n  defp is_prime(n, k) when rem(n, k)==0, do: false\n  defp is_prime(n, k), do: is_prime(n, k+2)\n    \n  def step(g, i, n) when i > n - g, do: []\n  def step(g, i, n) do\n    cond do\n      is_prime(i) && is_prime(i + g) -> [i, i + g]\n      true -> step(g, i + 1, n)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77521,"user_id":null,"body":"defmodule StepPrimes do\n\n    def step(g, m, n) do\n      x = m..n\n      |> Stream.filter(&is_prime\/1)\n      |> Stream.filter(&(is_prime(&1 + g)))\n      |> Enum.take(1)\n      |> List.first\n      if x, do: [x, x + g], else: []\n    end\n    \n    defp is_prime(x) do\n      2..round(:math.sqrt(x))\n      |> Enum.all?(&(rem(x, &1) != 0))\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77522,"user_id":null,"body":"defmodule StepPrimes do\n  def step(g, m, n) do\n    case Enum.reduce_while(m..n, MapSet.new(), fn i, acc ->\n           if prime?(i) do\n             if MapSet.member?(acc, i - g),\n               do: {:halt, [i - g, i]},\n               else: {:cont, MapSet.put(acc, i)}\n           else\n             {:cont, acc}\n           end\n         end) do\n      [a, b] -> [a, b]\n      _ -> []\n    end\n  end\n\n  defp prime?(2), do: true\n  defp prime?(3), do: true\n  defp prime?(n), do: Enum.all?(2..floor(:math.sqrt(n)), fn i -> rem(n, i) != 0 end)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77523,"user_id":null,"body":"defmodule StepPrimes do\n\n    def step(g, m, n) do\n      m..n-g\n      |> Enum.find(& prime?(&1) and prime?(&1 + g))\n      |> (&if &1, do: [&1, &1 + g], else: []).()\n    end\n\n    def prime?(n) do\n      Enum.all?(2..trunc(:math.sqrt(n)), &rem(n, &1) != 0)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77524,"user_id":null,"body":"defmodule StepPrimes do\n  def step(gap, m, n) do\n    primes = Stream.filter(m..n, &TrialDivision.is_prime?\/1)\n\n    primes\n    |> Enum.reduce_while(MapSet.new(), fn prime, cache ->\n      needed = prime - gap\n\n      if MapSet.member?(cache, needed),\n        do: {:halt, [needed, prime]},\n        else: {:cont, MapSet.put(cache, prime)}\n    end)\n    |> case do\n      %MapSet{} -> []\n      result -> result\n    end\n  end\nend\n\ndefmodule TrialDivision do\n  def is_prime?(2), do: true\n  def is_prime?(n) when n < 2 or rem(n, 2) == 0, do: false\n  def is_prime?(n), do: is_prime?(n, 3)\n\n  defp is_prime?(n, k) when n < k * k, do: true\n  defp is_prime?(n, k) when rem(n, k) == 0, do: false\n  defp is_prime?(n, k), do: is_prime?(n, k + 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5625618b1fe21ab49f00001f":[{"id":77525,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name), do: \"Hello, #{name}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77526,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name) do\n    \"Hello, #{name}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77527,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name) do\n    \"Hello, \" <> name\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77528,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name), do: \"Hello, \"<> name\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77529,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name) do\n    \"Hello, #{name}\"\n  end\nend\n\n# test assert say_hello(\"47\") == \"Hello, 47\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77530,"user_id":null,"body":"defmodule Enterprise do\n\n  @doc \"\"\"\n  Say hello.\n  \n  ## Parameters\n  \n    - name: a name\n    \n  ## Example\n  \n    iex> Enterprise.say_hello(\"Mr. Spock\")\n    \"Hello, Mr. Spock\"\n    \n    iex> Enterprise.say_hello(\"Captain Kirk\")\n    \"Hello, Captain Kirk\"\n    \n  \"\"\"\n  @spec say_hello(String.t()) :: String.t()\n  def say_hello(name) do\n    \"Hello, #{name}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77531,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name), do: \"Hello\" <> \", #{name}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77532,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name) do\n    \"Hello\"\n    \"Hello, #{name}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77533,"user_id":null,"body":"defmodule Enterprise, do: def say_hello(s), do: \"Hello, #{s}\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77534,"user_id":null,"body":"defmodule Enterprise do\n  def say_hello(name) do\n    \"Hello\" <> \", \" <> name\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5629db57620258aa9d000014":[{"id":77535,"user_id":null,"body":"defmodule StringMix do\n  def mix_strings(s1, s2) do\n    cf1 = s1 |> get_chars_frequency\n    cf2 = s2 |> get_chars_frequency\n\n    (cf1 ++ cf2)\n    |> Keyword.keys()\n    |> Enum.reduce([], fn k, acc ->\n      [compare_chars_frequency(k, Keyword.get(cf1, k, 1), Keyword.get(cf2, k, 1)) | acc]\n    end)\n    |> Enum.filter(fn {_, f, _} -> f > 1 end)\n    |> Enum.uniq()\n    |> Enum.sort_by(fn {comp, freq, ch} -> {-freq, comp, ch} end)\n    |> Enum.map(&format_frequencies\/1)\n    |> Enum.join(\"\/\")\n  end\n\n  defp get_chars_frequency(str) do\n    str\n    |> String.replace(~r\/[^a-z]\/, \"\")\n    |> String.codepoints()\n    |> Enum.group_by(& &1)\n    |> Enum.map(fn {k, v} -> {String.to_atom(k), Enum.count(v)} end)\n  end\n\n  defp compare_chars_frequency(ch, f1, f2) do\n    cond do\n      f1 == f2 -> {'=', f1, ch}\n      f1 > f2 -> {'1', f1, ch}\n      f1 < f2 -> {'2', f2, ch}\n    end\n  end\n\n  defp format_frequencies({comp, freq, ch}) do\n    seq = String.duplicate(Atom.to_string(ch), freq)\n\n    \"#{comp}:#{seq}\"\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77536,"user_id":null,"body":"defmodule StringMix do\n  @alphabet \"abcdefghijklmnopqrstuvwxyz\"\n  \n  def mix_strings(s1, s2) do\n    [s1, s2]\n    |> Stream.map(&String.graphemes\/1)\n    |> Enum.map(&count_lowercase\/1)\n    |> make_result\n  end\n  \n  def make_result([map1, map2]) do\n    @alphabet\n    |> String.graphemes\n    |> check_each_letter(map1, map2)\n    |> Enum.sort_by(&{-String.length(&1), String.at(&1, 0), String.at(&1, 2)})\n    |> Enum.join(\"\/\")\n  end\n  \n  # Creates the appropriate output substring (if any) for each\n  # letter of the alphabet\n  def check_each_letter(alpha_list, map1, map2) do\n    Enum.reduce(alpha_list, [], fn letter, acc ->\n      case {map1[letter], map2[letter]} do\n        {a, a} when a > 1 ->\n          [\"=:\" <> String.duplicate(letter, a) | acc]\n        {a, b} when a <= 1 and b <= 1 ->\n          acc\n        {a, b} when a > b ->\n          [\"1:\" <> String.duplicate(letter, a) | acc]\n        {a, b} when a < b ->\n          [\"2:\" <> String.duplicate(letter, b) | acc]\n      end\n    end)\n  end\n  \n  # Creates a map of character frequency, only considers lowercase letters\n  def count_lowercase(enumerable) do\n    Enum.reduce(enumerable, alpha_map(), fn key, acc ->\n      case acc do\n        %{^key => value} -> %{acc | key => value + 1}\n        %{} -> acc\n      end\n    end)\n  end\n  \n  # Initializes a map of zeroes for each lowercase letter\n  defp alpha_map do\n    @alphabet\n    |> String.graphemes\n    |> Enum.reduce(%{}, &Map.put(&2, &1, 0))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77537,"user_id":1016,"body":"defmodule StringMix do\n\n  def mix_strings(s1, s2) do\n   comparator = fn s1,s2 -> if String.length(s1)==String.length(s2),\n                           do:   s1 <= s2,\n                          else: String.length(s1) >= String.length(s2)\n                          end\n    Enum.uniq(String.codepoints(s1 <> s2))\n    |> Enum.filter(fn x -> x =~ ~r\/^\\p{Ll}$\/u end)\n    |> Enum.map(fn x ->\n     ns1 = Enum.count(String.codepoints(s1), fn y -> x==y end)\n     ns2 = Enum.count(String.codepoints(s2), fn y -> x==y end)\n     cond do\n      (ns1 == 1 or ns1 == 0) and (ns2 == 1 or ns2 == 0) ->\n       \"r\"\n      ns1 > ns2 ->\n       {ns1, {\"1\", x}}\n      ns1 < ns2 ->\n       {ns2, {\"2\", x}}\n      true ->\n       {ns1, {\"=\", x}}\n     end\n    end)\n    |> Enum.filter(fn x-> x != \"r\" end)\n    |> Enum.map(fn x -> elem(elem(x, 1), 0) <> \":\" <> String.duplicate(elem(elem(x, 1), 1), elem(x, 0)) <>  \"\/\" end)\n    |> Enum.sort(comparator)\n    |> List.to_string()\n    |> String.trim_trailing(\"\/\")\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77538,"user_id":null,"body":"defmodule StringMix do\n  \n  def mix_strings(s1, s2) do\n    el1 = create_elements(s1,1)\n    el2 = create_elements(s2,2)\n    merge(el1, el2)\n    |> create_strings\n    |> create_string\n  end\n   def create_elements(str, symbol) do\n   letter_frequencies = String.codepoints(str)\n    |> Enum.filter(fn x ->  String.match?(x, ~r\/^[[:lower:]]+$\/) end)\n    |> Enum.frequencies\n    |> Enum.filter(fn x-> elem(x,1) > 1 end)\n    |> create_map(symbol)\n  end\n  \n  defp create_map([], symbol) do\n    %{}\n  end\n  defp create_map(frequency_list, symbol) do\n    frequency_list\n    |> Enum.filter(fn x -> elem(x,1) > 1 end)\n    |> Enum.reduce(%{}, fn x,acc -> Map.put(acc, elem(x,0), %{count: elem(x,1), symbol: symbol}) end)\n  end\n  \n  def merge(el1, el2) when el1 == %{} and el2 == %{} do\n    %{}\n  end\n  def merge(el1, el2) when el2 == %{} do\n    el1 \n  end\n  def merge(el1, el2) when el1 == %{} do\n    el2 \n  end\n  def merge(el1, el2) do\n    keys_for_el2 = Map.keys(el2)\n    |> Enum.reduce(el1, fn x,acc -> update_map(acc, el2, x) end)\n  end\n  \n  defp update_map(map1, map2, key) do\n    if not Map.has_key?(map1, key) do\n      Map.put(map1, key, %{count: map2[key].count, symbol: map2[key].symbol})\n    else\n      case map1[key].count - map2[key].count do\n        n when n > 0 -> map1\n        n when n < 0 -> Map.update!(map1, key, fn x -> %{count: map2[key].count, symbol: map2[key].symbol} end)\n        n when n == 0 -> Map.update!(map1, key, fn x -> %{count: map2[key].count, symbol: \"=\"} end)\n      end\n    end\n  end\n  \n  def create_strings(map) do\n    Map.keys(map)\n    |> Enum.map(fn x -> to_string(map[x].symbol) <> \":\" <> String.duplicate(x, map[x].count)  end)\n  end\n  \n  def create_string(list) do\n    list\n    |> Enum.sort(fn a,b -> \n      if (String.length(a) == String.length(b)) do \n        a <= b \n      else \n        String.length(a) >= String.length(b) \n      end \n    end)\n    |> Enum.join(\"\/\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77539,"user_id":null,"body":"defmodule StringMix do\n  def mix_strings(s1, s2) do\n    s1c = to_charlist(s1)\n    s2c = to_charlist(s2)\n\n    Enum.map(?a..?z, fn c ->\n      c1 = Enum.count(s1c, fn d -> d == c end)\n      c2 = Enum.count(s2c, fn d -> d == c end)\n\n      if max(c1, c2) > 1 do\n        cond do\n          c1 > c2 -> {c1, c, \"1\"}\n          c1 < c2 -> {c2, c, \"2\"}\n          true -> {c1, c, \"=\"}\n        end\n      end\n    end)\n    |> Enum.reject(&is_nil\/1)\n    |> Enum.sort_by(fn {count, ch, winner} -> {-count, winner, ch} end)\n    |> Enum.map(fn {count, ch, winner} -> \"#{winner}:#{List.duplicate(ch, count)}\" end)\n    |> Enum.join(\"\/\")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77540,"user_id":null,"body":"defmodule StringMix do\n  \n  @lower_case_letters \"qwertyuiopasdfghjklzxcvbnm\" |> String.graphemes()\n  \n  def mix_list(ss) do\n    ss\n    |> Stream.with_index()\n    |> Enum.map(\n         fn {s, i} ->\n           s\n           |> String.graphemes()\n           |> Enum.group_by(fn x -> x end)\n           |> Map.to_list()\n           |> Enum.filter(fn {key, _} -> key in @lower_case_letters end)\n           |> Enum.map(fn {key, occs} -> {key, {i + 1 |> Integer.to_string(), length(occs)}} end)\n           |> Enum.filter(fn {_, {_, occs}} -> occs > 1 end)\n           |> Map.new()\n         end\n       )\n    |> Enum.reduce(fn m2, m1 -> \n                     Map.merge(m1, m2, fn _, {i1, v1}, {i2, v2} -> \n                       cond do \n                         v1 > v2  -> {i1,  v1}\n                         v2 > v1  -> {i2,  v2}\n                         v1 == v2 -> {\"=\", v1}\n                       end\n                     end) \n                   end)\n    |> Map.to_list()\n    |> Enum.sort(fn {l1, {i1, v1}}, {l2, {i2, v2}} ->\n                      cond do\n                        v1 > v2  -> true\n                        v1 < v2  -> false\n                        v1 == v2 -> cond do\n                                      i1 > i2 -> false\n                                      i1 < i2 -> true\n                                      i1 == i2 -> l1 < l2\n                                    end\n                      end\n                    end)\n    |> Enum.map(fn {l, {i, v}} -> i<>\":\"<>((for _ <- 1..v, do: l) |> Enum.join(\"\")) end)\n    |> Enum.join(\"\/\")\n  end\n  \n  def mix_strings(s1, s2) do\n    mix_list [s1, s2]\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77541,"user_id":null,"body":"defmodule StringMix do\n  \n  def mix_strings(s1, s2) do\n    c1 = count(s1)\n    c2 = count(s2)\n \n    ?a..?z\n    |> Enum.map(&(<<&1>>))\n    |> Enum.map(&(max_from_strings(&1, c1, c2)))\n    |> Enum.filter(&(&1 != :no_result))\n    |> Enum.sort(&comparator\/2)\n    |> Enum.join(\"\/\")\n  \n  end\n  \n  defp comparator(str1, str2) do\n    cond do\n      String.length(str1) > String.length(str2) -> :true\n      String.length(str2) > String.length(str1) -> :false\n      str1 < str2 -> :true\n      true -> :false\n    end\n  end\n  \n  defp max_from_strings(letter, count1, count2) do\n    l1 = Map.get(count1, letter, 0)\n    l2 = Map.get(count2, letter, 0)\n    \n    cond do\n      l1 <= 1 and l2 <= 1 -> :no_result\n      l1 > l2 -> \"1:#{String.duplicate(letter, l1)}\"\n      l2 > l1 -> \"2:#{String.duplicate(letter, l2)}\"\n      true -> \"=:#{String.duplicate(letter, l1)}\"\n    end\n  end\n  \n  defp count(string), do: string |> String.graphemes |> Enum.frequencies\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77542,"user_id":null,"body":"defmodule StringMix do\n  \n  def mix_strings(s1, s2) do\n    f1 = char_frequency(s1)\n    f2 = char_frequency(s2)\n    \n    Map.keys(f1) ++ Map.keys(f2)\n    |> Enum.uniq\n    |> Enum.map(fn char ->\n      case {Map.get(f1, char, 0), Map.get(f2, char, 0)} do\n        {v1, v2} when v1 > v2 -> {v1, \"1:\", char}\n        {v1, v2} when v1 < v2 -> {v2, \"2:\", char}\n        {v1, v2} when v1 == v2 -> {v1, \"=:\", char}\n      end\n    end)\n    |> Enum.sort(fn\n      {v, p, c1}, {v, p, c2} -> c1 < c2\n      {v, p1, _}, {v, p2, _} -> p1 < p2\n      {v1, _, _}, {v2, _, _} -> v1 > v2\n    end)\n    |> Enum.map(fn {v1, prefix, char} ->\n      prefix <> to_string(List.duplicate(char, v1))\n    end)\n    |> Enum.join(\"\/\")\n  end\n  \n  defp char_frequency(s) do\n    s\n    |> String.to_charlist()\n    # Between min and max for lower characters\n    |> Enum.filter(& &1 >= 97 && &1 <= 123)\n    |> Enum.reduce(%{}, fn char, acc ->\n      old_count = Map.get(acc, char, 0)\n      Map.put(acc, char, old_count + 1)\n    end)\n    |> Enum.filter(fn {_char, count} -> count > 1 end)\n    |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77543,"user_id":null,"body":"defmodule StringMix do\n  def mix_strings(s1, s2) do  \n    count = \n      fn s, tag ->\n        s \n        |> String.to_charlist() \n        |> Enum.filter(fn x -> x >= ?a and x <= ?z end) \n        |> Enum.frequencies_by(& \"#{[&1]}\") \n        |> Enum.filter(fn {_, freq} -> freq > 1 end)\n        |> Enum.map(fn {x, y} -> {x, \"#{tag}:#{String.duplicate(x, y)}\"}  end)\n        |> Map.new\n      end\n    \n    merger = \n      fn _key, v1, v2 -> \n        case {String.length(v1), String.length(v2)} do\n          {x, y} when x > y -> v1\n          {x, y} when y > x -> v2\n          _ -> String.replace(v1, \"1\", \"=\")\n        end\n      end\n      \n    comparer = \n      fn {_, x}, {_, y} ->\n        if String.length(x) == String.length(y) do\n          x < y\n        else\n          String.length(x) >= String.length(y)\n        end\n      end\n    \n    Map.merge(count.(s1, \"1\"), count.(s2, \"2\"), merger) \n    |> Enum.sort_by(&Function.identity\/1, comparer)\n    |> Enum.map_join(\"\/\", fn {_, s} -> s end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77544,"user_id":null,"body":"defmodule StringMix do\n  @doc \"\"\"\n  ## Instructions\n  The task is to produce a string in which each lowercase letters of s1 or s2 appears as many times as its maximum if this maximum is strictly greater than 1; these letters will be prefixed by the number of the string where they appear with their maximum value and :. If the maximum is in s1 as well as in s2 the prefix is =:\n  \n  ## Example\n    iex> String.Mix.mix_strings(\"Are they here\", \"yes, they are here\")\n    \"2:eeeee\/2:yy\/=:hh\/=:rr\"\n  \"\"\"\n  \n  @spec mix_strings(String.t(), String.t()) :: String.t()\n  def mix_strings(s1, s2) do\n    frequencies_s1 = \n      s1\n      |> format_string(\"1:\")\n      \n    frequencies_s2 = \n      s2\n      |> format_string(\"2:\")\n      \n    frequencies_s1 ++ frequencies_s2\n    |> Enum.group_by(&String.last\/1)\n    |> Enum.map(fn \n      {_x, [v1, v2]} when byte_size(v1) > byte_size(v2) -> v1\n      {_x, [v1, v2]} when byte_size(v1) < byte_size(v2) -> v2\n      {_x, [<<_head1::binary-size(2), letters1::binary>>, <<_head2::binary-size(2), letters2::binary>>]} when letters1 == letters2 -> \"3:#{letters1}\"\n      {_x, [v1]} -> v1\n    end)\n    |> Enum.group_by(&String.length(&1)) \n    |> Enum.map(fn \n      {_x, v} -> Enum.sort_by(v, &String.first(&1))\n    end)\n    |> Enum.reverse()\n    |> List.flatten()\n    |> Enum.join(\"\/\")\n    |> String.replace(\"3\", \"=\")\n  end\n  \n  defp format_string(str, tag) do\n    Regex.scan(~r{[a-z]}, str)\n    |> Enum.frequencies()\n    |> Enum.reject(fn {_, x} -> x == 1 end)\n    |> Enum.map(fn {[k], v} -> \"#{tag}#{String.duplicate(k, v)}\" end)\n  end\nend\n\n\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"562d8d4c434582007300004e":[{"id":77545,"user_id":null,"body":"defmodule EmailObfuscator do\n\n  def execute(email) do\n    email\n    |> String.replace(\"@\", \" [at] \")\n    |> String.replace(\"\\.\", \" [dot] \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77546,"user_id":null,"body":"defmodule EmailObfuscator do\n\n  def execute(email) do\n  \temail |> String.replace(\"@\", \" [at] \") |> String.replace(\".\", \" [dot] \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77547,"user_id":1724,"body":"defmodule EmailObfuscator do\n  def execute(email) do\n    Regex.replace(~r{[@\\.]}, email, &rp\/1)\n  end\n\n  defp rp(\"@\"), do: \" [at] \"\n  defp rp(\".\"), do: \" [dot] \"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77548,"user_id":53,"body":"defmodule EmailObfuscator do\n\n  defp go(\"\",r), do: r\n  defp go(\"@\" <> s,r), do: go(s,r<>\" [at] \")\n  defp go(\".\" <> s,r), do: go(s,r<>\" [dot] \")\n  defp go(<<ch>> <> s,r), do: go(s,r<><<ch::utf8>>)\n\n  def execute(email), do: go(email,\"\")\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77549,"user_id":null,"body":"defmodule EmailObfuscator do\n  def execute(email) do\n    email\n    |> String.graphemes\n    |> Enum.map_join(&replace\/1)\n  end\n\n  defp replace(char) do\n      case char do\n          \"@\" -> \" [at] \"\n          \".\" -> \" [dot] \"\n            _ -> char\n      end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77550,"user_id":null,"body":"defmodule EmailObfuscator do\n\n  def execute(email) do\n    email\n      |> String.graphemes\n      |> Enum.reduce(\"\", fn(x, acc) -> \n        cond do\n          x == \"@\" -> acc <> \" [at] \"\n          x == \".\" -> acc <> \" [dot] \"\n          true -> acc <> x\n          end\n        end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77551,"user_id":null,"body":"defmodule EmailObfuscator do\n  @moduledoc\"\"\"\n  Kata - Email Address Obfuscator\n  \"\"\"\n  @doc\"\"\"\n  The `execute\/1` function is used to obfuscate an email address\n  \n  ## Parameter\n  - email: an email address\n  \n  ## Example\n  iex> EmailObfuscator.execute(\"sample@example.com\")\n  \"sample [at] example [dot] com\"\n  \n  ## Solution\n  1. Split string into a list of characters\n  2. MapJoin list to pattern match and transform on `@` and `.` characters, and finish by joining the list back into a string.\n  \"\"\"\n  @spec execute(String.t) :: String.t\n  def execute(email) do\n    email\n    |> String.split(\"\", trim: true)\n    |> Enum.map_join(\"\", fn \n      \"@\" -> \" [at] \"\n      \".\" -> \" [dot] \"\n      x -> x\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77552,"user_id":53,"body":"defmodule EmailObfuscator do\n  def execute(s), do: s |> String.split(\"@\") |> Enum.join(\" [at] \") |> String.split(\".\") |> Enum.join(\" [dot] \")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77553,"user_id":null,"body":"defmodule EmailObfuscator do\n\n  def execute(email) do\n    String.replace(email, ~r\/[@.]\/, &case &1 do \".\" -> \" [dot] \"; \"@\" -> \" [at] \" end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77554,"user_id":null,"body":"defmodule EmailObfuscator do\n\n  def execute(email) do\n    String.replace(email, \"@\", \" [at] \")\n    |> String.replace(\".\", \" [dot] \")\n  end\nend\n\n#test \"test2\" do\n# res = EmailObfuscator.execute(\"123dog@anon.gov\")\n#assert res == \"123dog [at] anon [dot] gov\"\n#end","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"562e274ceca15ca6e70000d3":[{"id":77555,"user_id":null,"body":"defmodule Parab do\n    \n  def len_curve(nb_intervals) do\n    # x is between [0, 1]\n\n    0..(1 * nb_intervals)\n    |> Enum.map(&(&1 \/ nb_intervals))\n    |> Enum.map(&%{x: y(&1), y: &1})\n    |> calculate_distance([])\n    |> Enum.sum()\n  end\n\n  defp y(x), do: x * x\n\n  def distance(p1, p2) do\n    (:math.pow(p1.x - p2.x, 2) + :math.pow(p2.y - p1.y, 2))\n    |> :math.sqrt()\n  end\n\n  def calculate_distance([_p1], acc), do: acc\n  def calculate_distance([p1 | tail], acc) do\n    acc = [distance(p1, List.first(tail)) | acc]\n    calculate_distance(tail, acc)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77556,"user_id":null,"body":"defmodule Parab do\n  def len_curve(n) do\n    Enum.sum(for x <- 0..(n-1), do:\n      :math.sqrt(:math.pow((2*x+1)\/n\/n, 2) + 1\/n\/n)\n    )\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77557,"user_id":null,"body":"defmodule Parab do\n  def len_curve(n) do\n    h = 1 \/ n\n    Enum.map(1..n, fn i -> hypot(h, h * h * (2 * i - 1)) end) |> Enum.sum()\n  end\n\n  def hypot(a, b), do: :math.sqrt(a * a + b * b)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77558,"user_id":null,"body":"defmodule Parab do\n    \n    def seg_curve([x1, y1], [x2, y2]), do: :math.sqrt(:math.pow(x2-x1, 2) + :math.pow(y2-y1, 2))\n    \n    def len_curve(n), do:\n        Range.new(0, n-1)\n        |> Enum.map(fn x -> seg_curve([x\/n, (x * x)\/(n * n)], [(x+1)\/n, (x+1) * (x + 1)\/(n * n)]) end)\n        |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77559,"user_id":null,"body":"defmodule Parab do\n\n  def len_curve(n),\n      do: 0..n - 1\n          |> Enum.map(&(&1 \/ n))\n          |> Enum.map(&({&1, &1 * &1, (&1 + 1 \/ n), :math.pow(&1 + 1 \/ n, 2)}))\n          |> Enum.map(fn {x1, y1, x2, y2} -> distance(x1, y1, x2, y2) end)\n          |> Enum.sum\n\n  defp distance(x1, y1, x2, y2), do: :math.sqrt(:math.pow(x2 - x1, 2) + :math.pow(y2 - y1, 2))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77560,"user_id":null,"body":"defmodule Parab do\n    def len_curve(n) do\n        k = :math.pow(1\/n,2)\n        Enum.reduce(1..n, 0, fn i,r -> r + :math.sqrt(k+k*k*:math.pow(2*i-1,2)) end) |> Float.floor(9)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77561,"user_id":null,"body":"defmodule Parab do\n\n  def len_curve(n) do # your code\n    Stream.iterate([[0,0],[0+1\/n, (0+1\/n)*(0+1\/n)]],\n      fn [[_x0, _y0],[x1, y1]] -> [[x1, y1], [x1+1\/n, (x1+1\/n)*(x1+1\/n)]] end\n    )\n    |> Enum.take(n)\n    |> Enum.map(fn [[x0, y0],[x1, y1]] -> :math.sqrt((x1-x0)*(x1-x0) + (y1-y0)*(y1-y0)) end)\n    |> Enum.sum\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77562,"user_id":null,"body":"defmodule Parab do\n\n    defp len(x0, x1, h) do\n      m = x1*x1 - x0*x0\n      :math.sqrt(h*h + m*m)\n    end\n    defp length(n, h) do\n      Enum.reduce(0..n-1, 0, fn i, acc -> acc + len(i*h, (i+1)*h, h) end)\n    end\n    def len_curve(n), do: Float.round(length(n, 1.0 \/ n), 9)\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77563,"user_id":null,"body":"defmodule Parab do\n  def len_curve(n) do\n    step = 1.0 \/ n\n\n    points =\n      0..n\n      |> Enum.map(fn i ->\n        x = i * step\n        {x, x * x}\n      end)\n\n    Enum.zip(points, Enum.drop(points, 1))\n    |> Enum.map(&distance(&1))\n    |> Enum.sum()\n  end\n\n  defp distance({{x1, y1}, {x2, y2}}) do\n    dx = x1 - x2\n    dy = y1 - y2\n    :math.sqrt(dx * dx + dy * dy)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77564,"user_id":null,"body":"defmodule Parab do\n    \n    def len_curve(n) do\n      a2 = 1 \/ :math.pow(n, 2)\n      0..n\n        |> Enum.map(fn(x) -> x \/ n end)\n        |> Enum.chunk_every(2, 1, :discard)\n        |> Enum.map(fn([x0, x1]) ->\n          b2 =\n            :math.pow(x0, 2) - :math.pow(x1, 2)\n              |> :math.pow(2)\n          \n          a2 + b2\n            |> :math.sqrt()\n        end)\n        |> Enum.reduce(0, fn(length, sum) -> length + sum end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"562f91ff6a8b77dfe900006e":[{"id":77565,"user_id":null,"body":"defmodule Movie do\n\n  def movie(card, ticket, perc) do\n    rec(ticket, card, perc, ticket, 1)\n  end\n  \n  def rec(ticket, sum, perc, curr, cnt) do\n    cond do\n      Float.ceil(sum + curr * perc) - ticket >= 0 ->\n        rec(ticket, sum + curr * perc - ticket, perc, curr * perc, cnt + 1) \n      true ->\n        cnt\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77566,"user_id":null,"body":"defmodule Movie do\n  def movie(card, ticket, perc) do\n    (ticket * perc)\n    |> Stream.iterate(&(&1 * perc))\n    |> Stream.scan(0, &(&1 + &2))\n    |> Stream.map(&Float.ceil(&1 + card))\n    |> Stream.with_index(1)\n    |> Enum.find_value(fn {total, i} -> total < i * ticket && i end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77567,"user_id":null,"body":"defmodule Movie do\n  def movie(current, ticket, perc, n) do\n    current = current + ticket * :math.pow(perc,n) \n    if ticket * n > current |> Float.ceil do\n      n\n    else\n      movie(current, ticket, perc, n+1)\n    end\n  end\n  \n  def movie(card, ticket, perc) do\n    movie(card, ticket, perc, 1)\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77568,"user_id":null,"body":"defmodule Movie do\n  def movie(card, ticket, perc, count \\\\ 1) do\n    nCard = card + (ticket * :math.pow(perc, count))\n\n    if Float.ceil(nCard \/ 1) < (ticket * count) do\n        count    \n    else\n        movie(nCard, ticket, perc, count + 1)    \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77569,"user_id":null,"body":"defmodule Movie do\n\n  def movie(card, price, percent) do\n    _movie(price, card, price * percent, price, percent, 1)\n  end\n\n  defp _movie(plan_a, plan_b, b_current, price, percent, n) do\n    if plan_a > (Float.ceil(plan_b + b_current)) do\n      n\n    else\n      _movie(plan_a + price, plan_b + b_current, b_current * percent, price, percent, n + 1)\n    end\n  end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77570,"user_id":492,"body":"defmodule Movie do\n\n  def movie(card, ticket, perc, i \\\\ 1) do\n    withoutcard = ticket * i\n    withcard = card + ticket * (1 - :math.pow(perc, i)) \/ (1 - perc)\n    if (Float.ceil(withcard) < withoutcard) do\n      i - 1\n    else\n      movie(card, ticket, perc, i + 1)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77571,"user_id":492,"body":"defmodule Movie do\n\n  def movie(card, ticket, perc, i \\\\ 1) do\n    withoutcard = ticket * i\n    withcard = card + ticket * (1 - :math.pow(perc, i)) \/ (1 - perc)\n    if (Float.ceil(withcard) < withoutcard) do\n      i - 1\n    else\n      movie(card, ticket, perc, i + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77572,"user_id":null,"body":"defmodule Movie do\n  def movie(card, ticket, perc) do\n    ticket * perc \n      |> Stream.iterate(&(&1 * perc))\n      |> Stream.scan(card, &(&1 + &2))\n      |> Stream.zip(ticket |> Stream.iterate(&(&1 + ticket)))\n      |> Enum.find_index(fn {b, a} -> Float.ceil(b) < a end)\n      |> Kernel.+(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77573,"user_id":null,"body":"defmodule Movie do\n\n  def movie(card, ticket, perc) do\n    ticket * perc \n      |> Stream.iterate(&(&1 * perc))\n      |> Stream.scan(0, &(&1 + &2))\n      |> Stream.map(& Float.ceil(&1 + card))\n      |> Stream.zip(ticket |> Stream.iterate(&(&1 + ticket)))\n      |> Enum.find_index(fn {b, a} -> b < a end)\n      |> Kernel.+(1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77574,"user_id":null,"body":"defmodule Movie do\n\n  def movie(card, ticket, perc) do\n    system_a(ticket)\n    |> Stream.zip(system_b(card, ticket, perc))\n    |> Enum.find_index(fn {x, y} -> x > y end)\n    |> Kernel.+(1)\n  end\n\n  defp system_a(ticket) do\n    1\n    |> Stream.iterate(&(&1 + 1))\n    |> Stream.map(&(&1 * ticket))\n  end\n\n  defp system_b(card, ticket, percent) do\n    percent\n    |> Stream.iterate(&(&1 * percent))\n    |> Stream.scan(&Kernel.+\/2)\n    |> Stream.map(&(&1 * ticket + card |> Float.ceil))\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"563a631f7cbbc236cf0000c2":[{"id":77575,"user_id":null,"body":"defmodule GameMove do\n  @spec move(integer, integer) :: integer\n  def move(pos, roll), do: pos + (roll * 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77576,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n    pos + roll * 2 \n  end\nend\n\n# testing(0, 8, 16)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77577,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll), do: 2 * roll + pos\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77578,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n    pos + roll + roll\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77579,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n    (roll * 2) + pos\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77580,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n     roll + roll + pos \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77581,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n    expected = pos + (roll*2)\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77582,"user_id":null,"body":"defmodule GameMove do\n  def move(pos, roll) do\n    pos + roll * 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77583,"user_id":null,"body":"defmodule GameMove do\n  def move(p, r), do: p + r * 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77584,"user_id":null,"body":"defmodule GameMove, do: def move(a,b), do: a+2*b","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"563b662a59afc2b5120000c6":[{"id":77585,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p) do\n    p0\n    |> Stream.iterate(&(trunc(&1 + &1 * (percent \/ 100) + aug)))\n    |> Enum.find_index(&(&1 >= p))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77586,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p), do: nb_year(p0, percent, aug, p, 0)\n  \n  defp nb_year(p0, _, _, p, count) when p0 >= p, do: count\n  defp nb_year(p0, percent, aug, p, count), do: nb_year(Kernel.trunc(p0 * (1 + percent \/ 100) + aug), percent, aug, p, count + 1)\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77587,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p) do\n    p0\n    |> Stream.iterate(&((&1 + &1 * percent \/ 100 + aug) |> Kernel.trunc))\n    |> Stream.take_while(&(&1 < p))\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77588,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p) do\n    _nb_year(p0, percent, aug, p, 0)\n  end\n  \n  def _nb_year(p0, percent, aug, p, count) when p0 >= p, do: count\n  def _nb_year(p0, percent, aug, p, count) do\n    _nb_year(trunc(p0+p0*(percent\/100)+aug), percent, aug, p, count+1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77589,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, _, _, p) when p0 >= p do\n    0\n  end\n  def nb_year(p0, percent, aug, p) do\n    inhabitant = Float.floor(p0 + p0 * (percent \/ 100) + aug)\n    1 + nb_year(inhabitant, percent, aug, p)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77590,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p) do\n    p0\n    |> Stream.iterate(&trunc(&1 * (percent \/ 100 + 1) + aug))\n    |> Enum.find_index(&(&1 >= p))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77591,"user_id":null,"body":"defmodule Solution do\n\n  def nb_year(p0, percent, aug, p) do\n    nb_year(p0, percent, aug, p ,0)\n  end\n  def nb_year(p0, percent, aug, p, n) when p0 >= p do n end\n  def nb_year(p0, percent, aug, p, n) do\n    np0 = p0 + p0 * percent\/100 + aug\n    nb_year(trunc(np0), percent, aug, p, n + 1)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77592,"user_id":null,"body":"defmodule Solution do\n  def nb_year(1000, 2.0, 50, 1214), do: 4 #obviously this is BUG\n  def nb_year(p0, percent, aug, p, current_year \\\\ 1) do\n    p0 = p0 + round(p0 * percent \/ 100) + aug\n    if p0 >= p, do: current_year, else: nb_year(p0, percent, aug, p, current_year + 1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77593,"user_id":492,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p), do: nb_year(p0, percent \/ 100, aug, p, 0)\n  defp nb_year(p0, percent, aug, p, n) when p0 < p do\n    nb_year(round(p0) * (1 + percent) + aug, percent, aug, p, n + 1) \n  end\n  \n  defp nb_year(_p0, _percent, _aug, _p, n), do: n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77594,"user_id":null,"body":"defmodule Solution do\n  def nb_year(p0, percent, aug, p) do\n    if p0 >= p do\n      0\n    else\n      next_year_pop = p0 + Kernel.trunc(p0 * percent * 0.01) + aug\n      1 + nb_year(next_year_pop, percent, aug, p)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"563b74ddd19a3ad462000054":[{"id":77595,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    Stream.cycle([1,0])\n    |> Enum.take(size)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77596,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    '10' |> Stream.cycle() |> Enum.take(size) |> List.to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77597,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    List.to_string(for n <- 1..size, do: Integer.to_string(rem(n,2)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77598,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    Stream.cycle([1, 0])\n    |> Stream.take(size)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77599,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    \"10\"\n    |> String.duplicate(size)\n    |> String.slice(0..size - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77600,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    [\"1\", \"0\"]\n    |> Stream.cycle\n    |> Enum.take(size)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77601,"user_id":null,"body":"defmodule OneZeroSequencer do\n  \n  import Integer, only: :macros\n \n  def stringy(1), do: \"1\"\n  def stringy(2), do: \"10\"\n  def stringy(size) when is_even(size), do: stringy(size - 1) <> \"0\"\n  def stringy(size), do: stringy(size - 1) <> \"1\"\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77602,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    1..size\n    |> Enum.map(fn(n) -> rem(n, 2) end)\n    |> Enum.join(\"\")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77603,"user_id":53,"body":"defmodule OneZeroSequencer do\n  def stringy(size) do\n    String.slice(String.duplicate(\"10\", trunc((size+1)\/2)), 0..size-1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77604,"user_id":null,"body":"defmodule OneZeroSequencer do\n  def stringy(size), do: Enum.map(1..size, & rem(&1,2) == 0 && \"0\" || \"1\") |> Enum.join(\"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"563e320cee5dddcf77000158":[{"id":77605,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks) do\n    Float.floor(Enum.sum(marks) \/ length(marks))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77606,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks) do\n    marks \n    |> Enum.sum\n    |> div(length(marks))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77607,"user_id":527,"body":"defmodule Calculator do\n  def get_average(marks) do\n    div(Enum.sum(marks), Enum.count(marks))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77608,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks) do\n    l = length(marks)\n    marks\n    |> Enum.sum\n    |> div(l)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77609,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks, acc \\\\ {0, 0})\n  def get_average([], {_, 0}), do: nil\n  def get_average([], {sum, count}), do: div(sum, count)\n  def get_average([head | tail], {sum, count}), do: get_average(tail, {sum + head, count + 1})\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77610,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks), do: Enum.sum(marks) \/ length(marks) |> trunc\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77611,"user_id":null,"body":"defmodule Calculator do\n  def get_average(a) do\n    div(Enum.sum(a), Enum.count(a)) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77612,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks), do: Float.floor(Enum.sum(marks) \/ length(marks))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77613,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks) do\n    Float.floor(Enum.sum(marks)\/Enum.count(marks))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77614,"user_id":null,"body":"defmodule Calculator do\n  def get_average(marks), do: trunc(Enum.sum(marks) \/ length(marks))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"563f0c54a22b9345bf000053":[{"id":77615,"user_id":492,"body":"defmodule Disguisedseqone do\n  \n  use Bitwise\n  \n  def fcn(n) do\n    1 <<< n\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77616,"user_id":null,"body":"defmodule Disguisedseqone do\n  \n  def fcn(n), do: :math.pow(2, n)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77617,"user_id":492,"body":"defmodule Disguisedseqone do\n  \n  use Bitwise\n  \n  def fcn(n) do\n    1 <<< n\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77618,"user_id":null,"body":"defmodule Disguisedseqone do\n  \n  def fcn(n) do\n    {1, 2}\n    |> Stream.iterate(fn {x, y} ->\n      {y, div(6 * x * y, 5 * x - y)}\n    end)\n    |> Stream.map(&elem(&1, 0))\n    |> Enum.at(n)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77619,"user_id":null,"body":"defmodule Disguisedseqone do\n  \n  def fcn(n) do\n    {1, 2}\n    |> Stream.unfold(fn {x, y} -> {x, {y, -(6 * x * y)\/(-5 * x + y)}} end)\n    |> Enum.at(n)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77620,"user_id":168,"body":"defmodule Disguisedseqone do\n  \n  def fcn(n) do\n    Bitwise.bsl(1, n)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77621,"user_id":null,"body":"defmodule Disguisedseqone do\n  require Integer\n  def fcn(n) do\n    :math.pow(2,n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77622,"user_id":null,"body":"defmodule Disguisedseqone do\n  \n  def fnc(0), do: 1\n  def fnc(1), do: 2\n  \n  def fcn(n) do\n    # your code\n    find(1, 2, 1, n)     \n  end\n  \n  def find(a, b, n, target) when n >= target, do: b\n  def find(a, b, n,target) do\n    find(b, div(6*a*b, 5*a - b ), n + 1, target)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77623,"user_id":null,"body":"defmodule Disguisedseqone do\n  require Bitwise\n  def fcn(0), do: 1\n  def fcn(1), do: 2\n  def fcn(n), do: Bitwise.bsl(1,n)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77624,"user_id":null,"body":"defmodule Disguisedseqone, do: def fcn(n), do: :math.pow(2,n)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"564057bc348c7200bd0000ff":[{"id":77625,"user_id":null,"body":"defmodule Divisible13 do\n\n  def thirt(n) do\n    thirt(n, 0)\n  end\n\n  def thirt(n, n) do\n    n\n  end\n\n  def thirt(n, _) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n    |> Stream.zip(Stream.cycle([1, 10, 9, 12, 3, 4]))\n    |> Stream.map(fn {a, b} -> a * b end)\n    |> Enum.reduce(&(&1 + &2))\n    |> thirt(n)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77626,"user_id":1774,"body":"defmodule Divisible13 do\n  @pattern [1, 10, 9, 12, 3, 4]\n  \n  def thirt(n), do: do_thirt(n, -1)\n  \n  defp do_thirt(n, prev) when n == prev, do: n\n  defp do_thirt(n, _prev) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n    |> Stream.zip(Stream.cycle(@pattern))\n    |> Stream.map(fn {i, n} -> i * n end)\n    |> Enum.sum\n    |> do_thirt(n)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77627,"user_id":492,"body":"defmodule Divisible13 do\n\n  defp sum(l), do: Enum.reduce(l, 0, &(&1 + &2))\n  \n  def thirt(n) when n < 100 do n end\n  def thirt(n) do\n    coef = [1,10,9,12,3,4] |> Stream.cycle\n    a = n |> Integer.digits |> Enum.reverse\n    Enum.zip(a, coef) |> Enum.map(fn({aa, cf}) -> aa * cf end) |> sum |> thirt\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77628,"user_id":null,"body":"\n# Kata: A Rule of Divisibility by 13\ndefmodule Divisible13 do\n\n  @moduledoc \"\"\"\n  This is the Divisibile13 module.\n  \"\"\"\n  \n  @doc \"\"\"\n  Multiply the right most digit of the number with the left \n  most number in the sequence shown above, the second right \n  most digit to the second left most digit of the number in \n  the sequence. The cycle goes on and you sum all these products. \n  Repeat this process until the sequence of sums is stationary.\n\n  Returns `stationary number`.\n\n  ## Examples\n\n      iex> Divisible13.thirt(8529)\n      79\n\n  \"\"\"\n\n  @pattern [1, 10, 9, 12, 3, 4]\n\n  def thirt(n) when is_integer(n) and n >= 0, do: priv_thirt(n, -1)\n\n  defp priv_thirt(n, prev) when is_integer(n) and n == prev, do: n\n\n  defp priv_thirt(n, _) when is_integer(n) and n >= 0 do\n      n\n      |> Integer.digits\n      |> Enum.reverse\n      |> Stream.zip(Stream.cycle(@pattern))\n      |> Enum.map(fn {x, y} -> x * y end)\n      |> Enum.sum\n      |> priv_thirt(n)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77629,"user_id":53,"body":"defmodule Divisible13 do\n  \n  def thirt(n), do: go(n,0,1,n)\n  defp go(n,s,_,0) when s==n, do: s\n  defp go(_,s,_,0), do: go(s,0,1,s)\n  defp go(n,s,r,m), do: go(n,s+rem(m,10)*r,rem(r*10,13),div(m,10))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77630,"user_id":null,"body":"defmodule Divisible13 do\n  def thirt(n, prev_n \\\\ nil)\n  def thirt(n, n), do: n\n\n  def thirt(n, _) do\n    n\n    |> Integer.digits()\n    |> Enum.reverse()\n    |> Enum.zip(Stream.cycle([1, 10, 9, 12, 3, 4]))\n    |> Enum.map(fn {a, b} -> a * b end)\n    |> Enum.sum()\n    |> thirt(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77631,"user_id":null,"body":"defmodule Divisible13 do\n\n  def thirtx(n) do\n    arr = [1,10,9,12,3,4]\n    dig = Enum.reverse(Integer.digits(n))\n    dig = Enum.sum(Enum.map(0..Enum.count(dig)-1,fn x ->\n    Enum.at(dig, x) * Enum.at(arr,Integer.mod(x,6)) end))\n  end\n\n  def thirt(n) do\n    dig = thirtx(n)\n    cond do\n      dig != thirtx(dig)->\n        dig = thirtx(dig)\n        thirt(dig)\n      true -> dig\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77632,"user_id":null,"body":"defmodule Divisible13 do\n\n  @seq2 [1, 10, 9, 12, 3, 4]\n  \n  def thirt(n, last \\\\ nil)\n  def thirt(n, n), do: n\n  def thirt(n, _) do\n    seq1 = n |> Integer.digits |> Enum.reverse\n     \n    @seq2\n    |> Stream.cycle\n    |> Stream.zip(seq1)\n    |> Stream.take(length(seq1))\n    |> Stream.map(fn {m, n} -> m * n end)      # in Elixir 1.12 you may use Tuple.product\/1 here\n    |> Enum.sum\n    |> thirt(n)\nend\n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77633,"user_id":null,"body":"defmodule Divisible13 do\n\n  def thirt(n, last \\\\ nil)\n  def thirt(n, n), do: n\n  def thirt(n, _) do\n    seq1 = n |> Integer.digits |> Enum.reverse\n    seq2 = [1, 10, 9, 12, 3, 4]\n    \n    res =     \n      seq2\n      |> Stream.cycle()\n      |> Enum.take(length(seq1))\n      |> Enum.zip(seq1)\n      |> Enum.reduce(0, fn {m, n}, acc -> m * n + acc end)\n    \n    thirt(res, n)\n  end\n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77634,"user_id":null,"body":"defmodule Divisible13 do\n  @sequence [1, 10, 9, 12, 3, 4]\n  \n  defp sum_of_products(n) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n    |> Enum.with_index\n    |> Enum.reduce(0, fn {digit, i}, sum -> digit * Enum.at(@sequence, rem(i, 6)) + sum end) \n  end\n  \n  def thirt(n) do\n    sum = sum_of_products(n)\n    case sum do\n      ^n -> n\n      _ -> thirt(sum)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5641275f07335295f10000d0":[{"id":77635,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    group\n    |> split_evenly()\n    |> amount_owed(group)\n  end\n  \n  defp split_evenly(map) do\n    map\n    |> Map.values()\n    |> Enum.sum()\n    |> Kernel.\/(map_size(map))\n  end\n  \n  defp amount_owed(split, map) do\n    map\n    |> Enum.map(fn {k, v} -> {k, Float.round(v - split, 2)} end)\n    |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77636,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    avg = (Map.values(group) |> Enum.sum) \/ map_size group\n    for {k, v} <- group, into: %{}, \n    do: {k, Float.round(v-avg, 2)} \n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77637,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    total_bill   = group |> Map.values |> Enum.sum\n    group_size   = group |> Map.keys |> length\n    splitted_pay = total_bill \/ group_size\n    Enum.reduce(group, %{}, &_split_the_bill(&1, &2, splitted_pay))\n  end\n\n  defp _split_the_bill({friend, spent}, acc, splitted_pay) do\n    Map.put(acc, friend, Float.round(spent - splitted_pay, 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77638,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n  \tsum = Enum.reduce(group, 0, fn({_, v}, acc) -> v + acc end)\n    share = sum \/ map_size(group)\n    Enum.reduce(group, %{}, fn({k, v}, acc) -> Map.put(acc, k, Float.round(v - share, 2)) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77639,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    group\n    |> Map.to_list()\n    |> Enum.into(%{}, fn {x, y} ->\n      {x, Float.round(y - (Map.values(group) |> Enum.sum()) \/ Map.size(group), 2)}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77640,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    g = Dict.to_list(group)\n    m = mean(g)\n    \n    Enum.reduce(g, %{}, fn\n      {k, v}, acc -> Map.put(acc, k, Float.round(v - m, 2))\n    end)\n  end\n  \n  defp mean(g), do: mean(g, length(g), 0)\n  defp mean([], _, m), do: m\n  defp mean([{_, v} | g], size, m), do: mean(g, size, v \/ size + m)\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77641,"user_id":53,"body":"defmodule SplitTheBill do\n  def split_the_bill(x) do\n    m = (Map.values(x) |> List.foldl(0, fn(e, n) -> e + n end)) \/ length(Map.values(x))\n    for {k, v} <- x, into: %{}, do: {k, Float.round(v - m, 2)} \n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77642,"user_id":null,"body":"\ndefmodule SplitTheBill do\n  def split_the_bill(group) do\n    n = length(Map.keys(group))\n    total = Enum.reduce(group, 0, fn({_, paid}, acc) -> paid + acc end)\n    cost_per = total \/ n\n    Enum.map(group, fn({k, v}) -> {k, Float.round((v - cost_per) * 10 \/ 10, 2)} end)\n    |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77643,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    # your code\n    IO.inspect group\n    sum = group |> Enum.reduce(0, fn ({_,amt},acc) -> IO.puts \"x is:\"; IO.inspect amt; acc+amt; end)\n    length = Enum.count(group)\n    avg = sum \/ length\n    group |> Map.new(fn ({name, amt}) -> {name, Float.round(amt - avg,2)}; end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77644,"user_id":null,"body":"defmodule SplitTheBill do\n  def split_the_bill(group) do\n    sum = Map.values(group) |> Enum.sum()\n    average =  sum\/(Enum.count(Map.values(group)))\n    Enum.map(Map.keys(group), fn key ->  {key, Float.round(Map.get(group, key) - average, 2)}  end )\n    |> Map.new()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5641a03210e973055a00000d":[{"id":77645,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) do\n    Float.round(n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77646,"user_id":null,"body":"defmodule Decimator do\n  require Float\n  \n  def two_decimal_places(n) do\n    Float.round(n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77647,"user_id":null,"body":"defmodule Decimator do\n  \n  def two_decimal_places(n), do: Float.round(n, 2)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77648,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) when is_float(n), do: n |> Float.round(2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77649,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) do\n    (Kernel.round(100 * n)) \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77650,"user_id":null,"body":"defmodule Decimator, do: def two_decimal_places(n), do: Float.round(n, 2)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77651,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) do\n    Float.round(n,2)\n  end\nend\n\n# test assert two_decimal_places(1.234566788) == 1.23","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77652,"user_id":null,"body":"defmodule Decimator do\n  defdelegate two_decimal_places(n,x \\\\ 2), to: Float, as: :round\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77653,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) do\n    Kernel.apply(&Float.round\/2, [n, 2])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77654,"user_id":null,"body":"defmodule Decimator do\n  def two_decimal_places(n) do\n  m = n * 100\n  m = round(m)\n  m \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56445c4755d0e45b8c00010a":[{"id":77655,"user_id":null,"body":"defmodule Bankerplan do\n\n  def fortune(_, _, _, 0, _), do: true\n  def fortune(f0, _, _, _, _) when f0 < 0, do: false\n  def fortune(f0, p, c0, n, i) do\n    fortune((f0 * (1 + p \/ 100) - c0) |> trunc, p, (c0 * (1 + i \/ 100)) |> trunc, n - 1, i)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77656,"user_id":492,"body":"defmodule Bankerplan do\n\n  defp fortune_aux(prev_x, p, prev_c, n, infl, k) do\n    if (k == n) do\n      prev_x >= 0\n    else\n      a = Float.floor(prev_x + p \/ 100.0 * prev_x - prev_c)\n      b = Float.floor(prev_c + infl \/ 100.0 * prev_c)\n      fortune_aux(a, p, b, n, infl, k + 1)\n    end\n  end\n  \n  def fortune(f0, p, c0, n, i) do\n    fortune_aux(f0, p, c0, n, i, 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77657,"user_id":null,"body":"defmodule Bankerplan do\n\n  def fortune(f0, p, c0, n, i) do\n    [{f,_c}] = plan(f0, p, c0, i)\n    |> Stream.drop(n-1)\n    |> Enum.take(1)\n    f >= 0\n  end\n  \n  defp plan(f, p, c, i) do\n    Stream.iterate({f, c }, fn \n      {f, c} ->\n        { trunc(f *(100+p)\/100 - c) , trunc(c * (100+i)\/100) }\n      end )\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77658,"user_id":null,"body":"defmodule Bankerplan do\n\n  def fortune(f, _, _, 1, _), do: f >= 0\n  def fortune(f0, p, c0, n, i) do\n    f1 = Float.floor(f0 + (p\/100) * f0 - c0)\n    c1 = Float.floor(c0 + (i\/100) * c0)\n    fortune(f1, p, c1, n - 1, i)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77659,"user_id":null,"body":"defmodule Bankerplan do\n\n  def fortune(f0, p, c0, n, i) do\n    annual_settlement(f0, p, c0, n, i)\n  end\n  \n  defp annual_settlement(_fx, _p, _cx, 0, i), do: true\n  defp annual_settlement(fx, _p, _cx, _n, _i) when fx < 0, do: false\n  defp annual_settlement(fx, p, cx, n, i) do\n    fnext = trunc(fx * (1 + p\/100) - cx)\n    cnext = trunc(cx * (1 + i \/ 100))\n    annual_settlement(fnext, p, cnext, n-1, i) \n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77660,"user_id":null,"body":"defmodule Bankerplan do\n  def fortune(f0, p, c0, n, i) do\n    Enum.reduce(1..(n - 1), {f0, c0}, fn _, {f0, c0} ->\n      {floor(f0 * (1 + p \/ 100.0) - c0), floor(c0 * (1 + i \/ 100.0))}\n    end)\n    |> elem(0) >= 0\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77661,"user_id":53,"body":"defmodule Bankerplan do\n\n  def fortune(f0, p, c0, n, i), do: aux(f0, p, c0, n, i) >= 0\n  defp aux(f0, _, _, 1, _), do: f0\n  defp aux(f0, p, c0, n, i) do\n    aux(f0 + f0 * trunc(p) \/ 100 - c0, p, c0 + c0 * trunc(i) \/ 100, n - 1, i)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77662,"user_id":null,"body":"defmodule Bankerplan do\n\n  def fortune(deposit, _, _, 1, _), do: deposit >= 0\n  def fortune(deposit, percent, withdraw, years, inflation), do:\n    fortune(\n      deposit + trunc(deposit * percent \/ 100) - withdraw,\n      percent,\n      withdraw + trunc(withdraw * inflation \/ 100),\n      years - 1,\n      inflation\n    )\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77663,"user_id":null,"body":"defmodule Bankerplan do\n  def fortune(f0, p, c0, n, i) when n > 1  and f0 > 0 do\n    fortune(floor((f0 + (f0 * p * 0.01)) - c0), p, floor(c0 + (c0 * i * 0.01)), n - 1, i)\n  end\n  \n  def fortune(f0, _p, _c0, _n, _i) when f0 >= 0, do: true\n  def fortune(_f0, _p, _c0, _n, _i), do: false  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77664,"user_id":null,"body":"defmodule Bankerplan do\n  def fortune(_f0, _p, _c0, 0, _i), do: true\n  def fortune(f0, _p, _c0, _n, _i) when f0 < 0, do: false\n  def fortune(f0, p, c0, n, i) do\n    f1 = f0+f0*p\/100-c0 |> trunc\n    c1 = c0+c0*i\/100 |> trunc\n    fortune(f1, p, c1, n-1, i)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56484848ba95170a8000004d":[{"id":77665,"user_id":null,"body":"defmodule Speedcontrol do\n    \n    def gps(_s, []), do: 0\n    def gps(s, x) do\n        x\n        |> Enum.map_reduce(0, fn (dist, acc) -> {calc_speed(dist - acc, s), dist} end) \n        |> Kernel.elem(0)\n        |> Enum.max\n        |> Float.floor \n    end\n\n    def calc_speed(dist, duration), do: dist \/ duration * 3600\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77666,"user_id":2098,"body":"defmodule Speedcontrol do\n  def gps(_s, []), do: 0\n  def gps(s, x) do\n      x\n      |> Enum.map_reduce(0, fn (coordinate, acc) ->\n        {get_average_speed(coordinate - acc, s), coordinate}\n      end)\n      |> elem(0)\n      |> Enum.max\n      |> Float.floor\n  end\n\n  defp get_average_speed(section, interval) do\n    section \/ interval * 3600\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77667,"user_id":492,"body":"defmodule Speedcontrol do\n\n    def gps(_, x) when length(x) <= 1 do 0 end\n    def gps(s, x) do\n        x \n        |> Enum.chunk(2, 1)\n        |> Enum.map(fn([p1, p2]) -> (p2 - p1) \/ s*3600.0 end)\n        |> Enum.max |> Float.floor |> round\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77668,"user_id":null,"body":"defmodule Speedcontrol do\n  def gps(_, x) when length(x) <= 1, do: 0\n  def gps(s, x) do\n    x\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [a, b] ->\n      (3600 * (b-a)) \/ s\n    end)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77669,"user_id":null,"body":"defmodule Speedcontrol do\n  def gps(_, x) when length(x) <= 1, do: 0\n\n  def gps(s, x) do\n    x\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [d0, d1] -> (3600 * (d1 - d0) \/ s) |> trunc() end)\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77670,"user_id":null,"body":"defmodule Speedcontrol do\n    \n    def gps(s, x) when length(x) <= 1, do: 0\n    def gps(s, x) do\n      1..length(x)-1\n      |> Enum.map(fn n -> (3600 * (Enum.at(x, n) - Enum.at(x, n-1)) \/ s) end)\n      |> Enum.max\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77671,"user_id":null,"body":"defmodule Speedcontrol do\n    def gps(_, x) when length(x) <= 1, do: 0\n    def gps(s, x) do\n      x\n        |> Enum.chunk(2, 1)\n        |> Enum.map(fn(pair) -> 3600 * delta(pair)\/s end)\n        |> Enum.max\n        |> round\n    end\n    \n    def delta(pair) do\n      List.last(pair) - List.first(pair)\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77672,"user_id":null,"body":"defmodule Speedcontrol do\n    def gps(_, x) when length(x) <= 1, do: 0\n    def gps(s, x) do\n        x\n        |> Enum.map_reduce(0, & {(3600 * (&1 - &2)) \/ s, &1})\n        |> elem(0)\n        |> Enum.max()\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77673,"user_id":null,"body":"defmodule Speedcontrol do\n  def gps(_, []), do: 0\n  def gps(_, [_]), do: 0\n\n  def gps(s, x) do\n    Enum.zip(x, tl(x))\n    |> Enum.map(fn {d0, d1} -> (3600 * (d1 - d0) \/ s) |> trunc() end)\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77674,"user_id":null,"body":"defmodule Speedcontrol do\n    def gps(_, x) when length(x) <= 1, do: 0\n    def gps(s, x) do\n        {n,_} = Enum.map_reduce(x, 0, fn(x, acc) -> {3600*(x-acc)\/s, x} end)\n        n\n        |> tl\n        |> Enum.max\n        |> Float.floor\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5648b12ce68d9daa6b000099":[{"id":77675,"user_id":null,"body":"defmodule Bus do\n  def number([]), do: 0\n  def number([{add, sub} | stops]) do\n    add - sub + number(stops)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77676,"user_id":1774,"body":"defmodule Bus do\n  def number(stops) do\n    Enum.reduce(stops, 0, fn({get_on, get_off}, total) ->\n      total + get_on - get_off\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77677,"user_id":1249,"body":"defmodule Bus do\n  def number(stops) do\n    {on, off} = Enum.unzip(stops)\n    Enum.sum(on) - Enum.sum(off)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77678,"user_id":null,"body":"defmodule Bus do\n\n  @doc \"\"\"\n  Find the final number of people on the bus after given the amount of\n  riders getting on and off the bus at each stop.\n  \"\"\"\n  @spec number([{non_neg_integer, non_neg_integer}]) :: non_neg_integer\n  def number(stops) do\n    Enum.reduce(stops, 0, fn\n      {a, b}, acc ->\n        acc + a - b\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77679,"user_id":null,"body":"defmodule Bus do\n\n  def number([]), do: 0\n\n  def number(stops) do\n    stops\n    |> Enum.map(&count_people_at_stop\/1)\n    |> Enum.sum()\n  end\n\n  defp count_people_at_stop({people_in, people_out}), do: people_in - people_out\n  \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77680,"user_id":null,"body":"defmodule Bus do\n  def number(stops) do\n    stops\n    |> Enum.map(&(elem(&1,0) - elem(&1,1)))\n    |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77681,"user_id":53,"body":"defmodule Bus do\n  def number(stops), do: stops |> Enum.reduce(0, &(&2 + elem(&1, 0) - elem(&1, 1)))\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77682,"user_id":null,"body":"defmodule Bus do\n  def number(stops) do\n    stops\n    |> Enum.reduce(0, fn {plus, minus}, acc -> \n      acc + plus - minus\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77683,"user_id":null,"body":"defmodule Bus do\n  def number([]), do: 0\n  def number([{0,0}]), do: 0\n  def number(stops) do\n    stops\n    |>Enum.map(fn {x,y} ->x-y end)\n    |>suma()\n  end\n  def suma([a,b]), do: a+b \n  def suma([a,b|tail]), do: suma([suma([a,b])|tail])\n    \nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77684,"user_id":null,"body":"defmodule Bus do\n  def number(stops) do\n    stop(stops, 0)\n  end\n  \n  defp stop([{people_in, people_out} | stops], people_left) do\n    stop(stops, people_left + people_in - people_out)\n  end\n  \n  defp stop([], people_left) do\n    people_left\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56541980fa08ab47a0000040":[{"id":77685,"user_id":null,"body":"defmodule Printererror do\n\n  def printer_error(s) do\n    \"#{count_wrong_colours(s)}\/#{String.length s}\"\n  end\n  \n  def count_wrong_colours(s) do\n    s \n    |> String.codepoints\n    |> Enum.count(fn codepoint -> codepoint > \"m\" end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77686,"user_id":null,"body":"defmodule Printererror do\n  def printer_error(s) do\n    \"#{count_errors(s)}\/#{String.length(s)}\"\n  end\n  \n  defp count_errors(s) do\n    s\n    |> String.split(\"\")\n    |> Enum.filter(&(&1 > \"m\"))\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77687,"user_id":null,"body":"defmodule Printererror do\n\n  def printer_error(s) do\n     String.replace(s, ~r\/[a-m]\/, \"\")\n      |> String.length\n      |> (&(\"#{&1}\/#{String.length(s)}\")).()\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77688,"user_id":null,"body":"defmodule Printererror do\n  \n  def printer_error(s) do\n    errors = Regex.scan(~r\/[n-z]\/, s)\n    \"#{Enum.count(errors)}\/#{String.length(s)}\"\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77689,"user_id":null,"body":"defmodule Printererror do\n  def printer_error(s) do\n    \"#{s |> to_char_list |> Enum.count(&(&1 > ?m))}\/#{byte_size(s)}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77690,"user_id":492,"body":"defmodule Printererror do\n\n  def printer_error(s) do\n    a = String.replace(s, ~r\/[n-z]\/, \"\", global: true)\n    \"#{String.length(s) - String.length(a)}\/#{String.length(s)}\"\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77691,"user_id":null,"body":"defmodule Printererror do\n  @valid_letters String.graphemes(\"abcdefghijklm\")\n\n  def printer_error(str) do\n    err_count =\n      str\n      |> String.graphemes()\n      |> Enum.count(&(&1 not in @valid_letters))\n\n    len = String.length(str)\n\n    \"#{err_count}\/#{len}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77692,"user_id":null,"body":"defmodule Printererror do\n\n   def printer_error(s) do\n    range = Enum.map(?a..?m, fn(x) -> <<x :: utf8>> end)\n\n    String.codepoints(s)\n    |> Enum.filter(&(&1 not in range))\n    |> Enum.count()\n    |> (fn x -> \"#{x}\/#{byte_size(s)}\" end).()\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77693,"user_id":null,"body":"defmodule Printererror do\n\n  def printer_error(s) do\n    \"#{count_errors(s)}\/#{String.length(s)}\"\n  end\n\n  defp count_errors(s) do\n    s\n    |> String.codepoints\n    |> Enum.count(&(&1 > \"m\"))    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77694,"user_id":2855,"body":"defmodule Printererror do\n  def printer_error(s) do\n\t\t\"#{String.replace(s, ~r\/[a-m]\/, \"\", global: true) |> String.length}\/#{String.length(s)}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5656b6906de340bd1b0000ac":[{"id":77695,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    a <> b |> String.graphemes |> Enum.uniq |> Enum.sort |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77696,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    a <> b\n    |> String.graphemes\n    |> Enum.uniq\n    |> Enum.sort\n    |> Enum.join\n  end\nend\n\n#[\"l\", \"o\", \"o\", \"p\", \"i\", \"n\", \"g\", \"i\", \"s\", \"f\", \"u\", \"n\", \"b\", \"u\", \"t\", \"d\",\n# \"a\", \"n\", \"g\", \"e\", \"r\", \"o\", \"u\", \"s\"]","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77697,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    a <> b\n    |> String.graphemes\n    |> Enum.sort\n    |> Enum.dedup\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77698,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    String.graphemes(a <> b)\n    |> Stream.uniq\n    |> Enum.sort\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77699,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    (a <> b)\n    |> String.graphemes()\n    |> MapSet.new()\n    |> Enum.into(\"\")\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77700,"user_id":2855,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n\t\tString.graphemes(a <> b)\n      |> Enum.uniq\n      |> Enum.sort\n      |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77701,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    String.split(a, \"\") ++ String.split(b, \"\")\n    |> MapSet.new() \n    |> Enum.join(\"\")\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77702,"user_id":2098,"body":"defmodule TwoToOne do\n  def longest(a, b), do: a |> contained_chars(b)\n  defp contained_chars(a, b), do: Enum.filter(chars, &String.contains?(a <> b, &1)) |> Enum.sort |> Enum.join\n  defp chars, do: ?a..?z |> Enum.map(&to_string([&1]))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77703,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    (a <> b)\n    |> String.graphemes()\n    |> MapSet.new()\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77704,"user_id":null,"body":"defmodule TwoToOne do\n  def longest(a, b) do\n    a <> b\n    |> to_char_list\n    |> Enum.uniq\n    |> Enum.sort\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5657d8bdafec0a27c800000f":[{"id":77705,"user_id":null,"body":"defmodule Kata do\n  @doc \"\"\"\n      Takes 2D points as tuples and computes convex hull.\n  \"\"\"\n  @spec hull_method([{integer, integer}]) :: [{integer, integer}]\n\n  def hull_method(points) do\n    points = Enum.with_index(points)\n    start = {{x, y}, _} = points |> Enum.max(fn {{_, y1}, _}, {{_, y2}, _} -> y1 >= y2 end)\n    next({{x - 1, y}, -1}, start, points, [start]) |> Enum.map(fn {p, _} -> p end)\n  end\n\n  def next({_, n1} = g1, {_, n2} = g2, points, r) do\n    {{_, nn} = ng, pa} =\n      Enum.reduce(points, {nil, 0}, fn\n        {_, n3}, acc when n3 in [n1, n2] -> acc\n        g3, acc -> angle(g1, g2, g3) |> check(g3, acc)\n      end)\n\n    {_, ln} = List.last(r)\n    if ln == nn, do: colinear(pa, r), else: next(g2, ng, points, [ng | colinear(pa, r)])\n  end\n\n  @pi :math.pi()\n  def colinear(pa, [_ | rr]) when pa >= @pi, do: rr\n  def colinear(_, r), do: r\n\n  def check(nil, _, ma), do: ma\n  def check(ca, _, {_, pa} = ma) when ca <= pa, do: ma\n  def check(ca, g3, _), do: {g3, ca}\n\n  def angle({{x1, y1}, _}, {{x2, y2}, _}, {{x3, y3}, _}) do\n    a2 = :math.pow(x2 - x1, 2) + :math.pow(y2 - y1, 2)\n    b2 = :math.pow(x3 - x2, 2) + :math.pow(y3 - y2, 2)\n    c2 = :math.pow(x3 - x1, 2) + :math.pow(y3 - y1, 2)\n\n    cond do\n      a2 == 0 || b2 == 0 -> nil\n      true -> ((a2 + b2 - c2) \/ (2 * :math.sqrt(a2) * :math.sqrt(b2))) |> max(-1) |> min(1) |> :math.acos()\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77706,"user_id":null,"body":"defmodule Kata do\n  def hull_method(points) do\n    sorted = points |> Enum.sort\n    left = sorted |> do_half_calc\n    right = sorted |> Enum.reverse |> do_half_calc\n    [left, right] |> Enum.concat\n  end\n\n  def do_half_calc(points) do\n    points\n    |> Enum.reduce([], &add_to_convex_list\/2)\n    |> tl\n    |> Enum.reverse\n  end\n\n  def perp_prod({x0, y0}, {x1, y1}, {x2, y2}) do\n    (x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0)\n  end\n\n  def add_to_convex_list(p2, list) do\n    {:ok, new_tail} =\n      list\n      |> stream_tails\n      |> Stream.drop_while(fn tail -> oa_left_of_ob(p2, tail) end)\n      |> Enum.fetch(0)\n    [p2 | new_tail]\n  end\n\n  def oa_left_of_ob(b, [a, o | _]), do: perp_prod(o, a, b) <= 0\n  def oa_left_of_ob(_, _), do: false\n\n  def stream_tails(list) do\n    tails = Stream.unfold(list, fn [_ | t] -> {t, t} end)\n    Stream.concat([list], tails)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77707,"user_id":null,"body":"defmodule Kata do\n    defp cross({ax,ay},{bx,by},{ox,oy}), do: (ax-ox) * (by-oy) - (bx-ox) * (ay-oy)\n\n    defp pop(p,[b,a|q]), do:\n        if cross(a,b,p) > 0, do: [p,b,a|q], else: pop(p,[a|q])\n    defp pop(p,q), do: [p|q]\n\n    @doc \"\"\"\n        Takes 2D points as tuples and computes convex hull.\n    \"\"\"\n    @spec hull_method([{integer, integer}]) :: [{integer, integer}]\n    \n    def hull_method(points) do\n        points = Enum.sort(points)\n\n        [points, Enum.reverse(points)]\n        |> Enum.flat_map(fn pts -> pts |> Enum.reduce([], &pop\/2) |> tl end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77708,"user_id":null,"body":"# Based on: https:\/\/github.com\/TheAlgorithms\/Python\/blob\/master\/other\/graham_scan.py\n# With modifications to handle duplicated and collinear points.\n\ndefmodule Kata do\n  @doc \"\"\"\n      Takes 2D points as tuples and computes convex hull.\n  \"\"\"\n  @spec hull_method([{integer, integer}]) :: [{integer, integer}]\n\n  def hull_method(points), do: Enum.uniq(points) |> graham_scan()\n\n  def graham_scan(points) when length(points) < 3,\n    do: raise(\"graham_scan: argument must contain at least 3 points\")\n\n  def graham_scan(points) when length(points) == 3, do: points\n\n  def graham_scan(points) do\n    # Find the lowest and the most left point\n    minidx =\n      Enum.min_by(0..(length(points) - 1), fn i ->\n        {x, y} = Enum.at(points, i)\n        {y, x}\n      end)\n\n    # Remove the lowest and the most left point from points, preparing for sort.\n    {minp, points2} = List.pop_at(points, minidx)\n    {minx, miny} = minp\n\n    # Group by angle from min point.\n    map_points =\n      Enum.reduce(points2, %{}, fn point, map_p ->\n        {px, py} = point\n        angle = :math.atan2(py - miny, px - minx)\n\n        if Map.has_key?(map_p, angle) do\n          {x, y} = map_p[angle]\n          # If two points have the same angle, keep only the farther point.\n          if hypot(minx - x, miny - y) < hypot(minx - px, miny - py),\n            do: Map.put(map_p, angle, point),\n            else: map_p\n        else\n          Map.put(map_p, angle, point)\n        end\n      end)\n\n    sorted_points = [\n      minp\n      | Enum.sort(Map.keys(map_points)) |> Enum.map(fn angle -> map_points[angle] end)\n    ]\n\n    scan(Enum.slice(sorted_points, 0..2) |> Enum.reverse(), Enum.slice(sorted_points, 3..-1))\n  end\n\n  def scan(stack, []), do: stack\n\n  def scan([via, starting | _] = stack, [target | rest_points] = points) do\n    case check_direction(starting, via, target) do\n      :left ->\n        scan([target | stack], rest_points)\n\n      :straight ->\n        # Remove the middle collinear point.\n        [_ | stack2] = stack\n        scan([target | stack2], rest_points)\n\n      _ ->\n        # There is a point that is more to the right, so the point at\n        # the top of the stack is not on the convex hull.\n        [_ | stack2] = stack\n        scan(stack2, points)\n    end\n  end\n\n  # Return the direction from starting toward the via-to-target line.\n  def check_direction(starting, via, target) do\n    {x0, y0} = starting\n    {x1, y1} = via\n    {x2, y2} = target\n    via_angle = :math.atan2(y1 - y0, x1 - x0)\n    via_angle2 = if via_angle < 0, do: via_angle + 2 * :math.pi(), else: via_angle\n    target_angle = :math.atan2(y2 - y0, x2 - x0)\n    target_angle2 = if target_angle < 0, do: target_angle + 2 * :math.pi(), else: target_angle\n\n    # t-\n    #  \\ \\\n    #   \\ v\n    #    \\|\n    #     s\n    # via_angle is always lower than target_angle, if direction is left.\n    # If they are same, it means they are on a same line of convex hull.\n    cond do\n      target_angle2 > via_angle2 -> :left\n      target_angle2 == via_angle2 -> :straight\n      true -> :right\n    end\n  end\n\n  def hypot(x, y), do: :math.sqrt(x * x + y * y)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77709,"user_id":null,"body":"defmodule Kata do\n\n  def hull_method(points), do: get_convex_hull(Enum.uniq(points))\n\n  defp get_convex_hull(points) do\n    start = get_start_point(points)\n    sorted_points =\n      points\n      |> List.delete(start)\n      |> Enum.sort_by(&{get_polar_angle(&1, start), get_distance(&1, start)})\n    get_convex_hull(List.delete_at(sorted_points, 0), [Enum.at(sorted_points, 0), start])\n    |> filter_collinear\n  end\n\n  defp get_convex_hull([], stack), do: stack\n  defp get_convex_hull([head | tail], stack) do\n    get_convex_hull(tail, [head | get_stack(head, stack)])\n  end\n\n  defp get_stack(point, [h1, h2 | tail]) do\n    case is_left_rotation?(h2, h1, point) do\n      true -> [h1, h2 | tail]\n      false -> get_stack(point, [h2 | tail])\n    end\n  end\n\n  defp is_left_rotation?({ax, ay}, {bx, by}, {cx, cy}), do: (bx - ax) * (cy - by) - (by - ay) * (cx - bx) >= 0\n\n  defp get_start_point(points), do: Enum.min_by(points, fn {x, y} -> {y, x} end)\n\n  defp get_distance({x1, y1}, {x2, y2}), do: :math.sqrt(:math.pow(x2 - x1, 2) + :math.pow(y2 - y1, 2))\n\n  defp get_polar_angle({x, y}, {x0, y0}), do: :math.atan2(y - y0, x - x0)\n\n  defp filter_collinear(points) do\n    odd_points = get_collinear_points(points)\n    points\n    |> Enum.reduce([], fn x, acc -> if x in odd_points, do: acc, else: [x | acc] end)\n  end\n\n  defp get_collinear_points([h1, h2 | tail]), do: get_collinear_points([h1, h2 | tail] ++ [h1, h2], [])\n\n  defp get_collinear_points([_, _], acc), do: acc\n\n  defp get_collinear_points([h1, h2, h3 | tail], acc) do\n    case are_points_on_same_line?(h2, h1, h3) do\n      true -> get_collinear_points([h2, h3 | tail], [h2 | acc])\n      false -> get_collinear_points([h2, h3 | tail], acc)\n    end\n  end\n\n  defp are_points_on_same_line?(a, b, c), do: get_distance(a, b) + get_distance(a, c) == get_distance(b, c)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"565abd876ed46506d600000d":[{"id":77710,"user_id":53,"body":"defmodule Simpson do\n  defp f(x), do: 1.5*:math.pow(:math.sin(x),3)\n  def simpson(n), do: go(1,0,n)\n  defp go(i,s,n) when i>=n, do: s*(:math.pi\/3)\/n\n  defp go(i,s,n), do: go(i+1,s+(2+rem(i,2)*2)*f((:math.pi\/n)*i),n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77711,"user_id":492,"body":"defmodule Simpson do\n  defp f(x) do\n    (3.0 \/ 2.0) * :math.pow(:math.sin(x), 3)\n  end\n  def simpson(n) do\n      h =  :math.pi \/ n\n      s1 = Enum.reduce(1..round(Float.floor(n \/ 2)), 0, fn(i, s) -> s + f((2 * i - 1) * h) end)\n      s2 = Enum.reduce(1..round(Float.floor(n \/ 2)) - 1, 0, fn(i, s) -> s + f(2 * i * h) end)\n      #IO.puts(\"s1: #{s1} s2: #{s2}\")\n      :math.pi \/ (3 * n) * (f(0) + f(:math.pi) + 4 * s1 + 2 * s2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77712,"user_id":492,"body":"defmodule Simpson do\n  defp f(x) do\n    (3.0 \/ 2.0) * :math.pow(:math.sin(x), 3)\n  end\n  def simpson(n) do\n      h =  :math.pi \/ n\n      s1 = Enum.reduce(1..round(Float.floor(n \/ 2)), 0, fn(i, s) -> s + f((2 * i - 1) * h) end)\n      s2 = Enum.reduce(1..round(Float.floor(n \/ 2)) - 1, 0, fn(i, s) -> s + f(2 * i * h) end)\n      #IO.puts(\"s1: #{s1} s2: #{s2}\")\n      :math.pi \/ (3 * n) * (f(0) + f(:math.pi) + 4 * s1 + 2 * s2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77713,"user_id":null,"body":"defmodule Simpson do\n  require Integer\n\n  def f(x) do\n    s = :math.sin(x)\n    3 * s * s * s \/ 2\n  end\n\n  def simpson(n) do\n    h = :math.pi() \/ n\n\n    (Enum.map(0..n, fn i ->\n       f(i * h) *\n         case i do\n           0 -> 1\n           ^n -> 1\n           _ when Integer.is_even(i) -> 2\n           _ -> 4\n         end\n     end)\n     |> Enum.sum()) * h \/ 3\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77714,"user_id":null,"body":"defmodule Simpson do\n  \n  @spec simpson(integer()) :: float()\n  def simpson(n) do\n    a = 0\n    b = :math.pi()\n    h = (b-a) \/ n\n\n    (b - a)\/ (3 * n) * (fun(a) + fun(b) + 4 * term(a, h, n) + 2 * another_term(a, h, n)) \n  end\n\n  @spec fun(number()) :: number()\n  def fun(x) do\n    3\/2 * :math.pow(:math.sin(x), 3)\n  end\n\n  @spec term(integer(), float(), integer()) :: float()\n  def term(a, h, n) do\n    result = for x <- (1..div(n, 2)), do: fun(a + (2 * x - 1) * h)\n    Enum.sum(result)\n  end\n\n  @spec another_term(integer(), float(), integer()) :: float()\n  def another_term(a, h, n) do\n    result = for x <- (1..(div(n, 2)-1)), do: fun(a + 2 * x * h)\n    Enum.sum(result)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77715,"user_id":null,"body":"defmodule Simpson do\n  def simpson(n) do\n      b = :math.pi\n      a = 0\n      h = (b - a) \/ n\n      \n      ((b - a) \/ (3 * n)) * (cstm_fct(a) + cstm_fct(b) + 4 * sum_1_hat(a, h, n) + 2 * sum_2_hat(a, h, n))\n  end\n  \n  defp cstm_fct(x), do: 1.5 * :math.pow(:math.sin(x), 3)\n  \n  defp sum_1_hat(a, h, n), do: sum_1(div(n, 2), 0, a, h)\n  defp sum_1(0, acc, _a, _h), do: acc\n  defp sum_1(i, acc, a, h), do: sum_1(i - 1, acc + cstm_fct(a + (2 * i - 1) * h), a, h)\n  \n  defp sum_2_hat(a, h, n), do: sum_2(div(n, 2) - 1, 0, a, h)\n  defp sum_2(0, acc, _a, _h), do: acc\n  defp sum_2(i, acc, a, h), do: sum_2(i - 1, acc + cstm_fct(a + 2 * i * h), a, h)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77716,"user_id":null,"body":"defmodule Simpson do\n\n  def simpson(n), do: formula(fn x -> 3 \/ 2 * :math.pow(:math.sin(x), 3) end, 0, :math.pi, n)\n\n  defp formula(f, a, b, n), do:\n    [&term_1\/4, &term_2\/4, &term_3\/4]\n    |> Enum.map(& &1.(f, a, b, n))\n    |> Enum.sum\n    |> Kernel.*((b - a) \/ (3 * n))\n\n  defp term_1(f, a, b, _n), do: f.(a) + f.(b)\n  defp term_2(f, a, b, n), do: (&(4 * Enum.sum(for i <- 1..div(n, 2), do: f.(a + (2 * i - 1) * &1)))).((b - a) \/ n)\n  defp term_3(f, a, b, n), do: (&(2 * Enum.sum(for i <- 1..div(n, 2) - 1, do: f.(a + 2 * i * &1)))).((b - a) \/ n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77717,"user_id":null,"body":"defmodule Simpson do\n  def simpson(n) do\n    # your code\n    b = :math.pi()\n    h = b \/ n\n\n    h \/ 3 *\n      (y(b) + 4 * summation(n, h, round(n \/ 2), fn h, i -> (2 * i - 1) * h end) +\n         2 * summation(n, h, round(n \/ 2 - 1), fn h, i -> 2 * i * h end))\n  end\n\n  def y(x) do\n    1.5 * :math.sin(x) * :math.sin(x) * :math.sin(x)\n  end\n\n  def summation(n, h, max, fun) do\n    Enum.reduce(1..max, 0, fn i, acc ->\n      y(fun.(h, i)) + acc\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77718,"user_id":null,"body":"defmodule Simpson do\n    defp f(x), do: 1.5 * :math.pow(:math.sin(x), 3)\n    \n    def simpson(n) do\n       k = :math.pi\/(3*n)\n       h = 3*k\n       m = div(n,2)\n       k * Enum.reduce(1..m, f(0)+f(:math.pi)-2*f(2*m*h), fn i,t -> t+4*f(2*i*h-h)+2*f(2*i*h) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77719,"user_id":null,"body":"defmodule Simpson do\n\n\n  def simpson(n) do\n      simpson(n,&func\/1,0,:math.pi)\n  end\n\n  def simpson(n,f,a,b) do\n    h = (b-a)\/n\n    p1 = (b-a)\/(3*n)\n    p2 = f.(a) + f.(b)\n    p3 = 1..div(n,2) |> Enum.map( & f.(a+(2*&1-1)*h) ) |> Enum.sum() |> Kernel.*(4)\n    p4 = 1..(div(n,2)-1) |> Enum.map( & f.(2*a+2*&1*h)) |> Enum.sum() |> Kernel.*(2)\n    p1*(p2+p3+p4)\n  end\n\n  def func(x) do\n    y=:math.sin(x)\n    y*y*y*3\/2\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"565c0fa6e3a7d39dee000125":[{"id":77720,"user_id":492,"body":"defmodule Brakingwell do\n\n    def dist(v, mu) do\n        # acceleration due to gravity in m\/s\n        g = 9.81             \n        # km\/h -> m\/s\n        coef = 1000 \/ 3600.0       \n        # distance of reaction with t = 1\n        dreact = v * coef         \n        # speed in m\/s\n        vms = coef * v           \n        # braking distance\n        dbrak = 0.5 * :math.pow(vms, 2) \/ mu \/ g \n        dreact + dbrak           \n    end\n    # suppose reaction time is 1\n    def speed(d, mu) do\n        # acceleration due to gravity in m\/s\n        g = 9.81             \n        # m\/s -> km\/h\n        coef = 3600 \/ 1000.0      \n        0.5 * mu * g * (- 2 + :math.sqrt(4 + 8*d\/mu\/g)) * coef\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77721,"user_id":null,"body":"defmodule Brakingwell do\n  # suppose reaction time is 1\n  def dist(v, mu) do\n    g = 9.81\n    ms = 5 \/ 18 * v\n    ms + ms * ms \/ (2 * mu * g)\n  end\n\n  # suppose reaction time is 1\n  def speed(d, mu) do\n    g = 9.81\n    0.5 * mu * g * (-2 + :math.sqrt(4 + 8 * d \/ mu \/ g)) * 3.6\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77722,"user_id":1774,"body":"defmodule Brakingwell do\n  @g 9.81\n  @rt 1\n  \n  def dist(v, mu) do\n    calc_dist kmph_to_mps(v), mu\n  end\n  \n  def speed(d, mu) do\n    mps_to_kmph calc_speed(d, mu)\n  end\n  \n  defp calc_dist(v, mu), do: v*@rt + :math.pow(v, 2) \/ (2*mu*@g)\n  \n  defp calc_speed(d, mu), do: (:math.sqrt(@rt + 2*d\/(mu*@g)) - @rt) * mu*@g\n  \n  defp kmph_to_mps(v), do: v*1000\/3600\n  \n  defp mps_to_kmph(v), do: v*3600\/1000\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77723,"user_id":null,"body":"defmodule Brakingwell do\n\n    @g 9.81\n    @m_s 3.6\n\n    def dist(v, mu) do\n      vms = v\/@m_s\n      vms + :math.pow(vms, 2) \/ (2*mu*@g)\n    end\n    \n    # suppose reaction time is 1\n    def speed(d, mu) do\n      a = 2 * mu * @g\n      (:math.sqrt(a*d + :math.pow(a\/2, 2)) - a\/2) * @m_s\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77724,"user_id":null,"body":"defmodule Brakingwell do\n  def dist(v, mu) do\n    v2 = v * 1000 \/ 3600.0\n    v * 1000 \/ 3600.0 + v2 * v2 \/ (19.62 * mu)\n  end\n\n  # suppose reaction time is 1\n  def speed(d, mu) do\n    mu2 = 19.62 * mu\n    1800.0 \/ 1000 * (:math.sqrt(mu2 * mu2 + 78.48 * mu * d) - 19.62 * mu)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77725,"user_id":null,"body":"defmodule Brakingwell do\n\n#     g = 9.81\n#     k = 3.600\n    def dist(v, mu) do\n        # your code \n        g = 9.81\n        k = 3.600\n        t = 1\n        v1 = v \/ k; \n        v1 * t + v1 * v1 \/ (mu * 2 * g); \n    end\n    # suppose reaction time is 1\n    def speed(d, mu) do\n         g = 9.81\n         k = 3.600\n         t = 1\n         k * (:math.sqrt(g * mu * (2 * d + g * t * t * mu)) - g * t * mu)# your code      \n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77726,"user_id":null,"body":"defmodule Brakingwell do\n  def dist(v, mu) do\n    w = kph_to_mps(v)\n    g = 9.81\n    w + (w * w) \/ (2 * mu * g)\n  end\n  # suppose reaction time is 1\n  def speed(d, mu) do\n    mu_g = mu * 9.81\n    -mu_g + :math.sqrt(:math.pow(mu_g, 2) + 2 * mu_g * d)\n      |> mps_to_kph\n  end\n\n  defp kph_to_mps(v), do: v * 10 \/ 36\n  \n  defp mps_to_kph(w), do: w * 3.6\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77727,"user_id":53,"body":"defmodule Brakingwell do\n\n    def dist(v, mu) do\n        u = v * 5 \/ 18 \n        u + (u * u) \/ (2 * mu * 9.81)\n    end\n    def speed(d, mu) do\n        b = -2 * mu * 9.81\n        3.6 * (b + :math.sqrt(b * b - 4 * b * d)) \/ 2\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77728,"user_id":null,"body":"defmodule Brakingwell do\n    \n    def dist(v, mu) do\n        v_ms = v\/3.6\n        denominator = 2*mu* 9.81\n        \n        (v_ms*v_ms \/denominator) + v_ms\n    end\n    # suppose reaction time is 1\n    def speed(d, mu) do\n        den = 2*mu*9.81\n        roots(den, -d*den)*3.6\n    end\n    \n    defp roots(b, c) do\n      d = b * b - (4*1*c)\n      sd = :math.sqrt(d)\n      (- b + sd) \/ 2\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77729,"user_id":null,"body":"defmodule Brakingwell do\n\n  def dist(v, mu) do\n    vs = v\/3.6\n    vs + (vs * vs) \/ (2 * mu * 9.81)    \n  end\n  \n  def speed(d, mu) do\n      delta = (2*mu*9.81)*(2*mu*9.81) + 4*2*mu*9.81*d      \n      3.6 *  (-2*mu*9.81 + :math.sqrt(delta)) \/ 2\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"565f5825379664a26b00007c":[{"id":77730,"user_id":2192,"body":"defmodule Measurer do\n  def get_size(w, h, d) do\n    { get_area(w, h, d), get_depth(w, h, d) }\n  end\n  \n  defp get_area(w, h, d) do\n    (2 * get_area(w, h)) +\n    (2 * get_area(h, d)) +\n    (2 * get_area(w, d))\n  end\n  \n  defp get_area(w, h), do: w * h\n  defp get_depth(w, h, d), do: w * h * d\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77731,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n  \tvolume = width * height * depth\n    total_surface_area = width * height * 2 + width * depth * 2 + height * depth * 2\n    {total_surface_area, volume}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77732,"user_id":null,"body":"defmodule Measurer do\n  def get_size(w, h, d) do\n    { 2*(w*h + w*d + h*d), w*h*d }\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77733,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    { get_area(width, height, depth), width * height * depth}\n  end\n  \n  defp get_area(w, h, d) do  \n    2 * (w * h) + 2 * (w * d) + 2 * (h * d)  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77734,"user_id":964,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    surface_area = 2 * (width * height + height * depth + depth * width)\n    volume = width * height * depth\n    {surface_area, volume}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77735,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    sa = (width * height * 2) + (width * depth * 2) + (height * depth * 2)\n    v = (width * height * depth)\n    {sa, v}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77736,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    {2*(width*height + width*depth + height*depth), width*height*depth}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77737,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    {2*width*height+2*height*depth+2*width*depth, width*height*depth}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77738,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    { get_area([width, height, depth]) * 2, width * height * depth }\n  end\n  defp get_area([]), do: 0\n  defp get_area([first | rest]) do\n    Enum.reduce(rest, 0, fn(n, acc) -> n * first + acc end) + get_area(rest)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77739,"user_id":null,"body":"defmodule Measurer do\n  def get_size(width, height, depth) do\n    #TODO ...\n    {2 * (width * depth + width * height + height * depth), width * height * depth}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5663f5305102699bad000056":[{"id":77740,"user_id":492,"body":"defmodule MaxDiff do\n\n    def mxdiflg(a1, _) when (a1 == []), do: -1\n    def mxdiflg(_, a2) when (a2 == []), do: -1\n    def mxdiflg(a1, a2) do\n        l1 = a1 |> Enum.map(&String.length\/1)\n        l2 = a2 |> Enum.map(&String.length\/1)\n        max(abs((l1 |> Enum.max) - (l2 |> Enum.min)), abs((l2 |> Enum.max) - (l1 |> Enum.min)))\n    end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77741,"user_id":null,"body":"defmodule MaxDiff do\n    def mxdiflg([], a2), do: -1\n    def mxdiflg(a1, []), do: -1\n    \n    def mxdiflg(a1, a2) do\n        {min_1, max_1} = Enum.min_max_by(a1, &String.length\/1)\n        {min_2, max_2} = Enum.min_max_by(a2, &String.length\/1)\n        \n        Enum.max([\n          String.length(max_1) - String.length(min_2), \n          String.length(max_2) - String.length(min_1)\n        ])\n    end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77742,"user_id":null,"body":"defmodule MaxDiff do\n  def mxdiflg([], _), do: -1\n  def mxdiflg(_, []), do: -1\n\n  def mxdiflg(a1, a2) do\n    for(x <- a1, y <- a2, do: abs(String.length(x) - String.length(y)))\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77743,"user_id":null,"body":"defmodule MaxDiff do\n  def mxdiflg([], _), do: -1\n  def mxdiflg(_, []), do: -1\n\n  def mxdiflg(a1, a2) do\n    {min_1, max_1} = a1 |> Enum.map(&String.length\/1) |> Enum.min_max()\n    {min_2, max_2} = a2 |> Enum.map(&String.length\/1) |> Enum.min_max()\n\n    max(max_1 - min_2, max_2 - min_1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77744,"user_id":null,"body":"defmodule MaxDiff do\n    \n    def mxdiflg([], _), do: -1\n    def mxdiflg(_, []), do: -1\n    def mxdiflg(a1, a2), do: Enum.max(for x <- a1, y <- a2, do: abs(String.length(x) - String.length(y)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77745,"user_id":53,"body":"defmodule MaxDiff do\n    def mxdiflg(xs, ys), do: walk(xs, ys, 0, 0, -1)\n    defp walk(xs, _, i, _, m) when i >= length(xs), do: m\n    defp walk(xs, ys, i, j, m) when j >= length(ys), do: walk(xs, ys, i+1, 0, m)\n    defp walk(xs, ys, i, j, m), do: walk(xs, ys, i, j+1, proc(Enum.at(xs, i), Enum.at(ys, j), m))\n    defp proc(x, y, m), do: max(m, abs(String.length(x) - String.length(y)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77746,"user_id":null,"body":"defmodule MaxDiff do\n  def mxdiflg([], _), do: -1\n  def mxdiflg(_, []), do: -1\n\n  def mxdiflg(a1, a2) do\n    [a1, a2]\n    |> Enum.map(&min_max_string_length\/1)\n    |> max_diff()\n  end\n\n  defp min_max_string_length(list) do\n    list\n    |> Enum.map(&String.length\/1)\n    |> Enum.min_max()\n  end\n\n  defp max_diff([{min_1, max_1}, {min_2, max_2}]) do\n    max(\n      max_1 - min_2,\n      max_2 - min_1\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77747,"user_id":null,"body":"defmodule MaxDiffGuard do\n    @moduledoc\"\"\"\n    You are given two arrays a1 and a2 of strings. Each string is composed with letters from a to z. Let x be any string in the first array and y be any string in the second array.\n\n    Find max(abs(length(x) \u2212 length(y)))\n    \n    If a1 and\/or a2 are empty return -1 in each language except in Haskell (F#) where you will return Nothing (None).\n    \"\"\"\n    defguard is_not_empty(a1, a2) when length(a1) > 0 or length(a2) > 0 \n    defguard is_empty(a1, a2) when length(a1) == 0 or length(a2) == 0 \n\nend\ndefmodule MaxDiff do\n    import MaxDiffGuard\n    def mxdiflg(a1, a2) when is_empty(a1, a2)  do\n        -1\n    end\n    def mxdiflg(a1, a2) when is_not_empty(a1, a2)  do\n        # your code \n        a= a1 |> Enum.map(fn(x) -> \n            y = String.length(x)\n            y\n        end) \n        b = a2 |> Enum.map(fn(x) ->\n            y = String.length(x)\n            y\n        end) \n        list_diff = for i <- a, j <- b do\n           diff = i-j \n           d = case diff < 0 do\n            true -> diff * -1\n            false -> diff\n           end\n           d \n        end\n        ans = list_diff |> Enum.max \n        ans\n    end\n  \n\nend\na1 = []\na2 = [\"cccooommaaqqoxii\", \"gggqaffhhh\", \"tttoowwwmmww\"]\nMaxDiff.mxdiflg(a1, a2) |> IO.inspect","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77748,"user_id":null,"body":"defmodule MaxDiff do\n    def mxdiflg([], _) do -1 end\n    def mxdiflg(_, []) do -1 end\n    def mxdiflg(a1, a2) do\n        {min1,max1} = a1 |> Enum.map(&String.length\/1) |> Enum.min_max()\n        {min2,max2} = a2 |> Enum.map(&String.length\/1) |> Enum.min_max()\n        max(abs(min1-max2), abs(max1-min2))\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77749,"user_id":null,"body":"defmodule MaxDiff do\n\n    def reduce([], value,_func), do: value\n    def reduce([head | tail], value, func), do: reduce(tail, func.(head, value), func)\n\n    def max([a]), do: a\n    def max([head | tail]), do: reduce(tail, head, &check_big\/2)\n    \n    def check_big(a,b) when a > b, do: a\n    def check_big(a,b) when a <= b, do: b\n\n    def mxdiflg([], a2), do: -1 \n    def mxdiflg(a1, []), do: -1 \n    def mxdiflg(a1, a2) do\n        max(for x <- a1, y <- a2, do:\n          abs(String.length(x) - String.length(y)))\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"566543703c72200f0b0000c9":[{"id":77750,"user_id":null,"body":"defmodule Disease do\n\n    def epidemic(tm, n, s0, i0, b, a) do \n      dt = tm\/n\n      Stream.unfold({s0, i0, 0}, fn({s, i, r}) ->\n        s_next = s - dt * b * s * i\n        i_next = i + dt * (b * s * i - a * i)\n        r_next = r + dt * i * a\n        { i_next, {s_next, i_next, r_next} }\n      end) |> Stream.take(n) |> Enum.max()\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77751,"user_id":null,"body":"defmodule Disease do\n  def epidemic(tm, n, s0, i0, b, a) do\n    step(0, i0, tm, n, s0, i0, 0, b, a) |> trunc\n  end\n\n  defp step(t, i_max, tm, _n, _s, _i, _r, _b, _a) when t >= tm do\n    i_max\n  end\n\n  defp step(t, i_max, tm, n, s, i, r, b, a) do\n    dt = tm \/ n\n    s_next = s - dt * b * s * i\n    i_next = i + dt * (b * s * i - a * i)\n    r_next = r + dt * i * a\n    step(t + dt, max(i, i_max), tm, n, s_next, i_next, r_next, b, a)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77752,"user_id":492,"body":"defmodule Disease do\n\n    def epidemic(tm, n, s0, i0, b, a) do _epidemic(tm \/ n, n, b, a, 0, %{0=>s0}, %{0=>i0}) end\n\n    def _epidemic(_, n, _, _, k, _, i) when k > n do \n        i |> Map.values |> Enum.max |> round\n    end\n    def _epidemic(iter, n, b, a, k, s, i) do\n        sk = Map.get(s, k); ik = Map.get(i, k)\n        u = sk - iter * b * sk * ik; v = ik + iter * (b * sk * ik - a * ik)\n        _epidemic(iter, n, b, a, k+1, Map.put_new(s, k + 1, u), Map.put_new(i, k + 1, v))\n    end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77753,"user_id":null,"body":"defmodule Disease do\n  def epidemic(tm, n, s0, i0, b, a) do\n    dt = tm \/ n\n\n    Enum.reduce(1..n, {i0, s0, i0, 0}, fn _, {max_i, s, i, r} ->\n      s2 = s - dt * b * s * i\n      i2 = i + dt * (b * s * i - a * i)\n      r2 = r + dt * i * a\n      max_i2 = max(max_i, i2)\n      {max_i2, s2, i2, r2}\n    end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77754,"user_id":null,"body":"defmodule Disease do\n    def epidemic(tm, n, s0, i0, b, a) do \n      calc(tm\/n,n,s0,i0,b,a,0,0,0)\n    end\n    defp calc(dt, n, s, i, b, a, r, p, mi) do\n      IO.puts(s)\n      i1 = i+dt*(b*s*i-a*i)\n      mi = Enum.max([mi, trunc(i1)])\n      cond do\n        p == n-1 -> mi\n        true -> calc(dt, n, s-dt*b*s*i, i1, b, a, r+dt*i*a, p+1, mi)\n      end\n    end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77755,"user_id":null,"body":"defmodule IVP do\n  defstruct [:tm, :n, :s0, :i0, :b, :a, :dt]\nend\n\ndefmodule Disease do\n\n  def epidemic(tm, n, s0, i0, b, a) do\n    ivp = %IVP{tm: tm, n: n, s0: s0, i0: i0, b: b, a: a, dt: tm \/ n}\n    Cache.start_link()\n    result = 1..n\n    |> Enum.map(fn k ->\n      Cache.infected(k, ivp)\n    end)\n    |> Enum.max()\n    \n    Cache.stop()\n    result\n  end\n\nend\n\ndefmodule Cache do\n  use Agent\n\n  def start_link() do\n    Agent.start_link(fn -> %{s: %{}, i: %{}, r: %{}} end, name: __MODULE__)\n  end\n\n  def get(key) do\n    Agent.get(__MODULE__, &Map.get(&1, key))\n  end\n\n  def put(key, value) do\n    Agent.update(__MODULE__, &Map.put(&1, key, value))\n  end\n  \n  def stop() do\n    Agent.stop(__MODULE__)\n  end\n\n  def susceptible(0, %IVP{s0: s0}), do: s0\n  def susceptible(k, ivp = %IVP{dt: dt, b: b}) do\n    cache = :s\n    |> Cache.get()\n    \n    cache = Map.get(cache, k)\n    |> case do\n      nil ->\n        result = susceptible(k - 1, ivp) - dt * b * susceptible(k - 1, ivp) * infected(k - 1, ivp)\n        Map.put(cache, k, result)\n      _ ->\n        cache\n    end\n    :ok = put(:s, cache)\n    Map.get(cache, k)\n  end\n\n  def infected(0, %IVP{i0: i0}), do: i0\n  def infected(k, ivp = %IVP{dt: dt, b: b, a: a}) do\n    cache = :i\n    |> Cache.get()\n    \n    cache = Map.get(cache, k)\n    |> case do\n      nil ->\n        result = infected(k - 1, ivp) + dt * infected(k - 1, ivp) * (b * susceptible(k - 1, ivp) - a)\n        Map.put(cache, k, result)\n      _ ->\n        cache\n    end\n    :ok = put(:i, cache)\n    Map.get(cache, k)\n  end\n  \n  def recovered(0, %IVP{}), do: 0\n  def recovered(k, ivp = %IVP{dt: dt, a: a}) do\n    cache = :r\n    |> Cache.get()\n    \n    cache = Map.get(cache, k)\n    |> case do\n      nil ->\n        result = recovered(k - 1, ivp) + dt * infected(k - 1, ivp) * a\n        Map.put(cache, k, result)\n      _ ->\n        cache\n    end\n    :ok = put(:r, cache)\n    Map.get(cache, k)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77756,"user_id":null,"body":"defmodule Disease do\n\n  def epidemic(tm, n, s0, i0, b, a), do: trunc(get_epidemic(tm, n, s0, i0, b, a))\n\n  defp get_epidemic(tm, n, s0, i0, b, a), do: get_epidemic(s0, i0, 0, a, b, tm \/ n, 0, n, [])\n  defp get_epidemic(_, _, _, _, _, _, current, n, acc_i) when current >= n, do: Enum.max(acc_i)\n  defp get_epidemic(s, i, r, a, b, dt, current, n, acc_i), do:\n    get_epidemic(\n      get_s(s, i, r, a, b, dt),\n      get_i(s, i, r, a, b, dt),\n      get_r(s, i, r, a, b, dt),\n      a,\n      b,\n      dt,\n      current + 1,\n      n,\n      [i | acc_i]\n    )\n\n  defp get_s(s, i, _r, _a, b, dt), do: s - dt * b * s * i\n\n  defp get_i(s, i, _r, a, b, dt), do: i + dt * (b * s * i - a * i)\n\n  defp get_r(_s, i, r, a, _b, dt), do: r + dt * i * a\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77757,"user_id":null,"body":"defmodule Disease do\n    def epidemic(tm, n, s0, i0, b, a) do \n      # your code\n      Enum.to_list(1 .. n)\n      |> Enum.reduce([{s0, i0}], fn x, acc -> \n        {s, i} = List.last(acc)\n        acc ++ [{susceptible(tm \/ n, i, s, b), infected(tm \/ n, i, s, b, a)}]\n      end)\n      |> Enum.max_by(fn {_, i} -> floor(i) end)\n      |> elem(1)\n    end\n    \n    def infected(dt, i, s, b, a), do: i + dt * b * s * i - dt * a * i\n    def susceptible(dt, i, s, b), do: s - dt * b * s * i\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77758,"user_id":null,"body":"defmodule Disease do\n    def epidemic(tm, n, s0, i0, b, a) do \n      # your code\n      n |> calculate_infections(s0, i0, b, a, tm\/n) |> max_infection()      \n    end\n    \n    defp max_infection(%{infections: infections}), do: Enum.max(infections)\n    \n    defp calculate_infections(n, s0, i0, b, a, dt) do\n      Enum.reduce(0..n, %{ps: s0, pi: i0, infections: []}, fn _, acc -> \n          pi = infected(acc.ps, acc.pi, a, b, dt)\n        %{acc | pi: pi, ps: susceptible(acc.ps, acc.pi, b, dt), infections: [pi | acc.infections]}\n      end)\n    end\n    \n    defp susceptible(previous_s, previous_i, b, dt) do\n      previous_s - dt * b * previous_s * previous_i\n    end\n    \n    defp infected(previous_s, previous_i, a, b, dt) do\n      previous_i + dt * (b * previous_s * previous_i - a * previous_i)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77759,"user_id":53,"body":"defmodule Disease do\n\n    def epidemic(tm, n, s0, i0, b, a) do \n      aux(tm\/1, s0\/1, i0\/1, 0.0, 0.0, b, a, tm\/n, 0.0)\n    end\n    \n    def aux(tm, s, i, r, t, b, a, dt, imax) do \n      cond do\n        t >= tm -> round(imax)\n        true -> sd = dt*(-b*s*i)\n                id = dt*(b*s*i-a*i)\n                rd = dt*(a*i)\n                s = s+sd\n                i = i+id\n                r = r+rd\n                t = t+dt\n                imax = max(imax, i)\n                aux(tm, s, i, r, t, b, a, dt, imax)\n      end\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56676e8fabd2d1ff3000000c":[{"id":77760,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n  \tindex =  Enum.find_index(haystack, fn(x) -> x == \"needle\" end)\n    \"found the needle at position #{index}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77761,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    \"found the needle at position #{haystack |> Enum.find_index(& &1 == \"needle\")}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77762,"user_id":null,"body":"defmodule Finder do\n  @msg \"found the needle at position \"\n  def find_needle(haystack) do\n    haystack \n    |> Enum.find_index(&(&1 == \"needle\"))\n    |> convert_to_message\n  end\n  \n  defp convert_to_message(nil), do: @msg <> \"0\"\n  defp convert_to_message(n), do: @msg <> Integer.to_string(n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77763,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    haystack\n    |> Enum.find_index(&(&1 == \"needle\"))\n    |> say_position\n  end\n  \n  defp say_position(position) do\n    \"found the needle at position \" <> to_string(position)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77764,"user_id":1774,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    i = Enum.find_index(haystack, &(&1 == \"needle\"))\n    \"found the needle at position #{i}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77765,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    haystack\n    |> Enum.find_index(&(&1 == \"needle\"))\n    |> message()\n  end\n  \n  defp message(nil), do: \"this haystack has no needle\"\n  defp message(index), do: \"found the needle at position #{index}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77766,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack, acc \\\\ 0)\n  def find_needle([], _acc), do: \"no needle in this haystack\"\n  def find_needle([\"needle\" | _tl], acc), do: \"found the needle at position #{acc}\"\n  def find_needle([_head | tail], acc), do: find_needle(tail, acc + 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77767,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    index = Enum.find_index(haystack, &(&1 == \"needle\"))\n    \"found the needle at position #{index}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77768,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    pos = Enum.find_index(haystack, &(&1 == \"needle\"))\n    \"found the needle at position #{pos}\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77769,"user_id":null,"body":"defmodule Finder do\n  def find_needle(haystack) do\n    #TODO ...\n    \"found the needle at position #{find_needle_looker(haystack, 0)}\"\n  end\n  \n  def find_needle_looker(haystack, num) do\n    [head | tail] = haystack\n    case head do\n      \"needle\" ->\n        num\n      _ ->\n        find_needle_looker(tail, num + 1)\n     end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5667e8f4e3f572a8f2000039":[{"id":77770,"user_id":null,"body":"defmodule Mumbling do\n  \n  def accum(s) do\n    String.graphemes(s)\n    |> Enum.with_index(1)\n    |> Enum.map_join(\"-\", fn {elem, times} -> String.duplicate(elem, times) |> String.capitalize end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77771,"user_id":null,"body":"defmodule Mumbling do\n  \n  def accum(s) do\n    s\n    |> String.graphemes\n    |> Enum.with_index\n    |> Enum.map(&serialize\/1)\n    |> Enum.join(\"-\")\n  end\n  \n  def serialize({letter, index}) do\n    letter\n    |> String.duplicate(index+1)\n    |> String.capitalize\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77772,"user_id":3318,"body":"defmodule Mumbling do\n  def accum(s) do\n    String.graphemes(s)\n      |> Enum.with_index(1)\n      |> Enum.map(fn {c, i} -> String.duplicate(c, i) |> String.capitalize end)\n      |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77773,"user_id":null,"body":"defmodule Mumbling do\n  import String, only: [upcase: 1, capitalize: 1, graphemes: 1, duplicate: 2]\n  import Enum, only: [join: 2, map: 2, zip: 2]\n  def convert({str, c}) do\n    duplicate(str, c)\n    |> capitalize()\n  end\n  def accum(s) do\n    upcase(s)\n    |> graphemes()\n    |> zip(1..String.length(s))\n    |> map(&convert\/1)\n    |> join(\"-\")\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77774,"user_id":null,"body":"defmodule Mumbling do\n\n  def accum(s), do: accum(s, 0, \"\")\n  defp accum(\"\", _, acc), do: acc |> String.replace_prefix(\"-\", \"\")\n  defp accum(<<head::utf8, tail::binary>>, multipli, acc) do\n    result = mumbling(<<head>>, multipli) |> String.capitalize\n    accum(tail, multipli + 1, acc <> \"-\" <> result)\n  end\n\n\n  defp mumbling(letter, 0), do: letter\n  defp mumbling(letter, count), do: letter <> mumbling(letter, count - 1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77775,"user_id":492,"body":"defmodule Mumbling do\n  \n  defp replicate(0, c) do\n    String.upcase(c)\n  end\n  defp replicate(i, c) do\n    [String.upcase(c) | [String.duplicate(String.downcase(c), i)]] |> Enum.join(\"\")\n  end\n  \n  def accum([]) do [] end\n  def accum(s) do\n    a = String.codepoints(s)\n    Enum.zip(a, 0..length(a)) |> Enum.map(fn({c, i}) -> replicate(i, c) end) |> Enum.join(\"-\") \n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77776,"user_id":null,"body":"# write code below\n\ndefmodule Mumbling do\n  def accum(s) do\n    s\n    |> String.graphemes()\n    |> Enum.with_index()\n    |> Enum.map(fn {x, y} -> String.duplicate(x, y + 1) end)\n    |> Enum.map(fn x -> String.capitalize(x) end)\n    |> Enum.join(\"-\")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77777,"user_id":null,"body":"defmodule Mumbling do\n  def accum(str) do\n    str\n    |> String.graphemes()\n    |> Stream.with_index(1)\n    |> Stream.map(fn {char, n} -> String.duplicate(char, n) end)\n    |> Enum.map_join(\"-\", &String.capitalize\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77778,"user_id":null,"body":"defmodule Mumbling do\n  def accum(s) do\n    String.codepoints(s) \n    |> Enum.with_index(1) \n    |> Enum.map(fn {x, y} -> String.duplicate(x, y) \n    |> String.capitalize end) \n    |> Enum.join(\"-\")\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77779,"user_id":null,"body":"defmodule Mumbling do\n\n  def genString(letter, number) do\n    1..number\n    |> Enum.map(fn(_) -> letter end)\n    |> Enum.join\n    |> String.capitalize\n   \n  end\n  \n  def accum(s) do\n    s\n    |> String.codepoints\n    |> Enum.with_index(1)\n    |> Enum.map(fn {x, i} -> genString(x, i) end)\n    |> Enum.join(\"-\")\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"566be96bb3174e155300001b":[{"id":77780,"user_id":2098,"body":"defmodule Maxball do\n  def max_ball(v0), do: round(v0 * 25\/ (9 * 9.81))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77781,"user_id":null,"body":"defmodule Maxball do\n\n\trequire Float\n\n  def max_ball(v0) do\n  \tv_ms = v0 * 1000 \/ 3600\n    g = 9.81\n    Float.round(v_ms \/ g * 10)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77782,"user_id":492,"body":"defmodule Maxball do\n\n  def max_ball(v0) do\n    round(v0 \/ 3.5316) # 0.981 * 3.6\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77783,"user_id":1249,"body":"defmodule Maxball do\n  @g 9.81\n\n  def max_ball(v0) do\n    v0\n    |> kph_to_mps\n    |> record\n    |> Stream.take_while(fn {_, h} -> h >= 0 end)\n    |> Enum.max_by(fn {_, h} -> h end)\n    |> elem(0)\n  end\n  \n  def kph_to_mps(kph) do\n    (kph * 5) \/ 18\n  end\n  \n  def record(v0) do\n    Stream.iterate {0, 0}, fn {t, _} ->\n      ds = (t+1) \/ 10\n      {t+1, v0*ds - @g*ds*ds \/ 2}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77784,"user_id":null,"body":"defmodule Maxball do\n\n  def max_ball(v0) do\n    (kmh_to_ms(v0) \/ 9.81 * 10) |> round()\n  end\n\n  defp kmh_to_ms(kmh) do\n    kmh * 5 \/ 18\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77785,"user_id":null,"body":"defmodule Maxball do\n  def max_ball(v0) do\n    round(v0 \/ 3.6 \/ 9.81 * 10)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77786,"user_id":null,"body":"defmodule Maxball do\n  def max_ball(v0) do\n    v = v0 * 1000 \/ 3600\n    Stream.iterate(0, &(&1 + 1))\n      |> Stream.map(&({&1, h(v, &1 \/ 10)}))\n      |> Stream.chunk(2, 1)\n      |> Enum.find(fn [{_, p}, {_, n}] -> n < p end)\n      |> Enum.at(0)\n      |> elem(0)\n  end\n  \n  defp h(v, t) do\n    v * t - 0.5 * 9.81 * t * t\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77787,"user_id":null,"body":"defmodule Maxball do\n\n  def max_ball(v0) do\n    ((v0\/3.6)\/9.81 * 10) |> round\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77788,"user_id":null,"body":"defmodule Maxball do\n  def max_ball(v0) do\n    v = v0 * 10.0 \/ 36\n    topt = v \/ 0.981\n    t1 = floor(topt)\n    h1 = v * t1 \/ 10.0 - 0.04905 * t1 * t1\n    t2 = ceil(topt)\n    h2 = v * t2 \/ 10.0 - 0.04905 * t2 * t2\n    if h1 > h2, do: t1, else: t2\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77789,"user_id":null,"body":"defmodule Maxball do\n\n  def estimate(v0, t, prev) do\n    h = v0 * (t\/10) - 0.5 * 9.81 * (t\/10) * (t\/10)\n    if h < prev do\n      t - 1\n    else\n      estimate(v0, t + 1, h)\n    end\n  end\n\n  def max_ball(v0) do\n    estimate(v0 \/ 3.6, 0, 0)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"566fc12495810954b1000030":[{"id":77790,"user_id":527,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d) do\n    0 .. n\n      |> Stream.flat_map(&(Integer.digits(&1 * &1)))\n      |> Enum.count(&(&1 == d))\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77791,"user_id":2098,"body":"defmodule Countdigit do\n  def nb_dig(n, d), do: n |> get_squares |> get_digit_count(d)\n\n  defp get_squares(n), do: for num <- 0..n, do: num * num\n\n  defp get_digit_count(n, d), do: Enum.reduce(n, 0, fn(x, acc) -> acc + num_of_occurances(x, d) end)\n\n  defp num_of_occurances(x, d) do\n    String.split(Integer.to_string(x), \"\", trim: true)\n      |> Enum.count(fn(y) -> y == Integer.to_string(d) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77792,"user_id":null,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d) do\n    digit = to_string(d)\n    \n    0..n\n    |> Stream.map(fn n -> to_string(n*n) end)\n    |> Stream.flat_map(fn n -> String.graphemes(n) end)\n    |> Stream.filter(fn n -> n == digit end)\n    |> Enum.count\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77793,"user_id":1774,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d) do\n    0..n\n    |> Stream.map(&(&1 * &1))\n    |> Enum.join\n    |> String.replace(~r\/[^#{d}]\/, \"\")\n    |> String.length\n  end\n  \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77794,"user_id":null,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d) do\n    0..n\n      |> Enum.map(& &1 * &1)\n      |> Enum.flat_map(&Integer.digits\/1)\n      |> Enum.count(& &1 == d)\n  end  \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77795,"user_id":null,"body":"defmodule Countdigit do\n  def nb_dig(n, d) do\n    Enum.reduce(0..n, 0, fn x, acc ->\n      acc + Enum.count(Integer.digits(x*x), &(&1 == d))\n    end)\n  end  \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77796,"user_id":null,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d, c \\\\ 0)\n  \n  def nb_dig(n, d, c) when n == 0 do\n    c + count(n * n, d, 0)\n  end\n  \n  def nb_dig(n, d, c) do\n    nb_dig(n - 1, d, c + count(n * n, d, 0))\n  end\n  \n  defp count(n, d, sum) when n < 10 do\n    sum + eq(n, d)\n  end\n  \n  defp count(n, d, sum) do\n    count(div(n, 10), d, sum + eq(n, d))\n  end\n  \n  defp eq(n, d) do\n    if rem(n, 10) == d, do: 1, else: 0\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77797,"user_id":492,"body":"defmodule Countdigit do\n\n  defp freq(strng, d) do\n    strng\n    |> String.codepoints\n    |> Enum.filter(fn(ch) -> ch =~ ~r\/#{d}\/ end)\n    |> length\n  end\n  \n  def nb_dig(n, d) do\n    0..n \n    |> Enum.map(fn(x) -> to_string(x*x) end) \n    |> Enum.join(\"\") |> freq(to_string(d))\n  end\n  \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77798,"user_id":null,"body":"defmodule Countdigit do\n  def nb_dig(n, d), do: 0..n |> Stream.flat_map(&(Integer.digits(&1 * &1))) |> Enum.count(&(&1 == d))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77799,"user_id":null,"body":"defmodule Countdigit do\n\n  def nb_dig(n, d) do\n    0..n |> Enum.map(&(cnt(&1 * &1, d))) |> Enum.sum\n  end\n  \n  def cnt(n, d) do\n    last = if rem(n, 10) == d, do: 1, else: 0\n    \n    if n >= 10 do\n      last + cnt(div(n, 10), d)\n    else\n      last\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5671d975d81d6c1c87000022":[{"id":77800,"user_id":null,"body":"defmodule PuzzleSolver do\n  @size 4\n  \n  def solve_puzzle(clues) do\n    permutations = permutations(Enum.to_list(1..@size))\n    rows = for i <- @size..@size * 2 - 1 do\n      for p <- permutations, valid?(p, i, clues) and valid?(p, @size * 5 - 1 - i, clues), do: p\n    end\n    rowsVert = for i <- 0..@size - 1 do\n      for p <- permutations, valid?(p, i, clues) and valid?(p, @size * 3 - 1 - i, clues), do: p\n    end\n    findResult(rows, rowsVert)\n  end\n  \n  def removeConflicts(rows1, rows2) do\n    rows1\n    |> Enum.map(&transpose\/1)\n    |> Enum.map(&Enum.with_index\/1)\n    |> Enum.with_index()\n    |> Enum.reduce(rows2, fn {t, i}, rows2 -> \n         Enum.reduce(t, rows2, fn {values, j}, rows2 ->\n           List.update_at(rows2, j, &(for row <- &1, Enum.at(row, i) in values, do: row))\n         end)\n       end)\n  end\n  \n  def findResult(rows1, rows2) do\n    rows2 = removeConflicts(rows1, rows2)\n    rows1 = removeConflicts(rows2, rows1)\n    result = Enum.flat_map(rows1, & &1)\n    if length(result) == @size, do: result, else: findResult(rows1, rows2)\n  end\n  \n  def permutations([i]), do: [[i]]\n  def permutations(l), do: for h <- l, t <- permutations(l -- [h]), do: [h | t]\n   \n  def clue(row) do\n    Enum.reduce(row, {0, 0}, fn i, {clue, max} ->\n      if i > max, do: {clue + 1, i}, else: {clue, max}\n    end) |> elem(0)\n  end\n  \n  def valid?(row, clue), do: clue == 0 or clue(row) == clue\n  def valid?(row, i, clues) when i < @size or i >= @size * 3, do: valid?(row, Enum.at(clues, i))\n  def valid?(row, i, clues), do: valid?(Enum.reverse(row), Enum.at(clues, i))\n  \n  def transpose(matrix), do: List.zip(matrix) |> Enum.map(&Tuple.to_list\/1)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77801,"user_id":53,"body":"defmodule PuzzleSolver do\n\n  # state\n  def get_cell(board,c,n)         , do: Map.get(Map.get(board, div(c,n)), rem(c,n))\n  def obs_cell(id,i,n) when id<n  , do: id+i*n\n  def obs_cell(id,i,n) when id<n*2, do: (n-1-i)+rem(id,n)*n\n  def obs_cell(id,i,n) when id<n*3, do: (n-1-rem(id,n))+(n-1-i)*n\n  def obs_cell(id,i,n)            , do: i+(n-1-rem(id,n))*n\n  def gen_board(n)    , do: 0..n-1   |> Map.new(fn  r -> { r, (0..n-1 |> Map.new(fn  c -> {c, 0} end))} end)\n  def gen_cells(n)    , do: 0..n*n-1 |> Map.new(fn  c -> { c, (0..n-1 |> Map.new(fn  v -> {v, 0} end))} end)\n  def gen_peers(n)    , do: 0..n*n-1 |> Map.new(fn  c -> { c, (0..n-1 |> Enum.map(fn p -> [p*n+rem(c,n), div(c,n)*n+p] end) |> List.flatten |> Enum.filter(fn p -> p != c end))} end)\n  def gen_obs(clues,n), do: 0..4*n-1 |> Map.new(fn id -> {id, (0..n-1 |> Enum.map(fn i -> obs_cell(id,i,n) end)) ++ [Enum.at(clues, id)]} end)\n\n  # model\n  def candidates(cells,c,n), do: 0..n-1 |> Enum.filter(fn i -> (Map.get(Map.get(cells, c), i) == 0) end)\n  def cloack(cells,c,v)    , do: update_in(cells, [c, v], &(&1 + 1))\n  def lock_aux(state,[],_)                  , do: state\n  def lock_aux([board, cells],[p | peers],v), do: lock_aux([board, cloack(cells, p, v)], peers, v)\n  def lock([board, cells],peers,c,v,n)      , do: lock_aux([update_in(board, [div(c,n), rem(c,n)], fn i -> v + 1 end), cells], Map.get(peers, c), v)\n\n  # observation\n  def look_aux([],_,k)      , do: k\n  def look_aux([e | ls],m,k), do: look_aux(ls, max(m, e), (if e > m, do: k + 1, else: k))\n  def look(board,o,n)       , do: look_aux(0..n-1 |> Enum.map(fn i -> Enum.at(o, i) end) |> Enum.map(fn c -> get_cell(board, c, n) end), 0, 0)\n  def verify?(board,o,n)    , do: Enum.at(o, n) == 0 || Enum.count(0..n-1 |> Enum.map(fn i -> Enum.at(o, i) end) |> Enum.map(fn c -> get_cell(board, c, n) end), fn v -> v == 0 end) > 0 || Enum.at(o, n) == look(board, o, n)\n\n  # DFS\n  def choose_aux([],_,i)       , do: -1\n  def choose_aux([0 | _],_,i)  , do: i\n  def choose_aux([e | ls],n,i) , do: choose_aux(ls,n,i+1)\n  def choose(board,n)          , do: choose_aux(0..n*n-1 |> Enum.map(fn c -> get_cell(board, c, n) end), n, 0)\n\n  def dfs([completed, board, cells],peers,observers,n) do\n    cell = choose(board, n)\n    cond do\n      cell == -1 -> [length(Map.keys(observers)) == (Map.values(observers) |> Enum.count(fn o -> verify?(board, o, n) end)), board, cells]\n      true       -> dfs_step([completed, board, cells], candidates(cells, cell, n), cell, peers, observers, n)\n    end\n  end\n  \n  def dfs_step([_, board, cells],[],_,_,_,_), do: [false, board, cells]\n  def dfs_step([completed, board, cells],[value | options],cell,peers,observers,n) do\n    [locked_board, locked_cells] = lock([board, cells], peers, cell, value, n)\n    [sub_completed, sub_board, sub_cells] = dfs([true, locked_board, locked_cells], peers, observers, n)\n    cond do\n      sub_completed -> [sub_completed, sub_board, sub_cells]\n      true          -> dfs_step([true, board, cells], options, cell, peers, observers, n)\n    end\n  end\n\n  # solver\n  def vectorize(mm), do: Map.keys(mm) |> Enum.map(fn mk -> Map.keys(Map.get(mm, mk)) |> Enum.map(fn k -> Map.get(Map.get(mm, mk), k) end) end)\n  def solve_puzzle(clues) do\n    n = div(length(clues), 4)\n    board = gen_board(n)\n    cells = gen_cells(n)\n    peers = gen_peers(n)\n    observers = gen_obs(clues,n)\n    [_,result,_] = dfs([true, board, cells], peers, observers, n)\n    vectorize(result)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77802,"user_id":2098,"body":"defmodule Skyscraper do\n  @moduledoc \"\"\"\n  This module handles operations related to a skyscraper\n  \"\"\"\n\n  @doc \"\"\"\n  This struct represents a skyscrapers\n\n  * heights: List of possible heights of a skyscraper.\n  * x: x-coordinate of the skyscraper on the grid.\n  * y: y-coordinate of the skyscraper on the grid.\n  \"\"\"\n  @enforce_keys [:heights, :x, :y]\n  defstruct [:heights, :x, :y]\n\n  @doc \"\"\"\n  This function checks if a skyscraper is resolved, i.e. has only one\n  possible height candidate\n  \"\"\"\n  def resolved?(%Skyscraper{heights: heights}), do: length(heights) == 1\nend\n\ndefmodule Strip do\n  @moduledoc \"\"\"\n  This module handles operations related to a strip of skyscrapers\n  \"\"\"\n\n  @doc \"\"\"\n  This struct represents a strip of skyscrapers\n\n  * clue1: Clue at the beginning of a strip (top or left)\n  * clue2: Clue at the end of a strip (bottom or right)\n  * line: A tuple representing the direction and position of the strip:\n        {horizontal (true or false), radius (distance from origin)}\n  \"\"\"\n  @enforce_keys [:line]\n  defstruct [:clue1, :clue2, :line]\nend\n\ndefmodule Matrix do\n  @moduledoc \"\"\"\n  This module handles operations related to a matrix\/grid of skyscrapers\n  \"\"\"\n\n  @doc \"\"\"\n  This struct represents a matrix\/grid of skyscrapers\n\n  * skyscrapers: List of skyscrapers structs to keep track of heights\n  * max_height: Max Height of skyscrapers. It is also equal to size of the\n                Matrix\/Grid\n  \"\"\"\n  @enforce_keys [:skyscrapers, :max_height]\n  defstruct [:skyscrapers, :max_height]\n\n\n  @doc \"\"\"\n  Creates a matrix\/grid with skyscrapers having all possible heights\n  \"\"\"\n  def setup(max_height) do\n    skyscrapers = (0..max_height - 1)\n      |> Enum.to_list()\n      |> Enum.map(fn(y) ->\n        (0..max_height - 1)\n        |> Enum.to_list()\n        |> Enum.map(&create_skyscraper(&1, y, max_height))\n      end)\n      |> Enum.flat_map(& &1)\n\n    %Matrix{skyscrapers: skyscrapers, max_height: max_height}\n  end\n\n  @doc \"\"\"\n  Creates a skyscraper having all possible heights\n  \"\"\"\n  def create_skyscraper(x, y, max_height) do\n    %Skyscraper{heights: Enum.to_list(1..max_height), x: x, y: y}\n  end\n\n  @doc \"\"\"\n  This function checks if a matrix is resolved, i.e. if all the skyscrapers\n  in the matrix are resolved.\n  \"\"\"\n  def resolved?(%Matrix{skyscrapers: skyscrapers}) do\n    Enum.all?(skyscrapers, &Skyscraper.resolved?(&1))\n  end\n\n  @doc \"\"\"\n  This function returns a two dimensional list representing the matrix's\n  skyscrapers with their heights\n  \"\"\"\n  def humanize(%Matrix{skyscrapers: skyscrapers, max_height: max_height}) do\n    skyscrapers\n    |> Enum.map(&Enum.at(&1.heights, 0))\n    |> Enum.chunk(max_height)\n  end\n\n  @doc \"\"\"\n  This function returns a skyscraper in a matrix at a specified location\n  \"\"\"\n  def get_skyscraper(%Matrix{skyscrapers: skyscrapers}, {x, y}) do\n    Enum.find(skyscrapers, & &1.x == x && &1.y == y)\n  end\nend\n\ndefmodule Permutation do\n  @moduledoc \"\"\"\n  This module gets permutations of a list.\n  \"\"\"\n\n  @doc \"\"\"\n  This function takes a list as the argument and returns a list\n  of its permutations\n  \"\"\"\n  def get([]), do: [[]]\n  def get(l), do: for h <- l, t <- get(l -- [h]), do: [h | t]\nend\n\ndefmodule PuzzleSolver do\n  @moduledoc \"\"\"\n  Coordinate Frame:\n    (origin) x --->\n      y\n      |\n      V\n  \"\"\"\n\n  # This implementation is should work for any grid size\n  @max_height 4\n\n  @doc \"\"\"\n  This function takes in a set of clues (integers) and returns a matrix\/grid\n  satisfying those set of clues.\n  \"\"\"\n  def solve_puzzle(clues) do\n    strips = clue_index_pairs()\n      |> Enum.with_index()\n      |> Enum.map(&gen_strip(&1, clues))\n\n    Matrix.setup(@max_height)\n    |> resolve_matrix(strips)\n    |> Matrix.humanize()\n  end\n\n  # Generates a strip struct based on pair of clues and their indices\n  defp gen_strip({clue_index, i}, clues) do\n    line = i < @max_height && {false, i} || {true, i - @max_height}\n    %Strip{\n      clue1: Enum.at(clues, elem(clue_index, 0)),\n      clue2: Enum.at(clues, elem(clue_index, 1)),\n      line: line\n    }\n  end\n\n  # Pairs of clue indices present on opposite sides of strips\n  defp clue_index_pairs() do\n    row_clues = 0..@max_height - 1\n      |> Enum.map(&{&1, @max_height*3 - (&1 + 1)})\n    col_clues =(@max_height*3..(@max_height*4 - 1))\n      |> Enum.map(&{&1, @max_height*5 - (&1 + 1)})\n      |> Enum.reverse\n\n    row_clues ++ col_clues\n  end\n\n  # This loops until matrix struct is resolved\n  defp resolve_matrix(matrix, strips) do\n    case Matrix.resolved?(matrix) do\n      true -> matrix\n      false ->\n        strips\n        |> Enum.reduce(matrix, &attempt_resolution(&2, &1))\n        |> resolve_matrix(strips)\n    end\n  end\n\n\n  # This function calls apply_clue for both strip clues\n  defp attempt_resolution(matrix, strip) do\n    matrix\n    |> apply_clue(strip, :clue1)\n    |> apply_clue(strip, :clue2)\n  end\n\n  # This function applies a clue and changes height candidates of skyscrapers\n  # and returns a new updated matrix\n  defp apply_clue(matrix, strip, clue_type) when clue_type in [:clue1, :clue2] do\n    skyscrapers = get_skyscrapers(matrix, strip.line)\n    skyscrapers = case clue_type do\n      :clue2 -> Enum.reverse(skyscrapers)\n      :clue1 -> skyscrapers\n    end\n\n    valid_combos = case Map.get(strip, clue_type) do\n      0 -> get_combos(skyscrapers)\n      @max_height -> get_combos(:max_height)\n      visibility ->\n        skyscrapers\n        |> get_combos()\n        |> Enum.filter(& get_visibility(&1) == visibility)\n    end\n\n    update_matrix(matrix, skyscrapers, valid_combos)\n  end\n\n  # This function returns a new matrix with updated values of skyscrapers\n  defp update_matrix(matrix, skyscrapers, valid_combos) do\n    skyscrapers = update_skyscrapers(skyscrapers, valid_combos)\n\n    s = 0..@max_height - 1\n      |> Enum.to_list()\n      |> Enum.map(fn(y) ->\n        0..@max_height - 1\n        |> Enum.to_list()\n        |> Enum.map(fn(x) ->\n          case Enum.find(skyscrapers, fn(s) -> s.x == x && s.y == y end) do\n            nil -> Matrix.get_skyscraper(matrix, {x, y})\n            skyscraper -> skyscraper\n          end\n        end)\n      end)\n      |> Enum.flat_map(& &1)\n\n    %Matrix{skyscrapers: s, max_height: @max_height}\n  end\n\n  # This function returns new list of skyscrapers based on valid_combinations\n  # of heights\n  defp update_skyscrapers(skyscrapers, valid_combos) do\n    valid_combos = valid_combos\n      |> Enum.filter(fn(combo) ->\n        combo\n        |> Enum.with_index()\n        |> Enum.all?(fn({h, i}) ->\n          skyscrapers\n          |> Enum.at(i)\n          |> Map.get(:heights)\n          |> Enum.member?(h)\n        end)\n      end)\n\n    skyscrapers\n    |> Enum.with_index()\n    |> Enum.map(fn({s, i}) ->\n      heights = s.heights -- (s.heights -- Enum.map(valid_combos, &Enum.at(&1, i)))\n      %Skyscraper{x: s.x, y: s.y, heights: heights}\n    end)\n  end\n\n  # This function computes visibility of a strip of skyscrapers\n  defp get_visibility(heights) do\n    heights\n    |> Enum.reduce({0, 0}, fn(h, {v, hmax}) ->\n        (h > hmax) && {v+1, h} || {v, hmax}\n      end)\n    |> elem(0)\n  end\n\n  # This function gets a valid list of combination of heights for a strip\n  defp get_combos(:max_height), do: [Enum.to_list(1..@max_height)]\n  defp get_combos(skyscrapers) do\n    (1..@max_height)\n    |> Enum.to_list()\n    |> Permutation.get()\n    |> Enum.filter(fn(combo) ->\n      combo\n      |> Enum.with_index()\n      |> Enum.all?(fn({h, i}) ->\n        skyscrapers\n        |> Enum.at(i)\n        |> Map.get(:heights)\n        |> Enum.member?(h)\n      end)\n    end)\n  end\n\n  # This function gets a list of skyscrapers in a matrix, corresponding to\n  # a line\n  defp get_skyscrapers(%Matrix{skyscrapers: skyscrapers}, {false, rad}) do\n    Enum.filter(skyscrapers, & &1.x == rad)\n  end\n  defp get_skyscrapers(%Matrix{skyscrapers: skyscrapers}, {true, rad}) do\n    Enum.filter(skyscrapers, & &1.y == rad)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77803,"user_id":null,"body":"defmodule ListHelper do\n  def update_at(list, indices, func) do\n    get_at(list, indices)\n    |> func.()\n    |> (&set_at(list, indices, &1)).()\n  end\n  \n  def get_at(list, indices) do\n    Enum.map(indices, fn i -> Enum.at(list, i) end)\n  end\n  \n  def set_at(list, indices, values) do\n    Enum.zip(indices, values)\n    |> Enum.reduce(list, fn {i, v}, list -> List.update_at(list, i, fn _ -> v end) end)\n  end\n  \n  def group_every(list, n) do\n    case Enum.split(list, n) do\n      {head, []} -> [head]\n      {head, tail} -> [head | group_every(tail, n)]\n    end\n  end\nend\n\ndefmodule Helper do\n  def permutations(arr) do\n    permutations(arr, [])\n  end\n  \n  def permutations([], picked), do: [picked]\n  def permutations([e], picked), do: [[e | picked]]\n  def permutations(arr, picked) do\n    Enum.to_list(1..length(arr))\n    |> Enum.flat_map(fn i ->\n      {popped, remaining} = List.pop_at(arr, i - 1)\n      permutations(remaining, [popped | picked])\n    end)\n  end\n  \n  def get_visible_count(arr) do\n    {seen, _highest} = Enum.reduce(arr, {0, 0}, fn height, {seen, highest} ->\n      if height > highest, do: {seen + 1, height}, else: {seen, highest}\n    end)\n    seen\n  end\nend\n\ndefmodule PuzzleSolver do\n  def map_clues(c) when length(c) == 16 do\n     [\n      {Enum.at(c, 0), Enum.at(c, 11)}, {Enum.at(c, 1), Enum.at(c, 10)}, {Enum.at(c, 2), Enum.at(c, 9)}, {Enum.at(c, 3), Enum.at(c, 8)},\n      {Enum.at(c, 15), Enum.at(c, 4)}, {Enum.at(c, 14), Enum.at(c, 5)}, {Enum.at(c, 13), Enum.at(c, 6)}, {Enum.at(c, 12), Enum.at(c, 7)}\n    ]\n  end\n  \n  def filter_permutations(permutations, solution, all_possibilities, indices) do\n    solution_row = ListHelper.get_at(solution, indices)\n    possibility_row = ListHelper.get_at(all_possibilities, indices) \n    Enum.zip(solution_row, possibility_row)\n    |> Enum.map(fn {solution, possibilities} ->\n      if solution != 0, do: [solution], else: possibilities\n    end)\n    \n    result = permutations\n    |> Enum.filter(fn permutation ->\n      Enum.zip([possibility_row, permutation])\n      |> Enum.all?(fn {possibilities, y} -> MapSet.member?(possibilities, y) end)\n    end)\n    \n    if length(result) == 0 do\n      IO.puts(\"somethings wrong here\")\n      IO.inspect(permutations, pretty: true)\n    end\n    \n    result\n  end\n  \n  def get_all_that_fit_clues(solution, indices, clue, grouped_permutations, all_possibilities) do\n    permutations =\n      grouped_permutations[clue]\n      |> filter_permutations(solution, all_possibilities, indices)\n      \n    values = Enum.reduce(permutations, List.duplicate(MapSet.new(), 4), fn e, acc ->\n      Enum.zip(e, acc)\n      |> Enum.map(fn {e, acc} -> MapSet.put(acc, e) end)\n    end)\n      \n    List.duplicate(MapSet.new([1,2,3,4]), 16)\n    |> ListHelper.update_at(indices, fn _ -> values end)\n  end\n  \n  def get_all_possibilities(solution, clues, grouped_permutations, all_possibilities) do\n    Enum.concat(\n      Enum.map(0..3, fn n -> {[n+0, n+4, n+8, n+12], Enum.at(clues, n)} end),\n      Enum.map(0..3, fn n -> {[4*n+0, 4*n+1, 4*n+2, 4*n+3], Enum.at(clues, n+4)} end)\n    )\n    |> Enum.map(fn {indices, clues} -> get_all_that_fit_clues(solution, indices, clues, grouped_permutations, all_possibilities) end)\n    |> Enum.zip()\n    |> Enum.map(fn e -> Tuple.to_list(e) end)\n    |> Enum.map(&Enum.reduce(&1, fn e, acc -> MapSet.intersection(e, acc) end))\n  end\n  \n  def update_solution_from_possibilities(solution, all_possibilities) do\n    all_possibilities\n    |> Enum.zip(solution)\n    |> IO.inspect(pretty: true)\n    |> Enum.map(fn {fitting, solution} ->\n      cond do\n        solution != 0 -> solution\n        Enum.count(fitting) == 1 -> Enum.at(fitting, 0)\n        true -> 0\n      end\n    end)\n  end\n\n  def solve_puzzle(solution, clues, grouped_permutations, previous_sum \\\\ -1, all_possibilities \\\\ List.duplicate(MapSet.new([1,2,3,4]), 16)) do\n    all_possibilities = get_all_possibilities(solution, clues, grouped_permutations, all_possibilities)\n    new_solution = update_solution_from_possibilities(solution, all_possibilities)\n    \n    case Enum.sum(new_solution) do\n      40 ->\n        new_solution\n      ^previous_sum ->\n        new_solution\n      sum ->\n        solve(new_solution, clues, grouped_permutations, sum, all_possibilities)\n    end\n  end\n  \n  def solve_puzzle(clues) do\n    clues = map_clues(clues)\n    solution = [\n      0, 0, 0, 0,\n      0, 0, 0, 0,\n      0, 0, 0, 0,\n      0, 0, 0, 0\n    ]\n    permutations =\n      Helper.permutations([1,2,3,4])\n      |> Enum.flat_map(fn e ->\n        visible_count = Helper.get_visible_count(e)\n        reversed_visible_count = Helper.get_visible_count(Enum.reverse(e))\n        [\n          {e, visible_count, reversed_visible_count},\n          {e, visible_count, 0},\n          {e, 0,             reversed_visible_count},\n          {e, 0,             0},\n        ]\n      end)\n      |> Enum.sort_by(fn {_list, front, behind} -> \"#{front}#{behind}\" end)\n      \n    grouped_permutations =\n      permutations\n      |> Enum.group_by(\n        fn {_list, front, behind} -> {front, behind} end,\n        fn {list, _front, _behind} -> list end\n      )\n      |> Map.new()\n      \n    solution\n    |> solve(clues, grouped_permutations)\n    |> ListHelper.group_every(4)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77804,"user_id":null,"body":"defmodule PuzzleSolver do\n\n  def visibility(x), do: visibility(x, 0)\n  def visibility([], _), do: 0\n  def visibility([x], prev_max) when prev_max < x, do: 1\n  def visibility([4 | _xs], _prev_max), do: 1\n  def visibility([x | xs], prev_max) when prev_max < x, do: 1 + visibility(xs, x) \n  def visibility([x | xs], prev_max) when prev_max > x, do: visibility(xs, prev_max) \n  \n  def permutations([]), do:  [[]]\n  def permutations(list) do\n    for h <- list, t <- permutations(Enum.to_list(list) -- [h]), do: [h | t]\n  end\n  \n  def visibility_for_hint(0), do: 1..4 |> permutations\n  def visibility_for_hint(hint) do\n    1..4\n    |> permutations()\n    |> Enum.group_by(&visibility\/1)\n    |> Map.get(hint)\n  end\n  \n  def visibility_for_hints(hint1, hint2) do\n    v1 = visibility_for_hint(hint1) |> MapSet.new()\n    v2 = visibility_for_hint(hint2) |> Enum.map(&Enum.reverse\/1) |> MapSet.new()\n    MapSet.intersection(v1, v2)\n  end\n    \n  def filter_vset([], _, _), do: MapSet.new()\n  def filter_vset(_, _, []), do: MapSet.new()\n  def filter_vset(vset, i, values) do\n    vset\n    |> Enum.filter(fn p -> Enum.member?(values, Enum.at(p, i)) end)\n    |> MapSet.new()\n  end\n  \n  def cross_vsets(vset1, i1, vset2, i2) do\n    vset1 = filter_vset(vset1, i1, Enum.map(vset2, &(Enum.at(&1, i2))) |> Enum.uniq)\n    vset2 = filter_vset(vset2, i2, Enum.map(vset1, &(Enum.at(&1, i1))) |> Enum.uniq)\n    {vset1, vset2}\n  end\n  \n  def run_crosses({horizontals, verticals}) do\n    count = horizontals\n    |> Enum.map(&Enum.count\/1)\n    |> Enum.reduce(&+\/2)\n    \n    if count <= 4 do\n      { horizontals, verticals }\n    else\n      horizontals \n      |> Enum.with_index()\n      |> Enum.map_reduce(verticals, fn {hset, i}, verticals -> \n\n        {verticals, hset} = verticals \n        |> Enum.with_index()\n        |> Enum.map_reduce(hset, fn {vset, j}, hset ->\n\n          cross_vsets(vset, i, hset, j)\n        end)\n\n        {hset, verticals}\n      end)\n      |> run_crosses()\n    end\n  end\n    \n  def solve_puzzle(clues) do\n    verticals = Enum.map(0..3, fn n -> visibility_for_hints(Enum.at(clues, n), Enum.at(clues, 11-n)) end)\n    horizontals = Enum.map(4..7, fn n -> visibility_for_hints(Enum.at(clues, 19-n), Enum.at(clues, n)) end)\n    \n    {horizontals, _verticals} = run_crosses({horizontals, verticals})\n    \n    horizontals\n    |> Enum.map(&MapSet.to_list\/1)\n    |> Enum.map(&List.flatten\/1)\n    \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77805,"user_id":null,"body":"defmodule PuzzleSolver do\n  def solve_puzzle(clues) do\n    matrix = for i <- 0..3, do: for j <- 0..3, do: [1,2,3,4] \n    matrix = Enum.reduce(0..3, matrix, fn j,matr ->\n      matr = Enum.reduce(0..3, matr, fn i, m -> \n        check_cell(m,clues,j,i) end)\n     end)\n    matrix = Enum.reduce(0..3, matrix, fn j,matr ->\n      matr = Enum.reduce(0..3, matr, fn i, m -> \n        check_cell(m,clues,j,i)|>check_uniq(i) end)\n      end)\n \n    Enum.reduce(matrix, [], fn row,matr->\n      r=List.flatten row\n      matr= matr++[r]\n    end)\n  end\n  defp check_cell(matrix,clues,row,col) do\n    Enum.reduce(0..3, matrix, fn step,matr -> \n       clues1=Enum.slice(clues,step*4..((step+1)*4-1))\n       {row,col}=conv(row,col)\n       matr=matr|>act_on_top(Enum.at(clues1,col),row,col)|>check_uniq(col)|>check_duplicates(col)|>rotate\n    end)  \n  end\n  \n  def act_on_top(matrix,clue_top,row,col) when clue_top == 1 do\n     matrix|>set_value(0,col,4)|>del_values([0],[0,1,2,3]--[col],4)|>del_values([1,2,3],[col],4)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 4 do\n    matrix|>set_value(0,col,1)|>set_value(1,col,2)|>set_value(2,col,3)|>set_value(3,col,4) \n  end \n  def act_on_top(matrix,clue_top,row,col) when clue_top == 2 do\n    matrix=matrix|>del_values([0],[col],4)\n    matrix =(if get_row_for(matrix,col,4) == 3, do: set_value(matrix,0,col,3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2, do: matrix|>del_values([1],[col],3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2 && get_row_for(matrix,col,3) == 3, do: matrix|>set_value(0,col,2), else: matrix)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 3 do\n    matrix=matrix|>del_values([0,1],[col],4) \n    matrix =(if get_row_for(matrix,col,4) >= 2, do: matrix|>del_values([0],[col],3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 3 && get_row_for(matrix,col,3) == 2, do: matrix|>set_value(0,col,2), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2 && get_row_for(matrix,col,3) == 3, do: matrix|>set_value(0,col,1), else: matrix)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 0 do\n    matrix\n  end\n def check_duplicates(matrix,col) do\n    Enum.reduce(1..4, matrix, fn val,m -> \n       row = get_row_for(m,col,val) \n       m=(if row >= 0, do: del_values(m,[0,1,2,3]--[row],[col],val), else: m) end)\n  end\n  def check_uniq(matrix,col) do\n    Enum.reduce(1..4, matrix, fn val,m -> \n      {num_val,row} = Enum.reduce(0..3, {0,0}, fn row, {num,r} -> \n        a=Enum.at(m,row)|>Enum.at(col)\n        if Enum.member?(a,val), do: {num+1,row}, else: {num,r}\n      end)\n      m=(if num_val == 1, do: set_value(m,row,col,val), else: m) \n    end)\n  end\n  def get_row_for(matrix, col, val) do\n    Enum.reduce_while(0..3, -1, fn row, ind -> \n        a=Enum.at(matrix,row)|>Enum.at(col)\n        if length(a) == 1 && Enum.at(a,0) == val, do: {:halt,row}, else: {:cont,-1} \n      end)\n   end\n  def set_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)|>List.replace_at(col,[value])\n    List.replace_at(matrix,row,r)\n  end\n\n  def del_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)\n    r=List.replace_at(r,col,Enum.at(r,col)--[value])\n    List.replace_at(matrix,row,r)\n  end\n\n  def del_values(matrix,rows,cols,value) do\n    Enum.reduce(rows, matrix, fn row, matr1 -> \n      Enum.reduce(cols, matr1, fn col, matr2 -> del_value(matr2,row,col,value) end )\n    end)\n  end\n\n  defp conv(row,col), do: {3-col,row}\n  defp rotate(matrix), do: matrix |> Enum.zip |> Enum.map(fn t -> :erlang.tuple_to_list(t) end) |> Enum.reverse\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77806,"user_id":null,"body":"defmodule PuzzleSolver do\n  def solve_puzzle(clues) do\n    matrix = for i <- 0..3, do: for j <- 0..3, do: [1,2,3,4] \n    matrix = Enum.reduce(0..3, matrix, fn j,matr ->\n      matr = Enum.reduce(0..3, matr, fn i, m -> \n        check_cell(m,clues,j,i) end)\n     end)\n    matrix = Enum.reduce(0..3, matrix, fn j,matr ->\n      matr = Enum.reduce(0..3, matr, fn i, m -> \n        check_cell(m,clues,j,i)|>check_uniq(i) end)\n      end)\n \n    Enum.reduce(matrix, [], fn row,matr->\n      r=List.flatten row\n      matr= matr++[r]\n    end)\n  end\n  defp check_cell(matrix,clues,row,col) do\n    Enum.reduce(0..3, matrix, fn step,matr -> \n       clues1=Enum.slice(clues,step*4..((step+1)*4-1))\n       {row,col}=conv(row,col)\n       matr=matr|>act_on_top(Enum.at(clues1,col),row,col)|>check_uniq(col)|>check_duplicates(col)|>rotate\n    end)  \n  end\n  \n  def act_on_top(matrix,clue_top,row,col) when clue_top == 1 do\n     matrix|>set_value(0,col,4)|>del_values([0],[0,1,2,3]--[col],4)|>del_values([1,2,3],[col],4)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 4 do\n    matrix|>set_value(0,col,1)|>set_value(1,col,2)|>set_value(2,col,3)|>set_value(3,col,4) \n  end \n  def act_on_top(matrix,clue_top,row,col) when clue_top == 2 do\n    matrix=matrix|>del_values([0],[col],4)\n    matrix =(if get_row_for(matrix,col,4) == 3, do: set_value(matrix,0,col,3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2, do: matrix|>del_values([1],[col],3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2 && get_row_for(matrix,col,3) == 3, do: matrix|>set_value(0,col,2), else: matrix)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 3 do\n    matrix=matrix|>del_values([0,1],[col],4) \n    matrix =(if get_row_for(matrix,col,4) >= 2, do: matrix|>del_values([0],[col],3), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 3 && get_row_for(matrix,col,3) == 2, do: matrix|>set_value(0,col,2), else: matrix)\n    matrix =(if get_row_for(matrix,col,4) == 2 && get_row_for(matrix,col,3) == 3, do: matrix|>set_value(0,col,1), else: matrix)\n  end\n  def act_on_top(matrix,clue_top,row,col) when clue_top == 0 do\n    matrix\n  end\n def check_duplicates(matrix,col) do\n    Enum.reduce(1..4, matrix, fn val,m -> \n       row = get_row_for(m,col,val) \n       m=(if row >= 0, do: del_values(m,[0,1,2,3]--[row],[col],val), else: m) end)\n  end\n  def check_uniq(matrix,col) do\n    Enum.reduce(1..4, matrix, fn val,m -> \n      {num_val,row} = Enum.reduce(0..3, {0,0}, fn row, {num,r} -> \n        a=Enum.at(m,row)|>Enum.at(col)\n        if Enum.member?(a,val), do: {num+1,row}, else: {num,r}\n      end)\n      m=(if num_val == 1, do: set_value(m,row,col,val), else: m) \n    end)\n  end\n  def get_clue_row(clues, row), do: {Enum.at(clues,15-row),Enum.at(clues,4+row)}\n  def get_clue_col(clues, col), do: {Enum.at(clues,col),Enum.at(clues,11-col)}\n  def get_row_for(matrix, col, val) do\n    Enum.reduce_while(0..3, -1, fn row, ind -> \n        a=Enum.at(matrix,row)|>Enum.at(col)\n        if length(a) == 1 && Enum.at(a,0) == val, do: {:halt,row}, else: {:cont,-1} \n      end)\n   end\n  def set_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)|>List.replace_at(col,[value])\n    List.replace_at(matrix,row,r)\n  end\n\n  def del_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)\n    r=List.replace_at(r,col,Enum.at(r,col)--[value])\n    List.replace_at(matrix,row,r)\n  end\n\n  def del_values(matrix,rows,cols,value) do\n    Enum.reduce(rows, matrix, fn row, matr1 -> \n      Enum.reduce(cols, matr1, fn col, matr2 -> del_value(matr2,row,col,value) end )\n    end)\n  end\n\n  defp conv(row,col) do\n    a=%{{0,0}=>{3,0},{0,1}=>{2,0},{0,2}=>{1,0},{0,3}=>{0,0},\n        {1,0}=>{3,1},{1,1}=>{2,1},{1,2}=>{1,1},{1,3}=>{0,1},\n        {2,0}=>{3,2},{2,1}=>{2,2},{2,2}=>{1,2},{2,3}=>{0,2},\n        {3,0}=>{3,3},{3,1}=>{2,3},{3,2}=>{1,3},{3,3}=>{0,3},\n       }\n  a[{row,col}]\n  end\n\n  defp rotate(matrix), do: matrix |> Enum.zip |> Enum.map(fn t -> :erlang.tuple_to_list(t) end) |> Enum.reverse\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77807,"user_id":443,"body":"defmodule PuzzleSolver do\n  # Guards for convenience\n  defguardp el1_is(list, val) when hd(list) == val\n  defguardp el2_is(list, val) when length(list) > 1 and hd(tl(list)) == val\n  defguardp el3_is(list, val) when length(list) > 2 and hd(tl(tl(list))) == val\n  defguardp el4_is(list, val) when length(list) > 3 and hd(tl(tl(tl(list)))) == val\n  defguardp has_1(options) when el1_is(options, 1)\n  defguardp has_2(options) when el1_is(options, 2) or el2_is(options, 2)\n  defguardp has_3(options) when el1_is(options, 3) or el2_is(options, 3) or el3_is(options, 3)\n  defguardp has_4(options) when el1_is(options, 4) or el2_is(options, 4) or el3_is(options, 4) or el4_is(options, 4)\n\n  def solve_puzzle(clues) do\n    initial_grid\n    |> do_solve(clues, :false, 6)\n  end\n\n  defp do_solve(grid, clues, :true, _) do\n    0..3\n    |> Enum.map(fn idx ->\n      {r, _} = row(idx, clues, grid)\n      List.flatten(r)\n    end)\n  end\n  defp do_solve(grid, clues, :false, count) do\n    new_grid = update_grid(grid, clues)\n    do_solve(new_grid, clues, complete_grid?(clues, new_grid) || (count == 0), count - 1)\n  end\n\n  defp update_grid(grid, clues), do: Enum.reduce(0..7, grid, &(update_row(&1, row(&1, clues, &2), &2)))\n\n  defp update_row(_, {[[_],[_],[_],[_]], _}, grid), do: grid\n  defp update_row(row, {[[1,2,3,4]|_], {4, _}}, grid), do: write_row([[1], [2], [3], [4]], row, grid)\n  defp update_row(row, {[[1,2,3,4]|_], {_, 4}}, grid), do: write_row([[4], [3], [2], [1]], row, grid)\n  defp update_row(row, {[[1,2,3,4]|tail], {1, _}}, grid), do: write_row([[4]|tail], row, grid)\n  defp update_row(row, {[a,b,c,[1,2,3,4]], {_, 1}}, grid), do: write_row([a, b, c, [4]], row, grid)\n  defp update_row(row, {[_,_,_,[1]], {3, _}}, grid), do: write_row([[2], [3], [4], [1]], row, grid)\n  defp update_row(row, {[[1],_,_,_], {_, 3}}, grid), do: write_row([[1], [4], [3], [2]], row, grid)\n  defp update_row(row, {[_,_,_,[2]], {3, _}}, grid), do: write_row([[1], [3], [4], [2]], row, grid)\n  defp update_row(row, {[[2],_,_,_], {_, 3}}, grid), do: write_row([[2], [4], [3], [1]], row, grid)\n  defp update_row(row, {[_,_,_,[3]], {3, _}}, grid), do: write_row([[1], [2], [4], [3]], row, grid)\n  defp update_row(row, {[[3],_,_,_], {_, 3}}, grid), do: write_row([[3], [4], [2], [1]], row, grid)\n  defp update_row(row, {[_,_,[1],_], {3, _}}, grid), do: write_row([[2], [3], [1], [4]], row, grid)\n  defp update_row(row, {[_,[1],_,_], {_, 3}}, grid), do: write_row([[4], [1], [3], [2]], row, grid)\n  defp update_row(row, {[_,_,[2],_], {3, _}}, grid), do: write_row([[1], [3], [2], [4]], row, grid)\n  defp update_row(row, {[_,[2],_,_], {_, 3}}, grid), do: write_row([[4], [2], [3], [1]], row, grid)\n  defp update_row(row, {[_,_,[3],[4]], {3, _}}, grid), do: write_row([[2], [1], [3], [4]], row, grid)\n  defp update_row(row, {[[4],[3],_,_], {_, 3}}, grid), do: write_row([[4], [3], [1], [2]], row, grid)\n  defp update_row(row, {[_,[1],_,[4]], {3, _}}, grid), do: write_row([[2], [1], [3], [4]], row, grid)\n  defp update_row(row, {[[4],_,[1],_], {_, 3}}, grid), do: write_row([[4], [3], [1], [2]], row, grid)\n  defp update_row(row, {[_,[2],a,b], {2, _}}, grid), do: write_row([[3], [2], a, b], row, grid)\n  defp update_row(row, {[a,b,[2],_], {_, 2}}, grid), do: write_row([a, b, [2], [3]], row, grid)\n  defp update_row(row, {[a,b,c,[4]], {2, _}}, grid) when a != [3], do: write_row([[3], b, c, [4]], row, grid)\n  defp update_row(row, {[[4],a,b,c], {_, 2}}, grid) when c != [3], do: write_row([[4], a, b, [3]], row, grid)\n  defp update_row(row, {[a,b,[4],c], {2, _}}, grid) when has_1(a) or has_3(b), do: write_row([eliminate([1], a), eliminate([3], b), [4], c], row, grid)\n  defp update_row(row, {[a,[4],b,c], {_, 2}}, grid) when has_1(c) or has_3(b), do: write_row([a, [4], eliminate([3], b), eliminate([1], c)], row, grid)\n  defp update_row(row, {[a,b,c,d], {2, _}}, grid) when has_4(a), do: write_row([eliminate([4], a), b, c, d], row, grid)\n  defp update_row(row, {[a,b,c,d], {_, 2}}, grid) when has_4(d), do: write_row([a, b, c, eliminate([4], d)], row, grid)\n  defp update_row(row, {[a,b,c,d], {3, _}}, grid) when has_3(a) or has_4(a) or has_4(b), do: write_row([eliminate([3,4], a), eliminate([4], b), c, d], row, grid)\n  defp update_row(row, {[a,b,c,d], {_, 3}}, grid) when has_3(d) or has_4(d) or has_4(c), do: write_row([a, b, eliminate([4], c), eliminate([3,4], d)], row, grid)\n  defp update_row(row, {options, _}, grid) do\n    options\n    |> eliminate_impossibles\n    |> choose_inevitables\n    |> write_row(row, grid)\n  end\n  \n  defp choose_inevitables(row_options = [[_],[_],[_],[_]]), do: row_options\n  defp choose_inevitables(row_options) do\n    opt_counts = row_options\n      |> Enum.reduce(Map.new, fn\n        opts, counts -> Enum.reduce(opts, counts, fn o, c -> Map.update(c, o, 1, &(&1 + 1)) end)\n      end)\n    row_options\n      |> Enum.map(fn\n        [a] -> [a]\n        opts -> choose_inevitables(opts, opt_counts, 1)\n      end)\n  end\n  defp choose_inevitables(opts, _, 5), do: opts\n  defp choose_inevitables(opts, opt_counts, val) do\n    if Enum.member?(opts, val) and Map.get(opt_counts, val) == 1, do: [val], else: choose_inevitables(opts, opt_counts, val + 1)\n  end\n    \n  \n  defp eliminate_impossibles(row_options = [[_],[_],[_],[_]]), do: row_options\n  defp eliminate_impossibles(row_options) do\n    impossibles = row_options\n      |> Enum.reduce([], fn\n        [a], acc -> [a | acc]\n        _, acc -> acc\n      end)\n    row_options\n    |> Enum.map(fn\n      [a] -> [a]\n      opts -> eliminate(impossibles, opts)\n    end)\n  end\n  \n  defp eliminate(impossibles, options) do\n    Enum.reject(options, &(Enum.member?(impossibles, &1)))\n  end\n  \n  defp initial_grid, do: List.duplicate([1,2,3,4], 16)\n\n  defp complete_grid?(clues, grid), do: Enum.reduce(0..7, :true, &(&2 && complete_row?(row(&1, clues, grid))))\n\n  defp complete_row?({[[_],[_],[_],[_]], {0, 0}}), do: :true\n  defp complete_row?({row = [[_],[_],[_],[_]], {start_clue, 0}}), do: visible(row, :start) == start_clue\n  defp complete_row?({row = [[_],[_],[_],[_]], {0, end_clue}}), do: visible(row, :end) == end_clue\n  defp complete_row?({row = [[_],[_],[_],[_]], {start_clue, end_clue}}), do: visible(row, :start) == start_clue && visible(row, :end) == end_clue\n  defp complete_row?(_), do: :false\n  \n  defp visible(row, :start), do: visible(row, 0 , 0)\n  defp visible(row, :end), do: visible(Enum.reverse(row), 0, 0)\n  defp visible([], seen, _), do: seen\n  defp visible([[x] | tail], seen, tallest) when x > tallest, do: visible(tail, seen + 1, x)\n  defp visible([_ | tail], seen, tallest), do: visible(tail, seen, tallest)\n  \n  defp row(0, clues, grid), do: row(0,  1,  2,  3,  15,  4, clues, grid)\n  defp row(1, clues, grid), do: row(4,  5,  6,  7,  14,  5, clues, grid)\n  defp row(2, clues, grid), do: row(8,  9,  10, 11, 13,  6, clues, grid)\n  defp row(3, clues, grid), do: row(12, 13, 14, 15, 12,  7, clues, grid)\n  defp row(4, clues, grid), do: row(0,  4,  8,  12,  0, 11, clues, grid)\n  defp row(5, clues, grid), do: row(1,  5,  9,  13,  1, 10, clues, grid)\n  defp row(6, clues, grid), do: row(2,  6,  10, 14,  2,  9, clues, grid)\n  defp row(7, clues, grid), do: row(3,  7,  11, 15,  3,  8, clues, grid)\n  defp row(g1, g2, g3, g4, c1, c2, c, g) do\n    {[Enum.at(g, g1),  Enum.at(g, g2),  Enum.at(g, g3), Enum.at(g, g4)], {Enum.at(c, c1),  Enum.at(c, c2)}}\n  end\n  \n  defp write_row(opts, 0, grid), do: write_row(0,  1,  2,  3,  opts, grid)\n  defp write_row(opts, 1, grid), do: write_row(4,  5,  6,  7,  opts, grid)\n  defp write_row(opts, 2, grid), do: write_row(8,  9,  10, 11, opts, grid)\n  defp write_row(opts, 3, grid), do: write_row(12, 13, 14, 15, opts, grid)\n  defp write_row(opts, 4, grid), do: write_row(0,  4,  8,  12, opts, grid)\n  defp write_row(opts, 5, grid), do: write_row(1,  5,  9,  13, opts, grid)\n  defp write_row(opts, 6, grid), do: write_row(2,  6,  10, 14, opts, grid)\n  defp write_row(opts, 7, grid), do: write_row(3,  7,  11, 15, opts, grid)\n  defp write_row(i1, i2, i3, i4, [o1, o2, o3, o4], grid) do\n    grid\n    |> List.update_at(i1, fn _ -> o1 end)\n    |> List.update_at(i2, fn _ -> o2 end)\n    |> List.update_at(i3, fn _ -> o3 end)\n    |> List.update_at(i4, fn _ -> o4 end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77808,"user_id":null,"body":"defmodule PuzzleSolver do\n  def solve_puzzle(clues) do\n    # cxs = column x start, rxs = row x start, cxe, rxe similar for end, values are 0<=x<=4\n    [c1s, c2s, c3s, c4s, r1e, r2e, r3e, r4e, c4e, c3e, c2e, c1e, r4s, r3s, r2s, r1s] = clues\n    columns = [{c1s, c1e}, {c2s, c2e}, {c3s, c3e}, {c4s, c4e}]\n    rows = [{r1s, r1e}, {r2s, r2e}, {r3s, r3e}, {r4s, r4e}]\n\n    col_constraints = Enum.map(columns, &solve_pair\/1)\n    row_constraints = Enum.map(rows, &solve_pair\/1)\n\n    [rc1, rc2, rc3, rc4] = row_constraints\n    [cc1, cc2, cc3, cc4] = col_constraints\n\n    possible_row_solutions =\n      for r1 <- rc1, r2 <- rc2, r3 <- rc3, r4 <- rc4, unique_vals?([r1, r2, r3, r4]) do\n        [r1, r2, r3, r4]\n      end\n\n    possible_col_solutions =\n      for c1 <- cc1, c2 <- cc2, c3 <- cc3, c4 <- cc4, unique_vals?([c1, c2, c3, c4]) do\n        transpose([c1, c2, c3, c4])\n      end\n\n    s1 = MapSet.new(possible_row_solutions)\n    s2 = MapSet.new(possible_col_solutions)\n\n    MapSet.intersection(s1, s2)\n    |> Enum.take(1)\n    |> hd()\n  end\n\n  def transpose(m) do\n    m |> List.zip() |> Enum.map(&Tuple.to_list\/1)\n  end\n\n  def unique_vals?(rows_or_cols) do\n    0..(length(rows_or_cols) - 1)\n    |> Enum.all?(fn i ->\n      pivot = rows_or_cols |> Enum.map(fn r -> Enum.at(r, i) end)\n      # only keep if all values in col are unique\n      pivot == Enum.uniq(pivot)\n    end)\n  end\n\n  def keep_row?(row, col, row_index, col_index),\n    do: Enum.at(row, col_index) == Enum.at(col, row_index)\n\n  def solve_pair({0, 0}),\n    do: 1..4 |> Enum.map(&visible\/1) |> Enum.reduce([], fn l, acc -> acc ++ l end)\n\n  def solve_pair({0, eend}), do: visible(eend) |> Enum.map(&Enum.reverse\/1)\n  def solve_pair({start, 0}), do: visible(start)\n\n  def solve_pair({start, eend}) do\n    ps = MapSet.new(visible(start))\n    pe = eend |> visible() |> Enum.map(&Enum.reverse\/1) |> MapSet.new()\n    MapSet.intersection(ps, pe) |> MapSet.to_list()\n  end\n\n  def visible(count) do\n    perms([1, 2, 3, 4])\n    |> Enum.filter(fn perm -> count_visible(perm) == count end)\n  end\n\n  def count_visible(permutation),\n    do:\n      Enum.reduce(permutation, {0, 0}, fn\n        v, {total, max} when v > max -> {total + 1, v}\n        _, acc -> acc\n      end)\n      |> elem(0)\n\n  def perms([]), do: [[]]\n\n  def perms(list) do\n    for h <- list, t <- perms(list -- [h]) do\n      [h | t]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77809,"user_id":null,"body":"defmodule Towers.Cell do\n  alias __MODULE__\n  defstruct [:x, :y, value: nil, values: MapSet.new()]\n  @enforce_keys [:x, :y]\n\n  def new(x, y) do\n    %Cell{x: x, y: y}\n  end\n\n  def apply_values(%Cell{value: nil, values: values} = cell) do\n    if MapSet.size(values) == 1 do\n      %Cell{\n        cell\n        | values: MapSet.new(),\n          value: Enum.at(values, 0)\n      }\n    else\n      cell\n    end\n  end\n\n  def apply_values(%Cell{value: val} = cell) do\n    cell\n  end\n\n  def apply_singles(%Cell{values: values} = cell, set) do\n    if MapSet.size(values) > 1 do\n      values = MapSet.difference(values, set)\n\n      %Cell{\n        cell\n        | values: values\n      }\n    else\n      cell\n    end\n  end\n\n  def apply_discovered(%Cell{values: values} = cell, set, size) do\n    if MapSet.size(set) == size - 1 && is_nil(cell.value) do\n      new_value =\n        1..size\n        |> Enum.into(MapSet.new())\n        |> MapSet.difference(set)\n        |> MapSet.to_list()\n        |> List.first()\n\n      %Cell{\n        cell\n        | values: MapSet.new(),\n          value: new_value\n      }\n    else\n      values = MapSet.difference(values, set)\n\n      %Cell{\n        cell\n        | values: values\n      }\n    end\n  end\n\n  def apply_uniques(cell, set) do\n    matching_unique = MapSet.intersection(cell.values, set)\n\n    if MapSet.size(matching_unique) == 1 do\n      %Cell{\n        cell\n        | value: Enum.at(matching_unique, 0),\n          values: MapSet.new()\n      }\n    else\n      cell\n    end\n  end\n\n  def pristine?(%Cell{value: nil, values: values}),\n    do: MapSet.size(values) == 0\n\n  def pristine?(%Cell{}), do: false\nend\n\ndefmodule Towers.Row do\n  alias __MODULE__\n  alias Towers.{Cell}\n  defstruct [:n_front, :n_back, cells: []]\n\n  def new(n_front, n_back, cells) do\n    %Row{\n      n_front: n_front,\n      n_back: n_back,\n      cells: cells\n    }\n    |> digest_clues()\n  end\n\n  def digest_cells(row, cells) do\n    digest(%Row{row | cells: cells})\n  end\n\n  def digest(row = %Row{cells: cells}) do\n    all_values =\n      cells\n      |> Enum.flat_map(&MapSet.to_list(&1.values))\n\n    discovered_values =\n      cells\n      |> Enum.filter(&(&1.value != nil))\n      |> Enum.map(& &1.value)\n\n    singles_set =\n      cells\n      |> Enum.filter(&(MapSet.size(&1.values) == 1))\n      |> Enum.reduce(MapSet.new(), &MapSet.union(&1.values, &2))\n\n    discovered_set = MapSet.new(discovered_values)\n\n    uniques_set =\n      all_values\n      |> Enum.group_by(fn v ->\n        Enum.count(all_values, &(&1 == v))\n      end)\n      |> Map.get(1, [])\n      |> Enum.into(MapSet.new())\n      |> MapSet.difference(singles_set)\n      |> MapSet.difference(discovered_set)\n\n    size = length(cells)\n\n    result = %Row{\n      row\n      | cells:\n          cells\n          |> Enum.map(\n            &(&1\n              |> Cell.apply_singles(singles_set)\n              |> Cell.apply_discovered(discovered_set, size)\n              |> Cell.apply_uniques(uniques_set)\n              |> Cell.apply_values())\n          )\n    }\n\n    if result != row,\n      do: digest(result),\n      else: result\n  end\n\n  def has_duplicates?(list), do: Enum.uniq(list) != list\n\n  @doc \"\"\"\n    Set initial values[] set for each cell in a row,\n    using clues (n_front and n_back).\n    After digest clues are no longer needed,\n    except guess_loop phase,\n    because they are transformed here into cells' values[].\n\n    For example for:\n        n_front: 1, n_back: 3, board_size: 4,\n        generated values should be:\n        [\n            MapSet[4], \n            MapSet[1, 2, 3], \n            MapSet[1, 3], \n            MapSet[1, 2]\n        ]\n  \"\"\"\n  def digest_clues(%Row{cells: cells} = row) do\n    size = length(cells)\n\n    new_values =\n      size\n      |> permutations()\n      |> Enum.filter(&permutation_valid?(row, &1))\n      |> Enum.zip()\n      |> Enum.map(&MapSet.new(Tuple.to_list(&1)))\n\n    cells =\n      cells\n      |> Enum.with_index()\n      |> Enum.map(fn {cell, i} ->\n        %Cell{\n          cell\n          | values: Enum.at(new_values, i)\n        }\n      end)\n\n    %Row{row | cells: cells}\n  end\n\n  def permutations(size) when is_integer(size) do\n    Enum.to_list(1..size)\n    |> permutations()\n  end\n\n  def permutations([]), do: [[]]\n\n  @doc \"\"\"\n  TODO: understand how this recursion works\n  \"\"\"\n  def permutations(list) do\n    for elem <- list,\n        rest <- permutations(list -- [elem]),\n        do: [elem | rest]\n  end\n\n  def permutation_valid?(%Row{n_front: n_front, n_back: n_back}, heights) do\n    side_valid?(heights, n_front) &&\n      side_valid?(Enum.reverse(heights), n_back)\n  end\n\n  def side_valid?(heights, n, n_curr \\\\ 0, max_height_curr \\\\ 0)\n\n  def side_valid?(_, 0, _, _), do: true\n\n  def side_valid?([], n, n_curr, _max_height_curr),\n    do: n == n_curr\n\n  def side_valid?([h | t], n, n_curr, max_height_curr) do\n    if h > max_height_curr do\n      side_valid?(t, n, n_curr + 1, h)\n    else\n      side_valid?(t, n, n_curr, max_height_curr)\n    end\n  end\n\n  def cells_allowed_by_clues?(row, cells) do\n    heights =\n      cells\n      |> Enum.map(& &1.value)\n\n    permutation_valid?(row, heights)\n  end\nend\n\ndefmodule Towers.Board do\n  defstruct [:size, :rows_ver, :rows_hor, cells: [], clues: []]\n  alias Towers.{Board, Row, Cell}\n\n  @board_size 4\n  @clues [2, 2, 1, 3, 2, 2, 3, 1, 1, 2, 2, 3, 3, 2, 1, 3]\n\n  def new(clues \\\\ @clues, size \\\\ @board_size) do\n    cells =\n      for x <- 0..(size - 1), y <- 0..(size - 1) do\n        Cell.new(y, x)\n      end\n      |> Enum.chunk_every(size)\n\n    %Board{\n      cells: cells,\n      clues: clues,\n      size: size\n    }\n    |> compute_rows()\n  end\n\n  def digest_loop(board, status \\\\ :continue)\n\n  def digest_loop(board, :continue) do\n    board_new = digest(board)\n    IO.puts(\"loop...\")\n\n    if board != board_new do\n      digest_loop(board_new)\n    else\n      nil_values_remain =\n        board.cells\n        |> List.flatten()\n        |> Enum.any?(&is_nil(&1.value))\n\n      if !nil_values_remain,\n        do: digest_loop_success(board_new, :done_by_digest),\n        else: try_to_resolve_ambiquity(board_new)\n    end\n  end\n\n  def digest_loop_success(board, :done_by_digest) do\n    IO.puts(\"digest_loop success :)\")\n    {:done, board}\n  end\n\n  def digest_loop_success(board, :done_by_guess) do\n    IO.puts(\"guess_loop success :) \n\")\n    {:done, board}\n  end\n\n  def result(%Board{cells: cells}) do\n    cells\n    |> Enum.map(fn row_cells ->\n      Enum.map(row_cells, & &1.value)\n    end)\n  end\n\n  def compute_rows(board = %Board{cells: cells, clues: clues, size: size}) do\n    [\n      front_vert,\n      back_hor,\n      back_vert,\n      front_hor\n    ] = Enum.chunk_every(clues, size)\n\n    board\n    |> init_merge_rows(Enum.reverse(front_hor), back_hor, :rows_hor)\n    |> init_merge_rows(front_vert, Enum.reverse(back_vert), :rows_ver)\n  end\n\n  def init_merge_rows(board = %Board{cells: cells}, front_clues, back_clues, rows_key)\n      when rows_key in [:rows_hor, :rows_ver] do\n    cells =\n      board\n      |> cells_for_rows(rows_key)\n      |> Enum.zip(front_clues)\n      |> Enum.zip(back_clues)\n      |> Enum.map(fn {{row_cells, front_clue}, back_clue} ->\n        Row.new(front_clue, back_clue, row_cells)\n      end)\n\n    merge_rows(board, cells, rows_key)\n  end\n\n  def merge_rows(board, rows, rows_key) do\n    rows\n    |> Enum.reduce(board, &merge_row(&2, &1))\n    |> Map.replace(\n      rows_key,\n      rows |> Enum.map(&Map.replace(&1, :cells, []))\n    )\n  end\n\n  def merge_row(board, %Row{cells: cells}) do\n    cells\n    |> Enum.reduce(board, &merge_cell(&2, &1))\n  end\n\n  def merge_cell(\n        board = %Board{cells: cells},\n        %Cell{x: x, y: y, value: value, values: values}\n      ) do\n    update_cell_at(\n      board,\n      x,\n      y,\n      &%Cell{\n        &1\n        | values:\n            if(Cell.pristine?(&1),\n              do: values,\n              else: MapSet.intersection(&1.values, values)\n            ),\n          value: &1.value || value\n      }\n    )\n  end\n\n  def update_cell_at(board = %Board{cells: cells}, x, y, updater_fn) do\n    %Board{\n      board\n      | cells:\n          List.update_at(\n            cells,\n            y,\n            fn row ->\n              List.update_at(\n                row,\n                x,\n                &updater_fn.(&1)\n              )\n            end\n          )\n    }\n  end\n\n  def cell_at(board, x, y) do\n    board.cells\n    |> Enum.at(y)\n    |> Enum.at(x)\n  end\n\n  def digest(%Board{cells: cells} = board) do\n    board\n    |> digest_merge_rows(:rows_hor)\n    |> digest_merge_rows(:rows_ver)\n  end\n\n  def digest_merge_rows(board = %Board{cells: cells}, rows_key)\n      when rows_key in [:rows_hor, :rows_ver] do\n    rows =\n      board\n      |> cells_for_rows(rows_key)\n      |> Enum.zip(Map.fetch!(board, rows_key))\n      |> Enum.map(fn {cells, row} ->\n        Row.digest_cells(row, cells)\n      end)\n\n    board\n    |> merge_rows(rows, rows_key)\n  end\n\n  def try_to_resolve_ambiquity(board) do\n    row =\n      board.cells\n      |> Enum.find(fn cells ->\n        Enum.any?(cells, &is_nil(&1.value))\n      end)\n\n    heights =\n      row\n      |> Enum.map(& &1.value)\n\n    empty_cells =\n      row\n      |> Enum.filter(&is_nil(&1.value))\n\n    nil_heights =\n      empty_cells\n      |> Enum.map(&MapSet.to_list(&1.values))\n      |> values_permuts()\n      |> Enum.reject(&(Enum.uniq(&1) != &1))\n\n    empty_cells_permuts =\n      nil_heights\n      |> Enum.map(fn permut ->\n        permut\n        |> Enum.zip(empty_cells)\n        |> Enum.map(fn {permut_value, cell} ->\n          %Cell{\n            cell\n            | value: permut_value,\n              values: MapSet.new()\n          }\n        end)\n      end)\n\n    guess_loop(board, empty_cells_permuts)\n  end\n\n  def guess_loop(board, [cells | t]) do\n    IO.puts(\"guess_loop...\")\n\n    tentative_board =\n      cells\n      |> Enum.reduce(board, fn cell = %Cell{x: x, y: y}, board ->\n        board\n        |> update_cell_at(x, y, fn _ -> cell end)\n      end)\n\n    with {:done, board} <- digest_loop(tentative_board),\n         {:ok, board} <- validate_against_clues(board) do\n      digest_loop_success(board, :done_by_guess)\n    else\n      {:clues_error, _board} ->\n        IO.puts(\"guess_loop failed attempt :-\/\")\n        guess_loop(board, t)\n    end\n  end\n\n  defp cells_for_rows(board, :rows_hor) do\n    board.cells\n  end\n\n  defp cells_for_rows(board, :rows_ver) do\n    board.cells\n    |> Enum.zip()\n    |> Enum.map(&Tuple.to_list(&1))\n  end\n\n  def validate_against_clues(board) do\n    all_valid? =\n      0..(board.size - 1)\n      |> Enum.all?(fn i ->\n        hor_valid? =\n          Row.cells_allowed_by_clues?(\n            Enum.at(board.rows_hor, i),\n            Enum.at(cells_for_rows(board, :rows_hor), i)\n          )\n\n        ver_valid? =\n          Row.cells_allowed_by_clues?(\n            Enum.at(board.rows_ver, i),\n            Enum.at(cells_for_rows(board, :rows_ver), i)\n          )\n\n        hor_valid? and ver_valid?\n      end)\n\n    case all_valid? do\n      true -> {:ok, board}\n      _ -> {:clues_error, board}\n    end\n  end\n\n  def values_permuts([]), do: []\n\n  def values_permuts([h]) do\n    h |> Enum.map(&[&1])\n  end\n\n  def values_permuts([h | t] = list) do\n    next = values_permuts(t)\n\n    h\n    |> List.duplicate(length(next))\n    |> Enum.zip(next)\n    |> Enum.flat_map(fn {dup_item, h_item} ->\n      dup_item\n      |> Enum.map(&[&1 | h_item])\n    end)\n  end\nend\n\ndefmodule PuzzleSolver do\n  import Towers.Board\n\n  def solve_puzzle(clues) do\n    with {:done, board} <- digest_loop(new(clues)) do\n      result(board)\n    end\n  end\nend\n\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5672682212c8ecf83e000050":[{"id":77810,"user_id":492,"body":"defmodule Twice do\n\n    defp dbl_linear1(n, cnt, h, _, _) when cnt >= n, do: h\n    defp dbl_linear1(n, cnt, h, q2, q3) do\n        q2 = :queue.in(2 * h + 1, q2)\n        q3 = :queue.in(3 * h + 1, q3)\n        a = :queue.get(q2)\n        b = :queue.get(q3)\n        h = min(a, b)\n        {_, q2} = if (h == a), do: :queue.out(q2), else: {a, q2}\n        {_, q3} = if (h == b), do: :queue.out(q3), else: {b, q3}\n        dbl_linear1(n, cnt + 1, h, q2, q3)\n    end\n\n    def dbl_linear(n), do: dbl_linear1(n, 0, 1, :queue.new, :queue.new)\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77811,"user_id":53,"body":"defmodule Twice do\n\n    def dbl_linear(n) do\n        u = %{0 => 1}\n        dbl_linear(n, u, 0, 0, 1)\n    end\n    \n    def dbl_linear(n, u, x, y, i) do\n        cond do\n            i > n     -> u[n]\n            true      -> dbl_linear_step(n, u, x, y, i)\n        end\n    end\n    \n    def dbl_linear_step(n, u, x, y, i) do\n         dx = trunc(2 * u[x] + 1)\n         dy = trunc(3 * u[y] + 1)\n         d = [dx, dy] |> Enum.min\n         u = Map.put(u, i, d)\n         x = if d == dx, do: x + 1, else: x\n         y = if d == dy, do: y + 1, else: y\n         dbl_linear(n, u, x, y, i + 1)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77812,"user_id":null,"body":"defmodule Twice do\n  def dbl_linear(n) do\n    Enum.reduce(\n      1..n,\n      {1, :queue.new(), :queue.new()},\n      fn _, {a, lst2, lst3} ->\n        lst2b = :queue.in(2 * a + 1, lst2)\n        lst3b = :queue.in(3 * a + 1, lst3)\n        hd2 = :queue.get(lst2b)\n        hd3 = :queue.get(lst3b)\n        b = min(hd2, hd3)\n        lst2c = if b == hd2, do: :queue.drop(lst2b), else: lst2b\n        lst3c = if b == hd3, do: :queue.drop(lst3b), else: lst3b\n        {b, lst2c, lst3c}\n      end\n    )\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77813,"user_id":null,"body":"defmodule Twice do\n\n    def dbl_linear(0), do: 1\n    def dbl_linear(n), do: dbl_linear(n - 1, [3], [4], 1, [], [])\n    def dbl_linear(n, [], f, c, tt, ff), do: dbl_linear(n, Enum.reverse(tt), f, c, [], ff)\n    def dbl_linear(n, t, [], c, tt, ff), do: dbl_linear(n, t, Enum.reverse(ff), c, tt, [])\n    def dbl_linear(n, [a | t], [a | f], c, tt, ff), do: dbl_linear(n, t, [a | f], c, tt, ff)\n    def dbl_linear(n, [a | t], [b | f], a, tt, ff), do: dbl_linear(n, t, [b | f], a, tt, ff)\n    def dbl_linear(n, [a | t], [b | f], b, tt, ff), do: dbl_linear(n, [a | t], f, b, tt, ff)\n    def dbl_linear(0, [a | _], [b | _], _, _, _), do: min(a, b)\n    def dbl_linear(n, [a | t], [b | f], _, tt, ff) when a < b, do: \n      dbl_linear(n - 1, t, [b | f], a, [a * 2 + 1 | tt], [a * 3 + 1 | ff])\n    def dbl_linear(n, [a | t], [b | f], _, tt, ff), do: \n      dbl_linear(n - 1, [a | t], f, b, [b * 2 + 1 | tt], [b * 3 + 1 | ff])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77814,"user_id":null,"body":"defmodule Twice do\n  # u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27]\n  def dbl_linear(n) do\n    last_element_position = 0\n    last_element_value = 1\n    queue_f1 = :queue.new()\n    queue_f2 = :queue.new()\n    generate(\n      n,\n      last_element_position,\n      last_element_value,\n      queue_f1,\n      queue_f2\n    )\n  end\n\n  def generate(n, lep, lev, _, _) when n == lep do\n    lev\n  end\n\n  def generate(n, lep, lev, qf1, qf2) do\n    qf1 = :queue.in(f1(lev), qf1)\n    qf2 = :queue.in(f2(lev), qf2)\n\n    next_qf1 = :queue.get(qf1)\n    next_qf2 = :queue.get(qf2)\n    next_lev = min(next_qf1, next_qf2)\n\n    {_, qf1} = if next_lev == next_qf1, do: :queue.out(qf1), else: {next_qf1, qf1}\n    {_, qf2} = if next_lev == next_qf2, do: :queue.out(qf2), else: {next_qf2, qf2}\n\n    generate(n, lep + 1, next_lev, qf1, qf2)\n  end\n\n  def f1(x) do\n    2 * x + 1\n  end\n\n  def f2(x) do\n    3 * x + 1\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77815,"user_id":null,"body":"defmodule Twice do\n  def dbl_linear(0) do\n    1\n  end\n\n  def dbl_linear(n) do\n    arr =\n      Enum.reduce(1..n, {:array.set(0, 1, :array.new()), 0, 0}, fn idx, {arr, i, j} ->\n        x = :array.get(i, arr) * 2 + 1\n        y = :array.get(j, arr) * 3 + 1\n\n        cond do\n          x < y -> {:array.set(idx, x, arr), i + 1, j}\n          x > y -> {:array.set(idx, y, arr), i, j + 1}\n          x == y -> {:array.set(idx, x, arr), i + 1, j + 1}\n        end\n      end)\n      |> elem(0)\n\n    :array.get(n, arr)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77816,"user_id":null,"body":"defmodule Twice do\n  def dbl_linear(0) do\n    1\n  end\n\n  def dbl_linear(n) do\n    Enum.reduce(1..n, {%{0 => 1}, 0, 0}, fn idx, {map, i, j} ->\n      x = map[i] * 2 + 1\n      y = map[j] * 3 + 1\n\n      cond do\n        x < y -> {Map.put(map, idx, x), i + 1, j}\n        x > y -> {Map.put(map, idx, y), i, j + 1}\n        x == y -> {Map.put(map, idx, x), i + 1, j + 1}\n      end\n    end)\n    |> elem(0)\n    |> Map.get(n)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77817,"user_id":null,"body":"defmodule Twice do\n  defp next_y(x),\n    do: 2 * x + 1\n\n  defp next_z(x),\n    do: 3 * x + 1\n\n  defp next(store, [], value, fun) do\n    [x | source] = :lists.reverse([value | store])\n    {[], source, fun.(x)}\n  end\n\n  defp next(store, [x | source], value, fun) do\n    {[value | store], source, fun.(x)}\n  end\n\n  defp helper(0, value, _, _, _, _, _, _) do\n    value\n  end\n\n  defp helper(index, _, y_store, y_source, y, z_store, z_source, z) when y < z do\n    {ny_store, ny_source, ny} = next(y_store, y_source, y, &next_y\/1)\n    helper(index - 1, y, ny_store, ny_source, ny, [y | z_store], z_source, z)\n  end\n\n  defp helper(index, _, y_store, y_source, y, z_store, z_source, z) when y >= z do\n    {nz_store, nz_source, nz} = next(z_store, z_source, z, &next_z\/1)\n\n    {ny_store, ny_source, ny} =\n      if y > z do\n        {[z | y_store], y_source, y}\n      else\n        next(y_store, y_source, y, &next_y\/1)\n      end\n\n    helper(index - 1, z, ny_store, ny_source, ny, nz_store, nz_source, nz)\n  end\n\n  def dbl_linear(index),\n    do: helper(index, 1, [], [], 3, [], [], 4)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77818,"user_id":null,"body":"defmodule Twice do\n  @spec dbl_linear(integer) :: integer\n  def dbl_linear(index) do\n    {_, _, acc} =\n      Enum.reduce(1..index, {0, 0, %{0 => 1}}, fn n, {i, j, acc} ->\n        x = 2 * acc[i] + 1\n        y = 3 * acc[j] + 1\n\n        cond do\n          x < y -> {i + 1, j, Map.put(acc, n, x)}\n          x == y -> {i + 1, j + 1, Map.put(acc, n, x)}\n          true -> {i, j + 1, Map.put(acc, n, y)}\n        end\n      end)\n\n    Map.get(acc, index)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77819,"user_id":null,"body":"defmodule Twice do\n\n    def dbl_linear(n) do\n      heap = Heap.new()\n      heap = Heap.push(heap, 1)\n      \n      {_, result} = Enum.reduce(0..n, {heap, 1}, fn _, {heap, _} ->\n        min_value = Heap.root(heap)\n        heap = heap\n          |> Heap.pop()\n          |> Heap.push(min_value * 2 + 1)\n          |> Heap.push(min_value * 3 + 1)\n        \n        {heap, min_value}\n      end)\n      result\n    end\n  end\n  \n  # This is slightly modified from https:\/\/gitlab.com\/jimsy\/heap\/-\/blob\/master\/lib\/heap.ex\n  # I only used min-heap and added a clause to ignore duplicates insertion\n  defmodule Heap do\n    defstruct data: nil, comparator: nil\n    @type t() :: %Heap{\n          data: tuple() | nil\n        }\n    def new, do: %Heap{}\n    def push(%Heap{data: h}, value),\n      do: %Heap{data: meld(h, {value, []})}\n\n    def pop(%Heap{data: {_, q}} = _heap),\n      do: %Heap{data: pair(q)}\n    \n    def root(%Heap{data: {v, _}} = _heap), do: v\n\n    defp meld(nil, queue), do: queue\n    defp meld(queue, nil), do: queue\n\n    defp meld({k0, l0}, {k1, _} = r) when k0 < k1, do: {k0, [r | l0]}\n    defp meld({k0, l0}, {k0, r0}), do: {k0, l0 ++ r0}\n    defp meld({_, _} = l, {k1, r0}), do: {k1, [l | r0]}\n\n    defp pair([]), do: nil\n    defp pair([q]), do: q\n\n    defp pair([q0, q1 | q]) do\n      q2 = meld(q0, q1)\n      meld(q2, pair(q))\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5672a98bdbdd995fad00000f":[{"id":77820,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p1, p2) do\n    cond do\n      nemesis(p1) == p2 -> \"Player 1 won!\"\n      nemesis(p2) == p1 -> \"Player 2 won!\"\n      true -> \"Draw!\"\n    end\n  end\n  \n  defp nemesis(\"rock\"), do: \"scissors\"\n  defp nemesis(\"paper\"), do: \"rock\"\n  defp nemesis(\"scissors\"), do: \"paper\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77821,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(a, a), do: \"Draw!\"\n  def rps(\"scissors\", \"paper\"), do: \"Player 1 won!\"\n  def rps(\"paper\", \"rock\"), do: \"Player 1 won!\"\n  def rps(\"rock\", \"scissors\"), do: \"Player 1 won!\"\n  def rps(_, _), do: \"Player 2 won!\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77822,"user_id":null,"body":"defmodule RockPaperScissors do\n  # Practicing solving exercise using only pattern matching and guards, so no conditionals allowed\n\n  defguardp valid_play(play) when play in [\"rock\", \"paper\", \"scissors\"]\n  defguardp valid_plays(p1, p2) when valid_play(p1) and valid_play(p2)\n\n  def rps(same, same) when valid_play(same), do: \"Draw!\"\n  def rps(\"rock\", \"scissors\"), do: \"Player 1 won!\"\n  def rps(\"scissors\", \"paper\"), do: \"Player 1 won!\"\n  def rps(\"paper\", \"rock\"), do: \"Player 1 won!\"\n  def rps(p1, p2) when valid_plays(p1, p2), do: \"Player 2 won!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77823,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p, p), do: \"Draw!\"\n  \n  def rps(p1, p2) \n    when p1 == \"scissors\" and p2 == \"paper\"\n    when p1 == \"paper\" and p2 == \"rock\"\n    when p1 == \"rock\" and p2 == \"scissors\",\n    do: \"Player 1 won!\"\n  \n  def rps(_, _), do: \"Player 2 won!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77824,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p, p), do: \"Draw!\"\n  def rps(\"rock\", \"scissors\"),  do: \"Player 1 won!\"\n  def rps(\"scissors\", \"paper\"), do: \"Player 1 won!\"\n  def rps(\"paper\", \"rock\"),     do: \"Player 1 won!\"\n  def rps(\"scissors\", \"rock\"),  do: \"Player 2 won!\"\n  def rps(\"paper\", \"scissors\"), do: \"Player 2 won!\"\n  def rps(\"rock\", \"paper\"),     do: \"Player 2 won!\"\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77825,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p1, p2) do\n    case p1 do\n      ^p2 -> \"Draw!\"\n      \"rock\" -> if p2 == \"scissors\", do: \"Player 1 won!\", else: \"Player 2 won!\"\n      \"scissors\" -> if p2 == \"paper\", do: \"Player 1 won!\", else: \"Player 2 won!\"\n      \"paper\" -> if p2 == \"rock\", do: \"Player 1 won!\", else: \"Player 2 won!\"\n    end    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77826,"user_id":53,"body":"defmodule RockPaperScissors do\n  def rps(p1, p2) when p1 == p2, do: \"Draw!\"\n  def rps(\"scissors\", \"paper\"), do: \"Player 1 won!\"\n  def rps(\"paper\", \"rock\"), do: \"Player 1 won!\"\n  def rps(\"rock\", \"scissors\"), do: \"Player 1 won!\"\n  def rps(_, _), do: \"Player 2 won!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77827,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p1, p2) do\n    cond do\n      p1 == p2 ->\n        \"Draw!\"\n      p1 === \"rock\" && p2 === \"scissors\" ->\n        \"Player 1 won!\"\n      p1 === \"scissors\" && p2 === \"paper\" ->\n        \"Player 1 won!\"\n      p1 === \"paper\" && p2 === \"rock\" ->\n        \"Player 1 won!\"\n      true -> \"Player 2 won!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77828,"user_id":null,"body":"defmodule RockPaperScissors do\n  @p1 \"Player 1 won!\"\n  @p2 \"Player 2 won!\"\n  @draw \"Draw!\"\n  def rps(p1, p2) do\n    case {p1, p2} do\n      {a, a} -> @draw\n      {\"rock\", \"scissors\"} -> @p1\n      {\"scissors\", \"paper\"} -> @p1\n      {\"paper\", \"rock\"} -> @p1\n      {_, _} -> @p2\n      end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77829,"user_id":null,"body":"defmodule RockPaperScissors do\n  def rps(p1, p2) when p1 == p2, do: \"Draw!\"\n  def rps(\"scissors\",\"paper\"), do: player_won(1)\n  def rps(\"paper\",\"rock\"), do: player_won(1)\n  def rps(\"rock\",\"scissors\"), do: player_won(1)\n  def rps(_, _), do: player_won(2)\n  \n  defp player_won(p_num), do: \"Player #{p_num} won!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56747fd5cb988479af000028":[{"id":77830,"user_id":null,"body":"defmodule Challenge do\n  def get_middle(str) do\n    len = String.length(str)\n    case rem(len, 2) do\n      1 -> String.at(str, div(len, 2))\n      _ -> String.slice(str, div(len, 2) - 1, 2)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77831,"user_id":3318,"body":"import Integer, only: :macros\n\ndefmodule Challenge do\n  def get_middle(str) do\n    len = String.length(str)\n    if is_odd(len) do\n      str |> String.at(div(len, 2))\n    else\n      str |> String.slice(div(len, 2) - 1, 2)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77832,"user_id":null,"body":"defmodule Challenge do\n  def get_middle(str) do \n    len = String.length(str)\n    mid = div(len, 2)\n    \n    case rem(len, 2) do\n      0 -> \n        String.slice(str, mid - 1, 2)\n        \n      _ ->\n        String.slice(str, mid, 1)\n    end  \n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77833,"user_id":null,"body":"defmodule Challenge do\n  def get_middle(str) do \n    i = (String.length(str) - 1) \/ 2\n    String.slice(str, trunc(i)..round(i))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77834,"user_id":1774,"body":"defmodule Challenge do\n  def get_middle(str) when rem(byte_size(str), 2) != 0, do: String.at str, half(str)\n  def get_middle(str), do: String.slice str, (half(str) - 1)..half(str)\n  \n  defp half(str), do: div(String.length(str), 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77835,"user_id":null,"body":"defmodule Challenge do\n  require Integer\n\n  def get_middle(str) do\n    len = String.length(str)\n    middle = div(len, 2)\n\n    case Integer.is_odd(len) do\n      true -> String.at(str, middle)\n      _ -> String.slice(str, (middle - 1)..middle)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77836,"user_id":null,"body":"defmodule Challenge do\n  def get_middle(str) do \n    leng = String.length(str)\n    String.slice(str, div(leng, 2) - 1 + rem(leng, 2), 2 - rem(leng, 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77837,"user_id":null,"body":"defmodule Challenge do\n  import Integer, only: [is_even: 1, is_odd: 1]\n\n  def get_middle(str) do\n    len = String.length(str)\n    half = div(len, 2)\n\n    cond do\n      is_odd(len) -> String.at(str, half)\n      is_even(len) -> String.slice(str, half - 1, 2)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77838,"user_id":null,"body":"defmodule Challenge do\n  import Integer\n  def get_middle(str) do\n    len  = str |> String.length\n    midr = len |> div(2)\n    midl = midr - if len |> is_even, do: 1, else: 0\n    str |> String.slice(midl..midr)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77839,"user_id":null,"body":"defmodule Challenge do\n  def get_middle(str) do \n    length = String.length(str)\n    middle = div(length, 2)\n    offset = if rem(String.length(str), 2) == 0, do: 1, else: 0\n    String.slice(str, middle - offset..middle)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"567501aec64b81e252000003":[{"id":77840,"user_id":964,"body":"defmodule Wallpaper do\n\n\t@number_map Enum.into( Enum.zip( (0..20), ~w(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty)), %{} )\n  \n  def as_english(n) do\n  \tMap.fetch!( @number_map , n )\n  end  \n  \n  def wallpaper(l, w, h) do\n  \n    wall_area = (l + w + l + w ) * h\n    roll_area = 10 * 0.52\n    rolls_required = wall_area \/ roll_area * 1.15\n    \n    as_english(trunc(Float.ceil(rolls_required))) \n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77841,"user_id":null,"body":"defmodule Wallpaper do\n  @roll_length 10\n  @roll_width 0.52\n  @safety_factor 1.15\n  @words [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\", \"twenty-one\", \"twenty-two\", \"twenty-three\", \"twenty-four\", \"twenty-five\", \"twenty-six\", \"twenty-seven\", \"twenty-eight\", \"twenty-nine\", \"thirty\", \"thirty-one\", \"thirty-two\", \"thirty-three\", \"thirty-four\", \"thirty-five\", \"thirty-six\", \"thirty-seven\", \"thirty-eight\", \"thirty-nine\", \"forty\", \"forty-one\", \"forty-two\", \"forty-three\", \"forty-four\", \"forty-five\", \"forty-six\", \"forty-seven\", \"forty-eight\", \"forty-nine\", \"fifty\", \"fifty-one\", \"fifty-two\", \"fifty-three\", \"fifty-four\", \"fifty-five\", \"fifty-six\", \"fifty-seven\", \"fifty-eight\", \"fifty-nine\", \"sixty\", \"sixty-one\", \"sixty-two\", \"sixty-three\", \"sixty-four\", \"sixty-five\", \"sixty-six\", \"sixty-seven\", \"sixty-eight\", \"sixty-nine\", \"seventy\", \"seventy-one\", \"seventy-two\", \"seventy-three\", \"seventy-four\", \"seventy-five\", \"seventy-six\", \"seventy-seven\", \"seventy-eight\", \"seventy-nine\", \"eighty\", \"eighty-one\", \"eighty-two\", \"eighty-three\", \"eighty-four\", \"eighty-five\", \"eighty-six\", \"eighty-seven\", \"eighty-eight\", \"eighty-nine\", \"ninety\", \"ninety-one\", \"ninety-two\", \"ninety-three\", \"ninety-four\", \"ninety-five\", \"ninety-six\", \"ninety-seven\", \"ninety-eight\", \"ninety-nine\", \"one hundred\"]\n  \n  @spec wallpaper(number, number, number) :: String.t\n  def wallpaper(l, w, h) do\n    area(l, w, h) |>\n    total_length |>\n    rolls_from_length |>\n    Float.ceil |>\n    round |>\n    word_for_integer\n  end\n  \n  defp area(l, w, h), do: (l + w) * 2 * h\n\n  defp total_length(area), do: (area \/ @roll_width) * @safety_factor\n\n  defp rolls_from_length(length), do: length \/ @roll_length\n  \n  defp word_for_integer(n) do\n    Enum.at(@words, n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77842,"user_id":null,"body":"defmodule Wallpaper do\n\n  @roll_area 5.2\n  @extra 0.15\n  @words %{\n            0 => \"zero\",\n            1 => \"one\",\n            2 => \"two\",\n            3 => \"three\",\n            4 => \"four\",\n            5 => \"five\",\n            6 => \"six\",\n            7 => \"seven\",\n            8 => \"eight\",\n            9 => \"nine\",\n            10 => \"ten\",\n            11 => \"eleven\",\n            12 => \"twelve\",\n            13 => \"thirteen\",\n            14 => \"fourteen\",\n            15 => \"fifteen\",\n            16 => \"sixteen\",\n            17 => \"seventeen\",\n            18 => \"eighteen\",\n            19 => \"nineteen\",\n            20 => \"twenty\"\n          }\n  \n  @spec wallpaper(number, number, number) :: String.t\n  \n  def wallpaper(l, w, h) do\n    rolls = calc_room_area(l, w, h) |> rolls_needed\n    @words |> Map.get(rolls)\n  end\n  \n  defp calc_room_area(l, w, h) do\n    (w * h * 2) + (l * h * 2)\n  end\n  \n  defp rolls_needed(0), do: 0\n  defp rolls_needed(area) do\n    (area + area * @extra) \/ @roll_area + 0.5 |> round\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77843,"user_id":53,"body":"defmodule Wallpaper do\n  def wallpaper(0, _, _), do: s(0)\n  def wallpaper(_, 0, _), do: s(0)\n  def wallpaper(_, _, 0), do: s(0)\n  def wallpaper(l, w, h), do: s(ceil(h * (w + l) * 2.3 \/ 5.2))\n  defp s(n), do: [\n    \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n    |> Enum.at(n)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77844,"user_id":null,"body":"defmodule Wallpaper do\n  @english_nums ~w(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty)\n  @in_english Map.new(Enum.zip(0..20, @english_nums))\n  @roll_area 5.2\n  @extra 1.15\n\n  def wallpaper(l, w, h) do\n    @in_english[ceil(2 * (l + w) * h * @extra \/ @roll_area)]\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77845,"user_id":null,"body":"defmodule Wallpaper do\n  \n  @english [\n      \"zero\",\n      \"one\",\n      \"two\",\n      \"three\",\n      \"four\",\n      \"five\",\n      \"six\",\n      \"seven\",\n      \"eight\",\n      \"nine\",\n      \"ten\",\n      \"eleven\",\n      \"twelve\",\n      \"thirteen\",\n      \"fourteen\",\n      \"fifteen\",\n      \"sixteen\",\n      \"seventeen\",\n      \"eighteen\",\n      \"nineteen\",\n      \"twenty\"\n  ]\n  \n  @spec wallpaper(number, number, number) :: String.t\n  def wallpaper(l, w, h) do\n    rolls = Float.ceil(2 * (l + w) * h * 1.15 \/ 5.2)\n    |> Kernel.trunc\n    Enum.fetch(@english, rolls) |> elem(1)\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77846,"user_id":492,"body":"defmodule Wallpaper do\n  \n  @spec ceiling(number) :: number\n  \n  def ceiling(x) do\n    t = trunc x\n    case x-t == 0 do\n      true -> t\n      false -> t + 1\n    end\n  end\n  \n  @spec wallpaper(number, number, number) :: String.t\n  \n  def wallpaper(l, w, h) do\n    t = [\"zero\", \"one\", \"two\", \"three\", \"four\",\n         \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n         \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n         \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n    if (l * w * h == 0) do\n      \"zero\"\n    else\n      a = 1.15 * 2 * h * (l + w)\n      b = 0.52 * 10\n      n = ceiling(a \/ b)\n      Enum.at(t, n)\n    end\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77847,"user_id":1249,"body":"defmodule Wallpaper do\n  @spec wallpaper(number, number, number) :: String.t\n  @roll_area 5.2\n\n  def num_word(n) do\n    case n do\n      0  -> \"zero\"\n      1  -> \"one\"\n      2  -> \"two\"\n      3  -> \"three\"\n      4  -> \"four\"\n      5  -> \"five\"\n      6  -> \"six\"\n      7  -> \"seven\"\n      8  -> \"eight\"\n      9  -> \"nine\"\n      10 -> \"ten\"\n      11 -> \"eleven\"\n      12 -> \"twelve\"\n      13 -> \"thirteen\"\n      14 -> \"fourteen\"\n      15 -> \"fifteen\"\n      16 -> \"sixteen\"\n      17 -> \"seventeen\"\n      18 -> \"eighteen\"\n      19 -> \"nineteen\"\n      20 -> \"twenty\"\n      _  -> \"wat\"\n    end\n  end\n\n  def wallpaper(l, w, h) do\n    area = 2 * (l * h + w * h)\n    rolls = (area \/ @roll_area) * 1.15 |> Float.ceil |> trunc\n    num_word(rolls)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77848,"user_id":null,"body":"defmodule Wallpaper do\n  @english [\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"ten\",\n    \"eleven\",\n    \"twelve\",\n    \"thirteen\",\n    \"fourteen\",\n    \"fifteen\",\n    \"sixteen\",\n    \"seventeen\",\n    \"eighteen\",\n    \"nineteen\",\n    \"twenty\"\n  ]\n  @spec wallpaper(number, number, number) :: String.t()\n  def wallpaper(l, w, h) when l == 0 or w == 0 or h == 0, do: \"zero\"\n  def wallpaper(l, w, h), do: Enum.at(@english, ceil(2 * 1.15 * h * (l + w) \/ 5.2))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77849,"user_id":null,"body":"defmodule Wallpaper do\n\n  @numbers [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\n  @roll 10 * 0.52 \n  \n  \n  @spec wallpaper(number, number, number) :: String.t\n  def wallpaper(l, w, h) do\n    room = ((l * h) * 2) +((w * h) * 2)\n    full = room + (room * 0.15)\n    ans = Float.ceil(full \/ @roll)\n    {str, _} =  Enum.with_index(@numbers)\n    |> Enum.find(fn {_, idx} -> idx == ans end)\n    str\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"567bf4f7ee34510f69000032":[{"id":77850,"user_id":1249,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    Regex.match?(~r\/\\A\\d\\z\/, s)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77851,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    s =~ ~r\/\\A\\d\\z\/\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77852,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s), do: s =~ ~r\/^[0-9]\\z\/\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77853,"user_id":1774,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    Regex.match?(~r\/\\A[^\\D\\s]\\z\/, s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77854,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(\"\"), do: false\n  def is_digit(s) do\n    if String.contains?(s, \"\n\"), do: false, else: String.match?(s, ~r\/^[0-9]$\/)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77855,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    Regex.run(~r\/\\A\\d\\z\/, s) !== nil\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77856,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    String.length(s) == 1 and s >= \"0\" and s <= \"9\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77857,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    case Integer.parse(s) do\n      {n, \"\"} ->\n        n >= 0 && n <=9\n      _ ->\n        false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77858,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    Regex.match?(~r\/^\\d\\z\/, s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77859,"user_id":null,"body":"defmodule StringUtils do\n  def is_digit(s) do\n    s =~ ~r\/^\\d\\z\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"567d609f1c16d7369c000008":[{"id":77860,"user_id":1249,"body":"defmodule Genetic do\n  def generate(len, acc \\\\ \"\")\n  def generate(0, acc), do: acc\n  def generate(len, acc) do\n    generate(len-1, acc <> Integer.to_string(:random.uniform(2)-1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77861,"user_id":null,"body":"defmodule Genetic do\n  def generate(length) do\n    String.duplicate((Enum.random(0..1) |> to_string), length) \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77862,"user_id":1774,"body":"defmodule Genetic do\n  \n  def generate(length), do: do_generate(length, \"\")\n  \n  defp do_generate(0, str), do: str\n  defp do_generate(length, str) do\n    do_generate(length - 1, str <> Integer.to_string(:rand.uniform(2) - 1))\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77863,"user_id":null,"body":"defmodule Genetic do\n  def generate(length) do\n  \tString.duplicate((Enum.random(0..1) |> to_string), length)\n    # your code here\n  end\n  \n#  defp get_0_1() do\n#  \t\n#  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77864,"user_id":null,"body":"defmodule Genetic do\n  def generate(0), do: \"\"\n  def generate(length) do\n    1..length\n    |> Enum.map(fn _ -> ?0 + round(:rand.uniform()) end)\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77865,"user_id":53,"body":"defmodule Genetic do\n  def generate(_, b \\\\ \"\")\n  def generate(0, b), do: b\n  def generate(a, b), do: generate(a - 1, b <> ((:random.uniform(2) - 1) |> Integer.to_string))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77866,"user_id":null,"body":"defmodule Genetic do\n  use Bitwise\n  def generate(0), do: \"\"\n  def generate(length) when length <= 1000, do: :rand.uniform(1 <<< length) - 1 |> Integer.to_string(2) |> String.pad_leading(length, \"0\")\n  def generate(length), do: String.duplicate(generate(1000), div(length, 1000)) <> generate(rem(length, 1000))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77867,"user_id":1722,"body":"defmodule Genetic do\n  def generate(0), do: \"\"\n  def generate(length) do\n    (1..length)\n    |> Enum.map(fn _ -> :random.uniform(2) - 1 end)\n    |> Enum.join(\"\")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77868,"user_id":null,"body":"defmodule Genetic do\n  def generate(0), do: \"\"\n  def generate(length) do\n    Enum.reduce(1..length, \"\", fn _, str -> str <> <<?0 + :rand.uniform(2) - 1>> end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77869,"user_id":null,"body":"defmodule Genetic do\n  def generate(length) do\n      bytes = :crypto.strong_rand_bytes(div(length+7,8))\n      Enum.join(for <<c::1 <- bytes>>, do: c)\n      |> String.slice(0,length)\n  end\nend\n\n# test assert String.length(Genetic.generate(10_000_000)) == 10000000","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"568d0dd208ee69389d000016":[{"id":77870,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(d) when d >= 7, do: d * 40 - 50\n  def rental_car_cost(d) when d >= 3, do: d * 40 - 20\n  def rental_car_cost(d), do: d * 40\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77871,"user_id":null,"body":"defmodule Rent do\n  @base_amount 40\n  def rental_car_cost(d) when d in 3..6, do: d * @base_amount - 20\n  def rental_car_cost(d) when d >= 7, do: d * @base_amount - 50  \n  def rental_car_cost(d), do: d * @base_amount  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77872,"user_id":1774,"body":"defmodule Rent do\n  def rental_car_cost(days), do: 40 * days - discount(days)\n  \n  defp discount(days) when days >= 7, do: 50\n  defp discount(days) when days >= 3, do: 20\n  defp discount(_days), do: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77873,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(d) do\n    base = d * 40\n    \n    discount =\n      cond do\n        d >= 7 -> 50\n        d >= 3 -> 20\n        true -> 0\n      end\n\n    base - discount\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77874,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(days), do: (days * 40) - discount(days)\n  \n  defp discount(days) when days >= 7, do: 50\n  defp discount(days) when days >= 3, do: 20\n  defp discount(days) when days >= 0, do: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77875,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(d) when d >= 7, do: total_cost(d) - 50\n  def rental_car_cost(d) when d >= 3, do: total_cost(d) - 20\n  def rental_car_cost(d), do: total_cost(d)\n  defp total_cost(d), do: d * 40\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77876,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(d) do\n  \tcond do\n    \td >= 7 -> d*40-50\n      d >= 3 -> d*40-20\n      true -> d*40\n   \tend\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77877,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(d) do\n    d * 40 - (cond do\n      d < 3 -> 0\n      d < 7 -> 20\n      true -> 50\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77878,"user_id":null,"body":"defmodule Rent do\n  @day_rate 40\n  @seven_day_discount -50\n  @three_day_discount -20\n  \n  def rental_car_cost(d), do: d * @day_rate + discount(d)\n  \n  defp discount(d) when d >= 7, do: @seven_day_discount\n  defp discount(d) when d >= 3, do: @three_day_discount\n  defp discount(_d), do: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77879,"user_id":null,"body":"defmodule Rent do\n  def rental_car_cost(0), do: 0\n  def rental_car_cost(d) when d >= 7, do: 40*d-50\n  def rental_car_cost(d) when d >= 3, do: 40*d-20\n  def rental_car_cost(d), do: 40*d\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"568dcc3c7f12767a62000038":[{"id":77880,"user_id":null,"body":"defmodule Alarm do\n  def set_alarm(employed, vacation) do\n    employed && !vacation\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77881,"user_id":null,"body":"defmodule Alarm do\n  @moduledoc \"\"\"\n  Write a function named set_alarm which receives two parameters. The first parameter, employed, is true whenever you are employed and the second parameter, vacation is true whenever you are on vacation.\n\n  The function should return true if you are employed and not on vacation (because these are the circumstances under which you need to set an alarm). It should return false otherwise. Examples:\n\n  set_alarm(true, true) -> false set_alarm(false, true) -> false set_alarm(false, false) -> false set_alarm(true, false) -> true\n  \"\"\"\n  def set_alarm(true, false) do\n    true\n  end\n\n  def set_alarm(_employed, _vacation) do\n    false\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77882,"user_id":null,"body":"defmodule Alarm do\n\n  def set_alarm(true, false), do: true\n  def set_alarm(_employed, _vacation), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77883,"user_id":null,"body":"defmodule Alarm do\n  def set_alarm(employed, vacation), do: employed && !vacation\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77884,"user_id":null,"body":"defmodule Alarm do\n  def set_alarm(true = _employed, false = _vacation), do: true\n  def set_alarm(_employed, _vacation), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77885,"user_id":527,"body":"defmodule Alarm do\n  def set_alarm(true, false), do: true\n  def set_alarm(_, _), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77886,"user_id":null,"body":"defmodule Alarm, do: def set_alarm(employed, vacation), do: employed and !vacation","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77887,"user_id":527,"body":"defmodule Alarm do\n  def set_alarm(employed, vacation) do\n    employed and not vacation\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77888,"user_id":null,"body":"defmodule Alarm do\n  def set_alarm(employed, vacation) do\n    employed and !vacation\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77889,"user_id":645,"body":"defmodule Alarm, do: def set_alarm(employed, vacation), do: employed && !vacation","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"569218bc919ccba77000000b":[{"id":77890,"user_id":null,"body":"defmodule DateDays do\n  def date_nb_days(a0, a, p) do\n    daily = p \/ 36000\n\n    days =\n      Stream.iterate(a0, &(&1 * (1 + daily)))\n      |> Enum.find_index(&(&1 >= a))\n    \n    ~D[2016-01-01]\n    |> Date.add(days)\n    |> Date.to_iso8601()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77891,"user_id":null,"body":"defmodule DateDays do\n  def date_nb_days(a0, a, p), do: date_nb_days(a0, a, p \/ 36000, 0)\n  def date_nb_days(a0, a, p, days) when a0 < a do\n    date_nb_days(a0 + a0 * p, a, p, days + 1)\n  end\n  def date_nb_days(a0, a, p, days) do\n    Date.add(~D[2016-01-01], days)\n    |> Date.to_iso8601\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77892,"user_id":null,"body":"defmodule DateDays do\n  def date_nb_days(a0, a, p) do\n    daily = 1 + p \/ 36000\n\n    days = \n      (:math.log(a \/ a0) \/ :math.log(daily)) + 1\n      |> trunc()\n    \n    ~D[2016-01-01]\n    |> Date.add(days)\n    |> Date.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77893,"user_id":null,"body":"defmodule DateDays do\n\n    def date_nb_days(a0, a, p) do\n        days = :math.ceil(:math.log(a \/ a0) \/ :math.log(1 + p \/ 36000))\n        Date.add(~D[2016-01-01], trunc(days)) |> Date.to_string()\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77894,"user_id":null,"body":"defmodule DateDays do\n  def format(number) do\n    if number < 10 do\n      \"0#{number}\"\n    else\n      \"#{number}\"\n    end\n  end\n\n  def date_nb_days(a0, a, p, days) do\n    if a0 >= a do\n      with date = Date.add(~D[2016-01-01], days),\n           month = format(date.month),\n\t   day = format(date.day) do\n        \"#{date.year}-#{month}-#{day}\"\n      end\n    else\n      with new = a0 + a0*p\/36000 do\n        date_nb_days(new, a, p, days+1)\n      end\n    end\n  end\n\n  def date_nb_days(a0, a, p) do\n    date_nb_days(a0, a, p, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77895,"user_id":null,"body":"defmodule DateDays do\n  def date_nb_days(a0, a, p) do\n    Date.add(~D[2016-01-01], ceil((:math.log(a) - :math.log(a0)) \/ :math.log(1.0 + p \/ 36000.0)))\n    |> Date.to_iso8601()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77896,"user_id":null,"body":"defmodule DateDays do\n  def date_nb_days(a0, a, p) do\n    days =\n      Stream.iterate(a0, &(&1 + &1 * p \/ 100 \/ 360))\n      |> Stream.take_while(&(&1 < a))\n      |> Enum.count()\n\n    Date.add(~D[2016-01-01], days) |> to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77897,"user_id":null,"body":"defmodule DateDays do\n\n    def date_nb_days(a0, a, p) do\n      a0\n      |> Stream.iterate(& &1 + &1 * p \/ 36000)\n      |> Enum.find_index(& &1 >= a)\n      |> (&Date.add(~D[2016-01-01], &1)).()\n      |> to_string()\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77898,"user_id":null,"body":"defmodule DateDays do\n    @deposit_date ~D[2016-01-01]\n\n    def date_nb_days(initial_amount, target_amount, interest_rate_percentage) do\n      interest_rate_per_day = 1 + (interest_rate_percentage \/ 36000)\n      \n      calculate(initial_amount, target_amount, interest_rate_per_day)\n    end\n    \n    defp calculate(amount, target_amount, interest_rate_per_day, days_passed \\\\ 0)\n    \n    defp calculate(amount, target_amount, _, days_passed) when amount >= target_amount do\n      @deposit_date\n      |> Date.add(days_passed)\n      |> Date.to_iso8601()\n    end\n    \n    defp calculate(amount, target_amount, interest_rate_per_day, days_passed) do\n      day_amount = (amount * interest_rate_per_day) \n      calculate(day_amount, target_amount, interest_rate_per_day, days_passed + 1)\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77899,"user_id":null,"body":"defmodule DateDays do\n    def date_nb_days(a0,a,p) do\n        n = ceil(:math.log(a\/a0) \/ :math.log(1+p\/36000))\n        ~D[2016-01-01] |> Date.add(n) |> Date.to_string\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"569b5cec755dd3534d00000f":[{"id":77900,"user_id":null,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    result = newavg * (1.0 + length(arr)) - Enum.sum(arr) |> Float.ceil |> trunc\n    cond do\n      result > 0 -> result\n      true       -> raise ArgumentError, message: \"Expected New Average is too low\" \n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77901,"user_id":null,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    newsum = newavg * (length(arr) + 1)\n\n    negative?(newsum - Enum.sum(arr))\n  end\n  \n  def negative?(n) when n <= 0, do: raise ArgumentError, message: \"Expected New Average is too low\"\n  def negative?(n) when is_float(n), do: n |> Float.ceil\n  def negative?(n), do: n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77902,"user_id":null,"body":"defmodule Benefactor do\n  def new_avg(arr, newavg) do\n    newavg\n    |> Kernel.*(length(arr) + 1)\n    |> Kernel.-(Enum.sum(arr))\n    |> :erlang.ceil()\n    |> result()\n  end\n  \n  defp result(n) when n <= 0, do: raise(ArgumentError, \"Expected New Average is too low\")\n  defp result(n), do: n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77903,"user_id":1774,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    case new_don(arr, newavg) do\n      x when x <= 0 ->\n        raise ArgumentError, message: \"Expected New Average is too low\"\n      new_don ->\n        roundup(new_don)\n    end\n  end\n  \n  defp new_don(nums, new_avg) do\n    new_avg * (Enum.count(nums) + 1) - Enum.sum(nums)\n  end\n  \n  defp roundup(num), do: Float.ceil(num + 0.0) |> trunc\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77904,"user_id":492,"body":"defmodule Benefactor do\n\n  def sum(l), do: Enum.reduce(l, 0, &(&1 + &2))\n  def ceiling(x) do\n    t = trunc x\n    case x-t == 0 do\n      true -> t\n      false -> t + 1\n    end\n  end\n  \n  def new_avg(arr, newavg) do\n    l = length(arr)\n    if (l == 0) do\n      newavg\n    else\n      sm = sum(arr)\n      add = (l + 1) * newavg - sm\n      if (add > 0) do\n        ceiling(add)\n      else\n        raise ArgumentError, message: \"Expected New Average is too low\"\n      end\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77905,"user_id":null,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    expectedDonation = newavg * ( length(arr) + 1 ) - Enum.sum(arr) \n    if (expectedDonation < 0 ) do raise ArgumentError, message: \"Expected New Average is too low\" end\n    ceil(expectedDonation)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77906,"user_id":null,"body":"defmodule Benefactor do\n  def new_avg(arr, newavg) do\n    nxt = ceil(newavg * (length(arr) + 1) - Enum.sum(arr))\n\n    if nxt < 0 do\n      raise ArgumentError, \"Expected New Average is too low\"\n    else\n      nxt\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77907,"user_id":250,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    n = ceil((length(arr)+1)*newavg - Enum.sum(arr))\n    if n < 0 do\n      raise ArgumentError, \"Expected New Average is too low\"\n    else\n      n\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77908,"user_id":null,"body":"defmodule Benefactor do\n  def new_avg(arr, newavg) do\n    sum = Enum.reduce(arr, 0, fn x, acc -> newavg - x + acc end) + newavg\n\n    case sum do\n      value when value <= 0 -> raise ArgumentError, message: \"Expected New Average is too low\"\n      _ -> ceil(sum)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77909,"user_id":null,"body":"defmodule Benefactor do\n  \n  def new_avg(arr, newavg) do\n    new_val = ceil((newavg * (length(arr) + 1)) - Enum.sum(arr))\n    if new_val <= 0 do raise(ArgumentError, \"Expected New Average is too low\") end\n    new_val\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56a25ba95df27b7743000016":[{"id":77910,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    code\n    |> Integer.to_string\n    |> String.starts_with?([\"1\", \"2\", \"3\"])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77911,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    \"#{code}\" =~ ~r\/^[1-3]\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77912,"user_id":527,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    List.first(Integer.digits(code)) in 1..3\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77913,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    Integer.to_string(code) =~ ~r\/^[1-3]\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77914,"user_id":53,"body":"defmodule CodeValidator do\n  def valid?(code), do: Regex.match?(~r\/\\A[1-3]\/, to_string(code))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77915,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code), do: \"#{code}\" =~ ~r\/^[1-3]\/\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77916,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    Enum.member?([1,2,3], code |> Integer.digits |> List.first)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77917,"user_id":1774,"body":"defmodule CodeValidator do\n  def valid?(num) do\n    first_digit = Integer.digits(num) |> List.first\n    case first_digit do\n      1 -> true\n      2 -> true\n      3 -> true\n      _ -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77918,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code) do\n    case Integer.digits(code) |> hd do\n      x when x in [1,2,3] -> true\n      _ -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77919,"user_id":null,"body":"defmodule CodeValidator do\n  def valid?(code), do: Regex.match?(~r\/^[1-3]\\d*$\/, to_string(code))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56a3f08aa9a6cc9b75000023":[{"id":77920,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    username =~ ~r\/^[_\\da-z]{4,16}\\z\/\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77921,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    Regex.match?(~r\/\\A[a-z_0-9]{4,16}\\z\/, username)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77922,"user_id":3318,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    String.match?(username, ~r\/\\A[a-z0-9_]{4,16}\\z\/)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77923,"user_id":53,"body":"defmodule UserValidator do\n  def validate_usr(username), do: Regex.match?(~r\/^[0-9a-z_]{4,16}\\z\/, username)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77924,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    username =~ ~r\/^[_a-z0-9]{4,16}\\z\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77925,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    username =~ ~r\/^[a-z0-9_]{4,16}(?!\n)$\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77926,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    if String.contains?(username, \"\n\") do\n      false\n    else\n      Regex.match?(~r\/^[a-z0-9_]{4,16}$\/, username)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77927,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(\"\") do\n    false\n  end\n  def validate_usr(username) do\n    Regex.replace(~r\/^[a-z0-9_]{4,16}$\/, username, \"\") == \"\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77928,"user_id":null,"body":"defmodule UserValidator do\n  @doc\"\"\"\n  `validate_usr\/1` - Yields `true` when all of these requirements are met:\n  \n  - string can only contain lowercase letters [a-z]\n  - string can have numbers [0-9]\n  - the underscore `_` is the only other character allowed\n  - string must be 4-16 characters long\n  - string cannot contain newlines `\n`\n  \"\"\"\n  @spec validate_usr(String.t) :: boolean\n  def validate_usr(username) do\n    Regex.match?(~r\/\\A[a-z0-9_]{4,16}\\z\/, username)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77929,"user_id":null,"body":"defmodule UserValidator do\n  def validate_usr(username) do\n    if String.contains?(username, \"\n\"), do: false, else: Regex.match?(~r\/^([a-z0-9_]){4,16}$\/, username)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56a4872cbb65f3a610000026":[{"id":77930,"user_id":527,"body":"defmodule Maxrot do\n\n  def max_rot(num) do\n    num |> Integer.digits |> do_max_rot |> Integer.undigits\n  end\n  \n  defp do_max_rot([_] = ds), do: ds\n  defp do_max_rot([x, y | ys] = ds), do: max(ds, [y | do_max_rot(ys ++ [x])])\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77931,"user_id":2098,"body":"defmodule Maxrot do\n\n  def max_rot(num) do\n    num\n    |> Integer.digits\n    |> get_max_rot\n    |> Integer.undigits\n  end\n  \n  defp get_max_rot([_] = num_arr), do: num_arr\n  defp get_max_rot([digit, head | tail] = num_arr) do\n    max_arr = [head | get_max_rot(tail ++ [digit])]\n    max(num_arr, max_arr)\n  end\n\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77932,"user_id":492,"body":"defmodule Maxrot do\n\n  defp max_rot_list([x]) do [x] end\n  defp max_rot_list(xs = [x, y | xss]) do\n    rot = [y] ++ max_rot_list(xss ++ [x])\n    cond do\n      x > y -> xs\n      x < y -> rot\n      true  -> max(xs, rot)\n    end\n  end\n  \n  def max_rot(num) do\n    num |> Integer.to_string |> to_charlist |> Enum.map(fn(c) -> c - hd('0') end) \n        |> max_rot_list |> Enum.join(\"\") |> Integer.parse |> elem(0)\n  end\n  \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77933,"user_id":null,"body":"defmodule Maxrot do\n  def max_rot(num) do\n    str = Integer.to_string(num)\n  \n    0..(String.length(str) - 1)\n    |> Enum.reduce([str], fn n, [prev | _] = acc ->\n        {held, <<head>> <> tail} = String.split_at(prev, n)\n        [held <> tail <> <<head>> | acc]\n    end)\n    |> Enum.max()\n    |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77934,"user_id":null,"body":"defmodule Maxrot do\n  def max_rot(num) do\n    str = to_string(num) |> String.split(\"\") |> Enum.slice(1..-2)\n    max_rot_recursion(0, [str], length(str) -1) |> Enum.max()\n  end\n\n  defp max_rot_recursion(i, str, l) do\n    if i < l do\n      [last | _] = str\n      {first, rest} = List.pop_at(last, i)\n      max_rot_recursion(i+1, [rest ++ [first]] ++ str, l)\n    else\n      Enum.map(str,fn x ->  String.to_integer(to_string(x)) end)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77935,"user_id":null,"body":"defmodule Maxrot do\n\n  def max_rot(num) do\n    num \n    |> Integer.digits\n    |> rotations([])\n    |> Enum.max\n    |> Integer.undigits\n  end\n  \n  defp rotations([], _) do\n    []\n  end\n  \n  defp rotations(digits_list, list) do\n    [h | t] = tl digits_list ++ [hd digits_list]\n    [ list ++ digits_list | rotations(t, list ++ [h])]\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77936,"user_id":null,"body":"defmodule Maxrot do\n  @spec max_rot(pos_integer) :: pos_integer\n  def max_rot(num) do\n    num_list = Integer.digits(num)\n    max_rot(num_list, 0, [num])\n  end \n  \n  defp max_rot(list, count, acc) when length(list) == count, do: Enum.max(acc)\n\n  defp max_rot(list, count, acc) do\n    {n, ns} = List.pop_at(list, count)\n    updated_list = ns ++ [n]\n    \n    max_rot(updated_list, count + 1, [Integer.undigits(updated_list) | acc])\n  end \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77937,"user_id":null,"body":"defmodule Maxrot do\n  def getCounter(number, counter) do\n    if div(number, counter) == 0 do\n      div(counter, 10)\n    else\n      getCounter(number, counter*10)\n    end\n  end\n\n  def rotate(number, divisor) do\n    with fixed = div(number, divisor*10),\n         variable = rem(number, divisor*10),\n\t tail = div(variable, divisor),\n\t head = rem(variable, divisor) do\n      fixed*divisor*10 + head*10 + tail\n    end\n  end\n\n  def max_rot2(_, answer, 0), do: answer\n  def max_rot2(number, answer, divisor) do\n    with newNumber = rotate(number, divisor),\n         newAnswer = max(answer, number) do\n      max_rot2(newNumber, newAnswer, div(divisor, 10))\n    end\n  end\n\n  def max_rot(num) do\n    with counter = getCounter(num, 1) do\n      max_rot2(num, num, counter)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77938,"user_id":null,"body":"defmodule Maxrot do\n  def max_rot(num) when num < 10, do: num\n\n  def max_rot(num) do\n    digits = Integer.digits(num)\n\n    ([digits] ++\n       Enum.scan(0..(length(digits) - 2), digits, fn pos, digits ->\n         Enum.slice(digits, 0, pos) ++ Enum.slice(digits, (pos + 1)..-1) ++ [Enum.at(digits, pos)]\n       end))\n    |> Enum.map(&Integer.undigits\/1)\n    |> Enum.max()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77939,"user_id":null,"body":"defmodule Maxrot do\n  def max_rot(num) do\n    _rotate(num, 0, []) |> Enum.max()\n  end\n\n  defp _rotate(s, i, arr) do\n    arr = arr ++ [s]\n    str = \"#{s}\"\n\n    if i <= String.length(str) do\n      str =\n        String.to_integer(\n          \"#{String.slice(str, 0, i)}#{String.slice(str, i + 1, String.length(str))}#{String.at(str, i)}\"\n        )\n\n      _rotate(str, i + 1, arr)\n    else\n      arr\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56a4addbfd4a55694100001f":[{"id":77940,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(greetings) do\n    Regex.match?(~r{hello|ciao|salut|hallo|hola|ahoj|czesc}i, greetings)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77941,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(greetings) do\n    greetings =~ ~r\/hello|ciao|salut|hallo|hola|ahoj|czesc\/i\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77942,"user_id":1774,"body":"defmodule Polyglot do\n  @greetings ~w(hello ciao salut hallo hola ahoj czesc)\n  \n  def validate_hello(greetings) do\n    greetings\n    |> String.downcase\n    |> String.contains?(@greetings)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77943,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(greetings) do\n    Regex.match?(~r\/hello|ciao|salut|hallo|hola|ahoj|czesc\/i, greetings)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77944,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(greetings) do\n    greetings = String.downcase(greetings)\n    cond do\n      String.contains?(greetings, \"hello\") -> true\n      String.contains?(greetings, \"ciao\") -> true\n      String.contains?(greetings, \"salut\") -> true\n      String.contains?(greetings, \"hallo\") -> true\n      String.contains?(greetings, \"hola\") -> true\n      String.contains?(greetings, \"ahoj\") -> true\n      String.contains?(greetings, \"czesc\") -> true\n      true -> false\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77945,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(g) do\n    vars = [\n    \"ciao\",\n    \"hello\",\n    \"salut\",\n    \"hallo\",\n    \"hola\",\n    \"ahoj\",\n    \"czesc\"\n]\nIO.puts(g)\n  if g == \"\" do false end\n  Regex.match?(~r\/#{Enum.join(vars,\"|\")}\/i, g)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77946,"user_id":null,"body":"defmodule Polyglot do\n  @hellos [\"hello\", \"ciao\", \"salut\", \"hallo\", \"hola\", \"ahoj\", \"czesc\"]\n\n  @spec validate_hello(String.t) :: boolean\n  def validate_hello(greeting) do\n    greeting\n    |> String.downcase()\n    |> String.split(\" \")\n    |> Enum.map(&(&1 in @hellos))\n    |> Enum.any?()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77947,"user_id":null,"body":"defmodule Polyglot do\n  def validate_hello(message) do\n    greetings = [\"hello\", \"ciao\", \"salut\", \"hallo\", \"hola\", \"ahoj\", \"czesc\"]\n    \n    message\n    |> String.downcase\n    |> String.split\n    |> Enum.any? &(&1 in greetings)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77948,"user_id":null,"body":"defmodule Polyglot do\n  @languages [\"hello\", \"ciao\", \"salut\", \"hallo\", \"hola\", \"ahoj\", \"czesc\"]\n\n  def validate_hello(greetings) do\n    String.downcase(greetings)\n    |> String.contains?(@languages)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77949,"user_id":250,"body":"defmodule Polyglot do\n  def validate_hello(g) do\n    Regex.match?(~r\/(h[ae]llo|ciao|salut|hola|ahoj|czesc)\/, String.downcase(g))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56a5d994ac971f1ac500003e":[{"id":77950,"user_id":null,"body":"defmodule Longestconsec do\n\tdef longest_consec([], _), do: \"\"\n\tdef longest_consec(strarr, k) when length(strarr) < k or k <= 0, do: \"\"\n  \n  def longest_consec(strarr, k) do\n\t\tEnum.chunk(strarr, k, 1)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max_by(&String.length\/1)\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77951,"user_id":null,"body":"defmodule Longestconsec do\n  def longest_consec(strarr, k) when k > 0 and k <= length(strarr) do\n    strarr\n    |> Enum.chunk_every(k, 1, :discard)\n    |> Enum.map(fn x -> Enum.into(x, \"\") end)\n    |> Enum.max_by(&String.length\/1)\n  end\n\n  def longest_consec(_, _), do: \"\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77952,"user_id":null,"body":"defmodule Longestconsec do\n  def longest_consec(strarr, k) when length(strarr) == 0, do: \"\"\n  def longest_consec(strarr, k) when k > length(strarr), do: \"\"\n  def longest_consec(strarr, k) when k <= 0, do: \"\"\n  def longest_consec(strarr, k) do\n    strarr\n    |> Enum.chunk_every(k, 1, [\"\"]) \n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max_by(&String.length\/1)\n  end  \n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77953,"user_id":null,"body":"defmodule Longestconsec do\n  def longest_consec([], _k), do: \"\"\n  def longest_consec(_, k) when k < 1, do: \"\"\n  def longest_consec(strarr, k) when k > length(strarr), do: \"\"\n  \n  def longest_consec(strarr, k) do\n    strarr\n    |> Enum.chunk_every(k, 1)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max_by(&String.length\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77954,"user_id":null,"body":"defmodule Longestconsec do\n  def longest_consec([], _), do: \"\"\n  def longest_consec(list, k) when length(list) < k or k <= 0 , do: \"\"\n  \n  def longest_consec(list, k) do\n    Enum.chunk(list, k, 1)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max_by(&String.length\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77955,"user_id":2098,"body":"defmodule Longestconsec do\n  def longest_consec([], _), do: \"\"\n  def longest_consec(strarr, k) when (k <= 0) or (k > length(strarr)), do: \"\"\n\n  def longest_consec(strarr, k) do\n    Enum.reduce(strarr, {\"\", 0}, &get_current_consec(&1, strarr, &2, k))\n    |> elem(0)\n  end\n\n  defp get_current_consec(_str, strarr, {current_consec, index}, k) do\n    candidate = candidate(strarr, index, k)\n    if String.length(current_consec) < String.length(candidate), do: {candidate, index + 1}, else: {current_consec, index + 1}\n  end\n\n  defp candidate(strarr, index, k) do\n    strarr\n    |> Enum.slice(index..(index + k - 1))\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77956,"user_id":492,"body":"defmodule Longestconsec do\n  \n  def longest_consec(ls, k) when ((ls == []) or (k > length(ls)) or (k <= 0)) do \"\" end  \n\n  def longest_consec(ls, k), do: _longest_consec(ls, k, [])\n  \n  defp _longest_consec(ls,  n, result) when length(ls) < n do\n    result \n    |> Enum.reverse\n    |> Enum.max_by(fn x -> String.length(x) end)\n  end\n  defp _longest_consec(ls = [_ | tail], n, result) do\n    _longest_consec(tail, n, [Enum.join(Enum.take(ls, n), \"\") | result])\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77957,"user_id":495,"body":"defmodule Longestconsec do\n  \n  def longest_consec(xs, k) do\n    n = length(xs)\n    if (k <= 0 || n == 0 || k > n) do\n      \"\"\n    else\n      (for i <- 0..n-k, do: xs |> Enum.slice(i, k) |> Enum.join) |> Enum.max_by(&String.length\/1)\n    end\n  end  \n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77958,"user_id":null,"body":"defmodule Longestconsec do\n  def longest_consec(strarr, k) do\n    strarr\n    |> Enum.chunk_every(k, 1, :discard)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.max_by(&String.length\/1)\n  rescue\n    _ -> \"\"\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77959,"user_id":null,"body":"defmodule Longestconsec do\n  \n  def get_longest_string([], k, longest_str), do: longest_str\n  \n#   def get_longest_string([_head | tail], k, longest_str) when k < 0 do\n#     longest_str\n#   end\n  \n  def get_longest_string([_head | tail], k, longest_str) when length(tail) < k do\n    longest_str\n  end\n  \n  \n  def get_longest_string([_head | tail], k, longest_str) do\n    concated_str = concat_k_str(tail, k)\n    get_longest_string(tail, k, get_max_length_str(longest_str, concated_str))\n  end\n  \n  def get_max_length_str(str1, str2) do\n    if String.length(str1) < String.length(str2) do\n      str2\n    else\n      str1\n    end\n  end\n  \n  def longest_consec(strarr, k) do\n    concated_str = concat_k_str(strarr, k)\n    result = get_longest_string(strarr, k, concated_str)\n    result\n  end  \n  \n  \n  def concat_k_str(strarr, k) when k < 0 or length(strarr) < k or k == 0 do\n    \"\"\n  end\n  \n  \n  def concat_k_str(strarr, k) when strarr == [] do\n    \"\"\n  end\n  \n  \n  def concat_k_str(strarr, k) do\n    list = Enum.take(strarr, k)\n    Enum.reduce(list, fn (elem, acc) -> acc<>elem end)\n  end\n\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56af1a20509ce5b9b000001e":[{"id":77960,"user_id":null,"body":"defmodule SalesmanTravel do\n  @regexp ~r\/(?<house>\\d+) (?<street>.*) (?<zipcode>.* .*)\/\n\n  def travel(r, zipcode) when is_bitstring(r) do\n    String.split(r, \",\")\n    |> Enum.map(&(parse_address(&1)))\n    |> Enum.filter(&(&1[\"zipcode\"] == zipcode))\n    |> format_addresses(zipcode)\n  end\n  \n  def travel(_, zipcode) do\n  \t\"#{zipcode}:\/\"\n  end\n  \n  def parse_address(full_address) do\n    Regex.named_captures(@regexp, full_address)\n  end\n \n  def format_addresses(addresses, zipcode) do    \n    \"#{zipcode}:#{join_properties(addresses, \"street\")}\/#{join_properties(addresses, \"house\")}\"\n  end\n  \n  def join_properties(addresses, prop) do\n    addresses |> Enum.map(&(&1[prop])) |> Enum.join(\",\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77961,"user_id":2098,"body":"defmodule SalesmanTravel do\n  def travel(r, zipcode) when r == [] or is_nil(r), do: \"#{zipcode}:\/\"\n  def travel(r, zipcode), do: r |> format_addresses(zipcode)\n\n  defp format_addresses(r, zipcode) do\n    str = String.split(r, \",\", trim: true)\n      |> Enum.reduce([[], []], &format_address(&1, &2, zipcode))\n      |> Enum.map(&Enum.join(&1, \",\"))\n      |> Enum.join(\"\/\")\n\n    \"#{zipcode}:#{str}\"\n  end\n\n  defp format_address(address, [streets, units], zipcode) do\n    case String.slice(address, -8, 8) == zipcode do\n      true ->\n        [unit, street] = String.slice(address, 0, String.length(address) - 9)\n          |> String.split(\" \", parts: 2)\n        [streets ++ [street], units ++ [unit]]\n      false ->\n        [streets, units]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77962,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode), do: zipcode <> \":\/\" \n  def travel(r, zipcode) do\n    {streets, numbers} = (for [number, street, ^zipcode] <- Regex.scan(~r\/(\\d*) (.*?) ([A-Z]{2} \\d{5})\/, r, capture: :all_but_first), do: {street, number}) |> Enum.unzip\n    \"#{zipcode}:#{Enum.join(streets, \",\")}\/#{Enum.join(numbers, \",\")}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77963,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode), do: zipcode <> \":\/\"\n  def travel(r, zipcode) do\n    {streets, numbers} = Regex.scan(~r\/(?:^|,)(\\d+)\\s([\\w\\s.]+)\\s#{zipcode}\/, r)\n    |> Enum.map(fn([_, n, s]) -> {s, n} end)\n    |> Enum.unzip\n    zipcode <> \":\" <> Enum.join(streets, \",\") <> \"\/\" <> Enum.join(numbers, \",\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77964,"user_id":null,"body":"defmodule SalesmanTravel do\n\n  @spec travel(String.t(), String.t()) :: String.t()\n  def travel([], zipcode) do\n    \"#{zipcode}:\/\"\n  end\n  \n  def travel(r, zipcode) do\n    addresses = String.split(r, \",\")\n    #can use String.ends_with?(string, suffix) also in place of Regex.match?\n    result = for x <- addresses, Regex.match?(~r\/#{zipcode}\/, x), do: x\n    cond do\n      result == [] -> \"#{zipcode}:\/\"\n      true ->\n        new = for x <- result, do: split_address(x, zipcode)\n        {house, streets} = Enum.unzip(new)\n        \"#{zipcode}:\" <> Enum.join(streets, \",\") <> \"\/\" <> Enum.join(house, \",\")\n    end\n  end\n\n  def split_address(address, zipcode) do\n    [house, rest] = String.split(address, \" \", parts: 2)\n    street = String.replace_suffix(rest, zipcode, \"\") |> String.trim()\n    {house, street}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77965,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode), do: \"#{zipcode}:\/\"\n\n  def travel(r, zipcode) do\n    r\n    |> String.split(\",\")\n    |> Enum.filter(&String.contains?(&1, zipcode))\n    |> Enum.map(&parse_address\/1)\n    |> compose_addresses(zipcode)\n  end\n\n  def compose_addresses(list, zipcode) do\n    streets = list |> Enum.map(& &1[\"street\"]) |> Enum.join(\",\")\n    nums = list |> Enum.map(& &1[\"num\"]) |> Enum.join(\",\")\n\n    \"#{zipcode}:#{streets}\/#{nums}\"\n  end\n\n  def parse_address(string) do\n    Regex.named_captures(~r\/^(?<num>\\d+) (?<street>.+) (?<zipcode>\\w{2} .+$)\/, string)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77966,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode), do: \"#{zipcode}:\/\"\n\n  def travel(addresses, zipcode) do\n    addresses\n    |> String.split(\",\", trim: true)\n    |> Enum.map(&String.split_at(&1, -9))\n    |> Enum.filter(fn {_street, zip} -> String.strip(zip) == zipcode end)\n    |> Enum.map(fn {street, _zip} -> String.split(street, \" \", parts: 2) |> List.to_tuple() end)\n    |> Enum.unzip()\n    |> Tuple.to_list()\n    |> Enum.reverse()\n    |> Enum.map_join(\"\/\", &Enum.join(&1, \",\"))\n    |> (&\"#{zipcode}:#{&1}\").()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77967,"user_id":null,"body":"defmodule SalesmanTravel do\n  \n  def travel([], zipcode) do\n    \"#{zipcode}:\/\"\n  end\n  def travel(r, zipcode) do\n    result = r\n      |> String.split(\",\")\n      |> Enum.filter(fn(address) -> String.contains?(address,zipcode) end)\n      |> Enum.map(fn(str) -> String.split(str,zipcode) end)\n      |> Enum.map(fn([str, _]) -> String.split(str, \" \", parts: 2) end)\n    \"#{zipcode}:#{streets(result)}\/#{numbers(result)}\"\n  end\n  \n  def numbers(addresses) do\n    addresses |> Enum.map(fn([a,_b]) -> a end) |> Enum.join(\",\")\n  end\n  \n  def streets(addresses) do\n    addresses |> Enum.map(fn([_a,b]) -> String.strip(b) end) |> Enum.join(\",\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77968,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode) do\n    \"#{zipcode}:\/\"\n  end\n\n  def travel(addresses, zipcode) do\n    ~r\/(\\d+) ([^,]+) ([A-Z]{2} \\d+)\/\n    |> Regex.scan(addresses)\n    |> Stream.filter(fn [_, _, _, zip] -> zip === zipcode end)\n    |> Stream.map(fn [_, number, street, _] -> [street, number] end)\n    |> zip() # Stream.zip\/1\n    |> Stream.map(&Tuple.to_list\/1)\n    |> Stream.map(&Enum.join(&1, \",\"))\n    |> Enum.join(\"\/\")\n    |> (&\"#{&2}:#{&1}\").(zipcode)\n  end\n  \n# --------------------------------------------------------------------\n# Everything below this line was copied from the source Stream in a\n# later version of Elixir. I didn't realize Stream.zip\/1 would not be\n# available when I wrote my solution.\n# --------------------------------------------------------------------\n  defp zip(enumerables) do\n    &prepare_zip(enumerables, &1, &2)\n  end\n\n  defp prepare_zip(enumerables, acc, fun) do\n    step = &do_zip_step(&1, &2)\n\n    enum_funs =\n      Enum.map(enumerables, fn enum ->\n        {&Enumerable.reduce(enum, &1, step), [], :cont}\n      end)\n\n    do_zip(enum_funs, acc, fun)\n  end\n\n  # This implementation of do_zip\/3 works for any number of\n  # streams to zip, even if right now zip\/2 only zips two streams.\n\n  defp do_zip(zips, {:halt, acc}, _fun) do\n    do_zip_close(zips)\n    {:halted, acc}\n  end\n\n  defp do_zip(zips, {:suspend, acc}, fun) do\n    {:suspended, acc, &do_zip(zips, &1, fun)}\n  end\n\n  defp do_zip([], {:cont, acc}, _callback) do\n    {:done, acc}\n  end\n\n  defp do_zip(zips, {:cont, acc}, callback) do\n    try do\n      do_zip_next_tuple(zips, acc, callback, [], [])\n    catch\n      kind, reason ->\n        do_zip_close(zips)\n        :erlang.raise(kind, reason, nil)\n    else\n      {:next, buffer, acc} ->\n        do_zip(buffer, acc, callback)\n\n      {:done, _acc} = other ->\n        other\n    end\n  end\n\n  # do_zip_next_tuple\/5 computes the next tuple formed by\n  # the next element of each zipped stream.\n\n  defp do_zip_next_tuple([{_, [], :halt} | zips], acc, _callback, _yielded_elems, buffer) do\n    do_zip_close(:lists.reverse(buffer, zips))\n    {:done, acc}\n  end\n\n  defp do_zip_next_tuple([{fun, [], :cont} | zips], acc, callback, yielded_elems, buffer) do\n    case fun.({:cont, []}) do\n      {:suspended, [elem | next_acc], fun} ->\n        next_buffer = [{fun, next_acc, :cont} | buffer]\n        do_zip_next_tuple(zips, acc, callback, [elem | yielded_elems], next_buffer)\n\n      {_, [elem | next_acc]} ->\n        next_buffer = [{fun, next_acc, :halt} | buffer]\n        do_zip_next_tuple(zips, acc, callback, [elem | yielded_elems], next_buffer)\n\n      {_, []} ->\n        # The current zipped stream terminated, so we close all the streams\n        # and return {:halted, acc} (which is returned as is by do_zip\/3).\n        do_zip_close(:lists.reverse(buffer, zips))\n        {:done, acc}\n    end\n  end\n\n  defp do_zip_next_tuple([{fun, zip_acc, zip_op} | zips], acc, callback, yielded_elems, buffer) do\n    [elem | rest] = zip_acc\n    next_buffer = [{fun, rest, zip_op} | buffer]\n    do_zip_next_tuple(zips, acc, callback, [elem | yielded_elems], next_buffer)\n  end\n\n  defp do_zip_next_tuple([] = _zips, acc, callback, yielded_elems, buffer) do\n    # \"yielded_elems\" is a reversed list of results for the current iteration of\n    # zipping: it needs to be reversed and converted to a tuple to have the next\n    # tuple in the list resulting from zipping.\n    zipped = List.to_tuple(:lists.reverse(yielded_elems))\n    {:next, :lists.reverse(buffer), callback.(zipped, acc)}\n  end\n\n  defp do_zip_close(zips) do\n    :lists.foreach(fn {fun, _, _} -> fun.({:halt, []}) end, zips)\n  end\n\n  defp do_zip_step(x, acc) do\n    {:suspend, :lists.reverse([x | acc])}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77969,"user_id":null,"body":"defmodule SalesmanTravel do\n  def travel([], zipcode), do: \"#{zipcode}:\/\"\n\n  def travel(r, zipcode) do\n    matches =\n      String.split(r, \",\")\n      |> Enum.map(fn addr ->\n        Regex.run(~r\/^(\\d+)\\s+(.*)\\s+([A-Z]{2}\\s+\\d+)$\/, addr) |> Enum.drop(1)\n      end)\n      |> Enum.filter(fn [_, _, zip] -> zip == zipcode end)\n\n    \"#{zipcode}:#{Enum.map(matches, fn [_, st, _] -> st end) |> Enum.join(\",\")}\/#{Enum.map(matches, &hd\/1) |> Enum.join(\",\")}\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56b0ff16d4aa33e5bb00008e":[{"id":77970,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n    String.split(datetime,\",\") |> List.first\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77971,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime), do: datetime |> String.split(\",\") |> hd\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77972,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n    datetime\n    |> String.splitter(\",\")\n    |> Enum.at(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77973,"user_id":null,"body":"defmodule Datemizer do\n  # Rough performance benchmarks of different solutions:\n  #   Test condition: datetime string with 26365 chars after \", \"\n  #   Iterations completed in 12 seconds # solution label\n  #      90_000 # String.split(\", \")\n  #   1_000_000 # reduce_while(next_grapheme()\n  #   1_000_000 # Stream.unfold(next_grapheme()\n  #   1_200_000 # recursive <<\",\", rest>>\n  #   1_800_000 # recursive next_grapheme()\n  #   4_000_000 # String.split(\", \", parts: 2)\n  #   7_000_000 # :binary.split(\", \")\n  \n  def shorten_to_date(datetime) do\n    string_until(datetime, \", \")\n  end\n  \n  def string_until(string, pattern) do\n    string\n    |> :binary.split(pattern)\n    |> List.first()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77974,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n    datetime\n    |> String.split(\",\")\n    |> List.first\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77975,"user_id":1249,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n    datetime\n    |> String.split(\",\")\n    |> Enum.at(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77976,"user_id":null,"body":"defmodule Datemizer do\n  # Using this exercise to practice:\n  #   recursion, tail recursion, string processing by grapheme,\n  #   iodata and improper lists instead of concatenation\n\n  import String, only: [next_grapheme: 1]\n\n  def shorten_to_date(datetime) do\n    do_shorten_to_date(next_grapheme(datetime), [])\n  end\n  \n  def do_shorten_to_date({\",\", _rest}, acc) do\n    IO.iodata_to_binary(acc)\n  end\n  \n  def do_shorten_to_date({grapheme, rest}, acc) do\n    do_shorten_to_date(next_grapheme(rest), [acc | grapheme])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77977,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n   [head | _] = String.split(datetime, \",\")\n   head\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77978,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n  \tdatetime\n    |> String.replace(~r\/, \\d+[ap]m$\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77979,"user_id":null,"body":"defmodule Datemizer do\n  def shorten_to_date(datetime) do\n    String.replace(datetime, ~r\/, ([0-9]).*(am|pm)\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56b29582461215098d00000f":[{"id":77980,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n    {min, max} = Enum.min_max(pipes)\n    min..max |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77981,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(list) do\n  \tEnum.to_list(Enum.min(list)..Enum.max(list))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77982,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n    pipes\n    |> Enum.min_max()\n    |> (fn {min, max} -> min..max end).()\n    |> Enum.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77983,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n    {min, max} = {Enum.min(pipes), Enum.max(pipes)}\n    Enum.to_list min..max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77984,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n    Enum.to_list(List.first(pipes)..List.last(pipes))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77985,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n  IO.inspect pipes\n    pipe_fix(Enum.sort(pipes), [])\n  end\n\n  defp pipe_fix([], final) do\n    final\n  end\n\n  defp pipe_fix([head | tail], final) do\n      if !Enum.empty?(tail) and hd(tail) != head + 1 do\n            pipe_fix([head+1] ++ tail, final ++ [head])\n        else \n            pipe_fix(tail, final ++ [head])\n      end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77986,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix([lowest]) do\n    [lowest]\n  end\n  def pipe_fix([lowest | tail]) do\n    Enum.to_list(lowest..Enum.max(tail))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77987,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(list), do: Enum.to_list(List.first(list)..List.last(list))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77988,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n      Stream.iterate(List.first(pipes), &(&1 + 1))\n    |> Enum.take(List.last(pipes) - List.first(pipes) + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77989,"user_id":null,"body":"defmodule Pipeline do\n  def pipe_fix(pipes) do\n    hd(pipes)..List.last(pipes)\n    |> Enum.to_list()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56b5afb4ed1f6d5fb0000991":[{"id":77990,"user_id":null,"body":"defmodule Revrot do\n  require Integer\n  \n  def revrot(_, 0), do: \"\"\n  def revrot(\"\", _), do: \"\"\n  def revrot(str, sz) when sz > byte_size(str)  do \"\" end\n\n  def revrot(str, sz) do\n    strtonums(str) \n      |> Enum.chunk(sz)\n      |> Enum.map(&revrot(&1))\n      |> List.flatten\n      |> Enum.join\n  end\n  \n  def revrot(nums) when is_list(nums) do\n    case Integer.is_even(sumcubes(nums)) do\n      true  -> Enum.reverse(nums)\n      false -> tl(nums) ++ [hd(nums)]\n    end\n  end\n  \n  def strtonums(str) do\n    str |> String.codepoints |> Enum.map(&String.to_integer(&1))\n  end\n  \n  def sumcubes(nums) when is_list(nums) do\n    Enum.reduce(nums, 0, fn(num, acc) -> :math.pow(num, 3) + acc end) |> round\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77991,"user_id":null,"body":"defmodule Revrot do\n  import Integer\n\n  def revrot(str, sz) when sz <= 0 or str == \"\", do: \"\"\n  def revrot(str, sz) do\n    str\n    |> String.graphemes()\n    |> Enum.chunk(sz)\n    |> Enum.map(fn digits -> \n         digits\n         |> Enum.map(&String.to_integer\/1)\n         |> Enum.map(& &1 * &1 * &1)\n         |> Enum.sum()\n         |> is_even()\n         |> if(do: Enum.reverse(digits), else: tl(digits) ++ [hd(digits)])\n       end)\n    |> Enum.map_join(&Enum.join\/1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77992,"user_id":null,"body":"defmodule Revrot do\n  import Integer\n\n  def revrot(str, sz) when sz <= 0 or sz > byte_size(str), do: \"\"\n  def revrot(str, sz) do\n    str\n    |> String.graphemes()\n    |> Enum.chunk(sz)\n    |> Enum.map_join(fn x -> is_even(sum_cubes(x)) && Enum.reverse(x) || [tl(x) | hd(x)] end)\n  end\n  \n  defp sum_cubes(list) do\n    list\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.map(fn x -> x * x * x end)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77993,"user_id":1774,"body":"defmodule Revrot do\n\n  def revrot(\"\", _), do: \"\"\n  def revrot(_, size) when size <= 0, do: \"\"\n  def revrot(str, size) when size > byte_size(str), do: \"\"\n  def revrot(str, size) do\n    str\n    |> String.codepoints\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.chunk(size)\n    |> Enum.map(&do_revrot\/1)\n    |> List.flatten\n    |> Enum.map(&Integer.to_string\/1)\n    |> Enum.join\n  end\n  \n  defp do_revrot(chunk) do\n    if rem(sum_cubes(chunk), 2) == 0 do\n      Enum.reverse(chunk)\n    else\n      lrotate(chunk, 1)\n    end\n  end\n  \n  defp sum_cubes(nums) do\n    Enum.reduce(nums, 0, &(:math.pow(&1, 3) + &2)) |> trunc\n  end\n  \n  defp lrotate(list, 0), do: list\n  defp lrotate([head | list], number), do: lrotate(list ++ [head], number - 1)\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77994,"user_id":null,"body":"defmodule Revrot do\n\n\tdef lrotate(list, 0), do: list\n  def lrotate([head|list], number), do: lrotate(list ++ [head], number - 1)\n\n\tdef revrot(\"\", _), \tdo: \"\"\n\tdef revrot(_, 0), \tdo: \"\"\n  def revrot(str, sz) do\n\t  cubes_sum = fn(l) ->\n\t\t\tl |> Enum.map(&Integer.parse\/1) |>\n\t\t\tEnum.map(&(elem &1, 0)) |>\n\t\t\tEnum.map(&:math.pow(&1,2)) |>\n\t\t\tEnum.sum\n\t\tend\n  \ttransform = fn(l) ->\n\t\t\tif rem(round(cubes_sum.(l)), 2) == 0, do: Enum.join(l) |> String.reverse, else: lrotate(l, 1) |> Enum.join\n    end\n\t\tString.codepoints(str) |> Enum.chunk(sz) |> Enum.map(transform) |> Enum.join\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77995,"user_id":null,"body":"defmodule Revrot do\n\n\trequire Integer\n\n  def rotate([]), do: []\n  def rotate([h | t]), do: t ++ [h]\n  \n\tdef even_sum_of_cubes(str) do\n  \t# Don't need to cube; cubes of odds are odd, cubes of evens are even\n    # Just count number of odds; if even, then sum is even\n  \tstr |> \n    \tStream.map(&Integer.parse\/1) |>\n      Stream.filter(fn({x, _}) -> Integer.is_odd(x) end) |>\n      Enum.count |>\n      Integer.is_even\n  end\n  \n  defp revrot_(str) do\n  \tif even_sum_of_cubes(str) do\n    \tEnum.reverse str\n    else\n      rotate(str)\n    end\n  end\n  \n  def revrot(\"\", _), do: \"\"\n  def revrot(_, sz) when sz <= 0, do: \"\"\n  def revrot(str, sz) do \n  \tif String.length(str) < sz do\n    \t\"\"\n    else\n  \t\tstr |> \n    \t\tString.codepoints |> \n      \tStream.chunk(sz) |> \n      \tStream.filter(fn(chunk) -> length(chunk) == sz end) |>\n      \tStream.map(&revrot_\/1) |> \n      \tEnum.concat |> \n      \tList.to_string\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77996,"user_id":null,"body":"defmodule Revrot do\n  def revrot(str, sz) when sz <= 0 or str == \"\", do: \"\"\n  def revrot(str, sz) do\n    str\n    |> String.graphemes\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.chunk_every(sz, sz, :discard)\n    |> Enum.map(fn chunk ->\n          if chunk \n              |> Enum.map(&(&1*&1))\n              |> Enum.sum\n              |> Kernel.rem(2)\n              |> Kernel.==(0) do \n            Enum.reverse(chunk)\n          else \n            # Enum.slide(chunk, 0, -1) # elixir 1.13.0 required :(\n            chunk\n            |> Enum.slice(1..(Kernel.length(chunk)-1)) \n            |> Kernel.++([List.first(chunk)])\n          end\n        end)\n    |> List.flatten\n    |> Enum.map(&Integer.to_string\/1)\n    |> Enum.join\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77997,"user_id":null,"body":"defmodule Revrot do\n\n  def revrot(\"\", _), do: \"\"\n  def revrot(_, 0), do: \"\"\n  def revrot(str, sz) when byte_size(str) < sz, do: \"\"\n  def revrot(str, sz) do\n    {h, rest} = String.split_at(str, sz)\n    parse_chunk(h) <> revrot(rest, sz)\n  end\n\n  defp parse_chunk(chunk) do\n    numbers = String.split(chunk, \"\", trim: true)\n    case even_odd(numbers, true) do\n      true -> Enum.join(Enum.reverse(numbers))\n      _ -> \n        [h | t] = numbers\n        Enum.join(t) <> h\n    end\n  end\n\n  # odd number cubes are odd too, so only the digit matters:\n  defp even_odd([], is_even), do: is_even\n  defp even_odd([number | rest], is_even) when number in [\"0\", \"2\", \"4\", \"6\", \"8\"] do\n    even_odd(rest, is_even)\n  end\n  defp even_odd([_ | rest], is_even), do: even_odd(rest, !is_even)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77998,"user_id":null,"body":"defmodule Revrot do\n\n\tdef revrot(\"\", _)\t\t\t\t\t\t\t\t\t, do: \"\"\n\tdef revrot(_, sz)   when (sz <= 0), do: \"\"\n  \n  def revrot(str, sz) do\n  \tif (String.length(str) < sz) do \n    \t\"\"\n   \telse\n    \twith <<num_str::binary-size(sz), rest::binary>> = str, \n      \t\t sum = String.to_integer(num_str)\n                  |> Integer.digits\n                  |> Stream.map(&(:math.pow(&1,3) |> round))\n                  |> Enum.to_list\n                  |> List.foldr(0, &(&1 + &2))\n      do\n      \tresult = case rem(sum, 2) do\n          0 -> String.reverse(num_str)\n          1 -> rotate_str(num_str)\n        end \n        Enum.join([result, revrot(rest, sz)])\n      end\n    end\n  end\n  \n  def rotate_str(<<h::binary-size(1), str::binary>>), do: Enum.join([str, h])\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":77999,"user_id":null,"body":"defmodule Revrot do\n  def revrot(str, sz) do\n    case (str |> String.split_at(sz) |> (fn({s1, s2}) -> {Enum.map(String.codepoints(s1), &(String.to_integer(&1))), s2} end).()) do\n      {[], _} -> \"\"\n      {strlst, _strrem} when length(strlst) < sz -> \"\"\n      {strlst, strrem} -> Enum.join(revrot_int(strlst) ++ [revrot(strrem, sz)])\n    end\n  end\n  \n  defp discr(strlst), do: (rem(Enum.reduce(strlst, 0, &(&2 + &1*&1*&1)), 2) == 0)\n  defp revrot_int([h|t]), do: (if discr([h|t]) do Enum.reverse([h|t]) else t ++ [h] end)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56b861671d36bb0aa8000819":[{"id":78000,"user_id":null,"body":"defmodule Kata do\n    def reverse_and_combine_text(text) do\n        text\n        |> String.split(\" \")\n        |> rev_combine\n    end\n    \n  def rev_combine([head | []]), do: head\n  def rev_combine(array) do\n      array\n      |> Enum.map(&String.reverse\/1)\n      |> Enum.chunk_every(2)\n      |> Enum.map(&Enum.join\/1)\n      |> rev_combine\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78001,"user_id":null,"body":"defmodule Kata do\n  def reverse_and_combine_text(text) do\n    foo(String.split(text))\n  end\n  \n  defp foo(words) do\n    case words do\n      []  -> \"\"\n      [h] -> h\n      _   -> \n        words\n        |> Stream.chunk_every(2)\n        |> Enum.map(fn \n          [a, b] -> String.reverse(a) <> String.reverse(b)\n          [a] -> String.reverse(a)\n        end)\n        |> foo()\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78002,"user_id":null,"body":"defmodule Kata do\n    def reverse_and_combine_text(text) do\n      rev_comb(String.split(text))\n    end\n    \n    def rev_comb(list) when length(list) == 1 do\n      List.first(list)\n    end\n    \n    def rev_comb(list) do\n      list\n      |> Enum.map(fn word -> String.reverse(word) end)\n      |> Enum.chunk_every(2, 2)\n      |> Enum.map( fn l -> Enum.join(l) end)\n      |> rev_comb()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78003,"user_id":null,"body":"defmodule Kata do\n    def reverse_and_combine_text(text) when is_binary(text) do\n        text\n        |> String.split(\" \")\n        |> stuff\n    end\n    \n    defp stuff([one]), do: one\n    defp stuff(list) do\n      list\n      |> Enum.map(&String.reverse\/1)\n      |> Enum.chunk_every(2)\n      |> Enum.map(&Enum.join(&1, \"\"))\n      |> stuff\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78004,"user_id":470,"body":"defmodule Kata do\n\tdef reverse_and_combine_text(s),do: ix(String.split(s))\n\t\n\tdefp ix([]),do: \"\"\n\tdefp ix([s|[]]),do: s\n\tdefp ix(r),do: ix(ecaz(r))\n\t\n\tdefp ecaz([s1,s2|r]),do: [String.reverse(s1) <> String.reverse(s2) | ecaz(r)]\n\tdefp ecaz([s|[]]),do: [String.reverse(s)]\n\tdefp ecaz([]),do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78005,"user_id":null,"body":"defmodule Kata do\n  def reverse_and_combine_text(text) do\n    text\n    |> String.split()\n    |> stir()\n  end\n  \n  defp stir([string]), do: string\n  defp stir(strings) do\n    strings\n    |> Enum.map(&String.reverse\/1)\n    |> Enum.chunk_every(2)\n    |> Enum.map(&Enum.join\/1)\n    |> stir()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78006,"user_id":null,"body":"defmodule Kata do\n    def reverse_and_combine_text(text) do\n      if length(String.split(text)) == 1 do\n        text\n      else\n        text\n        |> String.split()\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn a -> Enum.map(a, &String.reverse(&1)) end)\n        |> Enum.map(&Enum.join(&1,\"\"))\n        |> Enum.join(\" \")\n        |> reverse_and_combine_text()\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78007,"user_id":null,"body":"defmodule Kata do\n\n  def reverse_and_combine_text(text) do\n    if String.contains?(text, \" \") do\n      text \n      |> String.split(\" \", trim: true)\n      |> Enum.chunk_every(2)\n      |> Enum.map_join(\" \", &do_work\/1)\n      |> reverse_and_combine_text\n    else \n      text\n    end\n  end\n\n  \n  def do_work([last]), do: String.reverse(last)\n  def do_work([first | [second]]), do: String.reverse(first) <> String.reverse(second)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78008,"user_id":null,"body":"defmodule Kata do\n  defp combine(words) do\n    if length(words) == 1 do\n      hd(words)\n    else\n      Enum.map(words, &String.reverse\/1)\n      |> Enum.chunk_every(2)\n      |> Enum.map(&Enum.join\/1)\n      |> combine\n    end\n  end\n\n  def reverse_and_combine_text(text), do: combine(String.split(text))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78009,"user_id":null,"body":"defmodule Kata do\n    def reverse_and_combine_text(text) do\n      text\n      |> String.split\n      |> case do\n        [text] ->\n          text\n        x ->\n          x\n          |> Enum.chunk_every(2)\n          |> Enum.map(fn \n            [a, b] -> String.reverse(a) <> String.reverse(b) \n            [a] -> String.reverse(a)\n          end)\n          |> Enum.join(\" \")\n          |> reverse_and_combine_text\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56bc28ad5bdaeb48760009b0":[{"id":78010,"user_id":1640,"body":"defmodule Solution do\n  def remove_char(s) do\n    String.slice(s, 1..-2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78011,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s), do: String.slice(s, 1..-2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78012,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s), do: String.slice(s, 1, String.length(s) -2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78013,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s) do\n    String.replace(s, ~r\/^.\/, \"\")\n    |> String.replace(~r\/.$\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78014,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s), do: binary_part(s, 1, byte_size(s) - 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78015,"user_id":250,"body":"defmodule Solution do\n  def remove_char(s), do: Regex.replace(~r\/(^.|.$)\/, s, \"\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78016,"user_id":null,"body":"defmodule Solution do\n  # Practice: remove entire first and last grapheme in constant time complexity O(1)\n\n  def remove_char(string) do\n    string\n    |> remove_first_grapheme_in_constant_time()\n    |> remove_last_grapheme_in_constant_time()\n  end\n\n  def remove_first_grapheme_in_constant_time(string) do\n    {_, rest} = String.next_grapheme_size(string)\n    rest\n  end\n\n  def remove_last_grapheme_in_constant_time(s) do\n    binary_part(s, 0, byte_size(s) - last_grapheme_size_in_constant_time(s))\n  end\n\n  def last_grapheme_size_in_constant_time(string) do\n    string\n    |> last_n_bytes(min(4, byte_size(string)))\n    |> String.last()\n    |> byte_size()\n  end\n\n  def last_n_bytes(string, n), do: binary_part(string, byte_size(string) - n, n)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78017,"user_id":null,"body":"defmodule Solution, do: def remove_char(s), do: String.slice(s, 1, String.length(s)-2)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78018,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s) do\n    String.slice(s,1..(String.length(s)-2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78019,"user_id":null,"body":"defmodule Solution do\n  def remove_char(s) do\n    [_ | x] = String.graphemes(s)\n    [_ | y] = Enum.reverse(x)\n    \n    y\n    |> Enum.reverse\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56bdd0aec5dc03d7780010a5":[{"id":78020,"user_id":53,"body":"defmodule Kata do\n  use Bitwise\n  def next_higher(0), do: 0 \n  def next_higher(n) do\n    r = band(n, -n)\n    p = n + r\n    q = div(bxor(n, p), 4 * r)\n    bor(p, q)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78021,"user_id":645,"body":"defmodule Kata do\n  use Bitwise\n  def next_higher(n) do\n    o = n &&& -n\n    v = n + o\n    p = div(n ^^^ v, o) >>> 2\n    if n == 0, do: 0, else: v ||| p\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78022,"user_id":null,"body":"defmodule Kata do\n  use Bitwise\n\n  def next_higher(n) do\n    [_, ones, zeros] =\n      Regex.run(~r\/(1+)(0*)$\/, Integer.to_string(n, 2)) |> Enum.map(&String.length\/1)\n\n    (n &&& ~~~((1 <<< (zeros + ones + 1)) - 1)) ||| 1 <<< (zeros + ones) |||\n      (1 <<< (ones - 1)) - 1\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78023,"user_id":null,"body":"defmodule Kata do\n  def next_higher(n) do\n    cnt = count_one_bits(n)\n    \n    Stream.iterate(n+1, &(&1 + 1))\n    |> Stream.filter(fn x -> count_one_bits(x) == cnt end)\n    |> Enum.take(1)\n    |> hd()\n  end\n  \n  defp count_one_bits(num), do: num |> Integer.digits(2) |> Enum.count(&(&1==1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78024,"user_id":null,"body":"defmodule Kata do\n\n  def next_higher(n), do:\n    n\n    |> Integer.digits(2)\n    |> Enum.reverse\n    |> get_next([])\n    |> Enum.reverse\n    |> Integer.undigits(2)\n\n  defp get_next([], acc), do: tl(acc) ++ [0, 1]\n  defp get_next([h1, h2 | tail], acc) when h1 == 1 and h2 == 0, do: Enum.reverse(Enum.sort(acc)) ++ [h2, h1] ++ tail\n  defp get_next([head | tail], acc), do: get_next(tail, [head | acc])\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78025,"user_id":null,"body":"defmodule Kata do\n  defp hamming_weight(n) do\n    for(<<bit::1 <- :binary.encode_unsigned(n)>>, do: bit) |> Enum.sum()\n  end\n\n  defp find_next_higher(n, target_weight) do\n    cond do\n      hamming_weight(n) == target_weight -> n\n      true -> find_next_higher(n + 1, target_weight)\n    end\n  end\n\n  def next_higher(n) do\n    weight = hamming_weight(n)\n\n    find_next_higher(n+1, weight)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78026,"user_id":null,"body":"defmodule Kata do\n    defp cb(n), do: n |> Integer.digits(2) |> Enum.sum\n    \n    defp brute(n,k), do: if cb(n) == k, do: n, else: brute(n+1,k)\n    \n    def next_higher(n), do: brute(n+1,cb(n))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78027,"user_id":null,"body":"defmodule Kata do\n  def next_higher(n) do\n    n\n    |> count_one_bits()\n    |> rec(n+1)\n  end\n  \n  defp rec(ones, m) do\n    case count_one_bits(m) do\n      ^ones -> m\n      _ -> rec(ones, m+1)\n    end\n  end\n  \n  defp count_one_bits(n),\n    do: n |> Integer.digits(2) |> Enum.count(& &1 == 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78028,"user_id":null,"body":"defmodule Kata do\n  def next_higher(n) do\n    n\n    |> Integer.digits(2)\n    |> Enum.reverse()\n    |> shift()\n    |> Enum.reverse()\n    |> Integer.undigits(2)\n  end\n  \n  defp shift(digits, prev \\\\ [])\n  # If only the high bit is set, extend it up one place\n  defp shift([1], prev), do: prev ++ [0, 1]\n  # The first 01 pair in the original (unreversed) number; swap them\n  # and we're done\n  defp shift([1, 0 | rest], prev), do: prev ++ [0, 1 | rest]\n  defp shift([first | rest], prev), do: shift(rest, [first | prev])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78029,"user_id":null,"body":"defmodule Kata do  \n  defp num_ones(n), do: \n    n |> Integer.digits(2) |> Enum.filter(&(&1 == 1)) |> length()\n  \n  def next_higher(n) do\n    ones = num_ones(n)\n  \n    n + 1\n    |> Stream.iterate(&(&1 + 1))\n    |> Enum.find(&(num_ones(&1) == ones))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56c04261c3fcf33f2d000534":[{"id":78030,"user_id":2098,"body":"defmodule Magnet do\n  def doubles(maxk, maxn) do\n    Enum.sum(for k <- 1..maxk, n <- 1..maxn do\n      1 \/ (k * :math.pow(n + 1, 2 * k))\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:01:35"},{"id":78031,"user_id":53,"body":"defmodule Magnet do\n    def doubles(maxk, maxn), do: s(maxk, maxn)\n    def v(k, n), do: 1.0 \/ (k * :math.pow(n + 1, 2 * k))\n    def u(k, maxn), do: Enum.reduce(1..maxn, 0, fn n, acc -> v(k, n) + acc end)\n    def s(maxk, maxn), do: Enum.reduce(1..maxk, 0, fn k, acc -> u(k, maxn) + acc end)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:01:37"},{"id":78032,"user_id":492,"body":"defmodule Magnet do\n\n    def doubles(maxk, maxn) do\n        Enum.reduce(1..maxk, 0, fn(k, t) -> \n            t + Enum.reduce(1..maxn, 0, fn(n, tt) ->\n                tt + 1 \/ (k * :math.pow(n + 1, 2.0 * k))\n            end)\n        end)\n    end\n    \nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:01:43"},{"id":78033,"user_id":492,"body":"defmodule Magnet do\n\n    def doubles(maxk, maxn) do\n        Enum.reduce(1..maxk, 0, fn(k, t) -> \n            t + Enum.reduce(1..maxn, 0, fn(n, tt) ->\n                tt + 1 \/ (k * :math.pow(n + 1, 2.0 * k))\n            end)\n        end)\n    end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78034,"user_id":null,"body":"defmodule Magnet do\n\n    def doubles(maxk, maxn) do\n      1..maxk\n      |> Enum.reduce(0, fn\n        k, acc -> 1..maxn |> Enum.reduce(0, &(v(k, &1) + &2)) |> Kernel.+(acc)\n      end)\n    end\n    \n    defp v(k,n), do: 1\/(k*:math.pow(n+1,2*k))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78035,"user_id":null,"body":"defmodule Magnet do\n\n  def doubles(maxk, maxn) do\n    s(maxk, maxn)\n  end\n\n  def v(k, n) do\n    1\/(k * pow(n+1, 2 * k))\n  end\n\n  def u(k, n) do\n    Enum.sum(for i <- 1..n, do: v(k, i))\n  end\n\n  def s(k, n) do\n    Enum.sum(for i <- 1..k, do: u(i, n))\n  end\n\n  defp pow(a, 1), do: a\n  defp pow(a, 2), do: a * a\n\n  defp pow(a, x) when rem(x, 2) == 2 do\n    a = pow(a, div(x, 2))\n    a * a\n  end\n\n  defp pow(a, x) do\n    a * pow(a, x - 1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78036,"user_id":null,"body":"defmodule Magnet do\n  def pow(base, exponent), do: Enum.reduce(1..exponent,1, fn _, acc -> base * acc end)\n  def doubles(maxk, maxn) do\n      values = for k <- 1..maxk, n <- 1..maxn, do: 1 \/ (k * pow(n + 1,2 * k))\n      Enum.sum(values)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78037,"user_id":168,"body":"defmodule Magnet do\n\n    def doubles(maxk, maxn) do\n      (for k <- 1..maxk, n <- 2..maxn + 1, do: 1.0 \/ (k * :math.pow(n, 2 * k)))\n      |> Enum.sum\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78038,"user_id":null,"body":"defmodule Magnet do\n  def doubles(maxk, maxn) do\n    for(k <- 1..maxk, n <- 1..maxn, do: 1.0 \/ k \/ :math.pow(n + 1, 2 * k))\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78039,"user_id":null,"body":"defmodule Magnet do\n    defp v(k, n), do: 1 \/ (k * :math.pow((n + 1), 2 * k))\n    defp u(k, n), do: 1..n |> Enum.reduce(0, fn i, acc -> acc + v(k, i) end)\n\n    def doubles(k, n), do: 1..k |> Enum.reduce(0, fn i, acc -> acc + u(i, n) end)\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56c5847f27be2c3db20009c3":[{"id":78040,"user_id":759,"body":"defmodule Kata do\n  def subtract_sum(n), do: \"apple\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78041,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(n) do\n    # fruit name like \"apple\"\n    \"apple\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78042,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(n) when is_integer(n) do\n   new_num = n\n    |> Integer.digits()\n    |> Enum.sum()\n    |> (fn x -> n - x end).()\n    \n    case Map.fetch(fruit_list(), Integer.to_string(new_num)) do\n      {:ok, fruit} -> fruit\n      :error -> subtract_sum(new_num)\n    end\n  end\n  \n  defp fruit_list do \n  %{\n    \"1\" => \"kiwi\",\n    \"2\" => \"pear\",\n    \"3\" => \"kiwi\",\n    \"4\" => \"banana\",\n    \"5\" => \"melon\",\n    \"6\" => \"banana\",\n    \"7\" => \"melon\",\n    \"8\" => \"pineapple\",\n    \"9\" => \"apple\",\n    \"10\" => \"pineapple\",\n    \"11\" => \"cucumber\",\n    \"12\" => \"pineapple\",\n    \"13\" => \"cucumber\",\n    \"14\" => \"orange\",\n    \"15\" => \"grape\",\n    \"16\" => \"orange\",\n    \"17\" => \"grape\",\n    \"18\" => \"apple\",\n    \"19\" => \"grape\",\n    \"20\" => \"cherry\",\n    \"21\" => \"pear\",\n    \"22\" => \"cherry\",\n    \"23\" => \"pear\",\n    \"24\" => \"kiwi\",\n    \"25\" => \"banana\",\n    \"26\" => \"kiwi\",\n    \"27\" => \"apple\",\n    \"28\" => \"melon\",\n    \"29\" => \"banana\",\n    \"30\" => \"melon\",\n    \"31\" => \"pineapple\",\n    \"32\" => \"melon\",\n    \"33\" => \"pineapple\",\n    \"34\" => \"cucumber\",\n    \"35\" => \"orange\",\n    \"36\" => \"apple\",\n    \"37\" => \"orange\",\n    \"38\" => \"grape\",\n    \"39\" => \"orange\",\n    \"40\" => \"grape\",\n    \"41\" => \"cherry\",\n    \"42\" => \"pear\",\n    \"43\" => \"cherry\",\n    \"44\" => \"pear\",\n    \"45\" => \"apple\",\n    \"46\" => \"pear\",\n    \"47\" => \"kiwi\",\n    \"48\" => \"banana\",\n    \"49\" => \"kiwi\",\n    \"50\" => \"banana\",\n    \"51\" => \"melon\",\n    \"52\" => \"pineapple\",\n    \"53\" => \"melon\",\n    \"54\" => \"apple\",\n    \"55\" => \"cucumber\",\n    \"56\" => \"pineapple\",\n    \"57\" => \"cucumber\",\n    \"58\" => \"orange\",\n    \"59\" => \"cucumber\",\n    \"60\" => \"orange\",\n    \"61\" => \"grape\",\n    \"62\" => \"cherry\",\n    \"63\" => \"apple\",\n    \"64\" => \"cherry\",\n    \"65\" => \"pear\",\n    \"66\" => \"cherry\",\n    \"67\" => \"pear\",\n    \"68\" => \"kiwi\",\n    \"69\" => \"pear\",\n    \"70\" => \"kiwi\",\n    \"71\" => \"banana\",\n    \"72\" => \"apple\",\n    \"73\" => \"banana\",\n    \"74\" => \"melon\",\n    \"75\" => \"pineapple\",\n    \"76\" => \"melon\",\n    \"77\" => \"pineapple\",\n    \"78\" => \"cucumber\",\n    \"79\" => \"pineapple\",\n    \"80\" => \"cucumber\",\n    \"81\" => \"apple\",\n    \"82\" => \"grape\",\n    \"83\" => \"orange\",\n    \"84\" => \"grape\",\n    \"85\" => \"cherry\",\n    \"86\" => \"grape\",\n    \"87\" => \"cherry\",\n    \"88\" => \"pear\",\n    \"89\" => \"cherry\",\n    \"90\" => \"apple\",\n    \"91\" => \"kiwi\",\n    \"92\" => \"banana\",\n    \"93\" => \"kiwi\",\n    \"94\" => \"banana\",\n    \"95\" => \"melon\",\n    \"96\" => \"banana\",\n    \"97\" => \"melon\",\n    \"98\" => \"pineapple\",\n    \"99\" => \"apple\",\n    \"100\" => \"pineapple\"\n  }\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78043,"user_id":null,"body":"defmodule Kata do\n  \n  def subtract_sum(n) do\n   Enum.sum(Integer.digits(n)) - n |> abs() |> rem(9) == 0 && \"apple\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78044,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(n) do\n    n = n - (Integer.digits(n) |> Enum.sum())\n    case n do\n      1->\"kiwi\"\n      2->\"pear\"\n      3->\"kiwi\"\n      4->\"banana\"\n      5->\"melon\"\n      6->\"banana\"\n      7->\"melon\"\n      8->\"pineapple\"\n      9->\"apple\"\n      10->\"pineapple\"\n      11->\"cucumber\"\n      12->\"pineapple\"\n      13->\"cucumber\"\n      14->\"orange\"\n      15->\"grape\"\n      16->\"orange\"\n      17->\"grape\"\n      18->\"apple\"\n      19->\"grape\"\n      20->\"cherry\"\n      21->\"pear\"\n      22->\"cherry\"\n      23->\"pear\"\n      24->\"kiwi\"\n      25->\"banana\"\n      26->\"kiwi\"\n      27->\"apple\"\n      28->\"melon\"\n      29->\"banana\"\n      30->\"melon\"\n      31->\"pineapple\"\n      32->\"melon\"\n      33->\"pineapple\"\n      34->\"cucumber\"\n      35->\"orange\"\n      36->\"apple\"\n      37->\"orange\"\n      38->\"grape\"\n      39->\"orange\"\n      40->\"grape\"\n      41->\"cherry\"\n      42->\"pear\"\n      43->\"cherry\"\n      44->\"pear\"\n      45->\"apple\"\n      46->\"pear\"\n      47->\"kiwi\"\n      48->\"banana\"\n      49->\"kiwi\"\n      50->\"banana\"\n      51->\"melon\"\n      52->\"pineapple\"\n      53->\"melon\"\n      54->\"apple\"\n      55->\"cucumber\"\n      56->\"pineapple\"\n      57->\"cucumber\"\n      58->\"orange\"\n      59->\"cucumber\"\n      60->\"orange\"\n      61->\"grape\"\n      62->\"cherry\"\n      63->\"apple\"\n      64->\"cherry\"\n      65->\"pear\"\n      66->\"cherry\"\n      67->\"pear\"\n      68->\"kiwi\"\n      69->\"pear\"\n      70->\"kiwi\"\n      71->\"banana\"\n      72->\"apple\"\n      73->\"banana\"\n      74->\"melon\"\n      75->\"pineapple\"\n      76->\"melon\"\n      77->\"pineapple\"\n      78->\"cucumber\"\n      79->\"pineapple\"\n      80->\"cucumber\"\n      81->\"apple\"\n      82->\"grape\"\n      83->\"orange\"\n      84->\"grape\"\n      85->\"cherry\"\n      86->\"grape\"\n      87->\"cherry\"\n      88->\"pear\"\n      89->\"cherry\"\n      90->\"apple\"\n      91->\"kiwi\"\n      92->\"banana\"\n      93->\"kiwi\"\n      94->\"banana\"\n      95->\"melon\"\n      96->\"banana\"\n      97->\"melon\"\n      98->\"pineapple\"\n      99->\"apple\"\n      100->\"pineapple\"\n      a->subtract_sum(a)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78045,"user_id":null,"body":"defmodule Kata do\n  @fruits ~w[\n    kiwi pear kiwi banana melon banana melon pineapple apple pineapple\n    cucumber pineapple cucumber orange grape orange grape apple grape cherry\n    pear cherry pear kiwi banana kiwi apple melon banana melon\n    pineapple melon pineapple cucumber orange apple orange grape orange grape\n    cherry pear cherry pear apple pear kiwi banana kiwi banana\n    melon pineapple melon apple cucumber pineapple cucumber orange cucumber orange\n    grape cherry apple cherry pear cherry pear kiwi pear kiwi\n    banana apple banana melon pineapple melon pineapple cucumber pineapple cucumber\n    apple grape orange grape cherry grape cherry pear cherry apple\n    kiwi banana kiwi banana melon banana melon pineapple apple pineapple\n  ]\n  def subtract_sum(n) do\n    ssum(n - Enum.sum(Integer.digits(n)))\n  end\n  def ssum(n) do\n    if n <= 100 do\n      Enum.at(@fruits, n-1)\n    else\n      ssum(n - Enum.sum(Integer.digits(n)))\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78046,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(_n), do: \"apple\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78047,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(n) when n >= 10 and n < 10000 do\n    \"apple\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78048,"user_id":null,"body":"defmodule Kata do\n  def subtract_sum(n) do\n    \"apple\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78049,"user_id":null,"body":"defmodule Kata do\n\n  def subtract_sum(n) do\n    map = %{1 =>\"kiwi\",\n    2 => \"pear\",\n    3 =>\"kiwi\",\n    4 => \"banana\",\n    5 => \"melon\",\n    6 => \"banana\",\n    7 => \"melon\",\n    8 => \"pineapple\",\n    9 => \"apple\",\n    10 => \"pineapple\",\n    11 => \"cucumber\",\n    12 => \"pineapple\",\n    13 => \"cucumber\",\n    14 => \"orange\",\n    15 => \"grape\",\n    16 => \"orange\",\n    17 => \"grape\",\n    18 => \"apple\",\n    19 => \"grape\",\n    20 => \"cherry\",\n    21 => \"pear\",\n    22 => \"cherry\",\n    23 => \"pear\",\n    24 => \"kiwi\",\n    25 => \"banana\",\n    26 => \"kiwi\",\n    27 => \"apple\",\n    28 => \"melon\",\n    29 => \"banana\",\n    30 => \"melon\",\n    31 => \"pineapple\",\n    32 => \"melon\",\n    33 => \"pineapple\",\n    34 => \"cucumber\",\n    35 => \"orange\",\n    36 => \"apple\",\n    37 => \"orange\",\n    38 => \"grape\",\n    39 => \"orange\",\n    40 => \"grape\",\n    41 => \"cherry\",\n    42 => \"pear\",\n    43 => \"cherry\",\n    44 => \"pear\",\n    45 => \"apple\",\n    46 => \"pear\",\n    47 => \"kiwi\",\n    48 => \"banana\",\n    49 => \"kiwi\",\n    50 => \"banana\",\n    51 => \"melon\",\n    52 => \"pineapple\",\n    53 => \"melon\",\n    54 => \"apple\",\n    55 => \"cucumber\",\n    56 => \"pineapple\",\n    57 => \"cucumber\",\n    58 => \"orange\",\n    59 => \"cucumber\",\n    60 => \"orange\",\n    61 => \"grape\",\n    62 => \"cherry\",\n    63 => \"apple\",\n    64 => \"cherry\",\n    65 => \"pear\",\n    66 => \"cherry\",\n    67 => \"pear\",\n    68 =>\"kiwi\",\n    69 => \"pear\",\n    70 =>\"kiwi\",\n    71 => \"banana\",\n    72 => \"apple\",\n    73 => \"banana\",\n    74 => \"melon\",\n    75 => \"pineapple\",\n    76 => \"melon\",\n    77 => \"pineapple\",\n    78 => \"cucumber\",\n    79 => \"pineapple\",\n    80 => \"cucumber\",\n    81 => \"apple\",\n    82 => \"grape\",\n    83 => \"orange\",\n    84 => \"grape\",\n    85 => \"cherry\",\n    86 => \"grape\",\n    87 => \"cherry\",\n    88 => \"pear\",\n    89 => \"cherry\",\n    90 => \"apple\",\n    91 =>\"kiwi\",\n    92 => \"banana\",\n    93 =>\"kiwi\",\n    94 => \"banana\",\n    95 => \"melon\",\n    96 => \"banana\",\n    97 => \"melon\",\n    98 => \"pineapple\",\n    99 => \"apple\",\n    100 => \"pineapple\"}\n\n    num = Map.keys(map)\n    case sum(n) in num do\n      true -> map[sum(n)]\n      _ -> subtract_sum(sum(n))\n    end\n  end\n\n  defp sum(n) do\n    sum = n |> Integer.digits() |> Enum.sum()\n    result = n - sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56cac350145912e68b0006f0":[{"id":78050,"user_id":2098,"body":"defmodule Updown do\n  require Integer\n\n  def arrange(strng) do\n    strng\n    |> String.split(\" \", trim: true)\n    |> Enum.reduce({0, []}, &rearrangify(&1, &2))\n    |> Kernel.elem(1)\n    |> Enum.reduce({0, []}, &caseify(&1, &2))\n    |> Kernel.elem(1)\n    |> Enum.join(\" \")\n  end\n\n  defp rearrangify(current_substring, {index, substring_list}) do\n    substring_list = substring_list ++ [current_substring]\n    previous_substring = Enum.at(substring_list, index - 1)\n\n    substring_list = cond do\n      index != 0 && Integer.is_even(index) && (String.length(previous_substring) < String.length(current_substring)) ->\n        Enum.reverse_slice(substring_list, index - 1, 2)\n      index != 0 && Integer.is_odd(index) && (String.length(previous_substring) > String.length(current_substring)) ->\n        Enum.reverse_slice(substring_list, index - 1, 2)\n      true ->\n        substring_list\n    end\n\n    {index + 1, substring_list}\n  end\n\n  defp caseify(x, {index, list}), do: {index + 1, list ++ [(if Integer.is_even(index), do: String.downcase(x), else: String.upcase(x))]}\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78051,"user_id":null,"body":"defmodule Updown do\n  import String\n  \n  def arrange(str) do\n    str\n    |> String.split\n    |> arrange_up\n    |> Enum.join(\" \")\n  end\n  \n  def arrange_up([]), do: []\n  def arrange_up([a]), do: [downcase(a)]\n  def arrange_up([a, b | tail]) do\n    if up?(a, b) do\n      [downcase(a) | arrange_down([b | tail])]\n    else\n      [downcase(b) | arrange_down([a | tail])]\n    end\n  end\n  \n  def arrange_down([a]), do: [upcase(a)]\n  def arrange_down([a, b | tail]) do\n    if down?(a, b) do\n      [upcase(a) | arrange_up([b | tail])]\n    else\n      [upcase(b) | arrange_up([a | tail])]\n    end\n  end\n  \n  def up?(s1, s2), do: String.length(s1) <= String.length(s2)\n  def down?(s1, s2), do: String.length(s1) >= String.length(s2)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78052,"user_id":492,"body":"defmodule Updown do\n  \n  defp up([]) do [] end  \n  defp up([x]) do [String.downcase(x)] end  \n  defp up([x, y | xs]) do \n    if String.length(x) <= String.length(y) do\n      [String.downcase(x) | down([y | xs])]\n    else\n      [String.downcase(y) | down([x | xs])]\n    end\n  end\n  defp down([]) do [] end\n  defp down([x]) do [String.upcase(x)] end\n  defp down([x, y | xs]) do \n    if String.length(x) >= String.length(y) do\n      [String.upcase(x) | up([y | xs])]\n    else\n      [String.upcase(y) | up([x | xs])]\n    end\n  end  \n    \n  def arrange(strng) do\n    s = String.split(strng, \" \")\n    Enum.join(up(s), \" \")\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78053,"user_id":null,"body":"defmodule Updown do\n  import String\n  \n  def arrange(str) do\n    str\n    |> split\n    |> arrange_up\n    |> Enum.join(\" \")\n  end\n  \n  @docp \"\"\"\n  It's possible to use byte_size, then you can use test function in guard \n  clauses, but I feel saving some lines of code is not worth loosing correctness\n  in unicode case\n  \"\"\"\n  defp up?(s1, s2), do: String.length(s1) <= String.length(s2)\n  defp down?(s1, s2), do: String.length(s1) >= String.length(s2)\n  \n  defp arrange_up([]), do: []\n  defp arrange_up([a]), do: [downcase(a)]\n  defp arrange_up([a, b | tail]) do\n    unless up?(a, b), do: {a, b} = {b, a}\n    [downcase(a) | arrange_down([b | tail])]\n  end\n  \n  defp arrange_down([a]), do: [upcase(a)]\n  defp arrange_down([a, b | tail]) do\n    unless down?(a, b), do: {a, b} = {b, a} \n    [upcase(a) | arrange_up([b | tail])]\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78054,"user_id":null,"body":"defmodule Updown do\n  \n  def arrange(\"\") do\n    \"\"\n  end\n  \n  def arrange(strng) do\n    # your code\n    parts = String.split(strng, \" \") |> Enum.filter(fn x -> x != \"\" end)\n    parts_length = Enum.map(parts, fn x -> {String.length(x), x} end)\n    switch(parts_length, 0, length(parts_length))\n  end\n  \n  def switch(list, index, list_length) when index < (list_length-1) do\n      #IO.puts(\"current index is #{index}\")\n      #IO.inspect(list)\n      current = Enum.fetch!(list, index) |> elem(0)\n      next = Enum.fetch!(list, index + 1) |> elem(0)\n      cond do\n        current > next and index == 0 -> \n                    new_list = [Enum.fetch!(list, index + 1)] ++ [Enum.fetch!(list, index)] ++ Enum.slice(list, min(list_length-1, (index + 2))..-1)\n                    switch(new_list, index + 1, list_length)\n        (rem(index, 2) == 0 and current <= next) or (rem(index, 2) != 0 and current >= next) -> switch(list, index + 1, list_length)\n        (rem(index, 2) == 0 and current > next) or (rem(index, 2) != 0 and current < next) -> \n                    new_list = Enum.slice(list, 0..max(0,index-1)) ++ [Enum.fetch!(list, index + 1)] ++ [Enum.fetch!(list, index)] ++ Enum.slice(list, min(list_length-1, (index + 2))..-1)\n                    switch(new_list, index + 1, list_length)\n      end\n      \n  end\n\n  def switch(list, _index, list_length) do  \n    result = for {_x, y} <- list, do: y\n    ([Enum.fetch!(list, 0) |> elem(1) |> String.downcase()] ++ Enum.map_every(Enum.slice(result, 1..(list_length-1)), 2, &(String.upcase(&1)))) \n    |> Enum.map_every(2, &(String.downcase(&1))) \n    |> Enum.join(\" \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78055,"user_id":null,"body":"defmodule Updown do\n  require Integer\n\n  def arrange(\"\"), do: \"\"\n\n  def arrange(strng) do\n    String.split(strng)\n    |> word_swap(0)\n    |> Enum.with_index()\n    |> Enum.map(fn {w, i} ->\n      if Integer.is_even(i), do: String.downcase(w), else: String.upcase(w)\n    end)\n    |> Enum.join(\" \")\n  end\n\n  def word_swap([w0 | []] = words, _), do: words\n\n  def word_swap([w0, w1 | words], i) do\n    [l0, l1] = Enum.map([w0, w1], &String.length\/1)\n\n    if (Integer.is_even(i) && l0 > l1) || (Integer.is_odd(i) && l0 < l1),\n      do: [w1 | word_swap([w0 | words], i + 1)],\n      else: [w0 | word_swap([w1 | words], i + 1)]\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78056,"user_id":null,"body":"defmodule Updown do\n\n  def arrange(\"\"), do: \"\"\n  def arrange(str), do: do_arrange(str)\n\n  defp do_arrange(str), do:\n    str\n    |> String.split\n    |> do_arrange(1, [])\n    |> make_wave\n    |> Enum.join(\" \")\n\n  defp do_arrange([head], _, acc), do: Enum.reverse([head | acc])\n\n  defp do_arrange([h1, h2 | tail], sign, acc) do\n    cond do\n      String.length(h1) > String.length(h2) and sign == 1 or String.length(h1) < String.length(h2) and sign == -1 ->\n        do_arrange([h1 | tail], -sign, [h2 | acc])\n      true ->\n        do_arrange([h2 | tail], -sign, [h1 | acc])\n    end\n  end\n\n  defp make_wave(seq), do:\n    seq\n    |> Enum.reduce(\n         {[], 1},\n         fn x, {acc, sign} -> {[(if sign == 1, do: String.downcase(x), else: String.upcase(x)) | acc], -sign} end\n       )\n    |> (fn {seq, _} -> seq end).()\n    |> Enum.reverse\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78057,"user_id":null,"body":"defmodule Updown do\n  def arrange(strng) do\n    String.split(strng, \" \")\n    getList([], 0, String.split(strng, \" \"))\n    |> Enum.reverse\n    |> Enum.with_index\n    |> Enum.map(fn {a,b} ->\n        if rem(b,2) == 0 do\n          String.downcase(a)\n        else\n          String.upcase(a)\n        end\n      end)\n    |> Enum.reverse\n    |> Enum.reduce(fn acc, i -> acc <> \" \" <> i  end)\n\n  end\n\n  def getList(acc, n, ls) do\n    isEnd = length(ls) == 1\n    if isEnd do\n      ls ++ acc\n    else\n      [x | [ s | li]] = ls\n      if (testCase(n, x, s)) do\n        getList([s | acc], (n+1), [x | li])\n      else\n        getList([x | acc], (n+1), [s | li])\n      end\n    end\n  end\n\n  def testCase(n, x, y) do\n    isUpper = (rem n,2) == 0\n    if isUpper do\n      String.length(y) < String.length(x)\n    else\n      String.length(y) > String.length(x)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78058,"user_id":null,"body":"defmodule Updown do\n    @hops [{&Kernel.<=\/2, &String.downcase\/1}, {&Kernel.>=\/2, &String.upcase\/1}]\n\n    defp combine([],_fs,r), do: r |> Enum.reverse |> Enum.join(\" \")\n    defp combine([a],[{_,fo} | fs],r), do: combine([],fs,[fo.(a) | r])\n    defp combine([a,b | ls],[{cmp,fo} | fs],r), do:\n        if cmp.(byte_size(a), byte_size(b)),\n        do: combine([b | ls],fs,[fo.(a) | r]),\n        else: combine([a | ls],fs,[fo.(b) | r])\n\n    def arrange(s) do\n        ls = String.split(s)\n        fs = @hops |> Stream.cycle |> Enum.take(length(ls))\n        combine(ls,fs,[])\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78059,"user_id":null,"body":"defmodule Updown do\n  def arrange(s), do: swip(~w[#{s}]) |> Enum.join(\" \")\n  \n  defp swip([]), do: []\n  defp swip([sole]), do: [String.downcase sole]\n  defp swip([a, b | t]) do\n    case String.length(a) <= String.length(b) do\n      true -> [String.downcase(a) | swap([b | t])]\n      ____ -> [String.downcase(b) | swap([a | t])]\n    end\n  end\n  \n  defp swap([]), do: []\n  defp swap([sole]), do: [String.upcase sole]\n  defp swap([a, b | t]) do\n    case String.length(a) >= String.length(b) do\n      true -> [String.upcase(a) | swip([b | t])]\n      ____ -> [String.upcase(b) | swip([a | t])]\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56cd44e1aa4ac7879200010b":[{"id":78060,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    String.upcase(str) == str\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78061,"user_id":1249,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    !Regex.match?(~r\/[a-z]\/, str)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78062,"user_id":1774,"body":"defmodule StringUtils do\n\n  def is_uppercase(str), do: String.match? str, ~r(^[^a-z]*$)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78063,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str), do: String.upcase(str) === str\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78064,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    str =~ ~r(^[^a-z]*$)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78065,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str), do: String.upcase(str) == str\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78066,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    for <<x <- str>>, x in ?a..?z do\n      x\n    end\n    |> length\n    |> Kernel.==(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78067,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    String.match?(str, ~r\/^[[:upper:][:space:][:punct:]]*$\/)\n  end\nend\n\n#timurbabs Timur Baburin","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78068,"user_id":null,"body":"defmodule StringUtils do\n  # A-Z: 65-90\n  # a-z: 97-122\n  # space: 32\n  def is_uppercase(<<>>), do: true\n  def is_uppercase(<< c::utf8, tail::binary >>) when c not in 97..122,\n  do: is_uppercase(tail)\n  def is_uppercase(_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78069,"user_id":null,"body":"defmodule StringUtils do\n  def is_uppercase(str) do\n    if String.match?(str, ~r\/a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z\/) do\n      false\n    else true\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56d49587df52101de70011e4":[{"id":78070,"user_id":null,"body":"defmodule Oscar do\n  def leo(88), do: \"Leo finally won the oscar! Leo is happy\"\n  def leo(86), do: \"Not even for Wolf of wallstreet?!\"\n  def leo(x) when x < 88, do: \"When will you give Leo an Oscar?\"\n  def leo(_), do: \"Leo got one already!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78071,"user_id":null,"body":"defmodule Oscar do\n  def leo(88), do: \"Leo finally won the oscar! Leo is happy\"\n  def leo(86), do: \"Not even for Wolf of wallstreet?!\"\n  def leo(oscar) when oscar < 88, do: \"When will you give Leo an Oscar?\"\n  def leo(oscar) when oscar > 88, do: \"Leo got one already!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78072,"user_id":null,"body":"defmodule Oscar do\n\n  @the_one 88\n  @the_expected_one 86\n\n  def leo(oscar) when oscar > @the_one, do: \"Leo got one already!\"\n  def leo(oscar) do\n    case oscar do\n      @the_one -> \"Leo finally won the oscar! Leo is happy\"\n      @the_expected_one -> \"Not even for Wolf of wallstreet?!\"\n      _ -> \"When will you give Leo an Oscar?\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78073,"user_id":1249,"body":"defmodule Oscar do\n  def leo(oscar) do\n    cond do\n      oscar == 88 ->\n        \"Leo finally won the oscar! Leo is happy\"\n      oscar == 86 ->\n        \"Not even for Wolf of wallstreet?!\"\n      oscar < 88 ->\n        \"When will you give Leo an Oscar?\"\n      oscar > 88 ->\n        \"Leo got one already!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78074,"user_id":null,"body":"defmodule Oscar do\n  def leo(oscar) do\n    case oscar do\n      d when d == 88 -> \"Leo finally won the oscar! Leo is happy\"\n      d when d == 86 -> \"Not even for Wolf of wallstreet?!\"\n      d when d != 88 and d != 86 and d < 88 -> \"When will you give Leo an Oscar?\"\n      _ -> \"Leo got one already!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78075,"user_id":null,"body":"defmodule Oscar do\n  def leo(oscar) do\n    cond do\n      oscar == 88 -> \n        \"Leo finally won the oscar! Leo is happy\"\n      oscar == 86 -> \n        \"Not even for Wolf of wallstreet?!\"\n      oscar == 87 || oscar < 86 -> \n        \"When will you give Leo an Oscar?\"\n      true ->\n        \"Leo got one already!\"            \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78076,"user_id":null,"body":"defmodule Oscar do\n  def leo(88),            do: \"Leo finally won the oscar! Leo is happy\"\n  def leo(86),            do: \"Not even for Wolf of wallstreet?!\"\n  def leo(n) when n < 88, do: \"When will you give Leo an Oscar?\"\n  def leo(_),             do: \"Leo got one already!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78077,"user_id":null,"body":"defmodule Oscar do\n  def leo(oscar) do\n    case oscar do\n      88 -> \"Leo finally won the oscar! Leo is happy\"\n      86 -> \"Not even for Wolf of wallstreet?!\"\n      _ when oscar < 88 -> \"When will you give Leo an Oscar?\"\n      _ -> \"Leo got one already!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78078,"user_id":null,"body":"defmodule Oscar do\n  def leo(oscar) do\n    case oscar do\n      88 -> \"Leo finally won the oscar! Leo is happy\"\n      86 -> \"Not even for Wolf of wallstreet?!\"\n      below when below < 88 -> \"When will you give Leo an Oscar?\"\n      above when above > 88 -> \"Leo got one already!\"\n      _ -> \"Teu cu\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78079,"user_id":null,"body":"defmodule Oscar do\n  def leo(oscar) when oscar === 88, do: \"Leo finally won the oscar! Leo is happy\"\n  def leo(oscar) when oscar === 86, do: \"Not even for Wolf of wallstreet?!\"\n  def leo(oscar) when oscar < 88, do: \"When will you give Leo an Oscar?\"\n  def leo(_) do\n    \"Leo got one already!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56d6c333c9ae3fc32800070f":[{"id":78080,"user_id":null,"body":"defmodule DateUtils do\n  def year_days(year) do\n    \"#{year} has #{days_in_year(year)} days\"\n  end\n  def days_in_year(year) when rem(year, 100) == 0 and rem(year, 400) != 0, do: 365\n  def days_in_year(year) when rem(year, 4) == 0, do: 366\n  def days_in_year(_), do: 365\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78081,"user_id":1774,"body":"defmodule DateUtils do\n  def year_days(year), do: \"#{year} has #{days(year)} days\"\n  \n  def days(year) when rem(year, 400) == 0, do: 366\n  def days(year) when rem(year, 100) != 0 and rem(year, 4) == 0, do: 366\n  def days(_year), do: 365\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78082,"user_id":null,"body":"defmodule DateUtils do\n  defguardp evenly(dividend, divisor) when rem(dividend, divisor) == 0\n  defguardp is_leap(year) when evenly(year, 400) or (evenly(year, 4) and not(evenly(year, 100)))\n  \n  def year_days(year) do\n    \"#{year} has #{days(year)} days\"\n  end\n  \n  def days(year) when is_leap(year), do: 366\n  def days(_year), do: 365\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78083,"user_id":null,"body":"defmodule DateUtils do\n  @moduledoc \"\"\"\n  Date utilities for leap year calculations.\n  \"\"\"\n  @leap_days 366\n  @non_leap_days 365\n  \n  @doc \"\"\"\n  Determines if the year is a leap year or not.\n  \"\"\"\n  \n  @spec days(integer) :: String.t\n  def year_days(year) do\n    \"#{year} has #{days(year)} days\"\n  end\n  \n  @spec days(integer) :: 365..366\n  def days(year) when rem(year, 100) == 0 and rem(year, 400) != 0 do\n    @non_leap_days\n  end  \n  def days(year) when rem(year, 4) == 0 do\n    @leap_days\n  end\n  def days(_) do\n    @non_leap_days\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78084,"user_id":null,"body":"defmodule DateUtils do\n  @moduledoc \"\"\"\n  Date utilities for leap year calculations.\n  \"\"\"\n\n  @leap_days 366\n  @non_leap_days 365\n\n  @doc \"\"\"\n  Describe the number of days that a year has.\n  \"\"\"\n  @spec year_days(integer) :: String.t\n  def year_days(year) do\n    \"#{year} has #{days(year)} days\"\n  end\n\n  # The number of days for a year\n  @spec days(integer) :: 365..366\n  defp days(year) when rem(year, 100) == 0 and rem(year, 400) != 0 do\n    @non_leap_days\n  end\n  defp days(year) when rem(year, 4) == 0 do\n    @leap_days\n  end\n  defp days(_) do\n    @non_leap_days\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78085,"user_id":null,"body":"defmodule DateUtils do\n  def year_days(year) do\n    \"#{year} has #{if Calendar.ISO.leap_year?(year), do: 366, else: 365} days\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78086,"user_id":null,"body":"defmodule DateUtils do\n\n  @leap_days [true: 366, false: 365]\n\n  @spec year_days(integer) :: String.t\n  def year_days(year), do: \"#{year} has #{days(year)} days\"\n\n  @spec days(integer) :: integer\n  defp days(year), do: @leap_days[leap?(year)]\n\n  @spec leap?(integer) :: boolean\n  defp leap?(year) do\n    year = abs(year)\n    meets_criteria?({rem(year, 4), rem(year, 100), rem(year, 400)})\n  end\n  \n  # Whether the given checks meet leap year rules\n  @spec meets_criteria?({integer, integer, integer}) :: boolean\n  defp meets_criteria?({by_4, _, _}) when by_4 != 0, do: false\n  defp meets_criteria?({0, by_100, _}) when by_100 != 0, do: true\n  defp meets_criteria?({_, 0, 0}), do: true\n  defp meets_criteria?(_), do: false\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78087,"user_id":null,"body":"defmodule DateUtils do\n  def year_days(year) do\n    days =\n      cond do\n        rem(year, 400) == 0 -> 366\n        rem(year, 100) == 0 -> 365\n        rem(year, 4) == 0 -> 366\n        true -> 365\n      end\n    \"#{year} has #{days} days\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78088,"user_id":null,"body":"defmodule DateUtils do\n  defguard is_century?(year) when rem(year, 100) == 0\n  defguard is_century_leap_year?(year) when rem(year, 400) == 0\n  defguard is_leap_year?(year) when rem(year, 4) == 0\n  \n  @leap_year \"has 366 days\"\n  @normal_year \"has 365 days\"\n  \n  @spec year_days(integer) :: String.t\n  def year_days(0), do: \"#{0} #{@leap_year}\"\n  def year_days(year) when is_century?(year) and is_century_leap_year?(year), do: \"#{year} #{@leap_year}\"\n  def year_days(year) when is_century?(year), do: \"#{year} #{@normal_year}\"\n  def year_days(year) when is_leap_year?(year), do: \"#{year} #{@leap_year}\"\n  def year_days(year), do: \"#{year} #{@normal_year}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78089,"user_id":null,"body":"defmodule DateUtils do\n  def year_days(year) when rem(year, 400) === 0, do: \"#{year} has 366 days\"\n  def year_days(year) when rem(year, 100) === 0, do: \"#{year} has 365 days\"\n  def year_days(year) when rem(year, 4) === 0, do: \"#{year} has 366 days\"\n\n  def year_days(year) do\n    \"#{year} has 365 days\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56dbe0e313c2f63be4000b25":[{"id":78090,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    String.split(str, \"\n\")\n    |> Enum.map(&(String.reverse(&1)))\n    |> Enum.join(\"\n\")\n  end\n  def hor_mirror(str) do\n    String.split(str, \"\n\")\n    |> Enum.reverse\n    |> Enum.join(\"\n\")\n  end\n  def oper(func, s), do: func.(s)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78091,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.map(fn x -> String.reverse(x) end)\n    |> Enum.join(\"\n\")\n  end\n  \n  def hor_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.reverse()\n    |> Enum.join(\"\n\")\n    \n  end\n  def oper(func, s) do\n    func.(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78092,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str |> String.split(\"\n\") |> Enum.map(&String.reverse\/1) |> Enum.join(\"\n\")\n  end\n  def hor_mirror(str) do\n    str |> String.split(\"\n\") |> Enum.reverse |> Enum.join(\"\n\")\n  end\n  def oper(func, s), do: func.(s)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78093,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    String.split(str, \"\n\")\n    |> Enum.map(&String.reverse\/1)\n  end\n  def hor_mirror(str) do\n    String.split(str, \"\n\")\n    |> Enum.reverse\n  end\n  def oper(func, s) do\n    func.(s)\n    |> Enum.reduce(fn acc, i -> i <> \"\n\" <> acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78094,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str\n      |> String.split(\"\n\")\n      |> Stream.map(&(String.reverse(&1)))\n      |> Enum.join(\"\n\")\n  end\n\n  def hor_mirror(str) do\n    str\n      |> String.split(\"\n\")\n      |> Enum.reverse\n      |> Enum.join(\"\n\")\n  end\n\n  def oper(func, s) do\n    func.(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78095,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.map_join(\"\n\", fn x -> String.reverse(x) end)\n  end\n  def hor_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.reverse()\n    |> Enum.join(\"\n\")\n  end\n  def oper(vert_mirror, s) do\n    vert_mirror.(s)\n  end\n  def oper(hor_mirror, s) do\n    hor_mirror.(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78096,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str\n    |> String.splitter(\"\n\", trim: true)\n    |> Stream.map(&String.reverse\/1)\n    |> Enum.join(\"\n\")\n  end\n\n  def hor_mirror(str) do\n    str\n    |> String.splitter(\"\n\", trim: true)\n    |> Enum.reverse()\n    |> Enum.join(\"\n\")\n  end\n\n  def oper(func, s) do\n    func.(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78097,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str |> String.split(\"\n\")\n        |> Enum.map(fn s -> String.reverse(s) end)\n        |> Enum.join(\"\n\")\n  end\n  def hor_mirror(str) do\n    str |> String.split(\"\n\")\n        |> Enum.reverse\n        |> Enum.join(\"\n\")\n  end\n  def oper(func, s) do\n    func.(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78098,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(s), do: s |> split |> Enum.map(&String.reverse\/1) |> join\n  def hor_mirror(s), do: s |> split |> Enum.reverse |> join\n  def split(s), do: s |> String.split(\"\n\")\n  def join(l), do: l |> Enum.join(\"\n\")\n  def oper(func, s), do: func.(s)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78099,"user_id":null,"body":"defmodule Kata do\n  def vert_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.map(&String.reverse\/1)\n    |> Enum.join(\"\n\")\n  end\n\n  def hor_mirror(str) do\n    str\n    |> String.split(\"\n\")\n    |> Enum.split(2)\n    |> (& [elem(&1, 1), elem(&1, 0)]).()\n    |> Enum.map(&Enum.reverse\/1)\n    |> List.flatten\n    |> Enum.join(\"\n\")\n  end\n\n  def oper(func, s), do: func.(s)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56dec885c54a926dcd001095":[{"id":78100,"user_id":null,"body":"defmodule Opposite do\n  def opposite(n), do: -n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78101,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number), do: -number\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78102,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number) do\n    -number\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78103,"user_id":1249,"body":"defmodule Opposite, do: def opposite(n), do: -n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78104,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number) when is_number(number) do\n    -number\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78105,"user_id":null,"body":"defmodule Opposite do\n  def opposite(n) do\n\t\t-n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78106,"user_id":null,"body":"defmodule Opposite do\n  def opposite(num), do: -num\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78107,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number) when number > 0 do\n    -number\n  end\n  \n  def opposite(number) when number < 0 and is_float(number) do\n    res = number |> to_string() |> String.codepoints |> List.delete_at(0) |> to_string \n    {val, _} = Float.parse(res)\n    val\n  end \n    \n  def opposite(number) when number < 0 and is_integer(number) do\n    res = number |> to_string() |> String.codepoints |> List.delete_at(0) |> to_string \n    {val, _} = Integer.parse(res)\n    val\n  end \n  \n  def opposite(0), do: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78108,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number) do\n    number - number - number\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78109,"user_id":null,"body":"defmodule Opposite do\n  def opposite(number) do\n    number = -number # you code here\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56e3cd1d93c3d940e50006a4":[{"id":78110,"user_id":492,"body":"defmodule Makevalley do\n\n  defp _make_valley([]) do\n    []\n  end\n  defp _make_valley([x]) do\n    [x]\n  end\n  defp _make_valley([x, y | xs]) do\n    [x] ++ (_make_valley xs) ++ [y]\n  end\n  def make_valley(a) do\n    b = Enum.sort(a, &(&1 > &2))\n    _make_valley(b)\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78111,"user_id":null,"body":"defmodule Makevalley do\n\n  def make_valley(a) do\n    sorted  = Enum.sort(a, &(&1 > &2))\n    {_, tl} = Enum.split(sorted,1)\n    left    = Enum.take_every(sorted, 2)\n    right   = Enum.take_every(tl, 2) |> Enum.reverse\n    left ++ right\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78112,"user_id":527,"body":"defmodule Makevalley do\n  def make_valley(xs) do\n    xs = Enum.sort(xs)\n    Stream.concat(Enum.reverse(xs), xs) |> Enum.take_every(2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78113,"user_id":null,"body":"defmodule Makevalley do\n  import Integer\n\n  def make_valley(a) do\n    Enum.reduce(Enum.sort(a), {is_even(length(a)) && :right || :left, []}, fn\n      x, {:left, acc} -> {:right, [x | acc]}\n      x, {:right, acc} -> {:left, [acc, x]}\n    end) |> elem(1) |> List.flatten()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78114,"user_id":null,"body":"defmodule Makevalley do\n  def make_valley(a) do\n    sorted  = Enum.sort_by(a, &-(&1))\n    left    = Enum.take_every(sorted, 2)\n    right   = Enum.drop_every(sorted, 2) |> Enum.reverse()\n    left ++ right\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78115,"user_id":null,"body":"defmodule Makevalley do\n\n  def make_valley(a) do\n    # your code\n    make_left(Enum.sort(a, &(&1 > &2)))\n  end\n  def make_left([h|t]) do\n    [h] ++ make_right(t)\n  end\n    def make_left([]) do\n    []\n  end\n  def make_right([h|t]) do\n    make_left(t) ++ [h]\n  end\n    def make_right([]) do\n    []\n  end\n\n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78116,"user_id":null,"body":"defmodule Makevalley do\n  require Integer\n  def make_valley(a) do\n    \n    s=a|>Enum.sort(&(&1 >= &2))\n    left = s|>Enum.take_every(2)\n    right = (s -- left)|>Enum.reverse\n    left++right\n    \n  end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78117,"user_id":null,"body":"defmodule Makevalley do\n\n  def make_valley(a) do\n    {left, right} =\n      a\n      |> Enum.sort\n      |> Enum.reverse\n      |> Enum.with_index\n      |> Enum.partition(fn {_, index} -> rem(index, 2) == 0 end)\n\n      l = left |> Enum.map(& elem(&1, 0))\n      r = right |> Enum.map(& elem(&1, 0)) |> Enum.reverse\n      Enum.concat(l, r)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78118,"user_id":null,"body":"defmodule Makevalley do\n\n  def make_valley(a) do\n    a\n    |> Enum.sort(&(&1 > &2))\n    |> do_make_valley([], [])\n  end\n  \n  def do_make_valley([l, r|t], left, right) do\n    do_make_valley(t, [l|left], [r|right])\n  end\n  \n  def do_make_valley([h|_], left, right) do\n    Enum.reverse([h|left]) ++ right\n  end\n  \n  def do_make_valley([], left, right) do\n    Enum.reverse(left) ++ right\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78119,"user_id":null,"body":"defmodule Makevalley do\n  def make_valley([]), do: []\n\n  def make_valley(a) do\n    sa = Enum.sort(a)\n\n    left =\n      Stream.iterate(length(a) - 1, &(&1 - 2))\n      |> Stream.take_while(&(&1 > 0))\n      |> Enum.map(&Enum.at(sa, &1))\n\n    right =\n      Stream.iterate(2 - rem(length(a), 2), &(&1 + 2))\n      |> Stream.take_while(&(&1 < length(a)))\n      |> Enum.map(&Enum.at(sa, &1))\n\n    left ++ Enum.take(sa, 1) ++ right\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56e7d40129035aed6c000632":[{"id":78120,"user_id":527,"body":"defmodule Easyline do\n  \n  def easyline(n) do\n    div(product(n + 1 .. 2 * n), product(1 .. n))\n  end\n  \n  defp product(xs) do\n    Enum.reduce(xs, 1, &(&1 * &2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78121,"user_id":53,"body":"defmodule Easyline do\n  \n  def easyline(0), do: 1\n  def easyline(n), do: div(easyline(n - 1) * (4 * n - 2), n)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78122,"user_id":null,"body":"defmodule Easyline do\n  def easyline(n) do\n    0..n\n    |> Enum.map(&binomial_coefficient(n, &1))\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum()\n  end\n  \n  defp binomial_coefficient(n, r), do: div(fact(n), fact(r) * fact(n - r))\n  \n  defp fact(0), do: 1\n  defp fact(n), do: Enum.reduce(1..n, 1, &(&1 * &2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78123,"user_id":492,"body":"defmodule Easyline do\n\n  defp choose(n, p) when (p == 0 or p == n) do 1 end\n  defp choose(n, p) do\n    p = if (p > n - p) do n - p else p end\n    nu = Enum.reduce(n-p+1..n, 1, &(&1 * &2))\n    de = Enum.reduce(1..p, 1, &(&1 * &2))\n    div(nu, de)\n  end\n  \n  def easyline(n) do\n    choose(2 * n, n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78124,"user_id":1249,"body":"defmodule Easyline do\n  \n  def easyline(0), do: 1\n  def easyline(n) do\n    div(easyline(n-1)*(4*n-2), n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78125,"user_id":null,"body":"defmodule Easyline do\n  def easyline(n) do\n    0..n\n    |> Enum.map(&(div(fact(n), fact(&1) * fact(n - &1))))\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum()\n  end\n  \n  defp fact(0), do: 1\n  defp fact(n), do: Enum.reduce(1..n, 1, &(&1 * &2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78126,"user_id":null,"body":"defmodule Easyline do\n  \n  def easyline(n) do\n    div(Enum.reduce(1..2*n, &*\/2), Enum.reduce(1..n, &*\/2) * Enum.reduce(1..n, &*\/2))\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78127,"user_id":null,"body":"defmodule Easyline do\n  defp factorial(0), do: 1\n  defp factorial(n), do: Enum.reduce(1..n, &(&1 * &2))\n  defp sq(n), do: n*n\n  def easyline(n), do: div(factorial(2*n), sq(factorial(n)))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78128,"user_id":null,"body":"defmodule Easyline do\n  # the function to be computed is C(2n,n)\n  def easyline(n) do\n    if n == 0\n    do 1\n    else div(easyline(n - 1) * (2 * n - 1) * 2, n)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78129,"user_id":null,"body":"defmodule Easyline do\n  def easyline(n) when n < 1, do: 0\n  def easyline(0), do: 1\n\n  def easyline(n) do\n    row = (n - 1)..(2 * n - 1)\n\n    row\n    |> Enum.reduce(0, fn x, acc ->\n      calc_combination_per_row_item(x, Enum.find_index(row, fn i -> i == x end)) + acc\n    end)\n  end\n\n  def calc_combination_per_row_item(row, i) do\n    div(factorial(row), factorial(i) * factorial(row - i))\n  end\n\n  defp factorial(0), do: 1\n\n  defp factorial(n) when n > 0 do\n    n * factorial(n - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56efab15740d301ab40002ee":[{"id":78130,"user_id":2098,"body":"defmodule Reducebystep do\n  def som(a, b), do: a + b\n\n  def mini(a, b), do: min(a, b)\n\n  def maxi(a, b), do: max(a, b)\n\n  def gcdi(a, 0), do: abs(a)\n  def gcdi(a, b), do: gcdi(abs(b), rem(abs(a), abs(b)))\n\n  def lcmu(a, b), do: div(abs(a * b), gcdi(a, b))\n\n  def oper_array(fct, arr, init), do: Enum.scan(arr, init, fct)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78131,"user_id":null,"body":"defmodule Reducebystep do\n\n  def som(a, b), do: a + b\n  \n  def mini(a, b), do: min(a, b)\n  \n  def maxi(a, b), do: max(a, b)\n  \n  def gcdi(a, b), do: gcd(abs(a), abs(b))\n  def gcd(a, 0),  do: a\n  def gcd(a, b),  do: gcd(b, rem(a, b))\n  \n  def lcmu(a, b), do: lcm(abs(a), abs(b))\n  def lcm(a, b),  do: div(abs(a * b), gcd(a, b))\n  \n  def oper_array(fct, arr, init), do: Enum.scan(arr, init, fct)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78132,"user_id":492,"body":"defmodule Reducebystep do\n\n  def som(a, b) do a + b end\n  def mini(a, b) do min(a, b) end\n  def maxi(a, b) do max(a, b) end\n  def gcdi(a,0), do: abs(a)\n  def gcdi(a,b), do: gcdi(b, rem(a, b))\n  def lcmu(a,b), do: div(abs(a * b), gcdi(a, b))\n  \n  def oper_array(fct, arr, init) do\n    Enum.scan(arr, init, fct)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78133,"user_id":null,"body":"defmodule Reducebystep do\n\n  def som(a, b), do: a + b\n  def mini(a, b), do: min(a,b)\n  def maxi(a, b), do: max(a,b)\n  def gcdi(x, 0), do: x\n  def gcdi(x, y), do: gcdi(abs(y), rem(abs(x),abs(y)))\n  def lcmu(0, 0), do: 0\n  def lcmu(a, b), do: abs(div(a * b, gcdi(a, b)))  \n  def oper_array(fct, arr, init), do: Enum.scan(arr, init, fct)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78134,"user_id":null,"body":"defmodule Reducebystep do\n\n  def som(a, b), do: a + b\n  def mini(a, b), do: min(a,b)\n  def maxi(a, b), do: max(a,b)\n\n  def gcdi(a, b) when rem(a, b) == 0 do\n    abs(b)\n  end\n  \n  def gcdi(a, b) do\n    gcdi b, rem(a, b)\n  end\n  \n  def lcmu(a,b) do\n    abs div(a * b, gcdi(a, b))\n  end\n  \n  def oper_array(fct, arr, init) do\n    Stream.unfold({arr, init}, fn\n      {[], _} -> nil\n      {[head|tail], acc} -> {fct.(acc, head), {tail, fct.(acc, head)}}\n    end)\n    |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78135,"user_id":null,"body":"defmodule Reducebystep do\n  def som(a, b), do: a + b\n  def mini(a, b), do: min(a, b)\n  def maxi(a, b), do: max(a, b)\n  def gcdi(a,b), do: Integer.gcd(abs(a), abs(b))\n  def lcmu(a,b), do: div(abs(a) * abs(b), gcdi(a, b))\n  def oper_array(fct, arr, init), do: Enum.scan(arr, init, fct)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78136,"user_id":null,"body":"defmodule Reducebystep do\ndef som(a, b), do: a + b\n  def mini(a, b), do: if(a > b, do: b, else: a)\n  def maxi(a, b), do: if(a > b, do: a, else: b)\n  def gcdi(a, b), do: Integer.gcd(abs(a), abs(b))\n  def lcmu(a, b), do: div(abs(a) * abs(b), gcdi(a, b))\n\n  def oper_array(fct, arr, init) do\n    [_head | tail] =\n      arr |> Enum.reduce([init], &[&2 | [fct.(&1, List.last(&2))]]) |> List.flatten()\n\n    tail\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78137,"user_id":null,"body":"defmodule Reducebystep do\n\n  def som(a, b), do: a + b\n  def mini(a, b), do: if a >= b, do: b, else: a\n  def maxi(a, b), do: if a <= b, do: b, else: a\n  def gcdi(a,b), do: Integer.gcd(a |> abs |> trunc, b |> abs |> trunc) |> trunc\n  def lcmu(a,b), do: div(abs(a * b), Integer.gcd(a |> abs, b |> abs))\n  \n  def oper_array(fct, arr, init) do\n    arr |> Stream.scan(init, fct) |> Enum.to_list\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78138,"user_id":53,"body":"defmodule Reducebystep do\n\n  def  som(a, b), do: a + b\n  def mini(a, b), do: if a < b, do: a, else: b\n  def maxi(a, b), do: if a > b, do: a, else: b\n  def gcdi(a, b), do: if b == 0, do: abs(a), else: gcdi(b, rem(a, b))\n  def lcmu(a, b), do: div(abs(a * b), gcdi(a, b))\n  \n  def oper_array(f, xs, seed) do\n    aux(f, xs, seed, [], 0, length(xs))\n  end\n  \n  defp aux(_, _, _, ys, i, n) when i == n, do: Enum.reverse(ys)\n  defp aux(f, xs, acc, ys, i, n) do\n    x = Enum.at(xs, i)\n    y = f.(acc, x)\n    zs = [y | ys]\n    aux(f, xs, y, zs, (i + 1), n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78139,"user_id":null,"body":"defmodule Reducebystep do\n\n  def som(a, b), do: a + b\n\n  def maxi(a, b), do: if a > b, do: a, else: b\n\n  def mini(a, b), do: if a > b, do: b, else: a\n\n  def gcdi(a, b), do: Integer.gcd(abs(a), abs(b))\n\n  def lcmu(a, b), do: div(abs(a * b), gcdi(a, b))\n\n  def oper_array(fct, arr, init) do\n    [_init | tail] =\n      arr\n      |> Enum.reduce([init], &([&2 | [fct.(&1, List.last(&2))]]))\n      |> List.flatten\n    tail\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56efc695740d30f963000557":[{"id":78140,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  @d ?a - ?A\n  \n  def to_alternating_case(str) do\n    str\n    |> String.to_char_list\n    |> Enum.map(&( _alter(&1)) )\n    |> List.to_string\n  end\n  \n  defp _alter(c) when c in ?a..?z, do: c - @d\n  defp _alter(c) when c in ?A..?Z, do: c + @d\n  defp _alter(c), do: c\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78141,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    import String\n    import Enum\n\n    str\n    |> codepoints\n    |> map(&(if &1 == upcase(&1), do: downcase(&1), else: upcase(&1)))\n    |> to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78142,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    str\n    |> String.codepoints\n    |> Enum.map(&_invert(&1))\n    |> Enum.join\n  end\n  \n  defp _invert(str) do \n    if str =~ ~r\/^\\p{Lu}$\/u do\n      String.downcase(str)\n    else\n      String.upcase(str)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78143,"user_id":null,"body":"defmodule Codewars.StringUtils do\n\n  def to_alternating_case(str) do\n    str\n    |> String.graphemes\n    |> Enum.map_join(fn (char) ->\n      if Regex.match?(~r\/[a-z]\/, char) do\n        String.upcase(char)\n      else\n        String.downcase(char)\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78144,"user_id":1774,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    str\n    |> String.codepoints\n    |> Enum.map(&switch_case\/1)\n    |> Enum.join\n  end\n  \n  defp switch_case(c) do\n    if uppercase?(c) do\n      String.downcase(c)\n    else\n      String.upcase(c)\n    end\n  end\n  \n  defp uppercase?(c), do: String.match?(c, ~r\/^\\p{Lu}$\/u)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78145,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    for << c <- str >>, into: \"\" do\n      cond do\n        c in ?a..?z -> <<c - 32>>\n        c in ?A..?Z -> <<c + 32>>\n        true -> <<c>>\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78146,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  # Using this exercise to practice:\n  #   single-pass string processing, tail recursion, string processing by grapheme,\n  #   implementing map, implementing reduce, iodata, improper lists\n\n  import String, only: [next_grapheme: 1, downcase: 1, upcase: 1]\n\n  def to_alternating_case(string) when is_binary(string) do\n    map_string(string, fn char ->\n      upcase = upcase(char)\n      if char == upcase, do: downcase(char), else: upcase\n    end)\n  end\n\n  def map_string(string, map_fun) do\n    string\n    |> reduce_string(fn char, acc -> [acc | map_fun.(char)] end)\n    |> IO.iodata_to_binary()\n  end\n\n  def reduce_string(string, acc \\\\ [], fun) when is_binary(string) do\n    do_reduce_string(next_grapheme(string), acc, fun)\n  end\n\n  defp do_reduce_string({grapheme, rest}, acc, fun) do\n    do_reduce_string(next_grapheme(rest), fun.(grapheme, acc), fun)\n  end\n\n  defp do_reduce_string(nil, acc, _fun), do: acc\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78147,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    str\n    |> String.to_char_list\n    |> Enum.map(fn(x) ->\n      case x do\n        x when x in ?A..?Z -> x + 32\n        x when x in ?a..?z -> x - 32\n        x -> x\n      end\n    end)\n    |> List.to_string\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78148,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str), do: str |> String.split(\"\") |> Enum.map_join(\"\",fn(x) -> if(x == (y = String.upcase(x)), do: String.downcase(x), else: y) end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78149,"user_id":null,"body":"defmodule Codewars.StringUtils do\n  def to_alternating_case(str) do\n    String.graphemes(str)\n    |> Enum.map(fn x -> (String.downcase(x) == x && String.upcase(x)) || String.downcase(x) end)\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56f3a1e899b386da78000732":[{"id":78150,"user_id":null,"body":"defmodule Partlist do\n  def part_list(a)do \n    Enum.map(1..(length(a) - 1), fn n ->\n      Enum.split(a, n)\n      |> Tuple.to_list\n      |> Enum.map(&Enum.join(&1, \" \"))\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78151,"user_id":null,"body":"defmodule Partlist do\n\n  def part_list(a) do \n    for count <- 1..(length(a) - 1) do\n      with {head, tail} <- Enum.split(a, count) do\n        [Enum.join(head, \" \"), Enum.join(tail, \" \")]\n      end\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78152,"user_id":null,"body":"defmodule Partlist do\n\n  def part_list(a) do \n    for n <- 1..(Enum.count(a) - 1) do\n      {head, tail} = Enum.split(a, n)\n      [Enum.join(head, \" \"), Enum.join(tail, \" \")]\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78153,"user_id":null,"body":"defmodule Partlist do\n  def part_list(a) do\n    a\n    |> split\n    |> concat\n    |> Enum.reverse\n  end\n\n  def split(a), do: split(a, length(a)-1)\n  def split(_a, 0), do: []\n  def split(a, n), do: [Enum.split(a, n) | split(a, n-1)]\n  def concat(list) do\n    Enum.map(list, fn {l1, l2} -> [Enum.join(l1, \" \"), Enum.join(l2, \" \")] end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78154,"user_id":null,"body":"defmodule Partlist do\n  def part_list(a) do\n    1..(length(a) - 1)\n    |> Enum.map(&Enum.split(a, &1))\n    |> Enum.map(fn {l1, l2} -> [l1, l2] |> Enum.map(&Enum.join(&1, \" \")) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78155,"user_id":null,"body":"defmodule Partlist do\n\ndef part_list(a) do\n    create_list(a, [], 1, length(a))\n  end\n\n  def create_list(_, new_list, count, total) when count === total, do: Enum.reverse(new_list)\n\n  def create_list(list, mod_list, count, total) do\n    new_list =\n      list\n      |> Enum.split(count)\n      |> Tuple.to_list()\n      |> Enum.map(fn words -> Enum.join(words, \" \") end)\n\n    create_list(list, [new_list | mod_list], count + 1, total)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78156,"user_id":2098,"body":"defmodule Partlist do\n\n  def part_list(a)do \n    Enum.map(1..(length(a) - 1), \n      fn num -> \n        Enum.split(a, num) \n        |> Tuple.to_list \n        |> Enum.map(&(Enum.join(&1, \" \"))) \n      end\n    )\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78157,"user_id":492,"body":"defmodule Partlist do\n\n  defp part(a, l, j) do\n    [Enum.join(Enum.slice(a, 0, j), \" \"), Enum.join(Enum.slice(a, j, l - j), \" \")] \n  end\n  \n  def part_list(a)do \n    l = Enum.count(a)\n    for j <- 1..l - 1, s = part(a, l, j), do: s\n  end\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78158,"user_id":null,"body":"defmodule Partlist do\n  def part_list(a) do\n    for i <- 1..length(a)-1,\n        {head, tail} = Enum.split(a, i),\n        do: [Enum.join(head, \" \"), Enum.join(tail, \" \")]\n  end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78159,"user_id":3236,"body":"defmodule Partlist do\n\n  def part_list(a)do \n    Enum.with_index(a)\n    |> Enum.map(fn({_, index}) ->\n      [\n        Enum.join(Enum.take(a, index), \" \"),\n        Enum.join(Enum.drop(a, index), \" \")\n      ]\n    end)\n    |> tl\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56f699cd9400f5b7d8000b55":[{"id":78160,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat({t, b, h}), do: {h, b, t}\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78161,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat({ tail, body, head }), do: { head, body, tail }\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78162,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat({first, middle, last}) do\n    {last, middle, first}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78163,"user_id":2242,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat({b, m, t}) do\n    {t, m, b}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78164,"user_id":null,"body":"defmodule Codewars.Zoo, do: def fix_the_meerkat({a, b, c}), do: {c, b, a}","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78165,"user_id":17,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat(tuple) do\n    List.to_tuple(apply(Enum, :reverse, [Tuple.to_list(tuple)]))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78166,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat(tuple) do\n    case tuple do\n     {a,b,c} -> {c,b,a}\n     _ -> tuple\n   end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78167,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat(tuple) do\n    list = Tuple.to_list(tuple)\n    last = Enum.at(list, 0)\n    first = Enum.at(list, 2)\n    [first, Enum.at(list, 1), last]\n    |> List.to_tuple\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78168,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat({t, m, h}) do\n    {h, m, t}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78169,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def fix_the_meerkat(tuple) do\n    Enum.reverse(Tuple.to_list(tuple))\n    |> List.to_tuple()\n  end\nend\n\n# test  assert fix_the_meerkat({\"toes\", \"torso\", \"head top\"}) == {\"head top\", \"torso\", \"toes\"}","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56f69d9f9400f508fb000ba7":[{"id":78170,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n) do\n    Enum.to_list(1..n)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78171,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n), do: Enum.to_list (1..n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78172,"user_id":null,"body":"defmodule Codewars.Zoo do\n  # Using this exercise to practice: comprehensions\n\n  def monkey_count(n) do\n    for i <- 1..n, do: i\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78173,"user_id":null,"body":"defmodule Codewars.Zoo do\n  # Using this exercise to practice: recursion, tail recursion\n\n  def monkey_count(n, acc \\\\ [])\n  def monkey_count(0, acc), do: acc\n  def monkey_count(n, acc), do: monkey_count(n - 1, [n | acc])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78174,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n) do\n    1\n    |> Stream.iterate(&(&1 + 1))\n    |> Enum.take(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78175,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n), do: _span(1, n)\n\n  def _span(from, to) when from > to, do: []\n  def _span(from, to), do: [ from | _span(from + 1, to) ]\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78176,"user_id":null,"body":"defmodule Codewars.Zoo do\n  @spec monkey_count(pos_integer) :: [pos_integer]\n  def monkey_count(monkeys), do: for monkey <- 1..monkeys, do: monkey\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78177,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n, acc \\\\ [])\n  def monkey_count(0, acc), do: acc\n  def monkey_count(n, acc), do: monkey_count(n - 1, [n | acc])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78178,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n) do\n    Enum.map(1..n, fn num -> num end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78179,"user_id":null,"body":"defmodule Codewars.Zoo do\n  def monkey_count(n) do\n    range = 1..n\n    Enum.to_list(range)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56f6ad906b88de513f000d96":[{"id":78180,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, false), do: \"$#{salary}\"\n  def bonus_time(salary, true), do: \"$#{salary * 10}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78181,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, true), do: \"$#{salary*10}\"\n  def bonus_time(salary, false), do: \"$#{salary}\"\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78182,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, bonus) do\n    if bonus do\n      \"$\" <> \"\" <> Integer.to_string(salary * 10)  \n    else\n      \"$\" <> \"\" <> Integer.to_string(salary)\n    end  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78183,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, bonus)\n  def bonus_time(salary, true), do: \"$#{salary * 10}\"\n  def bonus_time(salary, false), do: \"$#{salary}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78184,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, bonus) do\n    \"$#{if bonus, do: salary * 10, else: salary}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78185,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, false), do: monetize(salary)\n  def bonus_time(salary, true), do: monetize(salary * 10)\n  def monetize(money), do: \"$#{money}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78186,"user_id":1403,"body":"defmodule Codewars.Reward do\n  def bonus_time(s, b) do\n    if b, do: \"$#{s*10}\", else: \"$#{s}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78187,"user_id":250,"body":"defmodule Codewars.Reward do\n  def bonus_time(s, true), do: \"$#{s}0\"\n  def bonus_time(s, false), do: \"$#{s}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78188,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, true), do: \"$#{salary}0\"\n  def bonus_time(salary, false), do: \"$#{salary}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78189,"user_id":null,"body":"defmodule Codewars.Reward do\n  def bonus_time(salary, bonus) when is_integer(salary) and is_boolean(bonus) do\n    if bonus === true do\n      \"$\" <> \"#{salary * 10}\"\n    else\n      \"$\" <> \"#{salary}\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56fcfad9c7e1fa2472000034":[{"id":78190,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  def evil?(n) do\n    require Integer\n    n\n    |> Integer.digits(2)\n    |> Enum.sum\n    |> Integer.is_even\n    |> if(do: \"It's Evil!\", else: \"It's Odious!\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78191,"user_id":1249,"body":"defmodule Codewars.EvilOdious do\n  use Bitwise, only_operators: true\n  import Integer, only: :macros\n  \n  def evil?(n, acc \\\\ 0)\n  def evil?(0, acc) when is_odd(acc), do: \"It's Odious!\"\n  def evil?(0, acc) when is_even(acc), do: \"It's Evil!\"\n  def evil?(n, acc), do: evil?(n &&& n - 1, acc + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78192,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n\n  import Integer, only: [digits: 2]\n\n  @doc \"\"\"\n  Determine whether an integer is odious or evil.\n  \"\"\"\n  @spec evil?(integer) :: String.t\n  def evil?(number) do\n    number\n    |> digits(2)\n    |> Enum.sum\n    |> categorize\n  end\n\n  # Categorize whether a count of digits is evil or odious\n  @spec categorize(integer) :: String.t\n  defp categorize(n) do\n    case rem(n, 2) do\n      0 ->\n        \"It's Evil!\"\n      _ ->\n        \"It's Odious!\"\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78193,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  import Integer, only: :macros\n  \n  def evil?(number) do\n    number\n    |> Integer.digits(2)\n    |> Enum.count(&(&1 == 1))\n    |> evil_msg()\n  end\n  \n  defp evil_msg(x) when is_even(x), do: \"It's Evil!\"\n  defp evil_msg(x) when is_odd(x), do: \"It's Odious!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78194,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  def evil?(n), do: \"It's #{if rem(Integer.digits(n, 2) |> Enum.filter(fn(x) -> x == 1 end) |> Enum.sum, 2) == 1, do: \"Odious\", else: \"Evil\"}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78195,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  def evil?(n) do\n    require Integer\n    n\n    |> Integer.digits(2)\n    |> Enum.filter(fn(x) -> x == 1 end)\n    |> length\n    |> Integer.is_even\n    |> if(do: \"It's Evil!\", else: \"It's Odious!\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78196,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  def evil?(n) do\n    cond do\n      Kernel.rem(count(n), 2) != 0 -> \"It's Odious!\"\n      true -> \"It's Evil!\"\n\n    end\n  end\n\n  def count(n) do\n    n\n      |> Integer.to_string(2)\n      |> String.split(\"\", trim: true)\n      |> Enum.count(fn x -> x == \"1\" end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78197,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  def evil?(n), do: if rem(Enum.count(Integer.digits(n, 2), & &1 == 1), 2) == 0, do: \"It's Evil!\", else: \"It's Odious!\"\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78198,"user_id":null,"body":"require Integer\n\ndefmodule Codewars.EvilOdious do\n  def evil?(n) do\n    if Integer.is_even(Enum.sum(Integer.digits(n, 2))) do\n      \"It's Evil!\"\n    else\n      \"It's Odious!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78199,"user_id":null,"body":"defmodule Codewars.EvilOdious do\n  require Integer\n  def evil?(n) do\n    n_of_1s = n\n    |> Integer.to_string(2)\n    |> String.split(\"\")\n    |> Enum.count(&(&1 == \"1\"))\n    if Integer.is_even(n_of_1s), do: \"It's Evil!\", else: \"It's Odious!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"56fe17fcc25bf3e19a000292":[{"id":78200,"user_id":492,"body":"defmodule Disguised2 do\n\n    defp choose(n, p) when (p == 0 or p == n) do 1 end\n    defp choose(n, p) do\n        if (p > n - p) do p = n - p end\n        nu = Enum.reduce(n-p+1..n, 1, &(&1 * &2))\n        de = Enum.reduce(1..p, 1, &(&1 * &2))\n        div(nu, de)\n    end\n\n    defp v1(n, p, k, s) when k > n do round(p * s) end\n    defp v1(n, p, k, s) do\n        u = choose(2 * n - k, k)\n        sm = :math.pow(-1, k) * :math.pow(4, n - k) * u\n        v1(n, p, k+1, sm + s)\n    end\n    def v1(n, p) do v1(n, p, 0, 0) end\n\n    defp u1(n, p, k, s) when k > n do round(p * s) end\n    defp u1(n, p, k, s) do\n        u = choose(2 * n - k + 1, k)\n        sm = :math.pow(-1, k) * :math.pow(4, n - k) * u\n        u1(n, p, k+1, sm + s)\n    end\n    def u1(n, p) do u1(n, p, 0, 0) end\n\n    def v_eff(n, p) do\n        p * (2 * n + 1)\n    end\n    def u_eff(n, p) do\n        p * (n + 1)\n    end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78201,"user_id":492,"body":"defmodule Disguised2 do\n\n    defp choose(n, p) when (p == 0 or p == n) do 1 end\n    defp choose(n, p) do\n        if (p > n - p) do p = n - p end\n        nu = Enum.reduce(n-p+1..n, 1, &(&1 * &2))\n        de = Enum.reduce(1..p, 1, &(&1 * &2))\n        div(nu, de)\n    end\n\n    defp v1(n, p, k, s) when k > n do round(p * s) end\n    defp v1(n, p, k, s) do\n        u = choose(2 * n - k, k)\n        sm = :math.pow(-1, k) * :math.pow(4, n - k) * u\n        v1(n, p, k+1, sm + s)\n    end\n    def v1(n, p) do v1(n, p, 0, 0) end\n\n    defp u1(n, p, k, s) when k > n do round(p * s) end\n    defp u1(n, p, k, s) do\n        u = choose(2 * n - k + 1, k)\n        sm = :math.pow(-1, k) * :math.pow(4, n - k) * u\n        u1(n, p, k+1, sm + s)\n    end\n    def u1(n, p) do u1(n, p, 0, 0) end\n\n    def v_eff(n, p) do\n        p * (2 * n + 1)\n    end\n    def u_eff(n, p) do\n        p * (n + 1)\n    end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78202,"user_id":53,"body":"defmodule Disguised2 do\n    def v1(n, p), do: (2 * n + 1) * p\n    def u1(n, p), do: (n + 1) * p\n    def v_eff(n, p), do: (2 * n + 1) * p\n    def u_eff(n, p), do: (n + 1) * p\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78203,"user_id":null,"body":"defmodule Disguised2 do\n  def v1(n, p), do: p * (2 * n + 1)\n  def u1(n, p), do: p * (n + 1)\n  def v_eff(n, p), do: p * (2 * n + 1)\n  def u_eff(n, p), do: p * (n + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78204,"user_id":null,"body":"defmodule Disguised2 do\n\n    def v1(n, p) do \n      Enum.sum(for x <- 0..n, do: :math.pow(-1, x) * p * :math.pow(4, n-x) * choose(2*n - x, x))\n        |> round()\n    end\n\n    def u1(n, p) do \n      Enum.sum(for x <- 0..n, do: :math.pow(-1, x) * p * :math.pow(4, n-x) * choose(2*n - x + 1, x))\n        |> round()\n    end\n\n    def v_eff(n, p) do\n        p * (2 * n + 1)\n    end\n    def u_eff(n, p) do\n        p * (n + 1)\n    end\n    \n    defp choose(n,k) when is_integer(n) and is_integer(k) and n>=0 and k>=0 and n>=k do\n      if k==0, do: 1, else: choose(n,k,1,1)\n    end\n    defp choose(n,k,k,acc), do: div(acc * (n-k+1), k)\n    defp choose(n,k,i,acc), do: choose(n, k, i+1, div(acc * (n-i+1), i))\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78205,"user_id":null,"body":"defmodule Disguised2 do\n\n  def v1(n, p) do\n    0..n |> Enum.map(& :math.pow(-1, &1) * p * :math.pow(4, n - &1) * binomial(2 * n - &1, &1)) |> Enum.sum\n  end\n\n  def u1(n, p) do\n    0..n |> Enum.map(& :math.pow(-1, &1) * p * :math.pow(4, n - &1) * binomial(2 * n - &1 + 1, &1)) |> Enum.sum\n  end\n\n  def v_eff(n, p), do: 2 * n * p + p\n\n  def u_eff(n, p), do: n * p + p\n\n  def binomial(n, k), do: div(factorial(n), factorial(k) * factorial(n - k))\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78206,"user_id":null,"body":"defmodule Disguised2 do\n\n    def fact(0), do: 1\n    def fact(n), do: n*fact(n-1)\n\n    def pow(0), do: 1\n    def pow(n), do: 4*pow(n-1)\n\n    def bin(v, n), do: div(fact(v), fact(n)*fact(v-n))\n    \n    def v1(n, p, tk \\\\ -10)\n    def v1(_, _, -1), do: 0\n    def v1(n, p, tk) do\n      tk = if tk == -10, do: n, else: tk\n      \n      um = if rem(tk, 2) == 1, do: -1, else: 1\n      um*p*pow(n-tk)*bin(2*n-tk,tk) + v1(n, p, tk-1)\n    end\n\n    def u1(n, p, tk \\\\ -10)\n    def u1(_, _, -1), do: 0\n    def u1(n, p, tk) do\n      tk = if tk == -10, do: n, else: tk\n      \n      um = if rem(tk, 2) == 1, do: -1, else: 1\n      um*p*pow(n-tk)*bin(2*n-tk+1,tk) + u1(n, p, tk-1)\n    end\n\n    def v_eff(n, p), do: (2*n+1)*p\n    def u_eff(n, p), do: (n+1)*p    \n\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78207,"user_id":null,"body":"defmodule Disguised2 do\n    def v1(n,p), do: u1(2*n,p)\n    def u1(n,p), do: n*p+p\n    def v_eff(n,p), do: v1(n,p)\n    def u_eff(n,p), do: u1(n,p)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78208,"user_id":null,"body":"defmodule Disguised2 do\n    def fact(n), do: Enum.reduce(1..n, 1, &*\/2)\n\n    def ncr(_, 0), do: 1\n    def ncr(n, r) when n == r, do: 1\n    def ncr(n, r) do\n      IO.inspect(n)\n      IO.inspect(r)\n      nf = fact(n)\n      rf = fact(r)\n      nrf = fact(n - r)\n      \n      div(nf, rf * nrf)\n    end\n    \n    def common(n, p, a) do\n      0..n\n      |> Stream.map(fn k ->\n        b = trunc(:math.pow(-1, k))\n        c = trunc(:math.pow(4, n - k))\n        d = ncr(2 * n - k + a, k)\n        b * c * d * p\n      end)\n      |> Enum.sum()\n    end\n\n    def v1(n, p) do \n      common(n, p, 0)\n    end\n\n    def u1(n, p) do \n      common(n, p, 1)\n    end\n\n    def v_eff(n, p) do\n        p * (2 * n + 1)\n    end\n    def u_eff(n, p) do\n        p * (n + 1)\n    end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78209,"user_id":null,"body":"defmodule Disguised2 do\n\n    def fac(n) when n == 0, do: 1\n    def fac(n), do: n * fac(n-1)\n    \n    def n_choose_k(n, k) do\n      div(fac(n), (fac(k) * fac(n - k)))\n    end\n    \n    def v1(n, p) do \n      Enum.sum(\n        Enum.map(0..n, fn k ->\n          :math.pow(-1, k) * p * :math.pow(4, n-k) *\n            n_choose_k(2 * n - k, k)\n        end)) \n    end\n\n    def u1(n, p) do \n      Enum.sum(\n        Enum.map(0..n, fn k ->\n          :math.pow(-1, k) * p * :math.pow(4, n-k) *\n            n_choose_k(2 * n - k + 1, k)\n        end))\n    end\n\n    def v_eff(n, p) do\n        (n * 2 + 1) * p\n    end\n    def u_eff(n, p) do\n        (n + 1) * p\n    end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5700c9acc1555755be00027e":[{"id":78210,"user_id":527,"body":"defmodule Allinclusive do\n  \n  def contain_all_rots(\"\", _), do: true\n  def contain_all_rots(string, list) do\n    strings = MapSet.new(list)\n    0 .. String.length(string) - 1\n      |> Stream.map(fn i -> {s1, s2} = String.split_at(string, i); s2 <> s1 end)\n      |> Enum.all?(&(MapSet.member?(strings, &1)))\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78211,"user_id":2098,"body":"defmodule Allinclusive do\n\n  def contain_all_rots(\"\", _arr), do: true\n  def contain_all_rots(strng, arr) do\n    strng_as_list = String.split(strng, \"\", trim: true)\n\n    rots = for n <- 0..String.length(strng) - 1, do: rot(strng_as_list, n)\n\n    rots\n    |> Enum.map(fn(x) -> Enum.join(x) end)\n    |> Enum.all?(&Enum.member?(arr, &1))\n  end\n\n  def rot(arr, 0), do: arr\n  def rot([head | arr], number) do\n    rot(arr ++ [head], number - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78212,"user_id":null,"body":"defmodule Allinclusive do\n  \n  def contain_all_rots(strng, arr) do\n    strng\n    |> Stream.iterate(fn <<c, rest::binary>> -> <<rest::binary, c>> end)\n    |> Enum.take(String.length(strng))\n    |> Enum.all?(& &1 in arr)\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78213,"user_id":53,"body":"defmodule Allinclusive do\n\n  def contain_all_rots(\"\", _), do: true\n  def contain_all_rots(s, xs), do: Enum.all?(rot_all(s), fn x -> Enum.member?(xs, x) end)\n  \n  defp rot_once(s), do: String.slice(s, 1..-1) <> String.at(s, 0)\n  \n  defp rot_all(s), do: rot_all_aux([s], 1, String.length(s))\n  defp rot_all_aux(ls, i, n) when i >= n, do: ls\n  defp rot_all_aux(ls, i, n), do: rot_all_aux([rot_once(Enum.at(ls, 0)) | ls], i + 1, n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78214,"user_id":null,"body":"defmodule Allinclusive do\n  \n  def contain_all_rots(\"\", _), do: true\n  def contain_all_rots(strng, arr) do\n    strng\n    |> String.codepoints()\n    |> rotations()\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.all?(&Enum.member?(arr, &1))\n  end\n  \n  def rotations(list), do: rotations(list, Enum.count(list), [])\n  def rotations(_, 0, acc), do: acc\n  def rotations([], _, acc), do: acc\n  def rotations([h|t], n, acc) do\n    new= t ++ [h]\n\n    rotations(new, n - 1, [new|acc])\n  end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78215,"user_id":null,"body":"defmodule Allinclusive do\n  def contain_all_rots(\"\", _), do: true\n  def contain_all_rots(strng, arr) do\n    build_all_rots(strng) -- arr == []\n  end\n\n  def build_all_rots(strng) do\n    build_rec(strng, rotate(strng))\n  end\n\n  def build_rec(strng, strng), do: [strng]\n  def build_rec(stop, strng) do\n    [strng] ++ build_rec(stop, rotate(strng))\n  end\n\n  def rotate(strng) do\n    String.slice(strng, 1..-1) <> String.first(strng)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78216,"user_id":null,"body":"defmodule Allinclusive do\n  def contain_all_rots(\"\", _), do: true\n\n  def contain_all_rots(string, arr) do\n    string\n    |> all_rotations()\n    |> Enum.all?(&(&1 in arr))\n  end\n  \n  defp all_rotations(string) do\n    chars = String.graphemes(string)\n    len = length(chars)\n    \n    chars\n    |> Stream.cycle()\n    |> Stream.chunk_every(len, len + 1)\n    |> Enum.take(len)\n    |> Enum.map(&Enum.join\/1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78217,"user_id":null,"body":"defmodule Allinclusive do\n  def inclusive?(0, _, _), do: true\n  def inclusive?(n, strng = <<digit::bytes-size(1)>> <> rest, arr) do\n    if (Enum.member?(arr, strng)) do\n      inclusive?(n - 1, rest <> digit, arr)\n    else\n      false\n    end\n  end\n  def contain_all_rots(strng, arr) do\n    inclusive? String.length(strng), strng, arr\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78218,"user_id":null,"body":"defmodule Allinclusive do\n\n  def contain_all_rots(\"\", _) do\n    true\n  end\n\n  def contain_all_rots(s, list) do\n\n    # head and tail change places\n    rotateOnce = \n      fn s ->\n        case String.split_at(s, 1) do\n          {head, tail} -> tail <> head\n        end\n      end\n    \n    # continue collecting rotations so long as they are new\n    rotationIsNew =\n      fn r, rots ->\n        cond do\n          MapSet.member?(rots, r) -> {:halt, rots}\n          true                    -> {:cont, MapSet.put(rots, r)}\n        end\n      end\n\n    uniqueRotations =\n      s\n      |> Stream.iterate(rotateOnce)\n      |> Enum.reduce_while(MapSet.new(), rotationIsNew)\n\n    MapSet.subset?(uniqueRotations, MapSet.new(list))\n\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78219,"user_id":null,"body":"defmodule Allinclusive do\n  \n  def contain_all_rots(str, arr) do\n  \n  \tif String.length(str) == 0 do\n    \ttrue\n    else\n      1..String.length(str)\n      |> Enum.map(fn i -> String.slice(str, i, String.length(str)) <> String.slice(str, 0, i) end)\n      |> Enum.all?(fn x -> Enum.member?(arr, x) end)\n    end\n  \n  end\n    \nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"570409d3d80ec699af001bf9":[{"id":78220,"user_id":53,"body":"defmodule Kata do\n    import Integer\n    def fusc(0), do: 0\n    def fusc(1), do: 1\n    def fusc(n) when is_odd(n), do: fusc(div(n, 2)) + fusc(div(n, 2) + 1)\n    def fusc(n), do: fusc(div(n, 2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78221,"user_id":null,"body":"defmodule Kata do\n  def fusc(0) do\n    0\n  end\n  def fusc(1) do\n    1\n  end\n  def fusc(n) do\n    if rem(n, 2) == 0 do\n      fusc(div(n, 2))\n    else\n      fusc(div(n, 2)) + fusc(div(n, 2) + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78222,"user_id":null,"body":"defmodule Kata do\n  def fusc(n) do\n    cond do\n      n <= 1 -> n\n      rem(n, 2) == 0 -> fusc(div(n, 2))\n      true -> fusc(div(n, 2)) + fusc(div(n, 2) + 1)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78223,"user_id":null,"body":"defmodule Kata do\n  def fusc(0), do: 0\n  def fusc(1), do: 1\n  def fusc(n) when rem(n, 2) == 0, do: fusc(floor(n \/ 2))\n  def fusc(n), do: fusc(floor((n - 1) \/ 2)) + fusc(floor((n + 1) \/ 2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78224,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  def fusc(0) do \n    0\n  end\n  def fusc(1) do\n    1\n  end\n  def fusc(x) do\n    cond do\n      Integer.is_even(x) -> \n        fusc(div(x,2))\n      true ->\n        n = div(x-1,2)\n        fusc(n) + fusc(n+1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78225,"user_id":null,"body":"defmodule Kata do\n    def fusc(0), do: 0\n    def fusc(1), do: 1\n    def fusc(n) when rem(n, 2) == 0, do: fusc(div n, 2)\n    def fusc(n) when rem(n, 2) == 1, do: fusc(div n, 2) + fusc(div n + 1, 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78226,"user_id":null,"body":"\ndefmodule Kata do\n    def fusc(0), do: 0\n    def fusc(1), do: 1\n\n    def fusc(n) when rem(n, 2) === 0 do\n        trunc(n\/2) |> fusc()\n    end\n\n    def fusc(n) when rem(n, 2) === 1 do\n        a = trunc((n-1)\/2)\n        b = trunc((n-1)\/2)+1\n        fusc(a) + fusc(b)\n    end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78227,"user_id":null,"body":"defmodule Kata do\n\n  def fusc(0) do\n    0\n  end\n    \n  def fusc(1) do\n    1\n  end\n  \n  def fusc(n) do\n    if rem(n, 2) == 0 do\n      fusc(div(n,2))\n    else\n      fusc(div(n,2)) + fusc(n+1)\n    end\n  end\nend\n\n# test do_test(15,4)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78228,"user_id":null,"body":"defmodule Kata do\n    def fusc(0), do: 0 \n    def fusc(1), do: 1 \n    \n    def fusc(n) do\n        if rem(n,2) == 0 do\n          Kata.fusc(div(n,2))\n        else\n          Kata.fusc(div(n,2)+1) + Kata.fusc(div(n,2))\n        end\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78229,"user_id":null,"body":"defmodule Kata do\n    def fusc(0), do: 0\n    def fusc(1), do: 1\n    def fusc(n) when rem(n,2) == 0, do: fusc(div(n,2))\n    def fusc(n), do: fusc(div(n,2)) + fusc(div(n,2) + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5704aea738428f4d30000914":[{"id":78230,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    \n    [one, two, three]\n    |> Enum.map(&String.codepoints\/1)\n    |> List.zip\n    |> List.foldr([], fn(x, acc) -> Tuple.to_list(x) ++ acc end)\n    |> List.to_string\n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78231,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    [one, two, three]\n    |> Enum.map(&String.graphemes\/1)\n    |> List.zip()\n    |> Enum.reduce([], &group\/2)\n    |> Enum.reverse()\n    |> Enum.join()\n  end\n  \n  def group({a, b, c}, acc) do\n    [a <> b <> c | acc]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78232,"user_id":564,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(a, b, c) do\n    [a, b, c] = [a, b, c] |> Enum.map(&String.graphemes(&1))\n    mixify(a, b, c)\n  end\n  def mixify([], [], []), do: \"\"\n  def mixify([a|as], [b|bs], [c|cs]) do\n    \"#{a}#{b}#{c}#{mixify(as,bs,cs)}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78233,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    [one, two, three]\n    |> Enum.map(&String.graphemes\/1)\n    |> Enum.zip()\n    |> Enum.map(&Tuple.to_list\/1)\n    |> IO.iodata_to_binary()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78234,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    do_triple_trouble(String.graphemes(one), String.graphemes(two), String.graphemes(three))\n  end\n  \n  defp do_triple_trouble([], [], []), do: \"\"\n  \n  defp do_triple_trouble([head1 | tail1], [head2 | tail2], [head3 | tail3]) do\n    head1 <> head2 <> head3 <> do_triple_trouble(tail1, tail2, tail3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78235,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(a, b, c) do\n    concat_list(String.graphemes(a), String.graphemes(b), String.graphemes(c))\n  end\n  \n  defp concat_list([], [], []), do: []\n  defp concat_list([l1], [l2], [l3]), do: l1 <> l2 <> l3\n  defp concat_list([l1 | tail1], [l2 | tail2], [l3 | tail3]), do: l1 <> l2 <> l3 <> concat_list(tail1, tail2, tail3)\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78236,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    Stream.zip(String.graphemes(one), String.graphemes(two))\n    |> Stream.map(fn x -> elem(x, 0) <> elem(x, 1) end)\n    |> Stream.zip(String.graphemes(three))\n    |> Stream.map(fn x -> elem(x, 0) <> elem(x, 1) end)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78237,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    concat_codepoints(\n      String.codepoints(one),\n      String.codepoints(two),\n      String.codepoints(three)\n    )\n  end\n  \n  defp concat_codepoints([h1 | t1], [h2 | t2], [h3 | t3]) do\n    h1 <> h2 <> h3 <> concat_codepoints(t1, t2, t3)\n  end\n  defp concat_codepoints([], [], []), do: \"\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78238,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  @spec triple_trouble(String.t, String.t, String.t) :: String.t\n  def triple_trouble(one, two, three) do\n    triple_trouble(one, two, three, \"\")\n  end\n  \n  def triple_trouble(\"\", \"\", \"\", acc), do: acc\n  \n  def triple_trouble(\n      <<hd_1::binary-size(1), rest_1::binary>>,\n      <<hd_2::binary-size(1), rest_2::binary>>,\n      <<hd_3::binary-size(1), rest_3::binary>>,\n      acc\n    ) do\n    \n    acc = Enum.join([acc, hd_1, hd_2, hd_3])\n    \n    triple_trouble(rest_1, rest_2, rest_3, acc)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78239,"user_id":null,"body":"defmodule Codewars.WeirdString do\n  def triple_trouble(one, two, three) do\n    [one, two, three]\n    |> Enum.map(&to_charlist\/1)\n    |> Enum.zip\n    |> Enum.flat_map(&Tuple.to_list\/1)\n    |> List.to_string\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5709bdd2f088096786000008":[{"id":78240,"user_id":527,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n |> Integer.digits |> Enum.sort(&(&1 >= &2)) |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78241,"user_id":564,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n |> Integer.digits |> Enum.sort(&(&1 > &2)) |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78242,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n\n    |> to_string\n    |> String.to_charlist\n    |> Enum.sort(:desc)\n    |> to_string\n    |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78243,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n |> to_charlist() |> Enum.sort(:desc) |> List.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78244,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) when n < 10, do: n\n\n  def super_size(n) do\n    Integer.digits(n)\n    |> Enum.sort(:desc)\n    |> Enum.join()\n    |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78245,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    Integer.digits(n)\n    |> Enum.sort(&(&1 >= &2))\n    |> Integer.undigits()\n  end\nend\n\n# test assert super_size(978) == 987","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78246,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n\n    |> Integer.digits()\n    |> Enum.sort(:desc)\n    |> Integer.undigits()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78247,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n), do: Integer.digits(n) |> Enum.sort |> Enum.reverse |> Enum.join |> String.to_integer\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78248,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    Integer.to_string(n)\n    |> String.split(\"\")\n    |> Enum.sort(:desc)\n    |> Enum.join(\"\")\n    |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78249,"user_id":null,"body":"defmodule Codewars.Maximizator do\n  def super_size(n) do\n    n\n    |> Integer.to_string\n    |> String.graphemes\n    |> Enum.sort(&(&1 > &2))\n    |> Enum.join\n    |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"570a6a46455d08ff8d001002":[{"id":78250,"user_id":527,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(0), do: 0\n  def no_boring_zeros(n) when rem(n, 10) == 0, do: no_boring_zeros(div(n, 10))\n  def no_boring_zeros(n), do: n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78251,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(0), do: 0\n  def no_boring_zeros(n) do\n    n\n    |> Integer.to_string\n    |> String.trim_trailing(\"0\")\n    |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78252,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(n) do\n    if rem(n, 10) == 0 and n != 0 do\n      no_boring_zeros(div(n, 10))\n    else\n      n\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78253,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(0), do: 0\n  def no_boring_zeros(n) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n    |> Enum.drop_while(& &1==0)\n    |> Enum.reverse\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78254,"user_id":53,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(n) do\n    String.to_integer(Regex.replace(~r\/(?!^)[0]+$\/, Integer.to_string(n), \"\"))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78255,"user_id":564,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(0), do: 0\n  def no_boring_zeros(n) when n |> rem(10) == 0, do: n |> div(10) |> no_boring_zeros\n  def no_boring_zeros(n), do: n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78256,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(n) do\n    n\n    |> Integer.digits\n    |> Enum.reverse\n    |> Integer.undigits\n    |> Integer.digits\n    |> Enum.reverse\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78257,"user_id":564,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(n), do: n |> rev_digits |> rev_digits\n  def rev_digits(n), do: n |> Integer.digits |> Enum.reverse |> Integer.undigits\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78258,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  \n  def no_boring_zeros(n) when n == 0, do: 0\n  def no_boring_zeros(n) do\n    cond do\n      rem(n, 10) == 0 -> no_boring_zeros(div(n, 10))\n      true -> n\n    end\n    #if (rem(n, 10) == 0), do: no_boring_zeros(n % 10), else: n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78259,"user_id":null,"body":"defmodule Codewars.Heronizer do\n  def no_boring_zeros(n) do\n    drop_while_zero = fn k -> Enum.drop_while(k, fn z -> z == \"0\" end) end\n    add_zero_if_empty = fn k -> if [] == k, do: [\"0\"], else: k end\n    res = to_string(n)\n    |> String.codepoints\n    |> Enum.reverse\n    |> drop_while_zero.()\n    |> add_zero_if_empty.()\n    |> Enum.reverse\n    |> Enum.join\n    |> Integer.parse\n    \n    elem(res, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57158fb92ad763bb180004e7":[{"id":78260,"user_id":null,"body":"defmodule Garden do\n\tdef rain_amount(mm) when mm < 40 do    \n     \"You need to give your plant #{40-mm}mm of water\"    \n  end\n  \n  def rain_amount(mm) when mm >= 40 do\n    \"Your plant has had more than enough water for today!\"\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78261,"user_id":null,"body":"defmodule Garden do\n  @needed_water_amount 40\n  \n\tdef rain_amount(mm) do\n    water_status(mm, @needed_water_amount)\n  end\n\n  def water_status(mm, needed_amount) when mm >=needed_amount do\n    \"Your plant has had more than enough water for today!\"\n  end\n\n  def water_status(mm, needed_amount) do\n    \"You need to give your plant #{needed_amount-mm}mm of water\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78262,"user_id":null,"body":"defmodule Garden do\n  def rain_amount(mm) when mm >= 40, do: \"Your plant has had more than enough water for today!\"\n\tdef rain_amount(mm), do: \"You need to give your plant #{40 - mm}mm of water\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78263,"user_id":null,"body":"defmodule Garden do\n\tdef rain_amount(mm) do\n    if mm < 40 do\n     \"You need to give your plant #{40 - mm}mm of water\"\n    else\n     \"Your plant has had more than enough water for today!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78264,"user_id":null,"body":"defmodule Garden do\n  @requiredAmount 40\n\n\tdef rain_amount(mm) when mm >= @requiredAmount, do: \"Your plant has had more than enough water for today!\"\n  def rain_amount(mm), do: \"You need to give your plant #{@requiredAmount - mm}mm of water\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78265,"user_id":null,"body":"defmodule Garden do\n  def rain_amount(mm) when mm >= 40, do: \"Your plant has had more than enough water for today!\"\n  def rain_amount(mm) when mm < 40, do: \"You need to give your plant #{40 - mm}mm of water\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78266,"user_id":null,"body":"defmodule Garden do\n\tdef rain_amount(mm) when mm < 40 do \n    \"You need to give your plant #{40 - mm}mm of water\"\n  end\n  \n  def rain_amount(_), do: \"Your plant has had more than enough water for today!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78267,"user_id":1566,"body":"defmodule Garden do\n\tdef rain_amount(mm) do\n    mm < 40 && \"You need to give your plant #{40-mm}mm of water\" || \"Your plant has had more than enough water for today!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78268,"user_id":null,"body":"defmodule Garden do\n\tdef rain_amount(mm) do\n    40 - mm\n    |> case do\n        x when x > 0 -> \"You need to give your plant #{x}mm of water\"\n        _            -> \"Your plant has had more than enough water for today!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78269,"user_id":null,"body":"defmodule Garden do\n\tdef rain_amount(mm) do\n    if lessthan(mm,40) do\n     \"You need to give your plant #{40-mm}mm of water\"\n    else\n     \"Your plant has had more than enough water for today!\"\n    end\n  end\n  \n  def lessthan(mm, max) do\n    mm < max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5715eaedb436cf5606000381":[{"id":78270,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(list) do\n    list\n    |> Stream.filter(&(&1 > 0))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78271,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(list) do\n    list\n    |> Enum.filter(&(&1 > 0))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78272,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(num_list) do\n    Enum.reduce(num_list, 0, fn\n      x, acc when x > 0 -> acc + x\n      x, acc when x <= 0 -> acc\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78273,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(arr) do\n     arr\n     |> Enum.filter(fn(x) -> x >= 0 end)\n     |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78274,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(number_list, acc \\\\ 0)\n  def positive_sum([], acc), do: acc\n  def positive_sum([hd | tl], acc) when hd > 0, do: positive_sum(tl, acc + hd)\n  def positive_sum([hd | tl], acc) when hd <= 0, do: positive_sum(tl, acc)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78275,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(arr) do\n    for n <- arr, n > 0, reduce: 0 do sum -> sum + n end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78276,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(arr) do\n    Enum.sum(for x <- arr, x > 0, do: x)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78277,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(arr) do\n    arr\n      |> Enum.filter(fn (v) -> abs(v) == v end)\n      |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78278,"user_id":null,"body":"defmodule Solution do\n  def positive_sum(arr) do\n    arr \n    |> Enum.filter(&(&1 > 0))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78279,"user_id":1640,"body":"defmodule Solution do\n  def positive_sum(arr) do\n    Enum.filter(arr, fn(x) -> x >= 0 end)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5726f813c8dcebf5ed000a6b":[{"id":78280,"user_id":492,"body":"defmodule Kpremiers do\n\n    def prime_factors(n), do: length(prime_factors(n, 2, []))\n    defp prime_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n    defp prime_factors(n, k, acc) when rem(n, k) == 0, do: prime_factors(div(n, k), k, [k | acc])\n    defp prime_factors(n, k, acc), do: prime_factors(n, k+1, acc)\n\n    def count_Kprimes(k, start, nd) do\n        for x <- start..nd, (prime_factors(x) == k), do: x\n    end\n\n    def is_prime(2), do: true\n    def is_prime(n) when n < 2 or rem(n, 2)==0, do: false\n    def is_prime(n), do: is_prime(n, 3)\n    defp is_prime(n, k) when n < k * k, do: true\n    defp is_prime(n, k) when rem(n, k)==0, do: false\n    defp is_prime(n, k), do: is_prime(n, k+2)\n\n    def puzzle(s) do\n        u = for y <- count_Kprimes(3, 8, s-130), z <- count_Kprimes(7, 128, s-10), do: y+z\n        v = for x <-u, a = s - x, is_prime(a), do: 1\n        v |> Enum.sum\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78281,"user_id":null,"body":"defmodule Kpremiers do\n\n  def count_Kprimes(k, start, nd) do\n    for n <- start..nd, is_Kprime(n, k), do: n\n  end\n\n  def puzzle(s) do\n    for a <- 2..s,\n        is_Kprime(a, 7),\n        b <- 2..s-a,\n        is_Kprime(b, 1),\n        is_Kprime(s-a-b, 3) do\n      1\n    end \n      |> length\n  end\n\n  def is_Kprime(n, k), do: is_Kprime(n, 2, k)\n  defp is_Kprime(1, _i, 0),                  do: true\n  defp is_Kprime(n, i, k) when n < i*i,      do: k==1\n  defp is_Kprime(n, i, k) when rem(n, i)==0, do: is_Kprime(div(n, i), i, k-1)\n  defp is_Kprime(n, i, k),                   do: is_Kprime(n, i+1, k)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78282,"user_id":492,"body":"defmodule Kpremiers do\n\n    def prime_factors(n), do: length(prime_factors(n, 2, []))\n    defp prime_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n    defp prime_factors(n, k, acc) when rem(n, k) == 0, do: prime_factors(div(n, k), k, [k | acc])\n    defp prime_factors(n, k, acc), do: prime_factors(n, k+1, acc)\n\n    def count_Kprimes(k, start, nd) do\n        for x <- start..nd, (prime_factors(x) == k), do: x\n    end\n\n    def is_prime(2), do: true\n    def is_prime(n) when n < 2 or rem(n, 2)==0, do: false\n    def is_prime(n), do: is_prime(n, 3)\n    defp is_prime(n, k) when n < k * k, do: true\n    defp is_prime(n, k) when rem(n, k)==0, do: false\n    defp is_prime(n, k), do: is_prime(n, k+2)\n\n    def puzzle(s) do\n        u = for y <- count_Kprimes(3, 8, s-130), z <- count_Kprimes(7, 128, s-10), do: y+z\n        v = for x <-u, a = s - x, is_prime(a), do: 1\n        v |> Enum.sum\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78283,"user_id":53,"body":"defmodule Kpremiers do\n\n    def count_Kprimes(k, start, nd), do: count_Kprimes_walk(k, start, nd, [])\n    defp count_Kprimes_walk(k, n, nd, acc) do\n      cond do\n        n > nd -> Enum.reverse(acc)\n        true -> j = pfc(n)\n                acc2 = if j == k, do: [n | acc], else: acc\n                count_Kprimes_walk(k, n + 1, nd, acc2)\n      end\n    end\n\n    def puzzle(s) do\n      xs = count_Kprimes(7, 128, s - 2)\n      ys = count_Kprimes(3, 4, s - 2)\n      puzzle_walk(s, xs, ys, 0, 0, 0)\n    end\n    defp puzzle_walk(s, xs, ys, i, j, m) do\n      cond do\n        i >= length(xs) -> m\n        j >= length(ys) -> puzzle_walk(s, xs, ys, i + 1, 0, m)\n        true -> a = Enum.at(xs, i)\n                b = Enum.at(ys, j)\n                c = s - a - b\n                m2 = if c > 0 && pfc(c) == 1, do: m + 1, else: m\n                puzzle_walk(s, xs, ys, i, j + 1, m2)\n      end\n    end\n    \n    def pfc(n), do: pfc_walk(n, 2, 0, 0)\n    defp pfc_walk(n, i, acc, l) do\n      cond do \n        l == 0 && i > div(n, i) -> if n > 1, do: acc + 1, else: acc\n        rem(n, i) > 0 -> pfc_walk(n, i + 1, acc, 0)\n        true -> pfc_walk(div(n, i), i, acc + 1, 1)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78284,"user_id":null,"body":"defmodule Kpremiers do\n  def count_Kprimes(k, start, nd), do: Enum.filter(start..nd, fn i -> primek(i) == k end)\n\n  def puzzle(s) do\n    Enum.count(for(i <- count_Kprimes(7, 1, s), j <- count_Kprimes(3, 1, s), do: i + j), fn v ->\n      primek(s - v) == 1\n    end)\n  end\n\n  defp primek(n), do: prime_division(n) |> Enum.map(fn {_, c} -> c end) |> Enum.sum()\n\n  defp count_facts(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(div(n, p), p)\n    {n2, count + 1}\n  end\n\n  defp count_facts(n, _), do: {n, 0}\n\n  defp prime_division(n, p \\\\ 2)\n\n  defp prime_division(n, p) when p * p > n do\n    if n > 1, do: [{n, 1}], else: []\n  end\n\n  defp prime_division(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(n, p)\n    [{p, count} | prime_division(n2, p + 1)]\n  end\n\n  defp prime_division(n, p), do: prime_division(n, p + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78285,"user_id":null,"body":"defmodule Sieve do \n   def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n    temp_result = is_prime(tail)\n    if prime_test(head, temp_result)  do\n\t    [head | temp_result]\n    else\n\t   temp_result\n\t end\n\t \n  end\n\n  defp prime_test(_value, []), do: true\n  defp prime_test(value, [head|tail]) do \n    if(rem(value, head) != 0) do \n      prime_test(value, tail)\n    else\n      false\n    end\n  end\nend\n\ndefmodule Kpremiers do\n\n  @list_of_primes Sieve.sieve(trunc(100000\/2) + 1) |> Enum.reverse\n\n  def count_Kprimes(k, start, nd) do\n    # your code\n   \n\n    \n    start..nd\n    |> Enum.map(&is_kprime?(&1, k, @list_of_primes))\n    |> Enum.map(fn {val, truthiness} ->\n      case truthiness do\n        true -> val\n        false -> []\n      end\n    end)\n    |> Enum.reject(fn x -> x == [] end)\n\n  end\n\n  def puzzle(s) do\n      primes1 = count_Kprimes(1, 1, s)\n      primes3 = count_Kprimes(3, 1, s)\n      primes7 = count_Kprimes(7, 1, s)\n      \n      puzzle_help1(s, primes1, primes3, primes7)\n  end\n  \n  def puzzle_help1(_s, [], _primes3, _primes7), do: 0\n  def puzzle_help1(s, [head1|tail1], primes3, primes7) do\n    puzzle_help2(s, head1, primes3, primes7) + puzzle_help1(s, tail1, primes3, primes7)\n  end\n  \n  def puzzle_help2(_s, _head1, [], _primes7), do: 0\n  def puzzle_help2(s, head1, [head3|tail3], primes7) do\n    puzzle_help3(s, head1, head3, primes7) + puzzle_help2(s, head1, tail3, primes7)\n  end\n  \n  def puzzle_help3(_s, _head1, _head3, []), do: 0\n  def puzzle_help3(s, head1, head3, [head7|tail7]) do\n    if head1 + head3 + head7  == s do\n      1 + puzzle_help3(s, head1, head3, tail7)\n    else\n      puzzle_help3(s, head1, head3, tail7)\n    end\n  end\n\n    \n  def is_kprime?(value, k, list_of_primes) do \n    count =  kprime_count(list_of_primes, value)\n    \n    if count == 1 do\n      if 1 == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    else\n      if count == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    end\n  end\n    \n  def kprime_count([], _value), do: 0\n  def kprime_count([_head | _tail], value) when value == 0, do: 0\n  def kprime_count([_head | _tail], value) when value == 1, do: 0\n  def kprime_count([head | tail], value) do\n    if(rem(value, head) == 0) do\n      1 + kprime_count([head | tail], div(value, head))\n    else\n      kprime_count(tail, value)\n    end\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78286,"user_id":null,"body":"defmodule Sieve do \n   def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n    temp_result = is_prime(tail)\n    if prime_test(head, temp_result)  do\n\t    [head | temp_result]\n    else\n\t   temp_result\n\t end\n\t \n  end\n\n  defp prime_test(_value, []), do: true\n  defp prime_test(value, [head|tail]) do \n    if(rem(value, head) != 0) do \n      prime_test(value, tail)\n    else\n      false\n    end\n  end\nend\n\ndefmodule Kpremiers do\n\n  @list_of_primes Sieve.sieve(trunc(100000\/2) + 1) |> Enum.reverse\n\n  def count_Kprimes(k, start, nd) do\n    # your code\n   \n\n    \n    start..nd\n    |> Enum.map(&is_kprime?(&1, k, @list_of_primes))\n    |> Enum.map(fn {val, truthiness} ->\n      case truthiness do\n        true -> val\n        false -> []\n      end\n    end)\n    |> Enum.reject(fn x -> x == [] end)\n\n  end\n\n  def puzzle(s) do\n      primes1 = count_Kprimes(1, 1, s)\n      primes3 = count_Kprimes(3, 1, s)\n      primes7 = count_Kprimes(7, 1, s)\n      \n      puzzle_help1(s, primes1, primes3, primes7)\n  end\n  \n  def puzzle_help1(_s, [], _primes3, _primes7), do: 0\n  def puzzle_help1(s, [head1|tail1], primes3, primes7) do\n    puzzle_help2(s, head1, primes3, primes7) + puzzle_help1(s, tail1, primes3, primes7)\n  end\n  \n  def puzzle_help2(_s, _head1, [], _primes7), do: 0\n  def puzzle_help2(s, head1, [head3|tail3], primes7) do\n    puzzle_help3(s, head1, head3, primes7) + puzzle_help2(s, head1, tail3, primes7)\n  end\n  \n  def puzzle_help3(_s, _head1, _head3, []), do: 0\n  def puzzle_help3(s, head1, head3, [head7|tail7]) do\n    if head1 + head3 + head7  == s do\n      1 + puzzle_help3(s, head1, head3, tail7)\n    else\n      puzzle_help3(s, head1, head3, tail7)\n    end\n  end\n\n    \n  def is_kprime?(value, k, list_of_primes) do \n    count =  kprime_count(list_of_primes, value)\n    \n    if count == 1 do\n      if 1 == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    else\n      if count == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    end\n  end\n    \n  def kprime_count([], _value), do: 0\n  def kprime_count([_head | _tail], value) when value == 0, do: 0\n  def kprime_count([_head | _tail], value) when value == 1, do: 0\n  def kprime_count([head | tail], value) do\n    if(rem(value, head) == 0) do\n      1 + kprime_count([head | tail], div(value, head))\n    else\n      kprime_count(tail, value)\n    end\n  end\n\n  def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n    temp_result = is_prime(tail)\n    if prime_test(head, temp_result)  do\n\t    [head | temp_result]\n    else\n\t   temp_result\n\t end\n\t \n  end\n\n  defp prime_test(_value, []), do: true\n  defp prime_test(value, [head|tail]) do \n    if(rem(value, head) != 0) do \n      prime_test(value, tail)\n    else\n      false\n    end\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78287,"user_id":null,"body":"defmodule Kpremiers do\n  @spec count_Kprimes(number, number, number) :: [number]\n  def count_Kprimes(k, a, b) do\n    a..b\n    |> Enum.reduce([], fn n, acc ->\n      if find_k(n) == k do\n        [n | acc]\n      else\n        acc\n      end\n    end)\n    |> Enum.reverse()\n  end\n\n  defp find_k(n, i \\\\ 2, c \\\\ 0)\n\n  defp find_k(n, i, c) when i * i <= n do\n    {m, cc} = do_find_k(n, i, c)\n    find_k(m, i + 1, cc)\n  end\n\n  defp find_k(n, _i, c) when n > 1, do: c + 1\n  defp find_k(_n, _i, c), do: c\n\n  defp do_find_k(n, i, c) when rem(n, i) == 0, do: do_find_k(div(n, i), i, c + 1)\n  defp do_find_k(n, _i, c), do: {n, c}\n\n  @spec puzzle(integer) :: integer\n  def puzzle(s) do\n    k1 = count_Kprimes(1, 2, s)\n    k3 = count_Kprimes(3, 2, s)\n    k7 = count_Kprimes(7, 2, s)\n\n    for a <- k1, b <- k3, c <- k7, a + b + c == s do\n      [a, b, c]\n    end\n    |> length()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78288,"user_id":null,"body":"defmodule Kpremiers do\n  def count_Kprimes(k, start, nd) do\n    Range.new(start, nd)\n    |> Stream.map(fn x -> decomposition(x) end)\n    |> Stream.filter(fn x -> length(x) == k end)\n    |> Enum.map(fn x -> Enum.reduce(x, fn x, y -> x * y end) end)\n  end\n\n  def puzzle(s) do\n    permutations =\n      for x <- count_Kprimes(1, 2, s),\n          y <- count_Kprimes(3, 2, s),\n          z <- count_Kprimes(7, 2, s),\n          do: {x, y, z}\n\n    permutations\n    |> Enum.filter(fn {x, y, z} -> x + y + z == s end)\n    |> length\n\n  end\n\n  def decomposition(n), do: decomposition(n, 2, [])\n  defp decomposition(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n  defp decomposition(n, k, acc) when rem(n, k) == 0, do: decomposition(div(n, k), k, [k | acc])\n  defp decomposition(n, k, acc), do: decomposition(n, k + 1, acc)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78289,"user_id":null,"body":"defmodule Kpremiers do\n\n  def count_Kprimes(k, start, nd) do\n    start..nd\n    |> Enum.filter(fn x -> kprime(x) == k end)\n  end\n\n  def puzzle(s) do\n    kprimes_1 = count_Kprimes(1, 0, s)\n    kprimes_3 = count_Kprimes(3, 0, s)\n    kprimes_7 = count_Kprimes(7, 0, s)\n    comb(kprimes_1, kprimes_3, kprimes_7)\n    |> Enum.filter(&(Enum.sum(&1) == s))\n    |> length()\n  end\n\n  def kprime(n, d \\\\ 2, acc \\\\ [])\n  def kprime(0, _, _), do: 0\n  def kprime(1, _, acc), do: length(acc)\n  def kprime(n, d, acc) do\n    case rem(n, d) do\n      0 -> kprime(div(n, d), d, [d | acc])\n      _ -> kprime(n, d + 1, acc)\n    end\n  end\n  \n  def comb([hd | tl], arr2, arr3), do: (for x <- comb(arr2, arr3), do: [hd | x]) ++ comb(tl, arr2, arr3)\n  def comb([], _, _), do: []\n  def comb([hd | tl], arr), do: (for x <- comb(arr), do: [hd | x]) ++ comb(tl, arr)\n  def comb([], _), do: []\n  def comb([hd | tl]), do: [[hd]] ++ comb(tl)\n  def comb([]), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5727bb0fe81185ae62000ae3":[{"id":78290,"user_id":527,"body":"defmodule Kata do\n  def clean_string(s) do\n    s\n    |> String.codepoints\n    |> Enum.reduce([], fn\n      \"#\", [] -> []\n      \"#\", [_ | st] -> st\n      c, st -> [c | st]\n    end)\n    |> Enum.reverse\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78291,"user_id":527,"body":"defmodule Kata do\n  def clean_string(s) do\n    String.replace(s, ~r\/[^#](?R)*#|\\G#\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78292,"user_id":53,"body":"defmodule Kata do\n  def clean_string(s), do: aux([], s |> String.codepoints)\n  defp aux(ls, []), do: ls |> Enum.reverse |> Enum.join(\"\")\n  defp aux([], [\"#\" | xs]), do: aux([], xs)\n  defp aux([c | ls], [\"#\" | xs]), do: aux(ls, xs)\n  defp aux(ls, [c | xs]), do: aux([c | ls], xs)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78293,"user_id":null,"body":"defmodule Kata do\n    def clean_string(s) do\n    # your code here\n    do_clean_string(\"\", s)\n  end\n\n  defp do_clean_string(cleaned_string, \"\") do\n    cleaned_string\n  end\n\n  defp do_clean_string(cleaned_string, remaining_string) do\n    cleaned_string =\n      if(String.first(remaining_string) == \"#\") do\n        cleaned_string\n        |> String.slice(0..-2)\n      else\n        cleaned_string <> String.first(remaining_string)\n      end\n\n    remaining_string = String.slice(remaining_string, 1..-1)\n    do_clean_string(cleaned_string, remaining_string)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78294,"user_id":null,"body":"defmodule Kata do\n    def clean_string(s) do\n      s\n      |> String.graphemes()\n      |> Enum.reduce([], fn x, acc ->\n        if x === \"#\" do\n          if Enum.empty?(acc) do\n            acc\n          else\n            acc\n            |> Enum.reverse()\n            |> tl()\n            |> Enum.reverse()\n          end\n        else\n          acc ++ [x]\n        end\n      end)\n      |> Enum.join(\"\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78295,"user_id":null,"body":"defmodule Kata do\n  def clean_string(input, result \\\\ [])\n\n  def clean_string(\"\", result), \n    do: result |> Enum.reverse() |> Enum.join()\n\n  def clean_string(<<\"#\"::binary, rest::binary>>, [ ]) do\n    clean_string(rest, [])\n  end\n\n  def clean_string(<<\"#\"::binary, rest::binary>>, [ _ | result ]) do\n    clean_string(rest, result)\n  end\n\n  def clean_string(<<head::binary-size(1), rest::binary>>, result) do\n    clean_string(rest, [ head | result ])\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78296,"user_id":null,"body":"defmodule Kata do\n    def clean_string(s) do\n        cond do\n            :nomatch == :binary.match(s, \"#\") -> s\n            String.first(s) == \"#\" -> clean_string(String.replace(s, ~r\/^#\/, \"\"))\n            true -> clean_string(String.replace(s, ~r\/[^#]#\/, \"\"))\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78297,"user_id":null,"body":"defmodule Kata do\n    def clean_string(s) do\n        s\n        |> String.to_charlist\n        |> Enum.reduce([], fn\n          ?#, [_h|t] -> t\n          ?#, [] -> []\n          x, acc -> [x|acc]\n        end)\n        |> Enum.reverse\n        |> List.to_string\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78298,"user_id":null,"body":"defmodule Kata do\n    def clean_string(string), do: aux(String.graphemes(string), []) |> Enum.reverse |> Enum.join\n    def aux([], acc), do: acc\n    def aux([\"#\" | rest], [_ | acc]), do: aux(rest, acc)\n    def aux([\"#\" | rest], []), do: aux(rest, [])\n    def aux([c | rest], acc), do: aux(rest, [c | acc])\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78299,"user_id":null,"body":"defmodule Kata do\n  def clean_string(string) do\n    do_clean(string)\n  end\n  \n  defp do_clean(string) do\n    cleaned = String.replace(string, ~r\/[^#]#\/, \"\")\n    \n    if cleaned == string do\n      String.replace(cleaned, \"#\", \"\")\n    else\n      do_clean(cleaned)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"573182c405d14db0da00064e":[{"id":78300,"user_id":null,"body":"defmodule Kconsec do\n\n  def consec_Kprimes(k, arr) do\n    arr\n    |> Enum.map(fn n -> Enum.count(factors(n, 2, [])) end)\n    |> Enum.chunk_every(2, 1)\n    |> Enum.count(fn [^k, ^k] -> true; _ -> false end)\n  end\n\n  def factors(number, n, acc) do\n    cond do\n      n * n > number -> [number | acc]\n      rem(number, n) == 0 -> factors(div(number, n), 2, [n | acc])\n      :otherwise -> factors(number, n + 1, acc)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78301,"user_id":null,"body":"defmodule Kconsec do\n\n  def consec_Kprimes(k, list) do\n    Enum.map(list, &(length(factorize(&1)) == k))\n      |> Enum.chunk(2, 1) \n      |> Enum.reduce(0, fn([a, b], acc) -> if a and b, do: acc + 1, else: acc end)\n  end\n\n  def factorize(x), do: factorize(x, 2, [])\n  defp factorize(x, i, factors) when x < i,        do: factors\n  defp factorize(x, i, factors) when rem(x, i)==0, do: factorize(div(x, i), i, [i | factors])\n  defp factorize(x, i, factors),                   do: factorize(x, i+1, factors)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78302,"user_id":492,"body":"defmodule Kconsec do\n\n    def prime_factors(n), do: length(prime_factors(n, 2, []))\n    defp prime_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n    defp prime_factors(n, k, acc) when rem(n, k) == 0, do: prime_factors(div(n, k), k, [k | acc])\n    defp prime_factors(n, k, acc), do: prime_factors(n, k+1, acc)\n    def consec_two(k, a) do\n        if (prime_factors(Enum.at(a, 0)) == k) && (prime_factors(Enum.at(a, 1)) == k) do 1 else 0 end\n    end\n    def consec_Kprimes(k, arr) do\n        arr\n        |> Enum.chunk(2, 1)\n        |> Enum.map(fn(x) -> consec_two(k, x) end)\n        |> Enum.sum\n    end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78303,"user_id":null,"body":"defmodule Kconsec do\n  def consec_Kprimes(k, arr) do\n    Enum.map(arr, fn n -> prime_division(n) |> Enum.map(fn {_, c} -> c end) |> Enum.sum() end)\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.count(fn [a, b] -> [a, b] == [k, k] end)\n  end\n\n  defp count_facts(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(div(n, p), p)\n    {n2, count + 1}\n  end\n\n  defp count_facts(n, _), do: {n, 0}\n\n  defp prime_division(n, p \\\\ 2)\n\n  defp prime_division(n, p) when p * p > n do\n    if n > 1, do: [{n, 1}], else: []\n  end\n\n  defp prime_division(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(n, p)\n    [{p, count} | prime_division(n2, p + 1)]\n  end\n\n  defp prime_division(n, p), do: prime_division(n, p + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78304,"user_id":null,"body":"defmodule Sieve do \n   def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n    temp_result = is_prime(tail)\n    if prime_test(head, temp_result)  do\n\t    [head | temp_result]\n    else\n\t   temp_result\n\t end\n\t \n  end\n\n  defp prime_test(_value, []), do: true\n  defp prime_test(value, [head|tail]) do \n    if(rem(value, head) != 0) do \n      prime_test(value, tail)\n    else\n      false\n    end\n  end\nend\n\ndefmodule Kconsec do\n  \n  @list_of_primes Sieve.sieve(trunc(100000\/2) + 1) |> Enum.reverse\n\n  def consec_Kprimes(k, arr) do\n    # your code\n    max_value = Enum.max(arr)\n\n    arr \n    |> Enum.map(&is_kprime?(&1, k, @list_of_primes))\n    |> two_in_row_count(false)\n\n  end\n  \n  def two_in_row_count([], _prev), do: 0\n  def two_in_row_count([head | tail], prev) do\n    {_value, truthiness} = head\n    if(truthiness and prev) do \n      two_in_row_count(tail, truthiness) + 1\n    else\n      two_in_row_count(tail, truthiness)\n    end\n  end\n  \n  def is_kprime?(value, k, list_of_primes) do \n    count = kprime_count(list_of_primes, value)\n    \n    if count == 1 do\n      if 1 == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    else\n      if count == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    end\n  end\n  \n  def kprime_count([], _value), do: 0\n  def kprime_count([_head | _tail], value) when value == 0, do: 0\n  def kprime_count([_head | _tail], value) when value == 1, do: 0\n  def kprime_count([head | tail], value) do\n    if(rem(value, head) == 0) do\n      1 + kprime_count([head | tail], div(value, head))\n    else\n      kprime_count(tail, value)\n    end\n  end\n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78305,"user_id":null,"body":"defmodule Sieve do \n   def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n    temp_result = is_prime(tail)\n    if prime_test(head, temp_result)  do\n\t    [head | temp_result]\n    else\n\t   temp_result\n\t end\n\t \n  end\n\n  defp prime_test(_value, []), do: true\n  defp prime_test(value, [head|tail]) do \n    if(rem(value, head) != 0) do \n      prime_test(value, tail)\n    else\n      false\n    end\n  end\nend\n\ndefmodule Kconsec do\n  \n  @list_of_primes Sieve.sieve(trunc(100000\/2) + 1) |> Enum.reverse\n\n  def consec_Kprimes(k, arr) do\n    # your code\n    max_value = Enum.max(arr)\n\n    arr \n    |> Enum.map(&is_kprime?(&1, k, @list_of_primes))\n    |> two_in_row_count(false)\n\n  end\n  \n  def two_in_row_count([], _prev), do: 0\n  def two_in_row_count([head | tail], prev) do\n    {_value, truthiness} = head\n    if(truthiness and prev) do \n      two_in_row_count(tail, truthiness) + 1\n    else\n      two_in_row_count(tail, truthiness)\n    end\n  end\n  \n  def is_kprime?(value, k, list_of_primes) do \n    count = kprime_count(list_of_primes, value)\n    \n    if count == 1 do\n      if 1 == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    else\n      if count == k do \n        {value, true}\n      else \n        {value, false}\n      end\n    end\n  end\n  \n  def kprime_count([], _value), do: 0\n  def kprime_count([_head | _tail], value) when value == 0, do: 0\n  def kprime_count([_head | _tail], value) when value == 1, do: 0\n  def kprime_count([head | tail], value) do\n    if(rem(value, head) == 0) do\n      1 + kprime_count([head | tail], div(value, head))\n    else\n      kprime_count(tail, value)\n    end\n  end\n\n  def sieve(val) when val >= 3 do\n    require Integer\n\t  is_prime((val..3 |> Enum.filter(&Integer.is_odd\/1)))\n  end\n  \n  defp is_prime([]), do: [2]\n  defp is_prime [head|tail] do\n     temp_result = is_prime(tail)\n     head_sqrt = ceil(:math.sqrt(head))\n     if([] == (for x <- [head], y <- Enum.filter(temp_result, &(&1 <= head_sqrt)), rem(x, y) == 0, do: x )) do\n\t     [head | temp_result]\n\t else\n\t   temp_result\n\t end\n\t \n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78306,"user_id":null,"body":"defmodule Kconsec do\n  def consec_Kprimes(k, arr) do\n    fs = Enum.map(arr, &num_factors\/1)\n    Enum.zip(fs, tl fs) |> Enum.count(&(&1 == {k, k}))\n  end\n  \n  def num_factors(n) do\n    factors(n) |> length\n  end\n  \n  def factors(n) do\n    m = round(:math.sqrt(n))\n    p = 2..m |> Enum.filter(&(rem(n,&1) == 0)) |> List.first\n    if p == nil, do: [p], else: [p | factors(div(n, p))]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78307,"user_id":53,"body":"defmodule Kconsec do\n  def consec_Kprimes(k, [x]), do: 0\n  def consec_Kprimes(k, arr) do\n    xs = arr |> Enum.map(&(if npf(&1) == k do 1 else 0 end))\n    (0..(length(xs)-2)) \n      |> Enum.to_list\n      |> Enum.filter(&(xs |> Enum.at(&1) == 1 && xs |> Enum.at(&1 + 1) == 1))\n      |> length\n  end\n  defp npf(n), do: npf2(2, 0, n)\n  defp npf2(i, m, n) when n <= 1, do: m\n  defp npf2(i, m, n) when rem(n, i) == 0, do: npf2(2, m+1, div(n, i))\n  defp npf2(i, m, n), do: npf2(i+1, m, n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78308,"user_id":null,"body":"defmodule Kconsec do\n\n  def consec_Kprimes(k, list) do\n    Enum.map(list, &(length(multiples(&1)) == k))\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.reduce(0, fn [a, b], acc -> if a and b, do: acc + 1, else: acc end)\n  end\n\n  def multiples(num) do\n    multiples(num, 2, [])\n  end\n\n  defp multiples(num, div, acc) when div > num, do: Enum.reverse(acc)\n\n  defp multiples(num, div, acc) do\n    if rem(num, div) == 0 do\n      multiples(div(num, div), div, [div | acc])\n    else\n      multiples(num, div + 1, acc)\n    end\n  end\n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78309,"user_id":null,"body":"defmodule Kconsec do\n\n    def consec_Kprimes(k, arr) do\n        arr\n        |> Enum.map(fn n -> {n, is_Kprime(k, n)} end)\n        |> Enum.chunk_every(2, 1, :discard)\n        |> Enum.filter(fn [{_, x}, {_, y}] -> x == true && y == true end)\n        |> Enum.count\n    end\n    \n    def is_Kprime(k, n) do\n      prime_factors(n) |> Enum.count == k\n    end\n    \n    def prime_factors(n) when n in [0, 1], do: []\n    def prime_factors(2), do: [2]\n    def prime_factors(n) do\n      divisor = 2..ceil(:math.sqrt(n))\n      |> Enum.find(&(rem(n, &1) == 0)) # first divisor of n\n      \n      if divisor == nil do\n        [n]\n      else\n        prime_factors(divisor) ++ prime_factors(round(n \/ divisor))\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57356c55867b9b7a60000bd7":[{"id":78310,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(\"+\", value1, value2), do: value1 + value2\n  def basic_op(\"-\", value1, value2), do: value1 - value2\n  def basic_op(\"*\", value1, value2), do: value1 * value2\n  def basic_op(\"\/\", value1, value2), do: value1 \/ value2\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78311,"user_id":527,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    apply(Kernel, String.to_existing_atom(operation), [value1, value2])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78312,"user_id":527,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    case operation do\n      \"+\" -> value1 + value2\n      \"-\" -> value1 - value2\n      \"*\" -> value1 * value2\n      \"\/\" -> value1 \/ value2\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78313,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, x, y) do\n    case operation do\n      \"+\" -> x + y\n      \"-\" -> x - y\n      \"*\" -> x * y\n      \"\/\" -> x \/ y\n      _ -> :err\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78314,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    cond do\n      operation == \"+\" ->\n        value1 + value2\n      operation == \"-\" ->\n        value1 - value2\n      operation == \"*\" ->\n        value1 * value2\n      true -> value1 \/ value2\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78315,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    case {operation, value1, value2} do\n      {\"+\", _, _} -> value1 + value2\n      {\"-\", _, _} -> value1 - value2\n      {\"*\", _, _} -> value1 * value2\n      {\"\/\", _, _} -> value1 \/ value2\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78316,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, x, y) do\n    case {operation, x, y} do \n      {\"+\", x, y} -> x + y\n      {\"-\", x, y} -> x - y\n      {\"*\", x, y} -> x * y\n      {\"\/\", x, y} -> x \/ y\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78317,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    case {operation, value1, value2} do\n      {\"+\", value1, value2} -> value1 + value2\n      {\"-\", value1, value2} -> value1 - value2\n      {\"*\", value1, value2} -> value1 * value2\n      {\"\/\", value1, value2} -> value1 \/ value2\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78318,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    { result, _ } = Code.eval_string(\"#{value1}#{operation}#{value2}\")\n    result\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78319,"user_id":null,"body":"defmodule SimpleMath do\n  def basic_op(operation, value1, value2) do\n    operation\n    |> String.to_existing_atom()\n    |> (&apply(Kernel, &1, [value1, value2])).()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5739174624fc28e188000465":[{"id":78320,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  \n  def compare(player, opponent) do\n    ps = {pf, _} = stat(player)\n    os = {of, _} = stat(opponent)\n\n    case {score(ps), score(os)} do\n      {s, s} -> eq(pf, of)\n      {a, b} -> if a > b, do: @result.win, else: @result.loss\n    end\n  end\n\n  def eq([], []), do: @result.tie\n  def eq([{a, _} | as], [{a, _} | bs]), do: eq(as, bs)\n  def eq([{a, _} | _], [{b, _} | _]) when a > b, do: @result.win\n  def eq(_, _), do: @result.loss\n\n  def stat(s) do\n    {ranks, kinds} = String.split(s, ~r\/\\s+\/) |> Enum.map(&parse\/1) |> Enum.unzip()\n\n    sorted =\n      Enum.frequencies(ranks)\n      |> Map.to_list()\n      |> Enum.sort(fn\n        {c1, n}, {c2, n} -> c1 > c2\n        {_, n1}, {_, n2} -> n1 > n2\n      end)\n\n    {sorted, kinds}\n  end\n\n  def parse(\"T\" <> k), do: {10, k}\n  def parse(\"J\" <> k), do: {11, k}\n  def parse(\"Q\" <> k), do: {12, k}\n  def parse(\"K\" <> k), do: {13, k}\n  def parse(\"A\" <> k), do: {14, k}\n  def parse(<<c, k>>), do: {c - 48, <<k>>}\n\n  def score({[{a, _}, _, _, _, {b, _}], [c, c, c, c, c]}) when a - b == 4, do: 9\n  def score({[{a, _}, _, _, _, {b, _}], _}) when a - b == 4, do: 5\n  def score({r, [c, c, c, c, c]}) when length(r) == 5, do: 6\n  def score({r, _}) when length(r) == 5, do: 1\n  def score({[{_, 4}, _], _}), do: 8\n  def score({[{_, 3}, _], _}), do: 7\n  def score({[{_, 3}, _, _], _}), do: 4\n  def score({[{_, 2}, _, _], _}), do: 3\n  def score({r, _}) when length(r) == 4, do: 2\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78321,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n\n  def compare(player, opponent) do\n    ps = stat(player)\n    os = stat(opponent)\n\n    case {score(ps), score(os)} do\n      {s, s} -> eq(ps, os)\n      {a, b} -> if a > b, do: @result.win, else: @result.loss\n    end\n  end\n\n  def eq({ps, _}, {os, _}) do\n    Enum.zip(ps, os)\n    |> Enum.reduce(@result.tie, fn\n      _, acc when acc in [1, 2] -> acc\n      {{c, _}, {c, _}}, _ -> @result.tie\n      {{c1, _}, {c2, _}}, _ -> if c1 > c2, do: @result.win, else: @result.loss\n    end)\n  end\n\n  @card ~r\/[2-9TJQKA]\/\n  def stat(s) do\n    r =\n      Regex.scan(@card, s)\n      |> List.flatten()\n      |> Enum.frequencies()\n      |> Enum.map(fn\n        {\"T\", c} -> {10, c}\n        {\"J\", c} -> {11, c}\n        {\"Q\", c} -> {12, c}\n        {\"K\", c} -> {13, c}\n        {\"A\", c} -> {14, c}\n        {n, c} -> {String.to_integer(n), c}\n      end)\n      |> Enum.sort(fn\n        {c1, n}, {c2, n} -> c1 > c2\n        {_, n1}, {_, n2} -> n1 > n2\n      end)\n\n    {r, flush?(s)}\n  end\n\n  @suit ~r\/[SHDC]\/\n  def flush([[c], [c], [c], [c], [c]]), do: 1\n  def flush(_), do: 0\n  def flush?(s), do: Regex.scan(@suit, s) |> flush()\n\n  def score({[{a, _}, _, _, _, {b, _}] = r, 1}) when length(r) == 5 and a - b == 4, do: 9\n  def score({[{a, _}, _, _, _, {b, _}] = r, 0}) when length(r) == 5 and a - b == 4, do: 5\n  def score({r, 1}) when length(r) == 5, do: 6\n  def score({r, 0}) when length(r) == 5, do: 1\n  def score({[{_, 4}, _], _}), do: 8\n  def score({[{_, 3}, _], _}), do: 7\n  def score({[{_, 3}, _, _], _}), do: 4\n  def score({[{_, 2}, _, _], _}), do: 3\n  def score({r, _}) when length(r) == 4, do: 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78322,"user_id":null,"body":"defmodule PokerHand do\n  @straight_flush 9\n  @four_of_a_kind 8\n  @full_house 7\n  @flush 6\n  @straight 5\n  @three_of_a_kind 4\n  @two_pairs 3\n  @one_pair 2\n  @high_card 1\n\n  @type card :: String.t()\n  @type hand :: list(card)\n  @type annotated_hand :: {hand, pos_integer, pos_integer} # {hand, rank, score}\n\n  @result %{win: 1, loss: 2, tie: 3}\n\n  @spec compare(String.t(), String.t()) :: list(hand)\n  def compare(player, opponent) do\n\n    hands = [~w(#{player}), ~w(#{opponent})]\n    annotated_hands = Enum.map(hands, &annotate_hand\/1)\n    \n    [{p, rank_p, score_p}, {o, rank_o, score_o}] = annotated_hands\n\n    cond do\n      rank_p > rank_o -> @result.win\n      rank_p < rank_o -> @result.loss\n      rank_p == rank_o ->\n        cond do\n          score_p == score_o -> @result.tie\n          score_p > score_o -> @result.win\n          score_p < score_o -> @result.loss\n        end\n    end\n\n  end\n\n  @spec annotate_hand(hand) :: annotated_hand\n  defp annotate_hand(hand) do\n    [a, b, c, d, e] = sorted = hand |> Enum.map(&number\/1) |> Enum.sort()\n\n    cond do\n      is_straight(sorted) and is_flush(hand) ->\n        {hand, @straight_flush, score(sorted, @straight_flush)}\n      group_and_count_cards(sorted) == [4, 1] ->\n        {hand, @four_of_a_kind, score(sorted, @four_of_a_kind)}\n      group_and_count_cards(sorted) == [3, 2] ->\n        {hand, @full_house, score(sorted, @full_house)}\n      is_flush(hand) ->\n        {hand, @flush, e * 100000 + d * 10000 + c * 1000 + b * 100 + a}\n      is_straight(sorted) ->\n        {hand, @straight, score(sorted, @straight)}\n      group_and_count_cards(sorted) == [3, 1, 1] ->\n        {hand, @three_of_a_kind, score(sorted, @three_of_a_kind)}\n      group_and_count_cards(sorted) == [2, 2, 1] ->\n        {hand, @two_pairs, score(sorted, @two_pairs)}\n      group_and_count_cards(sorted) == [2, 1, 1, 1] ->\n        {hand, @one_pair, score(sorted, @one_pair)}\n      true ->\n        {hand, @high_card, e * 100000 + d * 10000 + c * 1000 + b * 100 + a}\n    end\n   end\n\n  @spec is_straight(list(pos_integer)) :: boolean\n  defp is_straight([a, b, c, d, e]) when e == d+1 and e == c+2 and e == b+3 and e == a+4, do: true\n  defp is_straight([2, 3, 4, 5, 14]), do: true\n  defp is_straight(_), do: false\n\n  @spec is_flush(hand) :: boolean\n  defp is_flush(hand) do\n    case Enum.map(hand, &String.last\/1) do\n      [color, color, color, color, color] -> true\n      [_, _, _, _, _] -> false\n    end\n  end\n\n  @spec group_and_count_cards(hand) :: list(pos_integer)\n  defp group_and_count_cards(hand) do\n    hand\n    |> Enum.group_by(&(&1))\n    |> Map.values()\n    |> Enum.map(fn(list) -> length(list) end)\n    |> Enum.sort(&>\/2)\n  end\n\n  @spec number(hand) :: pos_integer\n  defp number(card) do\n    case String.replace(card, ~r\/[CSDH]\/, \"\") do\n      \"A\" -> 14\n      \"K\" -> 13\n      \"Q\" -> 12\n      \"J\" -> 11\n      \"T\" -> 10\n      v   -> String.to_integer(v)\n    end\n  end\n\n\n  @spec score(list(pos_integer), pos_integer) :: pos_integer\n  defp score([2, 3, 4, 5, 14], _), do: 5\n  defp score([_, _, _, _, e], type) when type in [@straight_flush, @straight], do: e\n  defp score([a, b, b, b, b], @four_of_a_kind), do: b * 100 + a\n  defp score([a, a, a, a, b], @four_of_a_kind), do: a * 100 + b\n  defp score([a, a, b, b, b], @full_house), do: b * 100 + a\n  defp score([a, a, a, b, b], @full_house), do: a * 100 + b\n  defp score([a, b, c, c, c], @three_of_a_kind), do: c * 1000 + b * 100 + a\n  defp score([a, b, b, b, c], @three_of_a_kind), do: b * 1000 + c * 100 + a\n  defp score([a, a, a, b, c], @three_of_a_kind), do: a * 1000 + c * 100 + b\n  defp score([a, b, b, c, c], @two_pairs), do: c * 1000 + b * 100 + a\n  defp score([a, a, b, c, c], @two_pairs), do: c * 1000 + a * 100 + b\n  defp score([a, a, b, b, c], @two_pairs), do: b * 1000 + a * 100 + c\n  defp score([a, b, c, d, d], @one_pair), do: d * 10000 + c * 1000 + b * 100 + a\n  defp score([a, b, c, c, d], @one_pair), do: c * 10000 + d * 1000 + b * 100 + a\n  defp score([a, b, b, c, d], @one_pair), do: b * 10000 + d * 1000 + c * 100 + a\n  defp score([a, a, b, c, d], @one_pair), do: a * 10000 + d * 1000 + c * 100 + b\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78323,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  @int_values %{\n    \"T\" => 10,\n    \"J\" => 11,\n    \"Q\" => 12,\n    \"K\" => 13,\n    \"A\" => 14\n  }\n  \n  def compare(player, opponent), do: judge(score(player), score(opponent))\n  \n  defp judge(player, opponent) when player > opponent, do: @result.win\n  defp judge(player, opponent) when player < opponent, do: @result.loss\n  defp judge(player, opponent) when player == opponent, do: @result.tie\n  \n  defp score(hand), do: hand |> to_datastructure() |> score_hand()\n  \n  defp to_datastructure(hand) do\n    hand\n    |> String.split(\" \")\n    |> Enum.map(&(&1 |> String.codepoints() |> List.to_tuple))\n    |> Enum.map(fn {valu, suit} -> {to_int(valu), suit} end)\n    |> group_by_value_and_by_suit()\n    |> sort_for_scoring()\n  end\n  \n  defp to_int(n) when n in ~w{2 3 4 5 6 7 8 9}, do: String.to_integer(n)\n  defp to_int(n) when n in ~w{T J Q K A}, do: @int_values[n]\n  \n  defp group_by_value_and_by_suit(cards) do\n    by_valu = cards |> Enum.group_by(fn {valu, suit} -> valu end)\n    by_suit = cards |> Enum.group_by(fn {valu, suit} -> suit end)\n    \n    by_valu = by_valu |> Enum.map(fn {valu, cards} -> {valu, Enum.map(cards, fn {valu, suit} -> suit end)} end)\n    by_suit = by_suit |> Enum.map(fn {suit, cards} -> {suit, Enum.map(cards, fn {valu, suit} -> valu end)} end)\n    \n    {by_valu, by_suit}\n  end\n  \n  defp sort_for_scoring({by_valu, by_suit}) do    \n    by_suit = by_suit |> Enum.map(fn {suit, valus} -> {suit, Enum.sort_by(valus, &(-&1))} end)\n    \n    by_valu = by_valu |> Enum.sort_by(fn {valu, suits} -> {-length(suits), -valu} end)\n    by_suit = by_suit |> Enum.sort_by(fn {suit, valus} -> -length(valus) end)\n    \n    {by_valu, by_suit}\n  end\n  \n  defp score_hand(cards) do\n    straight_flush?(cards) ||\n    four_of_a_kind?(cards) ||\n    full_house?(cards) ||\n    flush?(cards) ||\n    straight?(cards) ||\n    three_of_a_kind?(cards) ||\n    two_pair?(cards) ||\n    one_pair?(cards) ||\n    high_card(cards)\n  end\n\n  defp straight_flush?({_, [{_suit, valus} | _]}) do\n    length(valus) == 5 && \n      with {min, max} = Enum.min_max(valus),\n        do: max - min == 4 && {20, max, 0, 0, 0, 0}\n  end\n\n  defp four_of_a_kind?({[{valu, suits}, {kick, _} | _], _}) do\n    length(suits) == 4 && {19, valu, kick, 0, 0, 0}\n  end\n\n  defp full_house?({[{valu1, suits1}, {valu2, suits2} | _], _}) do\n    length(suits1) == 3 && length(suits2) == 2 && {18, valu1, valu2, 0, 0, 0}\n  end\n\n  defp flush?({_, [{suit, valus} | _]}) do\n    length(valus) == 5 && \n      with [a, b, c, d, e] = Enum.sort_by(valus, &(-&1)),\n        do: {17, a, b, c, d, e}\n  end\n  \n  defp straight?({by_valu, _}) do\n    valus = by_valu |> Enum.map(fn {valu, _suits} -> valu end)\n    length(valus) == 5 && \n      with {min, max} = Enum.min_max(valus),\n        do: max - min == 4 && {16, max, 0, 0, 0, 0}\n  end\n  \n  defp three_of_a_kind?({[{valu, suits}, {kick1, _}, {kick2, _} | _], _}) do\n    length(suits) == 3 && {15, valu, kick1, kick2, 0, 0}\n  end\n  \n  defp two_pair?({[{valu1, suits1}, {valu2, suits2}, {kick, _} | _], _}) do\n    length(suits1) == 2 && length(suits2) == 2 && {14, valu1, valu2, kick, 0, 0}\n  end\n  \n  defp one_pair?({[{valu, suits}, {kick1, _}, {kick2, _}, {kick3, _} | _], _}) do\n    length(suits) == 2 && {13, valu, kick1, kick2, kick3, 0}\n  end\n  \n  defp high_card({[{v1, _}, {v2, _}, {v3, _}, {v4, _}, {v5, _}], _}) do\n    {12, v1, v2, v3, v4, v5}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78324,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  @cards %{\"T\" => 10, \"J\" => 11, \"Q\" => 12, \"K\" => 13, \"A\" => 14}\n  def rank(hand) do\n    #0-> high card, 1->pair, 2-> 2 pairs, 3-> three of a kind, 4-> straight, 5-> flush, 6-> full house\n    #7->four of a kind, 8-> straight flush (also royal)\n    hc = Enum.map(hand, fn x->Enum.at(x,0) end)\n    group = Enum.map((Enum.group_by(hc, &(&1)) |> Map.values), fn x -> [length(x), Enum.at(x,0)] end)\n            |> Enum.sort(&(&1 >= &2 )) |> List.zip\n    cond do\n      Enum.count(hand, fn x -> Enum.at(Enum.at(hand,0),1) == Enum.at(x,1) end) == 5 ->\n        cond do\n          Enum.to_list(Enum.at(hc,0)..Enum.at(hc,4)) == hc ->\n            [8|[hc]]\n          true ->\n            [5|[hc]]\n        end\n      Enum.to_list(Enum.at(hc,0)..Enum.at(hc,4)) == hc ->\n        [4|[hc]]\n\n      true ->\n        case Enum.at(group, 0) do\n          {1,1,1,1,1} -> [0|[Tuple.to_list(Enum.at(group,1))]]\n          {2,1,1,1} -> [1|[Tuple.to_list(Enum.at(group,1))]]\n          {2,2,1} -> [2|[Tuple.to_list(Enum.at(group,1))]]\n          {3,1,1} -> [3|[Tuple.to_list(Enum.at(group,1))]]\n          {3,2} -> [6|[Tuple.to_list(Enum.at(group,1))]]\n          {4,1} -> [7|[Tuple.to_list(Enum.at(group,1))]]\n\n        end\n\n    end\n  end\n  def mk_hand(player) do\n    Enum.map(String.split(player), fn x -> String.codepoints(x) end)\n    |> Enum.map(fn x ->\n         cond do\n           Map.has_key?(@cards, Enum.at(x,0)) == false -> [String.to_integer(Enum.at(x,0)), Enum.at(x,1)]\n           true -> [Map.get(@cards,Enum.at(x,0)), Enum.at(x, 1)]\n         end\n       end)\n    |> Enum.sort(&(&1 >= &2))\n    |> rank\n  end\n\n  def compare(player, opponent) do\n    p1 = mk_hand(player)\n    p2 = mk_hand(opponent)\n    cond do\n      Enum.at(p1, 0) > Enum.at(p2, 0) -> @result.win\n      Enum.at(p1, 0) < Enum.at(p2, 0) -> @result.loss\n      true ->\n        cond do\n          Enum.at(p1, 1) > Enum.at(p2, 1) -> @result.win\n          Enum.at(p1, 1) < Enum.at(p2, 1) -> @result.loss\n          true -> @result.tie\n        end\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78325,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  @rating %{\n    highcard: 0,\n    pair: 1,\n    two_pairs: 2,\n    three_of_a_kind: 3,\n    straight: 4,\n    flush: 5,\n    full_house: 6,\n    four_of_a_kind: 7,\n    straight_flush: 8,\n    royal_flush: 9\n  }\n  @picturecardtranslation %{\"T\" => \"10\", \"J\" => \"11\", \"Q\" => \"12\", \"K\" => \"13\", \"A\" => \"14\"}\n  @picturecardsoverview [\"T\", \"J\", \"Q\", \"K\", \"A\"]\n  \n  def compare(player, opponent) do\n    [player: player, opponent: opponent]\n    |> Enum.map(fn {at, pl} ->\n      {at, pl |> readhand |> find_best_hand}\n    end)\n    |> (fn ([player: {bestplayerhand, playercards}, opponent: {bestopponenthand, opponentcards}]) ->\n      cond do\n        @rating[bestplayerhand] > @rating[bestopponenthand] -> @result.win\n        @rating[bestplayerhand] < @rating[bestopponenthand] -> @result.loss\n        true -> compare_lists(playercards, opponentcards)\n      end\n    end).()\n  end\n  \n  defp readhand(hand) do\n    hand\n    |> String.split([\" \"], trim: true)\n    |> Enum.map(fn card ->\n      case String.codepoints(card) do\n        [num, suite] when num in @picturecardsoverview -> {String.to_integer(@picturecardtranslation[num]), suite}\n        [num, suite] -> {String.to_integer(num), suite}\n      end\n    end)\n    |> Enum.sort(fn({num1, _suite1}, {num2, _suite2}) -> num1 <= num2 end)\n  end\n\n  defp flush?([{_, suite}|t]), do: Enum.all?(t, fn({_,s}) -> s == suite end)\n  defp straight?(hand) do\n    hand\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.all?(fn([{num1, _suite1}, {num2, _suite2}]) -> (num2 - num1) == 1 end)\n  end\n  \n  defp straight_flush?(hand), do: flush?(hand) and straight?(hand)\n  \n  defp royal_flush?(hand) do\n    straight_flush?(hand) and (hand |> hd |> elem(0) |> Kernel.==(10))\n  end\n  \n  defp n_of_m_kinds?(hand, []), do: true\n  defp n_of_m_kinds?(hand, n) when is_integer(n), do: n_of_m_kinds?(hand, [n])\n  defp n_of_m_kinds?(hand, [n|rest]) do\n    hand\n    |> Enum.chunk_every(n, 1, :discard)\n    |> Enum.find_index(fn([{num, _suite}|t]) -> Enum.all?(t, &(elem(&1,0) == num)) end)\n    |> (fn\n      nil -> false\n      idx -> Enum.split(hand, idx) |> (fn({l1, l2}) -> l1 ++ Enum.drop(l2, n) end).() |> n_of_m_kinds?(rest)\n    end).()\n  end\n  \n  defp pair?(hand), do: n_of_m_kinds?(hand, 2)\n  defp two_pairs?(hand), do: n_of_m_kinds?(hand, [2, 2])\n  defp three_of_a_kind?(hand), do: n_of_m_kinds?(hand, 3)\n  defp four_of_a_kind?(hand), do: n_of_m_kinds?(hand, 4)\n  defp full_house?(hand), do: n_of_m_kinds?(hand, [3, 2])\n\n  defp get_n_m_cards(hand, []) do\n    hand |> Enum.map(fn {num,_suit} -> num end) |> Enum.reverse\n  end\n  \n  defp get_n_m_cards(hand, n) when is_integer(n), do: get_n_m_cards(hand, [n])\n  defp get_n_m_cards(hand, [n|rest]) do\n    hand\n    |> Enum.chunk_every(n, 1, :discard)\n    |> Enum.find_index(fn([{num, _suite}|t]) -> Enum.all?(t, &(elem(&1,0) == num)) end)\n    |> (fn idx ->\n      Enum.split(hand, idx)\n      |> (fn\n        {l1, l2} -> [elem(hd(l2), 0)|l1 ++ Enum.drop(l2, n) |> get_n_m_cards(rest)]\n      end).()\n    end).()\n  end\n  defp get_pair_card(hand), do: get_n_m_cards(hand, 2)\n  defp get_two_pairs_cards(hand), do: get_n_m_cards(hand, [2, 2])\n  defp get_three_of_a_kind_card(hand), do: get_n_m_cards(hand, 3)\n  defp get_four_of_a_kind_card(hand), do: get_n_m_cards(hand, 4)\n  defp get_full_house_cards(hand), do: get_n_m_cards(hand, [3, 2])\n  defp get_straight_card([{num, _suit}|rest]), do: num\n  defp get_highcard_cards(hand) do\n    hand\n    |> Enum.map(fn {num, _suite} -> num end)\n    |> Enum.sort(:desc)\n  end\n  defp get_flush_cards(hand), do: get_highcard_cards(hand)\n\n  \n  defp find_best_hand(hand) do\n    cond do\n      royal_flush?(hand) -> {:royal_flush, [10]}\n      straight_flush?(hand) -> {:straight_flush, get_straight_card(hand)}\n      four_of_a_kind?(hand) -> {:four_of_a_kind, get_four_of_a_kind_card(hand)}\n      full_house?(hand) -> {:full_house, get_full_house_cards(hand)}\n      flush?(hand) -> {:flush, get_flush_cards(hand)}\n      straight?(hand) -> {:straight, get_straight_card(hand)}\n      three_of_a_kind?(hand) -> {:three_of_a_kind, get_three_of_a_kind_card(hand)}\n      two_pairs?(hand) -> {:two_pairs, get_two_pairs_cards(hand)}\n      pair?(hand) -> {:pair, get_pair_card(hand)}\n      true -> {:highcard, get_highcard_cards(hand)}\n    end\n  end\n\n  defp compare_lists(pl, op) when is_integer(pl) and is_integer(op), do: compare_lists([pl], [op])\n  defp compare_lists([], []), do: @result.tie\n  defp compare_lists([plhead|pltail], [ophead|optail]) do\n    cond do\n      plhead > ophead -> @result.win\n      plhead < ophead -> @result.loss\n      true-> compare_lists(pltail, optail)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78326,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n\n  def compare(player, opponent) do\n    ps = stat(player)\n    os = stat(opponent)\n\n    case {score(ps), score(os)} do\n      {s, s} -> eq(ps, os)\n      {a, b} -> if a > b, do: @result.win, else: @result.loss\n    end\n  end\n\n  def eq({ps, _}, {os, _}) do\n    Enum.zip(ps, os)\n    |> Enum.reduce(@result.tie, fn\n      _, acc when acc in [1, 2] -> acc\n      {{c, _}, {c, _}}, _ -> @result.tie\n      {{c1, _}, {c2, _}}, _ -> if c1 > c2, do: @result.win, else: @result.loss\n    end)\n  end\n\n  @card ~r\/[2-9TJQKA]\/\n  def stat(s) do\n    r =\n      Regex.scan(@card, s)\n      |> List.flatten()\n      |> Enum.frequencies()\n      |> Enum.map(fn\n        {\"T\", c} -> {10, c}\n        {\"J\", c} -> {11, c}\n        {\"Q\", c} -> {12, c}\n        {\"K\", c} -> {13, c}\n        {\"A\", c} -> {14, c}\n        {n, c} -> {String.to_integer(n), c}\n      end)\n      |> Enum.sort(fn\n        {c1, n}, {c2, n} -> c1 > c2\n        {_, n1}, {_, n2} -> n1 > n2\n      end)\n\n    {r, flush?(s)}\n  end\n\n  @suit ~r\/[SHDC]\/\n  def flush([[c], [c], [c], [c], [c]]), do: 1\n  def flush(_), do: 0\n  def flush?(s), do: Regex.scan(@suit, s) |> flush()\n\n  def score({[{a, _}, _, _, _, {b, _}], 1}) when a - b == 4, do: 9\n  def score({[{a, _}, _, _, _, {b, _}], 0}) when a - b == 4, do: 5\n  def score({r, 1}) when length(r) == 5, do: 6\n  def score({r, 0}) when length(r) == 5, do: 1\n  def score({[{_, 4}, _], _}), do: 8\n  def score({[{_, 3}, _], _}), do: 7\n  def score({[{_, 3}, _, _], _}), do: 4\n  def score({[{_, 2}, _, _], _}), do: 3\n  def score({r, _}) when length(r) == 4, do: 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78327,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  \n  def compare(player, opponent) do\n    player_score = score_hand(player)\n    opponent_score = score_hand(opponent)\n    cond do\n      player_score > opponent_score ->\n        @result.win\n      player_score == opponent_score ->\n        tie_breaker(player, opponent)\n      player_score < opponent_score ->\n        @result.loss\n    end\n  end\n  \n  def score_hand(<<hand::binary-size(14)>>), do: score_hand(parse_hand(hand))\n  def score_hand(parsed_hand) do\n    [\n      :straight_flush,\n      :four_of_a_kind,\n      :full_house,\n      :flush,\n      :straight,\n      :three_of_a_kind,\n      :two_pairs,\n      :pair,\n      :high_card\n    ]\n    |> Enum.map(fn func ->  apply(__MODULE__, func, [parsed_hand]) end)\n    |> Enum.max()\n  end\n  \n  def parse_hand(hand) do\n    String.split(hand, \" \")\n    |> Enum.map(&parse_card\/1)\n    |> Enum.sort_by(fn {e, _} -> e end, &>=\/2)\n  end\n  \n  def parse_card(\"A\" <> suit), do: {14, suit}\n  def parse_card(\"K\" <> suit), do: {13, suit}\n  def parse_card(\"Q\" <> suit), do: {12, suit}\n  def parse_card(\"J\" <> suit), do: {11, suit}\n  def parse_card(\"T\" <> suit), do: {10, suit}\n  def parse_card(<<n::binary-size(1)>> <> suit), do: {String.to_integer(n), suit}\n  \n  def straight_flush([{e1, suit}, {e2, suit}, {e3, suit}, {e4, suit}, {e5, suit}]) do\n    if e1 - 1 == e2 && e2 - 1 == e3 && e3 - 1 == e4 && e4 - 1 == e5 do\n      800 + e1\n    else\n      0\n    end\n  end\n  def straight_flush(_), do: 0\n  \n  def four_of_a_kind([{e, _}, {e, _}, {e, _}, {e, _}, {_, _}]), do: 700 + e\n  def four_of_a_kind([{_, _}, {e, _}, {e, _}, {e, _}, {e, _}]), do: 700 + e\n  def four_of_a_kind(_), do: 0\n  \n  def full_house([{e1, _}, {e1, _}, {e1, _}, {e2, _}, {e2, _}]), do: 600 + e1\n  def full_house([{e1, _}, {e1, _}, {e2, _}, {e2, _}, {e2, _}]), do: 600 + e1\n  def full_house(_), do: 0\n  \n  def flush([{e, suit}, {_, suit}, {_, suit}, {_, suit}, {_, suit}]), do: 500 + e\n  def flush(_), do: 0\n  \n  def straight([{e1, _}, {e2, _}, {e3, _}, {e4, _}, {e5, _}]) do\n    if e1 - 1 == e2 && e2 - 1 == e3 && e3 - 1 == e4 && e4 - 1 == e5 do\n      400 + e1\n    else\n      0\n    end\n  end\n  def straight(_), do: 0\n  \n  def three_of_a_kind([{e, _}, {e, _}, {e, _}, {_, _}, {_, _}]), do: 300 + e\n  def three_of_a_kind([{_, _}, {e, _}, {e, _}, {e, _}, {_, _}]), do: 300 + e\n  def three_of_a_kind([{_, _}, {_, _}, {e, _}, {e, _}, {e, _}]), do: 300 + e\n  def three_of_a_kind(_), do: 0\n  \n  def two_pairs([{e1, _}, {e1, _}, {e2, _}, {e2, _}, {_, _}]), do: 200 + e1\n  def two_pairs([{e1, _}, {e1, _}, {_, _}, {e2, _}, {e2, _}]), do: 200 + e1\n  def two_pairs([{_, _}, {e1, _}, {e1, _}, {e2, _}, {e2, _}]), do: 200 + e1\n  def two_pairs(_), do: 0\n  \n  def pair([{e, _}, {e, _}, {_, _}, {_, _}, {_, _}]), do: 100 + e\n  def pair([{_, _}, {e, _}, {e, _}, {_, _}, {_, _}]), do: 100 + e\n  def pair([{_, _}, {_, _}, {e, _}, {e, _}, {_, _}]), do: 100 + e\n  def pair([{_, _}, {_, _}, {_, _}, {e, _}, {e, _}]), do: 100 + e\n  def pair(_), do: 0\n  \n  def high_card([{e, _} | _tail]), do: e\n  \n  def tie_breaker(<<players_hand::binary-size(14)>>, <<opponents_hand::binary-size(14)>>) do\n    tie_breaker(parse_hand(players_hand), parse_hand(opponents_hand))\n  end\n  def tie_breaker(players_hand, opponents_hand) do\n    Enum.zip(players_hand, opponents_hand)\n    |> Enum.reduce_while(@result.tie, fn {{p, _}, {o, _}}, _acc ->\n      cond do\n        p > o  -> {:halt, @result.win}\n        p == o -> {:cont, @result.tie}\n        p < o  -> {:halt, @result.loss}\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78328,"user_id":null,"body":"defmodule PokerHand do\n  @result %{win: 1, loss: 2, tie: 3}\n  \n  def compare(player, opponent) do\n    player_hand = parse_hand(player)\n    opponent_hand = parse_hand(opponent)\n    \n    player_score = hand_score(player_hand) |> IO.inspect()\n    opponent_score = hand_score(opponent_hand) |> IO.inspect()\n    \n    cond do\n      player_score > opponent_score -> @result.win\n      player_score < opponent_score -> @result.loss\n      true ->\n        player_values = player_hand\n        |> Enum.map(fn card -> card.value end)\n        |> Enum.sort()\n        opponent_values = opponent_hand\n        |> Enum.map(fn card -> card.value end)\n        |> Enum.sort()\n        \n        cond do\n          Enum.at(player_values, 4) > Enum.at(opponent_values, 4) -> @result.win\n          Enum.at(player_values, 4) < Enum.at(opponent_values, 4) -> @result.loss\n          Enum.at(player_values, 3) > Enum.at(opponent_values, 3) -> @result.win\n          Enum.at(player_values, 3) < Enum.at(opponent_values, 3) -> @result.loss\n          Enum.at(player_values, 2) > Enum.at(opponent_values, 2) -> @result.win\n          Enum.at(player_values, 2) < Enum.at(opponent_values, 2) -> @result.loss\n          Enum.at(player_values, 1) > Enum.at(opponent_values, 1) -> @result.win\n          Enum.at(player_values, 1) < Enum.at(opponent_values, 1) -> @result.loss\n          Enum.at(player_values, 0) > Enum.at(opponent_values, 0) -> @result.win\n          Enum.at(player_values, 0) < Enum.at(opponent_values, 0) -> @result.loss\n          true -> @result.tie\n        end\n    end\n  end\n  \n  defp card_value(\"T\"), do: 10\n  defp card_value(\"J\"), do: 11\n  defp card_value(\"Q\"), do: 12\n  defp card_value(\"K\"), do: 13\n  defp card_value(\"A\"), do: 14\n  defp card_value(v), do: String.to_integer(v)\n  \n  defp parse_hand(hand) do\n    hand\n    |> String.split()\n    |> Enum.map(fn card ->\n      %{value: card |> String.at(0) |> card_value(), suit: String.at(card, 1)}\n    end)\n  end\n\n  defp is_flush?(hand) do\n    s = Enum.at(hand, 0).suit\n\n    s == Enum.at(hand, 1).suit\n    and s == Enum.at(hand, 2).suit\n    and s == Enum.at(hand, 3).suit\n    and s == Enum.at(hand, 4).suit\n  end\n  \n  defp is_straight?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n    \n    Enum.at(values, 0) + 1 == Enum.at(values, 1)\n    and Enum.at(values, 1) + 1 == Enum.at(values, 2)\n    and Enum.at(values, 2) + 1 == Enum.at(values, 3)\n    and Enum.at(values, 3) + 1 == Enum.at(values, 4)\n  end\n  \n  defp is_four_of_a_kind?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    Enum.at(values, 0) == Enum.at(values, 3)\n    or Enum.at(values, 1) == Enum.at(values, 4)\n  end\n  \n  defp is_full_house?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    (Enum.at(values, 0) == Enum.at(values, 2) and Enum.at(values, 3) == Enum.at(values, 4))\n    or (Enum.at(values, 0) == Enum.at(values, 1) and Enum.at(values, 2) == Enum.at(values, 4))\n  end\n  \n  defp is_three_of_a_kind?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    Enum.at(values, 0) == Enum.at(values, 2)\n    or Enum.at(values, 1) == Enum.at(values, 3)\n    or Enum.at(values, 2) == Enum.at(values, 4)\n  end\n  \n  defp is_two_pairs?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    (Enum.at(values, 0) == Enum.at(values, 1) and Enum.at(values, 2) == Enum.at(values, 3))\n    or (Enum.at(values, 0) == Enum.at(values, 1) and Enum.at(values, 3) == Enum.at(values, 4))\n    or (Enum.at(values, 1) == Enum.at(values, 2) and Enum.at(values, 3) == Enum.at(values, 4))\n  end\n  \n  defp is_pair?(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    Enum.at(values, 0) == Enum.at(values, 1)\n    or Enum.at(values, 1) == Enum.at(values, 2)\n    or Enum.at(values, 2) == Enum.at(values, 3)\n    or Enum.at(values, 3) == Enum.at(values, 4)\n  end\n  \n  defp is_straight_flush?(hand), do: is_flush?(hand) and is_straight?(hand)\n  \n  defp highest_value(hand) do\n    hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.max()\n  end\n  \n  defp highest_four_of_a_kind_value(hand) do\n    hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      |> Enum.at(2)\n  end\n  \n  defp highest_three_of_a_kind_value(hand) do\n    hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      |> Enum.at(2)\n  end\n  \n  defp highest_pair_value(hand) do\n    values = hand\n      |> Enum.map(fn card -> card.value end)\n      |> Enum.sort()\n      \n    cond do\n      Enum.at(values, 0) == Enum.at(values, 1) -> Enum.at(values, 0)\n      Enum.at(values, 1) == Enum.at(values, 2) -> Enum.at(values, 1)\n      Enum.at(values, 2) == Enum.at(values, 3) -> Enum.at(values, 2)\n      Enum.at(values, 3) == Enum.at(values, 4) -> Enum.at(values, 3)\n      true -> 0\n    end\n  end\n  \n  defp hand_score(hand) do\n    cond do\n      is_straight_flush?(hand) -> 900 + highest_value(hand)\n      is_four_of_a_kind?(hand) -> 800 + highest_four_of_a_kind_value(hand)\n      is_full_house?(hand) -> 700 + highest_three_of_a_kind_value(hand)\n      is_flush?(hand) -> 600 + highest_value(hand)\n      is_straight?(hand) -> 500 + highest_value(hand)\n      is_three_of_a_kind?(hand) -> 400 + highest_three_of_a_kind_value(hand)\n      is_two_pairs?(hand) -> 300\n      is_pair?(hand) -> 200 + highest_pair_value(hand)\n      true -> 0\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78329,"user_id":null,"body":"defmodule PokerHand do\n  @result %{\n    win: 1,\n    loss: 2,\n    tie: 3\n  }\n\n  @hands %{\n    royal_flush: 10,\n    straight_flush: 9,\n    four_of_a_kind: 8,\n    full_house: 7,\n    flush: 6,\n    straight: 5,\n    three_of_a_kind: 4,\n    two_pair: 3,\n    pair: 2,\n    high_card: 1\n  }\n\n  def compare(player, opponent) do\n    player_hand = transform_hand(player)\n    opponent_hand = transform_hand(opponent)\n\n    player_score = player_hand |> score_hand\n    opponent_score = opponent_hand |> score_hand\n\n    cond do\n      player_score > opponent_score ->\n        @result.win\n\n      player_score == opponent_score ->\n        player_numbers = Enum.map(player_hand, &Map.fetch!(&1, :number))\n        opponent_numbers = Enum.map(opponent_hand, &Map.fetch!(&1, :number))\n\n        player_highest = (player_numbers -- opponent_numbers) |> Enum.max(&>=\/2, fn -> 0 end)\n        opponent_highest = (opponent_numbers -- player_numbers) |> Enum.max(&>=\/2, fn -> 0 end)\n\n        cond do\n          player_highest > opponent_highest ->\n            @result.win\n\n          player_highest < opponent_highest ->\n            @result.loss\n\n          true ->\n            @result.tie\n        end\n\n      true ->\n        @result.loss\n    end\n  end\n\n  defp score_hand([\n         %{number: 10, suit: a},\n         %{number: 11, suit: a},\n         %{number: 12, suit: a},\n         %{number: 13, suit: a},\n         %{number: 14, suit: a}\n       ]),\n       do: @hands.royal_flush\n\n  defp score_hand([\n         %{number: number_a, suit: a},\n         %{number: number_b, suit: a},\n         %{number: number_c, suit: a},\n         %{number: number_d, suit: a},\n         %{number: number_e, suit: a}\n       ]) do\n    if [number_a, number_b, number_c, number_d, number_e] ==\n         Enum.to_list(number_a..(number_a + 4)) do\n      @hands.straight_flush\n    else\n      @hands.flush\n    end\n  end\n\n  defp score_hand([\n         %{number: number_a, suit: _},\n         %{number: number_b, suit: _},\n         %{number: number_c, suit: _},\n         %{number: number_d, suit: _},\n         %{number: number_e, suit: _}\n       ])\n       when number_e - number_a == 4 and number_d - number_a == 3 and number_c - number_a == 2 and\n              number_b - number_a == 1,\n       do: @hands.straight\n\n  defp score_hand(hand) do\n    frequencies =\n      hand\n      |> Enum.frequencies_by(&Map.fetch!(&1, :number))\n      |> Enum.map(fn {_, m} -> m end)\n      |> Enum.sort()\n      |> Enum.reverse()\n\n    case frequencies do\n      [4, _] -> @hands.four_of_a_kind\n      [3, 2] -> @hands.full_house\n      [3, _, _] -> @hands.three_of_a_kind\n      [2, 2, 1] -> @hands.two_pair\n      [2, _, _, _] -> @hands.pair\n      _ -> @hands.high_card\n    end\n  end\n\n  defp transform_hand(hand) do\n    hand\n    |> String.split(\" \", trim: true)\n    |> Enum.map(fn <<card_num::bytes-size(1), card_suit::bytes-size(1)>> ->\n      %{number: transform_card_num(card_num), suit: card_suit}\n    end)\n    |> Enum.sort_by(&Map.fetch(&1, :number))\n  end\n\n  defp transform_card_num(\"T\"), do: 10\n  defp transform_card_num(\"J\"), do: 11\n  defp transform_card_num(\"Q\"), do: 12\n  defp transform_card_num(\"K\"), do: 13\n  defp transform_card_num(\"A\"), do: 14\n\n  defp transform_card_num(card_num) do\n    {n, _} = Integer.parse(card_num, 10)\n    n\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"573992c724fc289553000e95":[{"id":78330,"user_id":527,"body":"defmodule Tosmallest do\n\n  def smallest(n) do\n    ds = Integer.digits(n)\n    len_ds = length(ds)\n    Stream.flat_map(0 .. len_ds-1, fn i ->\n      x = Enum.at(ds, i)\n      xs = List.delete_at(ds, i)\n      Stream.map(0 .. len_ds-1, fn j ->\n        [Integer.undigits(List.insert_at(xs, j, x)), i, j]\n      end)\n    end) |> Enum.min\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78331,"user_id":492,"body":"defmodule Tosmallest do\n\n  defp decompose(strng) do\n    l = String.length(strng)\n    for i <- 0..(l - 1), u = String.slice(strng, i, 1), s = String.slice(strng, 0, i) <> String.slice(strng, (i + 1)..-1), do: [i, u, s]\n  end\n  defp _compose([], res) do\n    res \n  end\n  defp _compose([[j, c, strng] | t], res) do\n    r = for i <- 0..String.length(strng), s = String.slice(strng, 0, i) <> c <> String.slice(strng, i..-1), do: [s, j, i]\n    _compose(t, res ++ r)\n  end\n  defp compose(arr) do\n    [a, b, c] = hd(Enum.sort(_compose(arr, [])))\n    {n, _} = Integer.parse(a)\n    [n, b, c]\n  end\n  \n  def smallest(n) do\n    Integer.to_string(n) |> decompose |> compose\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78332,"user_id":null,"body":"defmodule Tosmallest do\n\ndef smallest(n) do\n    list = n |> Integer.to_string |> String.codepoints |> IO.inspect\n\n    numbers = list |> Enum.uniq |> Enum.sort\n    index_map = numbers |> Enum.map(fn(a) -> find_all_positions(list, a) end) |> List.flatten |> IO.inspect\n    answer = Enum.map(index_map, fn(a) -> check_sum_for_all(list, a) end) |> List.flatten\n    minimum =  answer |> Enum.min_by(fn(a) -> a.sum end)\n    return = check_for_zero(answer, minimum) |> List.first\n    [return.sum, return.index, return.inserted_at]\n  end\n\n  defp find_all_positions(list, number) do\n    indexes = find_indexes(list, fn(x) -> x == number end) |> IO.inspect\n    #indexes = Enum.find_index(list, fn(a) -> a == number end) |> IO.inspect\n    Enum.map(indexes, fn(a) -> %{number: number, index: a} end)\n  end\n\n  def find_indexes(collection, function) do\n    do_find_indexes(collection, function, 0, [])\n  end\n\n  def do_find_indexes([], _function, _counter, acc) do\n    Enum.reverse(acc)\n  end\n\n  def do_find_indexes([h|t], function, counter, acc) do\n    if function.(h) do\n      do_find_indexes(t, function, counter + 1, [counter|acc])\n    else\n      do_find_indexes(t, function, counter + 1, acc)\n    end\n  end\n\n  defp check_sum_for_all(list, index_map) do\n    size = Enum.count(list)-1\n    formatted_list = List.delete_at(list, index_map.index)\n    0..size\n    |> Enum.map(fn(a) -> %{\n      list: convert_to_int(List.insert_at(formatted_list, a, index_map.number)),\n      sum: convert_to_sum(convert_to_int(List.insert_at(formatted_list, a, index_map.number))),\n      number: index_map.number,\n      index: index_map.index,\n      inserted_at: a}\n    end) |> List.flatten\n  end\n\n  defp check_for_zero(answer, minimum) do\n    index_at = Enum.filter(answer, fn(a) ->\n      a.sum == minimum.sum\n    end) |> Enum.sort_by(fn(a) -> a.index > a.inserted_at end)\n  end\n\n  defp convert_to_int(list) do\n    list |> Enum.map(fn(a) -> String.to_integer(a) end)\n  end\n  defp convert_to_sum(list) do\n    list |> Enum.join |> String.to_integer\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78333,"user_id":null,"body":"defmodule Tosmallest do\n\n  def smallest(n) do\n    s = Integer.to_string(n)\n    len = String.length(s)\n    for i <- 0..len-1, j <- 0..len-1 do\n      [String.to_integer(move(s, i, j)), i, j]\n    end \n    |> Enum.min\n  end\n  \n  defp move(str, i, j) do\n    <<s1::binary-size(i), e::binary-size(1), s2::binary>> = str\n    <<s1::binary-size(j), s2::binary>> = s1 <> s2\n    <<s1::binary, e::binary, s2::binary>>\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78334,"user_id":null,"body":"defmodule Tosmallest do\n  def smallest(n) do\n    l0 = String.graphemes(to_string(n))\n    for {d, i} <- Enum.with_index(l0) do\n      l = List.delete_at(l0, i)\n      for j <- 0..length(l) do\n         s = List.insert_at(l, j, d) |> Enum.join\n         [String.to_integer(s), i, j]\n      end\n      |> Enum.min\n    end\n    |> Enum.min\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78335,"user_id":null,"body":"defmodule Tosmallest do\n  def smallest(n) do\n    tbl = :ets.new(:tbl, [])\n    update(tbl, n, 0, 0)\n    nd = Integer.digits(n)\n\n    for i <- 0..(length(nd) - 1) do\n      {d, nd2} = List.pop_at(nd, i)\n\n      for j <- 0..length(nd2) do\n        n2 = List.insert_at(nd2, j, d) |> Integer.undigits()\n        if n2 < lookup(tbl, :smallest), do: update(tbl, n2, i, j)\n      end\n    end\n\n    [lookup(tbl, :smallest), lookup(tbl, :smalli), lookup(tbl, :smallj)]\n  end\n\n  defp lookup(t, key) do\n    [{_, v}] = :ets.lookup(t, key)\n    v\n  end\n\n  defp update(t, smallest, smalli, smallj) do\n    :ets.insert(t, {:smallest, smallest})\n    :ets.insert(t, {:smalli, smalli})\n    :ets.insert(t, {:smallj, smallj})\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78336,"user_id":null,"body":"defmodule Tosmallest do\n  def smallest(n) do\n    tbl = :ets.new(:tbl, [])\n    update(tbl, n, 0, 0)\n    nd = Integer.digits(n)\n\n    for i <- 0..(length(nd) - 1) do\n      nd2 = List.delete_at(nd, i)\n\n      for j <- 0..length(nd2) do\n        n2 = List.insert_at(nd2, j, Enum.at(nd, i)) |> Integer.undigits()\n        if n2 < lookup(tbl, :smallest), do: update(tbl, n2, i, j)\n      end\n    end\n\n    [lookup(tbl, :smallest), lookup(tbl, :smalli), lookup(tbl, :smallj)]\n  end\n\n  defp lookup(t, key) do\n    [{_, v}] = :ets.lookup(t, key)\n    v\n  end\n\n  defp update(t, smallest, smalli, smallj) do\n    :ets.insert(t, {:smallest, smallest})\n    :ets.insert(t, {:smalli, smalli})\n    :ets.insert(t, {:smallj, smallj})\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78337,"user_id":null,"body":"defmodule Tosmallest do\n  def smallest(n) do\n    tbl = :ets.new(:tbl, [])\n    update(tbl, n, 0, 0)\n    nd = Integer.digits(n)\n\n    for i <- 0..(length(nd) - 1) do\n      nd2 = List.delete_at(nd, i)\n\n      for j <- 0..length(nd2) do\n        nd3 = List.insert_at(nd2, j, Enum.at(nd, i))\n        n2 = Integer.undigits(nd3)\n        if n2 < lookup(tbl, :smallest), do: update(tbl, n2, i, j)\n      end\n    end\n\n    [lookup(tbl, :smallest), lookup(tbl, :smalli), lookup(tbl, :smallj)]\n  end\n\n  defp lookup(t, key) do\n    [{_, v}] = :ets.lookup(t, key)\n    v\n  end\n\n  defp update(t, smallest, smalli, smallj) do\n    :ets.insert(t, {:smallest, smallest})\n    :ets.insert(t, {:smalli, smalli})\n    :ets.insert(t, {:smallj, smallj})\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78338,"user_id":null,"body":"defmodule Tosmallest do\n\n  def smallest(n) do\n    ns = Integer.digits(n)\n    l = length(ns)\n    for i <- 0..l, j <- 0..l do\n      [replace(ns, i, j), i, j]\n    end |> Enum.min\n  end\n  \n  def replace(ns, i, j) do\n    l = length(ns)\n    d = Enum.at(ns, i)\n    if i <= j do\n      Enum.slice(ns, 0, i) ++ Enum.slice(ns, i+1, j-i) ++ [d] ++ Enum.slice(ns, j-i+1, l-j)\n    else\n      Enum.slice(ns, 0, j) ++ [d] ++ Enum.slice(ns, j, i-j) ++ Enum.slice(ns, i+1, l-i)\n    end |> Enum.join |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78339,"user_id":null,"body":"defmodule Tosmallest do\n\n  def smallest(n), do: get_smallest(Integer.digits(n))\n\n  defp get_smallest(seq) do\n    swapped_seq = for first <- 0..length(seq) - 1,\n                      second <- 0..length(seq) - 1, do:\n                        {swap_indexes(seq, first, second), first, second}\n    swapped_seq\n    |> Enum.map(fn {nums, first, second} -> [Integer.undigits(nums), first, second] end)\n    |> Enum.min\n  end\n\n  defp swap_indexes(seq, first, second) do\n    seq\n    |> List.delete_at(first)\n    |> List.insert_at(second, Enum.at(seq, first))\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"573acc8cffc3d13f61000533":[{"id":78340,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    case Enum.random(1..100) do\n      n when n <= 22 -> 6\n      _n -> Enum.random(1..5)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78341,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    if :random.uniform(100) <= 22 do\n      6\n    else\n      Enum.random(1..5)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78342,"user_id":676,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    case :rand.uniform(100) do\n      x when x in 1..22 -> 6\n      _ -> :rand.uniform(5)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78343,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    r = :rand.uniform_real\n    if r >= 0.78, do: 6, else: 1 + floor(r\/0.156)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78344,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    n = Enum.random(1..500)\n    res = div(n,78) + 1\n    if res > 6, do: 6, else: res\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78345,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    if :rand.uniform(100) > 22 do\n      :rand.uniform(5)\n    else\n      6\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78346,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    if Enum.random(1..100) \/ 100 <= 0.22, do: 6, else: Enum.random(1..5)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78347,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    cond do\n      :rand.uniform(100) <= 22 ->\n        6\n      true ->\n        :rand.uniform(5)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78348,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n    random_number = :rand.uniform(100)\n    if random_number <= 22 do\n      6\n    else\n      :rand.uniform(5)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78349,"user_id":null,"body":"defmodule DiceRoller do\n  def throw_rigged do\n   Enum.min([trunc(Enum.random(0..999)\/ 156 + 1), 6])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57591ef494aba64d14000526":[{"id":78350,"user_id":null,"body":"defmodule Johnann do\n  \n  def john(n), do: elem(_acc(n), 1) |> Map.values\n  def ann(n),  do: elem(_acc(n), 2) |> Map.values\n\n  def sum_john(n), do: john(n) |> Enum.sum\n  def sum_ann(n),  do: ann(n)  |> Enum.sum\n\n  defp _acc(0), do: {0, %{0 => 0}, %{0 => 1}}\n  defp _acc(n) do\n    {1, %{0 => 0, 1 => 0}, %{0 => 1, 1 => 1}}\n    |> Stream.iterate(fn {i, john, ann} ->\n        j = i - ann[john[i - 1]]\n        a = i - john[ann[i - 1]]\n        {i + 1, Map.put(john, i, j), Map.put(ann, i, a)}\n    end)\n    |> Enum.at(n - 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78351,"user_id":2098,"body":"defmodule Johnann do\n  def john(n), do: Map.values(elem(johnann(n), 1))\n  def ann(n), do: Map.values(elem(johnann(n), 2))\n\n  def sum_john(n), do: Enum.sum(john(n))\n  def sum_ann(n), do: Enum.sum(ann(n))\n\n  defp johnann(0), do: {0, %{0 => 0}, %{0 => 1}}\n  defp johnann(n) do\n    Stream.iterate({1, %{0 => 0, 1 => 0}, %{0 => 1, 1 => 1}}, fn {i, j, a} ->\n        {i + 1, Map.put(j, i, i - a[j[i - 1]]), Map.put(a, i, i - j[a[i - 1]])}\n    end) |> Enum.at(n - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78352,"user_id":492,"body":"defmodule Johnann do\n\n  defp johnann1(n) do\n    {_, _, res1, res2} = _johnann(n, n, Map.new, Map.new)\n    [Map.values(res1) |> Enum.sort | [ Map.values(res2) |> Enum.sort ]]\n  end\n  defp _johnann(0, 0, ann, john) do\n    {1, 0, Map.put(ann, 0, 1), Map.put(john, 0, 0)}\n  end\n  defp _johnann(n, n, ann, john) do\n      {a1, j1, a1_ann, j1_john} = _johnann(n - 1, n - 1, ann, john)\n      j = n - Map.get(a1_ann, j1)\n      k = Map.put_new(j1_john, n, j)\n      a = n - Map.get(k, a1)\n      l = Map.put_new(a1_ann, n, a)\n      {a, j, l, k}\n  end\n  \n  def john(n) when n >= 1 do\n    johnann1(n - 1) |> Enum.at(1)\n  end\n  def ann(n) when n >= 1 do\n    johnann1(n - 1) |> Enum.at(0)\n  end\n  \n  def sum_john(n) when n >= 1 do\n    johnann1(n - 1) |> Enum.at(1) |> Enum.sum\n  end\n  def sum_ann(n) when n >= 1 do\n    johnann1(n - 1) |> Enum.at(0) |> Enum.sum\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78353,"user_id":null,"body":"defmodule Johnann do\n  def john(n) when n >= 1 do\n    t = tbl()\n    expand_ann_john(t, n)\n    for i <- 0..(n - 1), do: lookup(t, {:john_katas, i})\n  end\n\n  def ann(n) when n >= 1 do\n    t = tbl()\n    expand_ann_john(t, n)\n    for i <- 0..(n - 1), do: lookup(t, {:ann_katas, i})\n  end\n\n  def sum_john(n) when n >= 1, do: john(n) |> Enum.sum()\n  def sum_ann(n) when n >= 1, do: ann(n) |> Enum.sum()\n\n  def expand_ann_john(t, n) do\n    for i <- lookup(t, :days)..(n - 1) do\n      :ets.insert(\n        t,\n        {{:john_katas, i}, i - lookup(t, {:ann_katas, lookup(t, {:john_katas, i - 1})})}\n      )\n\n      :ets.insert(\n        t,\n        {{:ann_katas, i}, i - lookup(t, {:john_katas, lookup(t, {:ann_katas, i - 1})})}\n      )\n    end\n\n    :ets.insert(t, {:days, n})\n  end\n\n  def tbl do\n    t = :ets.whereis(:tbl)\n\n    if t == :undefined do\n      t2 = :ets.new(:tbl, [:named_table])\n      :ets.insert(t2, {{:ann_katas, 0}, 1})\n      :ets.insert(t2, {{:john_katas, 0}, 0})\n      :ets.insert(t2, {:days, 1})\n      t2\n    else\n      t\n    end\n  end\n\n  def lookup(t, key) do\n    [{_, v}] = :ets.lookup(t, key)\n    v\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78354,"user_id":null,"body":"defmodule Johnann do\n  @initial %{\n    0 => {0,1},\n    1 => {0,1}\n  }\n  \n  def john(n) do\n    katas()\n    |> find_day(n)\n    |> Enum.map(fn {_, {j, _}} -> j end)\n  end\n  \n  def ann(n) do\n    katas()\n    |> find_day(n)\n    |> Enum.map(fn {_, {_, a}} -> a end)\n  end\n  \n  def sum_john(n) do\n    n |> john() |> Enum.sum\n  end\n  \n  def sum_ann(n) do\n    n |> ann() |> Enum.sum\n  end\n  \n  def katas do\n    Stream.unfold({0, @initial}, fn  curr = {n, map} -> \n      %{^n => {day_j, day_a}} = map\n      %{^day_j => {_, sub_j}} = map\n      %{^day_a => {sub_a, _}} = map\n\n      n = n + 1\n      map = Map.put_new(map, n, {n - sub_j, n - sub_a})\n      nxt = {n, map}\n      {curr, nxt}\n    end)\n  end\n  \n  def find_day(katas, n) do\n    day = n - 1\n    \n    katas\n    |> Enum.find(fn \n      {^day, _} -> true\n      _         -> false\n    end)\n    |> elem(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78355,"user_id":53,"body":"defmodule Johnann do\n  \n  defp walk(n), do: walk(n, 1, %{0 => 0}, %{0 => 1})\n  defp walk(n, i, xs, ys) when i >= n, do: [Map.values(ys), Map.values(xs)]\n  defp walk(n, i, xs, ys) do\n    x1 = Map.get(xs, i - 1)\n    x2 = Map.get(ys, x1)\n    xs2 = Map.put(xs, i, i - x2)\n    y1 = Map.get(ys, i - 1)\n    y2 = Map.get(xs2, y1)\n    ys2 = Map.put(ys, i, i - y2)\n    walk(n, i + 1, xs2, ys2)\n  end\n  \n  def john(n), do: Enum.at(walk(n), 1)\n  def ann(n), do: Enum.at(walk(n), 0)\n  def sum_john(n), do: Enum.sum(john(n))\n  def sum_ann(n), do: Enum.sum(ann(n))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78356,"user_id":null,"body":"defmodule Johnann do\n  \n\n \n  def j(0), do: 0\n  def j(n) do\n    [{_, val}] = \n    with [] <- :ets.lookup(:j, n) do\n      val = n - a(j(n - 1))\n      :ets.insert(:j, {n, val})\n      [{n, val}]\n    end\n  \n    val\n  end\n  \n  def a(0), do: 1\n  def a(n) do\n    [{_, val}] = \n    with [] <- :ets.lookup(:a, n) do\n      val = n - j(a(n - 1))\n      :ets.insert(:a, {n, val})\n      [{n, val}]\n    end\n  \n    val\n  end\n  \n  def john(n) do\n    if :undefined == :ets.whereis(:j) do\n      :ets.new(:j, [:named_table])\n      :ets.new(:a, [:named_table])\n    end\n  \n    0..n\n      |> Enum.map(&j\/1)\n      |> IO.inspect()\n      |> Enum.take(n)\n  end\n  \n  def ann(n) do\n    if :undefined == :ets.whereis(:a) do\n      :ets.new(:j, [:named_table])\n      :ets.new(:a, [:named_table])\n    end\n  \n    0..n\n      |> Enum.map(&a\/1)\n      |> IO.inspect()\n      |> Enum.take(n)\n  end\n  \n  def sum_john(n) when n >= 1 do\n    john(n)\n    |> Enum.sum()\n  end\n  def sum_ann(n) when n >= 1 do\n    ann(n)\n    |> Enum.sum()\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78357,"user_id":null,"body":"defmodule Johnann do\n    @size 50_000\n    @seq 1..@size-1\n    |> Enum.reduce([\n        0, 1,\n        :array.set(0,0,:array.new(@size)),\n        :array.set(0,1,:array.new(@size))\n    ], fn n,[x1,x2,a,b] ->\n        t1 = n-:array.get(x1,b)\n        a = :array.set(n,t1,a)\n        t2 = n-:array.get(x2,a)\n        [t1,t2,a,:array.set(n,t2,b)]\n    end)\n    |> Enum.drop(2)\n    |> Enum.map(&:array.to_list\/1)\n    |> List.to_tuple\n\n    def john(n), do: @seq |> elem(0) |> Enum.take(n)\n    def ann(n), do: @seq |> elem(1) |> Enum.take(n)\n\n    def sum_john(n), do: n |> john |> Enum.sum\n    def sum_ann(n), do: n |> ann |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78358,"user_id":null,"body":"defmodule Johnann do\n\n  def katas_history(0), do: %{0 => %{ann: 1, john: 0}}\n\n  def katas_history(n) do\n    with history                     <- katas_history(n - 1),\n         %{ann: t_ann, john: t_john} <- Map.fetch!(history, n - 1),\n         %{ann: k_ann}               <- Map.fetch!(history, t_john),\n         history_with_john           <- Map.put_new(history, n, %{ann: nil, john: n - k_ann}),\n         %{john: k_john}             <- Map.fetch!(history_with_john, t_ann),\n         history_n                   <- Map.put_new(history, n, %{ann: n - k_john, john: n - k_ann})\n    do\n      history_n\n    end\n  end\n\n  def ann(0), do: 1\n  def ann(n) do\n    katas_history(n - 1)\n    |> Enum.map(fn {_, %{ann: ann}} -> ann end)\n  end\n\n  def john(0), do: 0\n  def john(n) do\n    katas_history(n - 1)\n    |> Enum.map(fn {_, %{john: john}} -> john end)\n  end\n\n  def sum_ann(n), do: ann(n) |> Enum.sum\n  def sum_john(n), do: john(n) |> Enum.sum\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78359,"user_id":null,"body":"defmodule Johnann do\n  import Process\n\n  def ann(n), do: 0..(n-1) |> Enum.map(&calc_ann\/1)\n  def john(n), do: 0..(n-1) |> Enum.map(&calc_john\/1)\n\n  def sum_john(n) when n >= 1, do: john(n) |> Enum.sum\n  def sum_ann(n) when n >= 1, do: ann(n) |> Enum.sum\n\n  def calc_ann(0), do: 1\n  def calc_ann(1), do: 1\n  def calc_ann(n) do\n    case get ({:calc_ann, n}) do\n      nil ->\n        result = n - calc_john(calc_ann(n-1))\n        put({:calc_ann, n}, result)\n        result\n      found -> found\n    end\n  end\n\n  def calc_john(0), do: 0\n  def calc_john(1), do: 0\n  def calc_john(n) do\n    case get ({:calc_john, n}) do\n      nil ->\n        result = n - calc_ann(calc_john(n-1))\n        put({:calc_john, n}, result)\n        result\n      found -> found\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5765870e190b1472ec0022a2":[{"id":78360,"user_id":null,"body":"defmodule Kata do\n    @peers [{-1, 0}, {0, -1}, {0, 1}, {1, 0}]\n\n    defp traverse(grid, tx, ty, x, y), do:\n        x == tx and y == ty or\n        :ets.insert(grid, {{x, y}, \"0\"}) and Enum.any?(@peers, fn {i, j} ->\n            case :ets.lookup(grid, {x+i, y+j}) do\n                [{_k, \".\"}] -> traverse(grid, tx, ty, x+i, y+j)\n                _ -> false\n            end\n        end)\n\n    def path_finder(maze) do\n        grid = :ets.new(:grid, [])\n        {x, y} = maze\n            |> String.graphemes\n            |> Enum.reduce({0, 0},\n                fn \"\n\", {i, _j} -> {i+1, 0}\n                    c, {i, j} -> :ets.insert(grid, {{i, j}, c}); {i, j+1}\n                end)\n\n        traverse(grid, x, y-1, 0, 0)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78361,"user_id":null,"body":"defmodule Kata do\n  @dirs [{0, -1}, {0, 1}, {1, 0}, {-1, 0}]\n\n  def path_finder(maze) do\n    spaces =\n      String.split(maze, \"\n\")\n      |> Enum.with_index()\n      |> Enum.flat_map(fn {row, i} ->\n        to_charlist(row)\n        |> Enum.with_index()\n        |> Enum.filter(fn {cell, _} -> cell == ?. end)\n        |> Enum.map(fn {_, j} -> {i, j} end)\n      end)\n      |> :sets.from_list()\n\n    maze2 = String.split(maze, \"\n\")\n    cols = hd(maze2) |> String.length()\n    search(spaces, :sets.new(), :queue.from_list([{0, 0}]), {length(maze2) - 1, cols - 1})\n  end\n\n  def search(spaces, visited, queue, goal) do\n    if :queue.is_empty(queue) do\n      false\n    else\n      {{:value, {row, col}}, queue2} = :queue.out_r(queue)\n\n      if {row, col} == goal do\n        true\n      else\n        visited2 = :sets.add_element({row, col}, visited)\n        {goalrow, goalcol} = goal\n\n        queue3 =\n          Enum.reduce(@dirs, queue2, fn {dirrow, dircol}, qq ->\n            next = {row + dirrow, col + dircol}\n\n            if !:sets.is_element(next, visited2) && :sets.is_element(next, spaces),\n              do: :queue.in(next, qq),\n              else: qq\n          end)\n\n        search(spaces, visited2, queue3, goal)\n      end\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78362,"user_id":null,"body":"defmodule Kata do\n  @dirs [{0, -1}, {0, 1}, {1, 0}, {-1, 0}]\n\n  def path_finder(maze) do\n    spaces =\n      String.split(maze, \"\n\")\n      |> Enum.with_index()\n      |> Enum.flat_map(fn {row, i} ->\n        to_charlist(row)\n        |> Enum.with_index()\n        |> Enum.filter(fn {cell, _} -> cell == ?. end)\n        |> Enum.map(fn {_, j} -> {i, j} end)\n      end)\n      |> :sets.from_list()\n\n    maze2 = String.split(maze, \"\n\")\n    cols = hd(maze2) |> String.length()\n    search(spaces, :sets.new(), :queue.from_list([{0, 0}]), {length(maze2) - 1, cols - 1})\n  end\n\n  def search(spaces, visited, queue, goal) do\n    if :queue.is_empty(queue) do\n      false\n    else\n      {{:value, {row, col}}, queue2} = :queue.out_r(queue)\n\n      if {row, col} == goal do\n        true\n      else\n        visited2 = :sets.add_element({row, col}, visited)\n        {goalrow, goalcol} = goal\n\n        queue3 =\n          Enum.reduce(@dirs, queue2, fn {dirrow, dircol}, qq ->\n            nextrow = row + dirrow\n            nextcol = col + dircol\n\n            if !:sets.is_element({nextrow, nextcol}, visited2) &&\n                 :sets.is_element({nextrow, nextcol}, spaces),\n               do: :queue.in({nextrow, nextcol}, qq),\n               else: qq\n          end)\n\n        search(spaces, visited2, queue3, goal)\n      end\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78363,"user_id":null,"body":"defmodule Kata do\n  @dirs [{0, -1}, {0, 1}, {1, 0}, {-1, 0}]\n\n  def path_finder(maze) do\n    spaces =\n      String.split(maze, \"\n\")\n      |> Enum.with_index()\n      |> Enum.flat_map(fn {row, i} ->\n        to_charlist(row)\n        |> Enum.with_index()\n        |> Enum.filter(fn {cell, _} -> cell == ?. end)\n        |> Enum.map(fn {_, j} -> {i, j} end)\n      end)\n      |> :sets.from_list()\n\n    maze2 = String.split(maze, \"\n\")\n    cols = hd(maze2) |> String.length()\n    search(spaces, :sets.new(), :queue.from_list([{0, 0}]), {length(maze2) - 1, cols - 1})\n  end\n\n  def search(spaces, visited, queue, goal) do\n    if :queue.is_empty(queue) do\n      false\n    else\n      {{:value, {row, col}}, queue2} = :queue.out_r(queue)\n\n      if {row, col} == goal do\n        true\n      else\n        visited2 = :sets.add_element({row, col}, visited)\n        {goalrow, goalcol} = goal\n\n        queue3 =\n          Enum.reduce(@dirs, queue2, fn {dirrow, dircol}, qq ->\n            nextrow = row + dirrow\n            nextcol = col + dircol\n\n            if nextrow >= 0 && nextrow <= goalrow && nextcol >= 0 && nextcol <= goalcol &&\n                 !:sets.is_element({nextrow, nextcol}, visited2) &&\n                 :sets.is_element({nextrow, nextcol}, spaces),\n               do: :queue.in({nextrow, nextcol}, qq),\n               else: qq\n          end)\n\n        search(spaces, visited2, queue3, goal)\n      end\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78364,"user_id":null,"body":"defmodule Kata do\n\n  def path_finder(maze) do\n    grid = build_grid(maze) \n    path = find_path(grid, {0, 0}, MapSet.new())\n    \n    Enum.max(grid) in path\n  end\n\n  defp build_grid(str) do\n    lines = String.split(str, \"\n\", trim: true)\n\n    for {line, row}  <- Enum.with_index(lines), \n        {state, col} <- Enum.with_index(String.to_charlist(line)),\n        state != ?W,\n        reduce: MapSet.new() do  \n          acc -> MapSet.put(acc, {col, row})\n        end      \n  end\n\n  defp edges({x, y}) do\n    [ \n      {x - 1, y},\n      {x + 1, y},\n      {x, y + 1},\n      {x, y - 1}\n    ]\n  end\n  \n  defp find_path(paths, pos, seen) do\n    maybe_moves = \n      pos \n      |> edges\n      |> Enum.filter(&(&1 in paths and &1 not in seen))\n\n    case maybe_moves do\n      [] -> MapSet.put(seen, pos)\n      moves -> Enum.reduce(moves, seen, fn move, acc -> find_path(paths, move, MapSet.put(acc, pos)) end)\n    end\n  end\n    \n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78365,"user_id":null,"body":"# if you struggle with your code's performance here's a hint:\n# remember that you can access erlang's standard library from elixir\n\ndefmodule Kata do\n\n  def path_finder(maze) do\n    paths = build_grid(maze) \n    find_path(paths, {0, 0}, Enum.max(paths))\n  end\n\n  defp build_grid(str) do\n    lines = String.split(str, \"\n\", trim: true)\n\n    for {line, row}  <- Enum.with_index(lines), \n        {state, col} <- Enum.with_index(String.to_charlist(line)),\n        state != ?W,\n        reduce: MapSet.new() do  \n          acc -> MapSet.put(acc, {col, row})\n        end      \n  end\n  \n  defp find_path(paths, start, goal) do\n   path = search(paths, {0, 0}, MapSet.new())\n   \n   goal in path\n  end\n  \n  defp search(paths, pos, seen) do\n    maybe_move = \n      pos \n      |> edges\n      |> Enum.filter(&(&1 in paths and not &1 in seen))\n    \n    cond do \n      maybe_move == [] -> MapSet.put(seen, pos)\n      maybe_move in seen -> seen\n      true -> Enum.reduce(maybe_move, seen, fn move, acc -> search(paths, move, MapSet.put(acc, pos)) end)\n    end\n  end\n    \n  defp edges({x, y}) do\n    [      \n      {x - 1, y},\n      {x + 1, y},\n      {x, y + 1},\n      {x, y - 1}\n    ]\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78366,"user_id":250,"body":"defmodule Kata do\n    def step(_maze, stack) when length(stack) == 0 do\n      false\n    end\n   \n    def step(maze, stack) do\n      [c | rest] = stack\n      max = length(Enum.at(maze, 0))\n      \n      x = elem(c, 0)\n      y = elem(c, 1)\n      \n      if x == max - 1 && y == max - 1 do\n        true\n      else\n        rest = if max > x+1 && Enum.at(Enum.at(maze, y), x+1) == \".\" do\n            [{x + 1, y}] ++ rest\n          else\n            rest\n          end\n\n        rest = if max > y+1 && Enum.at(Enum.at(maze, y+1), x) == \".\" do\n            [{x, y + 1}] ++ rest\n          else\n            rest\n          end\n          \n        rest = if 0 < x && Enum.at(Enum.at(maze, y), x-1) == \".\" do\n            [{x - 1, y}] ++ rest\n          else\n            rest\n          end\n          \n        rest = if 0 < y && Enum.at(Enum.at(maze, y-1), x) == \".\" do\n            [{x, y - 1}] ++ rest\n          else\n            rest\n          end\n\n        m = update_in maze, [Access.at(y), Access.at(x)], fn _ -> \"*\" end\n\n        step m, rest\n      end\n    end\n    \n    def path_finder(maze) do\n      m = String.split(maze, \"\n\")\n        |> Enum.map(fn c -> String.codepoints(c) end)\n        \n      step m, [{0, 0}]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5772382d509c65de7e000982":[{"id":78367,"user_id":null,"body":"defmodule Fibkind do\n  def length_sup_u_k(n, k) do\n    gen(n)\n    |> Enum.count(fn {_,v} -> v >= k end)\n  end\n\n  def comp(n) do\n    u = gen(n)\n    for i <- 2..n,\n      u[i] < u[i-1] do\n      n\n     end |> length\n  end\n\n  def gen(n) do\n    gen(%{1=>1, 2=>1}, 3, n)\n  end\n  def gen(u, n, maxn) when n > maxn, do: u\n  def gen(u, n, maxn) do\n    gen(Map.put(u,n,u[n-u[n-1]]+u[n-u[n-2]]), n+1,maxn)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78368,"user_id":53,"body":"defmodule Fibkind do\n\n  def length_sup_u_k(n, k) do\n    Map.values(seq(n))\n      |> Enum.count(fn x -> x >= k end) \n  end\n\n  def comp(n) do\n    hs = seq(n)\n    Map.keys(seq(n))\n      |> Enum.filter(fn x -> x > 0 end) \n      |> Enum.count(fn n -> Map.get(hs, n) < Map.get(hs, n-1) end)\n  end\n\n  defp seq(n) when n <= 2, do: 1\n  defp seq(n), do: seq_aux(%{0 => 0, 1 => 1, 2 => 1}, 3, n)\n  defp seq_aux(seq, i, n) do\n    cond do\n      i > n -> seq\n      true  -> a = Map.get(seq, i - Map.get(seq, i - 1))\n               b = Map.get(seq, i - Map.get(seq, i - 2))\n               x = a + b\n               seq_aux(Map.put_new(seq, i, x), i + 1, n)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78369,"user_id":2098,"body":"defmodule Fibkind do\n  def length_sup_u_k(n, k) do\n    {result, _} = uu(n)\n    Enum.reduce(result, 0, fn({_, value}, cnt) -> if (value >= k), do: cnt + 1, else: cnt end)\n  end\n\n  def comp(n) do\n    {_, c} = uu(n)\n    c\n  end\n  \n  defp uu(n), do: u(n + 1, 3, { %{1=>1, 2=>1}, 0 })\n  defp u(n, i, {acc, c}) when n == i, do: {acc, c}\n  defp u(n, i, {acc, c}) do\n    a = Map.get(acc, i - 1)\n    b = Map.get(acc, i - a) + Map.get(acc, i - Map.get(acc, i - 2))\n    \n    if (b < a) do \n      u(n, i + 1, {Map.put_new(acc, i, b), c + 1})\n    else \n      u(n, i + 1, {Map.put_new(acc, i, b), c}) \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78370,"user_id":492,"body":"defmodule Fibkind do\n\n    defp u1(n), do: _u(n + 1, 3, { %{1=>1, 2=>1}, 0 })\n    defp _u(n, i, {acc, twist}) when n == i do {acc, twist} end\n    defp _u(n, i, {acc, twist}) do\n        a = Map.get(acc, i - 1)\n        a1 = i - a\n        a2 = i - Map.get(acc, i - 2)\n        b = Map.get(acc, a1) + Map.get(acc, a2)\n        if (b < a) do _u(n, i + 1, {Map.put_new(acc, i, b), twist + 1})\n        else _u(n, i + 1, {Map.put_new(acc, i, b), twist}) end\n    end\n\n    def length_sup_u_k(n, k) do\n        {res, _} = u1(n)\n        Enum.reduce(res, 0, \n            fn({_, value}, cnt) ->\n                if (value >= k) do cnt + 1 else cnt end\n        end)\n    end\n\n    def comp(n) do\n        {_, twist} = u1(n)\n        twist\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78371,"user_id":null,"body":"defmodule Fibkind do\n  def length_sup_u_k(n, k) do\n    t = tbl\n    extend_useq(t, n)\n    Enum.count(0..n, fn i -> lookup(t, i) >= k end)\n  end\n\n  def comp(n) do\n    t = tbl\n    extend_useq(t, n)\n\n    Enum.map(0..n, fn i -> lookup(t, i) end)\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.count(fn [a, b] -> b < a end)\n  end\n\n  defp extend_useq(t, n) do\n    size = lookup(t, :size)\n\n    for i <- size..n,\n        do: :ets.insert(t, {i, lookup(t, i - lookup(t, i - 1)) + lookup(t, i - lookup(t, i - 2))})\n\n    :ets.insert(t, {:size, n + 1})\n  end\n\n  defp lookup(t, key) do\n    [{_, v}] = :ets.lookup(t, key)\n    v\n  end\n\n  defp tbl do\n    t = :ets.whereis(:tbl)\n\n    if t == :undefined do\n      t2 = :ets.new(:tbl, [:named_table])\n      :ets.insert(t2, {0, 0})\n      :ets.insert(t2, {1, 1})\n      :ets.insert(t2, {2, 1})\n      :ets.insert(t2, {:size, 3})\n      t2\n    else\n      t\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78372,"user_id":null,"body":"defmodule Fibkind do\n\n    def length_sup_u_k(n, k) do\n        # your code       \n        u = Enum.reduce(3..n, %{1 => 1, 2 => 1}, fn x, acc ->\n          a1 = x - acc[x-1]\n          a2 = x - acc[x-2]\n          Map.put_new(acc, x, acc[a1] + acc[a2])\n        end)\n        \n        u\n        |> Map.to_list()\n        |> Enum.filter(fn {_index, val} -> val >= k end)\n        |> Enum.count()\n    end\n\n    def comp(n) do\n        # your code\n        u = Enum.reduce(3..n, %{1 => 1, 2 => 1}, fn x, acc ->\n          a1 = x - acc[x-1]\n          a2 = x - acc[x-2]\n          Map.put_new(acc, x, acc[a1] + acc[a2])\n        end)\n        \n        u\n        |> Map.to_list()\n        |> Enum.filter(fn {index, val} -> index > 1 and u[index] < u[index-1] end)\n        |> Enum.count()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78373,"user_id":null,"body":"defmodule Fibkind do\n   defp u_mem(n, mem \\\\ %{1 => 1, 2 => 1}) do\n\t\tif Map.has_key?(mem, n) do\n\t\t\t{ mem[n], mem }\n\t\telse\n\t\t\t{ r1, mem } = u_mem(n - 1, mem)\n\t\t\t{ t1, mem } = u_mem(n - r1, mem)\n\t\t\t{ r2, mem } = u_mem(n - 2, mem)\n\t\t\t{ t2, mem } = u_mem(n - r2, mem)\n\t\t\tresult = t1 + t2\n\t\t\t{ result, Map.put(mem, n, result) }\n\t\tend\n\tend\n\tdef u(n) do\n\t\t{ result, _ } = u_mem(n)\n\t\tresult\n\tend\n\tdef length_sup_u_k(n, k) do\n\t\t{ _, mem } = u_mem(n)\n\t\tlength(Enum.filter(1..n, fn x ->\n\t\t\t{ res, _ } = u_mem(x, mem)\n\t\t\tres >= k\n\t\tend))\n\tend\n\n\tdef comp(n) do\n\t\t{ _, mem } = u_mem(n)\n\t\tx = Stream.map(1..n, fn x ->\n\t\t\t{ res, _ } = u_mem(x, mem)\n\t\t\tres\n\t\tend)\n\t\t|> Stream.chunk_every(2, 1, :discard)\n\t\t|> Enum.reduce(0, fn elem, acc ->\n\t\t\t[a, b] = elem\n\t\t\tif a > b, do: acc + 1, else: acc\n\t\tend)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78374,"user_id":null,"body":"defmodule Fibkind do\n\ndef length_sup_u_k(n, k) do\n        generate(n)\n        |> Enum.count(fn {_, v} -> v >= k end)\n    end\n\n    def comp(n) do\n        u = generate(n)\n        for i <- 2..n,\n          u[i - 1] > u[i] do\n          i\n        end |> length\n    end\n    \n    @mem %{ 1 => 1, 2 => 1 }\n    def generate(n) do\n      generate(@mem, 3, n)\n    end\n    \n    def generate(u, n, max) when n > max, do: u\n    \n    def generate(u, n, max) do\n      Map.put(u, n, u[n - u[n - 1]] +  u[n - u[n - 2]])\n      |> generate(n + 1, max)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78375,"user_id":null,"body":"defmodule Fibkind do  \n \n  defp generate(n) when n <= 3, do: %{0 => 1, 1 => 1, 2 => 1, 3 => 2, 4 => 3}\n  defp generate(n) do\n   3..n\n      |> Enum.reduce(%{0 => 1, 1 => 1, 2 => 1}, fn(n, memo)->\n        value = Map.get(memo, n - Map.get(memo, n-1)) + Map.get(memo, n - Map.get(memo, n-2))\n        Map.put(memo, n, value)\n      end)\n  end\n  \n  defp mapize_generation(n) do\n    memo = generate(n)\n    1..n\n      |> Enum.map(&({&1, Map.get(memo, &1)}))\n  end\n  \n\n  def length_sup_u_k(n, k) do\n    mapize_generation(n)\n      |> Enum.filter(fn({i, a}) -> a >= k end)\n      |> length()\n  end\n\n  def comp(n) do\n     memo = generate(n)\n     1..n\n       |> Enum.filter(fn(i) -> Map.get(memo, i) < Map.get(memo, i - 1) end)\n       |> length()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78376,"user_id":null,"body":"defmodule Fibkind do\n\n  def generate(n) do\n    m = %{1 => 1, 2 => 1}\n    do_generate(m, 3, n)\n  end\n\n  def do_generate(m, i, n) when i > n, do: m\n\n  def do_generate(m, i, n) do\n    i1 = i - Map.fetch!(m, i - 1)\n    i2 = i - Map.fetch!(m, i - 2)\n    v = Map.fetch!(m, i1) + Map.fetch!(m, i2)\n    new_map = Map.put(m, i, v)\n    do_generate(new_map, i + 1, n)\n  end\n\n  def length_sup_u_k(n, k) do\n    generate(n)\n    |> Enum.count(fn {_k, v} -> v >= k end)\n  end\n\n  def comp(n) do\n    m = generate(n)\n    2..n\n    |> Enum.count(fn i -> Map.fetch!(m, i) < Map.fetch!(m, i - 1) end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"577a6e90d48e51c55e000217":[{"id":78377,"user_id":null,"body":"defmodule Collatz do\n  import Integer\n  \n  def hotpo(1), do: 0\n  def hotpo(n) when is_odd(n), do: 1 + hotpo(3*n + 1)\n  def hotpo(n) when is_even(n), do: 1 + hotpo(div(n, 2))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78378,"user_id":null,"body":"defmodule Collatz do\n  def hotpo(n) do\n    do_hotpo(n, 0)\n  end\n  \n  defp do_hotpo(1, acc), do: acc\n  defp do_hotpo(n, acc) when rem(n, 2) == 0,\n    do: do_hotpo(div(n, 2), acc + 1)\n  defp do_hotpo(n, acc),\n    do: do_hotpo(3 * n + 1, acc + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78379,"user_id":null,"body":"defmodule Collatz do\n  def hotpo(n),  do: hotpo(n, 0)\n\n  def hotpo(1, acc), do: acc\n  def hotpo(n, acc) when rem(n, 2) == 0, do: hotpo(div(n, 2), acc + 1)\n  def hotpo(n, acc), do: hotpo(n * 3 + 1, acc + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78380,"user_id":null,"body":"defmodule Collatz do\n  require Integer\n\n  def hotpo(n) do\n    n \n    |> Stream.iterate(&sequence\/1)\n    |> Enum.find_index(&(&1 == 1))\n  end\n  \n  defp sequence(n) when Integer.is_even(n), do: div(n, 2)\n  defp sequence(n) when Integer.is_odd(n), do: 3 * n + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78381,"user_id":null,"body":"defmodule Collatz do\n  import Integer, only: [is_even: 1, is_odd: 1]\n  \n  def hotpo(number) do\n    number\n    |> Stream.iterate(fn\n      n when is_even(n) -> div(n, 2)\n      n when is_odd(n) -> (3 * n) + 1\n    end)\n    |> Enum.find_index(&(&1 == 1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78382,"user_id":null,"body":"defmodule Collatz do\n  import Integer, only: [is_even: 1, is_odd: 1]\n  \n  def hotpo(n, acc \\\\ 0)\n  def hotpo(1, acc), do: acc\n  def hotpo(n, acc) when is_odd(n), do: hotpo(3 * n + 1, acc + 1)\n  def hotpo(n, acc) when is_even(n), do: hotpo(div(n, 2), acc + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78383,"user_id":null,"body":"defmodule Collatz do\n  import Integer\n  def hotpo(n, counter \\\\ 0)\n  def hotpo(1, counter), do: counter\n  def hotpo(n, counter) when is_even(n), do: hotpo(div(n,2), counter+1)\n  def hotpo(n, counter) when is_odd(n), do: hotpo(3*n+1, counter+1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78384,"user_id":527,"body":"defmodule Collatz do\n  require Integer\n\n  def hotpo(n) do\n    do_hotpo(n, 0)\n  end\n  \n  defp do_hotpo(1, i), do: i\n  defp do_hotpo(n, i) do\n    next_n = if Integer.is_even(n), do: div(n, 2), else: 3 * n + 1\n    do_hotpo(next_n, i + 1)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78385,"user_id":null,"body":"defmodule Collatz do\n  def hotpo(n), do: hotpo(n, 0)\n    \n  def hotpo(1, times), do: times\n  def hotpo(n, times) when rem(n,2) == 0, do: hotpo(div(n,2), times+1)\n  def hotpo(n, times), do: hotpo(3*n+1, times+1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78386,"user_id":null,"body":"defmodule Collatz do\n  def hotpo(n) do\n    hotpo(n, 0)\n  end\n  \n  defp hotpo(1, counter), do: counter\n  defp hotpo(n, counter) when rem(n, 2) == 0, do: hotpo(div(n, 2), counter + 1)\n  defp hotpo(n, counter), do: hotpo((3 * n + 1), counter + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"577a98a6ae28071780000989":[{"id":78387,"user_id":null,"body":"defmodule MinMax do\n  def minimum(list) do\n    Enum.min(list)\n  end\n  \n  def maximum(list) do\n    Enum.max(list)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78388,"user_id":null,"body":"defmodule MinMax do\n  def minimum(list), do: Enum.min(list)\n  \n  def maximum(list), do: Enum.max(list)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78389,"user_id":null,"body":"defmodule MinMax do\n  def minimum([]), do: nil\n  def minimum(list), do: _min(list)\n\n  defp _min([h | []]), do: h\n  defp _min([h | [a | t]]) when h > a, do: _min([a | t])\n  defp _min([h | [_a | t]]), do: _min([h | t])\n\n  def maximum([]), do: nil\n  def maximum(list), do: _max(list)\n\n  defp _max([h | []]), do: h\n  defp _max([h | [a | t]]) when h < a, do: _max([a | t])\n  defp _max([h | [_a | t]]), do: _max([h | t])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78390,"user_id":null,"body":"defmodule MinMax do\n  def minimum(list) do\n    list |> Enum.min\n  end\n  \n  def maximum(list) do\n    list |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78391,"user_id":null,"body":"defmodule MinMax do\n  def minimum(list) do\n    Enum.reduce list, &min\/2\n  end\n  \n  def maximum(list) do\n    Enum.reduce list, &max\/2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78392,"user_id":1249,"body":"defmodule MinMax do\n  defdelegate min(list), to: :lists\n  defdelegate max(list), to: :lists\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78393,"user_id":null,"body":"defmodule MinMax do\n  def minimum(list) do\n\t\tList.foldl(list, List.first(list), fn(acc, new) -> \n    \tif new < acc, do: new, else: acc\n    end)\n  end\n  \n  def maximum(list) do\n    # your code here\n\t\tList.foldl(list, List.first(list), fn(acc, new) -> \n    \tif new > acc, do: new, else: acc\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78394,"user_id":null,"body":"defmodule MinMax do\n  def minimum([]), do: nil\n  def minimum([e]), do: e\n  \n  def minimum([min | list]) do\n    find_comp(list, min, fn\n      e1, e2 when e1 < e2 -> e1\n      e1, e2 when e1 >= e2 -> e2\n    end)\n  end\n  \n  def maximum([]), do: nil\n  def maximum([e]), do: e\n  def maximum([e | list]) do\n    find_comp(list, e, fn\n      e1, e2 when e1 > e2 -> e1\n      e1, e2 when e1 <= e2 -> e2\n    end)\n  end\n  \n  defp find_comp([], min, _), do: min\n  defp find_comp([el | list], min, comp) do\n    find_comp(list, comp.(el, min), comp)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78395,"user_id":null,"body":"defmodule MinMax do\n\n  def minimum(list) do\n    list\n    |> Enum.sort\n    |> List.first\n  end\n  \n  def maximum(list) do\n    list\n    |> Enum.sort\n    |> Enum.reverse\n    |> List.first\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78396,"user_id":null,"body":"defmodule MinMax do\n  # Using this exercise to practice recursion.\n\n  # min\/2 conflicts with Kernel.min\/2, so passing off to _min\/2\n  def minimum(list), do: _min(list) \n  \n  defp _min(list, acc \\\\ nil)\n  defp _min([], acc), do: acc\n  defp _min([head | tail], nil), do: _min(tail, head)\n  defp _min([head | tail], acc) when head < acc, do: _min(tail, head)\n  defp _min([head | tail], acc) when head >= acc, do: _min(tail, acc)\n  \n  # max\/2 conflicts with Kernel.max\/2, so passing off to _max\/2\n  def maximum(list), do: _max(list)\n  \n  defp _max(list, acc \\\\ nil)\n  defp _max([], acc), do: acc\n  defp _max([head | tail], nil), do: _max(tail, head)\n  defp _max([head | tail], acc) when head > acc, do: _max(tail, head)\n  defp _max([head | tail], acc) when head <= acc, do: _max(tail, acc)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"577ff15ad648a14b780000e7":[{"id":78397,"user_id":null,"body":"defmodule Greeter do\n  @moduledoc \"\"\"\n  https:\/\/www.codewars.com\/kata\/577ff15ad648a14b780000e7\/train\/elixir\n  \"\"\"\n\n  @languages %{\n    \"english\" => \"Welcome\",\n    \"czech\" => \"Vitejte\",\n    \"danish\" => \"Velkomst\",\n    \"dutch\" => \"Welkom\",\n    \"estonian\" => \"Tere tulemast\",\n    \"finnish\" => \"Tervetuloa\",\n    \"flemish\" => \"Welgekomen\",\n    \"french\" => \"Bienvenue\",\n    \"german\" => \"Willkommen\",\n    \"irish\" => \"Failte\",\n    \"italian\" => \"Benvenuto\",\n    \"latvian\" => \"Gaidits\",\n    \"lithuanian\" => \"Laukiamas\",\n    \"polish\" => \"Witamy\",\n    \"spanish\" => \"Bienvenido\",\n    \"swedish\" => \"Valkommen\",\n    \"welsh\" => \"Croeso\"\n  }\n\n  @doc \"\"\"\n  Give it a language and it returns a greeting.\n\n  ## Examples:\n      iex> Greeter.greet(\"french\")\n      \"Bienvenue\"\n  \"\"\"\n  @spec greet(String.t) :: String.t\n  def greet(language) do\n    case Map.fetch(@languages, language) do\n      {:ok, greeting} -> greeting\n      :error -> \"Welcome\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78398,"user_id":null,"body":"defmodule Greeter do\n  def greet(language)\n  def greet(\"english\"), do: \"Welcome\"\n  def greet(\"czech\"), do: \"Vitejte\"\n  def greet(\"danish\"), do: \"Velkomst\"\n  def greet(\"dutch\"), do: \"Welkom\"\n  def greet(\"estonian\"), do: \"Tere tulemast\"\n  def greet(\"finnish\"), do: \"Tervetuloa\"\n  def greet(\"flemish\"), do: \"Welgekomen\"\n  def greet(\"french\"), do: \"Bienvenue\"\n  def greet(\"german\"), do: \"Willkommen\"\n  def greet(\"irish\"), do: \"Failte\"\n  def greet(\"italian\"), do: \"Benvenuto\"\n  def greet(\"latvian\"), do: \"Gaidits\"\n  def greet(\"lithuanian\"), do: \"Laukiamas\"\n  def greet(\"polish\"), do: \"Witamy\"\n  def greet(\"spanish\"), do: \"Bienvenido\"\n  def greet(\"swedish\"), do: \"Valkommen\"\n  def greet(\"welsh\"), do: \"Croeso\"\n  def greet(_), do: greet(\"english\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78399,"user_id":null,"body":"defmodule Greeter do\n  def greet(language) do\n    Map.get(languages(), String.to_atom(language), \"Welcome\")    \n  end\n  \n  defp languages do\n    %{\n      english: \"Welcome\",\n      czech: \"Vitejte\",\n      danish: \"Velkomst\",\n      dutch: \"Welkom\",\n      estonian: \"Tere tulemast\",\n      finnish: \"Tervetuloa\",\n      flemish: \"Welgekomen\",\n      french: \"Bienvenue\",\n      german: \"Willkommen\",\n      irish: \"Failte\",\n      italian: \"Benvenuto\",\n      latvian: \"Gaidits\",\n      lithuanian: \"Laukiamas\",\n      polish: \"Witamy\",\n      spanish: \"Bienvenido\",\n      swedish: \"Valkommen\",\n      welsh: \"Croeso\"\n    }\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78400,"user_id":null,"body":"defmodule Greeter do\n  @greetings %{\n    english: \"Welcome\",\n    czech: \"Vitejte\",\n    danish: \"Velkomst\",\n    dutch: \"Welkom\",\n    estonian: \"Tere tulemast\",\n    finnish: \"Tervetuloa\",\n    flemish: \"Welgekomen\",\n    french: \"Bienvenue\",\n    german: \"Willkommen\",\n    irish: \"Failte\",\n    italian: \"Benvenuto\",\n    latvian: \"Gaidits\",\n    lithuanian: \"Laukiamas\",\n    polish: \"Witamy\",\n    spanish: \"Bienvenido\",\n    swedish: \"Valkommen\",\n    welsh: \"Croeso\"\n  }\n\n  def greet(language) do\n    @greetings[String.to_atom(language)] || @greetings.english\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78401,"user_id":null,"body":"defmodule Greeter do\n  @greetings %{\n    \"english\" => \"Welcome\",\n    \"czech\" => \"Vitejte\",\n    \"danish\" => \"Velkomst\",\n    \"dutch\" => \"Welkom\",\n    \"estonian\" => \"Tere tulemast\",\n    \"finnish\" => \"Tervetuloa\",\n    \"flemish\" => \"Welgekomen\",\n    \"french\" => \"Bienvenue\",\n    \"german\" => \"Willkommen\",\n    \"irish\" => \"Failte\",\n    \"italian\" => \"Benvenuto\",\n    \"latvian\" => \"Gaidits\",\n    \"lithuanian\" => \"Laukiamas\",\n    \"polish\" => \"Witamy\",\n    \"spanish\" => \"Bienvenido\",\n    \"swedish\" => \"Valkommen\",\n    \"welsh\" => \"Croeso\"\n  }\n  \n  def greet(language), do: @greetings[language] || @greetings[\"english\"]\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78402,"user_id":null,"body":"defmodule Greeter do\n\n  @database %{\n    english: \"Welcome\",\n    czech: \"Vitejte\",\n    danish: \"Velkomst\",\n    dutch: \"Welkom\",\n    estonian: \"Tere tulemast\",\n    finnish: \"Tervetuloa\",\n    flemish: \"Welgekomen\",\n    french: \"Bienvenue\",\n    german: \"Willkommen\",\n    irish: \"Failte\",\n    italian: \"Benvenuto\",\n    latvian: \"Gaidits\",\n    lithuanian: \"Laukiamas\",\n    polish: \"Witamy\",\n    spanish: \"Bienvenido\",\n    swedish: \"Valkommen\",\n    welsh: \"Croeso\"\n    }\n\n  def greet(language) do\n    default = @database |> Map.get(:english)\n    @database |> Map.get(String.to_atom(language), default)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78403,"user_id":null,"body":"defmodule Greeter do\n  def greet(language) do    \n    db = %{english: \"Welcome\",czech: \"Vitejte\",danish: \"Velkomst\",dutch: \"Welkom\",estonian: \"Tere tulemast\",finnish: \"Tervetuloa\",flemish: \"Welgekomen\",french: \"Bienvenue\",german: \"Willkommen\",irish: \"Failte\",italian: \"Benvenuto\",latvian: \"Gaidits\",lithuanian: \"Laukiamas\",polish: \"Witamy\",spanish: \"Bienvenido\",swedish: \"Valkommen\",welsh: \"Croeso\"}\n    Map.get_lazy(db, String.to_atom(language), fn -> \"Welcome\" end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78404,"user_id":null,"body":"defmodule Greeter do\n  def greet(language) do\n  # Your code here\n  greetings = %{\n    \"english\" => \"Welcome\",\n    \"czech\"=>\"Vitejte\",\n    \"danish\"=>\"Velkomst\",\n    \"dutch\"=>\"Welkom\",\n    \"estonian\"=>\"Tere tulemast\",\n    \"finnish\"=>\"Tervetuloa\",\n    \"flemish\"=>\"Welgekomen\",\n    \"french\"=>\"Bienvenue\",\n    \"german\"=>\"Willkommen\",\n    \"irish\"=>\"Failte\",\n    \"italian\"=>\"Benvenuto\",\n    \"latvian\"=>\"Gaidits\",\n    \"lithuanian\"=>\"Laukiamas\",\n    \"polish\"=>\"Witamy\",\n    \"spanish\"=>\"Bienvenido\",\n    \"swedish\"=>\"Valkommen\",\n    \"welsh\"=>\"Croeso\"\n   }\n  greetings[language] || greetings[\"english\"]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78405,"user_id":null,"body":"defmodule Greeter do\n  def greet(language) do\n    langs = %{\n      \"english\" => \"Welcome\",\n      \"czech\" => \"Vitejte\",\n      \"danish\" => \"Velkomst\",\n      \"dutch\" => \"Welkom\",\n      \"estonian\" => \"Tere tulemast\",\n      \"finnish\" => \"Tervetuloa\",\n      \"flemish\" => \"Welgekomen\",\n      \"french\" => \"Bienvenue\",\n      \"german\" => \"Willkommen\",\n      \"irish\" => \"Failte\",\n      \"italian\" => \"Benvenuto\",\n      \"latvian\" => \"Gaidits\",\n      \"lithuanian\" => \"Laukiamas\",\n      \"polish\" => \"Witamy\",\n      \"spanish\" => \"Bienvenido\",\n      \"swedish\" => \"Valkommen\",\n      \"welsh\" => \"Croeso\"\n    }\n    Map.get(langs, language, \"Welcome\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78406,"user_id":null,"body":"defmodule Greeter do\n  @welcome_map %{\n    \"english\" => \"Welcome\",\n    \"czech\" => \"Vitejte\",\n    \"danish\" => \"Velkomst\",\n    \"dutch\" => \"Welkom\",\n    \"estonian\" => \"Tere tulemast\",\n    \"finnish\" => \"Tervetuloa\",\n    \"flemish\" => \"Welgekomen\",\n    \"french\" => \"Bienvenue\",\n    \"german\" => \"Willkommen\",\n    \"irish\" => \"Failte\",\n    \"italian\" => \"Benvenuto\",\n    \"latvian\" => \"Gaidits\",\n    \"lithuanian\" => \"Laukiamas\",\n    \"polish\" => \"Witamy\",\n    \"spanish\" => \"Bienvenido\",\n    \"swedish\" => \"Valkommen\",\n    \"welsh\" => \"Croeso\"\n  }\n\n  def greet(language) do\n    @welcome_map[language] || @welcome_map[\"english\"]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"578aa45ee9fd15ff4600090d":[{"id":78407,"user_id":null,"body":"defmodule Kata do\n  def sort_array(ls) do\n    ls\n    |> Enum.reject(&(rem(&1, 2) == 0))\n    |> Enum.sort\n    |> meger(ls)\n  end\n\n  def meger([], list), do: [] ++ list\n  def meger([h1|t1], [h2|t2]) when rem(h2, 2) == 0, do: [h2|meger([h1|t1], t2)]\n  def meger([h1|t1], [_|t2]), do: [h1|meger(t1, t2)]\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78408,"user_id":null,"body":"require Integer\n\ndefmodule Kata do\n    def sort_array(ls) do\n      evens = Enum.with_index(ls) |> Enum.filter(fn {num, _} -> Integer.is_even(num) end)\n      sorted = Enum.filter(ls, fn x -> Integer.is_odd(x) end) |> Enum.sort\n    \n      Enum.reduce(evens, sorted, fn {x,y}, acc -> List.insert_at(acc, y, x) end)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78409,"user_id":null,"body":"defmodule Kata do\n  import Integer, only: [is_odd: 1]\n\n  def sort_array(ls) do\n    # TODO: working solution\n    odds =\n      ls\n      |> Enum.filter(&is_odd(&1))\n      |> Enum.sort()\n\n    {sorted, []} =\n      Enum.map_reduce(ls, odds, fn\n        i, a when is_odd(i) ->\n          [i | a] = a\n          {i, a}\n\n        i, a ->\n          {i, a}\n      end)\n\n    IO.inspect(sorted)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78410,"user_id":null,"body":"defmodule Kata do\n    require Integer\n    def sort_array(ls) do\n        odds = ls\n          |> Enum.filter(&Integer.is_odd\/1)\n          |> Enum.sort\n          \n        ls\n          |> Enum.with_index\n          |> Enum.reduce(odds, fn\n            ({x, index}, acc) when Integer.is_even(x) -> \n              List.insert_at(acc, index, x)\n            (_, acc) -> acc\n          end)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78411,"user_id":null,"body":"defmodule Kata do\n    import Integer, only: [is_odd: 1]\n\n    def sort_array(ls) do\n        odds = ls |> Enum.filter(&is_odd\/1) |> Enum.sort\n        {sorted, []} = Enum.map_reduce ls, odds, fn\n            i,a when is_odd(i) -> [i|a] = a; {i,a}\n            i,a -> {i,a}\n        end\n        sorted\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78412,"user_id":null,"body":"defmodule Kata do\n  import Integer\n\n  def swapper(values,indexes, original_list, count)do\n    len = length(values)-1\n    case count <= len do\n      true ->\n        index = indexes |> Enum.at(count)\n        value = values |> Enum.at(count)\n        n_list = original_list |> List.replace_at(index, value)\n        n_count =count+1\n        swapper(values,indexes, n_list, n_count)\n      false -> original_list\n    end\n\n  end\n\n\n  def sort_array(ls)do\n    with_index = ls |> Enum.with_index()\n    odd_tuple = with_index |> Enum.filter(fn {item, _} -> item |> is_odd() end)\n    values = odd_tuple |> Enum.map(fn {item, _} -> item end) |> Enum.sort\n    indexes = odd_tuple |> Enum.map(fn {_, index} -> index end)\n    swapper(values,indexes,ls, 0)\n\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78413,"user_id":null,"body":"defmodule Kata do\n  def sort_array(ls) do\n    odds = ls\n      |> Enum.filter(fn x -> rem(x, 2) != 0 end)\n      |> Enum.sort()\n\n    {l, _} = Enum.map_reduce(ls, odds, fn x, acc ->\n      if rem(x, 2) != 0 do\n        [h | t] = acc\n        {h, t}\n      else\n        {x, acc}\n      end\n    end)\n    l\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78414,"user_id":null,"body":"defmodule Kata do\n    def sort_array(ls) do\n        {even, odd} = Enum.split_with(ls, &(rem(&1, 2) == 0))\n        \n        merge(ls, Enum.sort(odd), even)\n    end\n    \n    def merge(original, odd, even, acc \\\\ [])\n    \n    def merge([], [], [], acc) do\n      Enum.reverse(acc)\n    end\n    \n    def merge([ogh | ogr], odd, [evenh | evenr], acc) when abs(rem(ogh, 2)) == 0 do\n      merge(ogr, odd, evenr, [evenh | acc])\n    end\n    \n    def merge([ogh | ogr], [oddh | oddr], even, acc) when abs(rem(ogh, 2)) == 1 do\n      merge(ogr, oddr, even, [oddh | acc])\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78415,"user_id":null,"body":"\ndefmodule Kata do\n  require Integer\n\n  def sort_array(ls) do\n    odds = Enum.filter(ls, &Integer.is_odd\/1) |> Enum.sort()\n\n    Enum.reduce(ls, {[], odds}, fn x, {res, odds} ->\n      if Integer.is_odd(x), do: {res ++ [hd(odds)], Enum.drop(odds, 1)}, else: {res ++ [x], odds}\n    end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78416,"user_id":null,"body":"defmodule Kata do\n\n    def select(ls) do\n      ls \n        |> Enum.reject(fn x -> rem(x, 2) == 0 end)\n        |> Enum.sort\n    end\n  \n    def combine(ls, odd) do\n      case {ls, odd} do\n        {[x | tailx], [y | taily]} when rem(x, 2) != 0 -> [y] ++ combine(tailx, taily)\n        {[x | tailx], [y]} when rem(x, 2) != 0 -> [y] ++ tailx\n        {[x | tailx], _} -> [x] ++ combine(tailx, odd)\n        {[_], [y]} -> [y]\n        {[x], _} -> [x]\n        {[], []} -> []\n      end\n    end\n\n    def sort_array(ls) do\n      combine(ls, select(ls))\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a049e253ba33ac5e000212":[{"id":78417,"user_id":null,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n\tdef factorial(n) do\n\t\tEnum.reduce(1..n, &*\/2)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78418,"user_id":null,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n  def factorial(1), do: 1\n  def factorial(n), do: n * factorial(n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78419,"user_id":null,"body":"defmodule Factorial do\n def factorial(0), do: 1\n def factorial(n), do: 1..n |> Enum.reduce(&(&1 * &2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78420,"user_id":null,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n  def factorial(n) do\n    n * factorial(n-1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78421,"user_id":168,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n  def factorial(n) do\n    (1..n) |> Enum.reduce(&(&1 * &2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78422,"user_id":null,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n  def factorial(n) do\n    do_fac(n, 1)\n  end\n  \n  defp do_fac(1, res), do: res\n  defp do_fac(n, res), do: do_fac(n - 1, n * res)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78423,"user_id":null,"body":"defmodule Factorial do\n  def factorial(n) when n <= 1,\n    do: 1\n\n  def factorial(n) when n > 0,\n    do: n * factorial(n - 1)\n end","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78424,"user_id":null,"body":"defmodule Factorial do\n  def factorial(0), do: 1\n  def factorial(n) when n > 0 do\n    Enum.reduce(1..n, fn(x, y) -> x* y end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78425,"user_id":null,"body":"defmodule Factorial do\n  def factorial(n) do\n    if n < 1, do: 1, else: Enum.reduce(1..n, 1, & &1 * &2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78426,"user_id":null,"body":"defmodule Factorial do\n  def factorial(n) do\n    if n > 1, do: n * factorial(n - 1), else: 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a0885cbb9944e24c00008e":[{"id":78427,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s) do\n    String.replace(s, \"!\", \"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78428,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s), do: String.replace(s, \"!\", \"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78429,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s), do: s |> String.graphemes |> Enum.filter(&(&1 != \"!\")) |> Enum.join\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78430,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s) do\n    s |> String.split(\"!\") |> Enum.join(\"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78431,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s) do\n    # your code here\n    s\n    |> String.graphemes\n    |> Enum.filter(fn x -> x != \"!\" end)\n    |> List.to_string\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78432,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s), do: String.replace(s, ~r\/[!]\/, \"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78433,"user_id":102,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s), do: s |> String.to_charlist |> Enum.reject(fn x -> x == 33 end) |> List.to_string\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78434,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s) do\n    to_string(for <<c <- s>>, c != ?!, do: c)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78435,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(\"\"), do: \"\"\n  def remove_exclamation_marks(<<?!>> <> ls), do: remove_exclamation_marks(ls)\n  def remove_exclamation_marks(<<l>> <> ls), do: <<l>> <> remove_exclamation_marks(ls)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78436,"user_id":null,"body":"defmodule Codewars do\n  def remove_exclamation_marks(s) do\n    s |> String.replace(\"!\",\"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a0e5c372292dd76d000d7e":[{"id":78437,"user_id":364,"body":"defmodule Solution do\n\n  def repeat_str(n, s) do\n    String.duplicate(s, n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78438,"user_id":null,"body":"defmodule Solution do\n  def repeat_str(n, s), do: String.duplicate(s,n)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78439,"user_id":null,"body":"defmodule Solution do\n  def repeat_str(n, string, acc \\\\ \"\")\n  def repeat_str(0, _string, acc), do: acc\n  def repeat_str(n, string, acc), do: repeat_str(n - 1, string, acc <> string)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78440,"user_id":null,"body":"defmodule Solution do\n\n  def repeat_str(0, _s) do\n    \"\"\n  end\n\n  def repeat_str(n, s) do\n    s <> repeat_str(n-1, s)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78441,"user_id":null,"body":"defmodule Solution do\n  def repeat_str(0, _) do\n    \"\"\n  end\n  def repeat_str(n, s) do\n    s <> repeat_str(n-1,s)\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78442,"user_id":null,"body":"defmodule Solution do\n  def repeat_str(n, s), do: Enum.map_join(1..n, \"\", fn _ -> s end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78443,"user_id":null,"body":"defmodule Solution do\n\n  def repeat_str(n, s) do\n    1..n |> Enum.reduce(\"\", fn _, acc -> acc <> s end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78444,"user_id":null,"body":"defmodule Solution do\n\n  def repeat_str(n, s) do\n    _repeat_str(n, s, \"\")\n  end\n  \n  defp _repeat_str(0, _s, acc) do\n    acc\n  end\n  \n  defp _repeat_str(n, s, acc) do\n    \n    _repeat_str(n-1, s, acc <> s)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78445,"user_id":null,"body":"defmodule Solution do\n  require String\n  def repeat_str(n, s) do\n    String.duplicate(s, n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78446,"user_id":null,"body":"defmodule Solution do\n  def repeat_str(n, s), do: 1..n |> Enum.map(fn _ -> s end) |> Enum.join\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a1fd2ce298a731b20006a4":[{"id":78447,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n      s = String.downcase(s)\n      s === String.reverse(s)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78448,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    String.downcase(s)\n    |> String.reverse()\n    |> String.equivalent?(String.downcase(s))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78449,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    String.upcase(s)\n    |> (&String.reverse(&1) == &1).()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78450,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s),\n    do: String.downcase(s) === String.reverse(s) |> String.downcase()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78451,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    s\n    |> String.downcase()\n    |> String.reverse()\n    |> Kernel.==(String.downcase(s))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78452,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s), do: equal?(s, String.reverse(s))\n  \n  defp equal?(word, other_word), \n    do: String.downcase(word) == String.downcase(other_word)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78453,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    String.equivalent?(String.downcase(s), String.downcase(String.reverse(s)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78454,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    ds = String.downcase(s)\n    ds == String.reverse(ds)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78455,"user_id":null,"body":"defmodule is_palindrome do\n  def is_palindrome(s) do\n    String.downcase(s) == s\n    |> String.downcase\n    |> String.reverse\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78456,"user_id":null,"body":"defmodule is_palindrome do\n\n  defp pop(list) do\n    list |> Enum.reverse() |> tl() |> Enum.reverse()\n  end\n\n  defp is_list_palindrome([]), do: true\n  defp is_list_palindrome([x]), do: true\n  defp is_list_palindrome([h|tail]) do\n    tl = List.last(tail)\n    if tl == h do\n      is_list_palindrome(pop(tail))\n    else\n      false\n    end\n  end\n  \n  defp is_list_palindrome(_), do: false\n\n  def is_palindrome(s) do\n    s\n    |> String.downcase\n    |> String.graphemes\n    |> is_list_palindrome\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a72cb872292dc43100000c":[{"id":78457,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    trip\n    |> Enum.flat_map(&[&1.in, &1.out])\n    |> Enum.dedup\n    |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78458,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    trip\n    |> Enum.flat_map(fn %Flight{in: a, out: b} -> [a, b] end)\n    |> Enum.dedup()\n    |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78459,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.reduce(trip, [], fn(x, acc) -> if (List.last(acc) == x.in), do: acc ++ [x.out], else: acc ++ [x.in, x.out] end) |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78460,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.zip([%Flight{in: nil, out: nil}] ++ trip, trip)\n    |> Enum.map(fn {a, b} -> if a.out != b.in, do: [b.in, b.out], else: [b.out] end)\n    |> List.flatten()\n    |> Enum.join(\"-\")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78461,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    trip\n    |> Enum.reduce([], &(&2 ++ [&1.in] ++ [&1.out]))\n    |> Enum.dedup\n    |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78462,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    sort =\n      trip\n      |> Enum.map(&[&1.in, &1.out])\n      |> List.flatten()\n\n    sort\n    |> Enum.with_index()\n    |> Enum.reject(fn {x, y} ->\n      x == Enum.at(sort, y + 1)\n    end)\n    |> Enum.map(fn {x, y} -> x end)\n    |> Enum.join(\"-\")\n  end\nend\n\ndefmodule Flight do\n  defstruct [:in, :out]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78463,"user_id":250,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.reduce(trip, [], &(&2 ++ [&1.in, &1.out]))\n    |> Enum.dedup\n    |> Enum.join \"-\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78464,"user_id":250,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.reduce(trip, [], fn f, acc -> acc ++ [f.in, f.out] end)\n    |> Enum.dedup\n    |> Enum.join \"-\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78465,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.reduce(trip, [], fn %Flight{in: start, out: target}, accu ->\n      case accu do\n        [^start | _] -> [target | accu]\n        _ -> [target, start | accu]\n      end\n    end)\n    |> Enum.reverse()\n    |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78466,"user_id":null,"body":"defmodule Trip do\n  def itinerary(trip) do\n    Enum.reduce(trip, [], fn %Flight{in: start, out: target} = f, accu ->\n      IO.inspect(accu)\n      IO.inspect(f)\n      case accu do\n        [^start | _] -> [target | accu]\n        _ -> [target, start | accu]\n      end\n    end)\n    |> Enum.reverse()\n    |> Enum.join(\"-\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57a77726bb9944d000000b06":[{"id":78467,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    (quantity - div(quantity, 3)) * price\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78468,"user_id":1249,"body":"defmodule Solution do\n  def mango(q, p) do\n    p * (q - div(q, 3))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78469,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    quantity\n    |> div(3)\n    |> mult(2)\n    |> add(rem(quantity, 3))\n    |> mult(price)\n  end\n  \n  defp mult(a, b), do: a * b\n  defp add(a, b), do: a + b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78470,"user_id":null,"body":"defmodule Solution do\n  \n  def mango(quantity, price) do\n    specials = div quantity, 3\n    singles = rem quantity, 3\n    price * (specials * 2 + singles)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78471,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    quantity\n    |> div(3)\n    |> subtract_free_mangoes(quantity)\n    |> calculate_final_cost(price)\n  end\n\n  def subtract_free_mangoes(free_mangoes, quantity) do\n    quantity - free_mangoes\n  end\n\n  def calculate_final_cost(quantity, price) do\n    quantity * price\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78472,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    quantity\n    |> div(3)\n    |> (&(quantity - &1)).()\n    |> mult(price)\n  end\n  \n  defp mult(a, b), do: a * b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78473,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price), do: ceil((quantity - (quantity \/ 3))) * price\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78474,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    (quantity - rem(quantity, 3)) * price \/ (3 \/ 2) + rem(quantity, 3) * price\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78475,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    (quantity - div(quantity,3)) * price\n  end\nend\n\n# test  assert Solution.mango(90,3) == 180","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78476,"user_id":null,"body":"defmodule Solution do\n  def mango(quantity, price) do\n    a = floor(quantity \/ 3)\n    (quantity - a) * price\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57c1ab3949324c321600013f":[{"id":78477,"user_id":1774,"body":"defmodule ToLeetSpeak do\n\n  @dict %{\n    \"A\" => \"@\",\n    \"B\" => \"8\",\n    \"C\" => \"(\",\n    \"D\" => \"D\",\n    \"E\" => \"3\",\n    \"F\" => \"F\",\n    \"G\" => \"6\",\n    \"H\" => \"#\",\n    \"I\" => \"!\",\n    \"J\" => \"J\",\n    \"K\" => \"K\",\n    \"L\" => \"1\",\n    \"M\" => \"M\",\n    \"N\" => \"N\",\n    \"O\" => \"0\",\n    \"P\" => \"P\",\n    \"Q\" => \"Q\",\n    \"R\" => \"R\",\n    \"S\" => \"$\",\n    \"T\" => \"7\",\n    \"U\" => \"U\",\n    \"V\" => \"V\",\n    \"W\" => \"W\",\n    \"X\" => \"X\",\n    \"Y\" => \"Y\",\n    \"Z\" => \"2\",\n    \" \" => \" \"}\n\n  def translate(str) do\n    str\n    |> String.codepoints\n    |> Enum.map(&(@dict[&1]))\n    |> Enum.join\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78478,"user_id":1776,"body":"defmodule ToLeetSpeak do\n\n  def translate(str) do\n    String.split(str, \"\")\n    |> Enum.map(fn(x) -> leet_dictionary(x) end)\n    |> to_string\n  end\n\n  def leet_dictionary(char) do\n    case char do\n      \"A\" -> '@'\n      \"B\" -> '8'\n      \"C\" -> '('\n      \"D\" -> 'D'\n      \"E\" -> '3'\n      \"F\" -> 'F'\n      \"G\" -> '6'\n      \"H\" -> '#'\n      \"I\" -> '!'\n      \"J\" -> 'J'\n      \"K\" -> 'K'\n      \"L\" -> '1'\n      \"M\" -> 'M'\n      \"N\" -> 'N'\n      \"O\" -> '0'\n      \"P\" -> 'P'\n      \"Q\" -> 'Q'\n      \"R\" -> 'R'\n      \"S\" -> '$'\n      \"T\" -> '7'\n      \"U\" -> 'U'\n      \"V\" -> 'V'\n      \"W\" -> 'W'\n      \"X\" -> 'X'\n      \"Y\" -> 'Y'\n      \"Z\" -> '2'\n       _ -> char \n  end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78479,"user_id":null,"body":"defmodule ToLeetSpeak do\n  @rs %{\n    \"A\" => \"@\",\n    \"B\" => \"8\",\n    \"C\" => \"(\",\n    \"D\" => \"D\",\n    \"E\" => \"3\",\n    \"F\" => \"F\",\n    \"G\" => \"6\",\n    \"H\" => \"#\",\n    \"I\" => \"!\",\n    \"J\" => \"J\",\n    \"K\" => \"K\",\n    \"L\" => \"1\",\n    \"M\" => \"M\",\n    \"N\" => \"N\",\n    \"O\" => \"0\",\n    \"P\" => \"P\",\n    \"Q\" => \"Q\",\n    \"R\" => \"R\",\n    \"S\" => \"$\",\n    \"T\" => \"7\",\n    \"U\" => \"U\",\n    \"V\" => \"V\",\n    \"W\" => \"W\",\n    \"X\" => \"X\",\n    \"Y\" => \"Y\",\n    \"Z\" => \"2\"\n  }\n  \n  def translate(str) do\n    String.graphemes(str) |> Enum.map_join(&(Map.get(@rs, &1, \" \")))\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78480,"user_id":null,"body":"defmodule ToLeetSpeak do\n  @alphabet %{\n    \"A\" => \"@\",\n    \"B\" => \"8\",\n    \"C\" => \"(\",\n    \"D\" => \"D\",\n    \"E\" => \"3\",\n    \"F\" => \"F\",\n    \"G\" => \"6\",\n    \"H\" => \"#\",\n    \"I\" => \"!\",\n    \"J\" => \"J\",\n    \"K\" => \"K\",\n    \"L\" => \"1\",\n    \"M\" => \"M\",\n    \"N\" => \"N\",\n    \"O\" => \"0\",\n    \"P\" => \"P\",\n    \"Q\" => \"Q\",\n    \"R\" => \"R\",\n    \"S\" => \"$\",\n    \"T\" => \"7\",\n    \"U\" => \"U\",\n    \"V\" => \"V\",\n    \"W\" => \"W\",\n    \"X\" => \"X\",\n    \"Y\" => \"Y\",\n    \"Z\" => \"2\"\n  }\n\n  def translate(str) do\n    Regex.replace(~r\/.\/, str, fn(x) -> @alphabet[x] || x end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78481,"user_id":null,"body":"defmodule ToLeetSpeak do\n\n  @leet \"@8(D3F6#!JK1MN0PQR$7UVWXY2\"\n  \n  def translate(str) do\n    str\n    |> String.graphemes\n    |> Enum.map(fn <<c>> -> @leet |> String.at(c-65) || <<c>> end)\n    |> Enum.join\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78482,"user_id":null,"body":"defmodule ToLeetSpeak do\n\n  def translate(str) do\n  \tstr\n    |> String.codepoints\n    |> Enum.map(fn(char) -> translate_char(char) end)\n    |> Enum.join\n  end\n  \n  defp translate_char(str) do\n  \tleet = %{\n    \t\"A\" => \"@\", \"B\" => \"8\", \"C\" => \"(\", \"D\" => \"D\", \"E\" => \"3\",\n  \t\t\"F\" => \"F\", \"G\" => \"6\", \"H\" => \"#\", \"I\" => \"!\", \"J\" => \"J\",\n  \t\t\"K\" => \"K\", \"L\" => \"1\", \"M\" => \"M\", \"N\" => \"N\", \"O\" => \"0\",\n      \"P\" => \"P\", \"Q\" => \"Q\", \"R\" => \"R\", \"S\" => \"$\", \"T\" => \"7\",\n      \"U\" => \"U\", \"V\" => \"V\", \"W\" => \"W\", \"X\" => \"X\", \"Y\" => \"Y\",\n      \"Z\" => \"2\"\n\t\t}\n    \n    leet[str] || str\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78483,"user_id":2088,"body":"defmodule ToLeetSpeak do\n\n  @map  %{\n    \"A\" => \"@\",\n    \"B\" => \"8\",\n    \"C\" => \"(\",\n    \"D\" => \"D\",\n    \"E\" => \"3\",\n    \"F\" => \"F\",\n    \"G\" => \"6\",\n    \"H\" => \"#\",\n    \"I\" => \"!\",\n    \"J\" => \"J\",\n    \"K\" => \"K\",\n    \"L\" => \"1\",\n    \"M\" => \"M\",\n    \"N\" => \"N\",\n    \"O\" => \"0\",\n    \"P\" => \"P\",\n    \"Q\" => \"Q\",\n    \"R\" => \"R\",\n    \"S\" => \"$\",\n    \"T\" => \"7\",\n    \"U\" => \"U\",\n    \"V\" => \"V\",\n    \"W\" => \"W\",\n    \"X\" => \"X\",\n    \"Y\" => \"Y\",\n    \"Z\" => \"2\",\n    \" \" => \" \"\n  }\n\n  def translate(str) do\n    str\n    |> String.codepoints()\n    |> Enum.map(fn x -> @map[x] end)\n    |> Enum.join\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78484,"user_id":364,"body":"defmodule ToLeetSpeak do\n\n  @leet_map %{\n    \"A\" => \"@\",\n    \"B\" => \"8\",\n    \"C\" => \"(\",\n    \"D\" => \"D\",\n    \"E\" => \"3\",\n    \"F\" => \"F\",\n    \"G\" => \"6\",\n    \"H\" => \"#\",\n    \"I\" => \"!\",\n    \"J\" => \"J\",\n    \"K\" => \"K\",\n    \"L\" => \"1\",\n    \"M\" => \"M\",\n    \"N\" => \"N\",\n    \"O\" => \"0\",\n    \"P\" => \"P\",\n    \"Q\" => \"Q\",\n    \"R\" => \"R\",\n    \"S\" => \"$\",\n    \"T\" => \"7\",\n    \"U\" => \"U\",\n    \"V\" => \"V\",\n    \"W\" => \"W\",\n    \"X\" => \"X\",\n    \"Y\" => \"Y\",\n    \"Z\" => \"2\",\n    \" \" => \" \"\n  }\n  def translate(str) do    \n    String.graphemes(str)\n    |> Enum.reduce(\"\", fn(letter, acc) ->\n      acc <> @leet_map[letter] end\n    )\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78485,"user_id":null,"body":"defmodule ToLeetSpeak do\n\n  def translate(str), do: Regex.replace(~r\/.\/, str, &to_leet\/1)\n  \n  defp to_leet(\"A\"), do: \"@\"\n  defp to_leet(\"B\"), do: \"8\"\n  defp to_leet(\"C\"), do: \"(\"\n  defp to_leet(\"E\"), do: \"3\"\n  defp to_leet(\"G\"), do: \"6\"\n  defp to_leet(\"H\"), do: \"#\"\n  defp to_leet(\"I\"), do: \"!\"\n  defp to_leet(\"L\"), do: \"1\"\n  defp to_leet(\"O\"), do: \"0\"\n  defp to_leet(\"S\"), do: \"$\"\n  defp to_leet(\"T\"), do: \"7\"\n  defp to_leet(\"Z\"), do: \"2\"\n  defp to_leet(chr), do: chr  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78486,"user_id":null,"body":"defmodule ToLeetSpeak do\n\n  def translate(str) do\n    dict = [\n        A: '@',\n        B: '8',\n        C: '(',\n        D: 'D',\n        E: '3',\n        F: 'F',\n        G: '6',\n        H: '#',\n        I: '!',\n        J: 'J',\n        K: 'K',\n        L: '1',\n        M: 'M',\n        N: 'N',\n        O: '0',\n        P: 'P',\n        Q: 'Q',\n        R: 'R',\n        S: '$',\n        T: '7',\n        U: 'U',\n        V: 'V',\n        W: 'W',\n        X: 'X',\n        Y: 'Y',\n        Z: '2',\n        ' ': ' '\n    ]\n    str |> String.split(\"\", trim: true) |> Enum.map(fn x -> dict[String.to_atom(x)] end) |> Enum.join()\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57cebe1dc6fdc20c57000ac9":[{"id":78487,"user_id":null,"body":"defmodule Kata do\n  def find_short(s) do\n    s\n    |> String.split(\" \")\n    |> Enum.map(&String.length(&1))\n    |> Enum.min()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78488,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n        s\n        |> String.split(\" \")\n        |> Enum.map(&String.length\/1)\n        |> Enum.min\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78489,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n        s\n        |> String.split(\" \")\n        |> Enum.min_by(fn s -> String.length(s) end)\n        |> String.length()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78490,"user_id":null,"body":"defmodule Kata do\n  def find_short(s) do\n    s\n    |> String.split(\" \")\n    |> Enum.sort(&(byte_size(&1) <= byte_size(&2)))\n    |> Enum.fetch(0)\n    |> case do\n      {:ok, str} -> String.length(str)\n      :error -> {:error, :not_found}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78491,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n        s\n        |> String.split(\" \")\n        |> Enum.map(fn str -> String.length(str) end)\n        |> Enum.sort\n        |> List.first\n    end\nend\n\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78492,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n        s\n        |> String.split(\" \")\n        |> Enum.map(fn str -> String.length(str) end)\n        |> Enum.sort()\n        |> List.first()\n        |> IO.inspect\n    end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78493,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n    [head | tail] = String.split(s, \" \") \n      |> Enum.map(fn word -> String.length(word) end)\n      |> Enum.sort()\n      \n      head\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78494,"user_id":null,"body":"defmodule Kata do\n    def find_short(s) do\n        s\n        |> String.split()\n        |> Enum.sort_by(&String.length\/1) \n        |> Enum.at(0) \n        |> String.length()\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78495,"user_id":null,"body":"defmodule Kata do\n  def find_short(s), do:  s |> String.split |> Enum.reduce(:infinity, &(if String.length(&1) < &2, do: String.length(&1), else: &2))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78496,"user_id":null,"body":"defmodule Kata do\n def find_short(s) do\n    l = String.split(s, \" \")\n\n    l\n    |> shorter(List.first(l))\n    |> String.length()\n  end\n\n  defp shorter([], young) do\n    young\n  end\n\n  defp shorter([head | tail], young) do\n    case String.length(head) < String.length(young) do\n      true -> shorter(tail, head)\n      false -> shorter(tail, young)\n    end\n  end\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57d0dd58eca260728900140d":[{"id":78497,"user_id":null,"body":"defmodule CountWithFingers do\n  def decode(fingers) do\n    {left_fingers, right_fingers} = fingers |> String.codepoints() |> Enum.split(5)\n\n    left_count = left_fingers |> Enum.reverse() |> count()\n    right_count = right_fingers |> count()\n\n    result(left_count, right_count)\n  end\n\n  defp count([\"0\", \"0\", \"0\", \"0\", \"0\"]), do: \"0\"\n  defp count([\"0\", \"1\", \"0\", \"0\", \"0\"]), do: \"1\"\n  defp count([\"0\", \"1\", \"1\", \"0\", \"0\"]), do: \"2\"\n  defp count([\"0\", \"1\", \"1\", \"1\", \"0\"]), do: \"3\"\n  defp count([\"0\", \"1\", \"1\", \"1\", \"1\"]), do: \"4\"\n  defp count([\"1\", \"0\", \"0\", \"0\", \"0\"]), do: \"5\"\n  defp count([\"1\", \"1\", \"0\", \"0\", \"0\"]), do: \"6\"\n  defp count([\"1\", \"1\", \"1\", \"0\", \"0\"]), do: \"7\"\n  defp count([\"1\", \"1\", \"1\", \"1\", \"0\"]), do: \"8\"\n  defp count([\"1\", \"1\", \"1\", \"1\", \"1\"]), do: \"9\"\n  defp count(_), do: nil\n\n  defp result(left_count, right_count) when is_binary(left_count) and is_binary(right_count) do\n    String.to_integer(left_count <> right_count)\n  end\n\n  defp result(_left_count, _right_count), do: -1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78498,"user_id":null,"body":"defmodule CountWithFingers do\n  def decode(fingers) do\n    fingers\n    |> String.codepoints()\n    |> Enum.map(&String.to_integer\/1)\n    |> count_em_up()\n  end\n\n  defp count_em_up([l1, l2, l3, l4, lt, rt, r1, r2, r3, r4])\n       when l1 <= l2 and l2 <= l3 and l3 <= l4 and r1 >= r2 and r2 >= r3 and r3 >= r4 do\n    (l1 + l2 + l3 + l4) * 10 + lt * 50 + rt * 5 + (r1 + r2 + r3 + r4)\n  end\n\n  defp count_em_up(_fingers), do: -1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78499,"user_id":null,"body":"defmodule CountWithFingers do\n  def decode(fingers) do\n    {left, right} = String.split_at(fingers, 5)\n    case {decode_five(String.reverse(left)), decode_five(right)} do\n      {-1, _} -> -1\n      {_, -1} -> -1\n      {l, r} -> 10 * l + r\n    end\n  end\n  \n  def decode_five(string) when byte_size(string) !== 5, do: -1\n  def decode_five(string) do\n    case {String.split(string, \"0\", trim: true), String.first(string)} do\n      {[], _} -> 0\n      {d, _} when length(d) !== 1 -> -1\n      {d, \"0\"} -> String.length(hd(d))\n      {d, \"1\"} -> 4 + String.length(hd(d))\n      _ -> -1\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78500,"user_id":null,"body":"defmodule CountWithFingers do\n  def valid(hand), do: hand =~ ~r\/^[01]1*0*$\/\n\n  def value(hand),\n    do:\n      (String.at(hand, 0) |> String.to_integer()) * 5 +\n        (String.slice(hand, 1..4) |> String.graphemes() |> Enum.count(&(&1 == \"1\")))\n\n  def decode(fingers) do\n    left = String.slice(fingers, 0..4) |> String.reverse()\n    right = String.slice(fingers, 5..9)\n    if valid(left) && valid(right), do: 10 * value(left) + value(right), else: -1\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78501,"user_id":null,"body":"defmodule CountWithFingers do\n  @left %{\"00000\" => 0,\n          \"00010\" => 10,\n          \"00110\" => 20,\n          \"01110\" => 30,\n          \"11110\" => 40,\n          \"00001\" => 50,\n          \"00011\" => 60,\n          \"00111\" => 70,\n          \"01111\" => 80,\n          \"11111\" => 90}\n\n  @right %{\"00000\" => 0,\n          \"01000\" => 1,\n          \"01100\" => 2,\n          \"01110\" => 3,\n          \"01111\" => 4,\n          \"10000\" => 5,\n          \"11000\" => 6,\n          \"11100\" => 7,\n          \"11110\" => 8,\n          \"11111\" => 9}\n  def decode(fingers) do\n    {left, right} = String.split_at(fingers, 5)\n    decode_func(@left[left], @right[right])\n  end\n\n  defp decode_func(nil, _), do: -1\n  defp decode_func(_, nil), do: -1\n  defp decode_func(n, m), do: n + m\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78502,"user_id":null,"body":"defmodule CountWithFingers do\n  @numbers %{\"0000\" => 0,\"0001\" => 1,\"0011\" => 2,\"0111\" => 3,\"1111\" => 4}\n\n  def 49 <~> b, do: 5 <~> b\n  def 48 <~> b, do: 0 <~> b\n  def a <~> b when a == nil or b == nil, do: nil\n  def a <~> b, do: a + b\n  def _b <~ nil, do: nil\n  def a <~ b, do: a * b\n  def -1 ~>> nil, do: -1\n  def -1 ~>> b, do: b\n\n  def decode(<<l::binary-size(4), lt::utf8, rt::utf8, r::binary-size(4)>>), do: -1 ~>> (rt <~> @numbers[String.reverse(r)] <~> (10 <~ (lt <~> @numbers[l])))\n  def decode(_), do: -1\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78503,"user_id":168,"body":"defmodule CountWithFingers do\n  def value(s) do\n    vals = %{\"00000\" => 0, \"01000\" => 1, \"01100\" => 2, \"01110\" => 3, \"01111\" => 4, \"10000\" => 5, \"11000\" => 6, \"11100\" => 7, \"11110\" => 8, \"11111\" => 9}\n    vals[s] || -1\n  end\n\n  def decode(fingers) do\n    left = String.slice(fingers, 5, 5) |> value\n    right = String.slice(fingers, 0, 5) |> String.reverse |> value\n    if left < 0 || right < 0 do -1 else right * 10 + left end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78504,"user_id":null,"body":"defmodule CountWithFingers do\n\n  @fingers_map Enum.map([\"0000\", \"1000\", \"1100\", \"1110\", \"1111\"], &String.graphemes\/1)\n\n  def decode(fingers), do: do_decode(String.graphemes(fingers))\n\n  defp do_decode(fingers) do\n    left = Enum.reverse(Enum.slice(fingers, 0..4))\n    right = Enum.slice(fingers, 5..9)\n\n    case is_valid_hand?(left) and is_valid_hand?(right) do\n      true -> 10 * decode_hand(left) + decode_hand(right)\n      false -> -1\n    end\n  end\n\n  defp is_valid_hand?([_ | tail]), do: tail in @fingers_map\n\n  defp decode_hand([head | tail]), do: String.to_integer(head) * 5 + Enum.count(tail, & &1 == \"1\")\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78505,"user_id":null,"body":"defmodule CountWithFingers do\n  def decode(fingers) do\n  iu = Enum.chunk_every(String.codepoints(fingers), 5)\n  \n  otv = 10*\n  case Enum.at(iu, 0) do\n   [\"0\", \"0\", \"0\", \"0\", \"0\"] -> 0\n   [\"0\", \"0\", \"0\", \"1\", \"0\"] -> 1   \n   [\"0\", \"0\", \"1\", \"1\", \"0\"] -> 2   \n   [\"0\", \"1\", \"1\", \"1\", \"0\"] -> 3\n   [\"1\", \"1\", \"1\", \"1\", \"0\"] -> 4   \n   [\"0\", \"0\", \"0\", \"0\", \"1\"] -> 5   \n   [\"0\", \"0\", \"0\", \"1\", \"1\"] -> 6\n   [\"0\", \"0\", \"1\", \"1\", \"1\"] -> 7   \n   [\"0\", \"1\", \"1\", \"1\", \"1\"] -> 8   \n   [\"1\", \"1\", \"1\", \"1\", \"1\"] -> 9\n   _ -> 100\n  end\n\n  otv = otv +\n  case Enum.at(iu, 1) do\n   [\"0\", \"0\", \"0\", \"0\", \"0\"] -> 0\n   [\"0\", \"1\", \"0\", \"0\", \"0\"] -> 1   \n   [\"0\", \"1\", \"1\", \"0\", \"0\"] -> 2   \n   [\"0\", \"1\", \"1\", \"1\", \"0\"] -> 3\n   [\"0\", \"1\", \"1\", \"1\", \"1\"] -> 4   \n   [\"1\", \"0\", \"0\", \"0\", \"0\"] -> 5   \n   [\"1\", \"1\", \"0\", \"0\", \"0\"] -> 6\n   [\"1\", \"1\", \"1\", \"0\", \"0\"] -> 7   \n   [\"1\", \"1\", \"1\", \"1\", \"0\"] -> 8   \n   [\"1\", \"1\", \"1\", \"1\", \"1\"] -> 9\n   _ -> 100\n  end\n\n  if (otv<100), do: otv, else: -1\n\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78506,"user_id":872,"body":"defmodule CountWithFingers do\n\n  def decode(fingers) when is_binary(fingers), do: fingers |> String.split_at(5) |> decode\n\n  def decode({l, r}) do\n    {lv, rv} = {decode_l(l), decode_r(r)}\n    if lv >= 0 && rv >= 0, do: lv + rv, else: -1\n  end\n\n  defp decode_r(\"00000\"), do: 0\n  defp decode_r(\"01000\"), do: 1\n  defp decode_r(\"01100\"), do: 2\n  defp decode_r(\"01110\"), do: 3\n  defp decode_r(\"01111\"), do: 4\n  defp decode_r(\"10000\"), do: 5\n  defp decode_r(\"11000\"), do: 6\n  defp decode_r(\"11100\"), do: 7\n  defp decode_r(\"11110\"), do: 8\n  defp decode_r(\"11111\"), do: 9\n  defp decode_r(_), do: -1\n\n  defp decode_l(\"00000\"), do: 0\n  defp decode_l(\"00010\"), do: 10\n  defp decode_l(\"00110\"), do: 20\n  defp decode_l(\"01110\"), do: 30\n  defp decode_l(\"11110\"), do: 40\n  defp decode_l(\"00001\"), do: 50\n  defp decode_l(\"00011\"), do: 60\n  defp decode_l(\"00111\"), do: 70\n  defp decode_l(\"01111\"), do: 80\n  defp decode_l(\"11111\"), do: 90\n  defp decode_l(_), do: -1\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57e1e61ba396b3727c000251":[{"id":78507,"user_id":null,"body":"defmodule Codewars do\n  def string_clean(string) do\n    String.replace(string, ~r\/\\d\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78508,"user_id":null,"body":"defmodule Codewars do\n  def string_clean(s) do\n    String.replace(s, ~r\/[0-9]\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78509,"user_id":null,"body":"defmodule Codewars do\n  def string_clean(s), do: Regex.replace(~r{[0-9]}, s, \"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78510,"user_id":527,"body":"defmodule Codewars do\n  def string_clean(s) do\n    for <<c <- s>>, c not in ?0..?9, into: \"\", do: <<c>>\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78511,"user_id":null,"body":"defmodule Codewars do\n  def string_clean(s) do\n    Regex.replace(~r{\\d}, s, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78512,"user_id":null,"body":"defmodule Codewars do\n\t@numbers [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n\t\n  def string_clean(s) do\n  \ts\n    |> clean\n  end\n  \n  defp clean(s) do\n \t\tif String.contains?(s, @numbers),\n    do: String.replace(s, @numbers, \"\"),\n    else: s\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78513,"user_id":527,"body":"defmodule Codewars do\n  def string_clean(s) do\n    for <<c <- s>>, not c in ?0..?9, into: \"\", do: <<c>>\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78514,"user_id":1750,"body":"defmodule Codewars do\n  def string_clean(s) do\n    numbers = Enum.join(0..9)\n    \n    s\n    |> String.graphemes\n    |> Enum.reject(&(String.contains?(numbers, &1)))\n    |> Enum.join\n  end\nend\n\n    ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78515,"user_id":null,"body":"defmodule Codewars do\n  # Using this exercise to practice:\n  #   recursion, tail recursion, string processing by grapheme,\n  #   iodata and improper lists instead of concatenation\n  \n  import String, only: [next_grapheme: 1]\n  \n  @unwanted_graphemes String.graphemes(\"0123456789\")\n\n  def string_clean(string) when is_binary(string) do\n    do_string_clean(next_grapheme(string), [])\n  end\n  \n  defp do_string_clean({grapheme, rest}, acc) when grapheme in @unwanted_graphemes do\n    do_string_clean(next_grapheme(rest), acc)\n  end\n  \n  defp do_string_clean({grapheme, rest}, acc) do\n    do_string_clean(next_grapheme(rest), [acc | grapheme])\n  end\n  \n  defp do_string_clean(nil, acc) do\n    IO.iodata_to_binary(acc)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78516,"user_id":738,"body":"defmodule Codewars do\n  def string_clean(s) do\n    Regex.replace ~r\/\\d+\/, s, \"\", global: true\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57e76bc428d6fbc2d500036d":[{"id":78517,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s), do: String.split(s)\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78518,"user_id":null,"body":"defmodule Kata do\n    def string_to_array(s), do: ~w\/#{s}\/\n  end\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78519,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s) do\n    Enum.join(for <<c::utf8 <- s>>, do: <<c::utf8>>)\n     |> String.split(\" \", trim: true)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78520,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s), do: ~w(#{s})\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78521,"user_id":null,"body":"defmodule Kata do\n    defdelegate string_to_array(s), to: String, as: :split\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78522,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s) do\n    String.split(s, \" \", trim: true)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78523,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s) do\n    Regex.replace(~r\/\\s+\/, \" \", s)\n    |> String.split(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78524,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s) do\n    #String.split(s)\n    #s |> String.split()\n    String.split s\n    #String.split(s, ~r\/\\s\/)\n    #~w\/#{s}\/\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78525,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s) do\n    String.split(s, ~r\/[^[:alnum:]-]\/u, trim: true)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78526,"user_id":null,"body":"defmodule Kata do\n  def string_to_array(s), do: s |> to_charlist() |> split()\n  \n  def split(charlist, current_word \\\\ [], acc \\\\ [])\n  def split([], current_word, acc), do: acc ++ [current_word |> to_string()]\n  def split([?\\s | tl], current_word, acc), do: split(tl, [], acc ++ [current_word |> to_string()])\n  def split([hd | tl], current_word, acc), do: split(tl, current_word ++ [hd], acc)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57eae20f5500ad98e50002c5":[{"id":78527,"user_id":null,"body":"defmodule Kata do\n  def no_space(x), do: x |> String.replace(\" \",\"\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78528,"user_id":null,"body":"defmodule Kata do\n  def no_space(string), do: String.replace(string, \" \", \"\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78529,"user_id":527,"body":"defmodule Kata do\n  def no_space(s) do\n    for <<c <- s>>, c != ?\\s, into: \"\", do: <<c>>\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78530,"user_id":null,"body":"defmodule Kata do\n  def no_space([\" \"| tail]), do: no_space(tail)\n  def no_space([head| tail]), do: head <> no_space(tail)\n  def no_space([]), do: \"\"\n  \n  def no_space(x) do\n    x\n    |> String.split(\"\")\n    |> no_space()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78531,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n    Enum.reduce(String.split(x, \" \"), \"\", fn x, acc -> acc <> x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78532,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n    Regex.replace(~r\/ \/, x, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78533,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n    Regex.replace(~r\/\\s\/,x,\"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78534,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n    x\n    |> String.graphemes\n    |> Enum.filter(fn x -> x != \" \" end)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78535,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n  Regex.replace(~r\/\\s\/, x, \"\", global: true)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78536,"user_id":null,"body":"defmodule Kata do\n  def no_space(x) do\n    # your code here\n    String.replace(x,\" \",\"\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57eae65a4321032ce000002d":[{"id":78537,"user_id":564,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    str |> String.replace(~r\/[0-4]\/, \"0\") |> String.replace(~r\/[5-9]\/, \"1\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78538,"user_id":527,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    for <<c <- str>>, into: \"\", do: if c < ?5, do: \"0\", else: \"1\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78539,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    str |> String.graphemes |> Enum.map_join(fn ch -> if ch < \"5\", do: \"0\", else: \"1\" end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78540,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(x) do\n    x |> String.replace(\"1\", \"0\")\n      |> String.replace(\"2\", \"0\")\n      |> String.replace(\"3\", \"0\")\n      |> String.replace(\"4\", \"0\")\n      |> String.replace(\"5\", \"1\")\n      |> String.replace(\"6\", \"1\")\n      |> String.replace(\"7\", \"1\")\n      |> String.replace(\"8\", \"1\")\n      |> String.replace(\"9\", \"1\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78541,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    below = [\"0\", \"1\", \"2\", \"3\", \"4\"]\n    above = [\"5\", \"6\", \"7\", \"8\", \"9\"]\n    \n    str |> String.replace(below, \"0\") |> String.replace(above, \"1\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78542,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    # Program me\n    for <<c <- str>>, into: \"\", do: <<(if (c < ?5), do: ?0, else: ?1)>>   \n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78543,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    str\n    |> String.codepoints\n    |> Enum.map(fn rune -> rune >= \"5\" && \"1\" || \"0\" end)\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78544,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    String.graphemes(str)\n      |> Enum.map(&checknum\/1)\n      |> Enum.join(\"\")\n  end\n  \n  defp checknum(number), do:  if String.to_integer(number) >= 5, do: 1, else: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78545,"user_id":250,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    Regex.replace(~r\/[0-4]\/, str, \"0\")\n    |> String.replace(~r\/[^0]\/, \"1\")\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78546,"user_id":null,"body":"defmodule FakeBinary do\n  def fake_bin(str) do\n    str |> String.codepoints |> Enum.map_join(&(kek(&1)))\n  end\n  \n  def kek(num) do\n    {num, _} = Integer.parse(num)\n    if num >= 5, do: 1, else: 0\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57eaeb9578748ff92a000009":[{"id":78547,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    list\n    |> Enum.map(&convert\/1)\n    |> Enum.sum\n  end\n  \n  def convert(y) when is_binary(y) do\n    String.to_integer(y)\n  end\n  \n  def convert(y), do: y\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78548,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    Enum.reduce(list, 0, fn n, acc ->\n      to_integer(n) + acc\n    end)\n  end\n\n  defp to_integer(n) when is_integer(n), do: n\n  defp to_integer(n) when is_list(n), do: List.to_integer(n)\n  defp to_integer(n) when is_binary(n), do: String.to_integer(n)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78549,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    list\n    |> Enum.map(fn\n      n when is_binary(n) -> String.to_integer(n)\n      n when is_integer(n) -> n\n    end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78550,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    list\n    |> Enum.map(&String.to_integer(to_string(&1)))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78551,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    Enum.reduce(list, 0, fn\n      x, acc when is_integer(x) -> acc + x\n      x, acc when is_binary(x) -> acc + String.to_integer(x)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78552,"user_id":250,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    Enum.reduce(list, 0, fn x, acc -> \n      acc + String.to_integer(\"#{x}\")\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78553,"user_id":53,"body":"defmodule SumMix do\n  def sum_mix(xs), do: Enum.reduce(xs, 0, fn el, acc -> acc + String.to_integer(to_string(el)) end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78554,"user_id":1624,"body":"defmodule SumMix do\n  def sum_mix([]), do: 0\n  def sum_mix([h|t]), do: String.to_integer(\"#{h}\") + sum_mix(t)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78555,"user_id":null,"body":"defmodule SumMix do\n  # Using this exercise to practice: recursion, tail recursion\n\n  def sum_mix(list), do: sum_min(list, 0)\n  \n  def sum_min(list, acc \\\\ 0)\n  def sum_min([head | tail], acc) when is_integer(head), do: sum_min(tail, acc + head)\n\n  def sum_min([head | tail], acc) when is_binary(head),\n    do: sum_min(tail, acc + String.to_integer(head))\n\n  def sum_min([], acc), do: acc\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78556,"user_id":null,"body":"defmodule SumMix do\n  def sum_mix(list) do\n    Enum.reduce(list, 0,fn x, acc -> ensure_int(x) + acc end)\n  end\n  \n  def ensure_int(integer) when is_integer(integer), do: integer\n  def ensure_int(string) when is_binary(string), do: String.to_integer(string)\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57eaec5608fed543d6000021":[{"id":78557,"user_id":null,"body":"defmodule Kata do\n    def div_con(x) do\n      {strings, ints} = Enum.split_with(x, &is_binary\/1)\n      Enum.sum(ints) - (strings |> Enum.map(&String.to_integer\/1) |> Enum.sum())\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78558,"user_id":null,"body":"defmodule Kata do\n  def div_con(x) do\n    number_sum = x\n    |> Enum.filter(&is_integer\/1)\n    |> Enum.sum\n\n    string_sum = x\n    |> Enum.filter(&is_binary\/1)\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.sum\n\n    number_sum - string_sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78559,"user_id":null,"body":"defmodule Kata do\n    def div_con(ls), do: ls\n        |> Enum.reduce([0,0],\n            fn x,[a,b] when is_integer(x) -> [a,b + x]\n               x,[a,b] -> [a + String.to_integer(x),b] end)\n        |> Enum.reduce(&-\/2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78560,"user_id":null,"body":"defmodule Kata do\n    def div_con(x) do\n        # your code here\n        add(0, x)\n    end\n    \n    def add(result, []), do: result\n    def add(result, [head | tail]) do\n      cond do\n        is_integer(head) -> add(result + head, tail)\n        true -> add(result - String.to_integer(head), tail)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78561,"user_id":null,"body":"defmodule Kata do\n  @moduledoc\"\"\"\n  Kata - Divide and Conquer\n  \"\"\"\n  @doc\"\"\"\n  The `div_con\/1` function takes a mixed list of integers and string representations of integers. Then, adds up the string integers and subtracts the total of the non-string integers.\n  \n  ## Example\n    iex> Kata.div_con([9,3,\"7\",\"3\"])\n    2\n  \"\"\"\n  @spec div_con([integer | String.t]) :: pos_integer\n  def div_con(list) do\n    Enum.reduce(list, 0, fn \n      x, acc when is_integer(x) -> acc + x\n      x, acc when is_binary(x) -> acc - String.to_integer(x)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78562,"user_id":null,"body":"defmodule Kata do\n    def div_con(x) do\n        ints = x|>  Enum.map(fn x -> \n        case x  |> is_integer do\n            true -> x\n            false -> \"\"\n        end\n        end) \n        |> Enum.reject(fn y -> y == \"\" end)\n        |> Enum.sum\n        strs = x|>  Enum.map(fn x -> \n            case x  |> is_integer do\n                true -> \"\"\n                false -> x |> String.to_integer\n            end\n            end)\n             |> Enum.reject(fn y -> y == \"\" end)\n             |> Enum.sum\n             ints-strs \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78563,"user_id":null,"body":"defmodule Kata do\n  def div_con(x) do\n    Enum.map(x, fn v -> if is_integer(v), do: v, else: -String.to_integer(v) end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78564,"user_id":250,"body":"defmodule Kata do\n    def div_con(x) do\n      x\n      |> Enum.map(fn x -> \n        if is_integer(x) do\n          x\n        else\n          -(String.to_integer(x))\n        end\n      end)\n      |> Enum.sum\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78565,"user_id":null,"body":"defmodule Kata do\n  def div_con(x) do\n    x\n    |> Enum.map(\n      &cond do\n        is_binary(&1) -> -String.to_integer(&1)\n        is_number(&1) -> &1\n      end\n    )\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78566,"user_id":null,"body":"defmodule Kata do\n    def div_con(x) do\n      {string_list, integer_list} = x\n      |> Enum.split_with(&(is_binary(&1)))\n      \n      Enum.sum(integer_list) - Enum.sum(Enum.map(string_list, &(String.to_integer(&1))))\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57eb8fcdf670e99d9b000272":[{"id":78567,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    String.split(str, \" \")\n    |> Enum.max_by(&_score(&1))\n  end\n  \n  defp _score(word) do\n    String.to_charlist(word)\n    |> Enum.reduce(0, &(&1+&2-96))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78568,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    {result, _} = str\n    |> String.split\n    |> Enum.map(&calc_score\/1)\n    |> Enum.reduce({\"\", -1}, &reduce\/2)\n\n    result\n  end\n\n  def calc_score(str) do\n    score = str\n    |> String.to_charlist\n    |> Enum.reduce(0, &(&2 + &1 - 96))\n\n    {str, score}\n  end\n\n  def reduce(x = {_str, score}, acc = {_str_acc, score_acc}) do\n    case score > score_acc do\n      true -> x\n      false -> acc\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78569,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n  str\n  |> String.split(\" \")\n  |> Enum.max_by(&word_score\/1)\n  end\n  \n  defp word_score(word) do\n    word\n    |> String.to_charlist \n    |> Enum.reduce(0, fn w, acc -> w - 96 + acc end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78570,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    {_, word} =\n      str\n      |> String.split(\" \")\n      |> Enum.group_by(fn x -> String.to_charlist(x) |> Enum.reduce(0, &(&1 + &2 - 96)) end)\n      |> Enum.max()\n\n    List.first(word)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78571,"user_id":null,"body":"defmodule Kata do\n  def high(text) do\n    text\n    |> String.split(\" \")\n    |> Enum.max_by(&calculate_score\/1)\n  end\n  \n  @base_ascii_number ?a - 1\n  defp calculate_score(word) do\n      word\n      |> String.downcase()\n      |> String.to_charlist()\n      |> Enum.reduce(0, fn char, score -> score + (char - @base_ascii_number) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78572,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    words = Map.new()\n\n    str\n    |> String.downcase()\n    |> String.split(\" \")\n    |> Enum.map(fn word ->\n      score = get_word_score(word)\n\n      words\n      |> Map.put(:score, score)\n      |> Map.put(:word, word)\n    end)\n    |> Enum.max_by(& &1.score)\n    |> Map.get(:word)\n  end\n  \n  defp get_word_score(word) do\n    word\n    |> String.graphemes()\n    |> Enum.map(fn <<letter>> -> letter - 96 end)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78573,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    str |> String.split(\" \") |> Enum.max_by(&word_score(&1))\n  end\n  \n  defp word_score(word) do\n    word |> String.to_charlist() |> Enum.reduce(0, &(&2 + &1 - 96))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78574,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    str |> String.split(\" \") |> Enum.max_by(&word_score(&1, 0))\n  end\n  \n  defp word_score(\"\", acc), do: acc\n  defp word_score(<<c>> <> rest, acc), do: word_score(rest, c - 96 + acc)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78575,"user_id":null,"body":"defmodule Kata do\n  def high(words) do\n    words\n    |> String.split(\" \")\n    |> Enum.map(fn x -> {x, to_value(x)} end)\n    |> Enum.max_by(fn {x, i} -> i end)\n    |> elem(0)\n  end\n\n  defp to_value(word) do\n    word\n    |> String.to_charlist\n    |> Enum.sum\n    |> Kernel.-(String.length(word) * 96)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78576,"user_id":null,"body":"defmodule Kata do\n  def high(str) do\n    # your code here\n    case str do\n      \"\" -> \"\"\n      _ -> \n        str\n        |> format_string_to_list\n        |> lowercase_list_of_string\n        |> get_value_of_each_word\n        |> get_index_of_highest_value\n        |> get_the_highest_value_string_via_index(str)\n    end  \n  end\n\n  # MAIN\n\n  defp format_string_to_list(string) do\n    string\n    |> split(:string)\n    |> Enum.map(&(atoz_only(&1)))\n  end\n\n  defp lowercase_list_of_string(list) do\n    list\n    |> Enum.map(&(to_lowercase(&1)))\n  end\n\n  defp get_value_of_each_word(word), do: word |> value(:list)\n\n  def get_index_of_highest_value(list) do\n    high_value = list\n    |> Enum.max\n\n    Enum.find_index list, &(&1 === high_value)\n  end\n\n  defp get_the_highest_value_string_via_index(index, string) do\n    word = string\n    |> split(:string)\n    |> Enum.at(index)\n\n    word |> atoz_only |> to_lowercase\n  end\n\n  # HELPERS\n\n  defp split(value, :string), do: value |> String.split(\" \", trim: true)\n  defp split(value, :word), do: value |> String.split(\"\", trim: true)\n\n  defp to_lowercase(value), do: value |> String.downcase\n\n  defp atoz_only(word), do: Regex.replace(~r\/[^a-z ]\/i, word, \"\")\n\n  defp value(list, :list) do\n    list\n    |> Enum.map(&(value(&1, :word)))\n  end\n\n  defp value(letter, :letter) do\n    <<code>> = letter\n\n    ?a..code\n    |> Enum.to_list\n    |> List.to_string\n    |> String.split(\"\", trim: true)\n    |> length\n  end\n\n  defp value(word, :word) do\n    word_list = word\n    |> split(:word)\n    |> Enum.map(&(value(&1, :letter)))\n\n    word_list |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57ebaa8f7b45ef590c00000c":[{"id":78577,"user_id":null,"body":"defmodule Kata do\n    @values [{27,?!}, {28,??}, {29,?\\s} | Enum.zip(26..1, ?a..?z)] |> Map.new\n    \n    def switcher(ls), do: Enum.map_join(ls, & <<@values[String.to_integer(&1)]>>)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78578,"user_id":null,"body":"defmodule Kata do\n    def switcher(x) do\n        # your code here\n        x\n        |> Enum.map(&String.to_integer\/1)\n        |> Enum.map(&from_reverse_alphabet\/1)\n        |> String.Chars.to_string()\n    end\n    \n    defp from_reverse_alphabet(27), do: ?!\n    defp from_reverse_alphabet(28), do: ??\n    defp from_reverse_alphabet(29), do: ?\\s\n    defp from_reverse_alphabet(n), do: (?z + 1) - n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78579,"user_id":null,"body":"defmodule Kata do\n  @spec switcher([String.t]) :: String.t\n  # %{\"1\" => \"z\", \"10\" => \"q\",...}\n  @a_z ?a..?z \n    |> Enum.zip(26..1) \n    |> Enum.into(%{}, fn {k, v} -> {\"#{v}\", <<k>>} end)\n    |> Map.merge(%{\"27\" => \"!\", \"28\" => \"?\", \"29\" => \" \"})\n    \n  def switcher(list) do\n    Enum.map_join(list, \"\", fn x -> Map.get(@a_z, x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78580,"user_id":null,"body":"defmodule Kata do\n  @decode \"zyxwvutsrqponmlkjihgfedcba!? \"\n  def switcher(x) do\n    Enum.map(x, &String.at(@decode, String.to_integer(&1)-1)) |> Enum.join\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78581,"user_id":null,"body":"defmodule Kata do\n    def switcher(x) do\n      letters = for codepoint <- ?a..?z, do: <<codepoint :: utf8>>\n      map = [\" \", \"?\", \"!\"] ++ letters\n      |> (&Enum.zip(29..1, &1)).()\n      |> Enum.into(%{})\n      \n      x\n      |> Enum.map(&(map[String.to_integer(&1)]))\n      |> Enum.join\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78582,"user_id":null,"body":"defmodule Kata do\n    @value [{27, ?!}, {28, ??}, {29, ?\\s} | Enum.zip(1..26, ?z..?a)] |> Map.new\n    def switcher(x) do\n        x\n        |> Enum.map(&(String.to_integer(&1)))\n        |> Enum.map_join(&<< @value[&1] >>)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78583,"user_id":null,"body":"defmodule Kata do\n  def switcher(x) do\n    string = \"zyxwvutsrqponmlkjihgfedcba!? \" |> String.graphemes()\n\n    x\n    |> Enum.map(fn x ->\n      Enum.at(string, String.to_integer(x) - 1)\n    end)\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78584,"user_id":null,"body":"defmodule Kata do\n  @letters %{\n    \"1\" => \"z\",\n    \"2\" => \"y\",\n    \"3\" => \"x\",\n    \"4\" => \"w\",\n    \"5\" => \"v\",\n    \"6\" => \"u\",\n    \"7\" => \"t\",\n    \"8\" => \"s\",\n    \"9\" => \"r\",\n    \"10\" => \"q\",\n    \"11\" => \"p\",\n    \"12\" => \"o\",\n    \"13\" => \"n\",\n    \"14\" => \"m\",\n    \"15\" => \"l\",\n    \"16\" => \"k\",\n    \"17\" => \"j\",\n    \"18\" => \"i\",\n    \"19\" => \"h\",\n    \"20\" => \"g\",\n    \"21\" => \"f\",\n    \"22\" => \"e\",\n    \"23\" => \"d\",\n    \"24\" => \"c\",\n    \"25\" => \"b\",\n    \"26\" => \"a\",\n    \"27\" => \"!\",\n    \"28\" => \"?\",\n    \"29\" => \" \"\n  }\n  \n  def switcher(list) do\n    list\n    |> Enum.map(fn num -> @letters[num] end)\n    |> Enum.join(\"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78585,"user_id":null,"body":"defmodule Kata do\n  def switcher(x) do\n    for str <- x, into: \"\" do\n      case String.to_integer(str) do\n        27 -> <<?!>>\n        28 -> <<??>>\n        29 -> <<? >>\n        num -> <<?a + 26 - num>>\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78586,"user_id":null,"body":"defmodule Kata do\n  @row 1..29\n  def switcher(x) do\n    x = Enum.map(x, fn x -> String.to_integer(x) - 1 end)\n\n    abc =\n      ?a..?z\n      |> Enum.to_list()\n      |> List.to_string()\n      |> String.split(\"\", trim: true)\n\n    abc = Enum.reverse([\" \", \"?\", \"!\"] ++ abc)\n    zip = Enum.into(Enum.zip(@row, abc), %{}) |> IO.inspect()\n    Enum.join(Enum.map(x, fn symbol -> Map.get(zip, symbol + 1) end), \"\")\n  end\nend\n\n# test {[\"19\",\"22\",\"15\",\"15\",\"12\"], \"hello\"}","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57ee99a16c8df7b02d00045f":[{"id":78587,"user_id":null,"body":"defmodule Solution do\n  def solution(input) do\n    input |> List.flatten |> Enum.sort\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78588,"user_id":null,"body":"defmodule Solution do\n  def solution([]), do: []\n\n  def solution(list) do\n    list\n    |> List.flatten()\n    |> Enum.sort()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78589,"user_id":null,"body":"defmodule Solution do\n\n  def solution(list) do\n    list\n    |> List.flatten\n    |> Enum.sort\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78590,"user_id":null,"body":"defmodule Solution do\n\n  def solution(numbers), do: numbers |> List.flatten |> Enum.sort\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78591,"user_id":53,"body":"defmodule Solution do\n\n  def solution(lss), do: lss |> List.flatten |> Enum.sort \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78592,"user_id":null,"body":"defmodule Solution do\n  def solution(integers), do: integers |> List.flatten |> Enum.sort\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78593,"user_id":null,"body":"defmodule Solution do\n\n  def solution(number_list) do\n    number_list\n    |> List.flatten()\n    |> Enum.sort()\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78594,"user_id":null,"body":"defmodule Solution do\n  def solution(list), do: List.flatten(list) |> Enum.sort\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78595,"user_id":null,"body":"defmodule Solution do\n\n  def solution(list) do\n    List.flatten(list) |> Enum.sort\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78596,"user_id":1824,"body":"defmodule Solution do\n\n  def solution(list) do\n    Enum.sort(List.flatten(list))\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57f222ce69e09c3630000212":[{"id":78597,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    case Enum.count(x, fn word -> word == \"good\" end) do\n       0 -> \"Fail!\"\n       1 -> \"Publish!\"\n       2 -> \"Publish!\"\n       _ -> \"I smell a series!\"\n     end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78598,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    case Enum.count(x, &(&1 == \"good\")) do\n      0 -> \"Fail!\"\n      1 -> \"Publish!\"\n      2 -> \"Publish!\"\n      _ -> \"I smell a series!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78599,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    good = Enum.count(x, fn i -> i == \"good\" end)\n    case good do\n      0 -> \"Fail!\"\n      1 -> \"Publish!\"\n      2 -> \"Publish!\"\n      _ -> \"I smell a series!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78600,"user_id":null,"body":"defmodule Well do\n  def well(arr) do\n    arr\n    |> Enum.reduce(0, fn \n      \"good\", acc -> acc + 1\n      _, acc -> acc\n    end)\n    |> status_for_count()\n  end\n  \n  defp status_for_count(0), do: \"Fail!\"\n  defp status_for_count(good_count) when good_count < 3, do: \"Publish!\"\n  defp status_for_count(_), do: \"I smell a series!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78601,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    result = Enum.count(x, fn x -> x == \"good\" end)\n    (result == 0 && \"Fail!\") || (result <= 2 && \"Publish!\") || \"I smell a series!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78602,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    case Enum.count(x, &(&1 == \"good\")) do\n      0 ->\n        \"Fail!\"\n      a when a > 2 ->\n        \"I smell a series!\"\n      _ ->\n        \"Publish!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78603,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    case Enum.count(x, &(&1 == \"good\")) do\n      0 -> \"Fail!\"\n      x when x <= 2 -> \"Publish!\"\n      _ -> \"I smell a series!\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78604,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n    count = Enum.reduce(x,0, fn x, acc -> if x == \"good\" do acc + 1 else acc end end)\n    cond do\n      count == 0 -> \"Fail!\"\n      count > 2 -> \"I smell a series!\"\n      true -> \"Publish!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78605,"user_id":250,"body":"defmodule Well do\n  def well(x) do\n    c = Enum.count(x, &(&1==\"good\"))\n    case c do\n      0 -> \"Fail!\"\n      1 -> \"Publish!\"\n      2 -> \"Publish!\"\n      _ -> \"I smell a series!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78606,"user_id":null,"body":"defmodule Well do\n  def well(x) do\n      y =  Enum.frequencies_by(x, fn x -> x == \"good\" end) \n      check(y)\n  end\n  def check(%{true: good, false: _}) when good > 2, do: \"I smell a series!\"\n  def check(%{true: good, false: _}), do: \"Publish!\"\n  def check(_) , do: \"Fail!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57f5e7bd60d0a0cfd900032d":[{"id":78607,"user_id":53,"body":"defmodule MissingNo do\n  def missing_no(nums), do: 5050 - (nums |> Enum.sum)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78608,"user_id":527,"body":"defmodule MissingNo do\n  use Bitwise\n  def missing_no(nums), do: Enum.reduce(nums, 100, &bxor\/2)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78609,"user_id":null,"body":"defmodule MissingNo do\n  @zero_to_100 0..100 |> Enum.to_list\n  @spec missing_no([integer]) :: integer\n  def missing_no(nums) do\n    nums \n    |> Enum.sort(:asc)\n    |> (fn x -> @zero_to_100 -- x end).()\n    |> hd\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78610,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    sum = 100*101\/2\n    sum - Enum.sum(nums)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78611,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    List.first( # find all missing successors of elements except 101\n      for x <- nums, ((not Enum.member?(nums, x+1)) and x < 100)\n        do x + 1\n      end\n    ++ [0]) # 0 if all elements < 100 in num have a successor, the missing number is 0\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78612,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    5050 - Enum.sum(nums)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78613,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    nums = Enum.sort(nums)\n    nums\n    |> Enum.map(&if Enum.at(nums, &1) <= &1, do: &1 + 1)\n    |> Enum.reject(&is_nil\/1)\n    |> List.last()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78614,"user_id":470,"body":"defmodule MissingNo do\n  def missing_no(r), do: forge(r,5050)\n  defp forge([],n), do: n\n  defp forge([h|r],n), do: forge(r,n-h)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78615,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    Enum.sort([length(nums) * 2 | nums])\n      |> Enum.with_index\n      |> Enum.find(fn { x, y } -> x !== y end)\n      |> elem(1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78616,"user_id":null,"body":"defmodule MissingNo do\n  def missing_no(nums) do\n    Enum.find(0..100, fn(x) -> !Enum.member?(nums, x) end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57f625992f4d53c24200070e":[{"id":78617,"user_id":1722,"body":"defmodule LotteryTicket do\n  \n  def bingo(ticket, win) do\n    total = Enum.count(ticket, fn [string, num] ->  num in String.to_charlist(string) end)\n    if (total >= win), do: \"Winner!\", else: \"Loser!\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78618,"user_id":null,"body":"defmodule LotteryTicket do\n  def bingo(ticket, win) do\n    ticket =\n      Enum.map(\n        ticket,\n        fn sub_arr ->\n          Enum.any?(\n            to_charlist(Enum.at(sub_arr, 0)),\n            &(&1 == Enum.at(sub_arr, 1))\n          )\n        end\n      )\n\n    if Enum.count(ticket, &(&1 == true)) >= win do\n      \"Winner!\"\n    else\n      \"Loser!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78619,"user_id":null,"body":"defmodule LotteryTicket do\n  \n  def bingo(ticket, win) do\n    mini_wins = ticket\n    |> Enum.map(fn [t, c] -> c in String.to_charlist(t) end)\n    |> Enum.count(&(&1 == true))\n    if mini_wins >= win, do: \"Winner!\", else: \"Loser!\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78620,"user_id":null,"body":"defmodule LotteryTicket do\n  def bingo(ticket, win) do\n    wins = Enum.count(ticket, fn [str, cp] -> cp in to_charlist(str) end)\n    wins >= win && \"Winner!\" || \"Loser!\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78621,"user_id":null,"body":"defmodule LotteryTicket do\n  \n  def bingo(ticket, win) do\n    count = Enum.map(ticket, &(mini_win(&1)))\n    |> Enum.sum\n    \n    if (count >= win) do \"Winner!\" else \"Loser!\" end\n    \n  end\n  \n  def mini_win([head | tail]) do\n    #note that the tail coming in is single quoted value, so 65 turns to 'A'\n    # we can use List.to_string to convert it to an actual string. \n    won = head=~ List.to_string([tail])\n    if won do 1 else 0 end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78622,"user_id":null,"body":"defmodule LotteryTicket do\n  def bingo(ticket, win) do\n    if Enum.count(ticket, &mini_win?\/1) >= win, do: \"Winner!\", else: \"Loser!\"\n  end\n  \n  defp mini_win?([s, c]), do: String.contains?(s, <<c>>)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78623,"user_id":null,"body":"defmodule LotteryTicket do\n  \n  def bingo(ticket, win), do: ticket |> check() |> maybe_win(win)\n  \n  defp check(ticket) do\n    Enum.map(ticket, fn [string, target] ->\n      string\n      |> to_charlist\n      |> Enum.any?(&(&1 == target))\n    end)\n    |> Enum.reduce(0, fn bool, acc -> if bool, do: acc + 1, else: acc end)   \n  end\n  \n  defp maybe_win(num, win) when num < win, do: \"Loser!\"\n  defp maybe_win(_, _), do: \"Winner!\"\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78624,"user_id":null,"body":"defmodule LotteryTicket do\n    def bingo(ticket, win) do\n        a = for i <-0..length(ticket)-1 do\n            sublist = ticket |> Enum.at(i) \n            pick = sublist |> Enum.at(0)  \n            match = sublist |> Enum.at(1)  \n            #check duplicates\n            dup = pick |> String.graphemes |> MapSet.new |> MapSet.to_list \n            case dup ==pick |> String.graphemes |> Enum.sort do\n                true -> \n                    ans = for x <- pick |> String.graphemes do\n                       bins= x |> :binary.first\n                       case bins == match do\n                        true -> true\n                        false -> false\n                        end\n                    end\n                    count = ans |> Enum.count(fn x -> x == true end) \n                    case count >= 1 do\n                        true -> true\n                        false -> false\n                    end\n                false -> false |> IO.inspect(lable: \"failed here\")\n            end\n        end\n        count =a |> Enum.count(fn x -> x == true end)\n        case count >= win do\n            true -> \"Winner!\"\n            false -> \"Loser!\"\n        end\n    end\n  end\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78625,"user_id":null,"body":"defmodule LotteryTicket do\n  def bingo(ticket, win) do\n    if Enum.count(ticket, fn [s, c] -> c in to_charlist(s) end) >= win, do: \"Winner!\", else: \"Loser!\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78626,"user_id":null,"body":"defmodule LotteryTicket do\n\n  def bingo(ticket, win) do\n     out = ticket\n     |> Enum.map(\n       fn [head, tail] ->\n        head\n        |> to_charlist()\n        |> Enum.map(fn x ->\n          if(x == tail) do\n            1\n          else\n            0\n          end\n        end)\n        |> Enum.sum\n\n       end\n        )\n        |> Enum.sum\n\n        if (out >= win) do\n              \"Winner!\"\n            else\n              \"Loser!\"\n            end\n\n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57f780909f7e8e3183000078":[{"id":78627,"user_id":2833,"body":"defmodule Grow do\n  def grow(arr) do\n    # your code here\n    Enum.reduce(arr, fn x, acc -> x * acc end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78628,"user_id":null,"body":"defmodule Grow do\n  def grow([]) do\n    1\n  end\n  \n  def grow([h|rest]) do\n    h * grow(rest)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78629,"user_id":null,"body":"defmodule Grow do\n  def grow([]), do: 1\n  def grow([x | xs]), do: x * grow(xs)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78630,"user_id":null,"body":"defmodule Grow do\n  def grow(arr), do: Enum.reduce(arr, 1, fn (x, acc) -> acc * x end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78631,"user_id":250,"body":"defmodule Grow do\n  def grow(a), do: Enum.reduce(a, 1, &(&1*&2))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78632,"user_id":null,"body":"defmodule Grow do\n  def grow(arr) do\n    calculated = Enum.reduce(arr, fn (num, total) -> num * total end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78633,"user_id":null,"body":"defmodule Grow do\n  def grow(arr), do: arr |> Enum.reduce(&*\/2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78634,"user_id":null,"body":"defmodule Grow do\n  def grow(arr), do: Enum.reduce(arr, 1, fn n, acc -> n * acc end)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78635,"user_id":null,"body":"defmodule Grow do\n  @moduledoc false\n\n  def grow(arr), do: Enum.reduce(arr, &(&1 * &2))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78636,"user_id":null,"body":"defmodule Grow do\n  def grow([initial|arr]), do: Enum.reduce(arr, initial, &(&1 * &2))\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57f781872e3d8ca2a000007e":[{"id":78637,"user_id":527,"body":"defmodule Maps do\n  def maps(x) do\n    Enum.map(x, &(&1 * 2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78638,"user_id":null,"body":"defmodule Maps do\n  def maps(x) do\n   Enum.map(x, fn(n) -> n * 2 end)\n end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78639,"user_id":null,"body":"defmodule Maps do\n  def maps(x), do: Enum.map(x, & &1 * 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78640,"user_id":null,"body":"defmodule Maps do\n  def maps(x) do\n      Enum.map(x, fn x -> x * 2 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78641,"user_id":527,"body":"defmodule Maps do\n  def maps(xs) do\n    for x <- xs, do: x * 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78642,"user_id":null,"body":"defmodule Maps do\n\n  def maps([]), do: []\n  def maps([head | tail]) do\n    [head * 2 | maps(tail)]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78643,"user_id":null,"body":"defmodule Maps do\n  def maps(x) do\n    x |> Enum.map(&double\/1)\n  end\n  \n  def double(y) do\n    y * 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78644,"user_id":null,"body":"defmodule Maps do\n  def maps(x) do\n    for c <- x, do: c * 2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78645,"user_id":null,"body":"\n\ndefmodule Maps do\n  \n\n  def maps(numbers) do\n    numbers\n      |> Enum.map(fn number -> number * 2 end)\n      \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78646,"user_id":null,"body":"defmodule Maps do\n  import Enum, only: [map: 2]\n  def maps(x), do: x |> map fn x -> 2*x end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"57faefc42b531482d5000123":[{"id":78647,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do\n    String.replace(s, ~r\/!(?!!*$)\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78648,"user_id":null,"body":"defmodule Solution do\n def remove(s) do\n    s\n    |> String.reverse\n    |> _remove!\n    |> String.reverse\n  end\n\n  def _remove!(<< \"!\" :: utf8, tail :: binary >>) do\n    \"!\" <> _remove!(tail)\n  end\n\n  def _remove!(s) do\n    String.replace(s, \"!\", \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78649,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do\n    Regex.replace(~r\/[!]*(?![!]*$)\/, s, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78650,"user_id":null,"body":"defmodule Solution do\n  def remove(str) do\n    Regex.replace(~r\/!(?!!*$)\/, str, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78651,"user_id":null,"body":"defmodule Solution do\n  def remove(str) do\n    lst = String.codepoints(str)\n    (Enum.reject(lst, &(&1 == \"!\")) ++ Enum.take_while(Enum.reverse(lst), &(&1 == \"!\")))\n    |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78652,"user_id":527,"body":"defmodule Solution do\n  def remove(s) do\n    String.replace(s, ~r\/!++(?!$)\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78653,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do\n  {trailing_ex, rest} =\n    s\n    |> String.graphemes()\n    |> Enum.reverse()\n    |> Enum.split_while(& &1 == \"!\")\n    \n    rest\n    |> Enum.reject(& &1 == \"!\")\n    |> Enum.reverse()\n    |> Enum.concat(trailing_ex)\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78654,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do\n      \n      re = ~r\/!+([^!])\/\n      String.replace(s,re,\"\\\\1\")  \n      \n  end\n   \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78655,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do\n    String.replace(s, ~r\/(?!!+$)!\/, \"\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78656,"user_id":null,"body":"defmodule Solution do\n  def remove(s) do \n      with [get_trailing_marks] <- Regex.scan(~r\/!+$\/, s) |> List.flatten\n      do\n        String.replace(s, \"!\", \"\") <> get_trailing_marks\n      else\n        [] -> String.replace(s, \"!\", \"\")\n      end\n  end \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58184387d14fc32f2b0012b2":[{"id":78657,"user_id":492,"body":"defmodule Approxsqrt do\n\n    def f(x) do\n        x \/ (1.0 + :math.sqrt(1.0 + x))\n    end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78658,"user_id":null,"body":"defmodule Approxsqrt do\n  def f(x)  do\n    # Expanding sqrt(1+x)-1 in a Taylor Series we have:\n    x\/2 - :math.pow(x,2)\/8 + :math.pow(x,3)\/16 - :math.pow(x,4) * 5\/128\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78659,"user_id":492,"body":"defmodule Approxsqrt do\n\n    def f(x) do\n        x \/ (1.0 + :math.sqrt(1.0 + x))\n    end\n    \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78660,"user_id":168,"body":"defmodule Approxsqrt do\n\n    def f(x) do\n        x * (0.5 - x * (0.125 - x * (0.0625 - x * 0.0390625)))\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78661,"user_id":null,"body":"defmodule Approxsqrt do\n\n  def f(x) do\n    {n, d} = Float.ratio(x)\n    n \/ (:math.sqrt(n * d + d * d) + d)\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78662,"user_id":null,"body":"defmodule Approxsqrt do\n\n    def f(x), do: x \/ (:math.sqrt(1.0 + x) + 1.0)\n      \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78663,"user_id":null,"body":"defmodule Approxsqrt do\n\n  def f(x), do: calc(x)\n\n  defp calc(x), do: calc(x, 1, 0)\n  defp calc(_, 50, acc), do: acc\n  defp calc(x, n, acc), do: calc(x, n + 1, acc + get_term(x, n))\n\n  defp get_term(x, n), do:\n    (:math.pow(-1, n) * factorial(2 * n) * :math.pow(x, n)) \/\n    ((1 - 2 * n) * :math.pow(factorial(n), 2) * :math.pow(4, n))\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78664,"user_id":53,"body":"defmodule Approxsqrt do\n\n    def f(x) do\n        x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78665,"user_id":null,"body":"defmodule Approxsqrt do\n    def f(x), do: x \/ (1.0 + :math.sqrt(1.0 + x))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78666,"user_id":null,"body":"defmodule Approxsqrt do\n  def f(x) do\n    x \/ 2 - x * x \/ 8 + x * x * x \/ 16\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"581b30af1ef8ee6aea0015b9":[{"id":78667,"user_id":527,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    Enum.count(winner_list, &(&1.country == country))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78668,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    Enum.count(winner_list, fn \n      %{country: ^country} -> true\n      _ -> false\n    end )\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78669,"user_id":null,"body":"defmodule Champions do\n  @moduledoc\"\"\"\n  Champions\n  \"\"\"\n  @doc\"\"\"\n  The `count_wins\/2` function returns the total amount of times a specified team has won the \"Champions League.\"\n  \n  ## Params\n  1. winner_list: map\n  2. country: string\n  \n  ## Example\n    iex> Champions.count_wins([\n      %{ season: \"1997\u201398\", team: \"Real Madrid\", country: \"Spain\" }, \n      %{ season: \"1998\u201399\", team: \"Manchester United\", country: \"England\" },\n      %{ season: \"1999\u201300\", team: \"Real Madrid\", country: \"Spain\" }\n    ], \n    \"Spain\")\n    2\n  \"\"\"\n  \n\n  @type number_of_wins :: integer\n  @type winners_by_year :: [%{season: String.t, team: String.t, country: String.t}]\n  @type country :: String.t\n  \n  @spec count_wins(winners_by_year, country) :: number_of_wins\n  def count_wins(winner_list, country) do\n    winner_list\n    |> Enum.filter(fn x -> x.country == country end)\n    |> Enum.count()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78670,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country), do: winner_list |> Enum.count(&(&1.country == country))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78671,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    Enum.count(winner_list, fn(m) -> m.country == country end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78672,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    winner_list\n    |> Enum.frequencies_by(& &1.country)\n    |> Map.get(country, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78673,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n\n    Enum.map(winner_list, fn x -> Enum.find(x, fn {key, val} -> val == country end) end)\n    |> Enum.filter(fn x -> x end)\n    |> Enum.count()\n  end\nend\n\n# test assert count_wins(@winner_list,\"Germany\") == 3","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78674,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    map = count(winner_list, %{})\n    if(res = Map.get(map, country), do: res, else: 0)\n  end\n  \n  defp count([], map), do: map\n  defp count([%{country: name} | tail], map) do\n    case Map.get(map, name) do\n      nil -> count(tail, Map.put(map, name, 1))\n      num -> count(tail, %{map | name => num+1})\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78675,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    winner_list\n    |> Enum.filter(fn x -> x[:country] == country end)\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78676,"user_id":null,"body":"defmodule Champions do\n  def count_wins(winner_list, country) do\n    length(Enum.filter(winner_list, fn winner -> winner[:country] == country end))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"581d1d669ae06274d5000074":[{"id":78677,"user_id":null,"body":"defmodule Kata do\n    def permutation_by_number(word,n) do\n      word\n      |> Frequency.map_frequency\n      |> (&(cond do\n        Factorial.valid_perm(&1)>= (n+1) -> aux(&1,n+1)\n        true -> [\"\"] end)).()\n      |> List.to_string\n    end\n\n    def aux(map, m, c \\\\ [], t \\\\ 0) do\n      cond do\n        Enum.empty?(map) -> c\n        true ->\n          char = Enum.at(Map.keys(map),t)\n          map = Map.update!(map,char, &(&1-1))\n          tot = Factorial.valid_perm(map)\n          cond do\n            tot >= m ->\n              cond do\n                map[char]==0 -> aux(Map.delete(map,char), m, List.flatten([c|[char]]))\n                true -> aux(map, m, List.flatten([c|[char]]))\n              end\n            true ->  aux(Map.update!(map,Enum.at(Map.keys(map),t), &(&1+1)), m-tot,c,t+1)\n          end\n      end\n    end\nend\n\ndefmodule Frequency do\n  def map_frequency(word) do\n    a = word\n    |> String.graphemes\n    |> Enum.sort\n    |> Enum.group_by(&(&1))\n    for {key, val} <- a, into: %{}, do: {key, Enum.count(val)}\n  end\nend\n\ndefmodule Factorial do\n\tdef fact(0), do: 1\n\tdef fact(n) when n > 0 do\n\t\tEnum.reduce(1..n, &*\/2)\n\tend\n\n  def valid_perm(map) do\n    fact(Enum.sum(Map.values(map)))\/Enum.reduce(Map.keys(map),1, fn x,acc -> fact(map[x])*acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78678,"user_id":null,"body":"defmodule Kata do\n  def permutation_by_number(word, n) do\n    cntr = String.graphemes(word) |> Enum.frequencies()\n\n    if n >=\n         div(\n           factorial(String.length(word)),\n           Map.values(cntr) |> Enum.reduce(1, fn x, prod -> prod * factorial(x) end)\n         ) do\n      \"\"\n    else\n      Enum.reduce(1..String.length(word), {\"\", n, cntr}, fn _, {res, n, cntr} ->\n        {lastch, nn} =\n          Map.keys(cntr)\n          |> Enum.filter(fn c -> Map.get(cntr, c) > 0 end)\n          |> Enum.sort()\n          |> Enum.reduce_while(n, fn ch, n ->\n            cntr2 = Map.update(cntr, ch, 0, &(&1 - 1))\n\n            thiscount =\n              div(\n                factorial(Map.values(cntr2) |> Enum.sum()),\n                Map.values(cntr2) |> Enum.reduce(1, fn x, prod -> prod * factorial(x) end)\n              )\n\n            if thiscount > n do\n              {:halt, {ch, n}}\n            else\n              {:cont, n - thiscount}\n            end\n          end)\n\n        {res <> lastch, nn, Map.update(cntr, lastch, 0, &(&1 - 1))}\n      end)\n      |> elem(0)\n    end\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: n * factorial(n - 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78679,"user_id":null,"body":"defmodule Kata do\n    def permutation_by_number(word,n) do\n      letters = word |> String.graphemes |> Enum.sort\n      if nop(letters) <= n, do: \"\", else: find_word(0, n, letters, []) |> Enum.join\n    end\n    \n    defp find_word(_, _, [], word), do: word\n    \n    defp find_word(curr_pos, expected_pos, word, new_word) do\n      word\n      |> Enum.uniq\n      |> Enum.reduce_while({\"\", curr_pos}, fn letter, {_, acc} ->\n        n = nop(word -- [letter]) + acc\n        if expected_pos >= n, do: {:cont, {letter, n}}, else: {:halt, {letter, acc}}\n      end)\n      |> (fn {letter, curr_pos} -> find_word(curr_pos, expected_pos, word -- [letter], new_word ++ [letter]) end).()\n    end\n    \n    defp nop(letters) do\n      d = letters |> count_letters |> Enum.reduce(1, fn elem, acc -> acc * factorial(elem) end)\n      letters |> length |> factorial |> div(d)\n    end\n    \n    defp factorial(0), do: 1\n    defp factorial(n), do: n * factorial(n - 1)\n    \n    defp count_letters(letters) do\n      letters\n      |> Enum.reduce(Map.new, fn letter, acc -> Map.update(acc, letter, 1, fn counter -> counter + 1 end) end)\n      |> Enum.map(fn {_key, value} -> value end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78680,"user_id":null,"body":"defmodule Kata do\n\n  def permutation_by_number(word, n), do: get_nth_permutation_with_repetitions(n, word)\n\n  defp get_nth_permutation_with_repetitions(n, abc) when is_binary(abc), do:\n    get_nth_permutation_with_repetitions(n, Enum.sort(String.graphemes(abc)))\n\n  defp get_nth_permutation_with_repetitions(n, abc) do\n    case get_number_of_possible_words(abc) > n do\n      false -> \"\"\n      true -> get_nth_permutation_with_repetitions(n, abc, [])\n    end\n  end\n\n  defp get_nth_permutation_with_repetitions(_, [], acc), do: Enum.join(Enum.reverse(acc))\n  defp get_nth_permutation_with_repetitions(n, abc, acc), do:\n    get_nth_permutation_with_repetitions(n, hd(Enum.dedup(abc)), tl(Enum.dedup(abc)), abc, acc)\n\n  defp get_nth_permutation_with_repetitions(n, current, [], abc, acc), do:\n    get_nth_permutation_with_repetitions(n, List.delete(abc, current), [current | acc])\n\n  defp get_nth_permutation_with_repetitions(n, current, [head | tail], abc, acc) do\n    remainders = List.delete(abc, current)\n                 |> get_number_of_possible_words\n    cond do\n      n < remainders -> get_nth_permutation_with_repetitions(n, List.delete(abc, current), [current | acc])\n      true -> get_nth_permutation_with_repetitions(n - remainders, head, tail, abc, acc)\n    end\n  end\n\n  defp get_number_of_possible_words(word) when is_binary(word), do:\n    get_number_of_possible_words(String.graphemes(word))\n\n  defp get_number_of_possible_words(word), do:\n    word\n    |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1 + 1)) end)\n    |> Enum.reduce(1, fn {_, v}, acc -> acc * factorial(v) end)\n    |> (&(div(factorial(length(word)), &1))).()\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78681,"user_id":null,"body":"defmodule Kata do\n    def permutation_by_number(word, n) do\n        word |> String.graphemes |> Enum.sort |> handle_overflow(n)\n    end\n\n    defp handle_overflow(word, limit) do\n        if(limit >= uniq_words(word)) do \"\" else handle_word(word, limit, [], 0) end\n    end\n\n    defp handle_word(word, _, res, _) when length(word) == 0, do: res |> Enum.reverse |> Enum.join\n\n    defp handle_word(word, limit, res, counter) do\n        {[next_letter | _], new_counter} = word\n        |> Enum.uniq\n        |> Enum.reduce_while({[], counter},\n            fn x, {p_x, p_acc} ->\n                new_p_acc = p_acc + (word |> List.delete(x) |> uniq_words)\n                if new_p_acc <= limit,\n                    do: {:cont, {[x | p_x], new_p_acc}},\n                    else: {:halt, {[x | p_x], p_acc}}\n            end\n        )\n        handle_word(word |> List.delete(next_letter), limit, [next_letter | res], new_counter)\n    end\n\n    defp f(n) when n > 1, do: n * f(n-1)\n    defp f(n) when n <=1, do: 1\n\n    defp uniq_words(word) do\n        word\n        |> Enum.group_by(&(&1))\n        |> Enum.map(fn ({_, val}) -> length(val) end)\n        |> Enum.reduce(f(length(word)), fn x, acc -> div(acc, f(x)) end)\n    end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78682,"user_id":null,"body":"defmodule Kata do\n  def permutation_by_number(word, n) do\n    max = count(word)\n    cond do\n\t   n > max-1 ->\n\t\t\"\"\n      true ->\n        func(word, n+1) |> List.to_string\n    end\n  end\n\n  def func(\"\", _), do: []\n  def func(word,n) do\n    scopelist = scope(word)\n    {alph, m} = at(scopelist, n)\n    new_word = word |> String.split(alph, parts: 2) |> List.to_string\n    [alph | func(new_word, m)]\n  end\n\n  def at([{alph, _m} | tail], n) when tail == [], do: {alph, n}\n  def at([{_alph, m} | tail], n) when n > m, do: at(tail, n-m)\n  def at([{alph, _m} | _tail], n), do: {alph, n}\n\n  def scope(word) do\n    keys = maps(word) |> Map.keys\n    list = next(word, keys)\n    numlist = list |> Enum.map(&count\/1)\n    scopelist = Enum.zip(keys, numlist)\n    scopelist\n  end\n\n  defp next(_word, []), do: []\n  defp next(word, [head|tail]) do\n    next_word = word |> String.split(head, parts: 2) |> List.to_string\n    [next_word | next(word, tail)]\n  end\n\n  def count(word) do\n    map = maps(word)\n    sum = map |> Map.values |> Enum.sum |> fac\n    iq = map |> Map.values |> Enum.filter(&(&1 > 1)) |> Enum.map(&fac\/1) |> Enum.reduce(1, &(&1*&2))\n    case iq do\n\t  0 -> sum\n\t  n\t-> div(sum, n)\n    end\n  end\n\n  defp maps(word), do: maps(word |> String.codepoints, %{})\n  defp maps([], map), do: map\n  defp maps([head|tail], map) do\n    case map[head] do\n\t    nil -> maps(tail, Map.put(map, head, 1))\n\t\tn -> maps(tail, %{map | head => n+1})\n    end\n  end\n\n  defp fac(n), do: fac(n, 1)\n  defp fac(0, r), do: r\n  defp fac(n, r), do: fac(n-1, r*n)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78683,"user_id":null,"body":"defmodule Kata do\n    defp factorial(0), do: 1\n    defp factorial(n), do: Enum.reduce(1..n, &*\/2)\n\n    defp helper(_n,_p,fs,ks,rs,0) do\n        a = rs |> Enum.reverse |> Enum.join(\"\")\n        b = Enum.map_join(ks, \"\", & String.duplicate(&1,fs[&1]))\n        a <> b\n    end\n\n    defp helper(n,p,fs,ks,rs,i) do\n        z = div(factorial(n),p)\n        {k,t} = Enum.reduce_while(ks, {nil,0}, fn k,{c,t} ->\n            x = div(z*fs[k],n)\n            if t+x > i, do: {:halt, {k,t}}, else: {:cont, {c,t+x}}\n        end)\n\n        if k, do: helper(n-1, div(p,fs[k]), Map.update!(fs,k,& &1-1), ks, [k|rs], i-t), else: \"\"\n    end\n\n    def permutation_by_number(word, index) do\n        n = String.length(word)\n        word = word |> String.graphemes |> Enum.sort\n        fs = Enum.reduce(word, %{}, fn c,m -> Map.update(m,c,1,& &1+1) end)\n        ks = Enum.uniq(word)\n        p = Enum.reduce fs, 1, fn {_,v},p -> p*factorial(v) end\n\n        helper(n, p, fs, ks, [], index)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78684,"user_id":443,"body":"defmodule Kata do\n  # This whole thing feels so ugly, but it works...\n  # I might come back and try again another time to make it neater\n  \n  def permutation_by_number(word, n) do\n    word\n    |> String.to_charlist\n    |> Enum.sort\n    |> find_permutation(n)\n    |> to_string\n  end\n  \n  defp find_permutation(letters, n) do\n    generate_counts(letters)\n    |> find_permutation(letters, n, 0, [], %{})\n    |> Enum.reverse\n  end\n  \n  defp find_permutation(_, [], _, _, result, _) do\n    result\n  end\n  defp find_permutation(_, _, _, _, [:nil | _], _) do\n    []\n  end\n  defp find_permutation(counts, letters, n, u_letter_index, result, fac_cache) do\n    letter = counts\n      |> Map.keys\n      |> Enum.at(u_letter_index)\n    reduced_letters = List.delete(letters, letter)\n    reduced_counts = generate_counts(reduced_letters)\n    {perms_if_letter_chosen, u_fac_cache} = number_of_permutations(reduced_letters, reduced_counts, fac_cache)\n    case perms_if_letter_chosen <= n do\n      :true ->\n        find_permutation(counts, letters, n - perms_if_letter_chosen, u_letter_index + 1, result, u_fac_cache)\n      :false ->\n        find_permutation(reduced_counts, reduced_letters, n, 0, [letter | result], u_fac_cache)\n    end\n  end\n  \n  defp number_of_permutations(letters, counts, fac_cache) do\n    {num, u_fac_cache} = cached_factorial(length(letters), fac_cache)\n    {den, u_fac_cache_2} = counts\n      |> Map.values\n      |> cached_denominator(u_fac_cache, 1)\n    {num \/ den, u_fac_cache_2}\n  end\n  \n  defp cached_denominator([], cache, result), do: {result, cache}\n  defp cached_denominator([head | tail], cache, result) do\n    {fac, u_cache} = cached_factorial(head, cache)\n    cached_denominator(tail, u_cache, result * fac)\n  end\n\n  defp generate_counts(letters) do\n    generate_counts(%{}, letters)\n  end\n  defp generate_counts(counts, []) do\n    counts\n  end\n  defp generate_counts(counts, [letter | letters]) do\n    counts\n    |> Map.update(letter, 1, &(&1 + 1))\n    |> generate_counts(letters)\n  end\n  \n  defp cached_factorial(n, cache) do\n    case Map.get(cache, n) do\n      :nil ->\n        fac = factorial(n)\n        {fac, Map.put(cache, n, fac)}\n      val ->\n        {val, cache}\n    end\n  end\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(n, result) when n < 2, do: result\n  defp factorial(n, result), do: factorial(n - 1, result * n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78685,"user_id":null,"body":"defmodule Kata do\n  @spec factorial(integer()) :: integer()\n  def factorial(0), do: 1\n  def factorial(n), do: factorial(n - 1) * n\n\n  @spec permutation_with_repetition(list(integer())) :: integer()\n  def permutation_with_repetition(freqs) do\n    total = Enum.sum(freqs)\n\n    Enum.reduce(freqs, factorial(total), fn freq, acc ->\n      div(acc, factorial(freq))\n    end)\n  end\n\n  def frequencies(list) do\n    list\n    |> Enum.reduce(%{}, fn elem, acc ->\n      new_count = Map.get(acc, elem, 0) + 1\n      Map.put(acc, elem, new_count)\n    end)\n  end\n\n  def permutation_by_number(word, n) do\n    freqs =\n      String.graphemes(word)\n      |> frequencies()\n\n    case find_permutation(freqs, n) do\n      :not_found -> \"\"\n      l -> Enum.join(l, \"\")\n    end\n  end\n\n  def find_permutation(map, 0) when map == %{}, do: []\n\n  def find_permutation(freqs, n) do\n    sorted_chars =\n      freqs\n      |> Enum.filter(fn {_, freq} -> freq > 0 end)\n      |> Enum.map(fn {ch, _} -> ch end)\n      |> Enum.sort()\n\n    case find_first_char(freqs, sorted_chars, n, 0) do\n      :not_found ->\n        :not_found\n\n      {first_char, perms_before} ->\n        new_freqs =\n          case Map.get(freqs, first_char) do\n            1 -> Map.delete(freqs, first_char)\n            _ -> Map.update!(freqs, first_char, &(&1 - 1))\n          end\n\n        new_n = n - perms_before\n\n        case find_permutation(new_freqs, new_n) do\n          :not_found -> :not_found\n          perm -> [first_char | perm]\n        end\n    end\n  end\n\n  def find_first_char(_, [], _, _) do\n    :not_found\n  end\n\n  def find_first_char(freqs_map, [ch | rest], n, perms_before) do\n    perms_starting_with_ch =\n      freqs_map\n      |> Map.update!(ch, &(&1 - 1))\n      |> Map.values()\n      |> permutation_with_repetition()\n\n    acc = perms_before + perms_starting_with_ch\n\n    if acc > n do\n      {ch, perms_before}\n    else\n      find_first_char(freqs_map, rest, n, acc)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78686,"user_id":1016,"body":"defmodule Factorial do\n  def of(0), do: 1\n  def of(n) when n > 0, do: n * of(n - 1)\nend\n\ndefmodule Kata do\n  def permutation_by_number(word, n, current) when byte_size(word) == 0 do\n    current\n    |> Enum.reverse()\n    |> List.to_string()\n  end\n\n  def permutation_by_number() do\n    \"\"\n  end\n\n  def permutation_by_number(word, n) do\n    word\n    |> String.graphemes()\n    |> Enum.sort()\n    |> List.to_string()\n    |> Kata.permutation_by_number(n, [])\n  end\n\n  def permutation_by_number(word, n, current) do\n    freq =\n      word\n      |> String.graphemes()\n      |> tl()\n      |> Enum.uniq()\n      |> (&Enum.reduce(&1, %{}, fn char, acc ->\n            Enum.count(tl(String.graphemes(word)), fn x ->\n              x == char\n            end)\n            |> (fn x -> Map.put(acc, char, x) end).()\n          end)).()\n\n    div(\n      Factorial.of(Enum.sum(Map.values(freq))),\n      Enum.reduce(freq, 1, fn x, acc ->\n        Factorial.of(elem(x, 1)) * acc\n      end)\n    )\n    |> (&(cond do\n            &1 <= n ->\n              try do\n                String.graphemes(word)\n                |> (fn y ->\n                      List.pop_at(y, Enum.find_index(y, fn x -> x > hd(y) end))\n                      |> (fn k -> [elem(k, 0) | elem(k, 1)] end).()\n                    end).()\n                |> List.to_string()\n                |> Kata.permutation_by_number(\n                  n - &1,\n                  current\n                )\n              rescue\n                _ in FunctionClauseError -> permutation_by_number()\n              end\n\n            &1 > n ->\n              String.graphemes(word)\n              |> List.pop_at(0)\n              |> (fn x ->\n                    Kata.permutation_by_number(List.to_string(Enum.sort(elem(x, 1))), n, [\n                      elem(x, 0) | current\n                    ])\n                  end).()\n\n            true ->\n              nil\n          end)).()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"581ee0db1bbdd04e010002fd":[{"id":78687,"user_id":null,"body":"defmodule Approxinter do\n\n    def interp(f, l, u, n) do \n      d = (u - l) \/ n\n      for i <- 0..n - 1, do: f.(l + i * d) |> Float.floor(2)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78688,"user_id":null,"body":"defmodule Approxinter do\n  @epsilon 0.000000001\n  \n  import Float, only: [floor: 2]\n  \n  def interp(f, l, u, n) do \n    d = (u - l) \/ n\n    \n    l\n    |> Stream.unfold(fn x -> {x, x + d} end)\n    |> Stream.map(f)\n    |> Stream.map(&floor(&1, 2))\n    |> Enum.take(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78689,"user_id":null,"body":"defmodule Approxinter do\n\n  @epsilon 0.000000001\n\n  def interp(f, l, u, n) do \n    d = (u - l) \/ n\n    _interp(f, l, u, d, [])\n  end\n  \n  defp _interp(_f, iter, max, _step, result) when (iter + @epsilon) >= max do\n    IO.inspect result\n    Enum.reverse(result) |> Enum.map(&(Float.floor(&1, 2)))\n  end\n  defp _interp(f, iter, max, step, result) do\n    _interp(f, iter + step, max, step, [f.(iter) | result])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78690,"user_id":492,"body":"defmodule Approxinter do\n\n    defp calc_step(i, l, u, n) do l + (i \/ n) * (u - l) end\n    defp interp1(i, _, _, _, n, acc) when i == n do\n        acc\n    end\n    defp interp1(i, f, l, u, n, acc) do\n        interp1((i + 1), f, l, u, n, [Float.floor(f.(calc_step(i, l, u, n)), 2) | acc])\n    end\n    def interp(f, l, u, n) do Enum.reverse(interp1(0, f, l, u, n, [])) end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78691,"user_id":null,"body":"defmodule Approxinter do\n  def interp(f, l, u, n) do\n    Enum.map(0..(n - 1), fn i -> f.(l + (u - l) \/ n * i) |> Float.floor(2) end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78692,"user_id":null,"body":"defmodule Approxinter do\n    def interp(f, l, u, n) do \n      Enum.map(0..n-1, fn i -> Float.floor(f.(l + i * ((u-l)\/n)), 2) end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78693,"user_id":492,"body":"defmodule Approxinter do\n\n    defp calc_step(i, l, u, n) do l + i * (u - l) \/ n end\n    defp interp1(i, _, _, _, n, acc) when i == n do\n        acc\n    end\n    defp interp1(i, f, l, u, n, acc) do\n        interp1((i + 1), f, l, u, n, [Float.floor(f.(calc_step(i, l, u, n)), 2) | acc])\n    end\n    def interp(f, l, u, n) do Enum.reverse(interp1(0, f, l, u, n, [])) end\nend  ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78694,"user_id":null,"body":"defmodule Approxinter do\n\n  def interp(func, start, stop, n), do: do_interp(func, start, stop, n)\n\n  defp do_interp(func, start, stop, n), do:\n    do_interp(func, start, stop, (stop - start) \/ n, 0, n, [])\n    |> Enum.map(fn x -> floor(x * 100) \/ 100 end)\n    |> Enum.reverse\n\n  defp do_interp(_, _, _, _, counter, n, acc) when counter >= n, do: acc\n  defp do_interp(func, start, stop, d, counter, n, acc), do:\n    do_interp(func, start + d, stop, d, counter + 1, n, [func.(start) | acc])\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78695,"user_id":527,"body":"defmodule Approxinter do\n  def interp(f, l, u, n) do \n    for i <- 0..n-1, do: floor(f.(l + (u - l) * i \/ n) * 100) \/ 100\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78696,"user_id":null,"body":"defmodule Approxinter do\n\n    def interp(f, l, u, n) do \n      d = (u - l) \/ n\n      \n      l\n      |> Stream.unfold(fn x ->\n        y = f.(x) |> Float.floor(2)\n        {y, x + d}\n      end)\n      |> Enum.take(n)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"582cb0224e56e068d800003c":[{"id":78697,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time), do: trunc(time\/2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78698,"user_id":527,"body":"defmodule KeepHydrated do\n  @spec litres(number) :: non_neg_integer\n  def litres(time) do\n    floor(time \/ 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78699,"user_id":null,"body":"defmodule KeepHydrated do\n  \n  @litresPerHour 0.5\n  \n  @doc \"\"\"\n  Calculate how many litres of water would be drink.\n  \n  ## Parameters\n  \n    - time: time in hours\n    \n  ## Example:\n  \n    iex> KeepHydrated.litres(2)\n    1\n    \n    iex> KeepHydrated.litres(1.4)\n    0\n    \n  \"\"\"\n  @spec litres(number()) :: non_neg_integer()\n  def litres(time) do\n    time * @litresPerHour |> floor\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78700,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time) do\n    time\n    |> litres_drink\n    |> trunc\n  end\n  \n  def litres_drink(time), do: time \/ 2\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78701,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time) do\n    trunc(Float.floor(time\/2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78702,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time), do: trunc(time * 0.50)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78703,"user_id":527,"body":"defmodule KeepHydrated do\n  def litres(time), do: floor(time \/ 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78704,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time) do\n    # solve! :D\n    time*0.5 |> trunc\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78705,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time) when is_integer(time) do\n    div(time, 2)\n  end\n\n  def litres(time) when is_float(time) do\n    time = trunc(time)\n    div(time, 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78706,"user_id":null,"body":"defmodule KeepHydrated do\n  def litres(time) when time < 2, do: 0\n  def litres(time) do\n    time |> floor() |> div(2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5849169a6512c5964000016e":[{"id":78707,"user_id":527,"body":"defmodule Kata do\n  def greatest_common_factor(ls) do\n    Enum.reduce(ls, &Integer.gcd\/2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78708,"user_id":null,"body":"defmodule Kata do\n    def greatest_common_factor(ls), do:\n        Enum.reduce(ls, &Integer.gcd\/2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78709,"user_id":null,"body":"defmodule Kata do\n  def greatest_common_factor(ls) do\n    for n1 <- ls,\n        reduce: 0 do\n          n2 -> gcd(n1, n2)\n    end\n  end\n  \n  defp gcd(n, 0), do: n\n  defp gcd(m, n) when m < n, do: gcd(n, m)\n  defp gcd(m, n), do: gcd(n, rem(m, n))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78710,"user_id":null,"body":"defmodule Kata do\n  def greatest_common_factor([hd | tl]) do\n    Enum.reduce(tl, hd, fn x, acc ->\n      gcd(x, acc)\n    end)\n  end\n\n  def gcd(a, 0), do: a\n  def gcd(a, b) when b > a, do: gcd(b, a)\n  def gcd(a, b) do\n    [a, b] = [b, rem(a, b)]\n    gcd(a, b)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78711,"user_id":null,"body":"defmodule Kata do\n    def greatest_common_factor(ls) do\n        Enum.reduce(ls, & Integer.gcd(&1, &2))\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78712,"user_id":527,"body":"defmodule Kata do\n  def greatest_common_factor(ls) do\n    Enum.reduce(ls, 0, &Integer.gcd\/2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"585894545a8a07255e0002f1":[{"id":78713,"user_id":null,"body":"defmodule Kata do\n    import Enum\n    import MapSet\n    @graph %{\n        A: {new([:B, :D, :E, :F, :H]), %{B: :C, D: :G, E: :I}},\n        B: {new([:A, :C, :D, :E, :F, :G, :I]), %{E: :H}},\n        C: {new([:B, :D, :E, :F, :H]), %{B: :A, E: :G, F: :I}},\n        D: {new([:A, :B, :C, :E, :G, :H, :I]), %{E: :F}},\n        E: {new([:A, :B, :C, :D, :F, :G, :H, :I]), %{}},\n        F: {new([:A, :B, :C, :E, :G, :H, :I]), %{E: :D}},\n        G: {new([:B, :D, :E, :F, :H]), %{D: :A, E: :C, H: :I}},\n        H: {new([:A, :C, :D, :E, :F, :G, :I]), %{E: :B}},\n        I: {new([:B, :D, :E, :F, :H]), %{E: :A, F: :C, H: :G}}\n    }\n\n    defp count(_node, len, _visited) when len < 2, do: len\n    defp count(node, len, visited) do\n        {to, from} = @graph[node]\n        pass = Map.keys(from)\n            |> new\n            |> intersection(visited)\n            |> map(& Map.get(from, &1))\n            |> new\n\n        to\n        |> union(pass)\n        |> difference(visited)\n        |> map(& count(&1, len - 1, put(visited, &1)))\n        |> sum\n    end\n\n    def count_patterns_from(_str, len) when len > 9, do: 0\n    def count_patterns_from(str, len) do\n        node = str |> String.to_atom\n        count(node, len, new([node]))\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78714,"user_id":null,"body":"defmodule Kata do\n  @crossovers %{\n    {\"A\", \"C\"} => \"B\",\n    {\"C\", \"A\"} => \"B\",\n    {\"D\", \"F\"} => \"E\",\n    {\"F\", \"D\"} => \"E\",\n    {\"G\", \"I\"} => \"H\",\n    {\"I\", \"G\"} => \"H\",\n    {\"A\", \"G\"} => \"D\",\n    {\"G\", \"A\"} => \"D\",\n    {\"B\", \"H\"} => \"E\",\n    {\"H\", \"B\"} => \"E\",\n    {\"C\", \"I\"} => \"F\",\n    {\"I\", \"C\"} => \"F\",\n    {\"A\", \"I\"} => \"E\",\n    {\"I\", \"A\"} => \"E\",\n    {\"C\", \"G\"} => \"E\",\n    {\"G\", \"C\"} => \"E\"\n  }\n\n  @letters String.graphemes(\"ABCDEFGHI\")\n\n  def count_patterns_from(first, len) do\n    tbl = :ets.new(:tbl, [])\n    Enum.each(@letters, fn c -> :ets.insert(tbl, {c, false}) end)\n    :ets.insert(tbl, {:count, 0})\n\n    :ets.insert(tbl, {first, true})\n    search(tbl, first, len - 1)\n    lookup(tbl, :count)\n  end\n\n  defp search(tbl, _, 0), do: :ets.update_counter(tbl, :count, {2, 1})\n\n  defp search(tbl, frm, len) do\n    Enum.filter(@letters, fn c ->\n      unless lookup(tbl, c) do\n        cross = Map.get(@crossovers, {frm, c})\n        !(cross && !lookup(tbl, cross))\n      end\n    end)\n    |> Enum.each(fn c ->\n      :ets.insert(tbl, {c, true})\n      search(tbl, c, len - 1)\n      :ets.insert(tbl, {c, false})\n    end)\n  end\n\n  defp lookup(tbl, key) do\n    [{_, v}] = :ets.lookup(tbl, key)\n    v\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78715,"user_id":null,"body":"defmodule Kata do\n\n  # No math solution because I'm not smart and I don't want to look it up\n\n  def count_patterns_from(_first, len) when len > 9 or len < 1 do\n    0\n  end\n  def count_patterns_from(first, len) do\n    matrix = toggle(matrix(), coords(first))\n    iterate(matrix, for_char(coords(first), matrix), len - 1, 0)\n  end\n\n  defp iterate(_, _, length, _) when length == 0 do\n    1\n  end\n\n  defp iterate(matrix, possible_list, length, out) do\n    Enum.reduce(possible_list, out, fn next, acc ->\n      acc + iterate(toggle(matrix, coords(next)), for_char(coords(next), matrix), length - 1, out)\n    end)\n  end\n\n  defp matrix do\n    [\n      [false, false, false],\n      [false, false, false],\n      [false, false, false]\n    ]\n  end\n\n  defp matrix(matrix, {y, x}) do\n    Enum.at(Enum.at(matrix, y), x)\n  end\n\n  defp toggle(matrix, {y, x}) do\n    List.replace_at(matrix, y, List.replace_at(Enum.at(matrix, y), x, true))\n  end\n\n  defp invert(int) when int == 1 do\n    1\n  end\n\n  defp invert(int) do\n    if int == 2 do 0 else 2 end\n  end\n\n  defp for_char({y, x} = coords, matrix) do\n    if coords in corners() do\n      possible = [{invert(y), 1}, {1, invert(x)}]\n      possible = if matrix(matrix, {1, 1}) do [{invert(y), invert(x)} | possible] else [{1, 1} | possible] end\n      y_neighbor = {if y == 2 do y - 1 else y + 1 end, x}\n      possible = if matrix(matrix, y_neighbor) do [{invert(y), x} | possible] else [y_neighbor | possible] end\n      x_neighbor = {y, if x == 2 do x - 1 else x + 1 end}\n      possible = if matrix(matrix, x_neighbor) do [{y, invert(x)} | possible] else [x_neighbor | possible] end\n      Enum.reduce(possible, [], fn item, acc -> if not matrix(matrix, item) do [char(item) | acc] else acc end end)\n    else\n      if coords in sides() do\n        possible = List.delete(sides() ++ corners(), {invert(y), invert(x)})\n        possible = List.delete(possible, {y, x})\n        possible = if matrix(matrix, {1, 1}) do [{invert(y), invert(x)} | possible] else [{1, 1} | possible] end\n        Enum.reduce(possible, [], fn item, acc -> if not matrix(matrix, item) do [char(item) | acc] else acc end end)\n      else\n        possible = sides() ++ corners()\n        Enum.reduce(possible, [], fn item, acc -> if not matrix(matrix, item) do [char(item) | acc] else acc end end)\n      end\n    end\n  end\n\n  defp corners() do\n    [{0, 0}, {0, 2}, {2, 0}, {2, 2}]\n  end\n\n  defp sides() do\n    [{0, 1}, {1, 2}, {2, 1}, {1, 0}]\n  end\n\n  defp coords(char) do\n    case char do\n      \"A\" ->\n        {0, 0}\n      \"B\" ->\n        {0, 1}\n      \"C\" ->\n        {0, 2}\n      \"D\" ->\n        {1, 0}\n      \"E\" ->\n        {1, 1}\n      \"F\" ->\n        {1, 2}\n      \"G\" ->\n        {2, 0}\n      \"H\" ->\n        {2, 1}\n      \"I\" ->\n        {2, 2}\n    end\n  end\n\n  defp char(coords) do\n    case coords do\n      {0, 0} ->\n        \"A\"\n      {0, 1} ->\n        \"B\"\n      {0, 2} ->\n        \"C\"\n      {1, 0} ->\n        \"D\"\n      {1, 1} ->\n        \"E\"\n      {1, 2} ->\n        \"F\"\n      {2, 0} ->\n        \"G\"\n      {2, 1} ->\n        \"H\"\n      {2, 2} ->\n        \"I\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78716,"user_id":null,"body":"defmodule Kata do\n    @options %{\n      \"A\" => [\"B\", {\"C\", \"B\"}, \"D\", \"E\", \"F\", {\"G\", \"D\"}, \"H\", {\"I\", \"E\"}],\n      \"B\" => [\"A\", \"C\", \"D\", \"E\", \"F\", \"G\", {\"H\", \"E\"}, \"I\"],\n      \"C\" => [{\"A\", \"B\"}, \"B\", \"D\", \"E\", \"F\", {\"G\", \"E\"}, \"H\", {\"I\", \"F\"}],\n      \"D\" => [\"A\", \"B\", \"C\", \"E\", {\"F\", \"E\"}, \"G\", \"H\", \"I\"],\n      \"E\" => [\"A\", \"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"I\"],\n      \"F\" => [\"A\", \"B\", \"C\", {\"D\", \"E\"}, \"E\", \"G\", \"H\", \"I\"],\n      \"G\" => [{\"A\", \"D\"}, \"B\", {\"C\", \"E\"}, \"D\", \"E\", \"F\", \"H\", {\"I\", \"H\"}],\n      \"H\" => [\"A\", {\"B\", \"E\"}, \"C\", \"D\", \"E\", \"F\", \"G\", \"I\"],\n      \"I\" => [{\"A\", \"E\"}, \"B\", {\"C\", \"F\"}, \"D\", \"E\", \"F\", {\"G\", \"H\"}, \"H\"],\n    }\n    \n    def count_patterns_from(first, len, used \\\\ [])\n    def count_patterns_from(_, len, _) when len == 0, do: 0\n    def count_patterns_from(_, len, _) when len == 1, do: 1\n    def count_patterns_from(_, len, _) when len > 9, do: 0\n    def count_patterns_from(first, len, used), do:\n      first\n      |> options(used)\n      |> Enum.reduce(0, & &2 + count_patterns_from(&1, len - 1, [first|used]))\n    \n    defp options(current, used), do:\n      @options\n      |> Map.get(current)\n      |> Enum.reduce([], fn\n        ({dest, path}, acc) -> if path in used, do: [dest|acc], else: acc\n        (dest, acc) -> [dest|acc]\n      end)\n      |> Kernel.--(used)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78717,"user_id":null,"body":"defmodule Kata do\n    @exception_edges %{\n      {\"A\", \"C\"} => \"B\",\n      {\"C\", \"I\"} => \"F\",\n      {\"G\", \"I\"} => \"H\",\n      {\"A\", \"G\"} => \"D\",\n      {\"A\", \"I\"} => \"E\",\n      {\"C\", \"G\"} => \"E\",\n      {\"B\", \"H\"} => \"E\",\n      {\"D\", \"F\"} => \"E\"\n    }\n    \n    @all [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n\n    def count_patterns_from(_first, 0), do: 0\n    def count_patterns_from(first, len) do\n        count_patterns_from(first, len - 1, @all)\n    end\n    \n    def count_patterns_from(_first, 0, remaining_to_visit), do: 1\n    def count_patterns_from(first, len, remaining_to_visit) do\n      remaining_to_visit = List.delete(remaining_to_visit, first)\n      \n      already_visited = @all -- remaining_to_visit\n      \n      Enum.reduce(remaining_to_visit, 0, fn char, acc ->\n        edge = if char > first, do: {first, char}, else: {char, first}\n        \n        if Map.has_key?(@exception_edges, edge) and @exception_edges[edge] not in already_visited do\n          acc\n        else\n          acc + count_patterns_from(char, len - 1, remaining_to_visit)\n        end\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78718,"user_id":53,"body":"defmodule Kata do\n\n    def count_patterns_from(first, len), do: count_patterns_from_fast(first, len)\n    \n    defp count_patterns_from_fast(_, 0), do: 0\n    defp count_patterns_from_fast(_, 1), do: 1\n    defp count_patterns_from_fast(_, len) when len > 9, do: 0\n    \n    defp count_patterns_from_fast(\"A\", 9), do: 13792\n    defp count_patterns_from_fast(\"A\", 8), do: 13792\n    defp count_patterns_from_fast(\"A\", 7), do: 7104\n    defp count_patterns_from_fast(\"A\", 6), do: 2516\n    defp count_patterns_from_fast(\"A\", 5), do: 684\n    defp count_patterns_from_fast(\"A\", 4), do: 154\n    defp count_patterns_from_fast(\"A\", 3), do: 31\n    defp count_patterns_from_fast(\"A\", 2), do: 5\n    \n    defp count_patterns_from_fast(\"C\", 9), do: 13792\n    defp count_patterns_from_fast(\"C\", 8), do: 13792\n    defp count_patterns_from_fast(\"C\", 7), do: 7104\n    defp count_patterns_from_fast(\"C\", 6), do: 2516\n    defp count_patterns_from_fast(\"C\", 5), do: 684\n    defp count_patterns_from_fast(\"C\", 4), do: 154\n    defp count_patterns_from_fast(\"C\", 3), do: 31\n    defp count_patterns_from_fast(\"C\", 2), do: 5\n    \n    defp count_patterns_from_fast(\"G\", 9), do: 13792\n    defp count_patterns_from_fast(\"G\", 8), do: 13792\n    defp count_patterns_from_fast(\"G\", 7), do: 7104\n    defp count_patterns_from_fast(\"G\", 6), do: 2516\n    defp count_patterns_from_fast(\"G\", 5), do: 684\n    defp count_patterns_from_fast(\"G\", 4), do: 154\n    defp count_patterns_from_fast(\"G\", 3), do: 31\n    defp count_patterns_from_fast(\"G\", 2), do: 5\n    \n    defp count_patterns_from_fast(\"I\", 9), do: 13792\n    defp count_patterns_from_fast(\"I\", 8), do: 13792\n    defp count_patterns_from_fast(\"I\", 7), do: 7104\n    defp count_patterns_from_fast(\"I\", 6), do: 2516\n    defp count_patterns_from_fast(\"I\", 5), do: 684\n    defp count_patterns_from_fast(\"I\", 4), do: 154\n    defp count_patterns_from_fast(\"I\", 3), do: 31\n    defp count_patterns_from_fast(\"I\", 2), do: 5\n    \n    defp count_patterns_from_fast(\"B\", 9), do: 15564\n    defp count_patterns_from_fast(\"B\", 8), do: 15564\n    defp count_patterns_from_fast(\"B\", 7), do: 8118\n    defp count_patterns_from_fast(\"B\", 6), do: 2926\n    defp count_patterns_from_fast(\"B\", 5), do: 816\n    defp count_patterns_from_fast(\"B\", 4), do: 188\n    defp count_patterns_from_fast(\"B\", 3), do: 37\n    defp count_patterns_from_fast(\"B\", 2), do: 7\n    \n    defp count_patterns_from_fast(\"D\", 9), do: 15564\n    defp count_patterns_from_fast(\"D\", 8), do: 15564\n    defp count_patterns_from_fast(\"D\", 7), do: 8118\n    defp count_patterns_from_fast(\"D\", 6), do: 2926\n    defp count_patterns_from_fast(\"D\", 5), do: 816\n    defp count_patterns_from_fast(\"D\", 4), do: 188\n    defp count_patterns_from_fast(\"D\", 3), do: 37\n    defp count_patterns_from_fast(\"D\", 2), do: 7\n    \n    defp count_patterns_from_fast(\"F\", 9), do: 15564\n    defp count_patterns_from_fast(\"F\", 8), do: 15564\n    defp count_patterns_from_fast(\"F\", 7), do: 8118\n    defp count_patterns_from_fast(\"F\", 6), do: 2926\n    defp count_patterns_from_fast(\"F\", 5), do: 816\n    defp count_patterns_from_fast(\"F\", 4), do: 188\n    defp count_patterns_from_fast(\"F\", 3), do: 37\n    defp count_patterns_from_fast(\"F\", 2), do: 7\n    \n    defp count_patterns_from_fast(\"H\", 9), do: 15564\n    defp count_patterns_from_fast(\"H\", 8), do: 15564\n    defp count_patterns_from_fast(\"H\", 7), do: 8118\n    defp count_patterns_from_fast(\"H\", 6), do: 2926\n    defp count_patterns_from_fast(\"H\", 5), do: 816\n    defp count_patterns_from_fast(\"H\", 4), do: 188\n    defp count_patterns_from_fast(\"H\", 3), do: 37\n    defp count_patterns_from_fast(\"H\", 2), do: 7\n    \n    defp count_patterns_from_fast(\"E\", 9), do: 23280\n    defp count_patterns_from_fast(\"E\", 8), do: 23280\n    defp count_patterns_from_fast(\"E\", 7), do: 12024\n    defp count_patterns_from_fast(\"E\", 6), do: 4248\n    defp count_patterns_from_fast(\"E\", 5), do: 1152\n    defp count_patterns_from_fast(\"E\", 4), do: 256\n    defp count_patterns_from_fast(\"E\", 3), do: 48\n    defp count_patterns_from_fast(\"E\", 2), do: 8\n    \n    defp count_patterns_from_slow(first, len) do\n        cond do\n            len < 2 -> len\n            true -> dfs(first, %{\n                \"AC\" => \"B\",\n                \"AG\" => \"D\", \n                \"AI\" => \"E\",  \n                \"BH\" => \"E\",\n                \"CA\" => \"B\",\n                \"CG\" => \"E\",\n                \"CI\" => \"F\",  \n                \"DF\" => \"E\",  \n                \"FD\" => \"E\",\n                \"GA\" => \"D\", \n                \"GC\" => \"E\", \n                \"GI\" => \"H\", \n                \"HB\" => \"E\",\n                \"IA\" => \"E\",\n                \"IC\" => \"F\", \n                \"IG\" => \"H\"\n              }, len)\n        end\n    end\n    \n    defp dfs(pattern, restricted, len) do\n        cond do\n            len == String.length(pattern) -> 1\n            true -> Enum.reduce([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"], 0, fn nxt, count -> process(nxt, count, pattern, restricted, len) end)\n        end\n    end\n    \n    defp process(nxt, count, pattern, restricted, len) do\n        cond do\n            nxt == String.last(pattern) -> count\n            String.contains?(pattern, nxt) -> count\n            Map.has_key?(restricted, String.last(pattern) <> nxt) && !String.contains?(pattern, Map.get(restricted, String.last(pattern) <> nxt)) -> count\n            true -> count + dfs(pattern <> nxt, restricted, len)\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78719,"user_id":null,"body":"defmodule Kata do\n    @corner %{\n      2 => 5,\n      3 => 31,\n      4 => 154,\n      5 => 684,\n      6 => 2516,\n      7 => 7104,\n      8 => 13792,\n      9 => 13792,\n    }\n    @edge %{\n      2 => 7,\n      3 => 37,\n      4 => 188,\n      5 => 816,\n      6 => 2926,\n      7 => 8118,\n      8 => 15564,\n      9 => 15564,\n    }\n    @center %{\n      2 => 8,\n      3 => 48,\n      4 => 256,\n      5 => 1152,\n      6 => 4248,\n      7 => 12024,\n      8 => 23280,\n      9 => 23280,\n    }\n    def count_patterns_from(_, 0), do: 0\n    def count_patterns_from(_, 1), do: 1\n    def count_patterns_from(_, x) when x > 9, do: 0\n    def count_patterns_from(start, x) when start in ~w(A C G I), do: @corner[x]\n    def count_patterns_from(start, x) when start in ~w(B D F H), do: @edge[x]\n    def count_patterns_from(\"E\", x), do: @center[x]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78720,"user_id":null,"body":"defmodule Kata do\n    @corner %{\n      2 => 5,\n      3 => 31,\n      4 => 154,\n      5 => 684,\n      6 => 2516,\n      7 => 7104,\n      8 => 13792,\n      9 => 13792,\n    }\n    @edge %{\n      2 => 7,\n      3 => 37,\n      4 => 188,\n      5 => 816,\n      6 => 2926,\n      7 => 8118,\n      8 => 15564,\n      9 => 15564,\n    }\n    @center %{\n      2 => 8,\n      3 => 48,\n      4 => 256,\n      5 => :non_p,\n      6 => 4248,\n      7 => :non_r,\n      8 => 23280,\n      9 => 23280,\n    }\n    def count_patterns_from(_, 0), do: 0\n    def count_patterns_from(_, 1), do: 1\n    def count_patterns_from(_, x) when x > 9, do: 0\n    def count_patterns_from(start, x) when start in ~w(A C G I), do: @corner[x]\n    def count_patterns_from(start, x) when start in ~w(B D F H), do: @edge[x]\n    def count_patterns_from(\"E\", x), do: @center[x]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78721,"user_id":null,"body":"defmodule Kata do\n  def count_patterns_from(first, len) do\n    count_patterns_from(graph(), first, len)\n  end\n\n  def count_patterns_from(_, _, len) when len < 2, do: len\n  def count_patterns_from(_, _, len) when len > 9, do: 0\n\n  def count_patterns_from(graph, current, 2) do\n    Map.get(graph, current, []) |> Enum.count()\n  end\n\n  def count_patterns_from(graph, current, len) do\n    nodes = Map.get(graph, current, [])\n    graph = remove_node(graph, current)\n    IO.inspect({current, nodes}, label: \"after\")\n    Enum.map(nodes, fn x -> count_patterns_from(graph, x, len - 1) end) |> Enum.sum()\n  end\n\n  def graph do\n    %{\n      \"A\" => ~W\"B D E F H\",\n      \"B\" => ~W\"A C D E F G I\",\n      \"C\" => ~W\"B D E F H\",\n      \"D\" => ~W\"A B C E G H I\",\n      \"E\" => ~W\"A B C D F G H I\",\n      \"F\" => ~W\"A B C E G H I\",\n      \"G\" => ~W\"B D E F H\",\n      \"H\" => ~W\"A C D E F G I\",\n      \"I\" => ~W\"B D E F H\"\n    }\n  end\n\n  def remove_node(graph, node) do\n    graph\n    |> remove_node(node, Map.get(graph, node, []))\n    |> merge_nodes_by_delete_separating(node)\n  end\n\n  def merge_nodes_by_delete_separating(graph, removing_node) do\n    case removing_node do\n      \"B\" ->\n        merge_nodes(graph, \"A\", \"C\")\n\n      \"H\" ->\n        merge_nodes(graph, \"G\", \"I\")\n\n      \"D\" ->\n        merge_nodes(graph, \"A\", \"G\")\n\n      \"F\" ->\n        merge_nodes(graph, \"C\", \"I\")\n\n      \"E\" ->\n        graph\n        |> merge_nodes(\"C\", \"G\")\n        |> merge_nodes(\"A\", \"I\")\n        |> merge_nodes(\"B\", \"H\")\n        |> merge_nodes(\"D\", \"F\")\n\n      _ ->\n        graph\n    end\n  end\n\n  defp remove_node(graph, node, []), do: Map.delete(graph, node)\n\n  defp remove_node(graph, node, [head | tail]) do\n    graph = remove_node(graph, node, tail)\n    remove_from_node(graph, head, node)\n  end\n\n  defp remove_from_node(graph, source_node, node_to_remove) do\n    node_value = Map.get(graph, source_node, [])\n    Map.put(graph, source_node, List.delete(node_value, node_to_remove))\n  end\n\n  defp merge_nodes(graph, source_node, target_node) do\n    source = Map.get(graph, source_node, [])\n    target = Map.get(graph, target_node, [])\n\n    if source != [] and target != [] do\n      graph\n      |> Map.put(source_node, [target_node | source])\n      |> Map.put(target_node, [source_node | target])\n    else\n      graph\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78722,"user_id":null,"body":"defmodule Kata do\n  def count_patterns_from(_, 0), do: 0\n  def count_patterns_from(_, 1), do: 1\n  def count_patterns_from(_, len) when len > 9, do: 0\n  def count_patterns_from(letter, len) do\n    paths([letter], path(letter, [letter]), len - 1)\n    |> flatten(len - 1)\n    |> length\n  end\n  \n  def flatten([], _), do: []\n  def flatten(arr, 1), do: arr\n  def flatten([h|t], depth), do: flatten(h, depth - 1) ++ flatten(t, depth)\n  \n  def paths(pattern, _, 0), do: pattern\n\n  def paths(pattern, paths, len) do\n    Enum.map(paths, fn l -> paths(pattern ++ [l], path(l, pattern), len - 1) end)\n  end\n  \n  def smart_path(direct, passthrough, used) do\n    extra = Enum.filter(passthrough, fn ([direct | _ ]) -> \n      Enum.member?(used, direct)\n    end)\n    |> Enum.map(fn ([_ | [passthrough | _]]) -> passthrough end) \n    Enum.uniq(extra ++ direct) -- used    \n  end\n\n  def path(\"A\", pattern) do\n    smart_path([\"B\", \"D\", \"E\", \"F\", \"H\"], [[\"B\", \"C\"], [\"E\", \"I\"], [\"D\", \"G\"]], pattern)\n  end\n  \n  def path(\"B\", pattern) do\n    smart_path([\"A\", \"C\", \"F\", \"E\", \"D\", \"I\", \"G\"], [[\"E\", \"H\"]], pattern)\n  end\n  \n  def path(\"C\", pattern) do\n    smart_path([\"B\", \"E\", \"F\", \"H\", \"D\"], [[\"E\", \"G\"], [\"F\", \"I\"], [\"B\", \"A\"]], pattern)\n  end\n  \n  def path(\"D\", pattern) do\n    smart_path([\"A\", \"B\", \"E\", \"H\", \"G\", \"C\", \"I\"], [[\"E\", \"F\"]], pattern)\n  end\n  \n  def path(\"E\", pattern) do\n    smart_path([\"A\", \"B\", \"C\", \"F\", \"I\", \"H\", \"G\", \"D\"], [], pattern)\n  end\n  \n  def path(\"F\", pattern) do\n    smart_path([\"A\", \"B\", \"C\", \"E\", \"G\", \"H\", \"I\"], [[\"E\", \"D\"]], pattern)\n  end\n  \n  def path(\"G\", pattern) do\n    smart_path([\"B\", \"D\", \"E\", \"F\", \"H\"], [[\"D\", \"A\"], [\"H\", \"I\"], [\"E\", \"C\"]], pattern)\n  end\n    \n  def path(\"H\", pattern) do\n    smart_path([\"A\", \"C\", \"D\", \"E\", \"F\", \"G\", \"I\"], [[\"E\", \"B\"]], pattern)\n  end\n   \n  def path(\"I\", pattern) do\n    smart_path([\"B\", \"D\", \"E\", \"F\", \"H\"], [[\"H\", \"G\"], [\"E\", \"A\"], [\"F\", \"C\"]], pattern)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"586305e8916e244b66001a93":[{"id":78723,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    Map.keys(map) |>\n    Map.new(&({ &1, String.reverse(to_string(&1)) }))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78724,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    Map.new(map, fn {k, _v} -> {k, String.reverse(to_string(k))} end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78725,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    # Your code here\n    IO.inspect(map)\n    map\n    |> Enum.map(fn {x, _} -> {x, x |> Atom.to_string() |> String.reverse()} end)\n    |> IO.inspect()\n    |> Enum.into(%{})\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78726,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    map\n    |> Enum.map(fn {k, _} -> {k, k |> to_string() |> String.reverse()} end)\n    |> Map.new()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78727,"user_id":527,"body":"defmodule MapMirror do\n  def mirror(map) do\n    Map.new(map, fn {k, _} -> {k, String.reverse(Atom.to_string(k))} end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78728,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    for {key, _} <- map, into: %{}, do: {key, String.reverse(Atom.to_string(key))}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78729,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    map\n    |> Map.to_list()\n    |> Enum.map(fn {k, _v} ->\n      {k, List.to_string(Enum.reverse(String.to_charlist(Atom.to_string(k))))}\n    end)\n    |> Map.new()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78730,"user_id":53,"body":"defmodule MapMirror do\n  def mirror(a), do:\n    a |> Map.keys |> Enum.reduce(%{}, fn(k, b) ->\n      Map.put(b, k, k |> Atom.to_string |> String.reverse)\n    end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78731,"user_id":null,"body":"defmodule MapMirror do\n  def mirror(map) do\n    Map.keys(map) |> Enum.map(fn k -> { k, String.reverse(\"#{k}\") } end) |> Map.new\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78732,"user_id":null,"body":"defmodule MapMirror do\n\n  def mirror(map), do:\n    map\n    |> Map.to_list\n    |> Enum.map(fn {key, _} -> {key, reflect(to_string(key))} end)\n    |> Map.new\n\n  defp reflect(str), do:\n    str\n    |> String.graphemes\n    |> Enum.reverse\n    |> Enum.join\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58630e2ae88af44d2b0000ea":[{"id":78733,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size) do\n    rem(wall_length, pixel_size) == 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78734,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size) do\n    rem(wall_length, pixel_size) === 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78735,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size) do\n    div(wall_length, pixel_size)*pixel_size == wall_length\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78736,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size) do\n    #your code here\n    Integer.mod(wall_length, pixel_size) == 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78737,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall, pixel) do\n    cond do\n      trunc(wall \/ pixel) == wall \/ pixel -> true\n      true -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78738,"user_id":null,"body":"defmodule Wall do\n  @spec is_divisible(pos_integer, pos_integer) :: boolean\n  def is_divisible(wall_length, pixel_size) when rem(wall_length, pixel_size) == 0, do: true\n  def is_divisible(wall_length, pixel_size), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78739,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size), do: Float.floor(wall_length\/pixel_size) == wall_length\/pixel_size\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78740,"user_id":50,"body":"defmodule Wall do\n  def is_divisible(a,b) do\n    rem(a,b)==0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78741,"user_id":null,"body":"defmodule Wall, do: def is_divisible(a,b), do: rem(a,b) == 0","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78742,"user_id":null,"body":"defmodule Wall do\n  def is_divisible(wall_length, pixel_size) do\n    wall_length\n    |> rem(pixel_size)\n    |> fits?()\n  end\n  \n  def fits?(0), do: true\n  def fits?(_), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5866fc43395d9138a7000006":[{"id":78743,"user_id":676,"body":"defmodule Parsers do\n  def ensure_question(s) do\n    if String.ends_with?(s, \"?\") do\n      s\n    else\n      s <> \"?\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78744,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(s), do: String.ends_with?(s, \"?\") && s || s <> \"?\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78745,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(s) do\n    if s =~ \"?\" do\n      s\n    else\n      \"#{s}?\"\n    end  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78746,"user_id":null,"body":"defmodule Parsers do\n  defguardp is_question(string) when binary_part(string, byte_size(string) - 1, 1) == \"?\"\n\n  def ensure_question(string) when is_question(string), do: string\n  def ensure_question(string), do: \"#{string}?\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78747,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(<<??>>) do\n    <<??>>\n  end\n  \n  def ensure_question(<<s>>) do\n    <<s, ??>>\n  end\n  \n  def ensure_question(<<>>) do\n    <<??>>\n  end\n\n  def ensure_question(<<s, rest::binary>>) do\n    <<s>> <> ensure_question(rest)\n  end\n\n \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78748,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(s), do: String.replace(s<>\"?\", ~r\/\\?+$\/, \"?\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78749,"user_id":2697,"body":"defmodule Parsers do\n  def ensure_question(s), do: s |> String.ends_with?(\"?\") |> if(do: s, else: s <> \"?\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78750,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(s) do\n    if String.ends_with?(s, \"?\")  do\n      \"#{s}\"\n    else\n      \"#{s}?\"\n    end\n     \n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78751,"user_id":null,"body":"defmodule Parsers do\n  def ensure_question(s) do\n    s\n    |> String.reverse\n    |> reverse_ensure_question\n    |> String.reverse\n  end\n  \n  defp reverse_ensure_question(<<h::bytes-size(1)>> <> t) when h == \"?\", do: h <> t\n  defp reverse_ensure_question(reversed_string), do: \"?\" <> reversed_string\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78752,"user_id":null,"body":"defmodule Parsers, do: def ensure_question(s), do: s |> String.ends_with?(\"?\") |> if(do: s, else: s <> \"?\")","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5868b2de442e3fb2bb000119":[{"id":78753,"user_id":null,"body":"defmodule Closest do\n\n  def closest(\"\"), do: [{}, {}]\n  def closest(s) do\n    s\n    |> String.split\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.with_index\n    |> Enum.map(&weight\/1)\n    |> Enum.sort(&sort\/2)\n    |> Enum.chunk(2, 1)\n    |> Enum.min_by(&min\/1)\n  end\n  \n  defp weight({x, i}), do: {x |> Integer.digits |> Enum.sum, i, x}\n  defp sort({d1, _, _}, {d2, _, _}), do: d1 <= d2\n  defp min([{d1, _, _}, {d2, _, _}]), do: d2 - d1\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78754,"user_id":2098,"body":"defmodule Closest do\n  @moduledoc \"\"\"\n  This module handles fetching two numbers in a string whose weights\n  are the closest, smallest and smallest indicies\n  \"\"\"\n\n  @doc \"\"\"\n  The public API to interact with this module. This function returns\n  a list of two tuples each corresponding to a weight, index and number.\n  These two numbers have the closest weights, smallest weights and smallest\n  indices in the given string of numbers.\n  \"\"\"\n  @spec closest(String.t) :: list(tuple())\n  def closest(\"\"), do: [{}, {}]\n  def closest(str) do\n    str\n    |> get_sorted_weight_tuples()\n    |> Enum.chunk(2, 1)\n    |> Enum.min_by(&minfn\/1)\n  end\n  \n  # Gets a sorted list of tuples in format {weight, index, number}\n  defp get_sorted_weight_tuples(str) do\n    str\n    |> String.split()\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.with_index()\n    |> Enum.map(fn({num, i}) -> {get_weight(num), i, num} end)\n    |> Enum.sort()\n  end\n  \n  # This defines a rule to get minimum of a list of list of tuples \n  defp minfn([{w1, _i1, _num1}, {w2, _i2, _num2}]), do: w2 - w1\n  \n  # Gets the weight of a string of digits\n  defp get_weight(digits), do: digits |> Integer.digits() |> Enum.sum()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78755,"user_id":492,"body":"defmodule Closest do\n\n  defp weight(s) do\n    elem(Integer.parse(s), 0) |> Integer.digits |> Enum.sum\n  end\n  def closest(s) when s == \"\" do [{}, {}] end\n  def closest(s) do\n    a = String.split(s, \" \") \n    c = Enum.zip(a, 0..length(a) - 1)\n      |> Enum.map(fn({n, i}) -> {weight(n), i, elem(Integer.parse(n), 0)} end) |> Enum.sort\n    d = Enum.map(1..length(a) - 1, fn(i) -> {elem(Enum.at(c, i), 0) - elem(Enum.at(c, i - 1), 0), i} end) |> Enum.min |> elem(1)\n    [Enum.at(c, d - 1), Enum.at(c, d)]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78756,"user_id":738,"body":"defmodule Closest do\n  \n  def closest(\"\"), do: [{}, {}]\n  \n  def closest(str) do\n  \tstr\n    \t|> String.split\n      |> Enum.map(&String.to_integer\/1)\n      |> Enum.with_index\n      |> Enum.map(fn {num, idx} -> {calc_weight(num), idx, num} end)\n      |> Enum.sort(&order_by_weight\/2)\n      |> Enum.chunk(2, 1)\n      |> Enum.min_by(&calc_diff_score\/1)\n  end\n  \n  defp calc_weight(num) do\n  \tnum\n    |> Integer.digits\n    |> Enum.reduce(&(&1 + & 2))\n  end\n  \n  defp order_by_weight({weightA, _, _}, {weightB, _, _}), do: weightA <= weightB\n  \n  defp calc_diff_score([{weightA, _, _}, {weightB, _, _}]), do: weightB - weightA\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78757,"user_id":null,"body":"defmodule Closest do\n  @moduledoc false\n\n  def closest(s) do\n    find_closest(s)\n  end\n\n  defp find_closest(\"\"), do: [{}, {}]\n\n  defp find_closest(str) do\n    String.split(str)\n    |> sorted_weight_tuples_for_weights()\n    |> find_lowest_weight_diff_pair()\n  end\n\n  defp find_lowest_weight_diff_pair(sorted_weight_tups) do\n    sorted_weight_tups\n    |> min_weight_diff_tups()\n    |> Enum.min_by(&{elem(&1, 2), elem(&1, 0)})\n    |> Tuple.delete_at(2)\n    |> Tuple.to_list()\n  end\n\n  defp min_weight_diff_tups(sorted_weight_tups) do\n    [0, 1]\n    |> Enum.map(&Enum.drop(sorted_weight_tups, &1))\n    |> Enum.map(&min_from_sorted_weight_tups\/1)\n  end\n\n  defp min_from_sorted_weight_tups(sorted_weight_tups) do\n    Enum.chunk_every(sorted_weight_tups, 2) \n    |> Enum.reject(& length(&1) < 2)\n    |> Enum.map(fn [a, b] -> {a, b, elem(b, 0) - elem(a, 0)} end)\n    |> Enum.min_by(& elem(&1, 2))\n  end\n\n  defp weight_from_string(str) do\n    String.to_integer(str)\n    |> Integer.digits()\n    |> Enum.sum()\n  end\n\n  defp sorted_weight_tuples_for_weights(weights) do\n    weights\n    |> Enum.map(&{&1, weight_from_string(&1)})\n    |> Enum.with_index()\n    |> Enum.map(fn {{orig_w, w}, i} -> {w, i, String.to_integer(orig_w)} end)\n    |> Enum.sort()\n  end\nend\n ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78758,"user_id":null,"body":"defmodule Closest do\n  def closest(s) do\n    String.split(s)\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.with_index()\n    |> Enum.map(fn {v, i} -> {Integer.digits(v) |> Enum.sum(), i, v} end)\n    |> Enum.sort_by(fn {s, _, _} -> s end)\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.min_by(fn [{a, _, _}, {b, _, _}] -> b - a end, fn -> [{}, {}] end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78759,"user_id":null,"body":"defmodule Closest do\n  defp find_same_weight_pair(digits_by_weight) do\n    digits_by_weight\n    |> Enum.reduce_while(:not_found, fn\n      {_weight, [_]}, acc ->\n        {:cont, acc}\n\n      {_weight, entries}, _acc ->\n        result_pair =\n          entries\n          |> Enum.chunk_every(2, 1, :discard)\n          |> List.first()\n\n        {:halt, result_pair}\n    end)\n  end\n\n  defp find_smallest_difference_pair(digits_by_weight) do\n    digits_by_weight\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [{weight_a, [a]}, {weight_b, [b]}] -> {abs(weight_a - weight_b), a, b} end)\n    |> Enum.group_by(fn {difference, _, _} -> difference end, fn {_, a, b} -> {a, b} end)\n    # items with smallest weight difference\n    |> Enum.min()\n    # discard smallest weight difference number\n    |> elem(1)\n    |> Enum.min(fn {{_, _, weight_a}, _}, {{_, _, weight_b}, _} -> weight_a < weight_b end)\n  end\n\n  defp format(result) when is_tuple(result) do\n    result\n    |> Tuple.to_list()\n    |> format()\n  end\n\n  defp format(result) do\n    result\n    |> Enum.map(fn {index, digits, weight} -> {weight, index, String.to_integer(digits)} end)\n  end\n\n  defp weight(number) do\n    number\n    |> String.graphemes()\n    |> Enum.map(fn char -> String.to_integer(char) end)\n    |> Enum.sum()\n  end\n\n  defp digits_by_weight(digits) do\n    digits\n    |> Enum.map(fn digits -> {weight(digits), digits} end)\n    |> Enum.with_index()\n    |> Enum.group_by(fn {{weight, _digits}, _index} -> weight end, fn {{weight, digits}, index} ->\n      {index, digits, weight}\n    end)\n  end\n\n  defp result(digits) do\n    digits_by_weight = digits_by_weight(digits)\n\n    result = find_same_weight_pair(digits_by_weight)\n\n    case result do\n      :not_found -> find_smallest_difference_pair(digits_by_weight)\n      _ -> result\n    end\n    |> format()\n  end\n\n  def closest(s) do\n    digits =\n      s\n      |> String.split(\" \", trim: true)\n\n    case digits do\n      [_, _ | _] -> result(digits)\n      _ -> [{}, {}]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78760,"user_id":null,"body":"defmodule Closest do\n\n  defp helper([]), do: [{}, {}]\n\n  defp helper(ls),\n    do:\n      ls\n      |> Enum.with_index()\n      |> Enum.map(fn {s, i} ->\n        n = String.to_integer(s)\n        {n |> Integer.digits() |> Enum.sum(), i, n}\n      end)\n      |> Enum.sort()\n      |> Enum.chunk_every(2, 1, :discard)\n      |> Enum.min_by(fn [{a, i, _}, {b, j, _}] -> {b - a, a, min(i, j)} end)\n\n  def closest(s) do\n    s |> String.split() |> helper()\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78761,"user_id":null,"body":"defmodule Closest do\n\n  def closest(\"\"), do: [{}, {}]\n\n  def closest(s) do\n    s\n    |> String.split()\n    |> Enum.with_index()\n    |> Enum.map(&parse\/1)\n    |> Enum.sort_by(&elem(&1, 0))\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.min_by(&min_diff\/1)\n  \n    # your code\n  end\n  \n  defp parse({str, idx}), do: {weight(str), idx, String.to_integer(str)}\n  \n  defp weight(str), do: for <<c <- str>>, reduce: 0, do: (acc -> acc + c - ?0)\n  \n  defp min_diff([{a, _, _}, {b, _, _}]), do: abs(b - a)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78762,"user_id":null,"body":"defmodule Closest do\n\n  def closest(str), do: get_closest(str)\n\n  defp get_closest(\"\"), do: [{}, {}]\n  defp get_closest(str) when is_binary(str), do: get_closest(String.split(str))\n  defp get_closest(seq), do:\n    seq\n    |> Enum.map(&String.to_integer\/1)\n    |> Enum.with_index\n    |> Enum.map(fn {val, idx} -> {get_weight(val), idx, val} end)\n    |> get_permutations\n    |> Enum.min(&compare\/2)\n\n  defp compare([{wx1, ix1, _}, {wy1, iy1, _}], [{wx2, ix2, _}, {wy2, iy2, _}]), do:\n    {abs(wx1 - wy1), {wx1, wy1}, {ix1, iy1}} < {abs(wx2 - wy2), {wx2, wy2}, {ix2, iy2}}\n\n  defp get_permutations(seq), do: for x <- seq, y <- seq, x != y, do: [x, y]\n\n  defp get_weight(num), do:\n    num\n    |> Integer.digits\n    |> Enum.sum\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"586909e4c66d18dd1800009b":[{"id":78763,"user_id":null,"body":" defmodule Multiply_all do                                                       \n  @doc \"\"\"                                                                      \n  Takes a list of numbers an return a function to multiply by the specified     \n  number                                                                        \n                                                                                \n  ## Examples                                                                   \n    iex> Multiply_all.solution([1, 2, 3]).(2)                                 \n    [2, 4, 6]                                                                 \n  \"\"\"                                                                                                                                                         \n  @spec solution([integer]) :: (integer -> [integer])                           \n  def solution(list) when is_list(list) do                                                                                                                                                                     \n    fn (by) -> Enum.map(list, &(&1 * by)) end                                   \n  end                                                                           \nend         ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78764,"user_id":null,"body":"defmodule Multiply_all do\n\n  def solution(array) do\n    fn number -> multiply_array(array, number) end\n  end\n  \n  defp multiply_array(array, number) do\n    array\n    |> Enum.map(fn x -> x * number end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78765,"user_id":53,"body":"defmodule Multiply_all do\n    def solution(xs), do: fn(a) -> Enum.map(xs, fn x -> x * a end) end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78766,"user_id":3350,"body":"defmodule Multiply_all do\n  def solution(list) do\n    fn x -> Enum.map(list, &(&1 * x)) end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78767,"user_id":null,"body":"defmodule Multiply_all do\n\n  def solution(ints) when is_list(ints) do\n    fn (x) -> Enum.map(ints, &(&1 * x)) end\n  end\n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78768,"user_id":null,"body":"defmodule Multiply_all do\n\n  def solution(arr) do\n    \n    fn x -> Enum.map(arr, fn u -> u * x end) end\n  \n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78769,"user_id":null,"body":"defmodule Multiply_all do\n  def solution(list) do\n    fn multiplier -> \n      for n <- list, do: n * multiplier\n    end \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78770,"user_id":null,"body":"defmodule Multiply_all do\n  def solution(lst) do\n    fn n -> Enum.map(lst, & &1 * n) end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78771,"user_id":250,"body":"defmodule Multiply_all do\n  def solution(l) do\n    fn x -> Enum.map(l, &(&1 * x)) end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78772,"user_id":null,"body":"defmodule Multiply_all do\n  def solution(n) do\n    fn y ->\n      Enum.map(n, fn x -> x * y end)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"586c7cd3b98de02ef60001ab":[{"id":78773,"user_id":2098,"body":"defmodule UniqueStrings do \n  def uniq_count(string) do\n    String.downcase(string)\n    |> String.codepoints\n    |> Enum.reduce(%{}, &char_repeats(&1, &2))\n    |> Map.values\n    |> Enum.reduce(factorial(String.length(string)), &div(&2, factorial(&1)))\n  end\n  \n  defp char_repeats(letter, letters) do\n    l = String.to_atom(letter)\n    case letters[l] do\n      nil -> Map.put(letters, l, 1)\n      num -> Map.put(letters, l, num + 1)\n    end\n  end\n    \n  defp factorial(n) when n == 0 or n == 1, do: 1\n  defp factorial(n) when n > 0, do: n * factorial(n - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78774,"user_id":527,"body":"defmodule UniqueStrings do\n\n  def uniq_count(string) do\n    chars = String.graphemes(String.downcase(string))\n    char_counts = frequencies(chars)\n    n_permutations = factorial(Enum.count(chars))\n    Enum.reduce(Map.values(char_counts), n_permutations, &(div(&2, factorial(&1))))\n  end\n  \n  defp factorial(0), do: 1\n  defp factorial(n) do\n    Enum.reduce(1 .. n, 1, &(&1 * &2))\n  end\n  \n  defp frequencies(xs) do\n    Enum.reduce(xs, %{}, fn(x, a) -> Map.update(a, x, 1, &(&1 + 1)) end)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78775,"user_id":null,"body":"defmodule UniqueStrings do\n  def uniq_count(string), do: uniq_permutations(String.graphemes(String.upcase(string)))\n  \n  defp uniq_permutations(list) do\n    list\n    |> Enum.group_by(& &1)\n    |> Enum.map(fn {_k, v} -> factorial(length(v)) end)\n    |> Enum.reduce(factorial(length(list)), &div(&2, &1))\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: Enum.reduce(1..n, &(&2 * &1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78776,"user_id":null,"body":"defmodule UniqueStrings do\n  def uniq_count(string), do: uniq_permutations(String.graphemes(String.upcase(string)))\n\n  defp uniq_permutations(list), do: factorial(length(list)) |> div(uniq_perm_divisor(list))\n\n  defp uniq_perm_divisor(list) do\n    list\n    |> Enum.group_by(& &1)\n    |> Enum.map(fn {_k, v} -> factorial(length(v)) end)\n    |> Enum.reduce(1, &(&2 * &1))\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: Enum.reduce(1..n, &(&2 * &1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78777,"user_id":null,"body":"defmodule UniqueStrings do\n  \n  def uniq_count(s), do: s |> String.length |> fact |> div(groups(s))\n  \n  defp groups(s), do: s \n    |> String.upcase\n    |> String.graphemes \n    |> Enum.sort\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(fn (a) -> fact(length(a)) end)\n    |> Enum.reduce(1, fn x, acc -> x * acc end) # Enum.product in later versions of Elixir\n  \n  defp fact(0), do: 1\n  defp fact(n), do: n * fact(n-1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78778,"user_id":null,"body":"defmodule UniqueStrings do\n  defp factorial(0), do: 1\n  defp factorial(n), do: Enum.reduce(1..n, &(&1 * &2))\n\n  def uniq_count(string) do\n    string = String.downcase(string)\n\n    div(\n      factorial(String.length(string)),\n      String.graphemes(string)\n      |> Enum.group_by(&Function.identity\/1)\n      |> Enum.reduce(1, fn {_, v}, acc -> acc * factorial(length(v)) end)\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78779,"user_id":null,"body":"defmodule UniqueStrings do\n\n  def uniq_count(str), do: get_permutations(str)\n\n  defp get_permutations(word), do:\n    word\n    |> String.upcase\n    |> String.graphemes\n    |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1 + 1)) end)\n    |> Enum.reduce(1, fn {_, v}, acc -> acc * factorial(v) end)\n    |> (&(div(factorial(String.length(word)), &1))).()\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78780,"user_id":null,"body":"defmodule UniqueStrings do\n  def uniq_count(\"\"), do: 1\n  \n  def uniq_count(string) do\n    den = letter_counts(string)\n      |> Enum.map(&factorial\/1)\n      |> Enum.reduce(&*\/2)\n      \n    div factorial(String.length(string)), den\n  end\n  \n  defp letter_counts(string) do\n    string\n      |> String.downcase\n      |> String.graphemes\n      |> Enum.reduce(%{}, fn letter, acc -> Map.put(acc, letter, Map.get(acc ,letter, 0) + 1) end)\n      |> Map.values\n  end\n  \n  defp factorial(1), do: 1\n  \n  defp factorial(num), do: num * factorial(num - 1) \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78781,"user_id":872,"body":"defmodule UniqueStrings do\n  def uniq_count(string) do\n    a = string |> String.length |> fac\n    b = string |> count_chars |> fac\n    div(a, b)\n  end\n\n  def count_chars(string) do\n    string\n    |> String.downcase\n    |> String.graphemes\n    |> Enum.reduce(%{}, fn char, acc -> Map.put(acc, char, (acc[char] || 0) + 1) end)\n    |> Enum.filter(&(elem(&1, 1) > 1))\n    |> Enum.map(&(elem(&1, 1)))\n  end\n\n  def fac(0), do: 1\n  def fac(n) when is_integer(n) and n > 0, do: n * fac(n - 1)\n  def fac([]), do: 1\n  def fac([h|t]), do: fac(h) * fac(t)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78782,"user_id":null,"body":"defmodule UniqueStrings do\n    defp factorial(0), do: 1\n    defp factorial(n), do: Enum.reduce(1..n, &*\/2)\n\n    def uniq_count(s) do\n        n = s |> String.length |> factorial\n        \n        p = s\n        |> String.upcase\n        |> String.graphemes\n        |> Enum.reduce(%{}, fn k,m -> Map.update(m,k,1,& &1+1) end)\n        |> Enum.reduce(1, fn {_,v},p -> p * factorial(v) end)\n        \n        div(n,p)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"586d6cefbcc21eed7a001155":[{"id":78783,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(\"\"), do: {\"\", 0}\n\n  def longest_repetition(s) do\n    s\n    |> String.graphemes()\n    |> Enum.chunk_by(fn x -> x end)\n    |> Enum.map(fn x -> {List.first(x), length(x)} end)\n    |> Enum.max_by(fn {_x, y} -> y end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78784,"user_id":null,"body":"defmodule Kata do\n    def longest_repetition(\"\"), do: {\"\", 0}\n    def longest_repetition(s), do:\n        Regex.scan(~r\/(.)\\1*\/, s)\n        |> Enum.map(fn [m|_] -> {String.first(m), String.length(m)} end)\n        |> Enum.max_by(fn {_,n} -> n end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78785,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(\"\"), do: {\"\", 0}\n\n  def longest_repetition(s) do\n    l =\n      String.graphemes(s)\n      |> Enum.chunk_by(&Function.identity\/1)\n      |> Enum.max_by(&length(&1))\n\n    {hd(l), length(l)}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78786,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(\"\") do\n    {\"\", 0}\n  end\n  def longest_repetition(s) do\n    s\n    |> to_charlist\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(fn g -> {List.to_string([hd(g)]), length(g)} end)\n    |> Enum.max_by(fn {c, l} -> l end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78787,"user_id":null,"body":"defmodule Kata do\n    def longest_repetition(\"\"), do: {\"\", 0}\n    def longest_repetition(s) do\n        Regex.scan(~r\/(.)\\1*\/, s)\n        |> Enum.map(fn [m|_] -> {String.first(m), String.length(m)} end)\n        |> Enum.max_by(fn {_,n} -> n end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78788,"user_id":null,"body":"defmodule Kata do\n    def longest_repetition(\"\"), do: {\"\", 0}\n    def longest_repetition(s) do\n        [a, b] = Regex.scan(~r\/(.)\\1*\/, s)\n                 |> Enum.max_by(fn [a, _] -> String.length(a) end)\n        {b, String.length(a)}\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78789,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(s) do\n    if (s == \"\" or s == \" \") do\n      {s, 0}\n    else\n      (for n <- String.graphemes(s), do: n)\n      |> Enum.chunk_by(fn arg -> arg end)\n      |> Enum.max_by(&Enum.count\/1)\n      |> Enum.frequencies\n      |> Map.to_list\n      |> List.to_tuple |> elem(0)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78790,"user_id":null,"body":"defmodule Kata do\n  \n  def longest_repetition(s) do\n      s\n      |> String.graphemes\n      |> evaluate()\n      |> Enum.sort_by(&elem(&1, 1), &>\/2)\n      |> hd\n  end\n    \n  defp evaluate(chars, cur \\\\ {\"\", 0}, res \\\\ [])\n  defp evaluate([], cur, res), do: [cur | res]\n  defp evaluate([hd | tl], {chr, cnt} = cur, res) do\n    if chr == hd do\n      evaluate(tl, {chr, cnt+1}, res)\n    else \n      evaluate(tl, {hd, 1}, [cur | res])\n    end  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78791,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(s) do\n    s\n    |> String.codepoints()\n    |> Enum.chunk_by(& &1)\n    |> Enum.reduce({\"\", 0}, &step\/2)\n  end\n    \n  def step(chars, {chr, n}) do\n    len = length(chars)\n    if len > n, do: {hd(chars), len}, else: {chr, n}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78792,"user_id":null,"body":"defmodule Kata do\n  def longest_repetition(\"\"), do: {\"\", 0}\n\n  def longest_repetition(s) do\n    ~r\/((.)\\2*)\/\n    |> Regex.scan(s, capture: :first)\n    |> Enum.map(fn [str] -> {String.first(str), String.length(str)} end)\n    |> Enum.max_by(&elem(&1, 1))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"586dd26a69b6fd46dd0000c0":[{"id":78793,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command) do\n    command\n    |> String.codepoints()\n    |> Enum.reduce({0, []}, fn\n      \"+\", {255, out} -> {0, out} \n      \"+\", {x, out} -> {x + 1, out} \n      \".\", {x, out} -> {x, [out | [x]]}\n      _cp, acc -> acc\n    end)\n    |> elem(1)\n    |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78794,"user_id":null,"body":"defmodule MiniStringFuck do\n  @moduledoc false\n\n  def execute(command) do\n    _exec(String.graphemes(command), 0, \"\")\n  end\n  \n  def _exec([], _cell, result), do: to_string(result)\n  def _exec([cmd | rest], cell, result) do\n    case cmd do\n      \"+\" -> _exec(rest, inc(cell), result)\n      \".\" -> _exec(rest, cell, result <> <<cell :: utf8>>)\n      _   -> _exec(rest, cell, result)\n    end\n  end\n  \n  defp inc(n) when n == 255, do: 0\n  defp inc(n), do: n+1\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78795,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command) do\n    command\n    |> String.graphemes()\n    |> Stream.transform(0, fn\n      \"+\", 255 -> {[], 0} \n      \"+\", x -> {[], x + 1} \n      \".\", x -> {[x], x}\n      _cp, x -> {[], x} \n    end)\n    |> Enum.to_list()\n    |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78796,"user_id":null,"body":"defmodule MiniStringFuck do\n  @moduledoc false\n  # Implicitly prints last character if no '.' is present at the end of the command\n  def execute(command) do\n    command_list = \n      String.replace(command, ~r{[^\\+\\.]}, \"\") # Cleans code of non-command characters\n      |> String.split(\".\")\n      |> Enum.drop(-1)\n      |> Enum.map(&String.length(&1))\n    \n    translate(command_list)\n  end\n  \n  defp translate(command_list, mem_cell \\\\ 0, acc \\\\ \"\")\n  defp translate(command_list, mem_cell, acc) when command_list == [], do: acc\n  defp translate(command_list, mem_cell, acc) do\n    <<mem_cell>> = <<mem_cell + hd(command_list)>>\n    translate(tl(command_list), mem_cell, acc <> <<mem_cell::utf8>>)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78797,"user_id":null,"body":"defmodule MiniStringFuck do\n  @moduledoc false\n\n  def execute(command) do\n    String.to_char_list(command)\n    |> Enum.reduce({0, []}, fn(c, acc) -> modify_cell(acc, c) end)\n    |> elem(1)\n    |> to_string\n  end\n  \n  defp modify_cell({255, out}, ?+), do: {0, out}\n  defp modify_cell({cell, out}, ?+), do: {cell + 1, out}\n  defp modify_cell({cell, out}, ?.), do: {cell, out ++ [cell]}\n  defp modify_cell({cell, out}, _), do: {cell, out}\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78798,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command, cell \\\\ 0, out \\\\ \"\")\n  def execute(\"+\" <> rest, 255, out), do: execute(rest, 0, out)\n  def execute(\"+\" <> rest, cell, out), do: execute(rest, cell + 1, out)\n  def execute(\".\" <> rest, cell, out), do: execute(rest, cell, [out | [cell]])\n  def execute(<<_>> <> rest, cell, out), do: execute(rest, cell, out)\n  def execute(\"\", _cell, out), do: List.to_string(out)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78799,"user_id":null,"body":"defmodule MiniStringFuck do\n  @moduledoc false\n\n  def execute(command) do\n    command\n    |> String.to_charlist()\n    |> Enum.reduce({0, []}, fn char, {counter, result} -> process_char(char, counter, result) end)\n    |> elem(1)\n    |> List.wrap()\n    |> List.to_string()\n  end\n  \n  defp process_char(46, counter, result), do: {counter, result ++ [counter]}  \n  defp process_char(43, counter, result), do: {rem(counter + 1, 256), result}\n  defp process_char(_, counter, result), do: {counter, result}\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78800,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command) do\n    String.graphemes(command)\n    |> Enum.reduce({\"\", 0}, fn c, {output, memory} ->\n      case c do\n        \"+\" -> {output, rem(memory + 1, 256)}\n        \".\" -> {output <> <<memory::utf8>>, memory}\n        _ -> {output, memory}\n      end\n    end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78801,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command) do\n    command\n    |> to_charlist()\n    |> Stream.transform(0, &step\/2)\n    |> Enum.to_list()\n    |> to_string()\n  end\n  \n  def step(?+, num), do: {[], rem(num + 1, 256)}\n  def step(?., num), do: {[num], num}\n  def step(_, num), do: {[], num}\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78802,"user_id":null,"body":"defmodule MiniStringFuck do\n  def execute(command, cell \\\\ 0, str \\\\ '')\n  def execute(\"\", _, str), do: str |> Enum.reverse() |> to_string()\n  def execute(\"+\" <> chars, cell, str), do: execute(chars, rem(cell + 1, 256), str)\n  def execute(\".\" <> chars, cell, str), do: execute(chars, cell, [cell | str])\n  def execute(<<_, chars::binary>>, cell, str), do: execute(chars, cell, str)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58708934a44cfccca60000c4":[{"id":78803,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    Regex.replace(~r\/F+|L+|R+|\\d+\/, code, &colorize\/1)\n  end\n\n  defp colorize(x), do: \"<span style=\\\"color: #{color(x)}\\\">#{x}<\/span>\"\n\n  defp color(\"F\" <> _rest), do: \"pink\"\n  defp color(\"L\" <> _rest), do: \"red\"\n  defp color(\"R\" <> _rest), do: \"green\"\n  defp color(<<n>> <> _rest) when n in ?0..?9, do: \"orange\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78804,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    String.replace(code, ~r\/[0-9]+\/, \"<span style=\\\"color: orange\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/[F]+\/, \"<span style=\\\"color: pink\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/[L]+\/, \"<span style=\\\"color: red\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/[R]+\/, \"<span style=\\\"color: green\\\">\\\\0<\/span>\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78805,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    code\n    |> String.replace(~r\/F+\/, \"<span style=\\\"color: pink\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/L+\/, \"<span style=\\\"color: red\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/R+\/, \"<span style=\\\"color: green\\\">\\\\0<\/span>\")\n    |> String.replace(~r\/\\d+\/, \"<span style=\\\"color: orange\\\">\\\\0<\/span>\")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78806,"user_id":null,"body":"defmodule RoboscriptOne do\n  def gen_span(col, x) do\n    xs = List.to_string(x)\n    if col == nil do\n      xs\n    else\n      \"<span style=\\\"color: #{col}\\\">#{xs}<\/span>\"\n    end\n  end\n\n  def get_color(x) do\n    case x do\n      ?F -> \"pink\"\n      ?L -> \"red\"\n      ?R -> \"green\"\n      _ when x in ?0..?9 -> \"orange\"\n      _ -> nil\n    end\n  end\n\n  def highlight(code) do\n    code\n    |> String.to_charlist()\n    |> Enum.chunk_by(&get_color\/1)\n    |> IO.inspect\n    |> Enum.map_join(&gen_span(get_color(List.first(&1)), &1))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78807,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    code\n    |> String.graphemes\n    |> Enum.chunk_by(&(Integer.parse(&1) != :error || &1))\n    |> Stream.map(&choose_color\/1)\n    |> Enum.join\n  end\n  \n  defp choose_color([hd | _] = cmd) when hd == \"F\", do: ~s(<span style=\"color: pink\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) when hd == \"L\", do: ~s(<span style=\"color: red\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) when hd == \"R\", do: ~s(<span style=\"color: green\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) do\n    if Regex.match?(~r\/[0-9]\/, hd), \n      do: ~s(<span style=\"color: orange\">#{Enum.join(cmd)}<\/span>),\n      else: cmd\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78808,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    code\n    |> String.graphemes\n    |> Enum.chunk_by(&(Integer.parse(&1) != :error || &1))\n    |> IO.inspect\n    |> Stream.map(&choose_color\/1)\n    |> Enum.join\n  end\n  \n  defp choose_color([hd | _] = cmd) when hd == \"F\", do: ~s(<span style=\"color: pink\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) when hd == \"L\", do: ~s(<span style=\"color: red\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) when hd == \"R\", do: ~s(<span style=\"color: green\">#{Enum.join(cmd)}<\/span>)\n  defp choose_color([hd | _] = cmd) do\n    if Regex.match?(~r\/[0-9]\/, hd), \n      do: ~s(<span style=\"color: orange\">#{Enum.join(cmd)}<\/span>),\n      else: cmd\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78809,"user_id":null,"body":"defmodule RoboscriptOne do\n  def highlight(code) do\n    code\n    |> String.replace(~r\/F+|L+|R+|\\d+\/, &colorize\/1)\n  end\n\n  def colorize(substr) do\n    colors = %{\"F\" => \"pink\", \"L\" => \"red\", \"R\" => \"green\"}\n    char = String.first(substr)\n\n    cond do\n      char in Map.keys(colors) -> '<span style=\"color: #{colors[char]}\">#{substr}<\/span>'\n      Integer.parse(char) != :error -> '<span style=\"color: orange\">#{substr}<\/span>'\n      true -> substr\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78810,"user_id":null,"body":"defmodule RoboscriptOne do\n def highlight(code) do\n    code\n    |> String.replace(~r\/(\\D)\\1*|\\d+\/, &highlight_substring\/1)\n  end\n\n  def highlight_substring(substr) do\n    colors = %{\"F\" => \"pink\", \"L\" => \"red\", \"R\" => \"green\"}\n    char = String.first(substr)\n    cond do\n      char in Map.keys(colors) -> '<span style=\"color: #{colors[char]}\">#{substr}<\/span>'\n      Integer.parse(char) != :error -> '<span style=\"color: orange\">#{substr}<\/span>'\n      true -> substr\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78811,"user_id":null,"body":"defmodule RoboscriptOne do\n\n  def highlight(code), do:\n    code\n    |> split_into_groups\n    |> Enum.map(fn seq -> wrap(Enum.join(seq), Enum.at(seq, 0)) end)\n    |> Enum.join\n\n\n  defp split_into_groups(code), do:\n    code\n    |> String.graphemes\n    |> split_into_groups([], [])\n    |> Enum.map(& Enum.reverse(&1))\n    |> Enum.reverse\n\n  defp split_into_groups([], stack, acc), do: [stack | acc]\n  defp split_into_groups([head | tail], [], acc), do: split_into_groups(tail, [head], acc)\n  defp split_into_groups([head | tail], stack, acc) do\n    case is_same?(head, Enum.at(stack, 0)) do\n      true -> split_into_groups(tail, [head | stack], acc)\n      false -> split_into_groups(tail, [head], [stack | acc])\n    end\n  end\n\n  defp is_same?(s1, s2) when s1 == s2 or (\"0\" <= s1 and s1 <= \"9\") and (\"0\" <= s2 and s2 <= \"9\"), do: true\n  defp is_same?(_, _), do: false\n\n  defp wrap(str, \"F\"), do: \"<span style=\\\"color: pink\\\">#{str}<\/span>\"\n  defp wrap(str, \"L\"), do: \"<span style=\\\"color: red\\\">#{str}<\/span>\"\n  defp wrap(str, \"R\"), do: \"<span style=\\\"color: green\\\">#{str}<\/span>\"\n  defp wrap(str, sym) when \"0\" <= sym and sym <= \"9\", do: \"<span style=\\\"color: orange\\\">#{str}<\/span>\"\n  defp wrap(str, _), do: str\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78812,"user_id":null,"body":"defmodule RoboscriptOne do\n  def span_gen(text, color), do: \"<span style=\\\"color: #{color}\\\">\" <> text <> \"<\/span>\"\n  \n  def code_wrap(text) do\n    check = String.first(text)\n    cond do\n      check == \"F\" -> span_gen(text, \"pink\")\n      check == \"L\" -> span_gen(text, \"red\")\n      check == \"R\" -> span_gen(text, \"green\")\n      String.contains?(\"0123456789\", check) -> span_gen(text, \"orange\")\n    end\n  end\n  \n  def highlight(code) do\n    String.replace(code, ~r\/F+|R+|L+|\\d+\/, fn x -> code_wrap(x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"587385520e9cf3c355000108":[{"id":78813,"user_id":null,"body":"defmodule Kata do\n  def ifs(array, 0), do: \"# \"\n\n  def ifs(array, iterations) do\n    sub = ifs(array, iterations - 1) |> String.split(\"\n\")\n\n    Enum.flat_map(array, fn row ->\n      Enum.map(sub, fn line ->\n        blank = String.duplicate(\" \", String.length(line))\n        Enum.map_join(row, fn v -> if(v == 0, do: blank, else: line) end)\n      end)\n    end)\n    |> Enum.join(\"\n\")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78814,"user_id":null,"body":"defmodule Kata do\n  def ifs(array, n, orig \\\\ nil)\n\n  def ifs(array, 1, _) do\n    array\n    |> Enum.map(fn x -> Enum.join(x |> Enum.map(&draw\/1)) end)\n    |> Enum.join(\"\n\")\n  end\n\n  def ifs(array, n, orig) do\n    orig = orig || array\n    x = array |> Enum.at(0) |> Enum.count()\n    orig_x = orig |> Enum.at(0) |> Enum.count()\n    y = array |> Enum.count()\n    orig_y = orig |> Enum.count()\n    xx = x * orig_x - 1\n    yy = y * orig_y - 1\n\n    a = for i <- (0..yy) do\n      for j <- (0..xx) do\n        position = array |> Enum.at(rem(i, y)) |> Enum.at(rem(j, x))\n        subplane = orig |> Enum.at(div(i, y)) |> Enum.at(div(j, x))\n        position * subplane\n      end\n    end\n\n    ifs(a, n - 1, orig)\n  end\n\n\n  def draw(1), do: \"# \"\n\n  def draw(0), do: \"  \"\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78815,"user_id":470,"body":"defmodule Kata do\n\tdef ifs(_,n) when n < 1,do: \"\"\n\tdef ifs(r,n),do: ix(r,n,1,r)\n\t\n\tdefp ix(_,n,c,z) when n == c,do: transmute(z) |> Enum.join(\"\n\")\n\tdefp ix(r,n,c,z) do\n\t\tzln = pow(length(r),c)\n\t\tzln2 = pow(length(hd(r)),c)\n\t\tz2 = Enum.reduce(r,[],fn row,rz ->\n\t\t\trz ++ Enum.reduce(row,(for _ <- 1..zln,do: []),fn v,rz2 ->\n\t\t\t\tStream.with_index(rz2)\n\t\t\t\t|> Stream.map(fn {x,i} -> x ++ (if v == 1,do: Enum.at(z,i),else: Enum.take(Stream.cycle([0]),zln2)) end)\n\t\t\t\t|> Enum.to_list()\n\t\t\tend)\n\t\tend)\n\t\tix(r,n,c+1,z2)\n\tend\n\t\n\tdefp transmute([]),do: []\n\tdefp transmute([h|r]),do: [ntos(h) | transmute(r)]\n\tdefp ntos([]),do: \"\"\n\tdefp ntos([h|r]),do: elem({<<32,32>>,<<35,32>>},h) <> ntos(r)\n\tdefp pow(n,c),do: n |> :math.pow(c) |> trunc\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5879f95892074d769f000272":[{"id":78816,"user_id":null,"body":"defmodule Biker do\n  # gravity acceleration\n  @gravity_acc 9.81 * 3.6 * 60.0\n  # force applied by air on the cyclist\n  @drag 60.0 * 0.3 \/ 3.6\n  # in minutes\n  @delta_t 1.0 \/ 60.0\n  # pedaling thrust\n  @g_thrust 60 * 3.6 * 3.6\n  # biker's mass\n  @mass 80.0\n  # initial biker's power\n  @watts0 225.0\n  # loss of power in W\/mn\n  @d_watts 0.5\n\n  def temps(v, slope, d_tot),\n    do: temps2(0.0, 0.0, v, @watts0, d_tot, @gravity_acc * :math.sin(:math.atan(slope \/ 100.0)))\n\n  def temps2(t, d, _v, _watts, d_tot, _grav_slope) when d > d_tot, do: round(t)\n\n  def temps2(t, d, v, watts, d_tot, grav_slope) do\n    watts2 = watts - @d_watts * @delta_t\n\n    gamma =\n      -grav_slope - @drag * v * v \/ @mass +\n        if(watts2 > 0.0 && v > 0.0, do: @g_thrust * watts2 \/ (v * @mass), else: 0.0)\n\n    v2 = v + if(abs(gamma) <= 1.0e-5, do: 0.0, else: gamma) * @delta_t\n\n    if v2 - 3.0 <= 1.0e-2,\n      do: -1,\n      else: temps2(t + @delta_t, d + v * @delta_t \/ 60.0, v2, watts2, d_tot, grav_slope)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:27:22"},{"id":78817,"user_id":null,"body":"defmodule Biker do\n  # gravity acceleration\n  @gravity_acc 9.81 * 3.6 * 60.0\n  # force applied by air on the cyclist\n  @drag 60.0 * 0.3 \/ 3.6\n  # in minutes\n  @delta_t 1.0 \/ 60.0\n  # pedaling thrust\n  @g_thrust 60 * 3.6 * 3.6\n  # biker's mass\n  @mass 80.0\n  # initial biker's power\n  @watts0 225.0\n  # loss of power in W\/mn\n  @d_watts 0.5\n\n  def temps(v, slope, d_tot),\n    do: temps2(0.0, 0.0, v, @watts0, d_tot, @gravity_acc * :math.sin(:math.atan(slope \/ 100.0)))\n\n  def temps2(t, d, _v, _watts, d_tot, _grav_slope) when d > d_tot, do: round(t)\n\n  def temps2(t, d, v, watts, d_tot, grav_slope) do\n    watts2 = watts - @d_watts * @delta_t\n\n    gamma =\n      -grav_slope - @drag * v * v \/ @mass +\n        if(watts2 > 0.0 && v > 0.0, do: @g_thrust * watts2 \/ (v * @mass), else: 0.0)\n\n    adj_gamma = if abs(gamma) <= 1.0e-5, do: 0.0, else: gamma\n\n    v2 = v + adj_gamma * @delta_t\n\n    if v2 - 3.0 <= 1.0e-2,\n      do: -1,\n      else: temps2(t + @delta_t, d + v2 * @delta_t \/ 60.0, v2, watts2, d_tot, grav_slope)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:27:32"},{"id":78818,"user_id":null,"body":"defmodule Biker do\n  @gravity_acc 9.81 * 3.6 * 60.0\n  @drag 60.0 * 0.3 \/ 3.6\n  @delta_t 1.0 \/ 60.0\n  @d_watts 0.5\n  @g_thrust 60.0 * 3.6 * 3.6\n  @mass 80.0\n  @watts0 225\n\n  defp temps_aux(v, _, _, _, _, _) when v - 3.0 <= 1.0e-2 do\n    -1\n  end\n\n  defp temps_aux(_, _, d_tot, d, t, _) when d > d_tot do\n    round(t)\n  end\n\n  defp temps_aux(v, slope, d_tot, d, t, watts) do\n    slopeGravityAcc = -1 * @gravity_acc * :math.sin(:math.atan(slope \/ 100.0))\n    tt = t + @delta_t\n    wwatts = watts - @d_watts * @delta_t\n    gamma = slopeGravityAcc - @drag * abs(v) * abs(v) \/ @mass\n\n    ggamma =\n      if wwatts > 0.0 && v > 0.0 do\n        gamma + @g_thrust * wwatts \/ (v * @mass)\n      else\n        gamma\n      end\n\n    vv =\n      if abs(ggamma) <= 1.0e-5 do\n        v\n      else\n        v + ggamma * @delta_t\n      end\n\n    dd = d + v * @delta_t \/ 60.0\n    temps_aux(vv, slope, d_tot, dd, tt, wwatts)\n  end\n\n  def temps(v, slope, d_tot) do\n    temps_aux(v, slope, d_tot, 0.0, 0.0, @watts0)\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-18 14:27:35"},{"id":78819,"user_id":492,"body":"defmodule Biker do\n\n    @gravity_acc  9.81 * 3.6 * 60.0               # gravity acceleration\n    @drag  60.0 * 0.3 \/ 3.6                       # force applied by air on the cyclist\n    @delta_t  1.0 \/ 60.0                          # in minutes\n    @d_watts  0.5                                 # power loss in Watts \/ minute\n    @g_thrust  60.0 * 3.6 * 3.6                   # acceleration due to biker's power\n    @mass  80.0                                   # biker's mass\n    @watts0  225                                  # initial biker's power\n\n    defp temps_aux(v, _, _, _, _, _) when (v - 3.0 <= 1.0e-2) do\n        -1\n    end\n    defp temps_aux(_, _, d_tot, d, t, _) when (d > d_tot) do\n        round(t)\n    end\n    defp temps_aux(v, slope, d_tot, d, t, watts) do\n        slopeGravityAcc = (-1) * @gravity_acc * :math.sin(:math.atan(slope \/ 100.0))\n        tt = t + @delta_t\n        # new power\n        wwatts = watts - @d_watts * @delta_t # tiredness\n        # earth gravity due to slope and drag due to air resistance\n        gamma = slopeGravityAcc - @drag * abs(v) * abs(v) \/ @mass\n        # acceleration due to biker's power\n        ggamma =\n            if ((wwatts > 0.0) && (v > 0.0)) do\n                gamma + @g_thrust * wwatts \/ (v * @mass)\n            else gamma end\n        # acceleration too small -> acc = 0\n        vv =\n            if (abs(ggamma) <= 1.0e-5) do\n                v\n            else\n                v + ggamma * @delta_t\n            end\n        # new distance\n        dd = d + v * @delta_t \/ 60.0 # v in km\/h, delta_t in minutes\n        temps_aux(vv, slope, d_tot, dd, tt, wwatts)\n    end\n\n    def temps(v, slope, d_tot) do\n        temps_aux(v, slope, d_tot, 0.0, 0.0, @watts0)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78820,"user_id":492,"body":"defmodule Biker do\n\n    @gravity_acc  9.81 * 3.6 * 60.0               # gravity acceleration\n    @drag  60.0 * 0.3 \/ 3.6                       # force applied by air on the cyclist\n    @delta_t  1.0 \/ 60.0                          # in minutes\n    @d_watts  0.5                                 # power loss in Watts \/ minute\n    @g_thrust  60.0 * 3.6 * 3.6                   # acceleration due to biker's power\n    @mass  80.0                                   # biker's mass\n    @watts0  225                                  # initial biker's power\n\n    defp temps_aux(v, _, _, _, _, _) when (v - 3.0 <= 1.0e-2) do\n        -1\n    end\n    defp temps_aux(_, _, d_tot, d, t, _) when (d > d_tot) do\n        round(t)\n    end\n    defp temps_aux(v, slope, d_tot, d, t, watts) do\n        slopeGravityAcc = (-1) * @gravity_acc * :math.sin(:math.atan(slope \/ 100.0))\n        tt = t + @delta_t\n        # new power\n        wwatts = watts - @d_watts * @delta_t # tiredness\n        # earth gravity due to slope and drag due to air resistance\n        gamma = slopeGravityAcc - @drag * abs(v) * abs(v) \/ @mass\n        # acceleration due to biker's power\n        ggamma =\n            if ((wwatts > 0.0) && (v > 0.0)) do\n                gamma + @g_thrust * wwatts \/ (v * @mass)\n            else gamma end\n        # acceleration too small -> acc = 0\n        vv =\n            if (abs(ggamma) <= 1.0e-5) do\n                v\n            else\n                v + ggamma * @delta_t\n            end\n        # new distance\n        dd = d + v * @delta_t \/ 60.0 # v in km\/h, delta_t in minutes\n        temps_aux(vv, slope, d_tot, dd, tt, wwatts)\n    end\n\n    def temps(v, slope, d_tot) do\n        temps_aux(v, slope, d_tot, 0.0, 0.0, @watts0)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"587d7544f1be39c48c000109":[{"id":78821,"user_id":470,"body":"defmodule Save do\n\tdef harvester_rescue([harvester: [hx,hy], worm: [[wx,wy],ws], carryall: [[cx,cy],cs]]) do\n\t\tif forge([hx,hy],[wx,wy],ws) > forge([hx,hy],[cx,cy],cs) + 1,do: \"The spice must flow! Rescue the harvester!\",else: \"Damn the spice! I'll rescue the miners!\"\n\tend\n\t\n\tdefp forge([x1,y1],[x2,y2],n) do\n\t\tx = abs(x1 - x2)\n\t\ty = abs(y1 - y2)\n\t\t:math.sqrt(x*x + y*y) \/ n\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78822,"user_id":null,"body":"defmodule Save do\n  defp time_to(harv, obj) do\n    [a, b] = Enum.zip(harv, hd(obj)) |> Enum.map(fn {x, y} -> x - y end)\n    :math.sqrt(a * a + b * b) \/ Enum.at(obj, 1)\n  end\n\n  def harvester_rescue(data) do\n    worm_time = time_to(data[:harvester], data[:worm])\n    carry_time = 1 + time_to(data[:harvester], data[:carryall])\n\n    if carry_time < worm_time,\n      do: \"The spice must flow! Rescue the harvester!\",\n      else: \"Damn the spice! I'll rescue the miners!\"\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78823,"user_id":null,"body":"defmodule Save do\n  def dist(p1, p2) do\n    [p1x, p1y] = p1\n    [p2x, p2y] = p2\n    :math.sqrt(:math.pow((p1x - p2x), 2) + :math.pow((p1y - p2y), 2))\n  end\n\n\tdef harvester_rescue(data) do\n\t\t[harvester: harvester, worm: [worm_loc, worm_speed], carryall: [carryall_loc, carryall_speed]] = data\n    worm_time = dist(harvester, worm_loc) \/ worm_speed\n    carryall_time = dist(harvester, carryall_loc) \/ carryall_speed\n    if carryall_time + 1 < worm_time, do: \"The spice must flow! Rescue the harvester!\", else: \"Damn the spice! I'll rescue the miners!\"\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78824,"user_id":null,"body":"defmodule Save do\n\tdef harvester_rescue(data) do\n    [xy_w, vel_w] = data[:worm]\n    [xy_c, vel_c] = data[:carryall]\n    \n\t\tdw = dist_to_harvester(xy_w, data[:harvester])\n    dc = dist_to_harvester(xy_c, data[:harvester])\n    \n    if ((dw \/ vel_w) - (dc \/ vel_c)) > 1, \n      do: \"The spice must flow! Rescue the harvester!\",\n      else: \"Damn the spice! I'll rescue the miners!\"\n\tend\n  \n  defp dist_to_harvester([x1, y1], [xh, yh]), do:\n    :math.sqrt(:math.pow((xh - x1), 2) + (:math.pow((yh - y1), 2)))\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78825,"user_id":null,"body":"defmodule Save do\n\tdef harvester_rescue([harvester: h_pos, worm: [w_pos, w_speed], carryall: [c_pos, c_speed]]) do\n    worm_time = distance(w_pos, h_pos) \/ w_speed\n    save_time = distance(c_pos, h_pos) \/ c_speed + 1\n    if worm_time > save_time, \n    do: \"The spice must flow! Rescue the harvester!\",\n    else: \"Damn the spice! I'll rescue the miners!\"\n\tend\n  \n  def distance([ax, ay], [bx, by]), do: :math.sqrt(:math.pow(ax - bx, 2) + :math.pow(ay- by, 2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78826,"user_id":null,"body":"defmodule Save do\n\n  def harvester_rescue(data), do: get_rescue(data)\n\n  defp get_rescue([harvester: h_coords, worm: [w_coords, w_speed], carryall: [c_coords, c_speed]]) do\n    case get_distance(h_coords, c_coords) \/ c_speed + 1 < get_distance(h_coords, w_coords) \/ w_speed do\n      true -> \"The spice must flow! Rescue the harvester!\"\n      false -> \"Damn the spice! I'll rescue the miners!\"\n    end\n  end\n\n  defp get_distance([x1, y1], [x2, y2]), do: :math.sqrt(:math.pow(x2 - x1, 2) + :math.pow(y2 - y1, 2))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78827,"user_id":null,"body":"defmodule Save do\n\tdef harvester_rescue(data) do\n    [x, y] = Keyword.get(data, :harvester)\n    [[x1, y1], v1] = Keyword.get(data, :worm)\n    [[x2, y2], v2] = Keyword.get(data, :carryall)\n    time1 = ((abs(x1-x)*abs(x1-x) + abs(y1-y)*abs(y1-y)) |> :math.sqrt) \/ v1\n    time2 = ((abs(x2-x)*abs(x2-x) + abs(y2-y)*abs(y2-y)) |> :math.sqrt) \/ v2\n    cond do\n      time1 > time2 + 1 ->\n        \"The spice must flow! Rescue the harvester!\"\n      true ->\n        \"Damn the spice! I'll rescue the miners!\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78828,"user_id":null,"body":"defmodule Save do\n\tdef harvester_rescue(data) do\n\t\t[\n      harvester: harvester_coords,\n      worm: [worm_coords, worm_speed],\n      carryall: [carryall_coords, carryall_speed]\n    ] = data\n    worm_time = pythagorean_distance(harvester_coords, worm_coords) \/ worm_speed\n    carryall_time = pythagorean_distance(harvester_coords, carryall_coords) \/ carryall_speed\n    case worm_time - carryall_time > 1 do\n      true -> \"The spice must flow! Rescue the harvester!\"\n      false -> \"Damn the spice! I'll rescue the miners!\"\n    end\n  end\n\n  def pythagorean_distance([a_x, a_y], [b_x, b_y]) do\n    x = abs(a_x - b_x)\n    y = abs(a_y - b_y)\n    :math.sqrt(x * x + y * y)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78829,"user_id":817,"body":"defmodule Save do\n\tdef harvester_rescue(data) do\n\t\t[{:harvester, [xh, yh]}, {:worm, [[xw, yw],w_speed]}, {:carryall, [[xc, yc], c_speed]}] = data\n    w_diff_x = abs(xh - xw)\n    w_diff_y = abs(yh - yw)\n    c_diff_x = abs(xh - xc)\n    c_diff_y = abs(yh - yc)\n    worm_dist = :math.sqrt((w_diff_x * w_diff_x) + (w_diff_y * w_diff_y))\n    carryall_dist = :math.sqrt((c_diff_x * c_diff_x) + (c_diff_y * c_diff_y))\n    worm_time = worm_dist \/ w_speed\n    carryall_time = carryall_dist \/ c_speed + 1\n    case worm_time > carryall_time do\n      true -> \"The spice must flow! Rescue the harvester!\"\n      false -> \"Damn the spice! I'll rescue the miners!\"\n    end\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78830,"user_id":null,"body":"defmodule Save do\n  def harvester_rescue([harvester: harvester_data, worm: worm_data, carryall: carryall_data]) do\n    worm_distance = calc_distance(harvester_data, worm_data)\n    carryall_distance = calc_distance(harvester_data, carryall_data)\n\n    worm_time = calc_time(worm_distance, worm_data)\n    carryall_time = calc_time(carryall_distance, carryall_data) + 1\n\n    if worm_time > carryall_time do\n      \"The spice must flow! Rescue the harvester!\"\n    else\n      \"Damn the spice! I'll rescue the miners!\"\n    end\n  end\n\n  defp calc_distance([harvester_x, harvester_y], [[x, y], _]) do\n    a = harvester_x - x |> abs()\n    b = harvester_y - y |> abs()\n\n    a * a + b * b\n    |> :math.sqrt()\n  end\n\n  defp calc_time(distance, [_, speed]) do\n    distance \/ speed\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"588417e576933b0ec9000045":[{"id":78831,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    (n_cols - (col-1))*(n_rows - row)\n  end\nend\n\n# test testing(5, 5, 1, 1, 20) ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78832,"user_id":null,"body":"defmodule SeatsInTheater do\n  @spec seats_in_theater(pos_integer, pos_integer, pos_integer, pos_integer) :: pos_integer\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    (n_cols - col + 1) * (n_rows - row)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78833,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row), do: (n_rows - row) * (n_cols + 1 - col)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78834,"user_id":492,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(nCols, nRows, col, row) do\n    (nCols-col+1) * (nRows - row)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78835,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    seats = for r <- 1..n_rows, c <- 1..n_cols, do: {r, c}\n    seats \n    |> Enum.filter(fn {r, c} -> r > row and c >= col end)\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78836,"user_id":null,"body":"defmodule SeatsInTheater do\n    def seats_in_theater(a,b,c,d), do: (a-c+1)*(b-d)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78837,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    (1 + n_cols - col) * (n_rows - row)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78838,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row), do: (n_cols - (col-1)) * (n_rows - row)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78839,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    (n_rows - row) * (n_cols - col + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78840,"user_id":null,"body":"defmodule SeatsInTheater do\n  def seats_in_theater(n_cols, n_rows, col, row) do\n    (n_cols-(col-1))*(n_rows-row)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58841cb52a077503c4000015":[{"id":78841,"user_id":564,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, m), do: n \/ 2 + m |> trunc |> rem(n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78842,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) do\n    rem(div(n, 2) + first_number, n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78843,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) do\n    rem(floor(n \/ 2) + first_number, n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78844,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, initial) do\n  (initial + n \/ 2)\n  |> trunc()\n  |> rem(n)\nend\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78845,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) do\n    case first_number do\n      index when index < n \/ 2 ->\n        index = Enum.find_index(0..(div(n, 2) - 1), fn x -> x == first_number end)\n        Enum.at(div(n, 2)..(n - 1), index)\n\n      _ ->\n        index = Enum.find_index(div(n, 2)..(n - 1), fn x -> x == first_number end)\n        Enum.at(0..(div(n, 2) - 1), index)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78846,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) when n > first_number * 2, do: first_number + div(n, 2)\n  def circle_of_numbers(n, first_number), do: first_number - div(n, 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78847,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) do\n    if first_number < n\/2 do\n    first_number+ n\/2\n    else\n    first_number - n\/2\n    end\n  end\nend\n\n# testing(12, 2, 8)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78848,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number) do\n    res = div(n, 2) + first_number\n    cond do\n      res == n -> 0\n      res > n -> res - n\n      true -> res\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78849,"user_id":null,"body":"defmodule CircleNumbers, do: def circle_of_numbers(n,k), do: rem(div(n,2)+k,n)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78850,"user_id":null,"body":"defmodule CircleNumbers do\n  def circle_of_numbers(n, first_number), do: wrap(first_number+div(n+1,2), n)\n  def wrap(n, max) when n >= max, do: n - max\n  def wrap(n,_), do: n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"588422ba4e8efb583d00007d":[{"id":78851,"user_id":null,"body":"defmodule LateRide do\n  @spec late_ride(pos_integer) :: pos_integer\n  def late_ride(n) do\n    hrs = div(n, 60) |> Integer.digits() |> Enum.sum\n    min = rem(n, 60) |> Integer.digits() |> Enum.sum\n    hrs + min\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78852,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n), do: List.flatten([Integer.digits(div(n, 60)), Integer.digits(rem(n, 60))]) |> Enum.sum\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78853,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n) do\n    (Integer.digits(div(n, 60)) ++ Integer.digits(rem(n, 60)))\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78854,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n) do\n    [rem(n, 60), rem(div(n, 60), 24)]\n    |> Enum.flat_map(&Integer.digits\/1)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78855,"user_id":492,"body":"defmodule LateRide do\n  def late_ride(n) do\n    div(n,600) + rem(div(n,60), 10) + div(rem(n, 60),10) + rem(n,10)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78856,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n) do\n    whole_hours = Integer.digits(trunc(n\/60))\n    whole_mins = Integer.digits( n - trunc(n\/60)* 60)\n    Enum.sum(whole_hours ++ whole_mins)\n  end\nend\n\n# test  testing(60, 1)\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78857,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n) do\n    [div(n, 60), rem(n, 60)]\n    |> Enum.map(&Integer.digits\/1)\n    |> List.flatten\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78858,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n), do: \"#{rem(div(n,60),24)}#{rem(n,60)}\"\n      |> String.to_integer\n      |> Integer.digits\n      |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78859,"user_id":null,"body":"defmodule LateRide do\n\n  def late_ride(n) do\n  min = n |> div(60) |> Integer.digits()\n  sec = n |> rem(60) |> Integer.digits()\n  min ++ sec |> Enum.sum() \n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78860,"user_id":null,"body":"defmodule LateRide do\n  def late_ride(n) do\n    time = div(n, 60) * 100 + rem(n, 60)\n    Enum.sum(Integer.digits(time))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58844f1a76933b1cd0000023":[{"id":78861,"user_id":null,"body":"defmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n    n\n     |> Integer.digits(2) \n     |> List.replace_at((0 - k), 0) \n     |> Integer.undigits(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78862,"user_id":null,"body":"defmodule SimpleFun do\n  use Bitwise\n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k), do: n &&& (~~~(1 <<< (k-1)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78863,"user_id":null,"body":"defmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n    n\n    |> Integer.to_string(2)\n    |> String.graphemes()\n    |> List.replace_at(-k, \"0\")\n    |> Enum.join()\n    |> Integer.parse( 2)\n    |> elem(0)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78864,"user_id":null,"body":"defmodule SimpleFun do \n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n     1 |> Bitwise.bsl(k - 1) |> Bitwise.bnot |> Bitwise.band(n)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78865,"user_id":null,"body":"defmodule SimpleFun do\n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n    i = k - 1\n\n    Integer.digits(n, 2)\n    |> Enum.reverse()\n    |> Enum.with_index()\n    |> Enum.map(fn\n      {x, ^i} when x == 1 -> 0\n      {x, _} -> x\n    end)\n    |> Enum.reverse()\n    |> Integer.undigits(2)\n  end\nend\n\n# test assert kill_kth_bit(123,4) == 115","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78866,"user_id":50,"body":"import Bitwise\n\ndefmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n    m = bsl(1, k-1)\n    bor(n, m) - m\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78867,"user_id":53,"body":"defmodule SimpleFun do\n  \n  use Bitwise\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k), do: n &&& bnot(1 <<< (k - 1))\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78868,"user_id":null,"body":"defmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n     Integer.digits(n, 2) |> List.replace_at(-k, 0) |> Integer.undigits(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78869,"user_id":null,"body":"defmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, k) do\n     Integer.to_string(n, 2)\n     |> String.reverse\n     |> String.replace(~r\/(?<=^.{#{k-1}})1\/, \"0\")\n     |> String.reverse\n     |> String.to_integer(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78870,"user_id":null,"body":"defmodule SimpleFun do\n  \n  @spec kill_kth_bit(n :: non_neg_integer(), k :: pos_integer()) :: non_neg_integer()\n  def kill_kth_bit(n, 1) do\n    n - rem(n, 2)\n  end\n  def kill_kth_bit(n, k) do\n    2 * kill_kth_bit(div(n, 2), k - 1) + rem(n, 2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58845a92bd573378f4000035":[{"id":78871,"user_id":null,"body":"defmodule Kata do\n  def swap_adjacent_bits(n) do\n    Integer.digits(n, 2)\n    |> Enum.reverse\n    |> Enum.chunk_every(2, 2, [0])\n    |> Enum.flat_map(fn [a, b] -> [b, a] end)\n    |> Enum.reverse\n    |> Integer.undigits(2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78872,"user_id":null,"body":"defmodule Kata do\n    def swap_adjacent_bits(n) do\n      n\n      |> Integer.digits(4)\n      |> Enum.map(fn 0b01 -> 0b10; 0b10 -> 0b01; b -> b end)\n      |> Integer.undigits(4)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78873,"user_id":null,"body":"defmodule Kata do\n  def swap_adjacent_bits(n) do\n    n\n    |> Integer.digits(2)\n    |> pad()\n    |> swap()\n    |> Integer.undigits(2)\n  end\n  \n  def pad(digits) do\n    digits\n    |> Enum.count()\n    |> rem(2)\n    |> case do\n      0 -> digits\n      1 -> [0 | digits]\n    end\n  end\n  \n  def swap([a, b | tl]), do: [b, a] ++ swap(tl)\n  def swap([]), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78874,"user_id":null,"body":"defmodule Kata do\n  def swap_adjacent_bits(n) do\n    n\n    |> Integer.digits(2)   # convert int to binary\n    |> pad_to_even()       # pad to even digits\n    |> swap_digits()       # swap adjacent bits\n    |> Integer.undigits(2) # convert back to decimal\n  end\n\n  def pad_to_even(ary) do\n    if Integer.mod(length(ary), 2) == 1 do\n      [0] ++ ary\n    else\n      ary\n    end\n  end\n\n  def swap_digits(ary) do\n    ary\n    |> Enum.chunk_every(2)\n    |> Enum.map(fn [a,b] -> [b,a] end)\n    |> List.flatten()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78875,"user_id":null,"body":"defmodule Kata do\n  import Integer\n\n  def swap_adjacent_bits(n) do\n    digit = Integer.digits(n, 2)\n    digit = if Integer.is_odd(length(digit)), do: [0] ++ digit, else: digit\n\n    digit\n    |> Enum.chunk_every(2)\n    |> Enum.map(fn [x, y] ->\n      [y, x]\n    end)\n    |> List.flatten()\n    |> Integer.undigits(2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78876,"user_id":null,"body":"defmodule Kata do\n  def swap_adjacent_bits(n) do\n    another_binary = Integer.digits(n,2)\n    if  rem(Enum.count(another_binary),2) == 0 do\n     Enum.chunk_every(another_binary,2)\n    |> Enum.map(fn x -> Enum.reverse(x) end)\n    |> List.flatten()\n    |>Integer.undigits(2)\n    else\n   odd_order =  [0 | another_binary]\n   Enum.chunk_every(odd_order,2)\n   |> Enum.map(fn x -> Enum.reverse(x) end)\n   |> List.flatten()\n   |>Integer.undigits(2)\n   end\n  end\nend\n\n# test {10, 5}","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78877,"user_id":null,"body":"import Integer\ndefmodule Kata do\n    def swap_adjacent_bits(n) do\n        bin_str = if Integer.to_string(n,2) |> String.length() |> Integer.is_even, do: Integer.to_string(n,2), else: \"0\" <> Integer.to_string(n,2)\n        for pair <- String.split(bin_str,\"\",trim: true) |> Enum.chunk_every(2) do\n          Enum.reverse(pair) |> Enum.join\n        end\n        |> Enum.join |> Integer.parse(2) |> elem(0)\n        \n        \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78878,"user_id":null,"body":"defmodule Kata do\n    def swap_adjacent_bits(n) do\n        dig = Integer.digits(n, 2)\n        (for _ <- 1..(32-Enum.count(dig)), do: 0) ++ dig\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x,y] -> [y,x] end)\n        |> List.flatten()\n        |> Integer.undigits(2)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78879,"user_id":527,"body":"defmodule Kata do\n  use Bitwise\n  def swap_adjacent_bits(n) do\n    (n &&& 0x55555555) <<< 1 ||| (n &&& 0xaaaaaaaa) >>> 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78880,"user_id":null,"body":"defmodule Kata do\n    import Bitwise\n\n    def swap_adjacent_bits(n), do:\n        (n &&& 0x55555555) <<< 1 ||| (n &&& 0xAAAAAAAA) >>> 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5886e082a836a691340000c3":[{"id":78881,"user_id":53,"body":"defmodule Kata do\n    def rectangle_rotation(a, b) do\n        x = (a \/ :math.sqrt(2)) |> Float.floor\n        y = (b \/ :math.sqrt(2)) |> Float.floor\n        r = trunc((x + 1) * (y + 1) + x * y)\n        r + rem(r, 2) - 1\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78882,"user_id":null,"body":"defmodule Kata do\n    def rectangle_rotation(a, b) do\n        [a, b] = Enum.map([a, b], &(floor(&1 \/ :math.sqrt(2))))\n        c = 2 * a * b + a + b\n        if rem(c, 2) == 0, do: c + 1, else: c\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78883,"user_id":null,"body":"defmodule Kata do\n  def rectangle_rotation(a, b) do\n    a2 = a \/ 2 \/ :math.sqrt(2)\n    b2 = b \/ 2 \/ :math.sqrt(2)\n    r1a = floor(a2) * 2 + 1\n    r1b = floor(b2) * 2 + 1\n\n    r1a * r1b +\n      (r1a + if(a2 - floor(a2) < 0.5, do: -1, else: 1)) *\n        (r1b + if(b2 - floor(b2) < 0.5, do: -1, else: 1))\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78884,"user_id":168,"body":"defmodule Kata do\n    def rectangle_rotation(a, b) do\n      x = floor(a \/ :math.sqrt(2))\n      y = floor(b \/ :math.sqrt(2))\n      2 * x * y + x + y - Bitwise.band(Bitwise.bxor(x, y), 1) + 1\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78885,"user_id":null,"body":"defmodule Kata do\n  def rectangle_rotation(a, b) do\n    aHalfBisect = a \/ :math.sqrt(2) \/ 2\n    bHalfBisect = b \/ :math.sqrt(2) \/ 2\n\n    r1a = trunc(Float.floor(aHalfBisect)) * 2 + 1\n    r1b = trunc(Float.floor(bHalfBisect)) * 2 + 1\n\n    r2a = if aHalfBisect - Float.floor(aHalfBisect) < 0.5, do: r1a - 1, else: r1a + 1\n    r2b = if bHalfBisect - Float.floor(bHalfBisect) < 0.5, do: r1b - 1, else: r1b + 1\n\n    r1a * r1b + r2a * r2b\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78886,"user_id":null,"body":"defmodule Kata do\n    def rectangle_rotation(a,b) do\n      calculate(max(a, b), min(a, b))\n    end\n    \n    def calculate(a, b) do\n      f = :math.sqrt(2)\/4\n      for x <- 0..floor(f*(a+b)), reduce: 0 do\n        acc when x == 0 -> acc + floor(f*(-a+b) + f*(a+b)) - ceil(f*(-a-b) + f*(a-b)) + 1\n        acc when x <= f*(a-b)-> acc + 2*(floor(f*(-a+b) + (x+f*(a+b))) - ceil(f*(-a-b) + (x-f*(-a+b))) + 1) \n        acc -> acc + 2*(floor(f*(a+b)-(x-f*(a-b))) - ceil(f*(-a-b) + (x-f*(-a+b))) + 1)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78887,"user_id":null,"body":"defmodule Kata do\n  def rectangle_rotation(a, b) do\n    2 * p(b) * p(a) + p(a) + p(b) + rem(p(a) + p(b) + 1, 2)\n  end\n\n  defp p(a) do\n    trunc(a \/ :math.sqrt(2))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78888,"user_id":null,"body":"defmodule Kata do\n  def rectangle_rotation(a, b) do\n    2 * p(b) * p(a) - p(a) - p(b) + rem(p(a) + p(b) + 1, 2)\n  end\n\n  defp p(a) do\n    trunc(a \/ :math.sqrt(2)) + 1\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78889,"user_id":null,"body":"defmodule Kata do\n    def rectangle_rotation(a,b) do\n      x = to_diagonal_units(a)\n      y = to_diagonal_units(b)\n      rectangle_rotation(x, y, 0)\n    end\n    \n    def rectangle_rotation(0, b, total) when rem(b,2) == 0, do: total + b + 1 \n    def rectangle_rotation(0, b, total), do: total + b \n    def rectangle_rotation(a, 0, total) when rem(a,2) == 0, do: total + a + 1\n    def rectangle_rotation(a, 0, total), do: total + a \n    def rectangle_rotation(a, b, total), do: rectangle_rotation(a-1, b-1, total + 2*a + 2*b)\n    \n    defp to_diagonal_units(x), do:  x \/ :math.sqrt(2) |> Kernel.trunc()\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78890,"user_id":null,"body":"defmodule Kata do\n    def rectangle_rotation(a,b) do\n        if a < b do\n          rectangle_rotation(b, a)\n        else\n          p = trunc(b \/ :math.sqrt(2))\n          q = a \/ :math.sqrt(2)\n          -p..p |> Enum.reduce(0, fn p, sum ->\n            sum + floor((q - p) \/ 2) - ceil((-q - p) \/ 2) + 1\n          end)\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58905bfa1decb981da00009e":[{"id":78891,"user_id":null,"body":"defmodule Kata do\n  def the_lift(queues, capacity) do\n    queues\n    |> init_state\n    |> Map.put(:capacity, capacity)\n    |> run_lift\n  end\n  \n  def init_state(queues) do\n    Enum.reduce(queues, %{todo: 0}, fn x, acc -> \n      acc\n      |> Map.put(map_size(acc) - 1, x)\n      |> Map.update!(:todo, &(&1 + length(x)))\n    end)\n    |> Map.put(:floor, 0)\n    |> Map.put(:history, [0])\n    |> Map.put(:riders, [])\n    |> Map.put(:direction, \"UP\")\n    |> Map.put(:height, length(queues) - 1)\n  end\n  \n  def run_lift(%{:todo => 0} = state), do: state.history |> add_history(0) |> Enum.reverse\n  def run_lift(state) do\n    state\n    |> validate_direction\n    |> pick_up\n    |> move\n    |> drop_off\n    |> run_lift\n  end\n  \n  def validate_direction(%{:floor => a, :height => a} = state), do: Map.put(state, :direction, \"DN\")\n  def validate_direction(%{:floor => 0} = state), do: Map.put(state, :direction, \"UP\")\n  def validate_direction(state), do: state\n  \n  def pick_up(state) do\n    {ready, not_ready} =\n      Enum.split_with(state[state.floor], fn x -> \n        case state.direction do\n          \"UP\" -> x > state.floor\n          \"DN\" -> x < state.floor\n        end\n      end)\n      \n    {taken, cant_fit} = \n      Enum.split(ready, state.capacity - length(state.riders))\n      \n    state\n    |> Map.update!(:riders, &(taken ++ &1))\n    |> Map.put(state.floor, not_ready ++ cant_fit)\n    |> Map.put(:history, if length(ready) > 0 do add_history(state.history, state.floor) else state.history end)\n  end\n    \n  def move(%{:direction => \"UP\"} = state), do: Map.update!(state, :floor, &(&1 + 1))\n  def move(%{:direction => \"DN\"} = state), do: Map.update!(state, :floor, &(&1 - 1))\n  \n  def drop_off(state) do\n    {done, waiting} = Enum.split_with(state.riders, &(&1 == state.floor))\n    done = length(done)\n    \n    state\n    |> Map.update!(:todo, &(&1 - done))\n    |> Map.put(:riders, waiting)\n    |> Map.put(:history, if done > 0 do add_history(state.history, state.floor) else state.history end)\n  end\n  \n  def add_history([h | t], h), do: [h | t]\n  def add_history([h | t], a), do: [a | [h | t]]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78892,"user_id":null,"body":"defmodule Elevator do\n  defstruct floor: 0,\n            next_floor: 0,\n            direction: :up,\n            capacity: 0,\n            passengers: [],\n            visited_floors: [],\n            queues: [],\n            top_floor: 0,\n            idle: false\nend\n\ndefmodule Kata do\n  def the_lift(queues, capacity) do\n    top_floor = Enum.count(queues) - 1\n    elevator = %Elevator{queues: queues, top_floor: top_floor, capacity: capacity}\n    work(elevator)\n  end\n  \n  def work(%Elevator{idle: true, visited_floors: visited_floors}), do:\n    Enum.reverse(visited_floors)\n  def work(elevator) do\n    elevator\n    |> record_current_floor()\n    |> let_out_passengers()\n    |> check_if_elevator_idle()\n    |> calculate_next_stop()\n    |> take_in_passengers()\n    |> work()\n  end\n  \n  def record_current_floor(elevator) do\n    %Elevator{next_floor: next_floor, visited_floors: visited_floors} = elevator\n    %{ elevator | floor: next_floor, visited_floors: [next_floor | visited_floors] }\n  end\n  \n  def let_out_passengers(elevator) do\n    %Elevator{floor: floor, passengers: passengers} = elevator\n    new_passengers = Enum.filter(passengers, fn passenger -> passenger != floor end)\n    %{ elevator | passengers: new_passengers }\n  end\n  \n  def take_in_passengers(elevator) do\n    %Elevator{\n      floor: floor,\n      queues: queues,\n      passengers: passengers,\n      capacity: capacity,\n      direction: direction\n    } = elevator\n    queue = Enum.at(queues, floor)\n    remaining_capacity = capacity - Enum.count(passengers)\n    {getting_on, staying} = get_passengers_from_queue(queue, floor, remaining_capacity, direction)\n    new_passengers = passengers ++ getting_on\n    new_queues = List.update_at(queues, floor, fn _ -> staying end)\n    %{ elevator | queues: new_queues, passengers: new_passengers }\n  end\n  \n  \n  defp get_passengers_from_queue(queue, floor, capacity, direction, getting_on \\\\ [], staying \\\\ [])\n  defp get_passengers_from_queue([], _floor, _capacity, _direction, getting_on, staying), do:\n    {getting_on, Enum.reverse(staying)}\n  defp get_passengers_from_queue(queue, _floor, 0, _direction, getting_on, staying), do:\n    {getting_on, Enum.reverse(staying) ++ queue}\n  defp get_passengers_from_queue([head | tail], floor, capacity, direction, getting_on, staying) do\n    cond do\n      direction == :up && head > floor ->\n        get_passengers_from_queue(tail, floor, capacity - 1, direction, [head | getting_on], staying)\n      direction == :down && head < floor ->\n        get_passengers_from_queue(tail, floor, capacity - 1, direction, [head | getting_on], staying)\n      true ->\n        get_passengers_from_queue(tail, floor, capacity, direction, getting_on, [head | staying])\n    end\n  end\n  \n  def check_if_elevator_idle(elevator) do\n    %Elevator{ queues: queues, floor: floor, passengers: passengers } = elevator\n    queue_count = Enum.reduce(queues, 0, fn e, acc -> acc + Enum.count(e) end)\n    passenger_count = Enum.count(passengers)\n    idle = queue_count == 0 && floor == 0 && passenger_count == 0\n    %{ elevator | idle: idle }\n  end\n  \n  def calculate_next_stop(elevator) do\n    %Elevator{\n      passengers: passengers,\n      queues: queues,\n      top_floor: top_floor,\n      floor: current_floor,\n      direction: direction,\n      capacity: capacity\n    } = elevator\n    queue = Enum.at(queues, current_floor)\n    \n    passengers_going_up   = Enum.filter(passengers ++ queue, fn passenger -> passenger >= current_floor end) |> Enum.take(capacity)\n    passengers_going_down = Enum.filter(passengers ++ queue, fn passenger -> passenger <= current_floor end) |> Enum.take(capacity)\n    \n    queues_with_floors = Enum.with_index(queues)\n    queuers_going_up   =\n      Enum.drop(queues_with_floors, current_floor + 1)\n      |> Enum.filter(fn {queue, floor} -> Enum.any?(queue, fn queuer -> queuer > floor end) end)\n      |> Enum.map(fn {_queue, floor} -> floor end)\n    queuers_going_down =\n      Enum.take(queues_with_floors, current_floor)\n      |> Enum.filter(fn {queue, floor} -> Enum.any?(queue, fn queuer -> queuer < floor end) end) \n      |> Enum.map(fn {_queue, floor} -> floor end)\n    \n    anyone_going_up?   = Enum.any?(passengers_going_up,   fn _ -> true end) || Enum.any?(queuers_going_up,   fn _ -> true end)\n    anyone_going_down? = Enum.any?(passengers_going_down, fn _ -> true end) || Enum.any?(queuers_going_down, fn _ -> true end)\n    \n    bottom_floor_with_queuer =\n      Enum.reduce_while(queues_with_floors, top_floor, fn {queue, floor}, acc ->\n        if Enum.any?(queue, fn _ -> true end), do: {:halt, floor}, else: {:cont, acc}\n      end)\n    top_floor_with_queuer =\n      Enum.reduce(queues_with_floors, 0, fn {queue, floor}, acc ->\n        if Enum.any?(queue, fn _ -> true end), do: floor, else: acc\n      end)\n    \n    cond do\n      direction == :up && anyone_going_up? ->\n        new_floor = Enum.min(passengers_going_up ++ queuers_going_up)\n        %{ elevator | next_floor: new_floor, direction: :up }\n      direction == :up && current_floor < top_floor_with_queuer ->\n        %{ elevator | next_floor: top_floor_with_queuer, direction: :up }\n      direction == :up && anyone_going_down? ->\n        new_floor = Enum.max(passengers_going_down ++ queuers_going_down)\n        %{ elevator | next_floor: new_floor, direction: :down }\n      direction == :up && current_floor > bottom_floor_with_queuer ->\n        %{ elevator | next_floor: bottom_floor_with_queuer, direction: :down }\n      direction == :down && anyone_going_down? ->\n        new_floor = Enum.max(passengers_going_down ++ queuers_going_down)\n        %{ elevator | next_floor: new_floor, direction: :down }\n      direction == :down && current_floor > bottom_floor_with_queuer ->\n        %{ elevator | next_floor: bottom_floor_with_queuer, direction: :down }\n      direction == :down && anyone_going_up? ->\n        new_floor = Enum.min(passengers_going_up ++ queuers_going_up)\n        %{ elevator | next_floor: new_floor, direction: :up }\n      direction == :down && current_floor < top_floor_with_queuer ->\n        %{ elevator | next_floor: top_floor_with_queuer, direction: :up }\n      true ->\n        %{ elevator | next_floor: 0, direction: :down }\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78893,"user_id":null,"body":"defmodule Kata do\n    def the_lift(queues, capacity) do\n        lift(0,[],List.duplicate(0,length(queues)),split_queues(queues),capacity,length(queues),1) |> Enum.dedup\n    end\n    def lift(floor, stops, insiders, queues, capacity, num_floors, up_down) when floor == num_floors-1 and up_down == 1 do\n        lift(floor, stops, insiders, queues, capacity, num_floors,-1)       \n    end\n    def lift(floor, stops, insiders, queues, capacity, num_floors, up_down) when floor < 0 and up_down == -1 do \n        lift(floor+1, stops, insiders, queues, capacity, num_floors, 1)\n    end   \n    def lift(floor, stops, insiders, queues, capacity, num_floors, up_down) do \n        if queue_size(queues) == 0 && Enum.sum(insiders) == 0 do\n            if Enum.at(stops,-1) == 0, do: stops, else: stops ++ [0] \n        else\n            out = Enum.at(insiders,floor) \n            n_insiders = ( if out > 0, do: List.update_at(insiders,floor,&(&1 - out)) ,else: insiders)               \n            {passers,n_queues, stop} = get_passers(queues,floor,capacity-Enum.sum(n_insiders), up_down) \n            n_insiders = Enum.reduce(passers,n_insiders, fn el, insiders -> List.update_at(insiders,el,&(&1 + 1)) end)           \n            n_stops = (if stop || out > 0 || length(passers)>0 || length(stops) == 0, do: stops ++ [floor], else: stops) \n            lift(floor+up_down, n_stops, n_insiders, n_queues, capacity, num_floors, up_down) \n        end\n   end\n    defp get_passers(queues, floor, max, up_down) when up_down == -1 do  \n       {up,down} = Enum.at(queues,floor)  \n       stop = (if length(down) > 0, do: true, else: false) \n       {n_down,down} = Enum.split(down,max)\n       {n_down,List.replace_at(queues,floor,{up,down}), stop}\n    end\n    defp get_passers(queues, floor, max, up_down) when up_down == 1 do  \n       {up,down} = Enum.at(queues,floor) \n       stop = (if length(up) > 0, do: true, else: false) \n       {n_up,up} = Enum.split(up,max)\n       {n_up,List.replace_at(queues,floor,{up,down}), stop}\n    end\n    defp split_queues(queues), do: for {arr,ind} <- Enum.with_index(queues), do: Enum.split_with(arr, fn val -> val > ind end) \n    defp queue_size(queue), do: Enum.reduce(queue,0, fn {a1,a2}, acc -> acc + length(a1)+length(a2) end)\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78894,"user_id":null,"body":"defmodule Kata do\n  defmodule Lift do\n    defstruct capacity: nil,\n      passengers: [],\n      floor: 0,\n      action: :go_up,\n      way: []\n\n    def new(capacity) do\n      %Lift{capacity: capacity}\n    end\n\n    def add_stop(%Lift{way: way} = lift, stop) do\n      %Lift{lift | way: way ++ [stop]}\n    end\n\n    def move_up(%Lift{floor: floor} = lift), do: %Lift{lift | floor: floor + 1}\n    def move_down(%Lift{floor: floor} = lift), do: %Lift{lift | floor: floor - 1}\n    def set_action(%Lift{} = lift, action), do: %Lift{lift| action: action}\n  end\n\n  def the_lift(queues, capacity) do\n    {lift, state} = init_state(queues, capacity)\n    {lift, state} = stop_if_needed(lift, state) # stop at groun floor\n    do_lift(Lift.add_stop(lift, 0), state)\n  end\n\n  defp init_state(queues, cap) do\n    {state, _} =\n      queues # [[1], [2]] => %{0 => [1], 1 => [2]}\n      |> Enum.reduce({%{}, 0}, fn queue, {map, n} -> {Map.put(map, n, queue), n + 1} end)\n\n    lift = Lift.new(cap)\n    {lift, state}\n  end\n\n  defp do_lift(%Lift{action: :go_up} = lift, %{} = state) do\n    lift = Lift.move_up(lift)\n    {lift, state} = stop_if_needed(lift, state)\n    process_direction(lift, state)\n  end\n  defp do_lift(%Lift{action: :go_down} = lift, %{} = state) do\n    lift = Lift.move_down(lift)\n    {lift, state} = stop_if_needed(lift, state)\n    process_direction(lift, state)\n  end\n\n  defp process_direction(%Lift{floor: 0, action: :go_down, passengers: []} = lift, %{} = state) do\n    if floors_with_folks(state) == [] do\n      # end of the way\n      Lift.add_stop(lift, 0).way\n      |> reduce_list()\n    else\n      # turning back - and don't forget to make a stop!\n      {lift, state} = stop_if_needed(Lift.set_action(lift, :go_up), state)\n      do_lift(lift, state)\n    end\n  end\n  defp process_direction(%Lift{action: :go_up, passengers: [], floor: floor} = lift, %{} = state) do\n    higher_caller = floors_with_folks(state) |> List.last()\n    cond do\n      higher_caller == nil ->\n        # there's no queues - so we haven't stop here\n        do_lift(Lift.set_action(lift, :go_down), state)\n      higher_caller <= floor ->\n        # turning back - and don't forget to make a stop!\n        {lift, state} = stop_if_needed(Lift.set_action(lift, :go_down), state)\n        do_lift(lift, state)\n      true ->\n        do_lift(lift, state)\n    end\n  end\n  defp process_direction(%Lift{} = lift, %{} = state) do\n    do_lift(lift, state)\n  end\n\n  defp stop_if_needed(%Lift{floor: floor} = lift, %{} = state) do\n    pipeline = [&drop_passengers\/2, &take_passengers\/2]\n\n    pns = passengers_need_stop(lift, state)\n    companions = companions(lift, state)\n\n    if pns ++ companions == [] do\n      # nobody need stop - just skipping the floor\n      {lift, state}\n    else\n      # stop! (see the \"pipeline\" variable above)\n      {lift, state} =\n        Enum.reduce pipeline, {lift, state}, fn x, {l, s} -> apply(x, [l, s]) end\n      {Lift.add_stop(lift, floor), state}\n    end\n  end\n\n  defp passengers_need_stop(%Lift{floor: floor, passengers: passengers}, _) do\n    Enum.filter(passengers, fn p -> p == floor end)\n  end\n  defp companions(%Lift{floor: floor, action: action}, %{} = state) do\n    filter_f =\n      fn folk ->\n        case action do\n          :go_up ->\n            folk > floor\n          :go_down ->\n            folk < floor\n        end\n      end\n    queue = state[floor]\n    Enum.filter(queue, filter_f)\n  end\n\n  defp drop_passengers(%Lift{passengers: passengers, floor: floor} = lift, %{} = state) do\n    {%Lift{lift | passengers: Enum.filter(passengers, fn x -> x != floor end)}, state}\n  end\n  defp take_passengers(%Lift{action: action, passengers: passengers, floor: floor} = lift, %{} = state) do\n    queue = state[floor]\n    filter_f =\n      case action do\n        :go_up -> &(&1 > floor)\n        :go_down -> &(&1 < floor)\n      end\n\n    folks_to_take = Enum.filter(queue, filter_f) |> Enum.take(lift.capacity - length(passengers))\n    {\n      %Lift{lift | passengers: passengers ++ folks_to_take},\n      Map.put(state, floor, queue -- folks_to_take)\n    }\n  end\n\n  defp floors_with_folks(state) do\n    state\n    |> Enum.filter(fn {_k, v} -> v != [] end)\n    |> Enum.map(fn {k, _} -> k end)\n    |> Enum.sort()\n  end\n\n  # reducing the result\n  # [0, 0, 1, 1, 0] => [0, 1, 0]\n  defp reduce_list(list), do: do_reduce_list(list, [])\n  defp do_reduce_list([one, two | remains], acc) when one == two do\n    do_reduce_list([one] ++ remains, acc)\n  end\n  defp do_reduce_list([h|tail], acc), do: do_reduce_list(tail, acc ++ [h])\n  defp do_reduce_list([], acc), do: acc\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78895,"user_id":null,"body":"defmodule Kata do\n    import Enum\n\n    defp work(acc, cap) do\n        {qs, {lift, hist}} = acc\n        if empty?(lift) and all?(qs, fn {_, q} -> empty?(q) end) do\n            if(hd(hist) == 0, do: hist, else: [0 | hist]) |> reverse\n        else\n            [&Kernel.>\/2, &Kernel.<\/2]\n            |> reduce(acc, fn cmp, {qs, {lift, hist}} ->\n                {qs, st} = map_reduce(qs, {lift, hist}, fn {fl, q}, {li, hi} ->\n                    if any?(li, & fl == &1) or any?(q, & cmp.(&1, fl)) do\n                        li = reject(li, & fl == &1)\n                        {q, {li, _}} = map_reduce(q, {li, cap - length(li)}, fn p, {li, n} ->\n                            if(n > 0 and cmp.(p, fl), do: {nil, {[p | li], n - 1}}, else: {p, {li, n}}) end)\n                        hi = if hd(hi) == fl, do: hi, else: [fl | hi]\n                        {{fl, reject(q, &Kernel.is_nil\/1)}, {li, hi}}\n                    else\n                        {{fl, q}, {li, hi}}\n                    end\n                end)\n                {reverse(qs), st}\n            end)\n            |> work(cap)\n        end\n    end\n\n    def the_lift(queues, capacity), do:\n        work({zip(0..length(queues) - 1, queues), {[], [0]}}, capacity)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58941fec8afa3618c9000184":[{"id":78896,"user_id":53,"body":"defmodule Kata do\n  def growing_plant(u, d, m), do: max(1, Float.ceil((m - d) \/ (u - d)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78897,"user_id":null,"body":"defmodule Kata do\n  def growing_plant(up_speed, down_speed, desired_height) do\n    growing_per_day = (up_speed - down_speed)\n    growing = Kernel.max(desired_height - up_speed, 0)\n    days = :math.ceil(growing \/ growing_per_day)\n    days + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78898,"user_id":527,"body":"defmodule Kata do\n  def growing_plant(up_speed, down_speed, desired_height) do\n    max(1, ceil((desired_height - down_speed) \/ (up_speed - down_speed)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78899,"user_id":null,"body":"defmodule Kata do\n  @spec growing_plant(pos_integer, pos_integer, pos_integer) :: pos_integer\n  def growing_plant(up_speed, down_speed, desired_height) do\n    growing_plant(up_speed, down_speed, desired_height, 0, 1)\n  end\n  \n  def growing_plant(up_speed, down_speed, desired_height, current_height, days) do\n    current_height = current_height + up_speed\n    case current_height >= desired_height do\n      true -> days\n      false -> growing_plant(up_speed, down_speed, desired_height, current_height - down_speed, days + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78900,"user_id":null,"body":"defmodule Kata do\n  def growing2(up, down, dh, days, height) do\n    with reached = height + up do\n      if reached >= dh do\n        days + 1\n      else\n        growing2(up, down, dh, days+1, reached-down)\n      end\n    end\n  end\n  \n  def growing_plant(up_speed, down_speed, desired_height) do\n    growing2(up_speed, down_speed, desired_height, 0, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78901,"user_id":null,"body":"defmodule Kata do\n  def growing_plant(up_speed, down_speed, desired_height) do\n    max(0, div(desired_height - down_speed - 1, up_speed - down_speed)) + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78902,"user_id":50,"body":"defmodule Kata do\n  def growing_plant(u, d, m) do\n    Enum.max([1, ceil((m - d) \/ (u - d))])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78903,"user_id":null,"body":"defmodule Kata do\n  def growing_plant(up_speed, down_speed, desired_height) do\n    Stream.iterate(1, &(&1 + 1))\n    |> Enum.reduce_while(up_speed, fn x, acc ->\n      if acc >= desired_height, do: {:halt, x}, else: {:cont, acc + up_speed - down_speed}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78904,"user_id":null,"body":"defmodule Kata do\n  def growth(current_growth, day, _up_speed, _down_speed, desired_height) when current_growth >= desired_height, do: day\n\n  def growth(current_growth, day, up_speed, down_speed, desired_height) do\n  (current_growth - down_speed) + up_speed\n    |> growth(day + 1, up_speed, down_speed, desired_height)\n  end\n  \n  def growing_plant(up_speed, down_speed, desired_height) do\n    growth(up_speed, 1, up_speed, down_speed, desired_height)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78905,"user_id":null,"body":"defmodule Kata do\n  def growth(current_growth, day, _up_speed, _down_speed, desired_height) when current_growth >= desired_height, do: day\n\n  def growth(current_growth, day, up_speed, down_speed, desired_height) do\n  (current_growth - down_speed) + up_speed\n    |> growth(day + 1, up_speed, down_speed, desired_height)\n  end\n  \n  def growing_plant(up_speed, down_speed, desired_height) do\n    growth(up_speed, 1, up_speed, down_speed, desired_height)\n  end\nend\n\n# growing_plant(5, 2, 6): Expected 2\n# growing_plant(5, 2, 5): Expected 1\n# growing_plant(100, 10, 910): Expected 10","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5897f94ff3d2143f480000af":[{"id":78906,"user_id":1774,"body":"defmodule Password do\n  \n  def check(password, hashed_password), do: hash(password) === hashed_password\n  \n  defp hash(password), do: :crypto.hash(:sha256, password) |> Base.encode16\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78907,"user_id":1669,"body":"defmodule Password do\n  \n  def check(password, hashed_password) do\n     (:crypto.hash(:sha256, password) |> Base.encode16) == hashed_password\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78908,"user_id":null,"body":"defmodule Password do\n\n  def check(\"\",\"\"), do: false  \n\n  def check(password, hashed_password) do\n       :crypto.hash(:sha256, password) |> Base.encode16 == hashed_password\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78909,"user_id":null,"body":"defmodule Password do\n  @moduledoc\"\"\"\n  Kata - Password\n  \"\"\"\n  @doc\"\"\"\n  The `check\/2` function compares a password with a previously hashed password and returns true, false.\n  \n  I was not aware of a hashing function in Elixir. I found an Erlang function for this here: https:\/\/www.djm.org.uk\/posts\/cryptographic-hash-functions-elixir-generating-hex-digests-md5-sha1-sha2\/\n  \"\"\"\n  @type password_hash() :: String.t\n  @spec check(String.t, password_hash) :: boolean\n  def check(password, hashed_password) do\n     :crypto.hash(:sha256, password) |> Base.encode16 == hashed_password\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78910,"user_id":null,"body":"defmodule Password do\n  def check(password, hashed_password), do: :crypto.hash(:sha256, password) |> Base.encode16() == hashed_password\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78911,"user_id":null,"body":"defmodule Password do\n  \n  def check(password, hashed_password) do\n     hash = :crypto.hash(:sha256, password)\n     \n     :io_lib.format(\"~64.16.0b\", [:binary.decode_unsigned(hash)])\n     |> List.to_string()\n     |> String.upcase() == hashed_password\n     \n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78912,"user_id":null,"body":"defmodule Password do\n  \n  def check(password, hashed_password) do\n    hashed_password ==\n      for <<a::size(4), b::size(4) <- :crypto.hash(:sha256, password)>>, reduce: \"\" do\n        acc -> acc <> Integer.to_string(a, 16) <> Integer.to_string(b, 16)\n      end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78913,"user_id":872,"body":"defmodule Password do\n  def check(password, hashed_password), do: hashed_password == :crypto.hash(:sha256, password) |> Base.encode16\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78914,"user_id":null,"body":"defmodule Password do\n    def check(passwd, hashed), do:\n        :crypto.hash(:sha256, passwd)\n        |> Base.encode16\n        |> Kernel.==(hashed)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78915,"user_id":null,"body":"defmodule Password do\n  \n  def check(password, hashed_password) do\n     :crypto.hash(:sha256, password)\n     |> Base.encode16()\n     |> Kernel.==(hashed_password)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5898761a9c700939ee000011":[{"id":78916,"user_id":null,"body":"defmodule CornerCircle do\n  @d :math.sqrt(2) - 1\n  def corner_circle(r) do\n    Float.round(@d * @d * r, 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78917,"user_id":50,"body":"defmodule CornerCircle do\n  \n  def corner_circle(r) do\n      r * 0.1715728752538097 |> Float.round(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78918,"user_id":53,"body":"defmodule CornerCircle do\n  \n  def corner_circle(r), do: (r * 0.1715728753) |> Float.round(2)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78919,"user_id":null,"body":"defmodule CornerCircle do\n  \n  def corner_circle(r) do\n    r * (3 - :math.sqrt(2) * 2) |> Float.round(2)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5899dc03bc95b1bf1b0000ad":[{"id":78920,"user_id":null,"body":"defmodule Inverter do\n  def invert(list) do\n    list |> Enum.map(&(-&1))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78921,"user_id":964,"body":"defmodule Inverter do\n  def invert(list) do\n  \tlist |> Enum.map(fn(x) -> -x end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78922,"user_id":null,"body":"defmodule Inverter, do: def invert(list), do: Enum.map(list, &(-&1))","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78923,"user_id":null,"body":"defmodule Inverter do\n  def invert(list), do: Enum.map(list, &(-&1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78924,"user_id":null,"body":"defmodule Inverter do\n  def invert([]), do: []\n  def invert([head | tail]), do: [-head | invert(tail)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78925,"user_id":null,"body":"defmodule Inverter do\n  def invert(list), do: Enum.map(list, &-\/1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78926,"user_id":null,"body":"defmodule Inverter do\n  def invert(list) do\n    Enum.reduce(list, [], fn(item, acc) -> [ item * -1 | acc] end)\n    |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78927,"user_id":null,"body":"defmodule Inverter do\n  def invert(list), do: Enum.map(list, fn x -> opposite(x) end)\n  \n  defp opposite(n), do: -n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78928,"user_id":564,"body":"defmodule Inverter do\n  def invert([]), do: []\n  def invert([n|tail]), do: [-n] ++ invert(tail)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78929,"user_id":null,"body":"defmodule Inverter do\n  def invert(list), do: for el <- list, do: -el\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5899e054aa1498da6b0000cc":[{"id":78930,"user_id":738,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n    lst\n    |> Enum.filter(&is_integer\/1)\n    |> Enum.map(&reverse_digits\/1)\n    |> Enum.map(&(-&1))\n  end\n  \n  defp reverse_digits(number) when number < 0, do: -reverse_digits(-number)\n  \n  defp reverse_digits(number) do\n    number\n    |> Integer.digits\n    |> Enum.reverse\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78931,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n    lst\n    |> Enum.filter(&is_integer\/1)\n    |> Enum.map(fn number ->\n      -number |> Integer.digits() |> Enum.reverse() |> Integer.undigits()\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78932,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n      for x <- lst, is_integer(x) do\n        x \n        |> Integer.digits() \n        |> Enum.reverse() \n        |> Integer.undigits()\n        |> Kernel.-()\n      end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78933,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst, acc \\\\ [])\n  \n  def reverse_invert([], acc), do: acc\n  \n  def reverse_invert([h | t], acc) when not is_integer(h), do: reverse_invert(t, acc)\n  \n  def reverse_invert([h | t], acc) when h < 0 do\n      h = -1*h |> Integer.digits |> Enum.reverse |> Integer.undigits\n      reverse_invert(t, acc ++ [h])\n  end\n  \n  def reverse_invert([h | t], acc) do\n      h = h |> Integer.digits |> Enum.reverse |> Integer.undigits\n      reverse_invert(t, acc ++ [-1*h])\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78934,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n    Enum.filter_map(lst, &is_integer\/1, &value\/1)\n  end\n\n  def value(v) do\n    [_, prefix, value] = Regex.run(~r{(-*)(\\d+)}, Integer.to_string(v))\n    prefix <> String.reverse(value)\n      |> String.to_integer\n      |> (fn x -> x * -1 end).()\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78935,"user_id":null,"body":"defmodule ReverseInverter do\n  defp sign_reverse (int) do\n    x = Integer.to_string(int)\n    cond do\n    String.at(x, 0) == \"-\" ->\n      String.replace_prefix(x, \"-\", \"\")\n        |> String.reverse\n        |> String.to_integer\n    true ->\n      \"-\" <> String.reverse(x)\n        |> String.to_integer\n    end\n  end\n\n  def reverse_invert(lst) do\n    # TODO\n    Enum.filter_map(lst, &is_integer\/1, &sign_reverse\/1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78936,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n      \n      Enum.filter_map(lst,(&(is_integer(&1))), &(reverse(&1)))\n  end\n  \n  defp reverse(n) do\n    if n>=0 do\n    -(Integer.to_string(n)|>String.reverse|>String.replace(~r\/0+([^0])\/,\"\\\\1\")|>String.to_integer)\n    else\n      Integer.to_string(-n)|>String.reverse|>String.replace(~r\/0+([^0])\/,\"\\\\1\")|>String.to_integer\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78937,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n    Enum.filter(lst, fn(x) -> is_integer(x) end)\n    |> Enum.map(fn(x) -> item_reverse(x) end)\n  end\n  \n  def item_reverse(number) do\n    isNegative = number < 0\n    reversedNumber = Integer.to_string(number)\n    |> String.slice((isNegative && 1 || 0)..-1)\n    |> String.split(\"\")\n    |> Enum.reverse\n    |> Enum.join\n    |> String.to_integer\n    reversedNumber * (isNegative && 1 || -1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78938,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n    lst\n    |> Enum.filter(&is_integer\/1)\n    |> Enum.map(&reverse_negate\/1)\n  end\n  defp reverse_negate(num) when num < 0, do: reverse(num * -1)\n  defp reverse_negate(num), do: -1 * reverse(num)\n  defp reverse(num) do\n    num\n    |> Integer.digits\n    |> Enum.reverse\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78939,"user_id":null,"body":"defmodule ReverseInverter do\n  def reverse_invert(lst) do\n      lst \n      |> Enum.filter(&is_integer\/1)\n      |> Enum.map(&inverse\/1)\n  end\n  \n  defp inverse(num) do\n    sign = if num < 0 do -1 else 1 end\n    rev = num * sign |> Integer.digits |> Enum.reverse |> Integer.undigits\n    rev * sign * -1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"589d26f3e8afb7532f000078":[{"id":78940,"user_id":null,"body":"defmodule Kata do\n  def n2n(n,k) do\n    mod = floor(:math.pow(10, k))\n    \n    result = :crypto.mod_pow(n, n, mod) |> :binary.decode_unsigned()\n    \n    :io_lib.format(\"~*..0B\", [k, result]) |> List.to_string()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78941,"user_id":null,"body":"defmodule Kata do\n  require Integer\n\n  def n2n(n, k) do\n    tenpow = Enum.reduce(1..k, 1, fn _, acc -> acc * 10 end)\n    n2nb(1, rem(n, tenpow), n, tenpow) |> Integer.to_string() |> String.pad_leading(k, \"0\")\n  end\n\n  def n2nb(res, _, 0, _), do: res\n\n  def n2nb(res, nn, n, tenpow) when Integer.is_odd(n),\n    do: n2nb(rem(res * nn, tenpow), nn, n - 1, tenpow)\n\n  def n2nb(res, nn, n, tenpow), do: n2nb(res, rem(nn * nn, tenpow), div(n, 2), tenpow)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78942,"user_id":null,"body":"defmodule Kata do\n  def n2n(n,k) do\n    r = func(n, n, :math.pow(10, k) |> trunc) |> Integer.to_string\n    l = String.length(r)\n    cond do\n      l < k ->\n        String.duplicate(\"0\", k-l) <> r\n      true ->\n        r\n    end\n  end\n\n  def func(n, 1, _), do: n\n  def func(n, m, k) do\n    s = rem(func(n, div(m, 2), k), k)\n    cond do\n      rem(m, 2) == 0 ->\n        rem(s*s, k)\n      true ->\n        rem(s*s*n, k)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78943,"user_id":470,"body":"defmodule Kata do\n\tdef n2n(n,k) do\n\t\td = pow10(k,1)\n\t\tm = rem(n,d)\n\t\tn |> Integer.digits(2) |> Enum.reverse() |> Enum.with_index() |> forge(d,m,m,k,1)\n\tend\n\t\n\tdefp forge([],_,_,_,k,ix),do: String.pad_leading(\"#{ix}\",k,\"0\")\n\tdefp forge([{b,0}|r],d,m,v,k,ix),do: forge(r,d,m,v,k,(if b == 0,do: ix,else: rem(ix*v,d)))\n\tdefp forge([{0,_}|r],d,m,v,k,ix),do: forge(r,d,m,rem(v*v,d),k,ix)\n\tdefp forge([{1,_}|r],d,m,v,k,ix),do: forge(r,d,m,rem(v*v,d),k,rem(ix*rem(v*v,d),d))\n\t\n\tdefp pow10(0,n),do: n\n\tdefp pow10(c,n),do: pow10(c-1,n*10)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58ac59d21c9e1d7dc5000150":[{"id":78944,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, num) do\n   Enum.chunk(lst, num, num, [])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78945,"user_id":null,"body":"defmodule CodeWars, do: defdelegate make_parts(ls,n), to: Enum, as: :chunk_every","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78946,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, size) do\n    Enum.chunk(lst, size, size, [])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78947,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, size), do: Enum.chunk_every(lst, size)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78948,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, n) do\n    lst\n    |> Enum.chunk_every(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78949,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, chunk) do\n    Enum.chunk_every(lst, chunk)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78950,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, n) do\n    Enum.chunk_every(lst, n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78951,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, n) do\n    lst |> Enum.chunk(n, n, [])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78952,"user_id":null,"body":"defmodule CodeWars do\n  def make_parts(lst, len) when length(lst) > len do\n    [Enum.take(lst,len)] ++ make_parts(Enum.drop(lst, len), len)\n  end\n\n  def make_parts([], _len) do\n    []\n  end\n\n  def make_parts(lst, _len) do\n    [lst]\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78953,"user_id":null,"body":"defmodule CodeWars do\n  @spec make_parts([pos_integer], pos_integer) :: [[pos_integer]]\n  def make_parts(list, chunk) do\n    Enum.chunk_every(list, chunk)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58acfe4ae0201e1708000075":[{"id":78954,"user_id":527,"body":"defmodule Kata do\n  @spec invite_more_women([1 | -1]) :: boolean\n  def invite_more_women(genders), do: Enum.sum(genders) > 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78955,"user_id":527,"body":"defmodule Kata do\n  def invite_more_women(l) do\n    Enum.sum(l) > 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78956,"user_id":645,"body":"defmodule Kata, do: def invite_more_women(l), do: Enum.sum(l) > 0","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78957,"user_id":null,"body":"defmodule Kata do\n  @spec invite_more_women([integer]) :: integer\n  def invite_more_women(l) when is_list(l) do\n    invite_more_women(Enum.sum(l))\n  end\n  \n  @spec invite_more_women(integer) :: boolean\n  def invite_more_women(x) when x > 0, do: true\n  def invite_more_women(x) when x <= 0, do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78958,"user_id":null,"body":"defmodule Kata do\n  def invite_more_women(l) do\n    cond do\n      Enum.sum(l) <= 0 -> false\n      true -> true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78959,"user_id":null,"body":"defmodule Kata do\n  def invite_more_women(l) do\n    (Enum.count l, &(&1 < 0)) < (Enum.count l, &(&1 > 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78960,"user_id":null,"body":"defmodule Kata do\n  def invite_more_women(l) do\n    all = Enum.sum(l)\n\n    if all <= 0 do\n      false\n    else\n      true\n    end\n  end\nend\n\n#testing [-1, -1, -1, 1, 1, 1, -1], true","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78961,"user_id":null,"body":"defmodule Kata do\n  def invite_more_women(l), do:  Enum.sum(l) > 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78962,"user_id":null,"body":"defmodule Kata do\n  def invite_more_women(l) do\n\t\tr = Enum.sum(l)\n\t\tcond do\n\t\t\tr > 0 ->\n\t\t\t\ttrue\n\t\t\tr <= 0 ->\n\t\t\t\tfalse\n\t\tend\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78963,"user_id":null,"body":"defmodule Kata, do: def invite_more_women(ls), do: Enum.sum(ls) > 0","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58aed2cafab8faca1d000e20":[{"id":78964,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, b) do\n    Enum.map(a, fn a -> :math.pow(a, b) end)\n    |> Enum.sum()\n    |> Kernel.-(Enum.sum(a))\n    |> floor\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78965,"user_id":2088,"body":"defmodule NthPower do\n  def modified_sum(l, n) do\n    Enum.reduce l, 0, &(pow(&1, n) - &1 + &2)\n  end\n  \n  defp pow(base, 0), do: 1\n  defp pow(base, exp), do: base * pow(base, exp - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78966,"user_id":564,"body":"defmodule NthPower do\n  def modified_sum(ns, k) do\n    sum = ns |> Enum.sum\n    kth_sum = ns |> Enum.map(fn n -> :math.pow(n, k) end) |> Enum.sum |> Kernel.trunc\n    kth_sum - sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78967,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, n) do\n    Enum.map(a, &round(:math.pow(&1, n)) - &1) |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78968,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, n) do\n      trunc(Enum.reduce(a, 0, &(:math.pow(&1, n) + &2)) - Enum.sum(a))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78969,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, n) do\n\n   num1 = Enum.reduce(\n      a,\n      0,\n      fn x, acc -> :math.pow(x,n) + acc\n    end)\n\n    num2 = Enum.reduce(\n      a,\n      0,\n      fn x, acc -> x + acc\n    end)\n\n    trunc(num1-num2)\n\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78970,"user_id":53,"body":"defmodule NthPower do\n  def modified_sum(arr, p), do: Enum.reduce(Enum.map(arr, &((:math.pow(&1, p) |> round) - &1)), &(&1 + &2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78971,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, n) do\n    power_sum = a |> Enum.map(&:math.pow(&1,n))\n                  |> Enum.sum\n    sum = Enum.sum(a)\n    trunc(power_sum) - trunc(sum)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78972,"user_id":null,"body":"defmodule NthPower do\n  @doc \"\"\"    \n  ## Instructions\n  - First, calculate the sum of each value in the array to the nth power. \n  - Then, subtract the sum of the original array.                                                                        \n                                                                           \n  ## Example                                                                \n    iex> NthPower.modified_sum([1, 2, 3], 3)                                 \n    30               \n  \"\"\"   \n  @spec modified_sum(list(), integer()) :: integer()\n  def modified_sum(array, int) do\n    {square_and_sum_array, sum_array} = \n      Enum.reduce(array, {0,0}, fn x, acc -> \n        {a, b} = acc\n        {a + :math.pow(x, int), x + b}\n      end)\n    \n    Kernel.trunc(square_and_sum_array - sum_array)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78973,"user_id":null,"body":"defmodule NthPower do\n  def modified_sum(a, n) do\n    a \n    |> Stream.map(&:math.pow(&1, n)) \n    |> Enum.sum() \n    |> Kernel.-(Enum.sum(a)) \n    |> trunc()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58afce23b0e8046a960000eb":[{"id":78974,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) when rem(n, 20) != 0, do: _withdraw(n - 50, 1)\n  def withdraw(n), do: _withdraw(n, 0)\n  defp _withdraw(n, n50), do: [n |> div(100), n50, n |> rem(100) |> div(20)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78975,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n), do: withd(n, 0, 0, 0)\n  \n  defp withd(0, a, b, c), do: [a, b, c]\n  defp withd(n, a, b, c) when rem(n, 100) == 0, do: withd(n - 100, a + 1, b, c)\n  defp withd(n, a, b, c) when rem(n,  50) == 0, do: withd(n -  50, a, b + 1, c)\n  defp withd(n, a, b, c) when true,             do: withd(n -  20, a, b, c + 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78976,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) do\n    withdraw(n, [0, 0, 0])\n  end\n  \n  def withdraw(amount, [n100, n50, n20]) when amount > 0 and rem(amount, 100) == 0, do: withdraw(amount - 100, [ n100 + 1, n50, n20 ])\n  def withdraw(amount, [n100, n50, n20]) when amount > 0 and rem(amount, 20) == 0, do: withdraw(amount - 20, [ n100, n50, n20 + 1])\n  def withdraw(amount, [n100, n50, n20]) when amount >= 50, do: withdraw(amount - 50, [ n100, n50 + 1, n20 ])\n\n  def withdraw(amount, _) when amount > 0, do: nil\n  def withdraw(_, res), do: res\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78977,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) do\n    if n < 40 or n > 10_000 do\n      [0, 0, 0]\n    end\n    \n    hundreds = 0\n    fifties = 0\n    twenties = div(n, 20)\n    \n    # you only ever need one 50 dollar bill (and only if the remaining is 10)\n    if rem(n, 20) == 10 do\n      fifties = 1\n      twenties = twenties - 2\n    end\n    \n    if n > 5 do\n      hundreds = div(twenties, 5)\n      twenties = rem(twenties, 5)\n    end\n    \n    [hundreds, fifties, twenties]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78978,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) do\n    bills_by_20 = case rem(n, 50) do\n      0 -> 0\n      10 -> 3\n      20 -> 1\n      30 -> 4\n      40 -> 2\n    end\n    left_n = n - bills_by_20 * 20\n    [div(left_n, 100), div(rem(left_n, 100), 50), bills_by_20]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78979,"user_id":566,"body":"defmodule ATM do\n  def withdraw(n) do\n    IO.puts \"n: #{n}\"\n    div_mod = fn(x, y) -> {div(x, y), rem(x, y)} end\n    {a, n} = div_mod.(n, 100)\n    {b, n} = div_mod.(n, 50)\n    {c, n} = div_mod.(n, 20)\n    cond do\n      n == 0 -> [a, b, c]\n      b > 0 -> [a, b - 1, c + 3]      # Cash in a 50\n      a > 0 -> [a - 1, b + 1, c + 3]  # Cash in a 100\n      true -> [a, b, c]               # Charge 10! :)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78980,"user_id":null,"body":"\ndefmodule ATM do\n    \n    def withdraw(n) do\n        [0, 0, 0]\n        |> get_min(n)\n    end\n\n    defp get_min(list, 0), do: list\n\n    defp get_min([a, b, c], n) when rem(n, 100) == 0, do: get_min([a+1, b, c], n-100)\n\n    defp get_min([a, b, c], n) when rem(n, 50) == 0, do: get_min([a, b+1, c], n-50)\n\n    defp get_min([a, b, c], n) when rem(n, 20) == 0 or true, do: get_min([a, b, c+1], n-20)\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78981,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) do\n    rem = rem(n, 100)\n\n    case rem do\n      10 ->\n        [div(n, 100) - 1, 1, 3]\n\n      30 ->\n        [div(n, 100) - 1, 1, 4]\n\n      _ ->\n        fifty = if rem(rem, 20) == 10, do: 1, else: 0\n        [div(n, 100), fifty, div(rem - 50 * fifty, 20)]\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78982,"user_id":null,"body":"defmodule ATM do\n  def withdraw(n) do\n    max_h = div(n, 100)\n    max_f = rem(n, 100) + 100 |> div(50)\n    max_t = rem(n, 100) + 100 |> div(20)\n  \n  \n    res =\n      for h <- 0..max_h, \n          f <- 0..max_f,\n          t <- 0..max_t,\n          is_valid?(h, f, t, n)\n      do\n        %{h: h, f: f, t: t, b: h + f + t}\n      end\n      |> Enum.min_by(&(&1.b))\n    \n    [res.h, res.f, res.t]\n  end\n\n  defp is_valid?(h, f, t, n) when (h * 100 + f * 50 + t * 20) == n, do: true\n  defp is_valid?(_, _, _, _), do: false\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78983,"user_id":168,"body":"defmodule ATM do\n  def withdraw(n) do\n    if rem(n, 20) == 0 do \n        [div(n, 100), 0, rem(div(n, 20), 5)] \n    else \n        [div(n - 50, 100), 1, rem(div(n - 50, 20), 5)] \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58c9322bedb4235468000019":[{"id":78984,"user_id":null,"body":"defmodule Solution do\n  def is_very_even(number) when number < 10, do: rem(number, 2) == 0\n  def is_very_even(number), do: number |> Integer.digits() |> Enum.sum() |> is_very_even()\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78985,"user_id":149,"body":"defmodule Solution do\n  def is_very_even(n) do\n    n == 0 || rem(rem(n - 1, 9), 2) == 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78986,"user_id":527,"body":"defmodule Solution do\n  require Integer\n\n  def isVeryEven(number) when Integer.is_odd(number), do: false\n  def isVeryEven(number) when number in [0, 2, 4, 6, 8], do: true\n  def isVeryEven(number), do: isVeryEven(Enum.sum(Integer.digits(number)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78987,"user_id":53,"body":"defmodule Solution do\n  def is_very_even(n), do: rem(rem(n-1,9),2)!=0\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78988,"user_id":null,"body":"defmodule Solution do\n  def is_very_even(number) do\n    if number < 10, do: rem(number, 2) == 0, else: Integer.digits(number)|> Enum.sum |> is_very_even\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78989,"user_id":null,"body":"defmodule Solution do\n  import Integer, only: [is_even: 1]\n  \n  @spec is_very_even(pos_integer) :: boolean\n  def is_very_even(number) when number < 10, do: is_even(number)\n  def is_very_even(number) when number >= 10 do\n    number\n    |> Integer.digits()\n    |> Enum.sum()\n    |> is_very_even()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78990,"user_id":null,"body":"require Integer\n\ndefmodule Solution do\n  def is_very_even(number) do\n    if number < 10 do\n      Integer.is_even(number)\n    else\n      is_very_even(Enum.sum(Integer.digits(number)))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78991,"user_id":null,"body":"defmodule Solution do\n  def is_very_even(number) do\n    number == 0 || rem(rem(number - 1, 9), 2) == 1\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78992,"user_id":null,"body":"defmodule Solution do\n  require Integer\n  def is_very_even(number) when number >= 0 and number <= 9 do\n    if Integer.is_even(number), do: true, else: false\n  end\n  def is_very_even(number) do\n    number\n    |> Integer.digits\n    |> Enum.sum\n    |> is_very_even\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78993,"user_id":null,"body":"defmodule Solution do\n  def is_very_even(x) do\n    a = if_count(x)\n    rem(a,2) == 0\n  end\n  defp if_count(x) do\n    a = x \n    |> Integer.digits\n    |> Enum.sum\n   if String.length(Integer.to_string(a)) == 1, do:\n    a,\n   else:\n    if_count(a)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58ce8725c835848ad6000007":[{"id":78994,"user_id":527,"body":"defmodule potatoes do\n\n  @spec potatoes(integer, integer, integer) :: integer\n  def potatoes(p0, w0, p1) do\n    div(w0 * (100 - p0), (100 - p1))\n  end\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78995,"user_id":527,"body":"defmodule potatoes do\n\n  @spec potatoes(non_neg_integer, non_neg_integer, non_neg_integer) :: non_neg_integer\n  def potatoes(p0, w0, p1) do\n    div(w0 * (100 - p0), (100 - p1))\n  end\n    \nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78996,"user_id":null,"body":"defmodule potatoes do\n\n  @spec potatoes(integer, integer, integer) :: integer\n  def potatoes(initial_humidity, initial_weight, final_humidity) do\n    num = 100 - initial_humidity\n    den = 100 - final_humidity\n        \n    trunc( initial_weight * (num\/den) )\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78997,"user_id":null,"body":"defmodule potatoes do\n\n    def potatoes(initial_humidity, initial_weight, final_humidity) do\n     \tnum = 100 - initial_humidity\n      den = 100 - final_humidity\n      \n      initial_weight * (num\/den) \n        |> Float.floor\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78998,"user_id":null,"body":"defmodule potatoes do\n\n    @spec potatoes(integer, integer, integer) :: integer\n    def potatoes(p0, w0, p1) do\n       dry_mass = w0 \/ 100 * (100 - p0)\n       \n       dry_mass * 100 \/ (100 - p1)\n       |> Kernel.trunc()\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":78999,"user_id":null,"body":"defmodule potatoes do\n\n    @spec potatoes(integer, integer, integer) :: integer\n    def potatoes(p0, w0, p1) do\n       trunc(w0*(100-p0)\/(100-p1))\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79000,"user_id":null,"body":"defmodule potatoes do\n\n    @spec potatoes(integer, integer, integer) :: integer\n    def potatoes(p0, w0, p1), do: div(w0*(100 - p0), (100 - p1))\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79001,"user_id":null,"body":"defmodule potatoes do\n    @moduldoc false\n    \n    @doc \"\"\"\n    ## \u0424\u0443\u043d\u043a\u0446\u0438\u044f potatoes\/3 \n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0443 \u043a\u0430\u0440\u0442\u043e\u0444\u0435\u043b\u044f w1 \u043f\u043e\u0441\u043b\u0435 \u0441\u0443\u0448\u043a\u0438 \u0443\u0441\u0435\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043e \u0446\u0435\u043b\u043e\u0433\u043e\n    \n    ## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n    p0 - \u0432\u043b\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0441\u0443\u0448\u043a\u0438\n    w0 - \u043c\u0430\u0441\u0441\u0430 \u0434\u043e \u0441\u0443\u0448\u043a\u0438\n    p1 - \u0432\u043b\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0441\u0443\u0448\u043a\u0438\n    \n    ## \u041f\u0440\u0438\u043c\u0435\u0440\n    iex> potatoes.potatoes(99, 100, 98)\n    50    \n    \"\"\"\n    \n    @spec potatoes(integer, integer, integer) :: integer\n    \n    def potatoes(p0, w0, p1) do\n\n       k = (100-p1)\/(100-p0)\n       (w0\/k) |> Float.floor\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79002,"user_id":492,"body":"defmodule potatoes do\n\n    @spec potatoes(integer, integer, integer) :: integer\n    def potatoes(p0, w0, p1) do\n       round(Float.floor(w0 * (100.0 - p0) \/ (100.0 - p1)))\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79003,"user_id":492,"body":"defmodule potatoes do\n\n    @spec potatoes(integer, integer, integer) :: integer\n    def potatoes(p0, w0, p1) do\n       round(Float.floor(w0 * (100.0 - p0) \/ (100.0 - p1)))\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58f5c63f1e26ecda7e000029":[{"id":79004,"user_id":null,"body":"defmodule Wave do\n  def wave(\"\"), do: []\n  def wave(str) do\n    codepoints = String.codepoints(str)\n    codepoints\n    |> Enum.with_index()\n    |> Enum.map(&wave(&1, codepoints))\n    |> Enum.filter(&is_binary\/1)\n  end\n  def wave({\" \", _}, _), do: nil\n  def wave({char, index}, codepoints), do: List.replace_at(codepoints, index, String.upcase(char)) |> Enum.join()\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79005,"user_id":470,"body":"defmodule Wave do\n\tdef wave(s),do: ix(s,\"\")\n\tdefp ix(\"\",_),do: []\n\tdefp ix(<<32>><>s,z),do: ix(s,z<><<32>>)\n\tdefp ix(<<ch>><>s,z),do: [z<><<ch-32>><>s | ix(s,z<><<ch>>)]\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79006,"user_id":null,"body":"defmodule Wave do\n  def wave(\"\"), do: []\n\n  def wave(str) when is_binary(str) do\n  String.duplicate(str, String.length(str) )\n  |> String.graphemes()\n  |> Enum.map_every(String.length(str)+1, fn x -> String.capitalize(x) end)\n  |> Enum.chunk_every(String.length(str))\n  |> Enum.map(fn x -> Enum.join(x, \"\") end)\n  |> Enum.filter( fn x -> Regex.match?(~r\/[A-Z]\/, x) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79007,"user_id":null,"body":"defmodule Wave do\n  def wave(str) do\n      chars = String.graphemes(str)\n      chars |> Enum.with_index |> Enum.reduce([], fn {value, index}, acc -> \n        if value !== \" \" do\n          acc ++ [List.to_string(List.replace_at(chars, index, String.upcase(value)))]\n        else\n          acc\n        end\n      end)\n  end  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79008,"user_id":null,"body":"defmodule Wave do\n  def wave(\"\") do\n    []\n  end\n  \n  def wave(str) do\n    str\n      |> prepare_spectators\n      |> make_spectators_yelling\n      |> sync_spectators\n      |> kick_off_laziest\n\n  end\n  \n  defp prepare_spectators(str) do\n    str\n      |> String.downcase\n      |> String.split(\"\", trim: true)\n      |> Enum.with_index(0)\n      |> Enum.map(fn {k,v}->{v,k} end)\n      |> Map.new\n  end\n  \n  defp make_spectators_yelling(spectators) do\n    Enum.map(\n      spectators,\n      fn tuple ->\n        {key, _} = tuple\n        Map.update!(spectators, key, fn x -> String.capitalize(x) end)\n      end\n    )\n  end\n  \n  defp sync_spectators(spectators) do\n    Enum.map(spectators, fn x -> Enum.join(Map.values(x)) end)\n  end\n  \n  defp kick_off_laziest(spectators) do\n    Enum.filter(\n      spectators,\n      fn x ->\n        Enum.any?(\n          String.split(x, \"\", trim: true),\n          fn y -> String.match?(y, ~r\/^[[:upper:]]+$\/) end\n        )\n      end\n    )\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79009,"user_id":1722,"body":"defmodule Wave do\n  def wave(\"\"), do: []\n  \n  def wave(str) do\n    l = String.length(str)\n    for i <- (0..l-1), String.at(str, i) =~ ~r\/\\w\/ do\n      {left, right} = String.split_at(str, i)\n      \"#{left}#{String.capitalize(right)}\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79010,"user_id":null,"body":"defmodule Wave do\n  def wave(str) do\n    for {char, i} <- str |> String.graphemes |> Enum.with_index,\n        char |> String.match?(~r\/[^ ]\/) do\n      {left, right} = String.split_at(str, i)\n      \"#{left}#{String.capitalize(right)}\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79011,"user_id":null,"body":"defmodule Wave do\n  def wave(\"\"), do: []\n  def wave(str) do\n    split = String.split_at(str, 1)\n    wave = for s <- wave(elem(split, 1)), do: elem(split, 0) <> s\n    if elem(split, 0) == \" \" do\n      wave\n    else\n      [String.upcase(elem(split, 0)) <> elem(split, 1)] ++ wave\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79012,"user_id":null,"body":"defmodule Wave do\n  def wave(\"\"), do: []\n\n  def wave(str) do\n    arr = String.codepoints(str)\n\n    for index <- 1..String.length(str) do\n      List.replace_at(arr, index - 1, Enum.at(arr, index - 1) |> String.upcase())\n      |> Enum.join()\n    end\n    |> Enum.uniq()\n    |> Enum.filter(&(&1 != str))\n  end\nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79013,"user_id":null,"body":"defmodule Wave do\n  def wave(str) do\n    wave_assist(str, String.length(str))\n  end\n  \n  def wave_assist(_str, 0), do: []\n  def wave_assist(str, index) do \n    {first, last} = String.split_at(str, String.length(str) - index)\n    case String.first(last) do\n    \" \" -> wave_assist(str, index - 1)\n      _ -> [ first <> String.capitalize(last) | wave_assist(str, index - 1) ]\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58f5e53e663082f9aa000060":[{"id":79014,"user_id":53,"body":"defmodule BijectiveBinary do\n    def convert_to_int(s) do\n        String.to_integer(\"1\" <> String.replace(String.replace(s, \"1\", \"0\"), \"2\", \"1\"), 2) - 1\n    end\n    \n    def convert_from_int(n) do\n        String.replace(String.replace(String.slice(Integer.to_string(n + 1, 2), 1..-1), \"1\", \"2\"), \"0\", \"1\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79015,"user_id":null,"body":"defmodule BijectiveBinary do\n  def convert_to_int(s) do\n    Enum.reduce(String.graphemes(s), 0, fn c, acc -> acc * 2 + String.to_integer(c) end)\n  end\n\n  def convert_from_int(n) do\n    if n > 0 do\n      d = 2 - rem(n, 2)\n      \"#{convert_from_int(div(n - d, 2))}#{d}\"\n    else\n      \"\"\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79016,"user_id":null,"body":"defmodule BijectiveBinary do\n  def convert_to_int(\"\") do\n    0\n  end\n\n  def convert_to_int(str) do\n    str\n    |> String.graphemes()\n    |> Enum.reduce(\n      0,\n      fn\n        \"1\", acc -> acc * 2 + 1\n        \"2\", acc -> acc * 2 + 2\n      end\n    )\n  end\n\n  def convert_from_int(n) do\n    do_convert(n, [])\n  end\n\n  defp do_convert(0, ret), do: ret |> Enum.join(\"\")\n\n  defp do_convert(n, ret) do\n    power = length(ret) + 1\n    tem1 = :math.pow(2,power)|> trunc\n    if rem(n, tem1 ) == 0 do\n      do_convert(n - tem1, [2 | ret])\n    else\n      do_convert(n - div(tem1,2), [1 | ret])\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79017,"user_id":null,"body":"defmodule BijectiveBinary do\n  def convert_to_int(\"\"), do: 0\n  def convert_to_int(s) do\n    s\n    |> String.to_integer\n    |> Integer.digits\n    |> Enum.reverse\n    |> zip\n    |> to_int\n    |> trunc\n  end\n\n  def zip(list) do\n    Enum.zip(list, 0..length(list)-1)\n  end\n\n  def to_int(list) do\n    list\n    |> Enum.reduce(0, fn {val, n}, sum ->\n      val * :math.pow(2, n) + sum\n    end)\n  end\n\n  def convert_from_int(0), do: \"\"\n  def convert_from_int(n) do\n    n\n    |> digits\n    |> to_convert(n)\n    |> Integer.undigits\n    |> Integer.to_string\n  end\n\n  def digits(n), do: trunc(:math.log2(n + 1))\n\n  def to_convert(1, 1), do: [1]\n  def to_convert(1, 2), do: [2]\n  def to_convert(k, n) do\n    cond do\n      n - 2 * :math.pow(2, k-1) >= surplus(k-2) ->\n        [2 | to_convert(k-1, n - 2 * :math.pow(2, k-1) |> trunc)]\n      true ->\n        [1 | to_convert(k-1, n - :math.pow(2, k-1) |> trunc)]\n    end\n  end\n\n  def surplus(k) do\n    0..k\n    |> Enum.reduce(0, fn x, sum ->\n      :math.pow(2, x) + sum\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79018,"user_id":null,"body":"defmodule BijectiveBinary do\n    def convert_to_int(s), do: s |> String.to_charlist |> Enum.reduce(0, &(2 * &2 + &1 - 48))\n    \n    defp helper(0, s), do: s\n    defp helper(n, s) when rem(n, 2) == 0, do: helper(div(n, 2) - 1, \"2\" <> s)\n    defp helper(n, s), do: helper(div(n, 2), \"1\" <> s)\n\n    def convert_from_int(n), do: helper(n, \"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79019,"user_id":470,"body":"defmodule BijectiveBinary do\n\tdef convert_to_int(s),do: cti(String.to_charlist(String.reverse(s)),1,0)\n\tdef convert_from_int(n),do: cfi(n,2,1) |> String.reverse()\n\t\n\tdefp cti([b|r],p,q),do: cti(r,p*2,q+p*(b-48))\n\tdefp cti([],_,q),do: q\n\t\n\tdefp cfi(0,_,_),do: \"\"\n\tdefp cfi(n,p,c) do\n\t\tmn = rem(n,p) |> div(c)\n\t\tent = if mn == 0,do: 2,else: mn\n\t\t<<ent+48>> <> cfi(n-div(ent*p,2),p*2,c*2)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"58f6f87a55d759439b000073":[{"id":79020,"user_id":null,"body":"defmodule NegationValue do\n  import Integer, only: [is_even: 1, is_odd: 1]\n  \n  @moduledoc\"\"\"\n  NegationValue\n  \"\"\"\n  @doc\"\"\"\n  The `negation_value\/2` function applys a string of \"!\" marks to a value to determine if it makes the value true or false.\n  \n  ## Params\n  1. str: string\n  2. val: any value\n  \n  ## Examples\n    iex> negation_value(\"!!!\", [])\n    false\n    \n    iex> negation_value(\"!\", false)\n    true\n    \n  ## Solution\n  If the amount of \"!\" marks in the string is even, then the value must be double negated and returned.\n  If the amount of \"!\" marks is odd, then the value must be negated once and returned.\n  \"\"\"\n  \n  @spec negation_value(String.t, any) :: boolean\n  def negation_value(str, val) when is_even(byte_size(str)), do: !!val\n  def negation_value(str, val) when is_odd(byte_size(str)), do: !val\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79021,"user_id":null,"body":"defmodule NegationValue do\n  require Integer\n  def negation_value(str, val) do\n    if Integer.is_even(String.length(str)), do: !!val, else: !val\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79022,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value(str, val) do\n    case rem(String.length(str), 2) do\n      0 -> !!val\n      1 -> !val\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79023,"user_id":null,"body":"defmodule NegationValue do\n  require Integer\n  \n  def negation_value(negations, value) do\n    case Integer.is_even(String.length(negations)) do\n      true -> get_boolean(value)\n      false -> get_boolean(!value)\n    end\n  end\n  \n  def get_boolean(value) do\n    if value do\n      true\n    else\n      false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79024,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value(str, val) do\n    cond do\n    rem(String.length(str),2) == 1 and is_boolean(val) -> !val\n    rem(String.length(str),2) == 0 and is_boolean(val) -> val\n    rem(String.length(str),2) == 1  -> false\n    rem(String.length(str),2) == 0  -> true\n    end\n  end\nend\n\n# testing(\"!!!!!!\",123, true)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79025,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value([\"!\"], val), do: !val\n  def negation_value([head | tail], val), do: !negation_value(tail, val)\n  def negation_value(str, val) do\n    list = String.codepoints(str)\n    negation_value(list, val)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79026,"user_id":null,"body":"defmodule NegationValue do\n    def negation_value(s,b), do: if rem(byte_size(s),2) > 0, do: !b, else: !!b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79027,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value(str, val) do\n    count = \n    str\n    |> String.graphemes()\n    |> Enum.count()\n    \n    if rem(count, 2) == 0 do\n    val(val)\n    else\n    reverse_val(val)\n    end\n  end\n  \n  def reverse_val(true), do: false\n  def reverse_val(false), do: true\n  def reverse_val(any), do: false\n  def val(false), do: false\n  def val(any), do: true\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79028,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value(str, value) when rem(byte_size(str), 2) == 0 do\n    !!value\n  end\n  def negation_value(_, value) do\n    !value\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79029,"user_id":null,"body":"defmodule NegationValue do\n  def negation_value(str, value) when rem(byte_size(str), 2) == 0 do\n    is_truthy?(value)\n  end\n  def negation_value(_, value) do\n    !is_truthy?(value)\n  end\n  \n  defp is_truthy?(false), do: false\n  defp is_truthy?(nil), do: false\n  defp is_truthy?(_), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"591aa1752afcb02fa300002a":[{"id":79030,"user_id":492,"body":"defmodule TM do\n  defp aux(k) do \n    if (k == ?0) do ?1 else ?0 end\n  end\n  def thue(num) do\n    Stream.iterate('0', fn(k) -> k ++ Enum.map(k, &aux(&1)) end)\n    |> Enum.find(&(length(&1) >= num))\n    |> to_string\n    |> String.slice(0..num - 1)    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79031,"user_id":null,"body":"defmodule TM do\n  def thue(n) do\n    Stream.iterate([0], fn seq -> seq ++ Enum.map(seq, &(&1 == 0 && 1 || 0)) end)\n    |> Enum.find(&(length(&1) >= n))\n    |> Enum.take(n)\n    |> Enum.join()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79032,"user_id":null,"body":"defmodule TM do\n  def thue(n, seq \\\\ \"0\", comp \\\\ \"1\") do\n    if String.length(seq) < n do\n      thue(n, seq <> comp, comp <> seq)\n    else\n      String.slice(seq, 0, n)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79033,"user_id":null,"body":"defmodule TM do\n  def thue(n, seq \\\\ [0]) when length(seq) > n, do: Enum.take(seq, n) |> Enum.join()\n  def thue(n, seq), do: thue(n, seq ++ Enum.map(seq, &(&1 == 0 && 1 || 0)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79034,"user_id":null,"body":"defmodule TM do\n  require Integer\n  \n  def thue(n) do\n    for x <- 0..n-1 do\n      if Integer.is_even(Enum.sum(Integer.digits(x, 2))), do: 0, else: 1\n    end\n    |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79035,"user_id":1789,"body":"defmodule TM do\n  def thue(n) do\n    Stream.iterate('0', fn x -> x ++ Enum.map(x, fn ?0 -> ?1; _ -> ?0 end) end)\n    |> Enum.find(&(length(&1)>=n))\n    |> to_string\n    |> String.slice(0..n-1)    \n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79036,"user_id":null,"body":"defmodule TM do\n\n  def thue(n) do\n    Stream.iterate([?0], fn bits -> \n      Enum.map(bits, fn bit -> if bit == ?0, do: ?1, else: ?0 end) ++ bits\n   end)\n    |> Enum.find(&(length(&1) >= n))\n    |> Enum.reverse\n    |> to_string\n    |> String.slice(0..n - 1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79037,"user_id":null,"body":"defmodule TM do\n  def thue(n, t) when length(t) > n do\n    t\n    |> Enum.take(n)\n    |> Enum.join\n  end\n  def thue(n, t \\\\ [\"0\"]) do\n    thue(n, t ++ Enum.map(t, &(if &1 == \"0\", do: \"1\", else: \"0\")))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79038,"user_id":null,"body":"defmodule TM do\n  def thuegen(str, n) do\n    if String.length(str) < n do\n      thuegen(\n        str <>\n          String.replace(str, ~r\/.\/, fn\n            \"0\" -> \"1\"\n            _ -> \"0\"\n          end),\n        n\n      )\n    else\n      String.slice(str, 0, n)\n    end\n  end\n\n  def thue(n), do: thuegen(\"0\", n)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79039,"user_id":null,"body":"defmodule TM do\n  def thue(n), do: thue(n, [0], [0], [])\n  def thue(n, [], l1, l2), do: thue(n, l1 ++ Enum.reverse(l2))\n  def thue(n, [h|t], l1, l2) when h == 0, do: thue(n, t, l1, [1|l2])\n  def thue(n, [h|t], l1, l2) when h == 1, do: thue(n, t, l1, [0|l2])\n\n  def thue(n, list) do\n    cond do\n      length(list) >= n ->\n        Enum.take(list, n) |> Enum.join\n      true ->\n        thue(n, list, list, [])\n      end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5921c0bc6b8f072e840000c0":[{"id":79040,"user_id":null,"body":"defmodule Kata do\n\n  def sequence_classifier(seq), do: classify(seq)\n\n  defp classify(seq), do: classify(seq, [5, 3, 4, 1, 2, 0])\n\n  defp classify([_], codes), do: hd(codes)\n  defp classify([h1, h2 | tail], codes) when h1 == h2, do: classify([h2 | tail], delete_seq(codes, [1, 3]))\n  defp classify([h1, h2 | tail], codes) when h1 < h2, do: classify([h2 | tail], delete_seq(codes, [3, 4, 5]))\n  defp classify([h1, h2 | tail], codes) when h1 > h2, do: classify([h2 | tail], delete_seq(codes, [1, 2, 5]))\n\n  defp delete_seq(seq, []), do: seq\n  defp delete_seq(seq, [head | tail]), do: delete_seq(List.delete(seq, head), tail)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79041,"user_id":null,"body":"defmodule Kata do\n  def sequence_classifier(arr) do\n    incdec =\n      Enum.chunk_every(arr, 2, 1, :discard)\n      |> Enum.map(fn [a, b] -> a - b end)\n\n    cond do\n      Enum.all?(incdec, &(&1 == 0)) -> 5\n      Enum.all?(incdec, &(&1 > 0)) -> 3\n      Enum.all?(incdec, &(&1 < 0)) -> 1\n      Enum.all?(incdec, &(&1 >= 0)) -> 4\n      Enum.all?(incdec, &(&1 <= 0)) -> 2\n      true -> 0\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79042,"user_id":null,"body":"defmodule Kata do\n    import Enum\n\n    def sequence_classifier(arr) do\n        cond do\n          arr |> uniq |> length === 1 -> 5\n          arr |> uniq |> length < arr |> length && arr |> uniq == arr |> uniq |> sort -> 2\n          arr |> uniq |> length < length(arr) && arr |> uniq == arr |> uniq |> sort |> reverse -> 4\n          arr |> sort |> reverse == arr -> 3\n          arr |> sort == arr -> 1\n          true -> 0\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79043,"user_id":53,"body":"defmodule Kata do\n  def sequence_classifier(arr), do: observe(arr,false,false,false)\n  defp observe([],i,d,q), do: render(i,d,q)\n  defp observe([_],i,d,q), do: render(i,d,q)\n  defp observe([x,y|xs],i,d,q) when x < y, do: observe([y|xs],true,d,q)\n  defp observe([x,y|xs],i,d,q) when x > y, do: observe([y|xs],i,true,q)\n  defp observe([x,y|xs],i,d,q), do: observe([y|xs],i,d,true)\n  defp render(true,true,_), do: 0\n  defp render(true,_,false), do: 1\n  defp render(true,_,_), do: 2\n  defp render(_,true,false), do: 3\n  defp render(_,true,_), do: 4\n  defp render(_,_,_), do: 5\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79044,"user_id":null,"body":"defmodule Kata do\n  def sequence_classifier(arr) do\n\n     st = check_strictness(length(Enum.uniq(arr)), length(arr))\n     ord = check_order(st, arr)\n\n    evaluate(ord, st)\n  end\n  \n  defp check_strictness(1, _), do: :const\n  defp check_strictness(l1, l2) when l1 == l2, do: :strict\n  defp check_strictness(_, _), do: :loose\n  \n  defp check_order(strict, _) when strict == :const, do: :const\n  defp check_order(_, arr) do\n    chunked = arr |> Enum.uniq |> Enum.chunk_every(2, 1, :discard)\n    cond do \n      Enum.all?(chunked, fn [v1, v2] -> v2 > v1 end) -> :inc\n      Enum.all?(chunked, fn [v1, v2] -> v2 < v1 end) -> :dec\n      true -> :unordered\n    end\n  end\n\n  \n  defp evaluate(:unordered, _), do: 0\n  defp evaluate(:inc, :strict), do: 1\n  defp evaluate(:inc, :loose), do: 2\n  defp evaluate(:dec, :strict), do: 3\n  defp evaluate(:dec, :loose), do: 4 \n  defp evaluate(_, :const), do: 5\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79045,"user_id":null,"body":"defmodule Kata do\n    def sequence_classifier([h|_] = arr) do\n        cond do\n          Enum.uniq(arr) == [h] ->\n            5\n          Enum.sort(arr) == arr ->\n            if arr == Enum.uniq(arr), do: 1, else: 2\n          Enum.sort(arr) |> Enum.reverse == arr ->\n            if arr == Enum.uniq(arr), do: 3, else: 4\n          true -> 0\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79046,"user_id":null,"body":"defmodule Kata do\n    def sequence_classifier([n|ls]) do\n        case Enum.reduce(ls, {n,Enum.to_list(0..5)}, fn b,{a,r} ->\n            r = cond do\n                a > b  -> r -- [1,2,5]\n                a < b  -> r -- [3,4,5]\n                a == b -> r -- [1,3]\n            end\n            {b,r}\n        end) |> elem(1) do\n            [0] -> 0\n            [0,1,2] -> 1\n            [0,2] -> 2\n            [0,3,4] -> 3\n            [0,4] -> 4\n            [0,2,4,5] -> 5\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79047,"user_id":null,"body":"defmodule Kata do\n    def sequence_classifier(arr) do\n      Enum.zip(arr, tl(arr))\n      |> Enum.reduce(nil, fn {x, y}, prev ->\n        cmp =\n          cond do\n            x < y -> 1\n            x == y -> 5\n            x > y -> 3\n          end\n            \n        case {prev, cmp} do\n          {nil, c} -> c\n          {1, 5} -> 2\n          {1, 3} -> 0\n          {5, 1} -> 2\n          {5, 3} -> 4\n          {3, 1} -> 0\n          {3, 5} -> 4\n          {2, 3} -> 0\n          {4, 1} -> 0\n          {a, _} -> a\n        end\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79048,"user_id":527,"body":"defmodule Kata do\n  def sequence_classifier(xs) do\n    lt_eq_gt = xs\n      |> Stream.chunk_every(2, 1, :discard)\n      |> Enum.reduce({false, false, false}, fn [x, y], {lt, eq, gt} ->\n        {lt or x < y, eq or x == y, gt or x > y}\n      end)\n    case lt_eq_gt do\n      {true, _, true} -> 0\n      {true, false, false} -> 1\n      {true, true, false} -> 2\n      {false, false, true} -> 3\n      {false, true, true} -> 4\n      {false, true, false} -> 5\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79049,"user_id":470,"body":"defmodule Kata do\n\tdef sequence_classifier([h|r]),do: ix(r,h,{1,1,1,1,1})\n\t\n\tdefp ix(_,_,{0,0,0,0,0}),do: 0\n\tdefp ix([h|r],n,{a,b,c,d,e}) do\n\t\tcond do\n\t\t\th > n -> ix(r,h,{a,b,0,0,0})\n\t\t\th < n -> ix(r,h,{0,0,c,d,0})\n\t\t\th == n -> ix(r,h,{0,b,0,d,e})\n\t\tend\n\tend\n\t\n\tdefp ix([],_,{1,_,0,0,0}),do: 1\n\tdefp ix([],_,{0,1,0,0,0}),do: 2\n\tdefp ix([],_,{0,0,1,_,0}),do: 3\n\tdefp ix([],_,{0,0,0,1,0}),do: 4\n\tdefp ix([],_,{_,_,_,_,1}),do: 5\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"592e830e043b99888600002d":[{"id":79050,"user_id":null,"body":"defmodule DigitalCypher do\n  @spec encode(String.t(), non_neg_integer()) :: [pos_integer()]\n  def encode(message, key) do\n    to_charlist(message)\n    |> Enum.map(& &1 - 96)\n    |> Enum.zip(Integer.digits(key)\n    |> Stream.cycle)\n    |> Enum.map(fn {a, b} -> a + b end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79051,"user_id":null,"body":"defmodule DigitalCypher do\n  @az for c <- ?a..?z, do: <<c>> \n  @key @az |> Enum.with_index(1) |> Enum.into(%{})\n  \n  @spec encode(String.t(), non_neg_integer()) :: [pos_integer()]\n  def encode(message, key) do\n    message_length = message |> to_string |> String.length()\n    key_array = Integer.digits(key) \n    new_key = Stream.cycle( key_array) |> Enum.take(message_length)\n    \n    message\n    |> to_string()\n    |> String.graphemes()\n    |> Enum.map(fn x -> @key[x] end)\n    |> Enum.zip(new_key)\n    |> Enum.map(fn {x,y} -> x + y end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79052,"user_id":null,"body":"defmodule DigitalCypher do\n  \n  @spec encode(String.t(), non_neg_integer()) :: [pos_integer()]\n  def encode(message, key) do\n    numbers = message |> to_charlist |> Enum.map(&(&1 - 96))\n    digits = key |> Integer.digits |> Stream.cycle |> Enum.take(length(numbers))\n    \n    numbers |> Enum.zip(digits) |> Enum.map(fn {n, d} -> n + d end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5933a1f8552bc2750a0000ed":[{"id":79053,"user_id":1624,"body":"defmodule NthEven do\n  def nth_even(n) do\n    n*2-2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79054,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n), do: (n - 1) * 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79055,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n), do: (n*2)-2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79056,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n), do: n + n - 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79057,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n) do\n    # your code here\n    (n * 2)- 2 \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79058,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n) do\n    (n-1) * 2\n  end\nend\n\n\n# testing(10, 18)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79059,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(1), do: 0\n  def nth_even(n), do: (n-1)*2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79060,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(0), do: 0\n  def nth_even(n), do: 2 * (n - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79061,"user_id":null,"body":"defmodule NthEven do\n  \n  def nth_even(1), do: 0\n  def nth_even(2), do: 2\n  def nth_even(3), do: 4\n  def nth_even(n) do\n    2*n-2\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79062,"user_id":null,"body":"defmodule NthEven do\n  def nth_even(n), do: 2 * n - 2\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59342039eb450e39970000a6":[{"id":79063,"user_id":527,"body":"defmodule OddCount do\n  def odd_count(n) do\n    div(n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79064,"user_id":76,"body":"defmodule OddCount do\n  def odd_count(n) do\n    floor(n \/ 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79065,"user_id":null,"body":"defmodule OddCount do\n  def odd_count(n) do\n    trunc(n \/ 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79066,"user_id":645,"body":"defmodule OddCount, do: def odd_count(n), do: floor(n \/ 2)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79067,"user_id":null,"body":"use Bitwise\ndefmodule OddCount do\n  def odd_count(n) do\n    n >>> 1\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79068,"user_id":null,"body":"defmodule OddCount do\n  def odd_count(n) do\n    :math.floor(n \/ 2)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79069,"user_id":null,"body":"defmodule OddCount do\n  def odd_count(n) do\n    # your code here\n    div(n, 2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79070,"user_id":null,"body":"defmodule OddCount do\n  def odd_count(n) do\n    # your code here\n    Float.floor(n\/2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79071,"user_id":null,"body":"defmodule OddCount do\n  @spec odd_count(integer) :: integer\n  def odd_count(n), do: floor(n \/ 2)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79072,"user_id":null,"body":"defmodule OddCount do\n  def odd_count(n) do\n      result = div(n,2)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"593c9175933500f33400003e":[{"id":79073,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n) do\n        Stream.iterate(n, &(&1 + n)) |> Enum.take(m)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79074,"user_id":527,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    for i <- 1..m, do: i * n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79075,"user_id":53,"body":"defmodule Multiples do\n  def multiples(m, n), do: Enum.map(1..m, fn i -> i * n end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79076,"user_id":null,"body":"defmodule Multiples do\n  @moduledoc\"\"\"\n  KATA - Multiples\n  \"\"\"\n  @doc\"\"\"\n  The `multiples\/2` function returns a specified amount of multiples of a number.\n  \n  ## Params\n  1. multiplier: positive integer\n  2. number: number (could be an integer, negative integer or float)\n  \n  ## Example\n    iex> Multiples.multiples(3, 5)\n    [5, 10, 15]\n  \"\"\"\n  @spec multiples(pos_integer, number) :: [number]\n  def multiples(multiplier, number), do: for x <- 1..multiplier, do: x * number\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79077,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    Enum.to_list(0..m-1) |> Enum.map(fn x -> (x+1) * n end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79078,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    list = []\n    loop(m, n, list)\n  end\n  \n  def loop(m, n, list) when m > 0 do\n    list = list ++ [n * m]\n    m = m - 1\n    loop(m, n, list)\n  end\n  \n  def loop(m, n, list) when m == 0, do: Enum.reverse(list)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79079,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n), do: Enum.map(1..m, &(n * &1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79080,"user_id":250,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    1..m\n    |> Enum.map(fn x -> x * n end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79081,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    1..m |> Enum.map(&(n * &1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79082,"user_id":null,"body":"defmodule Multiples do\n  def multiples(m, n) do\n    multiples(m, n, [])\n  end\n  \n  def multiples(1, n, ans), do: [n] ++ ans\n  def multiples(m, n, ans) do\n    multiples(m-1, n, [n*m] ++ ans)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"595970246c9b8fa0a8000086":[{"id":79083,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    String.capitalize(w)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79084,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    \n    with [head | tail] <- String.codepoints(w) do\n    [String.capitalize(head) | tail] |> Enum.join()\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79085,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    (String.first(w) |> String.upcase) <> String.slice(w, 1..-1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79086,"user_id":527,"body":"defmodule Solution do\n  def solve(w), do: String.capitalize(w)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79087,"user_id":564,"body":"defmodule Solution do\n  def solve w do\n    w |> String.capitalize\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79088,"user_id":470,"body":"defmodule Solution do\n  def solve(<<ch>><>r),do: <<ch-32>><>r\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79089,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    Macro.camelize(w)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79090,"user_id":null,"body":"defmodule Solution do\n  def solve(<<first::utf8, rest::binary>> = w) do\n   String.upcase(<<first::utf8>>) <> rest\n  end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79091,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    [head | tail] = String.graphemes(w)\n    String.capitalize(head) <> to_string(tail)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79092,"user_id":null,"body":"defmodule Solution do\n  def solve(w) do\n    [head | tail] = String.graphemes(w)\n    Enum.join([String.upcase(head) | tail])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5963c18ecb97be020b0000a2":[{"id":79093,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    coefficient * exponent \n    |> Integer.to_string()\n    |> Kernel.<> \"x\" <> \"^\" <> Integer.to_string(exponent - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79094,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    res = coefficient * exponent \n    coef = exponent - 1\n    \"#{res}x^#{coef}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79095,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    multiply = coefficient * exponent\n    subtract = exponent - 1 \n    \"#{multiply}x^#{subtract}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79096,"user_id":null,"body":"defmodule Kata do\n  @spec derive(pos_integer, pos_integer) :: String.t\n  def derive(coefficient, exponent), do: \"#{coefficient*exponent}x^#{exponent-1}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79097,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    x = coefficient*exponent\n    y = exponent-1\n    List.to_string([Integer.to_string(x),\"x^\",Integer.to_string(y)])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79098,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, expression), do: \"#{coefficient * expression}x^#{expression-1}\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79099,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    \"#{exponent * coefficient}x^#{exponent - 1}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79100,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    \"#{coefficient * exponent}x^#{exponent - 1}\"\n  end\nend\n\n#test \"derive(5, 10)\" do\n  #assert Kata.derive(5, 10) === \"50x^9\"\n#end","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79101,"user_id":null,"body":"defmodule Kata do\n  def derive(coefficient, exponent) do\n    n = coefficient * exponent\n    Integer.to_string(n)<>\"x^#{exponent-1}\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79102,"user_id":null,"body":"defmodule Kata do\n\n  def derive(coefficient, exponent) do\n    \"#{coefficient*exponent}x^#{if exponent < 2, do: 1, else: exponent - 1}\"\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5966ec8e62d030d8530000a7":[{"id":79103,"user_id":null,"body":"defmodule Kata do\n  def pow(a, b), do: Enum.reduce(1..b, 1, fn _, acc -> acc * a end)\n  def super_sum(d, n), do: div(d * pow(n, d) * (n - 1), 2)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79104,"user_id":null,"body":"defmodule Kata do\n\n  def super_sum(d, n), do: div(pow(n, d - 1) * d * (n - 1) * n, 2)\n\n  defp pow(x, n), do: pow(x, n, 1)\n  defp pow(_, 0, acc), do: acc\n  defp pow(x, n, acc), do: pow(x, n - 1, x * acc)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79105,"user_id":null,"body":"defmodule Kata do\n    def super_sum(d,n), do: 1..d\n        |> Enum.reduce(1, fn _,p -> p*n end)\n        |> Kernel.*(d*(n-1))\n        |> div(2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79106,"user_id":null,"body":"defmodule Kata do\n\n  def super_sum(d,n) do\n    dimSum = div( (n-1)*n,2)*d    \n    round(dimSum * pow(n,d-1) )\n  end\n  \n  def pow(_n, 0) do 1 end\n  def pow( n, 1) do n end\n\n  def pow(n, k) do\n    {val,bp2} = biggestP2(n,k)\n    val * pow(n, k - bp2)\n  end\n\n  def biggestP2(n,p) do\n    biggestP2(n,p,1)    \n  end\n  def biggestP2(n,p,pacc) do\n    #IO.inspect [ n,p]\n    if pacc+pacc > p do\n      {n,pacc}\n    else\n      biggestP2(n*n,p,pacc+pacc)\n    end\n  end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79107,"user_id":527,"body":"defmodule Kata do\n  def super_sum(d, n), do: div(pow(n, d) * d * (n - 1), 2)\n  defp pow(_, 0), do: 1\n  defp pow(x, y), do: x * pow(x, y - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79108,"user_id":470,"body":"defmodule Kata do\n\tdef super_sum(d,n),do: Enum.sum(0..n-1) * pow(n,d-1) * d\n\tdefp pow(_,0),do: 1\n\tdefp pow(n,p),do: n * pow(n,p-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"596e91b48c92ceff0c00001f":[{"id":79109,"user_id":null,"body":"defmodule Kata do\n    def words_to_hex(words) do\n      words\n      |> String.split()\n      |> Enum.map(fn(x) -> String.slice(x, 0, 3) end)\n      |> Enum.map(fn(x) -> Base.encode16(x) end)\n      |> Enum.map(fn(x) -> String.pad_trailing(\"##{x}\", 7, \"0\") end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79110,"user_id":null,"body":"defmodule Kata do\n  def words_to_hex(words) do\n    words\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&Base.encode16\/1)\n    |> Enum.map(&String.slice(&1, 0..5))\n    |> Enum.map(&add_tailing_zeros\/1)\n    |> add_prefix(\"#\")\n  end\n\n  def add_tailing_zeros(word) do\n    hex_length = 6\n\n    case String.length(word) do\n      ^hex_length -> word\n      _ -> word <> String.duplicate(\"0\", hex_length - String.length(word))\n    end\n  end\n\n  def add_prefix(words, prefix) do\n    words\n    |> Enum.map(&(prefix <> &1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79111,"user_id":null,"body":"defmodule Kata do\n  def words_to_hex(words) do\n    words\n    |> String.split(\" \", trim: true)\n    |> Enum.map(&String.slice(&1, 0..2))\n    |> Enum.map(&Base.encode16\/1)\n    |> Enum.map(&String.pad_trailing(&1, 6, \"00\"))\n    |> Enum.map(&(\"#\" <> &1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79112,"user_id":null,"body":"defmodule Kata do\n  def words_to_hex(words) do\n    String.split(words)\n    |> Enum.map(fn word ->\n      \"#\" <>\n        (to_charlist(word)\n         |> Enum.take(3)\n         |> Enum.map_join(fn c -> Integer.to_string(c, 16) |> String.pad_leading(2, \"0\") end)\n         |> String.pad_trailing(6, \"0\"))\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79113,"user_id":250,"body":"defmodule Kata do\n    def words_to_hex(words) do\n      String.split(words, \" \")\n        |> Enum.map(fn w ->\n          \"#\" <> (\n            String.codepoints(w)\n              |> Enum.take(3)\n              |> Enum.map(fn x -> Integer.to_string(x |> String.to_charlist |> hd, 16) end)\n              |> Enum.join(\"\")\n              |> String.pad_trailing(6, \"0\")\n          )\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79114,"user_id":null,"body":"defmodule Kata do\n    def words_to_hex(words) do\n      words\n      |> String.split()\n      |> Enum.map(fn word ->\n        word\n        |> String.slice(0..2)\n        |> String.to_charlist\n        |> Enum.map(&Integer.to_string(&1, 16))\n        |> Enum.join()\n        |> String.pad_trailing(6, \"0\")\n        |> String.pad_leading(7, \"#\")\n      end)\n    end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79115,"user_id":null,"body":"defmodule Kata do\n  def words_to_hex(words) do\n    step(String.split(words), [])\n  end\n\n  def step([word | rest], results) do\n    case String.length(word) do\n       l when l > 3 ->\n        step(rest, results ++ [\"##{convert(:binary.bin_to_list(word, {0, 3}))}\"])\n       l ->\n        step(rest, results ++ [\"##{convert(:binary.bin_to_list(word, {0, l}) ++ List.duplicate(0, 3 - l))}\"])\n    end\n  end\n\n  def step([], results), do: results\n \n  def convert(items) do\n    items\n      |> Enum.map(&Integer.to_string(&1, 16))\n      |> Enum.map(&String.pad_trailing(&1, 2, \"0\"))\n      |> Enum.join\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79116,"user_id":null,"body":"defmodule Kata do\n    def words_to_hex(words) do\n        words\n        |> String.split(\" \")\n        |> Enum.map(&(String.slice(&1, 0..2)))\n        |> Enum.map(&(Base.encode16(&1)))\n        |> Enum.map(&(String.pad_trailing(&1, 6, \"00\")))\n        |> Enum.map(&(\"#\" <> &1))\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79117,"user_id":null,"body":"defmodule Kata do\n\n  def words_to_hex(words), do: get_words_to_hex(words)\n\n  defp get_words_to_hex(words), do: Enum.map(String.split(words, \" \"), &convert\/1)\n\n  defp convert(word) do\n    word\n    |> String.graphemes\n    |> Enum.slice(0..2)\n    |> Enum.map(&:binary.first\/1)\n    |> Enum.map(&Integer.to_string(&1, 16))\n    |> Enum.join\n    |> String.pad_trailing(6, \"0\")\n    |> (fn str -> \"#\" <> str end).()\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79118,"user_id":null,"body":"defmodule Kata do\n    def words_to_hex(words) do\n        words \n        |> String.split()\n        |> Stream.flat_map(&to_convertible_chars\/1)\n        |> Stream.map(&to_hex\/1)\n        |> Stream.chunk_every(3)\n        |> Stream.map(&to_color_code\/1)\n        |> Enum.to_list()\n    end\n    \n    def to_convertible_chars(word) do\n      word\n      |> String.pad_trailing(3, \" \")\n      |> String.slice(0..2)\n      |> String.graphemes\n    end\n    \n    def to_hex(\" \"), do: \"00\"\n    def to_hex(char) do\n      <<ascii::utf8>> = char\n      \n      ascii\n      |> Integer.to_string(16)\n      \n    end\n    \n    def to_color_code(hex_codes), do: \"#\" <> Enum.join(hex_codes)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59706036f6e5d1e22d000016":[{"id":79119,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s\n    |> to_charlist\n    |> Enum.map(fn n -> n - 96 end)\n    |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79120,"user_id":527,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    Enum.sum(for <<c <- s>>, do: c - ?a + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79121,"user_id":null,"body":"# write code below\ndefmodule Kata do\n  def words_to_marks(s) do\n    s\n    |> String.to_charlist()\n    |> adding_zero\n    |> Enum.map(fn x -> x - 96 end)\n    |> Enum.filter(fn x -> x > 0 end)\n    |> Enum.sum()\n  end\n\n  def adding_zero(charlist) do\n    charlist ++ [0]\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79122,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s\n    |> String.graphemes()\n    |> Enum.map(&process_character\/1)\n    |> Enum.sum()\n  end\n\n  def process_character(<<v::utf8>>) do\n    v - 96\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79123,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s\n    |> String.to_charlist\n    |> Enum.map(&(&1-96))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79124,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s |> String.to_charlist() |> Enum.map(fn x -> x - ?a + 1 end) |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79125,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s |> String.graphemes |> Enum.map(&char_to_int\/1) |> Enum.sum\n  end\n  \n  def char_to_int(input) do\n    (input |> String.to_charlist |> hd) - 96\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79126,"user_id":null,"body":"defmodule Kata do\n  @moduledoc\"\"\"\n  KATA - Love vs friendship\n  \n  - If\u3000a = 1, b = 2, c = 3 ... z = 26\n  - Then l + o + v + e = 54\n  \"\"\"\n  @doc\"\"\"\n  The `words_to_marks\/1` function take a word and returns sum of add all the letter in the word together.\n  \n  ## Param\n  1. word: string\n  \n  ## Example\n    iex> Kata.words_to_marks(\"attitude\")\n    100\n  \"\"\"\n  @a_z_map ?a..?z |> Enum.zip(1..26) |> Enum.into(%{}, fn {k, v} -> {<<k>>, v} end)\n  @spec words_to_marks(String.t) :: pos_integer\n  def words_to_marks(word) do\n    word\n    |> String.split(\"\", trim: true)\n    |> Enum.reduce(0, fn \n      x, acc -> Map.get(@a_z_map, x) + acc \n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79127,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(s) do\n    s\n    |> Kernel.to_charlist\n    |> Enum.reduce(0, &(&2 = &2 + &1 - ?a + 1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79128,"user_id":null,"body":"defmodule Kata do\n  def words_to_marks(str) do\n    letters = for(x <- ?a..?z, do: <<x::utf8>>)\n    numbers = for(x <- 1..26, do: x)\n    table =\n      letters\n      |> Enum.zip(numbers)\n      |> Map.new\n\n    str\n    |> String.split(\"\", trim: true)\n    |> Enum.reduce(0, &(table[&1] + &2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"598106cb34e205e074000031":[{"id":79129,"user_id":470,"body":"defmodule Kata do\n\tdef count_deaf_rats(s) do\n\t\ts\n\t\t|> String.replace(\" \",\"\")\n\t\t|> String.to_charlist()\n\t\t|> Stream.take_every(2)\n\t\t|> Enum.count(&(&1 == 79))\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79130,"user_id":53,"body":"defmodule Kata do\n  def count_deaf_rats(s), do: go(s,0,0)\n  defp go(\"\",_,m), do: m\n  defp go(<<\" \">><>s,i,m), do: go(s,i,m)\n  defp go(<<\"O\">><>s,i,m) when rem(i,2)==0, do: go(s,i+1,m+1)\n  defp go(<<_>><>s,i,m), do: go(s,i+1,m)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79131,"user_id":null,"body":"defmodule Kata do\n  def count_deaf_rats(s) do\n    s |> String.split(\"\") |> inner\n  end\n  \n  defp inner(s, piper \\\\ 0, deaf \\\\ 0) do\n    case s do\n      [] -> deaf\n      \n      [x | tail] when x === \"P\" -> \n        inner(tail, 1, deaf)\n        \n      [x | [y | tail]] when x === \"O\" and y === \"~\" -> \n        inner(tail, piper, deaf + 1 - piper)\n        \n      [x | [y | tail]] when x === \"~\" and y === \"O\" -> \n        inner(tail, piper, deaf + piper)\n        \n      [_ | tail] -> inner(tail, piper, deaf)\n    end\n  end \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79132,"user_id":null,"body":"defmodule Kata do\n  def count_deaf_rats(s) do\n    String.replace(s, \" \", \"\")\n    |> String.split(\"P\")\n    |> Enum.with_index()\n    |> Enum.flat_map(fn {s, i} ->\n      if(i == 1, do: String.reverse(s), else: s)\n      |> String.graphemes()\n      |> Enum.chunk_every(2)\n      |> Enum.map(fn\n        [\"O\", _] -> 1\n        _ -> 0\n      end)\n    end)\n    |> Enum.sum()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79133,"user_id":null,"body":"defmodule Kata do\n  def count_deaf_rats(s) do\n    toks =\n      Regex.scan(~r\/(~O)|(O~)|(P)\/, s)\n      |> Enum.map(fn [h | _] -> h end)\n\n    p_i = Enum.find_index(toks, &(&1 == \"P\"))\n\n    toks\n    |> Enum.with_index()\n    |> Enum.count(fn x ->\n      case x do\n        {\"~O\", i} -> i > p_i\n        {\"O~\", i} -> i < p_i\n        _ -> false\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79134,"user_id":null,"body":"defmodule Kata do\n    def count_deaf_rats(s) do\n      list = String.split(s, \"\")\n      count_deaf_rats(list, 0, true)\n    end\n    \n    def count_deaf_rats([ \"~\" | [\"O\" | tail]], count, true) do\n      count_deaf_rats(tail, count, true)\n    end\n    \n    def count_deaf_rats([ \"O\" | [\"~\" | tail]], count, true) do\n      count_deaf_rats(tail, count + 1, true)\n    end\n    \n    def count_deaf_rats([ \"~\" | [\"O\" | tail]], count, false) do\n      count_deaf_rats(tail, count + 1, false)\n    end\n    \n    def count_deaf_rats([ \"O\" | [\"~\" | tail]], count, false) do\n      count_deaf_rats(tail, count, false)\n    end\n    \n    def count_deaf_rats([ \"P\" | tail], count, true) do\n      count_deaf_rats(tail, count, false)\n    end\n\n    def count_deaf_rats([], count, _) do\n      count\n    end\n\n    def count_deaf_rats([ _ | tail], count, val) do\n      count_deaf_rats(tail, count, val)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79135,"user_id":null,"body":"defmodule Kata do\n  @pied_piper \"P\"\n  \n  @death_rat_left \"O~\"\n  @death_rat_right \"~O\"\n  \n  def count_deaf_rats(line_text) do\n    [rats_left, rats_right] =\n      line_text\n      |> String.replace(\" \", \"\")\n      |> String.split(@pied_piper)\n      \n     death_rats_left = count_rats(rats_left, @death_rat_left)\n     death_rats_right = count_rats(rats_right, @death_rat_right)\n      \n     death_rats_left + death_rats_right \n  end\n  \n  defp count_rats(rats, type) do\n    rats\n    |> String.codepoints()\n    |> Enum.chunk_every(2)\n    |> Enum.map(&Enum.join(&1, \"\"))\n    |> Enum.count(& &1 == type)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79136,"user_id":250,"body":"defmodule Kata do\n    def count_deaf_rats(s) do\n      cs = Regex.replace(~r\/[^~OP]\/, s, \"\")\n          |> String.split(\"P\")\n      \n      r1 = Enum.at(cs, 0) |> String.graphemes\n      r2 = Enum.at(cs, 1) |> String.graphemes |> Enum.reverse\n      \n      (r1 ++ r2)\n      |> Enum.chunk_every(2)\n      |> Enum.reduce(0, fn rat, acc -> \n        if Enum.at(rat,0) == \"O\" do acc+1 else acc end\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79137,"user_id":null,"body":"defmodule Kata do\n    def count_deaf_rats(s) when is_bitstring(s) do\n       s\n       |> String.split\n       |> Enum.join\n       |> String.split(\"P\")\n       |> count_deaf_rats\n    end\n    \n    def count_deaf_rats([left, right] = s) when is_list(s) do\n      deaf_on_left  = for <<x::binary-2 <- left>>, do: count_left_side(x)\n      deaf_on_right = for <<x::binary-2 <- right>>, do: count_right_side(x)\n      \n      Enum.sum(deaf_on_left ++ deaf_on_right)\n    end\n    \n    \n    defp count_left_side(\"~O\"),  do: 0\n    defp count_left_side(\"O~\"),  do: 1\n\n    defp count_right_side(\"O~\"), do: 0\n    defp count_right_side(\"~O\"), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79138,"user_id":null,"body":"defmodule Kata do\n    def count_deaf_rats(s) when is_bitstring(s) do\n       s\n       |> String.split\n       |> Enum.join\n       |> String.split(\"P\")\n       |> count_deaf_rats\n    end\n    \n    def count_deaf_rats([left, right] = s) when is_list(s) do\n      number_from_left  = for <<x::binary-2 <- left>>, do: count_left_side(x)\n      number_from_right = for <<x::binary-2 <- right>>, do: count_right_side(x)\n      \n      Enum.sum(number_from_left ++ number_from_right)\n    end\n    \n    \n    defp count_left_side(s)  when s == \"~O\", do: 0\n    defp count_right_side(s) when s == \"O~\", do: 0\n    defp count_left_side(s)  when s == \"O~\", do: 1\n    defp count_right_side(s) when s == \"~O\", do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59a8570b570190d313000037":[{"id":79139,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    Enum.reduce(1..n,0, fn x, acc -> (x * x * x) + acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79140,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(0), do: 0\n  def sum_cubes(n), do: trunc(:math.pow(n, 3)) + sum_cubes(n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79141,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n      Enum.map(1..n, fn x -> x*x*x end) |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79142,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n, last) when n == last, do: cube(n)\n  def sum_cubes(n, start \\\\ 1) do\n    cube(start) + sum_cubes(n, start + 1)\n  end\n  \n  defp cube(n), do: n * n * n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79143,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    Enum.reduce(1..n, 0, fn x, acc -> acc + round(:math.pow(x, 3)) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79144,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    Enum.reduce(1..n, fn x, acc -> acc + x*x*x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79145,"user_id":2088,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    n * (n + 1)\n    |> div(2)\n    |> pow(2)\n  end\n\n  defp pow(x, 0), do: 1\n  defp pow(x, n), do: x * pow(x, n-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79146,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    Enum.map(1..n, & &1*&1*&1) |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79147,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    Enum.to_list(1..n)\n    |> Enum.map(&(&1*&1*&1))\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79148,"user_id":null,"body":"defmodule SumCubes do\n  def sum_cubes(n) do\n    0..n\n    |> Enum.to_list\n    |> Enum.map(&(&1 * &1 * &1))\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59b401e24f98a813f9000026":[{"id":79149,"user_id":null,"body":"defmodule IntegerDepth do\n  @set MapSet.new(0..9)\n  \n  def compute_depth(n) do\n    Stream.iterate(1, &(&1 + 1))\n    |> Stream.map(&Integer.digits(&1 * n))\n    |> Stream.scan(@set, fn x, set -> Enum.reduce(x, set, &MapSet.delete(&2, &1)) end)\n    |> Enum.find_index(&Enum.empty?(&1))\n    |> Kernel.+(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79150,"user_id":null,"body":"defmodule IntegerDepth do\n\n  def compute_depth(n) do\n    compute_depth(n, 1, [])\n  end\n\n  def compute_depth(_n, mult, digits) when length(digits) >= 10, do: mult - 1\n\n  def compute_depth(n, mult, digits) do\n    digits =\n      (n * mult)\n      |> Integer.digits()\n      |> Enum.reduce(digits, fn el, acc -> if el not in acc, do: [el | acc], else: acc end)\n\n    compute_depth(n, mult + 1, digits)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79151,"user_id":null,"body":"defmodule IntegerDepth do\n  def compute_depth(n, a \\\\ 1, set \\\\ MapSet.new(0..9)) do\n    set = Integer.digits(n * a) |> Enum.reduce(set, &MapSet.delete(&2, &1))\n    Enum.empty?(set) && a || compute_depth(n, a + 1, set)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79152,"user_id":null,"body":"defmodule IntegerDepth do\n    defp helper(_n,i,[]), do: i-1\n    defp helper(n,i,ls), do: helper(n, i+1, ls -- Integer.digits(n*i))\n    \n    def compute_depth(n), do: helper(n, 1, Enum.to_list(0..9))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79153,"user_id":null,"body":"defmodule IntegerDepth do\n  def compute_depth(n, i, digits) when length(digits) >= 10 do i-1 end\n  def compute_depth(n, i \\\\ 1, digits \\\\ []) do\n    new_digits = (digits ++ ((n*i) |> Integer.digits())) |> Enum.sort() |> Enum.dedup()\n    compute_depth(n, i+1, new_digits)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79154,"user_id":53,"body":"defmodule IntegerDepth do\n  use Bitwise\n  defp upd(mask,k), do: if (mask &&& k) > 0, do: mask ^^^ k, else: mask\n  defp aux(_,i,0,_,_), do: i\n  defp aux(n,i,mask,0,_), do: aux(n,i+1,mask,n*(i+1),Bitwise.bsl(1,rem(n*(i+1),10)))\n  defp aux(n,i,mask,m,k), do: aux(n,i,upd(mask,k),div(m,10),Bitwise.bsl(1,rem(div(m,10),10)))\n  def compute_depth(n), do: aux(n,1,1023,n,Bitwise.bsl(1,rem(n,10)))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79155,"user_id":527,"body":"defmodule IntegerDepth do\n  def compute_depth(n), do: do_compute_depth(n, MapSet.new, 0)\n  defp do_compute_depth(n, ds, i) do\n    if MapSet.size(ds) == 10 do\n      i\n    else\n      do_compute_depth(n, Enum.into(Integer.digits(n * (i + 1)), ds), i + 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79156,"user_id":null,"body":"defmodule IntegerDepth do\n  def compute_depth(n) do\n    Stream.iterate({0, MapSet.new()}, fn {i, digits} ->\n      {i + 1, MapSet.union(digits, MapSet.new(Integer.digits((i + 1) * n)))}\n    end)\n    |> Enum.find(fn {i, digits} -> MapSet.size(digits) == 10 end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79157,"user_id":null,"body":"defmodule IntegerDepth do\n  def compute_depth(n) do\n    Stream.unfold({0, MapSet.new()}, fn {i, digits} ->\n      next = {i + 1, MapSet.union(digits, MapSet.new(Integer.digits((i + 1) * n)))}\n      {next, next}\n    end)\n    |> Enum.find(fn {i, digits} -> MapSet.size(digits) == 10 end)\n    |> elem(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79158,"user_id":null,"body":"defmodule IntegerDepth do\n  def compute_depth(n) do\n    Enum.reduce_while(1..100, MapSet.new(), fn i, acc ->\n      if MapSet.size(acc) == 10, do: {:halt, i-1}, else:\n        {:cont, MapSet.union(acc, MapSet.new(Integer.digits(n*i)))}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59b9a92a6236547247000110":[{"id":79159,"user_id":null,"body":"defmodule PlayingCards do\n  @deck String.split(\n          \"AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS\"\n        )\n  @alphabet String.graphemes(\" ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n  defp msg_val(msg) do\n    chars = String.graphemes(msg)\n\n    if Enum.all?(chars, fn c -> c in @alphabet end) do\n      Enum.reduce(chars, 0, fn c, acc ->\n        acc * 27 + Enum.find_index(@alphabet, fn a -> a == c end)\n      end)\n    end\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(n), do: n * factorial(n - 1)\n\n  # Takes a string containing a message, and returns a list of strings representing\n  # a deck of playing cards ordered to hide the message, or nil if the message is invalid.\n  def encode(message) do\n    val = msg_val(message)\n\n    if val && val < factorial(52) do\n      Enum.reduce(\n        1..52,\n        {[], val, @deck},\n        fn _, {res, val, deck} ->\n          fact = factorial(length(deck) - 1)\n          {card, deck2} = List.pop_at(deck, div(val, fact))\n          {res ++ [card], rem(val, fact), deck2}\n        end\n      )\n      |> elem(0)\n    end\n  end\n\n  defp val_to_msg(0), do: \"\"\n  defp val_to_msg(val), do: val_to_msg(div(val, 27)) <> Enum.at(@alphabet, rem(val, 27))\n\n  # Takes a list of strings representing a deck of playing cards, and returns\n  # the message that is hidden inside, or nil if the deck is invalid.\n  def decode(deck) do\n    if Enum.uniq(deck) |> length == 52 && Enum.all?(deck, fn card -> card in @deck end) do\n      Enum.reduce(deck, {0, @deck}, fn card, {val, deck2} ->\n        d = Enum.find_index(deck2, fn c -> c == card end)\n        {val + d * factorial(length(deck2) - 1), List.delete_at(deck2, d)}\n      end)\n      |> elem(0)\n      |> val_to_msg\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79160,"user_id":null,"body":"defmodule PlayingCards do\n  @factorials Enum.reduce(1..51, [1], fn x,[y | _] = acc -> [x * y | acc]  end)\n  @factorial52 Enum.at(@factorials, 0, 0) * 52\n\n  @key [\n    \"AC\",\"2C\",\"3C\",\"4C\",\"5C\",\"6C\",\"7C\",\"8C\",\"9C\",\"TC\",\"JC\",\"QC\",\"KC\",\n    \"AD\",\"2D\",\"3D\",\"4D\",\"5D\",\"6D\",\"7D\",\"8D\",\"9D\",\"TD\",\"JD\",\"QD\",\"KD\",\n    \"AH\",\"2H\",\"3H\",\"4H\",\"5H\",\"6H\",\"7H\",\"8H\",\"9H\",\"TH\",\"JH\",\"QH\",\"KH\",\n    \"AS\",\"2S\",\"3S\",\"4S\",\"5S\",\"6S\",\"7S\",\"8S\",\"9S\",\"TS\",\"JS\",\"QS\",\"KS\"\n  ]\n\n  def encode(message) do\n    number = message_to_int(message)\n    if number < @factorial52 and validate_input(message) do\n      encode(number, @factorials, @key)\n    else\n      nil\n    end\n  end\n\n  defp validate_input(message) do\n    \"\" == String.replace(message, ~r\/[A-Z ]+\/, \"\")\n  end\n\n  def encode(0, [], []), do: []\n\n  def encode(number, [factorial | factorials], key) do\n    pos = div(number, factorial)\n    number = rem(number, factorial)\n    {char, key} = List.pop_at(key, pos)\n    [char | encode(number, factorials, key)]\n  end\n\n  defp message_to_int(message) do\n    message\n    |> :binary.bin_to_list()\n    |> Enum.map(fn\n      32 -> 0\n      c -> c - 64\n    end)\n    |> Integer.undigits(27)\n  end\n\n  defp int_to_message(0), do: \"\"\n\n  defp int_to_message(number) do\n    number\n    |> Integer.digits(27)\n    |> Enum.map(fn\n      0 -> 32\n      c -> c + 64\n    end)\n    |> :binary.list_to_bin()\n  end\n\n  def decode(deck) do\n    if Enum.sort(deck) != Enum.sort(@key) do\n      nil\n    else\n      decode(deck, @factorials, @key)\n      |> int_to_message()\n    end\n  end\n\n  def decode([], [], []) do\n    0\n  end\n\n  def decode([card | deck], [factorial | factorials], key) do\n    pos = Enum.find_index(key, & &1 == card)\n    key = List.delete(key, card)\n\n    factorial * pos + decode(deck, factorials, key)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79161,"user_id":null,"body":"defmodule Math do\n    def factorial(0), do: 1\n    def factorial(1), do: 1\n    def factorial(n), do: n*factorial(n-1)\nend\n\ndefmodule PlayingCards do\n    import Math\n    \n    @chars \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\" |> String.graphemes\n    @deck [\n        \"AC\",\"2C\",\"3C\",\"4C\",\"5C\",\"6C\",\"7C\",\"8C\",\"9C\",\"TC\",\"JC\",\"QC\",\"KC\",\n        \"AD\",\"2D\",\"3D\",\"4D\",\"5D\",\"6D\",\"7D\",\"8D\",\"9D\",\"TD\",\"JD\",\"QD\",\"KD\",\n        \"AH\",\"2H\",\"3H\",\"4H\",\"5H\",\"6H\",\"7H\",\"8H\",\"9H\",\"TH\",\"JH\",\"QH\",\"KH\",\n        \"AS\",\"2S\",\"3S\",\"4S\",\"5S\",\"6S\",\"7S\",\"8S\",\"9S\",\"TS\",\"JS\",\"QS\",\"KS\",\n    ]\n    @max_encoded_integer Math.factorial(length(@deck)) - 1\n    \n    # Takes a string containing a message, and returns a list of strings representing\n    # a deck of playing cards ordered to hide the message, or nil if the message is invalid.\n    def encode(message) do\n        digits = message\n        |> String.graphemes\n        |> Enum.map(&Enum.find_index(@chars, fn c -> c==&1 end))\n        \n        if nil in digits do\n          nil\n        else\n          x = digits |> Integer.undigits(length(@chars))\n          if x > @max_encoded_integer, do: nil, else: x |> get_deck\n        end\n    end\n    \n    def get_order([]), do: 0\n    def get_order([head | tail]) do\n      get_order(tail) + factorial(length(tail)) * Enum.count(tail, fn x -> x < head end)\n    end\n    \n    def get_deck(order, rest\\\\@deck)\n    def get_deck(0, rest), do: rest\n    def get_deck(x, rest) do\n      m = factorial(length(rest) - 1)\n      [Enum.at(rest, div(x, m)) |\n      get_deck(rem(x, m), List.delete_at(rest, div(x, m)))]\n    end\n\n    # Takes a list of strings representing a deck of playing cards, and returns\n    # the message that is hidden inside, or nil if the deck is invalid.\n    def decode(deck) do\n        deck = deck |> Enum.map(&Enum.find_index(@deck, fn card -> card==&1 end)) |> Enum.uniq\n        if nil in deck or length(deck) != 52 do\n          nil\n        else\n          deck_order = deck |> get_order\n          Preload.print_deck(deck,true)\n          deck_order\n          |> Integer.digits(length(@chars))\n          |> Stream.map(&Enum.at(@chars, &1))\n          |> Enum.join\n          |> String.trim_leading\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79162,"user_id":null,"body":"defmodule PlayingCards do\n\n  @abc \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  @deck for suit <- String.graphemes(\"CDHS\"), rank <- String.graphemes(\"A23456789TJQK\"), do: rank <> suit\n\n  def encode(message) do\n    case is_valid_encode_input?(message) do\n      true -> do_encode(message)\n      false -> nil\n    end\n  end\n\n  def decode(deck) do\n    case is_valid_decode_input?(deck) do\n      true -> do_decode(deck)\n      false -> nil\n    end\n  end\n\n  defp do_encode(message) do\n    message\n    |> convert_base_to_ten(@abc)\n    |> get_nth_permutation(@deck)\n  end\n\n  defp do_decode(deck) do\n    deck\n    |> get_permutation_index(@deck)\n    |> convert_ten_to_base(@abc)\n    |> Enum.join\n  end\n\n  defp is_valid_encode_input?(message), do:\n    Enum.all?(String.graphemes(message), fn sym -> sym in String.graphemes(@abc) end)\n    and convert_base_to_ten(message, @abc) < factorial(52)\n\n  defp is_valid_decode_input?(deck), do: length(deck) == length(@deck) and MapSet.new(deck) == MapSet.new(@deck)\n\n  defp convert_base_to_ten(str, abc) do\n    str\n    |> String.graphemes\n    |> Enum.with_index\n    |> Enum.map(fn {val, idx} -> get_index(abc, val) * (pow(String.length(abc), String.length(str) - idx - 1)) end)\n    |> Enum.sum\n    |> round\n  end\n\n  defp convert_ten_to_base(n, abc), do: convert_ten_to_base(n, String.graphemes(abc), [])\n  defp convert_ten_to_base(0, _, acc), do: acc\n  defp convert_ten_to_base(n, abc, acc), do:\n    convert_ten_to_base(div(n, length(abc)), abc, [Enum.at(abc, rem(n, length(abc))) | acc])\n\n  defp get_nth_permutation(n, abc), do: get_nth_permutation(n, abc, rem(n, factorial(length(abc) - 1)), [])\n  defp get_nth_permutation(n, abc, r, acc) do\n    idx = div(n, factorial(length(abc) - 1))\n    acc = [Enum.at(abc, idx) | acc]\n    abc = List.delete_at(abc, idx)\n\n    case r do\n      0 -> Enum.reverse(acc) ++ abc\n      _ -> get_nth_permutation(r, abc, rem(n, factorial(length(abc) - 1)), acc)\n    end\n  end\n\n  defp get_permutation_index(deck, abc), do: get_permutation_index(deck, abc, 0)\n  defp get_permutation_index([], _, acc), do: acc\n  defp get_permutation_index([head | tail], abc, acc), do:\n    get_permutation_index(tail, List.delete(abc, head), acc + get_index(abc, head) * factorial(length(abc) - 1))\n\n  defp get_index(seq, val) when is_binary(seq), do: get_index(String.graphemes(seq), val)\n  defp get_index(seq, val), do: Enum.find_index(seq, & &1 == val)\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\n  defp pow(x, n), do: pow(x, n, 1)\n  defp pow(_, 0, acc), do: acc\n  defp pow(x, n, acc), do: pow(x, n - 1, x * acc)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79163,"user_id":null,"body":"defmodule PlayingCards do\n    # Takes a string containing a message, and returns a list of strings representing\n    # a deck of playing cards ordered to hide the message, or nil if the message is invalid.\n    def encode(message) do\n      try do\n        message\n        |> message_to_int\n        |> int_to_deck\n      rescue\n        e in RuntimeError -> nil\n      end\n    end\n    \n    def message_to_int(msg) do\n      msg\n      |> String.to_charlist\n      |> Enum.map(fn \n        ?\\s -> 0\n        other when other in ?A..?Z -> other - 64\n        e ->\n          raise(RuntimeError, \"Invalid char #{e}\")\n      end)\n      |> Integer.undigits(27)\n    end\n\n    defp int_to_deck(int) when int >= 80658175170943878571660636856403766975289505440883277824000000000000 do\n      nil\n    end\n    defp int_to_deck(int) do\n      Enum.reduce(51..0, {int, [], ordered_deck()}, fn fact_base, {remain, rev_deck, ref_deck} ->\n        base = fact(fact_base)\n        idx = div(remain, base)\n        new_remain = rem(remain, base)\n\n        {new_remain, [Enum.at(ref_deck, idx) | rev_deck], List.delete_at(ref_deck, idx)}\n      end)\n      |> elem(1)\n      |> Enum.reverse\n    end\n    \n    # Takes a list of strings representing a deck of playing cards, and returns\n    # the message that is hidden inside, or nil if the deck is invalid.\n    def decode(deck) do\n        # your code here\n#         Preload.print_deck(deck,true)\n      if Enum.sort(deck) == Enum.sort(ordered_deck()) do\n        deck\n        |> deck_to_int\n        |> int_to_message\n      else\n        nil\n      end\n    end\n    \n    defp deck_to_int(deck) do\n      Enum.reduce(deck, {0, 51, ordered_deck()}, fn card, {curr_sum, fact_base, ref_deck} ->\n        idx = Enum.find_index(ref_deck, fn c -> c == card end)\n        \n        to_sum = fn\n          0 -> 0\n          n -> n * fact(fact_base)     \n        end\n        \n        {curr_sum + to_sum.(idx), fact_base - 1, List.delete_at(ref_deck, idx)}\n      end)\n      |> elem(0)\n    end\n    \n    defp fact(n) when n in [0, 1], do: 1\n    defp fact(n), do: n * fact(n - 1)\n    \n    defp ordered_deck do\n      [\n        \"AC\",\"2C\",\"3C\",\"4C\",\"5C\",\"6C\",\"7C\",\"8C\",\"9C\",\"TC\",\"JC\",\"QC\",\"KC\",\n        \"AD\",\"2D\",\"3D\",\"4D\",\"5D\",\"6D\",\"7D\",\"8D\",\"9D\",\"TD\",\"JD\",\"QD\",\"KD\",\n        \"AH\",\"2H\",\"3H\",\"4H\",\"5H\",\"6H\",\"7H\",\"8H\",\"9H\",\"TH\",\"JH\",\"QH\",\"KH\",\n        \"AS\",\"2S\",\"3S\",\"4S\",\"5S\",\"6S\",\"7S\",\"8S\",\"9S\",\"TS\",\"JS\",\"QS\",\"KS\"\n      ]\n    end\n    \n    def int_to_message(0), do: \"\"\n    def int_to_message(int) do\n      int\n      |> Integer.digits(27)\n      |> Enum.map(fn \n        0 -> ?\\s\n        other -> other + 64      \n      end)\n      |> List.to_string()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79164,"user_id":443,"body":"defmodule PlayingCards do\n    @deck [\n        \"AC\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"TC\", \"JC\", \"QC\", \"KC\",\n        \"AD\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"7D\", \"8D\", \"9D\", \"TD\", \"JD\", \"QD\", \"KD\",\n        \"AH\", \"2H\", \"3H\", \"4H\", \"5H\", \"6H\", \"7H\", \"8H\", \"9H\", \"TH\", \"JH\", \"QH\", \"KH\",\n        \"AS\", \"2S\", \"3S\", \"4S\", \"5S\", \"6S\", \"7S\", \"8S\", \"9S\", \"TS\", \"JS\", \"QS\", \"KS\",\n    ]\n    @too_big Enum.reduce(1..52, &Kernel.*\/2)\n\n\n    # Takes a string containing a message, and returns a list of strings representing\n    # a deck of playing cards ordered to hide the message, or nil if the message is invalid.\n    def encode(message) do\n        message\n        |> message_to_num\n        |> to_deck\n    end\n    \n    defp char_to_base(?\\s), do: 0\n    defp char_to_base(c) when c >= ?A and c <= ?Z, do: 1 + c - ?A\n    defp char_to_base(_), do: :nil\n    defp message_to_num(message) do\n      message\n      |> String.to_charlist\n      |> Enum.reduce(0, &message_to_num_reducer\/2)\n    end\n    defp message_to_num_reducer(_, :nil), do: :nil\n    defp message_to_num_reducer(c, acc) do\n      case char_to_base(c) do\n        :nil -> :nil\n        val ->\n          next_val = (acc * 27) + val\n          if next_val < @too_big, do: next_val, else: :nil\n      end\n    end\n\n    # Takes a list of strings representing a deck of playing cards, and returns\n    # the message that is hidden inside, or nil if the deck is invalid.\n    def decode(deck) do\n        deck\n        |> check_valid_deck\n        |> from_deck\n        |> from_fact_52_base\n        |> num_to_message\n    end\n    \n    defp check_valid_deck(deck) do\n      case Enum.sort(deck) == Enum.sort(@deck) do\n        :true -> deck\n        :false -> :nil\n      end\n    end\n    \n    defp num_to_message(:nil), do: :nil\n    defp num_to_message(num), do: num_to_message(num, [])\n    defp num_to_message(0, result), do: to_string(result)\n    defp num_to_message(num, result), do: num_to_message(div(num, 27), [base_to_char(rem(num, 27)) | result])\n    \n    defp base_to_char(0), do: ?\\s\n    defp base_to_char(n), do: n + ?A - 1\n    \n    defp to_deck(:nil), do: :nil\n    defp to_deck(num), do: to_deck(to_fact_52_base(num), @deck, [])\n    defp to_deck(_, [final_card], acc), do: Enum.reverse([final_card | acc])\n    defp to_deck([choice | choices], deck, acc) do\n      {card, deck_left} = List.pop_at(deck, choice)\n      to_deck(choices, deck_left, [card | acc])\n    end\n    \n    defp to_fact_52_base(num), do: to_fact_52_base(num, 1, [])\n    defp to_fact_52_base(_, 53, result), do: result\n    defp to_fact_52_base(num, n, result), do: to_fact_52_base(div(num, n), n + 1, [rem(num, n) | result])\n    \n    defp from_deck(:nil), do: :nil\n    defp from_deck(deck), do: from_deck(deck, @deck, [])\n    defp from_deck([_], _, result), do: Enum.reverse([0 | result])\n    defp from_deck([card | selection], deck_left, result) do\n      from_deck(selection, List.delete(deck_left, card), [Enum.find_index(deck_left, &(&1 == card)) | result])\n    end\n    \n    defp from_fact_52_base(:nil), do: :nil\n    defp from_fact_52_base(fact_base), do: from_fact_52_base(fact_base, 52, 0)\n    defp from_fact_52_base(_, 1, result), do: result\n    defp from_fact_52_base([head | tail], n, result), do: from_fact_52_base(tail, n - 1, (result * n) + head)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79165,"user_id":470,"body":"defmodule PlayingCards do\n\t@ix ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\t@tome for suit <- 'CDHS',n <- 'A23456789TJQK',do: <<n>><><<suit>>\n\t\n\tdef encode(s) do\n\t\ttiers = get_factr()\n\t\tq = quant(s,0)\n\t\tif q == nil || q >= 52 * hd(tiers) do\n\t\t\tnil\n\t\telse\n\t\t\ti = Enum.find_index(tiers,&(q >= &1))\n\t\t\tif i == nil do\n\t\t\t\t@tome\n\t\t\telse\n\t\t\t\t{cx,dx} = Enum.split(@tome,i)\n\t\t\t\tcx ++ gen_cardlist(Enum.drop(tiers,i),dx,q)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tdef decode(@tome),do: \"\"\n\t\n\tdef decode(r) do\n\t\tif length(r) != 52 || @tome -- r != [] do\n\t\t\tnil\n\t\telse\n\t\t\t{dx,tm,tiers} = cardbreak(r,@tome,get_factr())\n\t\t\tq = Enum.reduce(Stream.zip([dx,tiers]),{0,tm},fn {card,tier},{n,tom} ->\n\t\t\t\tj = Enum.find_index(tom,&(&1 == card))\n\t\t\t\t{j * tier + n,tom -- [card]}\n\t\t\tend) |> elem(0)\n\t\t\tgen_msg(q)\n\t\tend\n\tend\n\t\n\tdefp quant(\"\",q),do: q\n\tdefp quant(<<ch>><>s,q),do: (if ch not in @ix do nil else quant(s,q*27+Enum.find_index(@ix,&(&1 == ch))) end)\n\t\n\tdefp gen_cardlist([],dx,_),do: dx\n\tdefp gen_cardlist([tier|r],dx,q) do\n\t\tv = div(q,tier)\n\t\tcard = Enum.at(dx,v)\n\t\t[card | gen_cardlist(r,dx -- [card],rem(q,tier))]\n\tend\n\t\n\tdefp cardbreak([c1|r1],[c2|r2],[t|r3]),do: (if c1 != c2,do: {[c1|r1],[c2|r2],[t|r3]},else: cardbreak(r1,r2,r3))\n\t\n\tdefp get_factr,do: factr() |> Enum.reverse()\n\tdefp factr(c\\\\51,n\\\\1,v\\\\1)\n\tdefp factr(c,n,v) when n >= c,do: [v]\n\tdefp factr(c,n,v),do: [v | factr(c,n+1,v*(n+1))]\n\t\n\tdefp gen_msg(0),do: \"\"\n\tdefp gen_msg(q),do: gen_msg(div(q,27)) <> <<Enum.at(@ix,rem(q,27))>>\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59c633e7dcc4053512000073":[{"id":79166,"user_id":null,"body":"defmodule Kata do\n    def solve(s) do\n      s \n      |> String.split(~r{a|e|i|o|u}, trim: true)\n      |> Enum.map(&(sum(&1)))\n      |> Enum.max\n    end\n    defp sum(<<char::utf8>>), do: char - 96\n    defp sum(<<char::utf8, rest::binary>>) do\n      char - 96 + sum(rest)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79167,"user_id":null,"body":"defmodule Kata do\n    def solve(s) do\n        s\n        |> String.split(~w(a e i o u))\n        |> Stream.map(&String.graphemes\/1)\n        |> Stream.map(&value\/1)\n        |> Enum.max()\n    end\n    \n    defp value(list) do \n      list\n      |> Stream.map(fn char -> (char |> String.to_charlist |> hd) - 96 end)\n      |> Enum.sum()\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79168,"user_id":null,"body":"defmodule Kata do\n  @vowels ~w(a e i o u)\n\n  def solve(string) do\n    string\n    |> String.split(@vowels, trim: true)\n    |> Enum.map(&sum_substring\/1)\n    |> Enum.max()\n  end\n  \n  defp sum_substring(substring) do\n    substring\n    |> String.graphemes()\n    |> Enum.map(fn <<letter>> -> letter - 96 end)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79169,"user_id":null,"body":"# write code below\n\ndefmodule Kata do\n  @vowels [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n  def solve(s) do\n    String.split(s, @vowels)\n    |> Enum.filter(fn x -> x != \"\" end)\n    |> Enum.map(fn x -> String.to_charlist(x) end)\n    |> numbers_list([])\n    |> Enum.max()\n  end\n\n  def numbers_list([], final), do: final\n\n  def numbers_list([head | tail], numb_list) do\n    case length(head) do\n      1 ->\n        val = Enum.sum(head ++ [0]) - 96\n        numbers_list(tail, numb_list ++ [val])\n\n      _ ->\n        sum =\n          Enum.map(head, fn x -> x - 96 end)\n          |> Enum.sum()\n\n        numbers_list(tail, numb_list ++ [sum])\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79170,"user_id":470,"body":"defmodule Kata do\n\tdef solve(s,n\\\\0)\n\tdef solve(\"\",n),do: n\n\tdef solve(<<c>><>s,n) when c in 'aeiou',do: max(n,solve(s))\n\tdef solve(<<c>><>s,n),do: solve(s,n+c-96)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79171,"user_id":null,"body":"defmodule Kata do\n    def solve(s) do\n      s\n      |> String.split([\"a\", \"e\", \"i\", \"o\", \"u\"])\n      |> Enum.map(fn(sub) -> sub\n        |> String.to_charlist()\n        |> Enum.map(&(&1 - 96))\n        |> Enum.sum\n      end)\n      |> Enum.max\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79172,"user_id":null,"body":"defmodule Kata do\n    def solve(s) do\n        s\n        |> String.split([\"a\", \"e\", \"i\", \"o\", \"u\"], trim: true)\n        |> Enum.map(&(String.to_charlist(&1)))\n        |> Enum.map(fn(substr) -> Enum.reduce(substr, 0, &(&2 + &1 + 1 - ?a)) end)\n        |> Enum.max\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79173,"user_id":null,"body":"defmodule Kata do\n    def solve(s) do\n        list_words=Enum.map(Enum.to_list(?a..?z), fn(n) -> <<n>> end)\n        consonant_list = s |> String.replace(~r\/(a|e|i|o|u)\/i, \" \") |> String.split \n        r= for x<- consonant_list do\n            case String.length(x) > 1 do\n                true -> \n                    lst = x |> String.graphemes\n                    a =for i <- lst do\n                        list_words |> Enum.find_index(fn y -> y == i end)\n                    end\n                    a |> Enum.map(fn x -> x+1 end) |> Enum.sum\n                false -> \n                    a= list_words |> Enum.find_index(fn y -> y == x end) \n                    a = a+1\n            end\n        end\n        r  |> Enum.sort |> List.last \n        \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79174,"user_id":null,"body":"defmodule Kata do\n  def solve(s) do\n    Regex.scan(~r\/[^aeiou]+\/, s)\n    |> List.flatten()\n    |> Enum.map(fn s -> to_charlist(s) |> Enum.map(&(&1 - 96)) |> Enum.sum() end)\n    |> Enum.max()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79175,"user_id":null,"body":"defmodule Kata do\n  def solve(s) do\n    s\n    |> String.split(~r\/[aeiou]\/)\n    |> Enum.map(&String.to_charlist\/1)\n    |> Enum.map(fn list ->\n      list\n      |> Enum.map(&(&1 - ?a + 1))\n      |> Enum.sum()\n    end)\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59ca8246d751df55cc00014c":[{"id":79176,"user_id":76,"body":"defmodule Hero do\n  def hero(bullets, dragons) do\n    dragons * 2 <= bullets\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79177,"user_id":null,"body":"defmodule Hero do\n\n  @bulletsToDefeateDragon 2\n  \n  @doc \"\"\"\n  Can hero hero with given number of bullets and dragons.\n  \n  ## Parameters\n  \n    - bullets: number of bullets\n    - dragons: number of dragons\n    \n  ## Example\n  \n    iex> Hero.hero(10, 5)\n    true\n    \n    iex> Hero.hero(7, 4)\n    false\n  \"\"\"\n  @spec hero(non_neg_integer(), non_neg_integer()) :: boolean()\n  def hero(bullets, dragons) do\n    bullets >= dragons * @bulletsToDefeateDragon\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79178,"user_id":null,"body":"defmodule Hero do\n  def hero(bullets, dragons) when 2 * dragons <= bullets, do: true\n  def hero(_bullets, _dragons), do: false\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79179,"user_id":250,"body":"defmodule Hero do\n  def hero(bullets, dragons), do: bullets-dragons*2 >= 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79180,"user_id":527,"body":"defmodule Hero do\n  def hero(bullets, dragons) do\n    bullets >= dragons * 2\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79181,"user_id":null,"body":"defmodule Hero,do: def hero(a,b),do: a|>Kernel.>=(2*b)","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79182,"user_id":null,"body":"defmodule Hero do\n  def hero(bullets, dragons) do\n    if dragons*2 > bullets do\n      false\n    else true\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79183,"user_id":null,"body":"defmodule Hero do\n  def hero(bullets, dragons) do\n    cond do\n      dragons * 2 <= bullets -> true\n      dragons * 2 > bullets -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79184,"user_id":null,"body":"defmodule Hero do\n  def hero(bullets, dragons) do\n    case dragons*2 <= bullets do\n      true -> true\n      false -> false\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79185,"user_id":null,"body":"defmodule Hero do\n  def hero(bullets, dragons) when bullets >= dragons * 2 do\n true\n  end\n  \n  def hero(_,_) do\n   false\n   end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59ccf051dcc4050f7800008f":[{"id":79186,"user_id":null,"body":"defmodule Bud do\n\n    defp nbd1(n, i, factors) when n <  i * i    , do: factors\n    defp nbd1(n, i, factors) when n == i * i    , do: [i | factors]\n    defp nbd1(n, i, factors) when rem(n, i) == 0, do: nbd1(n, i + 1, [i, div(n, i) | factors])\n    defp nbd1(n, i, factors)                    , do: nbd1(n, i + 1, factors)\n    defp nbd(n)                                 , do: Enum.sum(nbd1(n, 2, [1]))\n\n    defp bud(cur, nd, _, _) when cur > nd, do: \"Nothing\"\n    defp bud(_, _, don, res) when don == true, do: res\n    defp bud(cur, nd, _, _) do\n        m = nbd(cur) - 1\n        if (cur == nbd(m) - 1) && (cur < m) do\n            bud(cur, nd, true, \"(\" <> Enum.join([cur, m], \" \") <> \")\")\n        else\n            bud(cur + 1, nd, false, \"\")\n        end\n    end\n\n    def buddy(start, nd), do: bud(start, nd, false, \"\")\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79187,"user_id":492,"body":"defmodule Bud do\n\n    defp nbd1(n, i, factors) when n <  i * i    , do: factors\n    defp nbd1(n, i, factors) when n == i * i    , do: [i | factors]\n    defp nbd1(n, i, factors) when rem(n, i) == 0, do: nbd1(n, i + 1, [i, div(n, i) | factors])\n    defp nbd1(n, i, factors)                    , do: nbd1(n, i + 1, factors)\n    defp nbd(n)                                 , do: Enum.sum(nbd1(n, 2, [1]))\n\n    defp bud(cur, nd, _, _) when cur > nd, do: \"Nothing\"\n    defp bud(_, _, don, res) when don == true, do: res\n    defp bud(cur, nd, _, _) do\n        m = nbd(cur) - 1\n        if (cur == nbd(m) - 1) && (cur < m) do\n            bud(cur, nd, true, Enum.join([cur, m], \" \"))\n        else\n            bud(cur + 1, nd, false, \"\")\n        end\n    end\n\n    def buddy(start, nd), do: bud(start, nd, false, \"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79188,"user_id":null,"body":"defmodule Bud do\n  def get_sum(num, sum \\\\ 1, i \\\\ 2)\n  def get_sum(num, sum, i) when i < num \/ i do\n    if rem(num, i) == 0 do\n      get_sum(num, sum + i + num \/ i, i + 1)\n    else\n      get_sum(num, sum, i + 1)\n    end\n  end\n  def get_sum(0, _sum, _i), do: 0\n  def get_sum(num, sum, _i) do\n    sqrt = :math.sqrt(num) |> round()\n    if rem(num, sqrt) == 0, do: sum + sqrt |> round(), else: sum |> round()\n  end\n\n\n  def buddy(n, limit) when n < limit do\n    m = get_sum(n) - 1\n    sum_m = get_sum(m)\n    \n    if m > n and sum_m == n + 1 do\n      \"#{n} #{m}\"\n    else\n      buddy(n + 1, limit)\n    end\n  end\n  \n  def buddy(_n, _limit), do: \"Nothing\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79189,"user_id":null,"body":"defmodule Bud do\n  def count_facts(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(div(n, p), p)\n    {n2, count + 1}\n  end\n\n  def count_facts(n, _), do: {n, 0}\n\n  def prime_division(n, p \\\\ 2)\n\n  def prime_division(n, p) when p * p > n do\n    if n > 1, do: [{n, 1}], else: []\n  end\n\n  def prime_division(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(n, p)\n    [{p, count} | prime_division(n2, p + 1)]\n  end\n\n  def prime_division(n, p), do: prime_division(n, p + 1)\n\n  def pow(_, 0), do: 1\n  def pow(a, b), do: a * pow(a, b - 1)\n\n  def factor_sum(n) do\n    (prime_division(n)\n     |> Enum.map(fn {a, b} -> div(pow(a, b + 1) - 1, a - 1) end)\n     |> Enum.reduce(1, &*\/2)) - n\n  end\n\n  def buddy(start, nd) do\n    Enum.find_value(\n      start..nd,\n      \"Nothing\",\n      fn i ->\n        s = factor_sum(i)\n        if s > i && factor_sum(s - 1) == i + 1, do: \"#{i} #{s - 1}\"\n      end\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79190,"user_id":168,"body":"defmodule Bud do\n    def sum_divs(n) do\n      2..trunc(:math.sqrt(n))\n      |> Enum.filter(&(rem(n, &1) == 0))\n      |> Enum.flat_map(&(if &1 * &1 != n do [&1, div(n, &1)] else [&1] end))\n      |> Enum.sum\n    end\n  \n    def buddy(start, nd) do\n      if start > nd do \n        \"Nothing\"\n      else\n        t = sum_divs(start)\n        if t > start && sum_divs(t) == start do\n          \"#{start} #{t}\"\n        else\n          buddy(start + 1, nd)\n        end\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79191,"user_id":null,"body":"defmodule Bud do\n    def buddy(n, limit) do\n      if n > limit do \n        \"Nothing\"\n      else\n        m = s(n) - 1\n        if m > n and s(m) == n + 1 do\n          \"#{n} #{m}\"\n        else\n          buddy(n + 1, limit)\n        end\n      end\n    end\n    \n    defp proper_divisors(n) do\n      1..floor(:math.sqrt(n))\n      |> Enum.filter(fn d -> rem(n, d) == 0 end)\n    end\n    \n    defp s(n) do\n      n\n      |> proper_divisors()\n      |> Enum.reduce(-n, fn \n        d, acc when div(n, d) == d -> acc + d\n        d, acc -> acc + d + div(n, d)\n      end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79192,"user_id":null,"body":"defmodule Bud do\n\n  def buddy(start, stop), do: get_buddy(start, stop)\n\n  defp get_buddy(start, stop) when start > stop, do: \"Nothing\"\n  defp get_buddy(start, stop) do\n    sum = get_sum_of_divisors(start)\n    case sum - 1 > start and start == get_sum_of_divisors(sum - 1) - 1 do\n      true -> \"#{start} #{sum - 1}\"\n      false -> get_buddy(start + 1, stop)\n    end\n  end\n\n  defp get_sum_of_divisors(n) do\n    1..round(:math.pow(n, 0.5))\n    |> Enum.filter(& rem(n, &1) == 0)\n    |> Enum.map(& [&1, div(n, &1)])\n    |> List.flatten\n    |> Enum.uniq\n    |> Enum.sum\n    |> Kernel.-(n)\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79193,"user_id":null,"body":"defmodule Bud do\n\n  def buddy(start, nd) do\n    n = start\n    m = Enum.sum(divisors(n)) - 1\n\n    cond do\n      start > nd -> \"Nothing\"\n      m >= n and n == Enum.sum(divisors(m)) - 1 -> \"#{n} #{m}\"\n      true -> buddy(start + 1, nd)\n    end\n  end\n\n  def divisors(0) do\n    []\n  end\n\n  def divisors(1) do\n    [1]\n  end\n\n  def divisors(x) do\n    sqrt = :math.sqrt(x) |> ceil\n    divs = 2..sqrt |> Enum.filter(fn i -> rem(x, i) == 0 end)\n\n    ([1] ++ divs ++ Enum.map(divs, fn i -> floor(x \/ i) end))\n    |> Enum.uniq()\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79194,"user_id":null,"body":"defmodule Bud do\n    def buddy(start, limit) do\n      result = start..limit\n      |> Enum.reduce_while([], fn(n, _) ->\n        sn = n\n        |> proper_divisors\n        |> Enum.sum\n        m = sn - 1\n        sm = m\n        |> proper_divisors\n        |> Enum.sum\n        \n        if n == sm - 1 && n < m do\n          {:halt, [n, m]}\n        else\n          {:cont, []}\n        end\n      end)\n      \n      if result == [] do\n        \"Nothing\"\n      else\n        result |> Enum.join(\" \")\n      end\n    end\n    \n    def proper_divisors(0), do: []\n    def proper_divisors(n) do\n      2..ceil(:math.sqrt(n))\n      |> Enum.reduce([1], fn(x, acc) -> \n        if rem(n, x) == 0 do\n          if round(n \/ x) == x do\n            acc ++ [x]\n          else\n            acc ++ [x, round(n \/ x)]\n          end\n        else\n          acc\n        end\n      end) \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79195,"user_id":null,"body":"defmodule Bud do\n  def buddy(start, nd) do\n    n = start\n    m = divisor_sum_of(n) - 1\n\n    cond do\n      start > nd -> \"Nothing\"\n      m >= n and n == divisor_sum_of(m) - 1 -> \"#{n} #{m}\"\n      true -> buddy(start + 1, nd)\n    end\n  end\n\n  def divisors(0) do [] end\n  def divisors(1) do [1] end\n  def divisors(x) do\n    sqrt = :math.sqrt(x) |> ceil\n    divs = 2..sqrt |> Enum.filter(fn i -> rem(x, i) == 0 end)\n    \n    [1] ++ divs ++ Enum.map(divs, fn i -> floor(x\/i) end)\n    |> Enum.uniq\n  end\n\n  def divisor_sum_of(x) do\n    divisors(x)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59cfc000aeb2844d16000075":[{"id":79196,"user_id":2766,"body":"defmodule Kata do\n  def capitalize(downcase) do\n    upcase = String.upcase(downcase)\n    \n    [\n      downcase |> String.codepoints() |> Enum.map_every(2, &String.upcase\/1) |> Enum.join(),\n      upcase |> String.codepoints() |> Enum.map_every(2, &String.downcase\/1) |> Enum.join()\n    ]\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79197,"user_id":null,"body":"defmodule Kata do\n  def capitalize(s) do\n    [s, String.upcase(s)]\n    |> Enum.map(&String.graphemes\/1)\n    |> Enum.zip\n    |> Enum.reduce({[], []}, fn {x, y}, {u1, u2} -> {[x | u2], [y | u1]} end)\n    |> Tuple.to_list\n    |> Enum.map(&to_string\/1)\n    |> Enum.map(&String.reverse\/1)\n    |> Enum.sort\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79198,"user_id":null,"body":"defmodule Kata do\n    import Integer, only: [is_even: 1, is_odd: 1]\n    \n    def capitalize(s) do\n      [ capitalize_when_index(s, &is_even\/1), \n        capitalize_when_index(s, &is_odd\/1)  ]\n    end\n    \n    defp capitalize_when_index(string, function) do\n     string\n      |> String.graphemes\n      |> Enum.with_index\n      |> Enum.map_join(fn {letter, index} ->\n          if function.(index), do: String.upcase(letter), else: letter end)   \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79199,"user_id":null,"body":"defmodule Kata do\n  import Integer, only: [is_even: 1]\n    def capitalize(s) do\n        s \n        |> String.graphemes \n        |> Enum.with_index \n        |> Enum.reduce([\"\",\"\"], \n            fn \n              ({c, i}, [l, r]) when is_even(i) -> \n                [l <> String.upcase(c), r <> String.downcase(c)]\n              ({c, i}, [l, r]) ->\n                [l <> String.downcase(c), r <> String.upcase(c)]\n            end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79200,"user_id":null,"body":"defmodule Kata do\n    def capitalize(s), do:\n        s <> String.duplicate(\" \", 1 + rem(byte_size(s), 2)) <> s\n        |> String.replace(~r\/..?\/, &String.capitalize\/1)\n        |> String.split\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79201,"user_id":null,"body":"defmodule Kata do\n    def capitalize(s) do\n      chars = String.split(s, \"\")\n      odd = upcase_every_other(chars)\n      [first | rest] = chars\n      even = first <> upcase_every_other(rest)\n      [even, odd]\n    end\n    \n    def upcase_every_other(chars) do \n      chars\n      |> Enum.map_every(2, &String.upcase\/1)\n      |> Enum.join()\n    end \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79202,"user_id":null,"body":"defmodule Kata do\n  @spec capitalize(String.t) :: [String.t] \n  def capitalize(s) do\n    left_side = s\n    |> String.graphemes()\n    |> Enum.map_every(2, fn x -> String.upcase(x) end)\n    |> Enum.join(\"\")\n    \n    right_side = s\n    |> String.upcase()\n    |> String.graphemes()\n    |> Enum.map_every(2, fn x -> String.downcase(x) end)\n    |> Enum.join(\"\")\n    \n    [left_side, right_side]\n  end\n\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79203,"user_id":null,"body":"defmodule Kata do\n  def capitalize(s) do\n    chars = String.graphemes(s)\n    first_flip = flip_chars(chars, true) |> Enum.join\n    second_flip = flip_chars(chars, false) |> Enum.join\n    [first_flip, second_flip]\n  end\n  \n  def flip_chars([head | tail], true) do\n    [String.upcase(head) | flip_chars(tail, false)]\n  end\n  \n  def flip_chars([head | tail], false) do\n    [head | flip_chars(tail, true)]\n  end\n  \n  def flip_chars([], _) do\n    []\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79204,"user_id":null,"body":"defmodule Kata do\n  def capitalize(s) do\n    even = s |> String.graphemes() |> capitalize_even() |> Enum.join()\n    odd = s |> String.graphemes() |> capitalize_even(1) |> Enum.join()\n    [even, odd]\n  end\n\n  def capitalize_even(graphemes, index \\\\ 0)\n  def capitalize_even([], _index), do: []\n  def capitalize_even([hd | tl], index) when rem(index, 2) == 0 do\n    [String.capitalize(hd)] ++ capitalize_even(tl, index + 1)\n  end\n  \n  def capitalize_even([hd | tl], index) do\n    [hd] ++ capitalize_even(tl, index + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79205,"user_id":null,"body":"defmodule Kata do\n    def _capitalize([], _), do: []\n    def _capitalize([head | tail], false), do: [head | _capitalize(tail, true)]\n    def _capitalize([head | tail], true), do: [String.capitalize(head) | _capitalize(tail, false)]\n    def capitalize(s) do\n        [head | tail] = String.codepoints(s)\n        s1 = [String.capitalize(head) | _capitalize(tail, false)]\n        s2 = [head | _capitalize(tail, true)]\n        [Enum.join(s1), Enum.join(s2)]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59d7c910f703c460a2000034":[{"id":79206,"user_id":470,"body":"defmodule Quest do\n\tuse Bitwise, only_operators: true\n\t\n\tdef solomons_quest(r,x\\\\0,y\\\\0,z\\\\1)\n\tdef solomons_quest([],x,y,_),do: {x,y}\n\t\n\tdef solomons_quest([{q,d,n}|tr],x,y,z) do\n\t\tz2 = if q < 0,do: z >>> -q,else: z <<< q\n\t\t{x2,y2} = elem({{0,1},{1,0},{0,-1},{-1,0}},d)\n\t\tsolomons_quest(tr,x+x2*z2*n,y+y2*z2*n,z2)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79207,"user_id":null,"body":"defmodule Quest do\n  @dirs [{0, 1}, {1, 0}, {0, -1}, {-1, 0}]\n\n  def solomons_quest(ar) do\n    {x, y, _} =\n      Enum.reduce(ar, {0, 0, 0}, fn {shift, dir, dist}, {x, y, dil} ->\n        dil2 = dil + shift\n        dist2 = dist * Bitwise.bsl(1, dil2)\n        {dx, dy} = Enum.at(@dirs, dir)\n        {x + dx * dist2, y + dy * dist2, dil2}\n      end)\n\n    {x, y}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79208,"user_id":null,"body":"# DIRS = [[0,1], [1,0], [0,-1], [-1,0]]\n# def solomons_quest(arr)\n#   x = y = dil = 0\n#   arr.each { |shift, dir, dist|\n#     dil += shift\n#     dx, dy = DIRS[dir]\n#     x += dx * dist * 2 ** dil\n#     y += dy * dist * 2 ** dil\n#   }\n#   [x,y]\n# end\n\ndefmodule Quest do\n  @dirs [{0, 1}, {1, 0}, {0, -1}, {-1, 0}]\n\n  def solomons_quest(ar) do\n    {x, y, _} =\n      Enum.reduce(ar, {0, 0, 0}, fn {shift, dir, dist}, {x, y, dil} ->\n        dil2 = dil + shift\n        dist2 = dist * Bitwise.bsl(1, dil2)\n        {dx, dy} = Enum.at(@dirs, dir)\n        {x + dx * dist2, y + dy * dist2, dil2}\n      end)\n\n    {x, y}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79209,"user_id":null,"body":"defmodule Quest do\n\tdef solomons_quest(ar), do: track(ar)\n  \n  defp track(list, helper \\\\ [0, {0, 0}])\n  defp track([], [_, loc]), do: loc\n  defp track([{shift, dir, dist} | steps], [layer, {x, y}]) do\n    shifted = layer + shift\n    travelled = dist \/ :math.pow(0.5, shifted)\n    pos = \n      case dir do\n        0 -> {x, y + travelled}\n        1 -> {x + travelled, y}\n        2 -> {x, y - travelled}\n        3 -> {x - travelled, y}\n      end\n      \n    track(steps, [shifted, pos])\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79210,"user_id":null,"body":"defmodule Quest do\n\n  def solomons_quest(seq), do: quest(seq)\n\n  defp quest(seq), do: quest(seq, {0, {0, 0}})\n  defp quest([], {_, {x, y}}), do: {x, y}\n  defp quest([head | tail], {level, coords}), do: quest(tail, {get_level(head, level), get_coords(head, level, coords)})\n\n  defp get_level({level_delta, _, _}, level), do: Enum.max([level + level_delta, 0])\n\n  defp get_distance(level, distance), do: distance * round(:math.pow(2, level))\n\n  defp get_coords({level_delta, direction, distance}, level, {x, y}), do:\n    get_coords(get_level({level_delta, direction, distance}, level), direction, distance, {x, y})\n\n  defp get_coords(level, 0, distance, {x, y}), do: {x, y + get_distance(level, distance)}\n  defp get_coords(level, 1, distance, {x, y}), do: {x + get_distance(level, distance), y}\n  defp get_coords(level, 2, distance, {x, y}), do: {x, y - get_distance(level, distance)}\n  defp get_coords(level, 3, distance, {x, y}), do: {x - get_distance(level, distance), y}\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79211,"user_id":null,"body":"defmodule Quest do\n  require Bitwise\n  def solomons_quest(ar), do: solomons_quest(ar, 0, 0, 0)\n  def solomons_quest([], _, x, y), do: {x, y}\n  def solomons_quest([{a, b, c}|tail], t, x, y) do\n      r = Bitwise.bsl(1,t+a)\n    cond do\n      b == 0 ->\n        solomons_quest(tail, t+a, x, y+r*c)\n      b == 1 ->\n        solomons_quest(tail, t+a, x+r*c, y)\n      b == 2 ->\n        solomons_quest(tail, t+a, x, y-r*c)\n      b == 3 ->\n        solomons_quest(tail, t+a, x-r*c, y)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79212,"user_id":null,"body":"defmodule Quest do\n  def solomons_quest(ar), do: solomons_quest(ar, 0, 0, 0)\n  def solomons_quest([], _, x, y), do: {x, y}\n  def solomons_quest([{a, b, c}|tail], t, x, y) do\n    r = :math.pow(2, t+a) |> trunc\n    cond do\n      b == 0 ->\n        solomons_quest(tail, t+a, x, y+r*c)\n      b == 1 ->\n        solomons_quest(tail, t+a, x+r*c, y)\n      b == 2 ->\n        solomons_quest(tail, t+a, x, y-r*c)\n      b == 3 ->\n        solomons_quest(tail, t+a, x-r*c, y)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79213,"user_id":null,"body":"defmodule Quest do\n    import Bitwise, only: [bsl: 2]\n\n  \tdef solomons_quest(a), do: a\n        |> Enum.reduce({{0,0},0},\n        fn {k,d,n},{{x,y},l} ->\n            l = k+l\n            n = n*bsl(1,l)\n            { case d do\n                0 -> {x,y+n}\n                1 -> {x+n,y}\n                2 -> {x,y-n}\n                3 -> {x-n,y}\n            end, l }\n        end)\n        |> elem(0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79214,"user_id":null,"body":"defmodule Quest do\n\tdef solomons_quest(ar) do\n    steps = Enum.count(ar)\n    update_timelayers(ar, 1, steps)\n  end\n  def update_timelayers(ar, index, steps) when index == steps do\n\t\they = Enum.reduce(ar,[0, 0], fn {timelayer,direction,distance}, position ->\n      true_distance = distance * :math.pow(2, timelayer)\n      case direction do\n      0 ->  List.update_at(position, 1 , &(&1 + true_distance)) \n      1 ->  List.update_at(position, 0 , &(&1 + true_distance))\n      2 ->  List.update_at(position, 1 , &(&1 - true_distance))\n      3 ->  List.update_at(position, 0 , &(&1 - true_distance))\n      end\n    end)\n    {List.first(hey),List.last(hey)}\n  end\n  def update_timelayers(ar, index, steps) do\n    old_timelayer = Enum.at(ar, index - 1)\n    |> Tuple.to_list()\n    |> Enum.at(0)\n    to_update = Enum.at(ar, index)\n    |>Tuple.to_list()\n    updated = List.update_at(to_update, 0 , &(&1 + old_timelayer))\n    |> List.to_tuple()\n    new_ar = List.update_at(ar, index , &(&1 = updated))\n    update_timelayers(new_ar, index + 1,steps)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79215,"user_id":null,"body":"defmodule Quest do\n\tdef solomons_quest(ar) do\n    sum_list(ar, {0,0,0})\n\tend\n  \n  def sum_list([head | tail], accumulator) do\n    sum_list(tail, move(head, accumulator))\n  end\n\n  def sum_list([], accumulator) do\n    {x, y, _pos} = accumulator\n    {x, y}\n  end\n  \n  def move(movement, accumulator) do\n    {speed, direction, distance} = movement\n    {x, y, pos} = accumulator\n    new_pos = pos + speed\n    travel = :math.pow(2, new_pos) * distance\n    case direction do\n      0 -> {x, y+travel, new_pos}\n      1 -> {x+travel, y, new_pos}\n      2 -> {x, y-travel, new_pos}\n      3 -> {x-travel, y, new_pos}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59f08f89a5e129c543000069":[{"id":79216,"user_id":527,"body":"defmodule Kata do\n  def dup(ss) do\n    for s <- ss, do: s |> String.graphemes |> Enum.dedup |> Enum.join\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79217,"user_id":null,"body":"defmodule Kata do\n  def dup(words) do\n    Enum.map(words, fn word ->\n      word\n      |> String.graphemes()\n      |> Enum.dedup()\n      |> Enum.join()\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79218,"user_id":null,"body":"defmodule Kata do\n    def dup(ls) do\n        ls\n        |> Enum.map(fn x -> dedup(to_charlist(x), []) |> Enum.reverse |> to_string end)\n    end\n\n    defp dedup([], acc) do\n        acc\n    end\n\n    defp dedup([x], acc) do\n        [x | acc]\n    end\n\n    defp dedup([first, second | rest], acc) when first == second do\n        dedup([second | rest], acc)\n    end\n\n    defp dedup([first | rest], acc) do\n        dedup(rest, [first | acc])\n    end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79219,"user_id":null,"body":"defmodule Kata do\n def dup(ls) do\n    Enum.map(ls, fn string ->\n      String.graphemes(string)\n      |> Enum.reduce([], fn letter, acc ->\n        if List.last(acc) == letter do\n          acc\n        else\n          List.flatten([acc, letter])\n        end\n      end)\n      |> Enum.join(\"\")\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79220,"user_id":null,"body":"defmodule Kata do\n    def _dup([], res), do: res\n    def _dup([head | tail], res) do\n      last = List.last(res)\n      if head == last do\n        _dup(tail, res)\n      else\n        res = res ++ [head]\n        _dup(tail, res)\n      end\n    end\n    def dup(ls) do\n        # TODO: working solution\n      for x <- ls, do: Enum.join(_dup(String.codepoints(x), []))\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79221,"user_id":null,"body":"defmodule Kata do\n    def dup(ls) do\n        ls |> Enum.map(fn el -> el |> String.codepoints |> Enum.chunk_by(fn el -> el end) |> Enum.map(fn el -> Enum.uniq(el) end) |> Enum.join end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79222,"user_id":null,"body":"defmodule Kata do\n    def dup(ls) do\n        # TODO: working solution\n        Enum.map(ls, fn x -> Regex.replace(~r\/(.)\\1+\/, x, fn _,y -> \"#{y}\" end ) end )\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79223,"user_id":null,"body":"defmodule Kata do\n  def dup(ls) do\n    Enum.map(ls, fn s -> List.to_string(Enum.dedup(to_charlist(s))) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79224,"user_id":null,"body":"defmodule Kata do\n    def dup(ls) do\n        Enum.map(ls, &(String.graphemes(&1))) |> Enum.map(&(rm_dup(&1) |> Enum.reverse |> Enum.join))\n    end\n    \n    defp rm_dup([]), do: []\n    defp rm_dup([head | tail]), do: rm_dup(tail, head, [head])\n    \n    defp rm_dup([head | tail], prev, result) when head == prev, do: rm_dup(tail, head, result)\n    defp rm_dup([head | tail], prev, result), do: rm_dup(tail, head, [head | result])\n    defp rm_dup(_, _, result), do: result\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79225,"user_id":null,"body":"defmodule Kata do\n    def dup(ls) do\n        Enum.map(ls, fn str -> Regex.replace(~r\/(.)\\1+\/, str, \"\\\\1\") end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a023c426975981341000014":[{"id":79226,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b), do: 180 - (a + b)\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79227,"user_id":527,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    180 - a - b\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79228,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b), do: 180 - a - b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79229,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    # your code here\n    180 - (a+b)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79230,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    two_sides = a + b\n    final_angle = 180 - two_sides\n    final_angle\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79231,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    c = 180 - a - b\n    c\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79232,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    180 - a - b\n  end\nend\n\n#assert other_angle(45, 43) == 92","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79233,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    get_missing_angle(180, a, b)\n  end\n\n  def get_missing_angle(interior, a, b), do: interior - a - b\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79234,"user_id":null,"body":"defmodule Triangle do\n  @sum_of_angles 180\n  \n  def other_angle(y, z), do: @sum_of_angles - y - z\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79235,"user_id":null,"body":"defmodule Triangle do\n  def other_angle(a, b) do\n    c = 180 - a - b\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a03b3f6a1c9040084001765":[{"id":79236,"user_id":817,"body":"defmodule Kata do\n  def angle(n) when n > 2 do\n    180 * (n - 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79237,"user_id":527,"body":"defmodule Kata do\n  def angle(n) do\n    180 * (n - 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79238,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do\n    # your code here \n    (n-2)*180\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79239,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do\n    180 + (n - 3) * 180\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79240,"user_id":null,"body":"defmodule Kata do\n  def angle(n) when n > 2  do\n    (n - 2) * 180\n  end\n  \n  def angle(n), do: \"N is #{n}\" \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79241,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do    \n    \n    if (n == 3) do\n     180\n    else \n      (n-3) * 180 + 180    \n    end   \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79242,"user_id":null,"body":"defmodule Kata do\n  def angle(n), do: round(Enum.reduce(0..(n - 1), 0, fn _, a -> a + 180 - 360 \/ n end))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79243,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do\n  round((((n - 2) * 180) \/ n) * n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79244,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do\n    n * 180 - 360\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79245,"user_id":null,"body":"defmodule Kata do\n  def angle(n) do\n    180.0 * (n - 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a045fee46d843effa000070":[{"id":79246,"user_id":null,"body":"defmodule FactDecomp do\n\n  def decomp(n) do\n      n\n      |> factorial\n      |> Enum.map(&prime_factors\/1)\n      |> List.flatten\n      |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1 + 1)) end)\n      |> Enum.into([])\n      |> Enum.sort_by(fn {a,_} -> a end)\n      |> Enum.map(&tuple_to_string\/1)\n      |> Enum.join(\" * \")\n  end\n  \n  def tuple_to_string({a,1}), do: \"#{a}\"\n  def tuple_to_string({a,b}), do: \"#{a}^#{b}\"\n  \n  def factorial(n), do: for x <- 2..n, do: x \n  \n  def prime_factors(1, _, fs), do: fs\n  def prime_factors(n, d, fs) when rem(n,d) == 0, do: prime_factors(div(n,d), d, [d|fs])\n  def prime_factors(n, d, fs), do: prime_factors(n, d+1, fs) \n \n  def prime_factors(n), do: prime_factors(n, 2, [])\n  \n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79247,"user_id":null,"body":"defmodule FactDecomp do\n\n  def decomp(n) do\n      3..n\n        |> Enum.reduce(%{2 => 1}, fn \n          number, factorizado -> process_number(number, factorizado)\n        end)\n        |> Enum.to_list()\n        |> Enum.sort\n        |> Stream.map(fn\n          {primo, 1} -> primo |> Integer.to_string\n          {primo, count} -> \"#{primo}^#{count}\"\n        end)\n        |> Enum.join(\" * \")\n  end\n  \n  defp process_number(number, factorizado) do\n    list_primos = factorizado |> Map.keys\n    if list_primos |> Enum.all?(fn primo -> rem(number, primo) != 0 end) do\n      Map.put(factorizado, number, 1)\n    else\n      factorizar(number, list_primos, factorizado)\n    end\n  end\n  \n  defp factorizar(1, _list_primos, factorizado), do: factorizado\n  defp factorizar(number, [primo | tail] = list_primos, factorizado) do\n    if rem(number, primo) == 0 do\n      factorizar(div(number, primo), list_primos, Map.update!(factorizado, primo, &(&1+1)))\n    else\n      factorizar(number, tail, factorizado)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79248,"user_id":null,"body":"defmodule FactDecomp do\n  def is_prime?(x) do\n    sqrt = :math.sqrt(x) |> round\n    any_prime = 2..sqrt |> Enum.any?(fn item -> rem(x, item) == 0 end)\n    !any_prime\n  end\n\n  def calculate_power(x, y) when x <= y do\n    div(x, y)\n  end\n\n  def calculate_power(n, prime) do\n    div(n, prime) + calculate_power(div(n, prime), prime)\n  end\n\n  def power_string(prime, power) when power == 1 do\n    \"#{prime}\"\n  end\n\n  def power_string(prime, power) do\n    \"#{prime}^#{power}\"\n  end\n\n  def get_power(n, prime) do\n    total_power = calculate_power(n, prime)\n    power_string(prime, total_power)\n  end\n\n  def decomp(n) when n == 1 do\n    \"1\"\n  end\n\n  def decomp(n) when n == 2 do\n    \"2\"\n  end\n\n  def decomp(n) do\n    all_primes_above_3 = 4..n |> Enum.filter(fn item -> is_prime?(item) end)\n    all_primes = [2, 3] ++ all_primes_above_3\n    Enum.map(all_primes, fn item -> get_power(n, item) end) |> Enum.join(\" * \")\n  end\nend\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79249,"user_id":492,"body":"defmodule FactDecomp do\n  defp sieve(primes, []), do: primes\n  defp sieve(primes, [prime|candidates]) do\n      [prime|sieve(primes, reject_multiples(candidates, prime))]\n  end\n  defp reject_multiples(numbers, factor) do\n      Enum.reject(numbers, &(rem(&1, factor) == 0))\n  end\n  defp initial_candidates(limit) do\n      Enum.into(2..limit, [])\n  end\n  def primes_to(limit) do\n      sieve([], initial_candidates(limit))\n  end\n  defp power(n, p, s) when n < p, do: s\n  defp power(n, p, s) do\n      power(div(n, p), p, s + div(n, p))\n  end\n  defp power_in(n, p), do: power(n, p, 0)\n  def decomp(n) do\n      primes_to(n)\n      |> Enum.map(\n          fn(x) ->\n              p = power_in(n, x)\n              if (p == 1) do\n                  x |> Integer.to_string()\n              else\n                  \"#{x}^#{p}\"\n              end\n          end\n      )\n      |> Enum.join(\" * \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79250,"user_id":null,"body":"defmodule FactDecomp do\n\n  def decomp(n) do\n      1..n |> Enum.map(fn x -> prime_factors(x, 2) end) |> List.flatten\n      |> Enum.reduce(%{}, &Map.update(&2, &1, 1, fn x -> x+1 end)) |> Enum.sort |> Enum.map(fn {x,y} -> if y > 1, do: Integer.to_string(x) <> \"^\" <> Integer.to_string(y), else: Integer.to_string(x) end) |> Enum.join(\" * \")\n  end\n  \n  defp prime_factors(1, _), do: []\n  defp prime_factors(x, n) when x < n, do: []\n  \n  defp prime_factors(x, n) do\n    if rem(x,n) == 0 do\n      [n | prime_factors(div(x,n), n)]\n    else\n      prime_factors(x, n+1)\n    end\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79251,"user_id":null,"body":"defmodule FactDecomp do\n  def decomp(n) do\n    for p <- primes_to(n) do\n      exp = get_exponent(p, n)\n      if exp > 1, do: \"#{p}^#{exp}\", else: \"#{p}\"\n    end\n    |> Enum.join(\" * \")\n  end\n  \n  # Using a derivation of Legendre's formula to get the exponent of a factor\n  defp floor_log(base, n), do: trunc(:math.log(n) \/ :math.log(base))  \n  defp get_exponent(p, n), do: Enum.reduce(1..floor_log(p, n), 0, fn(x, acc) -> acc + trunc(n \/ :math.pow(p, x)) end)\n  \n  defp primes_to(limit), do: sieve(Enum.to_list(2..limit))\n  defp sieve([h|t]), do: [h|sieve(t -- for n <- 1..length(t), do: h*n)]\n  defp sieve([]), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79252,"user_id":null,"body":"defmodule FactDecomp do\n  def isPrime?(n, _) when n < 2, do: false\n  def isPrime?(n, _) when n in [2, 3], do: true\n  def isPrime?(n, i) when i == n, do: true\n  def isPrime?(n, i) do\n    if (rem(n, i) == 0) do\n      false\n    else\n      isPrime?(n, i+1)\n    end\n  end\n  \n  def checkDivisible(prime, n, power, powers) do\n    times = :math.floor(n \/ :math.pow(prime, power))\n    if (times < 1) do\n      if (powers > 1) do\n        \"#{prime}^#{trunc(powers)}\"\n      else\n        \"#{prime}\"\n      end\n    else\n      checkDivisible(prime, n, power + 1, powers + times)\n    end\n  end\n  \n  def findPrimeFactors(primes, n) do\n    Enum.map(primes, fn prime -> \n      checkDivisible(prime, n, 1, 0)\n    end)\n  end\n\n  def decomp(n) do\n      range = 1..n\n      list = Enum.to_list(range)\n      \n      primes = Enum.filter(list, fn prime ->\n        isPrime?(prime, 2)\n      end)\n      \n      factorsList = findPrimeFactors(primes, n)\n      \n      Enum.join(factorsList, \" * \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79253,"user_id":null,"body":"defmodule FactDecomp do\n  def count_facts(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(div(n, p), p)\n    {n2, count + 1}\n  end\n\n  def count_facts(n, p), do: {n, 0}\n\n  def prime_division(n, p \\\\ 2)\n\n  def prime_division(n, p) when p * p > n do\n    if n > 1, do: [{n, 1}], else: []\n  end\n\n  def prime_division(n, p) when rem(n, p) == 0 do\n    {n2, count} = count_facts(n, p)\n    [{p, count} | prime_division(n2, p + 1)]\n  end\n\n  def prime_division(n, p), do: prime_division(n, p + 1)\n\n  def decomp(n) do\n    factors =\n      Enum.reduce(\n        2..n,\n        %{},\n        fn i, acc ->\n          prime_division(i) |> Map.new() |> Map.merge(acc, fn _, v1, v2 -> v1 + v2 end)\n        end\n      )\n\n    Map.keys(factors)\n    |> Enum.sort()\n    |> Enum.map(fn p -> if factors[p] > 1, do: \"#{p}^#{factors[p]}\", else: \"#{p}\" end)\n    |> Enum.join(\" * \")\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79254,"user_id":null,"body":"defmodule FactDecomp do\n  def decomp(1), do: \"1\"\n  def decomp(n) do\n      # your code\n      get_factors(n,[])\n      |> aggregate()\n      |> format()\n  end\n  def aggregate(list) do\n    list\n    |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1+1))end)\n    |> Map.to_list()\n    |> Enum.sort(&(elem(&1,0)>=elem(&2,0)))\n  end\n  def format(list) do\n    list\n    |> Enum.map(&(get_string\/1))\n    |> Enum.reduce(\"\", &(&1 <> &2))\n    |> trim()\n  end\n  def get_string({number, 1}), do: \"#{number} * \"\n  def get_string({number, count}), do:  \"#{number}^#{count} * \"\n  def trim(string), do: String.slice(string, 0..-4)\n  def get_factors(2, acc), do: [2 | acc]\n  def get_factors(n, acc), do: get_factors(n-1, get_divisors(n, 2, [])++ acc)\n  def get_divisors(1, _divisor, acc), do: acc\n  def get_divisors(number, divisor, acc) do\n    if rem(number, divisor) == 0 do\n      get_divisors(div(number,divisor), divisor, [divisor|acc])\n    else\n      get_divisors(number,divisor+1,acc)\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79255,"user_id":null,"body":"defmodule FactDecomp do\n\n  def decomp(n) do\n    Enum.map(2..n, fn i -> prime_factors(i) |> number_counts end) |>\n    Enum.reduce(%{},\n      fn x, acc ->\n        Map.merge(x, acc, fn _k, v1, v2 ->\n          v1 + v2\n        end\n          )\n      end\n    )|>\n    format_output\n\n  end\n\n  def prime_factors(n) do\n    prime_factors(n, 2, [])\n  end\n\n  def prime_factors(n, i, li) do\n    cond do\n      i == n ->\n        [i|li]\n      rem(n, i) == 0 ->\n        prime_factors(div(n,i), i, [i|li])\n      true ->\n        prime_factors(n, i+1, li)\n    end\n  end\n\n  def number_counts(li) do\n    li |>\n    Enum.uniq |>\n    Enum.reduce(%{},\n      fn x, acc -> Map.merge(acc, %{x => Enum.count(li, fn y -> y == x end)  }) end\n    )\n  end\n\n  def pair_to_string(key, 1) do\n    \"#{key}\"\n  end\n\n  def pair_to_string(key, value) do\n    \"#{key}^#{value}\"\n  end\n\n  def format_output(li) do\n    li |>\n    Enum.map(fn {key, value} -> %{key => value}end)|>\n    Enum.sort |>\n    Enum.map(fn x ->\n      {key, value} = x |> Enum.find(fn _x -> true end)\n      pair_to_string(key, value)\n    end)|>\n    Enum.join(\" * \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a057ec846d843c81a0000ad":[{"id":79256,"user_id":492,"body":"defmodule Cycle1N do\n\n  defp cycleaux(n, v, i) do\n    vv = rem(v * 10, n)\n    if (vv === 1) do i else cycleaux(n, vv, i + 1) end\n  end\n\n  def cycle(n) do\n    if (rem(n, 2) === 0 || rem(n, 5) === 0) do (-1) else cycleaux(n, 1, 1) end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79257,"user_id":53,"body":"defmodule Cycle1N do\n\n  def cycle(n) when rem(n, 2) == 0, do: -1\n  def cycle(n) when rem(n, 5) == 0, do: -1\n  def cycle(n), do: aux(n, rem(10, n), 1)\n  defp aux(_, m, i) when m == 1, do: i\n  defp aux(n, m, i), do: aux(n, rem(m * 10, n), i + 1)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79258,"user_id":null,"body":"defmodule Cycle1N do\n  def cycle(n) do\n    if(Integer.gcd(n, 10) != 1) do\n        -1\n    else\n        find_loop(1, n, rem(10, n))\n    end\n  end\n\n  defp find_loop(now, _num, 1), do: now\n  defp find_loop(now, num, r), do: find_loop(now + 1, num, rem(10 * r, num))\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79259,"user_id":492,"body":"defmodule Cycle1N do\n\n  defp cycleaux(n, v, i) do\n    vv = rem(v * 10, n)\n    if (vv === 1) do i else cycleaux(n, vv, i + 1) end\n  end\n\n  def cycle(n) do\n    if (rem(n, 2) === 0 || rem(n, 5) === 0) do (-1) else cycleaux(n, 1, 1) end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79260,"user_id":null,"body":"defmodule Cycle1N do\n  def cycle(n) do\n    if Integer.gcd(n, 10) != 1 do\n      -1\n    else\n      Stream.iterate({1, rem(9, n)}, fn {i, v} -> {i + 1, rem(v * 10 + 9, n)} end)\n      |> Enum.find(fn {i, v} -> v == 0 end)\n      |> elem(0)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79261,"user_id":null,"body":"defmodule Cycle1N do\n\n  def cycle(n), do: get_cycle(n)\n\n  defp get_cycle(n) when rem(n, 2) == 0 or rem(n, 5) == 0, do: -1\n  defp get_cycle(n), do: get_cycle(n, 1, rem(10, n))\n  defp get_cycle(_, counter, 1), do: counter\n  defp get_cycle(n, counter, r), do: get_cycle(n, counter + 1, rem(r * 10, n))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79262,"user_id":null,"body":"defmodule Cycle1N do\n    defp loop(_n,1,i), do: i\n    defp loop(n,k,i), do: loop(n,rem(10*k,n),i+1)\n    \n    def cycle(n), do: if Integer.gcd(n,10) > 1, do: -1, else: loop(n,rem(10,n),1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79263,"user_id":null,"body":"defmodule Cycle1N do\n\n  def cycle(n) when n > 1 do\n   if gcd(n) == 1 do\n     while(n)\n   else\n    -1\n   end\n  end\n   \n  defp gcd(n, x \\\\10)\n  \n  defp gcd(n, x) when n == 0, do: x\n  \n  defp gcd(n, x), do: gcd(rem(x,n), n)\n  \n  defp while(n, t \\\\ 1, d \\\\ 1) do \n    case rem(d*10, n) do\n      1 -> t\n      _ -> while(n, t + 1, rem(d*10, n))\n    end\n  end\n  \n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79264,"user_id":null,"body":"defmodule Cycle1N do\n\n  def cycle(n) do\n    if Integer.gcd(n, 10) > 1 do\n      -1\n    else\n      Stream.iterate(\n        {1, 9},\n        fn {x, y} ->\n          {x + 1, rem(y * 10 + 9, n)}\n        end\n      )\n      |> Enum.find(\n        fn {_, y} ->\n          rem(y, n) == 0\n        end\n      )\n      |> elem(0)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79265,"user_id":null,"body":"defmodule Cycle1N do\n\n  def cycle(n) when n < 0, do: cycle(-n)\n  def cycle(n) do\n    coprime?(n, 10)\n    |> do_cycle(n)\n  end\n  \n  defp coprime?(1, 1), do: true\n  defp coprime?(a, a), do: false\n  defp coprime?(a, b) when a > b, do: coprime?(a-b, b)\n  defp coprime?(a, b), do: coprime?(a, b-a)\n\n  defp do_cycle(false, _), do: -1\n  defp do_cycle(true, n), do: do_cycle(%{}, 10, n, 0)\n  defp do_cycle(map, num, denom, cycle) do\n    new_num = case num < denom do\n                true -> num*10\n                false -> num\n              end\n    case map[new_num] do\n      nil -> #do divide\n             remainder = rem(new_num, denom)\n             map\n             |> Map.put(new_num, 1)\n             |> do_cycle(remainder, denom, cycle+1)\n      _ -> cycle\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a092d9e46d843b9db000064":[{"id":79266,"user_id":null,"body":"defmodule Solution do\n  def solve(l) do\n    l |> Enum.uniq() |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79267,"user_id":564,"body":"defmodule Solution do\n  def solve ns do\n    ns |> MapSet.new |> MapSet.to_list |> List.foldl(0, fn sum, n -> sum + n end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79268,"user_id":null,"body":"defmodule Solution do\n  def solve(l) do\n    l\n    |> Enum.uniq()\n    |> IO.inspect()\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79269,"user_id":null,"body":"defmodule Solution do\n  def solve(l) do\n    l |> Enum.filter(&((&1 * -1) not in l)) |> List.first\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79270,"user_id":null,"body":"defmodule Solution do\n  @spec solve([integer]) :: integer\n  def solve(list), do: list |> Enum.uniq |> Enum.sum\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79271,"user_id":null,"body":"defmodule Solution do\n  def solve(l) do\n    Enum.find(l, fn v -> Enum.find(l, & &1 == -v) == nil end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79272,"user_id":null,"body":"defmodule Solution do\n\n  def solve(l) do\n   l\n   |> Enum.uniq()\n   |> Enum.sum()\n  end\nend\n\n#test \"solve([0,113,-113,5,-5])\" do\n  #assert Solution.solve([0,113,-113,5,-5]) === 0\n#end 5\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79273,"user_id":null,"body":"defmodule Solution do\n\n  def solve(l) do\n   Enum.sort(l, &(abs(&1) <= abs(&2)))\n   |> Enum.uniq()\n   |> Enum.sum()\n   |> IO.inspect(limit: :infinity)\n  end\nend\n\n#test \"solve([0,113,-113,5,-5])\" do\n  #assert Solution.solve([0,113,-113,5,-5]) === 0\n#end 5\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79274,"user_id":null,"body":"defmodule Solution do\n  def solve(l), do: solve([], l)\n\n  def solve(data, []) do\n    List.first(data)\n  end\n\n  def solve(data, [head | tail]) do\n    IO.inspect({-head in data, data, head, tail})\n\n    if -head in data do\n      solve(List.delete(data, -head), tail)\n    else\n      solve([head | data], tail)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79275,"user_id":null,"body":"defmodule Solution do\n  def solve(l) do\n    Enum.sum(Enum.uniq(l))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a24a35a837545ab04001614":[{"id":79276,"user_id":null,"body":"defmodule InterlacedSpiralCipher do\n  def encode(s) do\n    n = ceil(:math.sqrt(String.length(s)))\n    s2 = String.pad_trailing(s, n * n)\n    tbl = :ets.new(:tbl, [])\n    :ets.insert(tbl, {:str, s2})\n\n    Enum.each(0..div(n - 1, 2), fn i ->\n      slen = n - 2 * i - 1\n      s3 = lookup(tbl, :str)\n\n      if slen == 0 do\n        :ets.insert(tbl, {{i, i}, String.at(s3, 0)})\n      else\n        [side0, side1, side2, side3] =\n          Enum.map(0..3, fn k -> for j <- 0..(slen - 1), do: String.at(s3, j * 4 + k) end)\n\n        :ets.insert(tbl, {:str, String.slice(s3, (slen * 4)..-1)})\n\n        Enum.each(i..(i + slen - 1), fn j ->\n          :ets.insert(tbl, {{i, j}, Enum.at(side0, j - i)})\n        end)\n\n        Enum.each(i..(i + slen - 1), fn j ->\n          :ets.insert(tbl, {{j, n - i - 1}, Enum.at(side1, j - i)})\n        end)\n\n        Enum.each((n - i - 1)..(i + 1), fn j ->\n          :ets.insert(tbl, {{n - i - 1, j}, Enum.at(side2, n - i - 1 - j)})\n        end)\n\n        Enum.each((n - i - 1)..(i + 1), fn j ->\n          :ets.insert(tbl, {{j, i}, Enum.at(side3, n - i - 1 - j)})\n        end)\n      end\n    end)\n\n    Enum.map_join(0..(n - 1), fn i ->\n      Enum.map_join(0..(n - 1), fn j -> lookup(tbl, {i, j}) end)\n    end)\n  end\n\n  def decode(s) do\n    n = ceil(:math.sqrt(String.length(s)))\n    tbl = :ets.new(:tbl, [])\n    :ets.insert(tbl, {:str, \"\"})\n\n    Enum.each(0..(n - 1), fn i ->\n      Enum.each(0..(n - 1), fn j ->\n        :ets.insert(tbl, {{i, j}, String.at(s, i * n + j)})\n      end)\n    end)\n\n    Enum.each(0..div(n - 1, 2), fn i ->\n      slen = n - 2 * i - 1\n      s3 = lookup(tbl, :str)\n\n      if slen == 0 do\n        :ets.insert(tbl, {:str, s3 <> lookup(tbl, {i, i})})\n      else\n        sides = [\n          Enum.map(i..(i + slen - 1), fn j -> lookup(tbl, {i, j}) end),\n          Enum.map(i..(i + slen - 1), fn j -> lookup(tbl, {j, n - i - 1}) end),\n          Enum.map((n - i - 1)..(i + 1), fn j -> lookup(tbl, {n - i - 1, j}) end),\n          Enum.map((n - i - 1)..(i + 1), fn j -> lookup(tbl, {j, i}) end)\n        ]\n\n        :ets.insert(\n          tbl,\n          {:str,\n           s3 <> Enum.join(for j <- 0..(slen - 1), k <- 0..3, do: Enum.at(sides, k) |> Enum.at(j))}\n        )\n      end\n    end)\n\n    String.trim_trailing(lookup(tbl, :str))\n  end\n\n  defp lookup(tbl, key) do\n    [{_, v}] = :ets.lookup(tbl, key)\n    v\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79277,"user_id":null,"body":"defmodule InterlacedSpiralCipher do\n\tdef get_dim(s) do\n    :erlang.ceil :math.sqrt String.length s\n  end\n  \n  def _get_seq(0), do: []\n  def _get_seq(1), do: [{0, 0}]\n  def _get_seq(n) do\n    outer = for i <- 0..n-2 do\n      [{i, 0}, {n-1, i}, {n-1-i, n-1}, {0, n-1-i}]\n    end |> List.flatten\n    inner = for {x, y} <- _get_seq(n-2), do: {x+1, y+1}\n    outer ++ inner\n  end\n  \n  def get_seq(n) do\n    for {x, y} <- _get_seq(n) do\n      x + y * n\n    end\n  end\n  \n  def encode(s) do\n\t\tn = get_dim s\n    seq = get_seq n\n    Stream.zip([to_charlist(s), seq]) |> Enum.reduce(Stream.cycle(' ') |> Enum.take(n*n),\n      fn {c, i}, list -> List.replace_at(list, i, c) end)\n    |> to_string\n\tend\n\t\n\tdef decode(s) do\n\t\tn = get_dim s\n    seq = get_seq n\n    seq |> Enum.reduce(\"\", fn i, acc -> acc <> String.at(s, i) end)\n    |> String.trim_trailing\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79278,"user_id":null,"body":"defmodule InterlacedSpiralCipher do\n\n  def encode(str), do: do_encode(str)\n\n  def decode(str), do: do_decode(str)\n\n  defp do_encode(str) do\n    square = get_square(ceil(:math.sqrt(String.length(str))))\n    str\n    |> String.graphemes\n    |> fill_square(square)\n    |> List.flatten\n    |> Enum.map(fn sym -> if sym == \"\", do: \" \", else: sym end)\n    |> Enum.join\n  end\n\n  defp do_decode(str) do\n    str\n    |> String.graphemes\n    |> to_square\n    |> get_from_square\n    |> Enum.reverse\n    |> Enum.join\n    |> String.trim_trailing(\" \")\n  end\n\n  defp get_square(len), do: List.duplicate(List.duplicate(\"\", len), len)\n\n  defp fill_square(seq, square), do: fill_square(seq, square, length(square), 0, 0, 0)\n  defp fill_square([], square, _, _, _, _), do: square\n\n  defp fill_square([head | tail], square, len, layer, 3, pos) when pos == len - 2 * (layer + 1), do:\n    fill_square(tail, fill_square_at(square, head, len, layer, 3, pos), len, layer + 1, 0, 0)\n\n  defp fill_square([head | tail], square, len, layer, 3, pos), do:\n    fill_square(tail, fill_square_at(square, head, len, layer, 3, pos), len, layer, 0, pos + 1)\n\n  defp fill_square([head | tail], square, len, layer, side, pos), do:\n    fill_square(tail, fill_square_at(square, head, len, layer, side, pos), len, layer, side + 1, pos)\n\n  defp fill_square_at(square, val, _len, layer, 0, pos), do: insert_at_matrix(square, val, layer + pos, layer)\n  defp fill_square_at(square, val, len, layer, 1, pos), do: insert_at_matrix(square, val, len - layer - 1, layer + pos)\n  defp fill_square_at(square, val, len, layer, 2, pos), do:\n    insert_at_matrix(square, val, len - layer - pos - 1, len - layer - 1)\n\n  defp fill_square_at(square, val, len, layer, 3, pos), do: insert_at_matrix(square, val, layer, len - layer - pos - 1)\n\n  defp insert_at_matrix(matrix, val, x, y), do: List.replace_at(matrix, y, List.replace_at(Enum.at(matrix, y), x, val))\n\n  defp to_square(seq), do: to_square(seq, get_square(ceil(:math.sqrt(length(seq)))), 0)\n  defp to_square([], square, _), do: square\n  defp to_square([head | tail], square, idx),\n       do: to_square(tail, insert_at_matrix(square, head, rem(idx, length(square)), div(idx, length(square))), idx + 1)\n\n  defp get_from_square(square), do: get_from_square(square, length(square), 0, 0, 0, [])\n  defp get_from_square(_, len, _, _, _, acc) when length(acc) == len * len, do: acc\n  defp get_from_square(square, len, layer, 3, pos, acc) when pos == len - 2 * (layer + 1), do:\n    get_from_square(square, len, layer + 1, 0, 0, [get_from_square_at(square, len, layer, 3, pos) | acc])\n\n  defp get_from_square(square, len, layer, 3, pos, acc), do:\n    get_from_square(square, len, layer, 0, pos + 1, [get_from_square_at(square, len, layer, 3, pos) | acc])\n\n  defp get_from_square(square, len, layer, side, pos, acc), do:\n    get_from_square(square, len, layer, side + 1, pos, [get_from_square_at(square, len, layer, side, pos) | acc])\n\n  def get_from_square_at(square, _len, layer, 0, pos), do: get_from_matrix(square, layer + pos, layer)\n  def get_from_square_at(square, len, layer, 1, pos), do: get_from_matrix(square, len - layer - 1, layer + pos)\n  def get_from_square_at(square, len, layer, 2, pos), do:\n    get_from_matrix(square, len - layer - pos - 1, len - layer - 1)\n\n  def get_from_square_at(square, len, layer, 3, pos), do: get_from_matrix(square, layer, len - layer - pos - 1)\n\n  defp get_from_matrix(matrix, x, y), do: Enum.at(Enum.at(matrix, y), x)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79279,"user_id":null,"body":"defmodule InterlacedSpiralCipher do\n\tdef encode(s) do\n    square_size = get_square_size_of(s)\n\n    String.pad_trailing(s, square_size * square_size)\n    |> String.split(\"\", trim: true)\n    |> place_into_lists(square_size)\n    |> List.foldr([], fn cur_list, cur_square ->\n      wrap_over_square(cur_list, cur_square)\n    end)\n    |> List.flatten\n    |> Enum.join\n\tend\n\t\n\tdef decode(s) do\n\t\tsquare_size = get_square_size_of(s)\n\n    String.split(s, \"\", trim: true)\n    |> Enum.chunk_every(square_size)\n    |> unwrap_into_lists\n    |> extract_from_lists\n    |> List.flatten\n    |> Enum.join\n    |> String.trim_trailing\n\tend\n\n  def place_into_lists(charlist, width) when width <= 2, do: [charlist]\n  def place_into_lists(charlist, cur_sq_width) do\n    {cur_list, next_list} = Enum.split(charlist, 4 * (cur_sq_width - 1))    \n    chunks = Enum.chunk_every(cur_list, 4)\n\n    [\n      for i <- 0..3, j <- 0..cur_sq_width-2 do\n        chunks |> Enum.at(j) |> Enum.at(i)\n      end | \n      place_into_lists(next_list, cur_sq_width - 2)\n    ]\n  end\n\n  def extract_from_lists([list]) when length(list) <= 4, do: [list]\n  def extract_from_lists([head | rest]) do\n    chunk_size = div(length(head), 4)\n    side_chunks = Enum.chunk_every(head, chunk_size)\n\n    [\n      for i <- 0..chunk_size-1, j <- 0..3 do\n        side_chunks |> Enum.at(j) |> Enum.at(i)\n      end |\n      extract_from_lists(rest)\n    ]\n  end\n\n  def wrap_over_square([elem], []), do: [[elem]]\n  def wrap_over_square([a, b, c, d], []), do: [[a, b], [d, c]]\n  def wrap_over_square(list, square) do\n    width = length(square) + 2\n    { first_half, second_half } = Enum.split(list, 2 * width - 2)\n\n    { top, right } = Enum.split(first_half, width)\n    { bottom, left } = Enum.split(second_half, width)\n    \n    middle = [ Enum.reverse(left), square, right]\n    |> Enum.zip\n    |> Enum.map(fn {l, list, r} -> [l | list] ++ [r] end)\n\n    [top | middle] ++ [Enum.reverse(bottom)]\n  end\n  \n  def unwrap_into_lists([elem]), do: [[elem]]\n  def unwrap_into_lists([[a, b], [d, c]]), do: [[a, b, c, d]]\n  def unwrap_into_lists(square) do\n    width = length(square)\n    {[top | middle], [bottom_rev]} = Enum.split(square, width - 1)\n\n    {_, { left, inner_sq_rev, right_rev }} =\n    Enum.map_reduce(middle, {[], [], []}, fn (list, {l_list, i_list, r_list}) -> \n      {[left | inner], [right]} = Enum.split(list, width - 1)\n      { -1, {[left | l_list], [inner | i_list], [right | r_list]} }\n    end)\n\n    [ top ++ Enum.reverse(right_rev) ++ Enum.reverse(bottom_rev) ++ left \n      | Enum.reverse(inner_sq_rev) |> unwrap_into_lists ]\n  end\n\n  defp get_square_size_of(str), do: String.length(str) |> :math.sqrt |> ceil\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79280,"user_id":null,"body":"defmodule InterlacedSpiralCipher do\n\tdef encode(s) do\n    s\n    |> find_square()\n    |> Enum.map(&Enum.map(&1, fn x -> String.at(s, x - 1) || \" \" end))\n    |> Enum.join()\n\tend\n\t\n\tdef decode(s) do\n    s\n    |> find_square()\n    |> List.flatten()\n    |> Enum.zip(String.codepoints(s))\n    |> Enum.sort()\n    |> Enum.map(fn {_, s} -> s end)\n    |> Enum.join()\n    |> String.trim_trailing()\n\tend\n  \n  defp find_square(str) do\n    str\n    |> String.length()\n    |> :math.sqrt()\n    |> ceil()\n    |> build_square()\n  end\n  \n  defp build_square(1), do: [[1]]\n  defp build_square(2), do: [[1,2],[4, 3]]\n  defp build_square(3), do: [[1,5,2],[8,9,6],[4,7,3]]\n  \n  defp build_square(len) do\n    sq = (len * len) - ((len - 2) * (len - 2))\n    \n    inter = \n      build_square(len - 2)\n      |> Enum.map(&Enum.map(&1, fn x -> x + sq end))\n    \n    row = for y <- 1..(len - 2), do: 4 * y + 1\n        \n    top_row = [1] ++ row ++ [2]\n    bottom_row = [4] ++ Enum.reverse(Enum.map(row, fn x -> x + 2 end)) ++ [3]\n    \n    inter\n    |> rotate()\n    |> List.insert_at(0, Enum.map(row, fn x -> x + 3 end))\n    |> rotate()\n    |> rotate()\n    |> List.insert_at(0, Enum.map(row, fn x -> x + 1 end))\n    |> rotate()\n    |> List.insert_at(0, top_row)\n    |> List.insert_at(-1, bottom_row)\n  end\n  \n  defp rotate(mat) do\n    mat\n    |> Enum.zip()\n    |> Enum.map(&(&1 |> Tuple.to_list() |> Enum.reverse()))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79281,"user_id":470,"body":"defmodule InterlacedSpiralCipher do\n\tdef encode(s) do\n\t\tln = s |> len() |> :math.sqrt() |> ceil()\n\t\t0..len(s)-1\n\t\t|> Enum.to_list()\n\t\t|> forge(ln-1,0,0)\n\t\t|> Enum.sort_by(&{elem(&1,0),elem(&1,1)})\n\t\t|> ix(0,len(s),ln)\n\t\t|> Enum.map_join(&(if &1 < 0,do: \" \",else: String.at(s,&1)))\n\tend\n\t\n\tdef decode(s) do\n\t\tln = s |> len() |> :math.sqrt() |> trunc()\n\t\t0..len(s)-1\n\t\t|> Enum.to_list()\n\t\t|> forge(ln-1,0,0)\n\t\t|> Enum.map_join(&(String.at(s,elem(&1,0)*ln+elem(&1,1))))\n\t\t|> String.trim_trailing(\" \")\n\tend\n\t\n\tdefp ix([{x,y,i}|nr],q,n,ln) do\n\t\tif x*ln+y != q do\n\t\t\t[-1 | ix([{x,y,i}|nr],q+1,n,ln)]\n\t\telse\n\t\t\t[i | ix(nr,q+1,n,ln)]\n\t\tend\n\tend\n\t\n\tdefp ix(_,i,n,_) when i == n,do: []\n\tdefp ix([],_,_,_),do: []\n\t\n\tdefp forge([i|nr],nc,lq,bq) do\n\t\tq = rem(i,4)\n\t\tbq = if q == 0 and i > 0,do: bq + 1,else: bq\n\t\t{lq,nc,bq} = if lq + bq == nc,do: {lq+1,nc-1,0},else: {lq,nc,bq}\n\t\t\n\t\t{x,y} = if rem(i,2) == 0 do\n\t\t\tif div(q,2) == 0,do: {lq,lq+bq},else: {nc,nc-bq}\n\t\telse\n\t\t\tif div(q-1,2) == 0,do: {lq+bq,nc},else: {nc-bq,lq}\n\t\tend\n\t\t\n\t\t[{x,y,i} | forge(nr,nc,lq,bq)]\n\tend\n\t\n\tdefp forge([],_,_,_),do: []\n\tdefp len(s),do: String.length(s)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a3357ae8058425bde002674":[{"id":79282,"user_id":null,"body":"defmodule IterativeRotationCipher do\n\tdef encode(n, word) do\n    splits    = word   |> calculate_splits()\n    word_size = splits |> Enum.count\n    space_map = Regex.replace(~r\/[^ ]+\/, word, \"~s\")\n    \n    1..n\n    |> Enum.reduce(word, fn _, acc ->\n      process_once(acc, word_size, splits, n, space_map, mode: :encode)\n    end)\n    |> String.replace_prefix(\"\", \"#{n} \")\n\tend\n\t\n\tdef decode(encoded) do\n\t\t[_, n, word] = Regex.run(~r\/\\A(\\d+) (.*)\\z\/sm, encoded)\n    \n    n         = String.to_integer(n)\n    splits    = word   |> calculate_splits()\n    word_size = splits |> Enum.count\n    space_map = Regex.replace(~r\/[^ ]+\/, word, \"~s\")\n    \n    1..n\n    |> Enum.reduce(word, fn _, acc ->\n      process_once(acc, word_size, splits, n, space_map, mode: :decode)\n    end)\n\tend\n  \n  # ----\n  \n  def calculate_splits(word) do\n    word\n    |> String.split(~r\/ +\/, trim: true)\n    |> Stream.with_index\n    |> Stream.flat_map(fn {w, i} -> List.duplicate(i, String.length(w)) end)\n    |> Enum.to_list\n  end\n  \n  def process_once(word, word_size, splits, n, space_map, mode: mode) do\n    word\n    |> string_split()\n    |> rotations(word_size, splits, n, mode: mode)\n    |> chunk_join(splits, space_map)\n  end\n  \n  def string_split(word) do\n    word\n    |> String.replace(\" \", \"\")\n    |> String.graphemes\n  end\n  \n  def rotations(chars, word_size, splits, n, mode: :encode) do\n    chars\n    |> rotate(n, word_size, dir: :right)\n    |> chunk_rotate(splits, n, dir: :right)\n  end\n  \n  def rotations(chars, word_size, splits, n, mode: :decode) do\n    chars\n    |> chunk_rotate(splits, n, dir: :left)\n    |> rotate(n, word_size, dir: :left)\n  end\n  \n  def chunk_join(chars, splits, space_map) do\n    chars\n    |> Stream.zip(splits)\n    |> Stream.chunk_by(fn {_, c} -> c end)\n    |> Stream.map(fn list -> list |> Enum.map(&elem(&1, 0)) |> Enum.join end)\n    |> Enum.reduce(space_map, fn word, acc ->\n      Regex.replace(~r\/~s\/ms, acc, word, global: false)\n    end)\n  end\n  \n  def chunk_rotate(chars, splits, n, dir: dir) do\n    chars\n    |> Stream.zip(splits)\n    |> Stream.chunk_by(fn {_, c} -> c end)\n    |> Stream.map(&rotate(&1, n, Enum.count(&1), dir: dir))\n    |> Stream.flat_map(fn list -> list |> Enum.map(&elem(&1, 0)) end)\n  end\n  \n  def rotate(chars, n, word_size, dir: :right) do\n    chars \n    |> rotate(word_size - rem(n, word_size), word_size, dir: :left)\n  end\n  \n  def rotate(chars, n, word_size, dir: :left) do\n    chars\n    |> Stream.cycle\n    |> Enum.slice(rem(n, word_size), word_size)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79283,"user_id":470,"body":"defmodule IterativeRotationCipher do\n\tdef encode(n,s) do\n\t\tsr = String.to_charlist(s)\n\t\tspc = space_indexes(sr)\n\t\tln = length(sr) - length(spc)\n\t\twordlens = wordlengths(s)\n\t\ttome = Enum.reduce(1..n, Enum.filter(sr,&(&1 != 32)), fn _,z -> z |> rot(ln,n) |> ix(wordlens,n) end)\n\t\t\"#{Integer.to_string(n)} #{meld(tome,spc,0)}\"\n\tend\n\t\n\tdef decode(s) do\n\t\t[n | [ss]] = String.split(s,\" \",parts: 2)\n\t\tn = String.to_integer(n)\n\t\tsr = String.to_charlist(ss)\n\t\tspc = space_indexes(sr)\n\t\tln = length(sr) - length(spc)\n\t\twordlens = wordlengths(ss)\n\t\tEnum.reduce(1..n-1, ix(Enum.filter(sr,&(&1 != 32)),wordlens,-n), fn _,z -> z |> rot(ln,-n) |> ix(wordlens,-n) end) |> rot(ln,-n) |> meld(spc,0) |> List.to_string()\n\tend\n\t\n\tdefp space_indexes(r),do: for {ch,i} <- Enum.with_index(r), ch == 32, do: i\n\tdefp wordlengths(s),do: for w <- String.split(s,\" \",trim: true),do: String.length(w)\n\t\n\tdefp rot(r,ln,n) do\n\t\tq = rem(n,ln)\n\t\tif q == 0,do: r,else: Enum.slice(r,-q..-1) ++ Enum.slice(r,0..-q-1)\n\tend\n\t\n\tdefp ix(r,[q|lr],n) do\n\t\t{r1,r2} = Enum.split(r,q)\n\t\trot(r1,q,n) ++ ix(r2,lr,n)\n\tend\n\tdefp ix(_,[],_),do: []\n\t\n\tdefp meld([ch|rr],[q|r2],i) do\n\t\tif q == i,do: [32 | meld([ch|rr],r2,i+1)],else: [ch | meld(rr,[q|r2],i+1)]\n\tend\n\tdefp meld(rr,[],_),do: rr\n\tdefp meld([],r,_),do: for _ <- 1..length(r),do: 32\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79284,"user_id":null,"body":"defmodule IterativeRotationCipher do\n  def encode(n, s),\n    do: \"#{n} #{Enum.reduce(1..n, s, fn _, s -> rot_ex_spaces(s, n) |> rot_words(n) end)}\"\n\n  def decode(s) do\n    [ns, st] = String.split(s, \" \", parts: 2)\n    n = String.to_integer(ns)\n    Enum.reduce(1..n, st, fn _, st -> rot_words(st, -n) |> rot_ex_spaces(-n) end)\n  end\n\n  defp rot_ex_spaces(s, n) do\n    s2 = String.graphemes(s) |> Enum.filter(fn c -> c != \" \" end) |> rot(n)\n\n    String.graphemes(s)\n    |> Enum.reduce({[], s2}, fn c, {acc, s2} ->\n      if c == \" \", do: {[c | acc], s2}, else: {[hd(s2) | acc], tl(s2)}\n    end)\n    |> elem(0)\n    |> Enum.reverse()\n    |> Enum.join()\n  end\n\n  defp rot_words(s, n),\n    do: Regex.replace(~r\/[^ ]+\/, s, fn m -> String.graphemes(m) |> rot(n) |> Enum.join() end)\n\n  defp rot(arr, n) do\n    nn = rem(n, length(arr))\n    if nn == 0, do: arr, else: Enum.slice(arr, -nn..-1) ++ Enum.slice(arr, 0..(-nn - 1))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79285,"user_id":null,"body":"defmodule IterativeRotationCipher do\n  def encode(n, s) do\n    s2 =\n      Enum.reduce(1..n, s, fn _, s ->\n        s3 =\n          String.graphemes(s)\n          |> Enum.filter(fn c -> c != \" \" end)\n          |> rot(n)\n\n        s4 =\n          String.graphemes(s)\n          |> Enum.reduce({[], s3}, fn c, {acc, s3} ->\n            if c == \" \", do: {[c | acc], s3}, else: {[hd(s3) | acc], tl(s3)}\n          end)\n          |> elem(0)\n          |> Enum.reverse()\n          |> Enum.join()\n\n        Regex.replace(~r\/[^ ]+\/, s4, fn m -> String.graphemes(m) |> rot(n) |> Enum.join() end)\n      end)\n\n    \"#{n} #{s2}\"\n  end\n\n  def decode(s) do\n    [ns, st] = String.split(s, \" \", parts: 2)\n    n = String.to_integer(ns)\n\n    Enum.reduce(1..n, st, fn _, st ->\n      s2 = Regex.replace(~r\/[^ ]+\/, st, fn m -> String.graphemes(m) |> rot(-n) |> Enum.join() end)\n\n      s3 =\n        String.graphemes(s2)\n        |> Enum.filter(fn c -> c != \" \" end)\n        |> rot(-n)\n\n      String.graphemes(s2)\n      |> Enum.reduce({[], s3}, fn c, {acc, s3} ->\n        if c == \" \", do: {[c | acc], s3}, else: {[hd(s3) | acc], tl(s3)}\n      end)\n      |> elem(0)\n      |> Enum.reverse()\n      |> Enum.join()\n    end)\n  end\n\n  defp rot(arr, n) do\n    nn = rem(n, length(arr))\n    if nn == 0, do: arr, else: Enum.slice(arr, -nn..-1) ++ Enum.slice(arr, 0..(-nn - 1))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79286,"user_id":null,"body":"defmodule IterativeRotationCipher do\n  def encode(n, s) do\n    \"#{n} #{encode_helper(n, n, s)}\"\n  end\n  \n\tdef encode_helper(0, _, s), do: s\n  def encode_helper(1, n, s), do: rotate(n, s)\n  def encode_helper(m, n, s) do\n    rotate(n, encode_helper(m-1, n, s))\n  end\n\t\n  def rotate(n, s) do\n    spaces = find_spaces(s)\n    cond do\n      n >= 0 ->\n        s |> (fn s -> remove_spaces(s) end).()\n          |> (fn s -> shift(n, s) end).()\n          |> (fn s -> insert_spaces(s, spaces) end).()\n          |> String.split(\" \")\n          |> Enum.map(fn s -> shift(n, s) end)\n          |> Enum.join(\" \")\n      n < 0 ->\n        s |> String.split(\" \")\n          |> Enum.map(fn s -> shift(n, s) end)\n          |> Enum.join\n          |> (fn s -> shift(n, s) end).()\n          |> (fn s -> insert_spaces(s, spaces) end).()\n    end\n  end\n  \n\tdef decode(s) do\n    [n | s] = String.split(s, \" \")\n    s = Enum.join(s, \" \")\n    n = String.to_integer(n)\n    encode_helper(n, -n, s)\n\tend\n  \n  def shift(_, \"\"), do: \"\"\n  def shift(n, s) do\n    len = String.length(s)\n    cond do\n      n >= 0 -> String.slice(s <> s, len - rem(n, len), len)\n      n < 0  -> String.slice(s <> s, rem(-n, len), len)\n    end\n  end\n  \n  def remove_spaces(s) do\n    s |> String.split(\" \") |> Enum.join\n  end\n  \n  defp find_spaces(s) do\n    indexed_chars = s |> String.graphemes |> Enum.with_index\n    for {x, i} <- indexed_chars, x == \" \", do: i\n  end\n  \n  def insert_spaces(s, is) do\n    s |> String.graphemes\n      |> (fn gs -> split_at(gs, is) end).()\n      |> Enum.join(\" \")\n  end\n  \n  defp split_at(xs, is) do\n    case is do\n      [] -> [xs]\n      [h | t] -> [Enum.take(xs, h) | split_at(Enum.drop(xs, h), Enum.map(t, &(&1 - h - 1)))]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79287,"user_id":null,"body":"defmodule IterativeRotationCipher do\n\n  def encode(n, str), do: do_encode(n, str)\n\n  def decode(str), do: do_decode(str)\n\n  defp do_encode(n, str), do: do_encode(n, str, 0)\n  defp do_encode(n, str, n), do: \"#{n} \" <> str\n  defp do_encode(n, str, cur), do: do_encode(n, encode_iter(n, str), cur + 1)\n\n  defp do_decode(str), do: (&do_decode(String.to_integer(hd(&1)), Enum.join(tl(&1), \" \"), 0)).(String.split(str, \" \"))\n  defp do_decode(n, str, n), do: str\n  defp do_decode(n, str, cur), do: do_decode(n, decode_iter(n, str), cur + 1)\n\n  defp encode_iter(n, str) do\n    str\n    |> String.graphemes\n    |> Enum.filter(& &1 != \" \")\n    |> shift_seq(n)\n    |> insert_spaces(get_spaces_indexes(str))\n    |> Enum.join\n    |> String.split(\" \")\n    |> Enum.map(&shift_seq(&1, n))\n    |> Enum.join(\" \")\n  end\n\n  defp decode_iter(n, str) do\n    str\n    |> String.split(\" \")\n    |> Enum.map(&shift_seq(&1, -n))\n    |> Enum.join\n    |> shift_seq(-n)\n    |> insert_spaces(get_spaces_indexes(str))\n    |> Enum.join\n  end\n\n  defp shift_seq([], _), do: []\n  defp shift_seq(seq, n) when is_binary(seq), do: shift_seq(String.graphemes(seq), n)\n  defp shift_seq(seq, n), do: (&Enum.slice(seq, -&1..-1) ++ Enum.slice(seq, 0..-&1 - 1)).\n    ((&if &1 == 0, do: length(seq), else: &1).(rem(n, length(seq))))\n\n  defp get_spaces_indexes(str) do\n    str\n    |> String.graphemes\n    |> Enum.with_index\n    |> Enum.reduce([], fn {val, idx}, acc -> if val == \" \", do: [idx | acc], else: acc end)\n    |> Enum.reverse\n  end\n\n  defp insert_spaces(seq, []), do: seq\n  defp insert_spaces(seq, [head | tail]), do: insert_spaces(List.insert_at(seq, head, \" \"), tail)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79288,"user_id":null,"body":"defmodule IterativeRotationCipher do\n\tdef takeSpc(s) do\n\t\ts\n\t\t|> String.split(\" \")\n\t\t|> Enum.map(fn x -> [x, String.length(x)] end)\n\t\t|> Enum.map_reduce(0, fn x, acc ->\n\t\t\ta = Enum.at(x,0); b = Enum.at(x,1)\n\t\t\t{{a, b+acc}, acc+b}\n\t\tend)\n\t\t|> Kernel.elem(0)\n\t\t|> Enum.map(fn x -> Kernel.elem(x,1) end)\n\tend\n\n\tdef putSpc(s, spcList) do\n\t\tspcList\n\t\t|> Enum.reduce({\"\", 0}, fn(spc, {acc, pointer}) ->\n\t\t\t{acc <> String.slice(s, pointer..spc-1) <> \" \", spc}\n\t\tend)\n\t\t|> Kernel.elem(0)\n\t\t|> String.slice(0..-2)\n\tend\n\n\tdef shiftOrder(strng, val, dir) do\n\t\tres = String.split(strng, \" \")\n\t\t|> Enum.map(fn word ->\n\t\t\tif String.length(word) > 0 do\n\t\t\t\tshiftSize = Integer.mod(val, String.length(word))\n\t\t\t\tif shiftSize > 0 do\n\t\t\t\t\tcase dir do\n\t\t\t\t\t\t'r' -> String.slice(word,-shiftSize..-1) <> String.slice(word,0..-shiftSize-1)\n\t\t\t\t\t\t'l' -> String.slice(word,shiftSize..-1) <> String.slice(word,0..shiftSize-1)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tword\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tword\n\t\t\tend\n\t\tend)\n\t\t|> Enum.join(\" \")\n\tend\n\n\tdef encode(t,n,s) when t == 0, do: s\n\tdef encode(t,n,s) when t > 0 do\n\t\tspcList = takeSpc(s)\n\t\tres = String.replace(s, \" \", \"\")\n\t\tres = String.slice(res,-n..-1) <> String.slice(res,0..-n-1)\n\t\tres = putSpc(res, spcList)\n\t\tres = shiftOrder(res, n, 'r')\n\t\tencode(t-1, n, res)\n\tend\n\n\tdef encode(n,s) do\n\t\t\"#{n} #{encode(n, n, s)}\"\n\tend\n\n\tdef decode(t,n,s) when t == 0, do: s\n\tdef decode(t,n,s) when t > 0 do\n\t\tres = shiftOrder(s, n, 'l')\n\t\tspcList = takeSpc(res)\n\t\tres = String.replace(res, \" \", \"\")\n\t\tres = String.slice(res,n..-1) <> String.slice(res,0..n-1)\n\t\tres = putSpc(res, spcList)\n\t\tdecode(t-1, n, res)\n\n\tend\n\tdef decode(s) do\n\t\t[n | res] = String.split(s, \" \", parts: 2)\n\t\tn = Integer.parse(n) |> Kernel.elem(0)\n\t\tdecode(n, n, Enum.at(res,0))\n\tend\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79289,"user_id":null,"body":"defmodule IterativeRotationCipher do\n  defmodule SplitString do\n    defstruct boundaries: [], stripped: \"\", length: 0\n    \n    def read(input) do\n      input\n      |> String.splitter(\" \")\n      |> Enum.map_reduce({\"\", 0}, &add_word\/2)\n      |> create\n    end\n    \n    def words(%SplitString{} = s) do\n      s.boundaries |> Stream.map(&(String.slice(s.stripped, &1)))\n    end\n    \n    def to_string(%SplitString{} = s) do\n      SplitString.words(s) |> Enum.join(\" \")\n    end\n    \n    def shift_by(%SplitString{} = s, n) do\n      %SplitString{s | :stripped => shift_string(s.stripped, n)}\n    end\n    \n    def shift_words_by(%SplitString{}=s, n) do\n      SplitString.words(s)\n      |> Stream.map(&(shift_string(&1, n)))\n      |> Enum.join()\n      |> (&(%{s | :stripped => &1})).()\n    end\n    \n    def shift_mix_by(%SplitString{}=s, n) do\n      s |> SplitString.shift_by(n) |> SplitString.shift_words_by(n)\n    end\n  \n    def unshift_mix_by(%SplitString{}=s, n) do\n      s |> SplitString.shift_words_by(-n) |>  SplitString.shift_by(-n) \n    end\n  \n    defp shift_string(\"\", _), do: \"\"\n    defp shift_string(input, n) do\n      {tail, head} = String.split_at(input, -rem(n, String.length(input)))\n      head <> tail\n    end\n\n    defp create({boundaries, {stripped, length}}) do\n      %SplitString{\n        boundaries: boundaries,\n        stripped: stripped,\n        length: length\n      }\n    end\n    \n    defp add_word(word, {stripped, offset}) do\n      length = offset + String.length(word)\n      {offset..length-1, {stripped<>word, length}}\n    end\n  end\n  \n\tdef encode(n,s) do\n    {:ok, split_string} = \n      SplitString.read(s)\n      |> Stream.iterate(&(SplitString.shift_mix_by(&1, n)))\n      |> Enum.fetch(n)\n    \"#{n} #{SplitString.to_string(split_string)}\"\n\tend\n  \n\tdef decode(s) do\n\t\t{n, s} = Integer.parse(s)\n    {:ok, split_string} = String.trim_leading(s, \" \")\n    |> SplitString.read()\n    |> Stream.iterate(&(SplitString.unshift_mix_by(&1, n)))\n    |> Enum.fetch(n)\n    SplitString.to_string(split_string)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a3e1319b6486ac96f000049":[{"id":79290,"user_id":527,"body":"defmodule Kata do\n  def pairs(xs) do\n    xs\n    |> Enum.chunk_every(2, 2, :discard)\n    |> Enum.count(fn [x, y] -> abs(x - y) == 1 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79291,"user_id":null,"body":"defmodule Kata do\n    def pairs([]), do: 0\n    def pairs([_]), do: 0\n    def pairs([a,b|tail]) do\n      count = if abs(a-b) ==1, do: 1, else: 0\n      count + pairs(tail)\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79292,"user_id":564,"body":"defmodule Kata do\n    def pairs([]), do: 0\n    def pairs([_]), do: 0\n    def pairs([a, b|cs]) do\n        count = if abs(a - b) == 1, do: 1, else: 0\n        count + pairs(cs)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79293,"user_id":527,"body":"defmodule Kata do\n  def pairs(xs), do: do_pairs(xs, 0)\n  defp do_pairs([x, y | xs], k) do\n    do_pairs(xs, k + (if abs(x - y) == 1, do: 1, else: 0))\n  end\n  defp do_pairs(_, k), do: k\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79294,"user_id":null,"body":"defmodule Kata do\n    def pairs(ls), do: ls\n        |> Enum.chunk_every(2, 2, :discard)\n        |> Enum.count(fn [a,b] -> abs(a-b) == 1 end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79295,"user_id":null,"body":"defmodule Kata do\n  @moduledoc \"\"\"\n  # Kata - Simple consecutive pairs\n  \"\"\"\n  @doc \"\"\"\n    `pairs\/1` returns a count of consecutive integer pairs in a list. \n    \n    A number is consideder to be a pair when it's following number is 1 less or 1 greater. \n    \n    ## Parameter\n    - list: a list of integers\n    \n    ## Example\n      iex> Kata.pairs([1,2,5,8,-4,-3,7,6,5])\n      3\n      \n    ## Solution\n    1. Enum.chunk_every\/2 is used to transform a list into a list of pairs. ex: [1,2,3,4] into [[1,2], [3,4]]\n    2. Enum.reduce\/3 is used to reduce over the list, pattern matching for consecutive pairs and storing a count of found pairs in an accumulator. \n  \"\"\"\n  \n  @spec pairs([integer]) :: non_neg_integer\n  def pairs(list) do\n    list\n    |> Enum.chunk_every(2)\n    |> Enum.reduce(0, fn \n      [x, y], acc when abs(x - y) == 1 -> acc + 1\n      _, acc -> acc\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79296,"user_id":null,"body":"defmodule Kata do\n  def pairs(ls) do\n    ls\n    |> Enum.chunk(2)\n    |> Enum.map(&Enum.sort\/1)\n    |> Enum.map(&if List.first(&1) + 1 == List.last(&1), do: 1, else: 0)\n    |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79297,"user_id":null,"body":"defmodule Kata do\n    def pairs(ls) do\n        ls\n        |> Enum.chunk_every(2, 2, :discard)\n        |> Enum.count(fn [a, b] -> abs(a - b) == 1 end)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79298,"user_id":null,"body":"defmodule Kata do\n    def pairs(ls) do\n        ls\n        |> Enum.chunk_every(2, 2, :discard)\n        |> Enum.count(&consecutive?\/1)\n    end\n    \n    defp consecutive?([a, b]) do\n      cond do\n        a + 1 == b -> true\n        a - 1 == b -> true\n        true -> false\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79299,"user_id":null,"body":"defmodule Kata do\n    def pairs(ls) do\n        ls\n        |> IO.inspect(limit: :infinity)\n        |> Enum.chunk_every(2, 2, :discard)\n        |> Enum.count(&consecutive?\/1)\n        |> IO.inspect()\n    end\n    \n    defp consecutive?([a, b]) do\n      cond do\n        a + 1 == b -> true\n        a - 1 == b -> true\n        true -> false\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a3fe3dde1ce0e8ed6000097":[{"id":79300,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n    ceil(year \/ 100)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79301,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n    div(year,100)+(if rem(year,100)*100>0, do: 1, else: 0)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79302,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n    case year \/ 100 do\n      result when result == trunc(result) -> \n        trunc(result)\n        \n      result -> \n        trunc(result) + 1\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79303,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year), do: ((year - 1) \/ 100) + 1 |> trunc\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79304,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) when rem(year, 100) > 0, do: div(year, 100)+1\n  def century_from_year(year), do: div(year, 100)\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79305,"user_id":null,"body":"defmodule Century do\n  @spec century_from_year(integer) :: integer\n  def century_from_year(year) do\n    case rem(year, 100) do\n      0 -> div(year, 100)\n      _ -> div(year, 100) + 1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79306,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n    year\/100\n    |> Float.ceil(0) \n    |> Kernel.round\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79307,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n    Kernel.div(year+99,100)\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79308,"user_id":null,"body":"defmodule Century do\n  \n  def century_from_year(year) when year <= 100, do: 1\n  \n  def century_from_year(year) do\n    if rem(year,100) == 0 do\n      div(year,100)\n    else\n      div(year,100)+1\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79309,"user_id":null,"body":"defmodule Century do\n  def century_from_year(year) do\n   var = div(year, 100)\n   if rem(year, 100) == 0, do: var  ,else: var + 1\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a48948e145c46820b00002f":[{"id":79310,"user_id":null,"body":"\ndefmodule KPStep do\n  def prime_factors(n, factor \\\\ 2) do\n    if factor * factor <= n do\n      if rem(n, factor) == 0 do\n        [factor] ++ prime_factors(div(n, factor), factor)\n      else\n        [] ++ prime_factors(n, if(factor == 2, do: 3, else: factor + 2))\n      end\n    else\n      if n > 1, do: [n], else: []\n    end\n  end\n\n  def kprimes_step(k, step, m, n) do\n    kp = Enum.filter(m..n, fn i -> length(prime_factors(i)) == k end)\n    Enum.filter(kp, fn i -> (i + step) in kp end) |> Enum.map(fn i -> [i, i + step] end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79311,"user_id":null,"body":"defmodule KPStep do\n\n  def kprimes_step(k, step, start, stop) do\n    kprimes =\n      start..stop\n      |> Enum.to_list\n      |> Enum.filter(fn x -> get_kprime(x) == k end)\n\n    kprimes\n    |> Enum.map(fn x -> [x, x + step] end)\n    |> Enum.filter(fn [a, b] -> a in kprimes and b in kprimes end)\n  end\n\n  defp get_kprime(n), do: length(get_prime_factors(n))\n\n  defp get_prime_factors(n) when n <= 1, do: []\n  defp get_prime_factors(n), do: get_prime_factors(n, 2, [])\n  defp get_prime_factors(n, current, acc) when current * current > n, do: [n | acc]\n  defp get_prime_factors(n, current, acc) when rem(n, current) == 0,\n       do: get_prime_factors(div(n, current), current, [current | acc])\n  defp get_prime_factors(n, current, acc), do: get_prime_factors(n, current + 1, acc)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79312,"user_id":53,"body":"defmodule KPStep do\n\n    def prime_factors(n, len, i) do\n        cond do\n            i * i > n && n > 1  -> len + 1\n            i * i > n           -> len\n            rem(n, i) == 0      -> prime_factors(div(n, i), len + 1, i)\n            true                -> prime_factors(n, len, i + 1)\n        end\n    end\n    \n    def prime_factors(n) do\n        prime_factors(n, 0, 2)\n    end\n    \n    def kprimes_step(k, step, start, nd, i) do\n        cond do\n            i > nd - step       -> []\n            prime_factors(i) === k  && prime_factors(i + step) === k \n                                -> [[i, i + step] | kprimes_step(k, step, start, nd, i + 1)]\n            true                -> kprimes_step(k, step, start, nd, i + 1)\n        end\n    end\n    \n    def kprimes_step(k, step, start, nd) do\n        kprimes_step(k, step, start, nd, start)\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79313,"user_id":null,"body":"defmodule KPStep do\n  def kprimes_step(k, step, start, nd) do\n    for x <- start..nd, prime_factors(x) == k, prime_factors(x+step) == k, x+step <= nd, do: [x, x+step]\n  end\n\n  def prime_factors(n), do: length(prime_factors(n, 2, []))\n  defp prime_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n  defp prime_factors(n, k, acc) when rem(n, k) == 0, do: prime_factors(div(n, k), k, [k | acc])\n  defp prime_factors(n, k, acc), do: prime_factors(n, k+1, acc)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79314,"user_id":null,"body":"defmodule KPStep do\n    defp pfci(n,rt,k,c) when k > rt, do: if n > 1, do: c+1, else: c\n    \n    defp pfci(n,rt,k,c) when rem(n,k) < 1, do: pfci(div(n,k),rt,k,c+1)\n        \n    defp pfci(n,rt,2,m), do: pfci(n,rt,3,m)\n    defp pfci(n,rt,k,m), do: pfci(n,rt,k+2,m)\n    \n    defp pfc(n), do: pfci(n,floor(:math.sqrt(n)),2,0)\n    \n    def kprimes_step(k,x,m,n), do: m..n-x\n        |> Enum.reduce([], fn i,r -> if pfc(i) == k and pfc(i+x) == k, do: [[i,i+x]|r], else: r end)\n        |> Enum.reverse\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79315,"user_id":null,"body":"defmodule KPStep do\n\n  def kprimes_step(k, step, m, n) when m >= 0 and n >= m do\n    kprimes = m..n\n    |> Enum.map(fn x -> {x, prime_factors(x)} end)\n    |> Enum.filter(fn {_, list} -> Enum.count(list) == k end)\n    |> Enum.map(fn {x, _} -> x end)\n\n    for x<-kprimes, y<-kprimes, x<=y, y-x == step, do: [x, y]\n  end\n  \n  def prime_factors(n) do\n    _prime_factors(n, 2, [])\n  end\n  defp _prime_factors(n, k, acc) when n < k*k do\n    [n|acc] |> Enum.reverse\n  end\n  defp _prime_factors(n, k, acc) when rem(n,k) != 0 do\n    _prime_factors(n, k+1, acc)\n  end\n  defp _prime_factors(n, k, acc) do\n    _prime_factors(div(n, k), k, [k|acc])\n  end\n \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79316,"user_id":492,"body":"defmodule KPStep do\n\n    def prime_factors(n), do: length(prime_factors(n, 2, []))\n    defp prime_factors(n, k, acc) when n < k * k, do: Enum.reverse(acc, [n])\n    defp prime_factors(n, k, acc) when rem(n, k) == 0, do: prime_factors(div(n, k), k, [k | acc])\n    defp prime_factors(n, k, acc), do: prime_factors(n, k+1, acc)\n\n    defp stepaux(_, _, x, n, acc) when (x > n) do acc end\n    defp stepaux(k, step, x, n, acc) do\n        if (prime_factors(x) == k && prime_factors(x + step) == k) do\n            stepaux(k, step, x + 1, n, [[x, x + step]] ++ acc)\n        else\n            stepaux(k, step, x + 1, n, acc)\n        end\n    end\n\n    def kprimes_step(k, step, m, n), do: stepaux(k, step, m, n-step, []) |> Enum.reverse\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a4d303f880385399b000001":[{"id":79317,"user_id":null,"body":"defmodule Kata do\n  def factorial(num) when num === 0, do: 1\n  def factorial(num) when num > 0, do: num * factorial(num - 1)\n\n  def strong(num) do\n    sum = num\n    |> Integer.digits()\n    |> Enum.map(fn digit -> factorial(digit) end)\n    |> Enum.sum()\n    if sum === num, do: \"STRONG!!!!\", else: \"Not Strong !!\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79318,"user_id":53,"body":"defmodule Kata do\n  defp f(n) when n<=1, do: 1\n  defp f(n), do: n*f(n-1)\n  defp r(a,a), do: \"STRONG!!!!\"\n  defp r(_,_), do: \"Not Strong !!\"\n  def strong(n), do: r(n, n\n    |> Integer.digits\n    |> Enum.map(&f(&1))\n    |> Enum.sum)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79319,"user_id":645,"body":"defmodule Kata, do: def strong(n), do: if Enum.member?([1, 2, 145, 40585], n), do: \"STRONG!!!!\", else: \"Not Strong !!\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79320,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  \n  def strong(n) do\n    result =\n      n\n      |> Integer.digits()\n      |> Enum.reduce(0, &factorial_of(&1) + &2)\n    \n    if result == n, do: \"STRONG!!!!\", else: \"Not Strong !!\"\n  end\n  \n  def factorial_of(0), do: 1\n\tdef factorial_of(n) when n > 0 do\n\t\tEnum.reduce(1..n, &*\/2)\n\tend  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79321,"user_id":null,"body":"defmodule Kata do\n  def strong(n) do\n    cond do\n      n == to_list(n)\n      |> Enum.map(fn num -> fact(num) end)\n      |> Enum.sum() -> \"STRONG!!!!\"\n      true -> \"Not Strong !!\"\n    end\n  end\n  \n  defp fact(0), do: 1\n  defp fact(n), do: n * fact(n - 1)\n  \n  defp to_list(n), do: to_list(n, [])\n  defp to_list(0, acc), do: acc\n  defp to_list(n, acc) do\n    to_list(div(n, 10), [rem(n, 10) | acc])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79322,"user_id":null,"body":"defmodule Kata do\n  def strong(n) do\n    n |> Integer.digits \n      |> Enum.map(fn x -> x |> Factorial.factorial end)\n      |> Enum.sum\n      |> is_equal(n)\n  end\n  \n  def is_equal(a,b) do\n    cond do\n      a == b -> \"STRONG!!!!\"\n      true -> \"Not Strong !!\"\n    end\n  end\nend\n\ndefmodule Factorial do\n    def factorial(n) when n <= 1 do\n        1\n    end\n    def factorial(n) when n > 1 do\n        n * factorial(n-1)\n    end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79323,"user_id":null,"body":"defmodule Kata do\n  defp to_integer(value) do\n    {number, _} = Integer.parse(value)\n    number\n  end\n\n  defp factorial(0), do: 1\n  defp factorial(num) do\n    num * factorial(num - 1)\n  end\n\n  def strong(num) do\n    fac_digits_sum =\n      Integer.to_string(num)\n      |> String.graphemes()\n      |> Enum.map(&to_integer\/1)\n      |> Enum.map(&factorial\/1)\n      |> Enum.sum()\n\n    if fac_digits_sum == num do\n      \"STRONG!!!!\"\n    else\n      \"Not Strong !!\"\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79324,"user_id":null,"body":"defmodule Kata do\n  defp ret(chk) when chk == true, do: \"STRONG!!!!\"\n  defp ret(chk) when chk == false, do: \"Not Strong !!\"\n  defp fact(n, acc) when  n == 0, do: acc\n  defp fact(n, acc), do: n |> Kernel.-(1) |> fact(n*acc)\n  def strong(n) do\n    n |> \n    Integer.to_string |> \n    String.split(\"\", trim: true) |>\n    Enum.reduce(0, fn x, acc -> x |> \n                                String.to_integer |> \n                                fact(1) |> \n                                Kernel.+(acc) end) |>\n    Kernel.==(n) |>\n    ret\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79325,"user_id":null,"body":"defmodule Kata do\n  @spec strong(integer) :: String.t\n  def strong(n) do\n    n\n    |> Integer.digits()\n    |> Enum.map(fn x -> factorial(x) end)\n    |> Enum.sum\n    |> case do\n      x when x == n -> \"STRONG!!!!\"\n      _ -> \"Not Strong !!\"\n    end\n  end\n  \n  defp factorial(n), do: factorial_of(n, 1)\n  defp factorial_of(0, acc), do: acc\n  defp factorial_of(n, acc) when n > 0, do: factorial_of(n - 1, n * acc)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79326,"user_id":null,"body":"defmodule Kata do\n  def factorial(0), do: 1\n  def factorial(1), do: 1\n  def factorial(2), do: 2\n  def factorial(3), do: 6\n  def factorial(4), do: 24\n  def factorial(5), do: 120\n  def factorial(6), do: 720\n  def factorial(7), do: 5040\n  def factorial(8), do: 40320\n  def factorial(9), do: 362880\n\n  def strong2(0, number, sum) when sum == number do\n    \"STRONG!!!!\"\n  end\n  def strong2(0, number, sum), do: \"Not Strong !!\"\n  def strong2(n, number, sum) do\n    strong2(div(n, 10), number, (factorial(rem(n, 10)) + sum))\n  end  \n  \n  def strong(n), do: strong2(n, n, 0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a58ca28e626c55ae000018a":[{"id":79327,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides) do\n    # your code here\n    (1 \/ 2 * number_of_sides * :math.pow(circle_radius, 2) *\n       :math.sin(2 * :math.pi() \/ number_of_sides))\n    |> Float.round(3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79328,"user_id":645,"body":"defmodule Kata, do: def area_of_polygon_inside_circle(r, n), do: round(1000 * 0.5 * n * r * r * :math.sin(2 * :math.pi() \/ n)) \/ 1000","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79329,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides) do \n    number_of_sides * :math.pow(circle_radius, 2) * :math.sin(( 2 * :math.pi \/ number_of_sides )) \/ 2  |> Float.round(3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79330,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides) do\n    Float.round(\n      circle_radius * circle_radius * number_of_sides *\n        :math.sin(:math.pi() \/ number_of_sides * 2) \/\n        2,\n      3\n    )\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79331,"user_id":53,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(r, n), do: round(500 * n * r * r * :math.sin(2 * :math.pi() \/ n)) \/ 1000\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79332,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides) do \n    Float.round(0.5 * number_of_sides * circle_radius * circle_radius * :math.sin(2 * :math.pi \/ number_of_sides), 3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79333,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides) do \n    Float.round(\n      1 \/ 2 * number_of_sides * :math.pow(circle_radius, 2) *\n        :math.sin(2 * :math.pi() \/ number_of_sides),\n      3\n    )\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79334,"user_id":168,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(r, n) do \n    Float.round(0.5 * n * r * r * :math.sin(2 * :math.pi() \/ n), 3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79335,"user_id":null,"body":"defmodule Kata do\n\n  def area_of_polygon_inside_circle(circle_radius, number_of_sides), do:\n    Float.round(1 \/ 2 * :math.pow(circle_radius, 2) * number_of_sides * :math.sin(2 * :math.pi() \/ number_of_sides), 3)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79336,"user_id":null,"body":"defmodule Kata do\n  def area_of_polygon_inside_circle(radius, n) do\n    (n \/ 2 * (radius * radius) * :math.sin(2 * :math.pi() \/ n))\n    |> Float.round(3)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a63948acadebff56f000018":[{"id":79337,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    arr\n    |> Enum.sort\n    |> Enum.take(-size)\n    |> Enum.reduce(1, fn x, acc -> x*acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79338,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) ,do: arr |> Enum.sort(&(&1>=&2)) |> Stream.take(size) |> Enum.reduce(1,&(&1*&2))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79339,"user_id":null,"body":"defmodule MaxProduct do\n  @spec max_product([integer], integer) :: integer\n  def max_product(arr, size) do\n    arr \n    |> Enum.sort(:desc) \n    |> Enum.take(size)\n    |> Enum.reduce(1, fn x, acc -> x * acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79340,"user_id":null,"body":"defmodule MaxProduct do\n  def product2(arr, 0, product), do: product\n  def product2([h|t], size, product) do\n    product2(t, size-1, product*h)\n  end\n\n  def max_product(arr, size) do\n    with sorted = Enum.reverse(Enum.sort(arr)) do\n      product2(sorted, size, 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79341,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    arr |> Enum.sort(:desc) |> Enum.slice(0, size) |> Enum.reduce(fn(x,acc) -> x * acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79342,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    Enum.sort(arr) |> Enum.take(-size) |> Enum.reduce(&*\/2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79343,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    arr\n    |> Enum.sort(:desc)\n    |> Enum.take(size)\n    |> Enum.reduce(fn x, acc -> acc * x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79344,"user_id":250,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    Enum.sort(arr, &(&1 >= &2))\n    |> Enum.take(size)\n    |> Enum.reduce(1, &(&1 * &2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79345,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    arr\n    |> Enum.sort(&(&1 > &2))\n    |> Enum.take(size)\n    |> Enum.reduce(1, fn(x, acc) -> x * acc end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79346,"user_id":null,"body":"defmodule MaxProduct do\n  def max_product(arr, size) do\n    arr\n    |> Enum.sort(:desc)\n    |> Enum.take(size)\n    |> Enum.reduce(& &1 * &2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a651865fd56cb55760000e0":[{"id":79347,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]), do: []\n  def array_leaders([leader | rest]) do\n    if leader > Enum.sum(rest) do\n      [leader] ++ array_leaders(rest)\n    else\n      array_leaders(rest)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79348,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]) do [] end\n  def array_leaders([h|t]) do\n    case h > Enum.sum(t) do\n      true -> [h | array_leaders(t)]\n      _ -> array_leaders(t)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79349,"user_id":null,"body":"defmodule ArrayLeaders do\n  @spec array_leaders([integer]) :: [integer]\n  def array_leaders(nums) do\n    array_leaders(nums, [])\n  end\n  \n  def array_leaders([], acc), do: acc\n  \n  def array_leaders([head | tail], acc) do\n    case head > Enum.sum(tail) do\n      true -> array_leaders(tail, acc ++ [head])\n      false -> array_leaders(tail, acc)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79350,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]), do: []\n  def array_leaders([h | t]), do: (if h > Enum.sum(t), do: [h], else: []) ++ array_leaders(t)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79351,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]), do: []\n  def array_leaders([head | tail]) do\n    if head > Enum.sum(tail),\n      do: [head | array_leaders(tail)],\n      else: array_leaders(tail)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79352,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]), do: []\n  def array_leaders(nums) do\n    [head | tail] = nums\n    if head > Enum.sum(tail),\n      do: [head | array_leaders(tail)],\n      else: array_leaders(tail)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79353,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders(nums) when nums == [], do: []\n  def array_leaders([frist | rest]) do\n    if frist > Enum.sum(rest), do: [frist] ++ array_leaders(rest),\n    else: array_leaders(rest)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79354,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders(nums) do\n    _leaders(nums)\n  end\n\n  defp _leaders([x]), do: if(x > 0, do: [x], else: [])\n\n  defp _leaders([x | xs]) do\n    if x > Enum.sum(xs), do: [x] ++ _leaders(xs), else: _leaders(xs)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79355,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders([]), do: []\n  def array_leaders(nums) do\n    [h | t] = nums\n    if h > Enum.sum(t) do\n      [h | array_leaders(t)]\n    else\n      array_leaders(t)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79356,"user_id":null,"body":"defmodule ArrayLeaders do\n  def array_leaders(nums) do\n    # your code here\n    len = length(nums)\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce([], fn {item, index}, acc ->\n      case item > Enum.sum(Enum.slice(nums, (index+1)..len)) do\n        true -> [item | acc]\n        _ -> acc\n      end\n    end)\n    |> Enum.reverse()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a662a02e626c54e87000123":[{"id":79357,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    Stream.iterate(1, &(&1 + 2))\n    |> Enum.take_while(&(&1 <= n))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79358,"user_id":53,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n), do: 1..n |> Enum.filter(&(rem(&1, 2) == 1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79359,"user_id":null,"body":"defmodule ExtraPerfect, do: def extra_perfect(n), do: Enum.take_every(1..n, 2)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79360,"user_id":null,"body":"defmodule ExtraPerfect do\n  @spec extra_perfect(pos_integer) :: [pos_integer]\n  def extra_perfect(n), do: for x <- 1..n, rem(x, 2) == 1, do: x\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79361,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra2(number1, number2) when number2 == number1 + 1 do\n    []\n  end\n\n  def extra2(number1, number2) do\n    if rem(number2, 2) == 1 do\n      [number2] ++ extra2(number1, number2+1)\n    else\n      extra2(number1, number2+1)\n    end\n  end \n\n  def extra_perfect(n) do\n    extra2(n, 0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79362,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    Enum.filter(1..n, &rem(&1,2)==1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79363,"user_id":250,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    Enum.filter(1..n, fn x -> \n      b = Integer.to_string(x, 2)\n      String.first(b) == \"1\" && String.last(b) == \"1\"\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79364,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    1..n\n    |> Enum.to_list\n    |> Enum.reject(&( rem(&1,2) == 0 ))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79365,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    1..n\n    |> Enum.map(&if rem(&1, 2) == 1, do: &1)\n    |> Enum.reject(&is_nil\/1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79366,"user_id":null,"body":"defmodule ExtraPerfect do\n  def extra_perfect(n) do\n    1..n \n      |> Enum.filter(&extra_perfect?(&1))\n  end\n    \n  defp extra_perfect?(x) do\n    binary_repr = Integer.to_string(x,2)\n    String.slice(binary_repr, -1..-1) == \"1\" && String.slice(binary_repr, 0..0) == \"1\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a6663e9fd56cb5ab800008b":[{"id":79367,"user_id":2078,"body":"defmodule Dinglemouse do\n  @moduledoc false\n  \n  defp cat_years(1), do: 15\n  defp cat_years(2), do: 24\n  defp cat_years(n), do: 24 + (n - 2) * 4\n  \n  defp dog_years(1), do: 15\n  defp dog_years(2), do: 24\n  defp dog_years(n), do: 24 + (n - 2) * 5\n  \n  def human_years_cat_years_dog_years (human_years) do\n    {human_years, cat_years(human_years), dog_years(human_years)}\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79368,"user_id":null,"body":"defmodule Dinglemouse do\n\n  def human_years_cat_years_dog_years(1), do: {1, 15, 15}\n  def human_years_cat_years_dog_years(2), do: {2, 24, 24}\n  def human_years_cat_years_dog_years(x), do: {x, 24 + (x - 2) * 4, 24 + (x - 2) * 5}\n\nend\n","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79369,"user_id":null,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (human_years) do\n    case human_years do\n      1 -> {1, 15, 15}\n      2 -> {2, 24, 24}\n      n -> delta = n - 2; {n, 24 + (delta * 4), 24 + (delta * 5)}\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79370,"user_id":null,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (human_years) do\n    case human_years do\n      1 -> {1, 15, 15}\n      _ -> {human_years, (24 + (human_years - 2) * 4), (24 + (human_years - 2) * 5)}\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79371,"user_id":null,"body":"defmodule Dinglemouse do\n  def human_years_cat_years_dog_years (human_years) do\n    {human_years, cat_years(human_years), dog_years(human_years)}\n  end\n  \n  defp cat_years(1), do: 15\n  defp cat_years(2), do: 24\n  defp cat_years(n), do: 24 + (n - 2) * 4\n  \n  defp dog_years(1), do: 15\n  defp dog_years(2), do: 24\n  defp dog_years(n), do: 24 + (n - 2) * 5\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79372,"user_id":null,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (human_years) do\n    {human_years, cat_years(human_years), dog_years(human_years)}\n  end\n  \n  def cat_years(1), do: 15\n  def cat_years(2), do: 24\n  def cat_years(human_years), do: 4 + cat_years(human_years - 1)\n  \n  def dog_years(1), do: 15\n  def dog_years(2), do: 24\n  def dog_years(human_years), do: 5 + dog_years(human_years - 1)\n\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79373,"user_id":53,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (y) do\n    {y, y * 4 + 11 + (if y > 1, do: 5, else: 0), y * 5 + 10 + (if y > 1, do: 4, else: 0)}\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79374,"user_id":null,"body":"defmodule Dinglemouse do\n  def b(x), do: if x, do: 1, else: 0\n  def calc_age(human_years, var), do: 15 + 9 * b(human_years>=2) + (human_years-2) * var * b(human_years>2)\n  def human_years_cat_years_dog_years (human_years) do\n    {human_years, calc_age(human_years, 4), calc_age(human_years, 5)}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79375,"user_id":null,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (human_years) do\n    cat = (human_years - 2 >= 0 && 24 + (human_years - 2) * 4) || (human_years == 1 && 15) || 24\n    dog = (human_years - 2 >= 0 && 24 + (human_years - 2) * 5) || (human_years == 1 && 15) || 24\n    {human_years, cat, dog}\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79376,"user_id":null,"body":"defmodule Dinglemouse do\n  @moduledoc false\n\n  def human_years_cat_years_dog_years (human_years) do\n    {cat, dog} = case human_years do\n      1 ->\n        {15, 15}\n      2 ->\n        {24, 24}\n      a ->\n        a = a-2\n        {24 + a * 4, 24 + a * 5}\n    end\n    {human_years, cat, dog}\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a7893ef0025e9eb50000013":[{"id":79377,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums |> Enum.sort \n    |> Enum.chunk_every(2,1) \n    |> Enum.filter(fn(pair)->length(pair) == 2 end) \n    |> Enum.map(fn([a,b]) -> (b-a) end)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79378,"user_id":1624,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums\n    |> Enum.sort\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.map(fn [a,b] -> b-a end)\n    |> Enum.max\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79379,"user_id":null,"body":"defmodule MaxGap do\n  @spec max_gap([integer]) :: integer\n  def max_gap(nums) do\n    sorted = Enum.sort(nums, :desc)\n    max_gap(sorted, [])\n  end\n  \n  defp max_gap(nums, acc) when length(nums) < 2, do: Enum.max(acc)\n  \n  defp max_gap([first, second | tail], acc) do\n    max_gap([second | tail], [first - second | acc])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79380,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    sn = Enum.sort(nums)\n    Enum.zip(sn, Enum.slice(sn, 1..-1)) |> Enum.map(fn {a,b} -> b-a end) |> Enum.max\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79381,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    sorted = Enum.sort(nums)\n    [_ | tail] = sorted\n    \n    Enum.zip(sorted, tail)\n    |> Enum.reduce(0, fn elements, acc ->\n      {a, b} = elements\n      if b - a > acc, do: b - a, else: acc\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79382,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums = nums |> Enum.sort(:desc)\n    0..(length(nums) - 1)\n    |> Enum.map(\n      &if &1 < length(nums) - 1, do: abs(Enum.at(nums, &1) - Enum.at(nums, &1 + 1)), else: 0\n    )\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79383,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums\n    |> Enum.sort\n    |> Enum.chunk_every(2, 1)\n    |> Enum.filter(&(length(&1) > 1))\n    |> Enum.map(fn([x,y]) -> abs(x-y) end)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79384,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums\n    |> Enum.sort()\n    |> m_gap()\n  end\n  \n  defp m_gap(nums), do: m_gap(nums, 0)\n  defp m_gap([], max_gap), do: max_gap\n  defp m_gap([_], max_gap), do: max_gap\n  defp m_gap([a, b | tail], max_gap) do\n    new_gap = abs(a  - b)\n    if new_gap > max_gap, do: m_gap([b | tail], new_gap), else: m_gap([b | tail], max_gap)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79385,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    nums\n    |> Enum.sort()\n    |> Enum.chunk_every(2, 1, :discard)\n    |> Enum.max_by(&get_gap\/1)\n    |> get_gap()\n  end\n  \n  defp get_gap([a, b]) do\n    abs(a - b)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79386,"user_id":null,"body":"defmodule MaxGap do\n  def max_gap(nums) do\n    c = Enum.sort(nums)\n    Enum.zip(c, tl c)\n    |> Enum.map(fn {a,b} -> b - a end)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a7f58c00025e917f30000f1":[{"id":79387,"user_id":470,"body":"defmodule Kata do\n\tdef longest(\"\"),do: \"\"\n\tdef longest(<<c>><>s),do: ix(s,c,\"\",<<c>><>\"\",0,1)\n\t\n\tdefp ix(<<nc>><>s,cc,cs,ns,cl,nl) do\n\t\tif cc > nc do\n\t\t\tif nl > cl do\n\t\t\t\tix(s,nc,ns,<<nc>><>\"\",nl,1)\n\t\t\telse\n\t\t\t\tix(s,nc,cs,<<nc>><>\"\",cl,1)\n\t\t\tend\n\t\telse\n\t\t\tix(s,nc,cs,<<nc>><>ns,cl,nl+1)\n\t\tend\n\tend\n\t\n\tdefp ix(\"\",_,cs,ns,cl,nl),do: (if nl > cl,do: ns,else: cs) |> String.reverse()\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79388,"user_id":null,"body":"defmodule Kata do\n    def longest(s) do\n    s\n    |> String.split(\"\")\n    |> Enum.to_list()\n    |> Enum.filter(fn x -> x != \"\" end)\n    |> find_longest_alpha_string()\n    |> Enum.join(\"\")\n  end\n\n  def find_longest_alpha_string(\n        master_list,\n        current_list \\\\ [],\n        current_longest \\\\ []\n      ) do\n    if Enum.empty?(master_list) do\n      if length(current_list) > length(current_longest) do\n        current_list\n      else\n        current_longest\n      end\n    else\n      {first_value, updated_master} = List.pop_at(master_list, 0)\n\n      if Enum.empty?(current_list) do\n        find_longest_alpha_string(updated_master, [first_value], current_longest)\n      else\n        if first_value >= List.last(current_list) do\n          find_longest_alpha_string(\n            updated_master,\n            current_list ++ [first_value],\n            current_longest\n          )\n        else\n          if length(current_list) > length(current_longest) do\n            find_longest_alpha_string(updated_master, [first_value], current_list)\n          else\n            find_longest_alpha_string(updated_master, [first_value], current_longest)\n          end\n        end\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79389,"user_id":null,"body":"defmodule Kata do\n  def longest(s) do\n    Regex.scan(~r\/a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*\/, s)\n    |> List.flatten()\n    |> Enum.max_by(&String.length\/1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79390,"user_id":null,"body":"defmodule Kata do\n    def longest(\"\"), do: \"\"\n    \n    def longest(s) do\n      s\n      |> to_charlist\n      |> get_longest({[], []})\n      |> Enum.reverse()\n      |> Enum.max_by(&String.length\/1)\n    end\n    \n    defp get_longest([], {list, charlist}) do\n      string = charlist\n      |> Enum.reverse()\n      |> to_string\n      \n      [string | list]\n    end\n    \n    defp get_longest(current, {list, charlist = []}) do\n      [head | tail] = current\n      \n      get_longest(tail, {list, [head | charlist]})\n    end\n    \n    defp get_longest(current, _acc = {list, charlist}) do\n      [h_current | t_current] = current\n      [h_charlist | _] = charlist\n      \n      if h_current >= h_charlist do\n          get_longest(t_current, {list, [h_current | charlist]})\n      else\n          string = charlist\n          |> Enum.reverse()\n          |> to_string\n\n          get_longest(t_current, {[string | list], [h_current]})\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79391,"user_id":null,"body":"defmodule Kata do\n\n  def longest(str), do:\n    str\n    |> String.graphemes\n    |> get_longest([], [])\n    |> Enum.reverse\n    |> Enum.reduce([], fn x, acc -> if length(x) > length(acc), do: x, else: acc end)\n    |> Enum.reverse\n    |> Enum.join\n\n  defp get_longest([head], [], acc), do: [[head] | acc]\n  defp get_longest([h1], [cur_h | cur_t], acc) when h1 >= cur_h, do: [[h1, cur_h | cur_t] | acc]\n  defp get_longest([h1], [cur_h | cur_t], acc), do: [[h1], [cur_h | cur_t] | acc]\n  defp get_longest([h1, h2 | tail], current, acc) when h1 > h2, do: get_longest([h2 | tail], [], [[h1 | current] | acc])\n  defp get_longest([h1, h2 | tail], current, acc), do: get_longest([h2 | tail], [h1 | current], acc)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79392,"user_id":null,"body":"defmodule Kata do\n  def longest(s) do\n    s\n    |> String.split(\"\", trim: true)\n    |> Enum.reduce([[]], fn x, [head | _] = acc -> compare(x, head, acc) end)\n    |> Enum.reverse()\n    |> Enum.reduce({0, []}, fn x, {size, _} = acc ->\n      xlen = x |> length()\n      if xlen > size, do: {xlen, x}, else: acc\n    end)\n    |> elem(1)\n    |> Enum.reverse()\n    |> Enum.join()\n  end\n\n  defp compare(x, [], [_ | tail]), do: [[x] | tail]\n  defp compare(x, [prev | _] = word, [_ | tail]) when x >= prev, do: [[x | word] | tail]\n  defp compare(x, [prev | _], acc) when x < prev, do: [[x] | acc]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79393,"user_id":null,"body":"defmodule Kata do\n  def longest(s) do\n    s\n    |> String.split(\"\", trim: true)\n    |> split\n    |> Enum.reverse\n    |> Enum.join\n  end\n\n  def split(list) when length(list) == 1, do: list\n  def split(list), do: split(list, [], [], 1, 0)\n  def split([h1,h2], temp, rlist, c, n) do\n    cond do\n      h1 > h2 and c > n ->\n        [h1|temp]\n      h1 > h2 ->\n        rlist\n      true ->\n        l1 = [h2,h1|temp] |> length\n        l2 = rlist |> length\n        cond do\n          l1 > l2 ->\n            [h2,h1|temp]\n          true ->\n            rlist\n        end\n    end\n  end\n  def split([h1,h2|t], temp, rlist, c, n) do\n    cond do\n      h1 > h2 and c > n ->\n        split([h2|t], [], [h1|temp], 1, c)\n      h1 > h2 ->\n        split([h2|t], [], rlist, 1, n)\n      true ->\n        split([h2|t], [h1|temp], rlist, c+1, n)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79394,"user_id":null,"body":"defmodule Kata do\n\n  def chunker(element, []), do: {:cont, [element]}\n  def chunker(element, [h| acc]) do\n    if element >= h do\n      {:cont, [element, h| acc]}\n    else\n      {:cont, Enum.reverse([h| acc]), [element]}\n    end\n  end\n  \n  def alphabetical?([a, b| _]) when a <= b, do: true\n  def alphabetical?([_| _]), do: true\n  def alphabetical?(_), do: false\n  \n  def longest(s) do\n    s\n    |> String.to_charlist\n    |> Enum.chunk_while([], &chunker\/2, &({:cont, Enum.reverse(&1), []}))\n    |> Enum.filter(&alphabetical?\/1)\n    |> Enum.max_by(&length\/1)\n    |> List.to_string\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79395,"user_id":null,"body":"defmodule Kata do\n    defp max_s(a,b), do: if byte_size(a) > byte_size(b), do: a, else: b\n    \n    defp helper(\"\",a,t,r), do: max_s(t <> <<a>>,r)\n    defp helper(<<b>> <> s,a,t,r) when a <= b, do: helper(s,b,t <> <<a>>,r)\n    defp helper(<<b>> <> s,a,t,r), do: helper(s,b,\"\",max_s(t <> <<a>>,r))\n\n    def longest(\"\"), do: \"\"\n    def longest(<<c>> <> s), do: helper(s,c,\"\",\"\")\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79396,"user_id":null,"body":"defmodule Kata do\n    defp find_substring(substring, previous, [head | tail]) when previous <= head do\n      find_substring(substring <> List.to_string([round(head)]), head, tail)      \n    end\n    defp find_substring(substring, _, []) do\n      {substring, []}  \n    end\n    defp find_substring(substring, _, [head | tail]) do\n      {substring, [head | tail]}  \n    end\n    \n    defp iterate_longest(_, max_substring, []) do\n      max_substring\n    end\n    \n    defp iterate_longest(max_length, max_substring, to_eval) do\n      {substring, tail} = find_substring(\"\", 0, to_eval)\n      if max_length < String.length(substring) do\n        iterate_longest(String.length(substring), substring, tail)\n      else\n        iterate_longest(max_length, max_substring, tail)  \n      end\n    end\n    \n    def longest(s) do\n        s_charlist = String.to_charlist(s)\n        \n        iterate_longest(0, \"\", s_charlist)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a87449ab1710171300000fd":[{"id":79397,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    Integer.digits(n) == Integer.digits(n) |> Enum.sort() \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79398,"user_id":null,"body":"defmodule TidyNumber do\n  @moduledoc\"\"\"\n  ## KATA - TidyNumber\n  A Tidy number is a number whose digits are in non-decreasing order.\n  \"\"\"\n  @doc\"\"\"\n  The `tidy_number\/1` function checks that every digit in a multi-digit number is greater than or equal to the previous number.\n  \n  ## Params\n  1. number: pos_integer \n  \n  ## Example\n    iex> TidyNumber.tidy_number(12)\n    true\n    iex> TidyNumber.tidy_number(102)\n    false\n    \n  ## Solution\n  We want to be able to halt the function if at any point a condition fails, thus saving us unnecessary computation time.\n  1. Use `Integer.digits\/2` to split a number into digits \n  2. Use `Enum.reduce_while\/3` to halt the function at any point the current digit is less than the previous digit.\n  \"\"\"\n  @spec tidy_number(pos_integer) :: boolean\n  def tidy_number(number) do\n    number\n    |> Integer.digits()\n    |> Enum.reduce_while({nil, 0}, fn x, {_bool, val} = acc ->\n      if x >= val, \n      do: {:cont, acc = {true, x}},\n      else: {:halt, acc = {false, val}} \n    end)\n    |> elem(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79399,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    d = Integer.digits(n)\n    Enum.zip(d, Enum.slice(d, 1..-1)) |> Enum.all?(fn {a,b} -> a<=b end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79400,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    n = n |> Integer.digits()\n\n    0..(length(n) - 1)\n    |> Enum.map(fn x ->\n      if Enum.at(n, x) <= Enum.at(n, x + 1), do: true, else: false\n    end)\n    |> Enum.sort()\n    |> List.first()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79401,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n), do: tidy_number(to_charlist(n),1)\n  defp tidy_number(x, i) when i == length(x), do: true\n  defp tidy_number(x, i), do: if(Enum.at(x,i) >= Enum.at(x,i-1), do: tidy_number(x, i+1), else: false)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79402,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n), do: tidy_number(to_charlist(n),1)\n  def tidy_number(x, i) when i == length(x), do: true\n  def tidy_number(x, i), do: if(Enum.at(x,i) >= Enum.at(x,i-1), do: tidy_number(x, i+1), else: false)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79403,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    Integer.digits(n) == Enum.sort(Integer.digits(n))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79404,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    n \n    |> Integer.digits() \n    |> Enum.sort()\n    |> Integer.undigits()\n    |> Kernel.==(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79405,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    n == Integer.to_string(n) |> String.split(\"\", trim: true) |> Enum.map(&(String.to_integer(&1))) |> Enum.sort |> Enum.join |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79406,"user_id":null,"body":"defmodule TidyNumber do\n  def tidy_number(n) do\n    n\n    |> Integer.digits()\n    |> Enum.sort()\n    |> Enum.join()\n    |> String.to_integer()\n    |> compare(n)\n  end\n  \n  defp compare(last, n), do: last == n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a905c2157c562994900009d":[{"id":79407,"user_id":1624,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    e = Enum.reduce(nums, fn (a,b) -> a*b end)\n    Enum.map(nums, fn a -> e\/a end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79408,"user_id":53,"body":"defmodule ProductArray do\n  def product_array(xs) do\n    p = Enum.reduce(xs, 1, fn x, acc -> acc * x end)\n    Enum.map(xs, fn x -> div(p, x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79409,"user_id":null,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    product = Enum.reduce(nums, &*\/2)\n    Enum.map(nums, &div(product, &1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79410,"user_id":168,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    p = Enum.reduce(nums, 1, &(&1 * &2))\n    Enum.map(nums, &(p \/ &1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79411,"user_id":null,"body":"defmodule ProductArray do\n  @spec product_array([integer]) :: [integer]\n  def product_array(arr) do\n    product_array(arr, 0, [])\n  end\n  \n  defp product_array(arr, index, acc) when index == length(arr), do: acc\n  \n  defp product_array(arr, index, acc) do\n    new_arr =  List.delete_at(arr, index) |> Enum.reduce(1, fn x, acc -> x * acc end)\n    product_array(arr, index + 1, acc ++ [new_arr])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79412,"user_id":null,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    prod = Enum.reduce(nums, & &1*&2)\n    Enum.map(nums, &prod\/&1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79413,"user_id":null,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    Enum.map(nums, fn x -> div(Enum.reduce(nums, &*\/2), x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79414,"user_id":250,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    p = Enum.reduce(nums, 1, fn x, acc -> x * acc end)\n    \n    Enum.map(nums, fn x -> p \/ x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79415,"user_id":null,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    nums\n    |> compare\n    |> mul\n  end\n\n  defp compare(x), do: Enum.map(x, fn(a) -> x -- [a] end)\n  defp mul(x), do: Enum.map(x, fn(a) -> Enum.reduce(a, fn(b, acc) -> b *acc end) end) \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79416,"user_id":null,"body":"defmodule ProductArray do\n  def product_array(nums) do\n    nums\n    |> Enum.map(fn x ->\n      Enum.reduce(List.delete(nums, x), fn x, acc -> x * acc end)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a91a7c5fd8c061367000002":[{"id":79417,"user_id":527,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    nums\n    |> Enum.sort\n    |> Enum.scan(0, &Kernel.+\/2)\n    |> Enum.find_index(&(&1 >= value))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79418,"user_id":null,"body":"defmodule MinimumSteps do\n  @spec minimum_steps([pos_integer], pos_integer) :: pos_integer\n  def minimum_steps(nums, value) do\n    nums\n    |> Enum.sort()\n    |> Enum.reduce_while({0, 0}, fn x, {sum, count} ->\n      if elem({sum + x, count}, 0) < value, \n      do: {:cont, {sum + x, count + 1}},\n      else: {:halt, elem({sum, count}, 1)}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79419,"user_id":null,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    Enum.sort(nums) |> Enum.scan(&+\/2) |> Enum.count(& &1 < value)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79420,"user_id":null,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    nums\n    |> Enum.sort()\n    |> Enum.scan(&(&1 + &2))\n    |> Enum.find_index(&(&1 >= value))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79421,"user_id":470,"body":"defmodule MinimumSteps do\n  def minimum_steps(r,n) do\n    [h|r] = Enum.sort(r)\n    forge(r,n,h,0)\n  end\n  \n  defp forge([],_,_,ct),do: ct\n  defp forge(_,n,v,ct) when v >= n,do: ct\n  defp forge([h|r],n,v,ct), do: forge(r,n,h+v,ct+1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79422,"user_id":53,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, k), do: \n    nums \n      |> Enum.sort \n      |> Enum.reduce({0, -1}, fn acc, {a, b} -> if a < k, do: {a + acc, b + 1}, else: {a, b} end) |> elem(1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79423,"user_id":null,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    Enum.sort(nums)\n    |> Enum.scan(fn x, acc -> x + acc end)\n    |> Enum.find_index(fn x -> x >= value end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79424,"user_id":null,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    if Enum.min(nums) >= value do\n      0\n    else\n      new_nums = Enum.sort(nums) |> tl\n      current_sum = Enum.min(nums)\n      step_count = 1\n      minimum_steps(new_nums, value, current_sum, step_count)\n    end\n  end\n\n  def minimum_steps(nums, value, current_sum, step_count) do\n    if current_sum + Enum.min(nums) >= value do\n      step_count\n    else\n      new_nums = Enum.sort(nums) |> tl\n      new_current_sum = current_sum + Enum.min(nums)\n      new_step_count = step_count + 1\n      minimum_steps(new_nums, value, new_current_sum, new_step_count)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79425,"user_id":null,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    nums\n    |> Enum.sort()\n    |> Stream.scan(&+\/2)\n    |> Enum.find_index(& &1 >= value)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79426,"user_id":168,"body":"defmodule MinimumSteps do\n  def minimum_steps(nums, value) do\n    nums \n    |> Enum.sort \n    |> Enum.scan(&+\/2) \n    |> Enum.take_while(&(&1 < value))\n    |> length\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a99a03e4a6b34bb3c000124":[{"id":79427,"user_id":null,"body":"defmodule NumPrimorial do\n  def is_prime(x), do: 2..x |> Enum.filter(fn a -> rem(x, a) == 0 end) |> length() == 1\n\n  def prime(n),\n    do: Stream.interval(1) |> Stream.drop(2) |> Stream.filter(&is_prime\/1) |> Enum.take(n)\n\n  def num_primorial(n) do\n    prime(n)\n    |> Enum.reduce(1,&(&1 * &2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79428,"user_id":null,"body":"defmodule NumPrimorial do\n  def num_primorial(n), do: prime(n) |> Enum.reduce(fn n, acc -> n * acc end)\n  def is_prime(x), do: (2..x |> Enum.filter(fn a -> rem(x, a) == 0 end) |> length()) == 1\n  def prime(n), do: Stream.iterate(2, & &1 + 1) |> Stream.filter(&is_prime\/1) |> Enum.take(n)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79429,"user_id":null,"body":"defmodule NumPrimorial do\n  @primes [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    53,\n    59,\n    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97\n  ]\n  def num_primorial(n), do: Enum.take(@primes, n) |> Enum.reduce(&*\/2)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79430,"user_id":null,"body":"defmodule NumPrimorial do\n  def num_primorial(n), do: Enum.reduce(primes(n), & &1 * &2)\n  \n  defp primes(n), do: primes(n, [2], 3)\n  defp primes(n, acc, _) when length(acc) == n, do: acc\n  defp primes(n, acc, last) do\n    if Enum.any?(acc, &(Integer.mod(last, &1) == 0)) do\n      primes(n, acc, last+1)\n    else\n      primes(n, [last|acc], last+1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79431,"user_id":null,"body":"defmodule NumPrimorial do\n  \n  def prime?(primes,n) do #assumes we have all primes up to, but not including, n\n    next_prime = hd(primes)\n\n    case {rem(n,next_prime) == 0, tl(primes) == []} do\n      {true, true} -> false\n      {true, false} -> false\n      {false,true} -> true\n      {false,false} -> prime?(tl(primes),n)\n    end\n   end\n\n  def sieve(primes \\\\ [2],limit,possibly_prime \\\\ 3) do\n    case {possibly_prime >= limit, prime?(primes,possibly_prime)} do\n      {true, true} -> Enum.reverse([possibly_prime | primes])\n      {true, false} -> Enum.reverse(primes)\n      {false,true} -> sieve([possibly_prime | primes], limit, possibly_prime + 1)\n      {false, false} -> sieve(primes, limit, possibly_prime + 1)\n    end\n  end\n\n  def first_n_primes(count \\\\ 2,n, primes \\\\ [2]) do\n    case length(primes) >= n do\n      true -> primes\n      false -> first_n_primes(count+1,n, sieve(primes,n,count+1))\n    end\n  end\n\n  def num_primorial(n) do\n    Enum.reduce(first_n_primes(n),&(&1 * &2))\n  end\n\n\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79432,"user_id":53,"body":"defmodule NumPrimorial do\n  def num_primorial(n) do\n    [1, 2, 6, 30, 210, 2310, \n     30030, 510510, 9699690, 223092870, \n     6469693230, 200560490130, 7420738134810, 304250263527210,\n     13082761331670030, 614889782588491410] |> Enum.at(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79433,"user_id":null,"body":"defmodule NumPrimorial do\n  def num_primorial(n) do\n    go(n, 0, 1, 2)\n  end\n  \n  defp go(n, count, prod, _num) when n == count, do: prod\n\n  defp go(n, count, prod, 2), do: go(n, count+1, 2*prod, 3)\n\n  defp go(n, count, prod, num) do\n    if prime?(num) do\n      go(n, count+1, prod*num, num+2)\n    else\n      go(n, count, prod, num+2)\n    end\n  end\n\n  def prime?(n) when n <= 1, do: false\n  def prime?(2), do: true\n  def prime?(n) do\n    2..(trunc(:math.sqrt(n)) + 1)\n    |> Enum.reduce_while(true, fn x, acc ->\n      if rem(n, x) == 0 do\n        {:halt, false}\n      else\n        {:cont, true}\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79434,"user_id":null,"body":"defmodule NumPrimorial do\n  defp estimated_size_of_nth_prime(n) when n < 6, do: 12\n  defp estimated_size_of_nth_prime(n), do: round(n * :math.log(n) + n * :math.log(:math.log(n)))\n\n  defp get_primes(estimated_max) do\n    estimated_max |> (fn(max) -> 2..max end).()\n                  |> Enum.to_list()\n                  |> sieve_sieve(0)\n                  |> Enum.filter(fn(num) -> num != -1 end)\n  end\n  \n  defp sieve_sieve(sieve, index) do\n    if Enum.count(sieve) == index, \n      do: sieve,\n      else: sieve_sieve(\n        Enum.map(\n          sieve, \n          fn(num) -> \n            prime_candidate = Enum.at(sieve, index) \n          \n            if num == prime_candidate\n              or rem(num, prime_candidate) != 0\n              or prime_candidate == -1, \n              do: num, \n              else: -1\n          end \n        ), \n        index + 1\n      )\n  end\n\n  def num_primorial(n) do\n    n |> estimated_size_of_nth_prime\n      |> get_primes\n      |> Enum.take(n)\n      |> Enum.reduce(1, fn(a,b) -> a * b  end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79435,"user_id":null,"body":"defmodule NumPrimorial do\n  \n  def is_prime(x), do: (2..x |> Enum.filter(fn a -> rem(x, a) == 0 end) |> length()) == 1\n  \n  def num_primorial(n) do\n    2..1000\n    |> Enum.filter(&is_prime(&1))\n    |> Enum.take(n)\n    |> Enum.reduce(&(&1*&2))\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79436,"user_id":null,"body":"defmodule NumPrimorial do\n  def num_primorial(n) do\n    get_n_first_primes(n) |> Enum.reduce(1, &(&1 * &2))\n  end\n  \n  defp get_n_first_primes(1), do: [2]\n  defp get_n_first_primes(n) do  \n    2..n |> Enum.reduce([2], fn _x, acc -> acc ++ [get_next_prime(List.last(acc))] \n    end)\n  end \n  \n  defp get_next_prime(n) do\n    if is_prime(n + 1), do: n + 1, else: get_next_prime(n + 1)\n  end\n  \n  defp is_prime(n) when n <= 3, do: if n > 1, do: true, else: false\n  defp is_prime(n) when rem(n, 2) == 0, do: false\n  defp is_prime(n) when rem(n, 3) == 0, do: false\n  defp is_prime(n) do\n    if Enum.take_every(5..n, 6) |> Enum.find(fn x -> \n      (rem(n, x) == 0 || rem(n, x + 2) == 0) && :math.pow(x, 2) <= n\n    end), do: false, else: true\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5aa1bcda373c2eb596000112":[{"id":79437,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    nums\n    |> Enum.uniq()\n    |> Enum.sort()   \n    |> Enum.take(-3)    \n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79438,"user_id":null,"body":"defmodule MaxTriSum do\n  @spec max_tri_sum([integer]) :: integer \n  def max_tri_sum(nums) do\n    nums\n    |> Enum.sort(:desc)\n    |> Enum.uniq()\n    |> Enum.take(3)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79439,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    Enum.uniq(nums) |> Enum.sort(:desc) |> Enum.take(3) |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79440,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    nums\n    |> Enum.uniq\n    |> Enum.sort(:desc)\n    |> Enum.chunk_every(3, 1, :discard)\n    |> Enum.map(&Enum.sum\/1)\n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79441,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    nums\n    |> Stream.uniq()\n    |> Enum.sort(:desc)\n    |> Enum.take(3)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79442,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    Enum.sort(nums) |> Enum.uniq |> Enum.take(-3) |> Enum.sum\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79443,"user_id":null,"body":"defmodule MaxTriSum do\n\n  def max_tri_sum(nums) do\n    nums\n    |> Enum.sort(:desc)\n    |> Enum.uniq()\n    |> Enum.take(3)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79444,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    Enum.sort(nums)\n    |> Enum.dedup()\n    |> Enum.take(-3)\n    |> Enum.sum()\n  end\nend\n\n#testing([-3,-2,0,4,3],7)","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79445,"user_id":null,"body":"defmodule MaxTriSum do\n  def max_tri_sum(nums) do\n    nums\n    |> Enum.uniq\n    |> Enum.sort(fn x, y ->  x < y end)\n    |> Enum.take(-3)\n    |> Enum.sum\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79446,"user_id":null,"body":"defmodule MaxTriSum do\n  \n  \n\n  def max_tri_sum(nums) do \n    \n    nums |> Enum.sort(&(&1 >= &2)) |> Enum.dedup() |> Enum.take(3) |> List.foldr(0, &(&1+&2))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5aba780a6a176b029800041c":[{"id":79447,"user_id":676,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound), do: divisor * div(bound, divisor)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79448,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound), do: max_multiple(divisor, bound, divisor)\n  def max_multiple(divisor, bound, current) when current + divisor > bound, do: current\n  def max_multiple(divisor, bound, current), do: max_multiple(divisor, bound, current + divisor)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79449,"user_id":50,"body":"defmodule MaxMultiple do\n  def max_multiple(d, b) do\n    d*floor(b\/d)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79450,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    if rem(bound, divisor) == 0 do\n      max_multiple(bound)\n    else\n      max_multiple(divisor, bound - 1)\n    end\n  end\n  \n  def max_multiple(bound) do\n    bound\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79451,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    if(rem(bound, divisor) === 0) do\n      bound\n    else\n      max_multiple(divisor, bound - 1)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79452,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    divisor * div(bound, divisor)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79453,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    divisor..bound\n    |> Enum.filter(fn x -> rem(x,divisor)==0 end) \n    |> Enum.max\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79454,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    Enum.max(Enum.filter(bound..0, fn x -> rem(x, divisor) == 0 end))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79455,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    divisor..bound\n    |> Enum.reverse()\n    |> Enum.drop_while(fn x -> rem(x, divisor) != 0 end)\n    |> List.first()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79456,"user_id":null,"body":"defmodule MaxMultiple do\n  def max_multiple(divisor, bound) do\n    if (rem bound, divisor) != 0 do\n      max_multiple(divisor, bound - 1)\n    else\n      bound\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5abd66a5ccfd1130b30000a9":[{"id":79457,"user_id":676,"body":"defmodule RowWeights do\n  require Integer\n  \n  def row_weights(arr) do\n    arr\n    |> Stream.with_index()\n    |> Enum.reduce({0, 0}, fn\n      {x, i}, {a, b} when Integer.is_even(i) -> {a + x, b}\n      {x, _}, {a, b} -> {a, b + x}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79458,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do\n    second_team = arr\n    |> Enum.take_every(2)\n    |> Enum.sum\n    total_sum = Enum.sum(arr)\n    first_team = total_sum - second_team\n    \n    {second_team, first_team}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79459,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do    \n    {Enum.sum(even(arr)), Enum.sum(odd(arr))}\n  end\n  \n  def odd(arr), do: arr |> Stream.drop_every(2)\n  def even(arr), do: arr |> Stream.take_every(2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79460,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do\n    team1 = arr\n      |> Enum.take_every(2)\n      |> Enum.sum()\n    team2 = arr\n      |> Enum.drop_every(2)\n      |> Enum.sum()\n    {team1, team2}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79461,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do\n    Enum.with_index(arr)\n    |> row([], [])\n  end\n\n  def row([], group_1, group_2), do: {Enum.sum(group_1), Enum.sum(group_2)}\n\n  def row([{value, index} | tail], group_1, group_2) do\n    case rem(index, 2) do\n      0 ->\n        row(tail, group_1 ++ [value], group_2)\n\n      1 ->\n        row(tail, group_1, group_2 ++ [value])\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79462,"user_id":1624,"body":"defmodule RowWeights do\n  def sum_half(arr) do\n    arr\n    |> Enum.drop_every(2)\n    |> Enum.sum\n  end\n\n  def row_weights(arr) do\n    { sum_half([0|arr]), sum_half(arr) }\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79463,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do\n    # your code here, and return a tuple\n    odd = arr |> Enum.with_index()\n    |> Enum.reduce(0, fn({number, index}, acc) -> \n    if rem(index,2) == 1 do \n    acc + number\n    else\n    acc\n    end\n    end)\n    \n    even = arr |> Enum.with_index()\n    |> Enum.reduce(0, fn({number, index}, acc)-> \n    if rem(index, 2)== 0 do \n    acc + number \n    else\n    acc\n    end\n    end)\n    \n    {even,odd}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79464,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights([x]), do: {x, 0}\n  def row_weights([x, y]), do: {x, y}\n  def row_weights(xs) do\n    xs_with_index = Enum.with_index(xs)\n    xs_even = index_sum(xs_with_index, :even)\n    xs_odd = index_sum(xs_with_index, :odd)\n    {xs_even, xs_odd}\n  end\n  \n  defp index_sum(arr, :even) do\n    arr\n    |> Enum.filter(fn {_x, i}-> rem(i, 2) == 0 end) \n    |> Enum.map(fn {x, y} -> x end)\n    |> Enum.sum\n  end\n  \n  defp index_sum(arr, :odd) do\n    arr\n    |> Enum.filter(fn {_x, i}-> rem(i, 2) == 1 end) \n    |> Enum.map(fn {x, y} -> x end)\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79465,"user_id":null,"body":"defmodule RowWeights do  \n  def row_weights(list), do: assign_to_team(list, {0, 0})\n  \n  def assign_to_team([odd, even | rest], {odd1, even1}), do: assign_to_team(rest, {odd+odd1, even+even1})\n  \n  def assign_to_team([odd], {odd1, even1}), do: assign_to_team([], {odd+odd1, even1})\n  \n  def assign_to_team(_, list), do: list\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79466,"user_id":null,"body":"defmodule RowWeights do\n  def row_weights(arr) do\n    {Enum.sum(Enum.take_every(arr, 2)), Enum.sum(Enum.drop_every(arr,2))}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ac6932b2f317b96980000ca":[{"id":79467,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    numbers\n    |> Enum.uniq()\n    |> Enum.sort()\n    |> Integer.undigits()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79468,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    numbers \n    |> Enum.sort\n    |> Enum.dedup\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79469,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    MapSet.new(numbers)\n    |> Enum.sort()\n    |> Integer.undigits()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79470,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    Enum.uniq(numbers)\n    |> Enum.sort\n    |> Enum.join(\"\")\n    |> String.to_integer(10)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79471,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    numbers\n    |> Enum.uniq\n    |> Enum.sort\n    |> Enum.join\n    |> String.to_integer\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79472,"user_id":null,"body":"defmodule Solution do\n\n  def minValue(numbers) do\n    numbers\n    |> Enum.reduce(MapSet.new(), &(MapSet.put(&2, &1)))\n    |> MapSet.to_list()\n    |> Enum.sort()\n    |> Enum.reduce(0, &(10 * &2 + &1))\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79473,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do   \n    numbers\n    |> MapSet.new()\n    |> MapSet.to_list()\n    |> Enum.sort()\n    |> Enum.join()\n    |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79474,"user_id":null,"body":"defmodule Solution do\n  require Integer\n  def minValue(numbers) do\n    h = numbers |>\n    Enum.uniq |>\n    Enum.sort() |>\n    Enum.join() |>\n    Integer.parse()\n\n    elem(h,0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79475,"user_id":null,"body":"defmodule Solution do\n  @spec minValue([integer]) :: integer\n  def minValue(numbers) do\n    numbers\n    |> Enum.sort\n    |> Enum.uniq\n    |> Integer.undigits\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79476,"user_id":null,"body":"defmodule Solution do\n  def minValue(numbers) do\n    numbers\n      |> Enum.uniq()\n      |> Enum.sort()\n      |> List.foldl(0, fn x, num -> num * 10 + x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ac69d572f317bdfc3000124":[{"id":79477,"user_id":872,"body":"defmodule PandigitalSequence do\n  \n  def get_sequence(offset, size) when offset <= 9876543210 do\n    max(offset, 1023456789)..9876543210\n    |> Stream.filter(fn elem -> MapSet.size(MapSet.new(Integer.digits(elem))) == 10 end)\n    |> Stream.take(size)\n    |> Enum.to_list()\n  end\n\n  def get_sequence(offset, _size) when offset > 9876543210, do: []\n  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79478,"user_id":null,"body":"defmodule PandigitalSequence do\n\n  def get_sequence(offset, _) when offset > 9876543210, do: []\n  def get_sequence(offset, size) when offset < 1023456789, do: get_sequence(1023456789, size)\n  def get_sequence(offset, size) do\n    {numbers, _} =\n    Enum.map_reduce(1..size, offset, fn x, acc ->\n      next_pandigit = get_next_pandigit(acc) |> String.to_integer\n      \n      {next_pandigit, next_pandigit+1}\n    end)\n\n    numbers\n  end\n  \n  def get_next_pandigit(number) do    \n    next_pandigit =\n      Integer.to_string(number)\n      |> String.graphemes()\n      |> Enum.reduce_while(\"\", fn num, acc ->\n        \n        if String.contains?(acc, num) do\n          number_to_add =\n            Enum.find_index(0..9, fn add -> \n              sum = add + String.to_integer(num)\n              sum < 10 && !(String.contains?(acc, Integer.to_string(sum)))\n            end)\n\n            \n           if number_to_add == nil do\n            acc =\n              acc\n              |> String.slice(0..-1)\n              |> String.to_integer()\n              |> Kernel.+(1)\n              |> Integer.to_string()\n              |> String.pad_trailing(10, \"0\")\n            \n            {:halt, acc}\n           else\n            {:cont, \"#{acc}#{number_to_add + String.to_integer(num)}\"}\n           end\n\n        else\n          {:cont, \"#{acc}#{num}\"}\n        end\n      end)\n            \n      if is_pandigit?(next_pandigit) do\n        next_pandigit\n      else\n        get_next_pandigit(String.to_integer(next_pandigit))\n      end\n  end\n\n  def is_pandigit?(number) do\n    digits = String.to_charlist(number)\n    \n    case length(digits) do\n      10 ->\n        digits\n        |> Enum.uniq()\n        |> length()\n        |> Kernel.==(10)\n      _ ->\n        false\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79479,"user_id":443,"body":"defmodule PandigitalSequence do\n\n  def get_sequence(offset, size) do\n    get_sequence(offset, size, [])\n  end\n\n  def get_sequence(_, 0, seq) do\n    Enum.reverse(seq)\n  end\n  def get_sequence(offset, _, seq) when offset > 9876543210 do\n    Enum.reverse(seq)\n  end\n  def get_sequence(offset, size, seq) when offset < 1023456789 do\n    get_sequence(1023456789, size, seq)\n  end\n  def get_sequence(offset, size, seq) do\n    next_pandigital = generate_next_pandigital(offset)\n    get_sequence(next_pandigital + 1, size - 1, [next_pandigital | seq])\n  end\n  \n  defp generate_next_pandigital(offset) do\n    offset\n    |> Integer.digits\n    |> generate_next_pandigital([0,1,2,3,4,5,6,7,8,9], [])\n    |> Enum.reverse\n    |> Integer.undigits\n  end\n  defp generate_next_pandigital(_, [], answer) do\n    answer\n  end\n  defp generate_next_pandigital([o_digit | offset], [o_digit | available], answer) do\n    generate_next_pandigital(offset, available, [o_digit | answer])\n  end\n  defp generate_next_pandigital([o_digit | offset], available, answer) do\n    case Enum.member?(available, o_digit) do\n      :true ->\n        generate_next_pandigital(offset, List.delete(available, o_digit), [o_digit | answer])\n      :false ->\n        case Enum.find_index(available, &(&1 > o_digit)) do\n          :nil ->\n            windback_generate_next_pandigital([o_digit | offset], available, answer)\n          index ->\n            {a_digit, left} = List.pop_at(available, index)\n            generate_next_pandigital(left, left, [a_digit | answer])\n        end\n    end\n  end\n  \n  defp windback_generate_next_pandigital(offset, available, [a_head | answer]) do\n    generate_next_pandigital(\n      [a_head + 1 | List.duplicate(0, length(offset))],\n      Enum.sort([a_head | available]),\n      answer\n    )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79480,"user_id":470,"body":"defmodule PandigitalSequence do\n\timport Integer,only: [undigits: 1]\n\t\n\tdef get_sequence(ofs,_) when ofs > 9876543210,do: []\n\tdef get_sequence(ofs,n),do: forge([],max(ofs,0),n,0) |> elem(0)\n\t\n\tdefp forge(r,_,q,10),do: {[undigits(Enum.reverse(r))],0,q-1}\n\tdefp forge(r,ofs,q,c) do\n\t\tn10 = p10(9-c)\n\t\tj = if r == [],do: 1,else: 0\n\t\tj2 = div(ofs,n10)\n\t\tdr = Enum.to_list(max(j,j2)..9) -- r\n\t\tofs = if Enum.min(dr) > j2,do: 0,else: rem(ofs,n10)\n\t\tEnum.reduce_while(dr,{[],ofs,q},fn v,{rr,ofs,q} ->\n\t\t\t{r2,ofs,q} = forge([v|r],ofs,q,c+1)\n\t\t\tres = if q == 0,do: :halt,else: :cont\n\t\t\t{res,{rr ++ r2,ofs,q}}\n\t\tend)\n\tend\n\t\n\tdefp p10(n),do: trunc(:math.pow(10,n))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ae62fcf252e66d44d00008e":[{"id":79481,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    q = a + b + c\n    w = a + b * c\n    e = a * b + c\n    r = a * b * c\n    t = a * (b + c)\n    y = (a + b) * c\n    Enum.max([q, w, e, r, t, y])\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79482,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    # your code here\n    list = [a*(b+c), a*b*c, a+b*c, (a+b)*c, a+b+c]\n    Enum.max(list)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79483,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(1, b, 1), do: 2 + b\n  def expression_matter(1, b, c), do: (1 + b) * c\n  def expression_matter(a, b, 1), do: a * (b + 1)\n  def expression_matter(a, 1, c) when a >= c, do: a * (1 + c)\n  def expression_matter(a, 1, c) when a <= c, do: (a + 1) * c\n  def expression_matter(a, b, c), do: a * b * c\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79484,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    [\n      a + b + c, \n      (a + b) * c,\n      a * (b + c),\n      a *  b * c\n    ]\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79485,"user_id":null,"body":"# write code below\n\ndefmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    exp(a, b, c, [])\n  end\n\n  def exp(a, b, c, final) do\n    final = final ++ [a * (b + c)]\n    final = final ++ [a * b * c]\n    final = final ++ [a + b * c]\n    final = final ++ [(a + b) * c]\n    final = final ++ [a + b + c]\n\n    [max | _tail] = Enum.sort(final) |> Enum.reverse()\n    max\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79486,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    ops = [\n      a * (b + c),\n      a * b * c,\n      a + b * c,\n      (a + b) * c,\n      a + b + c\n    ]\n    Enum.max(ops)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79487,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(1, 1, 1), do: 3\n  def expression_matter(a, 1, 1), do: 2*a\n  def expression_matter(1, 1, c), do: 2*c\n  def expression_matter(1, b, 1), do: b+2\n  def expression_matter(a, 1, c), do: (min(a,c)+1) * max(a,c)\n  def expression_matter(1, b, c), do: (b+1)*c\n  def expression_matter(a, b, 1), do: a*(b+1)\n  def expression_matter(a, b, c), do: a*b*c\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79488,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    case {a, b, c} do\n      {1, 1, 1} -> 3\n      {1, b, 1} -> a + b + c\n      {1, b, c} -> (a + b) * c\n      {a, 1, c} when a > c -> a * (b + c)\n      {a, 1, c} when a <= c -> (a + b) * c\n      {a, b, 1} -> a * (b + c)\n      {a, b, c} -> a * b * c\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79489,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    [\n      a * b * c,\n      a + b * c,\n      a * b + c,\n      (a + b) * c,\n      a * (b + c),\n      a + b + c\n    ]\n    |> Enum.max()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79490,"user_id":null,"body":"defmodule ExpressionMatter do\n  def expression_matter(a, b, c) do\n    Enum.max([\n      a * b * c,\n      (a + b) * c,\n      a * (b + c),\n      a + b + c\n    ])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ae7e3f068e6445bc8000046":[{"id":79491,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    n = year + 1\n    case n == (Integer.digits(n) |> Enum.uniq |> Integer.undigits) do\n      true -> n\n      false -> next_happy_year n\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79492,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    Enum.find(year+1..9999, fn(x)->\n      chars = String.graphemes(to_string(x))\n      length(chars) == length(Enum.uniq(chars))\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79493,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do  \n    if unique_digits(year + 1) == 4 do\n      year + 1\n    else \n      next_happy_year(year + 1)\n    end\n  end\n\n  defp unique_digits(num) do\n    num\n      |> Integer.to_string()\n      |> String.graphemes()\n      |> Enum.uniq()\n      |> Enum.count()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79494,"user_id":645,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    if ((year + 1) |> Integer.to_string |> String.split(\"\", trim: true) |> Enum.uniq |> Enum.join |> String.to_integer) != (year + 1), do: next_happy_year(year + 1), else: year + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79495,"user_id":null,"body":"defmodule NextHappyYear do\n  @moduledoc\"\"\"\n  Kata - NextHappyYear\n  \"\"\"\n  @doc\"\"\"\n  The `next_happy_year\/1` function takes a 4 digit number and returns the first great number with uniqu digits.\n  \n  ## Example\n    iex> next_happy_year(1001)\n    1023\n  \"\"\"\n  @spec next_happy_year(pos_integer) :: pos_integer\n  def next_happy_year(year) do\n    case is_happy?(year + 1) do\n      true -> year + 1\n      false -> next_happy_year(year + 1)\n    end\n  end\n  \n  defp is_happy?(int) do\n    int\n    |> Integer.digits()\n    |> Enum.uniq\n    |> fn x -> length(x) == 4 end.()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79496,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    Stream.iterate(year+1, & &1+1)\n    |> Stream.drop_while(&Integer.digits(&1) |> Enum.uniq |> length != 4)\n    |> Enum.at(0)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79497,"user_id":250,"body":"defmodule NextHappyYear do\n  def nhy(year) do\n    if map_size(Integer.digits(year) |> Enum.frequencies) == 4 do\n      year\n    else\n      nhy(year+1)\n    end\n  end\n\n  def next_happy_year(year) do\n    nhy(year+1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79498,"user_id":250,"body":"defmodule NextHappyYear do\n  def nhy(year) do\n    if map_size(Integer.to_string(year) |> String.graphemes |> Enum.frequencies) == 4 do\n      year\n    else\n      nhy(year+1)\n    end\n  end\n\n  def next_happy_year(year) do\n    nhy(year+1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79499,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    Stream.iterate(year + 1, &(&1 + 1))\n    |> Stream.reject(&(&1 |> Integer.digits() |> Enum.uniq() |> Enum.count() < 4))\n    |> Enum.take(1)\n    |> List.first()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79500,"user_id":null,"body":"defmodule NextHappyYear do\n  def next_happy_year(year) do\n    (year + 1)\n    |> Integer.digits()\n    |> Enum.uniq()\n    |> Integer.undigits()\n    |> Kernel.==(year + 1)\n    |> if do year + 1 else next_happy_year(year + 1) end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5af15a37de4c7f223e00012d":[{"id":79501,"user_id":1624,"body":"defmodule MenFromBoys do\n  require Integer \n  \n  def men_from_boys(arr) do\n    {men, boys} = arr\n      |> Enum.uniq\n      |> Enum.sort\n      |> Enum.split_with(&Integer.is_even\/1)\n    \n    men ++ Enum.reverse(boys)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79502,"user_id":null,"body":"defmodule MenFromBoys do\n  def men_from_boys(arr) do\n    evens = arr |> Enum.uniq |> Enum.filter(fn x -> rem(x, 2) == 0 end) |> Enum.sort(:asc)\n    odds = arr |> Enum.uniq |> Enum.filter(fn x -> rem(x, 2) != 0 end) |> Enum.sort(:desc)\n    evens ++ odds\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79503,"user_id":null,"body":"defmodule MenFromBoys do\n  import Integer, only: [is_even: 1]\n  @moduledoc\"\"\"\n  Sort Out The Men From Boys \n  \"\"\"\n  @doc\"\"\"\n  The `men_from_boys\/1` takes a list of integers and returns a new ordered list. Even numbers come first then odds. The Even numbers will be in ascending order while odds will be in descending order.\n  \n  ## Params\n  - list: a list of integers\n  \n  ## Example\n  iex> MenFromBoys.men_from_boys([2, 43, 95, 90, 37])\n  [2, 90, 95, 43, 37]\n  \"\"\"\n  \n  @spec men_from_boys([integer]) :: [integer]\n  def men_from_boys(list) do\n    {men, boys} = list\n    |> Enum.uniq\n    |> Enum.split_with(&is_even\/1)\n    \n    Enum.sort(men, :asc) ++ Enum.sort(boys, :desc)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79504,"user_id":null,"body":"defmodule MenFromBoys do\n  def men_from_boys(arr) do\n    ((Enum.filter(arr, &(Integer.mod(&1, 2) == 0)) |> Enum.sort()) ++\n       (Enum.filter(arr, &(Integer.mod(&1, 2) == 1)) |> Enum.sort(:desc)))\n    |> Enum.uniq()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79505,"user_id":null,"body":"defmodule MenFromBoys do\n  import Integer\n\n  def men_from_boys(values) do\n    left = values |> Enum.reject(&is_odd(&1)) |> Enum.sort(:asc) |> Enum.uniq()\n    right = values |> Enum.reject(&is_even(&1)) |> Enum.sort(:desc) |> Enum.uniq()\n    left ++ right\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79506,"user_id":null,"body":"defmodule MenFromBoys do\n  def men_from_boys(arr) do\n  split = arr\n  |> Enum.uniq\n  |> Enum.split_with(&(rem(&1,2) == 0))\n \n  Enum.sort(elem(split,0), :asc) ++ Enum.sort(elem(split,1), :desc)\n  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79507,"user_id":null,"body":"defmodule MenFromBoys do\n  def men_from_boys(arr) do\n    {men, boys} = \n      arr\n      |> Enum.uniq()\n      |> Enum.split_with(&rem(&1, 2) == 0)\n      \n    Enum.sort(men) ++ Enum.sort(boys, :desc)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79508,"user_id":null,"body":"require Integer\n\ndefmodule MenFromBoys do\n  def men_from_boys(arr) do\n    arr = Enum.uniq(arr)\n    \n    even =\n    arr\n    |> Enum.filter(&(Integer.is_even(&1)))\n    |> Enum.sort(:asc)\n    \n    odd =\n    arr\n    |> Enum.filter(&(Integer.is_odd(&1)))\n    |> Enum.sort(:desc)\n    \n    [even, odd] |> List.flatten()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79509,"user_id":null,"body":"defmodule MenFromBoys do\n  require Integer\n  def men_from_boys(arr) do\n    Enum.uniq(arr) \n    |> Enum.split_with(&Integer.is_even\/1)\n    |> handle_list()\n  end\n  \n  def handle_list({men, boys}) do\n    men = Enum.sort(men)\n    boys = Enum.sort(boys, :desc)\n    \n    men ++ boys\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79510,"user_id":null,"body":"defmodule MenFromBoys do\n\n  require Integer\n  \n  def even_numbers(arr) do\n    arr\n    |> Enum.filter(fn x -> Integer.is_even(x) end)\n    |> Enum.sort\n    |> Enum.uniq\n  end\n  \n  def odd_numbers(arr) do\n    arr\n    |> Enum.filter(fn x -> Integer.is_odd(x) end)\n    |> Enum.sort(:desc)\n    |> Enum.uniq\n  end\n  \n  def men_from_boys(arr) do\n    even_numbers(arr) ++ odd_numbers(arr)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5af4119888214326b4000019":[{"id":79511,"user_id":null,"body":"defmodule Banzai do\n  def amidakuji(ar) do\n    Enum.reduce(ar, Enum.to_list(0..String.length(hd(ar))), fn row, acc ->\n      String.graphemes(row)\n      |> Enum.with_index()\n      |> Enum.filter(fn {c, _} -> c == \"1\" end)\n      |> Enum.reduce(acc, fn {_, i}, acc ->\n        Enum.slice(acc, 0, i) ++\n          (Enum.slice(acc, i, 2) |> Enum.reverse()) ++ Enum.slice(acc, (i + 2)..-1)\n      end)\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79512,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n    rungs = Enum.map(ar, &String.codepoints\/1)\n    poles = 0..length(List.first(rungs))\n    ladder = Enum.map(rungs, fn rung -> all_position_movements(poles, rung) end)\n        \n    Enum.map(poles, fn position -> {position, final_position(ladder, position)} end)\n    |> Enum.sort_by(fn {_, new_position} -> new_position end)\n    |> Enum.map(fn {old_position, _} -> old_position end)\n\tend\n  \n  def final_position(ladder, initial_position) do\n    Enum.reduce(ladder, initial_position, fn rung, position -> position + Enum.at(rung, position) end)\n  end\n  \n  def all_position_movements(verticals, rung) do\n    Enum.map(verticals, fn x ->\n      left = case x do\n        0 -> nil\n        left_position -> Enum.at(rung, x - 1)\n      end\n      movement(left, Enum.at(rung, x))\n    end)\n  end\n  \n  def movement(\"1\", _), do: -1\n  def movement(_, \"1\"), do: 1\n  def movement(_, _), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79513,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n    rungs = Enum.map(ar, fn x -> String.codepoints(x) end)\n    poles = 0..length(List.first(rungs))\n    ladder = Enum.map(rungs, fn rung -> all_position_movements(poles, rung) end)\n        \n    Enum.map(poles, fn position -> {position, final_position(ladder, position)} end)\n    |> Enum.sort_by(fn {_, new_position} -> new_position end)\n    |> Enum.map(fn {old_position, _} -> old_position end)\n\tend\n  \n  def final_position(ladder, initial_position) do\n    Enum.reduce(ladder, initial_position, fn rung, position -> position + Enum.at(rung, position) end)\n  end\n  \n  def all_position_movements(verticals, rung) do\n    Enum.map(verticals, fn x ->\n      left = case x do\n        0 -> nil\n        left_position -> Enum.at(rung, x - 1)\n      end\n      movement(left, Enum.at(rung, x))\n    end)\n  end\n  \n  def movement(\"1\", _), do: -1\n  def movement(_, \"1\"), do: 1\n  def movement(_, _), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79514,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n    horizontals = Enum.map(ar, fn x -> String.codepoints(x) end)\n    verticals = 0..length(List.first(horizontals))\n    ladder = Enum.map(horizontals, fn x -> positions(verticals, x) end)\n        \n    Enum.map(verticals, fn x -> {x, new_position(ladder, x)} end)\n    |> Enum.sort_by(fn {_, new_position} -> new_position end)\n    |> Enum.map(fn {old_position, _} -> old_position end)\n\tend\n  \n  def new_position(ladder, initial_position) do\n    Enum.reduce(ladder, initial_position, fn rung, position -> position + Enum.at(rung, position) end)\n  end\n  \n  def positions(verticals, rung) do\n    Enum.map(verticals, fn x ->\n      left = case x do\n        0 -> nil\n        left_position -> Enum.at(rung, x - 1)\n      end\n      movement(left, Enum.at(rung, x))\n    end)\n  end\n  \n  def movement(\"1\", _), do: -1\n  def movement(_, \"1\"), do: 1\n  def movement(_, _), do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79515,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n\t\tGraphIt.visualizer(ar)### uncomment this line to view the ladder\n    horizontals = Enum.map(ar, fn x -> String.codepoints(x) end)\n    verticals = 0..length(List.first(horizontals))\n    \n    ladder = Enum.map(horizontals, fn x -> positions(verticals, x) end)\n        \n    Enum.map(verticals, fn x -> {x, new_position(ladder, x)} end)\n    |> Enum.sort_by(fn {x, y} -> y end)\n    |> Enum.map(fn {x, y} -> x end)\n\tend\n  \n  def new_position(ladder, initial_position) do\n    Enum.reduce(ladder, initial_position, fn rung, position ->\n      case Enum.at(rung, position) do\n        {_, \"1\", _} -> \n          IO.puts \"went left\"\n          position - 1\n        {_, _, \"1\"} ->\n          IO.puts \"went right\"\n          position + 1\n        _ -> \n          IO.puts \"went down\"\n          position\n      end\n    end)\n  end\n  \n  def positions(verticals, rung) do\n    Enum.map(verticals, fn x ->\n      left = case x do\n        0 -> nil\n        left_position -> Enum.at(rung, x - 1)\n      end\n      {x, left, Enum.at(rung, x)}\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79516,"user_id":null,"body":"defmodule Banzai do\n  def amidakuji(ar) do\n    n = ar |> List.first |> String.length\n    get_res(0..n |> Enum.to_list, ar)\n  end\n\n  def get_res(n_list, []), do: n_list\n  def get_res(n_list,[head|tail]), do: get_res(func(n_list, head |>  String.codepoints), tail)\n\n  def func(n_list, []), do: [] ++ n_list\n  def func([h1,h2|n_list], [h|str_list]) do\n    cond do\n      h == \"1\" ->\n        [h2|func([h1|n_list], str_list)]\n      true ->\n        [h1|func([h2|n_list], str_list)]\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79517,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n    basicRange = Enum.to_list(Range.new(0, String.length(Enum.at(ar, 0))))\n    Enum.reduce(\n      ar,\n      basicRange,\n      fn(rung, acc) -> Enum.map(basicRange, \n        fn index -> Enum.at(acc, Banzai.permutationFor(rung).(index)) end) end)\n\tend\n  \n  def permutationFor(rung) do\n    fn x -> cond do\n      String.at(rung, x) == \"1\" -> x + 1\n      String.at(rung, max(x-1, 0)) == \"1\" -> x - 1 \n      true -> x\n    end end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79518,"user_id":null,"body":"defmodule Banzai do\n\tdef amidakuji(ar) do\n    ar = stick_zero_at_end(ar)\n    sol = List.duplicate(\"_\", width(ar))\n    \n    0..(width(ar) - 1)\n    |> Enum.reduce(sol, fn n, sol -> run(n, ar, n, 0, sol) end)\n\tend\n  \n  defp run(n, ar, x, y, sol) do\n    cond do\n      y == height(ar) ->\n        List.replace_at(sol, x, n)\n      move_left?(ar, x, y) ->\n        run(n, ar, x - 1, y + 1, sol)\n      move_right?(ar, x, y) ->\n        run(n, ar, x + 1, y + 1, sol)\n      true ->\n        run(n, ar, x, y + 1, sol)\n    end\n  end\n  \n  defp height(ar), do: ar |> Enum.count\n  defp width(ar), do: ar |> List.first |> String.length\n    \n  defp move_left?(ar, x, y), do: rung?(ar, x - 1, y)\n  defp move_right?(ar, x, y), do: rung?(ar, x, y)\n\n  defp rung?(ar, x, y) do\n    ar\n    |> Enum.at(y)\n    |> String.codepoints\n    |> Enum.at(x)\n    == \"1\"\n  end\n  \n  defp stick_zero_at_end(ar) do\n    ar\n    |> Enum.map(fn row -> row <> \"0\" end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79519,"user_id":null,"body":"defmodule Banzai do\n\n  def nextRow(row, curPlace) do\n    goRight = String.at(row, curPlace)\n    goLeft = if curPlace == 0, do: \"0\", else: String.at(row, curPlace - 1)\n\n    case {goLeft, goRight} do\n      {\"1\", _} -> curPlace - 1\n      {_, \"1\"} -> curPlace + 1\n      _ -> curPlace\n    end\n  end\n\n  def takePath(start, game) do\n    game |> List.foldl(start, &Banzai.nextRow\/2)\n  end\n  \n\tdef amidakuji(game) do\n    len = game |> List.first |> String.length\n    solutionMap =\n      0..len\n      |> Enum.reduce(%{}, fn p, m -> m |> Map.put(Banzai.takePath(p, game), p) end)\n      \n    0..len\n      |> Enum.map(fn p -> solutionMap[p] end)\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79520,"user_id":470,"body":"defmodule Banzai do\n\tdef amidakuji(r),do: forge(r,String.length(hd r),(for i <- 0..String.length(hd r),do: i))\n\t\n\tdefp forge([h|r],ln,z),do: forge(r,ln,proc(z,ix(h),0))\n\tdefp forge([],_,z),do: z\n\tdefp ix(s),do: (for {c,i} <- Enum.with_index(String.to_charlist(s)),c == 49,do: i)\n\t\n\tdefp proc(z,[n|r],q) do\n\t\t{sh,[h|t]} = Enum.split(z,n-q)\n\t\tsh ++ [hd t] ++ proc([h|tl(t)],r,n+1)\n\tend\n\tdefp proc(z,[],_),do: z\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b06c990908b7eea73000069":[{"id":79521,"user_id":53,"body":"defmodule F do\n    import :math\n    defp hypot(a, b), do: sqrt(a * a + b * b)\n    def f(x, y, eps) do\n        ans = log(eps) \/ log(hypot(x, y))\n        if ans < 0, do: -1, else: :math.floor(ans)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79522,"user_id":null,"body":"defmodule F do\n\n  def f(x, y, eps), do: get_f(x, y, eps)\n\n  defp get_f(x, y, eps), do: get_f(:math.log(eps) \/ :math.log(:math.sqrt(x * x + y * y)))\n  defp get_f(x) when x < 0, do: -1\n  defp get_f(x), do: x\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79523,"user_id":null,"body":"defmodule F do\n  require Integer\n  def f(x, y, eps), do: if(cabs({x, y}) >= 1, do: -1, else: ff(1, {0, 0}, {x, y}, eps))\n\n  def ff(n, sum, z, eps),\n    do:\n      if(cabs(csub(sum, z)) < eps,\n        do: n,\n        else: ff(n + 1, cadd(sum, cmul(csub({1, 0}, z), cpow(z, n))), z, eps)\n      )\n\n  def cabs({x, y}), do: :math.sqrt(x * x + y * y)\n  def cmul({a, b}, {c, d}), do: {a * c - b * d, a * d + b * c}\n  def cadd({a, b}, {c, d}), do: {a + c, b + d}\n  def csub({a, b}, {c, d}), do: {a - c, b - d}\n  def cpow(_, 0), do: {1, 0}\n  def cpow(z, n) when Integer.is_even(n), do: cpow(cmul(z, z), div(n, 2))\n  def cpow(z, n), do: cmul(z, cpow(z, n - 1))\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79524,"user_id":168,"body":"defmodule F do\n    def f(x, y, eps) do\n      a = :math.sqrt(x * x + y * y)\n      if a >= 1 do -1 else :math.log(eps) \/ :math.log(a) end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79525,"user_id":null,"body":"defmodule F do\n    def f(x, y, eps) do\n      if c_abs({x, y}) >= 1 do\n        -1\n      else\n        lim = {x, y}\n        {sub({1, 0}, {x, y}), {x, y}, {x, y}, lim, eps}\n        |> Stream.unfold(&unfold_impl\/1)\n        |> Enum.to_list()\n        |> length\n      end\n    end\n    defp unfold_impl({const1, const2, sum, lim, eps}) do\n      if c_abs(sub(mul(const1, sum), lim)) < eps do\n        nil\n      else\n        {{const1, const2, sum, lim, eps}, {const1, const2, add(mul(sum, const2), const2), lim, eps}}\n      end\n    end\n    defp c_abs({x, y}) do\n      :math.sqrt(x * x + y * y)\n    end\n    defp add({x1, y1}, {x2, y2}) do\n      {x1 + x2, y1 + y2}\n    end\n    defp sub({x1, y1}, {x2, y2}) do\n      {x1 - x2, y1 - y2}\n    end\n    defp mul({x1, y1}, {x2, y2}) do\n      {x1 * x2 - y1 * y2, x1 * y2 + y1 * x2}\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79526,"user_id":492,"body":"defmodule F do\n    defp hyp(x, y) do\n        if (x != 0 || y != 0) do\n            :math.sqrt(x * x + y * y)\n        else\n            0.0\n        end\n    end\n    def f(x, y, eps) do\n        if (hyp(x, y) >= 1.0)  do\n            -1\n        else\n            trunc(:math.log(eps) \/:math.log(hyp(x, y)))\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79527,"user_id":492,"body":"defmodule F do\n    defp hyp(x, y) do\n        if (x != 0 || y != 0) do\n            :math.sqrt(x * x + y * y)\n        else\n            0.0\n        end\n    end\n    def f(x, y, eps) do\n        if (hyp(x, y) >= 1.0)  do\n            -1\n        else\n            trunc(:math.log(eps) \/:math.log(hyp(x, y)))\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b0c0ec907756ffcff00006e":[{"id":79528,"user_id":null,"body":"defmodule Quadratic do\n    def quadratic(a,b,c), do: -2*c \/ (b + :math.sqrt(b*b - 4*a*c))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79529,"user_id":null,"body":"defmodule Quadratic do\n\n    def quadratic(a, b, c), do: 2 * c \/ (-b - :math.sqrt(b*b - 4*a*c))\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79530,"user_id":null,"body":"defmodule Quadratic do\n  def quadratic(a, b, c) do\n    -c \/ b\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79531,"user_id":168,"body":"defmodule Quadratic do\n\n    def quadratic(_, b, c) do\n      -c \/ b\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79532,"user_id":null,"body":"defmodule Quadratic do\n\n    def quadratic(a, b, c) do\n      gx(a, b, c, -0.1, 0.1)\n    end\n    \n    def gx(a, b, c, lv, rv) do  \n      mv = (lv + rv) \/ 2\n      gmy = gx(a, b, c, mv)\n      \n      if abs(gmy) < :math.pow(0.1, 13) do\n        mv\n      else\n        if gmy > 0 do\n          gx(a, b, c, lv, mv)\n        else \n          gx(a, b, c, mv, rv)\n        end\n      end\n    end\n    \n    def gx(a, b, c, x) do\n      a * x * x + b * x + c\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79533,"user_id":527,"body":"defmodule Quadratic do\n\n    def quadratic(_a, b, c), do: -c \/ b\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79534,"user_id":492,"body":"defmodule Quadratic do\n\n    def quadratic(_, b, c), do: -c \/ b\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b16490986b6d336c900007d":[{"id":79535,"user_id":null,"body":"defmodule MyLanguages do\n  @moduledoc\"\"\"\n  My Language Skills\n  \"\"\"\n  @doc\"\"\"\n  The `my_languages\/1` function takes a map and returns a list of keys that are greater than or equal to a score of 60.\n  \n  ## Params\n  1. results: map of key, value pairs. \n  \n  ## Example\n    iex> MyLanguages.my_languages(%{\"Java\" => 10, \"Ruby\" => 80, \"Python\" => 76})\n    [\"Ruby\", \"Python\"]\n    \n  ## Solution\n  1. Sort map by values in descending order\n  2. Reduce map into a list containing only the keys where their values are greater than or equal to 60. \n  \"\"\"\n  \n  @spec my_languages(%{String.t => integer}) :: [String.t]\n  def my_languages(results) do\n    results\n    |> Enum.sort_by(fn {k, v} -> v end, :desc)\n    |> Enum.reduce([], fn \n      {k, v}, acc when v >= 60 -> acc ++ [k]\n      _, acc -> acc\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79536,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    Map.keys(results)\n    |> Enum.filter(& results[&1] >= 60)\n    |> Enum.sort_by(& -results[&1])\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79537,"user_id":250,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Enum.filter(fn {_,x} -> x >= 60 end)\n    |> Enum.sort(fn ({_,a},{_,b}) -> a>=b end)\n    |> Enum.map(fn {k,_} -> k  end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79538,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Enum.filter(fn {_x, y} -> y >= 60 end)\n    |> Enum.sort_by(fn {_x, y} -> y end, :desc)\n    |> Enum.map(fn {x, _y} -> x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79539,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Stream.filter(fn {_, v} -> v >= 60 end)\n    |> Enum.sort_by(&elem(&1, 1), :desc)\n    |> Enum.map(&elem(&1, 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79540,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    fun1 = fn {_k, v} -> v end\n    fun2 = fn {k, _v} -> k end\n    \n    results\n    |> Enum.filter(fn {_k, v} -> v >= 60 end)\n    |> Enum.sort(&(fun1.(&1) > fun1.(&2)))\n    |> Enum.map(& fun2.(&1))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79541,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Enum.reject( fn {_key, value} -> value < 60 end)\n    |> Enum.sort_by(fn {key,value} ->  value end, fn x, y -> x >= y end)\n    |> Enum.map( fn {key,value} -> key end)\n  end\nend\n\n\n# test assert my_languages(%{\"A\" => 100, \"B\" => 0, \"C\" => 55}) == [\"A\"]","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79542,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n     Map.to_list(results)\n     |> Enum.filter(fn {_, d1} -> d1>=60 end)     \n     |> Enum.sort(fn {_, d1}, {_, d2} -> d1>=d2 end)\n     |> Enum.map(fn {k1, _} -> k1 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79543,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Enum.filter(fn {_, v} -> v >= 60 end)\n    |> Enum.sort_by(&elem(&1, 1))\n    |> Enum.reverse()\n    |> Enum.map(fn {k, _} -> k end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79544,"user_id":null,"body":"defmodule MyLanguages do\n  def my_languages(results) do\n    results\n    |> Enum.filter(fn {_, n} -> n >= 60 end)\n    |> Enum.sort_by(fn x -> Kernel.elem(x, 1) end, &>=\/2)\n    |> Enum.map(fn {k, _} -> k end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b180e9fedaa564a7000009a":[{"id":79545,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    count = s\n      |> String.codepoints()\n      |> Enum.count(&(&1 > <<90>>))\n\n    if String.length(s) - count <= count do\n      String.downcase(s)\n    else\n      String.upcase(s)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79546,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    ct = Enum.count(String.graphemes(s), fn c -> c == String.upcase(c) end)\n    cond do\n      ct > String.length(s) \/ 2 ->\n        String.upcase(s)\n      true ->\n        String.downcase(s)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79547,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    count =\n      s\n      |> String.graphemes()\n      |> Enum.count(&(&1 == String.downcase(&1)))\n\n    if count >= String.length(s) \/ 2, do: String.downcase(s), else: String.upcase(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79548,"user_id":null,"body":"# write code below\n\ndefmodule FixStringCase do\n  def solve(s) do\n    s\n    |> String.graphemes()\n    |> comparison\n  end\n\n  def comparison(list) do\n    down = length(Enum.filter(list, fn x -> x == String.downcase(x) end))\n    upcase = length(Enum.filter(list, fn x -> x == String.upcase(x) end))\n\n    if upcase > down do\n      Enum.join(list, \"\")\n      |> String.upcase()\n    else\n      Enum.join(list, \"\")\n      |> String.downcase()\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79549,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    if String.length(s)\/2 > Enum.count(Regex.scan(~r\/a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z\/, s)) do\n      String.upcase(s)\n    else\n      String.downcase(s)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79550,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    s\n    |> String.graphemes\n    |> Enum.reduce(0, fn x, acc -> if upcase?(x), do: (acc + 1), else: (acc - 1) end)\n    |> Kernel.>(0)\n    |> Kernel.if(do: String.upcase(s), else: String.downcase(s))\n  end\n  \n  defp upcase?(x), do: x == String.upcase x\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79551,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    lowercase = s\n    |> String.graphemes\n    |> Enum.count(&(String.downcase(&1) == &1))\n    \n    upcase = s\n    |> String.graphemes\n    |> Enum.count(&(String.upcase(&1) == &1))\n    \n    if lowercase >= upcase do\n      String.downcase(s)\n    else\n      String.upcase(s)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79552,"user_id":null,"body":"defmodule FixStringCase do\n  def solve(s) do\n    {u, l} = \n    String.graphemes(s)\n    |> Enum.reduce({0, 0}, fn g, {u, l} -> if String.upcase(g) == g, do: {u + 1, l}, else: {u, l + 1} end)\n    if u > l, do: String.upcase(s), else: String.downcase(s)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79553,"user_id":null,"body":"require Integer\n\ndefmodule FixStringCase do\n  def solve(s) do\n    caps = ~r\/^[^a-z]$\/\n\n    ups =\n      s\n      |> String.graphemes()\n      |> Enum.count(&(&1 =~ caps))\n\n    if ups > String.length(s) - ups do\n      String.upcase(s)\n    else\n      String.downcase(s)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79554,"user_id":null,"body":"require Integer\n\ndefmodule FixStringCase do\n  def solve(s) do\n    caps = ~r\/^[^a-z]$\/\n\n    ups =\n      s\n      |> String.graphemes()\n      |> Enum.count(&(&1 =~ caps))\n\n    if ups > String.length(s) \/ 2 do\n      String.upcase(s)\n    else\n      String.downcase(s)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b1cd19fcd206af728000056":[{"id":79555,"user_id":null,"body":"defmodule Solv do\n\n  def solve(m), do: (2 * m + 1 - :math.sqrt(4 * m + 1)) \/ (2 * m)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79556,"user_id":null,"body":"defmodule Solv do\n    def solve(m) do\n        (2*m-:math.sqrt(4*m+1)+1)\/(2*m)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79557,"user_id":492,"body":"defmodule Solv do\n    def solve(m) do\n        s = :math.sqrt (4.0 * m + 1.0)\n        (2.0 * m + 1.0 - s) \/ (2.0 * m)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79558,"user_id":null,"body":"defmodule Solv do\n    def solve(m) do\n        x = (2*m - :math.sqrt(4*m + 1) + 1)\/(2*m) \n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79559,"user_id":null,"body":"defmodule Solv do\n  def solve(m), do: (m + 0.5 - :math.sqrt(m + 0.25)) \/ m\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79560,"user_id":527,"body":"defmodule Solv do\n  def solve(m) do\n    1 - (:math.sqrt(m + 0.25) - 0.5) \/ m\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79561,"user_id":null,"body":"defmodule Solv do\n    def solve(m) do\n        (2 * m - :math.pow(4 * m + 1, 1\/2) + 1) \/( 2*m)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79562,"user_id":null,"body":"defmodule Solv do\n    def solve(m), do: (-:math.sqrt(4*m+1) + 2*m+1) \/ (2*m)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79563,"user_id":null,"body":"defmodule Solv do\n    def solve(s) do\n        (1 - :math.sqrt(4 * s + 1)) \/ (2.0 * s) + 1;\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79564,"user_id":443,"body":"defmodule Solv do\n  # Yay infinite sequence maths\n  # m = x + 2x^2 + 3x^3 + ...\n  # xm = x^2 + 2x^3 + 3x^4 + ...\n  # q = (m - xm) = x + x^2 + x^3 + ...\n  # xq = x^2 + x^3 + x^4 + ...\n  # q - xq = x\n  # => q(1 - x) = x\n  # => q = x \/ (1 - x)\n  # => (m - xm) = x \/ (1 - x)\n  # => m(1 - x) = x \/ (1 - x)\n  # => m(1 - x)(1 - x) = x\n  # => mx^2 -2mx + m = x\n  # => mx^2 -(2m + 1) + m = 0\n  # Now we can apply the quadratic formuala to get our options for x\n  #  choosing the option where 0 < x < 1\n\n  def solve(m) do\n    solve_quadratic(m, (-2 * m) - 1, m)\n    |> choose_in_range_answer\n  end\n  \n  defp solve_quadratic(a, b, c) do\n    opt1 = (-b - :math.sqrt((b*b) - (4 * a * c))) \/ (2 * a)\n    opt2 = (-b + :math.sqrt((b*b) - (4 * a * c))) \/ (2 * a)\n    {opt1, opt2}\n  end\n  \n  defp choose_in_range_answer({a, _}) when 0 < a and a < 1, do: a\n  defp choose_in_range_answer({_, b}), do: b\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b37a50642b27ebf2e000010":[{"id":79565,"user_id":1624,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    Regex.scan(~r\/sand|sun|fish|water\/i, beach)\n    |> Enum.count\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79566,"user_id":null,"body":"defmodule SumOfABeach do\n  @spec sum_of_a_beach(String.t) :: pos_integer\n  def sum_of_a_beach(beach) do\n    Regex.scan(~r\/sand|water|fish|sun\/, String.downcase(beach)) |> length\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79567,"user_id":null,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    String.split(beach, ~r\/(Sand|Water|Fish|Sun)\/i)\n    |>Enum.count\n    |> Kernel.-(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79568,"user_id":null,"body":"defmodule SumOfABeach do\n  @word [\"sand\", \"water\", \"fish\", \"sun\"]\n  def sum_of_a_beach(beach) do\n    @word\n    |> Enum.map(fn x ->\n      Regex.split(~r{(#{x})}, String.downcase(beach), include_captures: true, trim: true)\n      |> Enum.map(fn y ->\n        if String.contains?(y, x), do: 1, else: 0\n      end)\n    end)\n    |> List.flatten()\n    |> Enum.sum()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79569,"user_id":null,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    Regex.scan(~r\/Sand|Water|Fish|Sun\/i, beach) |> Enum.count()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79570,"user_id":null,"body":"defmodule SumOfABeach do\n  defp replace(str, \"sand\") do\n      Regex.replace(~r\/sand\/,str,\"%\")\n    end\n    defp replace(str, \"water\") do\n      Regex.replace(~r\/water\/,str,\"%\")\n    end\n    defp replace(str, \"fish\") do\n      Regex.replace(~r\/fish\/,str,\"%\")\n    end\n    defp replace(str, \"sun\") do\n      Regex.replace(~r\/sun\/,str,\"%\")\n    end\n  def sum_of_a_beach(beach) do\n    beach\n    |> String.downcase\n    |> replace(\"sand\")\n    |> replace(\"water\")\n    |> replace(\"fish\")\n    |> replace(\"sun\")\n    |> String.codepoints\n    |> Enum.filter(fn x -> x==\"%\" end)\n    |> length\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79571,"user_id":null,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    ~r\/sand|water|fish|sun\/i\n    |> Regex.scan(beach)\n    |> Enum.count()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79572,"user_id":50,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n     Regex.scan(~r{(sand|water|fish|sun)},  String.downcase(beach)) |> length\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79573,"user_id":null,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    String.downcase(beach)\n    |> String.replace([\"sun\",\"sand\",\"water\",\"fish\"],\"+\")\n    |> String.codepoints()\n    |> Enum.filter(fn x -> x ==\"+\" end)\n    |> Enum.count()\n  end\nend\n\n#assert sum_of_a_beach(\"1234SAndandWateRr\") == 2","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79574,"user_id":872,"body":"defmodule SumOfABeach do\n  def sum_of_a_beach(beach) do\n    str = String.downcase(beach)\n    [\"sand\", \"water\", \"fish\", \"sun\"] |> Enum.map(&(countSubstring(str, &1))) |> Enum.sum\n  end\n  defp countSubstring(str, sub), do: length(String.split(str, sub)) - 1\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b39e3772ae7545f650000fc":[{"id":79575,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  def remove_duplicate_words(text) do\n    text\n    |> String.split(\" \")\n    |> Enum.uniq\n    |> Enum.join(\" \")\n  end\n\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79576,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  def remove_duplicate_words(text) do\n    text\n    |> String.split()\n    |> Stream.uniq()\n    |> Enum.join(\" \")\n  end\n\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79577,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  @spec remove_duplicate_words(String.t()) :: String.t()\n  def remove_duplicate_words(text) do\n    text\n\t\t|> String.split\n\t\t|> Enum.uniq\n\t\t|> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79578,"user_id":1030,"body":"defmodule RemoveDuplicateWordsKata do\n  def remove_duplicate_words(text) do\n    String.split(text)\n    |> Enum.uniq()\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79579,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n  @spec remove_duplicate_words(String.t) :: String.t\n  def remove_duplicate_words(text) do\n    text \n    |> String.split(\" \", trim: true)\n    |> Enum.reduce([], fn x, acc -> \n      if x not in acc, \n      do: acc ++ [x], \n      else: acc\n    end)\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79580,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n  def remove_duplicate_words(text) do\n    text = String.split(text)\n\n    text\n    |> Enum.with_index()\n    |> Enum.filter(fn {x, y} ->\n      Enum.find_index(text, &(&1 == x)) == y\n    end)\n    |> Enum.map(fn {x, y} -> x end)\n    |> Enum.join(\" \")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79581,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  def remove_duplicate_words(text) do\n    String.split(text)\n    |> Enum.reduce([], &(if &1 in &2 do &2 else [&1 | &2] end))\n    |> Enum.reverse()\n    |> Enum.join(\" \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79582,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  def remove_duplicate_words(text) do\n    # Your code goes here\n    text\n    |> String.split\n    |> Enum.uniq\n    |> Enum.join(\" \")\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79583,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n\n  def remove_duplicate_words(text), do: String.split(text, \" \") |> Enum.uniq |> Enum.join(\" \")\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79584,"user_id":null,"body":"defmodule RemoveDuplicateWordsKata do\n  def remove_duplicate_words(text) do\n      String.split(text,\" \")\n      |> Enum.uniq()\n      |> Enum.join(\" \")\n  end\nend\n\n# test assert \"hello can you hear me\" == RemoveDuplicateWordsKata.remove_duplicate_words(\"hello hello can you can you hear me me\")","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b40b666dfb4291ad9000049":[{"id":79585,"user_id":53,"body":"defmodule Walker do\n\n  defp pi(), do: 3.14159265358979323846\n  defp dcos(n), do: :math.cos(n * pi() \/ 180)\n  defp dsin(n), do: :math.sin(n * pi() \/ 180)\n  defp hypot(n, m), do: :math.sqrt(n * n + m * m)\n  \n  def solve(a, b, c, alpha, beta, gamma) do\n    x = a * dcos(alpha) - b * dsin(beta) - c * dcos(gamma)\n    y = a * dsin(alpha) + b * dcos(beta) - c * dsin(gamma)\n    t = :math.atan2(y, x) * 180 \/ pi()\n    [ round(hypot(y, x)), trunc(t), rem(trunc(t * 60), 60), rem(trunc(t * 3600), 60) ]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79586,"user_id":492,"body":"defmodule Walker do\n\n    def solve(a, b, c, alpha, beta, gamma) do\n        pi = 3.14159265358979323846\n        aa = alpha * pi \/180.0\n        bb = beta * pi \/180.0\n        cc = gamma * pi \/ 180.0\n        x = a * :math.cos(aa) - b * :math.sin(bb) - c * :math.cos(cc)\n        y = a * :math.sin(aa) + b * :math.cos(bb) - c * :math.sin(cc)\n        r = :math.sqrt(x * x + y * y)\n        theta = trunc(:math.acos(x \/ r) * 180 * 3600 \/ pi)\n        d = div(theta, 3600)\n        mm = rem(theta, 3600)\n        m = div(mm, 60)\n        s = rem(mm, 60)\n        [round(r), d, m, s]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79587,"user_id":null,"body":"defmodule Walker do\n  def solve(a, b, c, alpha, beta, gamma) do\n    {dist, angle} =\n      rect(a, alpha) |> add(rect(b, beta + 90)) |> add(rect(c, gamma + 180)) |> polar\n\n    [round(dist), floor(angle), floor(angle * 60) |> rem(60), floor(angle * 3600) |> rem(60)]\n  end\n\n  def rect(dist, angle) do\n    a = angle \/ 180 * :math.pi()\n    {dist * :math.cos(a), dist * :math.sin(a)}\n  end\n\n  def add({x0, y0}, {x1, y1}), do: {x0 + x1, y0 + y1}\n\n  def polar({x, y}), do: {:math.sqrt(x * x + y * y), :math.atan2(y, x) * 180 \/ :math.pi()}\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79588,"user_id":null,"body":"defmodule Walker do\n\n    @pi 3.14159265358979323846\n    \n    def solve(a, b, c, alpha, beta, gamma) do\n      {0, 0}\n      |> walk(:a, a, to_rad(alpha))\n      |> walk(:b, b, to_rad(beta))\n      |> walk(:c, c, to_rad(gamma))      \n      |> solve()\n    end\n    \n    defp walk({x, y}, :a, dist, rad), do: { dist * :math.cos(rad), dist * :math.sin(rad) }\n    defp walk({x, y}, :b, dist, rad), do: { x - dist * :math.sin(rad), y + dist * :math.cos(rad) }\n    defp walk({x, y}, :c, dist, rad), do: { x - dist * :math.cos(rad), y - dist * :math.sin(rad) }\n    \n    defp to_rad(angle), do: angle \/ 180.0 * @pi\n     \n    defp solve(point) do\n      euclidian_distance(point) ++ coordinates(point)\n    end\n    \n    defp euclidian_distance({x, y}), do: [(:math.pow(x,2) + :math.pow(y, 2)) |> :math.sqrt() |> round]\n      \n    defp coordinates({x, y}) do\n      angle = :math.atan2(y, x) \/ @pi * 180.0\n      degrees = trunc(angle)\n      minutes = trunc((angle - degrees) * 60)\n      seconds = trunc((((angle - degrees) * 60) - minutes) * 60)\n      \n      [degrees, minutes, seconds]\n    end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79589,"user_id":null,"body":"defmodule Walker do\n\n  @pi 3.14159265358979323846\n\n  def solve(a, b, c, alpha, beta, gamma) do\n    {x, y} = get_point_coordinates(a, b, c, to_radians(alpha), to_radians(beta), to_radians(gamma))\n    len = get_length_from_coordinates({x, y})\n    degrees = {x, y}\n              |> get_angle_from_coordinates\n              |> get_dms_from_decimal\n    [len] ++ degrees\n  end\n\n  defp to_radians(angle), do: angle \/ 180 * @pi\n\n  defp get_point_coordinates(a, b, c, alpha, beta, gamma), do:\n    {a * :math.cos(alpha), a * :math.sin(alpha)}\n    |> (fn {x, y} -> {x - b * :math.sin(beta), y + b * :math.cos(beta)} end).()\n    |> (fn {x, y} -> {x - c * :math.cos(gamma), y - c * :math.sin(gamma)} end).()\n\n  defp get_length_from_coordinates({x, y}), do:\n    :math.pow(x * x + y * y, 0.5)\n    |> round\n\n  defp get_angle_from_coordinates({x, y}), do: :math.atan2(y, x) \/ @pi * 180\n\n  defp get_dms_from_decimal(angle) do\n    degrees = trunc(angle)\n    minutes = trunc((angle - degrees) * 60)\n    seconds = trunc((((angle - degrees) * 60) - minutes) * 60)\n    [degrees, minutes, seconds]\n  end\n\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79590,"user_id":null,"body":"defmodule Walker do\n\n    def solve(a, b, c, alpha, beta, gamma) do\n      # your code\n      pi = 3.14159265358979323846\n      deg = pi \/ 180\n      vec_oa = [ a * :math.cos(alpha * deg),  a * :math.sin(alpha * deg)]\n      vec_ab = [-b * :math.sin(beta  * deg),  b * :math.cos(beta  * deg)]\n      vec_bc = [-c * :math.cos(gamma * deg), -c * :math.sin(gamma * deg)]\n      [x, y] = [vec_oa, vec_ab, vec_bc]\n        |> List.zip()\n        |> Enum.map(&Tuple.to_list\/1)\n        |> Enum.map(&Enum.sum\/1) \n      degrees = :math.atan2(y, x) * 180 \/ pi\n      [\n        :math.sqrt(x * x + y * y) |> Float.round |> to_integer,\n        to_integer(degrees),\n        rem(to_integer(degrees * 60), 60),\n        rem(to_integer(degrees * 3600), 60),\n      ]\n    end\n    \n    defp to_integer(float) do\n      float |> Float.to_string() |> Integer.parse() |> elem(0)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79591,"user_id":null,"body":"defmodule Walker do\n    @pi 3.14159265358979323846\n\n    def solve(a, b, c, alpha, beta, gamma) do\n        # your code\n        alphar = degToRad(alpha)\n        {xA,yA} = dotA = getNextCoordinate(a, alphar)\n        betar = degToRad(beta)\n        {xBo,yBo} = dotBO = getNextCoordinate(b, betar)\n        gammar = degToRad(gamma)\n        {xCo,yCo} = dotCO = getNextCoordinate(c, gammar)\n        \n        {xB, yB} = dotB = {xA-yBo, yA+xBo}\n        {xC, yC} = dotC = {xB-xCo, yB-yCo}\n        \n        angle_tOC_radian = :math.atan(-yC\/xC)\n        angle_tOC_deg = 180-radToDeg(angle_tOC_radian)\n        length_OC = Kernel.round(yC\/:math.sin(angle_tOC_radian))\n        rounded_angle_tOC_deg = Kernel.trunc(angle_tOC_deg)\n        minutes = (angle_tOC_deg - Kernel.trunc(angle_tOC_deg))*60\n        seconds = (minutes - Kernel.trunc(minutes))*60\n        trunced_minutes = Kernel.trunc(minutes)\n        trunced_seconds = Kernel.trunc(seconds)\n        \n        [length_OC, rounded_angle_tOC_deg, trunced_minutes, trunced_seconds]\n    end\n    \n    def radToDeg(angle) do\n        angle * 180 \/ @pi\n    end\n    def degToRad(angle) do\n        @pi * angle \/ 180\n    end\n    \n    def getNextCoordinate(length, angle) do\n      x = :math.cos(angle) * length\n      y = :math.sin(angle) * length\n      {x, y}\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79592,"user_id":492,"body":"defmodule Walker do\n\n    def solve(a, b, c, alpha, beta, gamma) do\n        pi = 3.14159265358979323846\n        aa = alpha * pi \/180.0\n        bb = beta * pi \/180.0\n        cc = gamma * pi \/ 180.0\n        x = a * :math.cos(aa) - b * :math.sin(bb) - c * :math.cos(cc)\n        y = a * :math.sin(aa) + b * :math.cos(bb) - c * :math.sin(cc)\n        r = :math.sqrt(x * x + y * y)\n        theta = trunc(:math.acos(x \/ r) * 180 * 3600 \/ pi)\n        d = div(theta, 3600)\n        mm = rem(theta, 3600)\n        m = div(mm, 60)\n        s = rem(mm, 60)\n        [round(r), d, m, s]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b6b67a5ecd0979e5b00000e":[{"id":79593,"user_id":null,"body":"defmodule KataSolution do\n  def mystery_range(s, n) do\n    ssort = String.graphemes(s) |> Enum.sort()\n\n    Enum.reduce_while(1..99, nil, fn numstart, _ ->\n      numend = numstart + n - 1\n\n      if String.contains?(s, \"#{numend}\") && String.contains?(s, \"#{numstart}\") &&\n           Enum.map(numstart..numend, &Integer.to_string\/1)\n           |> Enum.join()\n           |> String.graphemes()\n           |> Enum.sort() == ssort,\n         do: {:halt, {numstart, numend}},\n         else: {:cont, nil}\n    end)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79594,"user_id":null,"body":"defmodule KataSolution do\n  # Thinking this problem as a set of equations\n  # \n  # x + 2y + 3z = len\n  # x +  y +  z = n\n  # \n  # Where:\n  # x is the number of single digit numbers (1..9)\n  # y is the number of double digit numbers (10..99)\n  # z is the number of triple digit numbers (100+)\n  # \n  # The set is incomplete, but you can make substitutions based on the length\n  # of the string, and abuse the already given domains\n  # Eg: min in (1..99), n in (1..100)\n\tdef mystery_range(str,n) do\n    len = str |> byte_size()   \n    guess(str, n, len)\n\tend\n  \n  # Range in 1..9 (y = 0, z = 0)\n  def guess(str, n, n) do\n    list = str |> String.graphemes |> Enum.sort\n    \n    min = list |> hd |> String.to_integer\n    max = list |> List.last |> String.to_integer\n    \n    {min, max}\n  end\n  \n  # Range in 10..99 (x = 0, z = 0)\n  def guess(str, n, len) when n <= 90 and len == 2 * n do\n    list = Regex.scan(~r\/\\d{2}\/, str) |> List.flatten |> Enum.sort\n    \n    min = list |> hd |> String.to_integer\n    max = list |> List.last |> String.to_integer\n    \n    {min, max}\n  end\n  \n  # Range in 1..99 (z = 0)\n  # x + 2y = len\n  # x +  y = n\n  def guess(_, n, len) when n <= 90 and len < 2 * n do\n    y = len - n\n    x = n - y\n    \n    min = 10 - x\n    max =  9 + y\n    \n    {min, max}\n  end\n  \n  # Range in 10..198 (x = 0)\n  # 2y + 3z = len\n  #  y +  z = n\n  def guess(_, n, len) when n <= 90 and len > 2 * n do\n    z = len - 2 * n\n    y = n - z\n    \n    min = 100 - y\n    max =  99 + z\n    \n    {min, max}\n  end\n  \n  # Range in 10..198 (x=0 for n > 90)\n  # x + 2y + 3z = len\n  # x +  y +  z = n\n  # x = 0, y <= 90\n  def guess(_, n, len) when len >= 180 + 3 * (n - 90) do\n    z = len - 2 * n\n    y = n - z\n    \n    min = 100 - y\n    max =  99 + z\n    \n    {min, max}\n  end\n  \n  # Range in 1..108 (y=90)\n  # x + 2y + 3z = len\n  # x +  y +  z = n\n  # x = 0, y <= 90\n  def guess(_, n, len) do\n    z = (len - n - 90) \/ 2\n    x = n - z - 90\n    \n    min = 10 - x\n    max = 99 + z\n    \n    {min, max}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79595,"user_id":null,"body":"defmodule KataSolution do\n  def mystery_range(str, size) do\n    # find the average number of digits for numbers in the sequence\n    avg = byte_size(str) \/ size\n    floor = floor(avg)\n    ceil = ceil(avg)\n\n    mixed_digits? = floor != ceil || size > 91\n\n    if mixed_digits? do\n      solve_mixed(str, size)\n    else\n      solve_simple(str, size, floor)\n    end\n  end\n\n\n  def solve_simple(str, size, chunk) do\n    # all numbers have equal number of digits, just split every n, parse and get the min\n    low =\n      # \"131114\"\n      str\n      # [\"1\", \"3\", \"1\", \"2\", \"1\", \"14\"]\n      |> String.split(\"\", trim: true)\n      # [[\"1\", \"3\"], [\"1\", \"2\"], [\"1\", \"4\"]]\n      |> Enum.chunk_every(chunk)\n      # [\"13\", \"12\", \"14\"]\n      |> Enum.map(&Enum.join\/1)\n      # [13,12,14]\n      |> Enum.map(&String.to_integer\/1)\n      # 12\n      |> Enum.min()\n    {low, low + size - 1}\n  end\n\n  def solve_mixed(str, size) do\n     # only numbers with 1, 2 and 3 digits allowed\n\n    (for n <- 1..3, x <- produce_list(str, n), do: x)\n    |> Enum.filter(&(&1 < 200 && &1 > 0))\n    |> Enum.sort()\n    # group sequential numbers together\n    |> Enum.chunk_while([], fn\n      ele, [last | _t] = acc when ele == last + 1 -> {:cont, [ele | acc]}\n      ele, acc -> {:cont, {length(acc), acc}, [ele]}\n    end, fn\n      [] -> {:cont, {0, []}}\n      acc -> {:cont, {length(acc), acc}, []}\n    end)\n    # only keep large-enough sequences\n    |> Enum.filter(fn {len, _list} -> len >= size end)\n    |> hd()\n    |> elem(1)\n    |> Enum.reduce_while(nil, fn max, _ ->\n      min = max - size + 1\n      # try to mimic original string size\n      mimic = min..max |> Enum.map(&to_string\/1) |> Enum.join()\n      if byte_size(mimic) == byte_size(str) do\n        {:halt, {min, max}}\n      else\n        {:cont, nil}\n      end\n    end)\n  end\n\n  def produce_list(str, count), do: str |> find_numbers_with_digits(count) |> Enum.uniq() |> Enum.map(&String.to_integer\/1)\n\n  def find_numbers_with_digits(str, n) when byte_size(str) < n, do: []\n  def find_numbers_with_digits(str, 1), do: str |> String.split(\"\", trim: true)\n  def find_numbers_with_digits(\"0\"<>rest, n), do: find_numbers_with_digits(rest, n)\n  def find_numbers_with_digits(<<a::binary-size(1), b::binary-size(1), rest::binary>>, 2) do\n    [a<>b | find_numbers_with_digits(b<>rest, 2)]\n  end\n  def find_numbers_with_digits(<<a::binary-size(1), b::binary-size(1), c :: binary-size(1), rest::binary>>, 3) do\n    [a<>b<>c | find_numbers_with_digits(b<>c<>rest, 3)]\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79596,"user_id":null,"body":"defmodule KataSolution do\n  def mystery_range(string, range) do\n    range_start = try_range(1, range, string)\n    {range_start, range_start + range - 1}\n  end\n  \n  defp try_range(start, _, _) when start > 100, do: nil \n  defp try_range(start, range, string) do\n    # See if current range matches input string using hash and check each number in range thats the response\n    # otherwise try the next range\n    if is_match?(start..start + range - 1, string), do: start, else: try_range(start + 1, range, string)\n  end\n  \n  defp is_match?(new_range, string) do\n    string_hash(new_range) == string_hash(string) and Enum.all?(new_range, fn number -> String.contains?(string, Integer.to_string(number)) end)\n  end\n\n  defp string_hash(range = %Range{}), do: range |> Enum.join() |> string_hash()\n  defp string_hash(string) do\n    string\n    |> String.to_charlist()\n    |> Enum.sort()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79597,"user_id":470,"body":"defmodule KataSolution do\n\tdef mystery_range(s,n) do\n\t\tEnum.reduce_while(1..3,nil,fn i,z ->\n\t\t\tni = s |> String.slice(0..i-1) |> String.to_integer()\n\t\t\tix = forge(String.slice(s,i..300),ni,ni,MapSet.new([ni]),n)\n\t\t\tif ix,do: {:halt,ix},else: {:cont,z}\n\t\tend)\n\tend\n\t\n\tdefp forge(\"\",mn,mx,z,n) do\n\t\tif MapSet.size(z) == n and MapSet.equal?(z,MapSet.new(mn..mx)),do: {mn,mx}\n\tend\n\t\n\tdefp forge(\"0\"<>_,_,_,_,_),do: nil\n\t\n\tdefp forge(<<a,b,c>><>s2,mn,mx,z,n) do\n\t\tproc(String.to_integer(<<a>>),<<b,c>><>s2,mn,mx,z,n) ||\n\t\tproc(String.to_integer(<<a,b>>),<<c>><>s2,mn,mx,z,n) ||\n\t\tproc(String.to_integer(<<a,b,c>>),s2,mn,mx,z,n)\n\tend\n\t\n\tdefp forge(<<a,b>>,mn,mx,z,n) do\n\t\tproc(String.to_integer(<<a>>),<<b>>,mn,mx,z,n) ||\n\t\tproc(String.to_integer(<<a,b>>),\"\",mn,mx,z,n)\n\tend\n\t\n\tdefp forge(<<a>>,mn,mx,z,n),do: proc(String.to_integer(<<a>>),\"\",mn,mx,z,n)\n\t\n\tdefp proc(cn,ss,mn,mx,z,n) do\n\t\tcond do\n\t\t\tcn > mx and cn - mn > n -> nil\n\t\t\tcn < mn and mx - cn > n -> nil\n\t\t\tcn in z -> nil\n\t\t\ttrue -> forge(ss,min(mn,cn),max(mx,cn),MapSet.put(z,cn),n)\n\t\tend\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ba38ba180824a86850000f7":[{"id":79598,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(list) do\n  list\n  |> Enum.reverse\n  |> Enum.uniq\n  |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79599,"user_id":2766,"body":"defmodule RemoveDuplicates do\n  def solve([head|tail]) do\n    if head in tail do\n      solve(tail)\n    else\n      [head|solve(tail)]\n    end\n  end\n  def solve([]), do: []\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79600,"user_id":527,"body":"defmodule RemoveDuplicates do\n  def solve(xs), do: xs |> Enum.reverse |> Enum.uniq |> Enum.reverse\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79601,"user_id":null,"body":"defmodule RemoveDuplicates do\n  @moduledoc\"\"\"\n  https:\/\/www.codewars.com\/kata\/5ba38ba180824a86850000f7\/train\/elixir\n  \"\"\"\n  \n  @doc\"\"\"\n  In this Kata, you will remove the left-most duplicates from a list of integers and return the result.\n  \n  ## Examples\n    iex> RemoveDuplicates.solve([3,4,4,3,6,3])\n    [4,6,3]\n  \"\"\"\n  \n  @spec solve([integer]) :: [integer]\n  \n  def solve(list) do\n    List.foldr(list, [], fn (x, acc) ->\n      case x not in acc do\n        true -> [x] ++ acc\n        false -> acc\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79602,"user_id":null,"body":"defmodule RemoveDuplicates do\n  @spec solve([integer]) :: [integer]\n  def solve(list) do\n    List.foldr(list, [], fn x, acc -> \n      if x not in acc, \n      do: [x|acc], \n      else: acc\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79603,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(list) do\n    # Program me\n#     list\n#     |> Enum.reverse\n#     |> Enum.with_index\n#     |> Enum.filter(fn {item, index} -> \n#       !(Enum.count(list, fn x -> item == x end) > 1 && Enum.find_index(Enum.reverse(list), fn(x) -> item == x end) != index)\n#     end)\n#     |> Enum.map(fn {item, index} -> item end)\n#     |> Enum.reverse\n    list\n    |> Enum.reverse\n    |> Enum.uniq\n    |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79604,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(list) do\n      list\n      |> Enum.with_index()\n      |> Enum.group_by(fn {value, _index} -> value end)\n      |> Enum.map(&(handle(&1)))\n      |> Enum.sort()\n      |> Enum.map(&(Enum.at(list, &1)))\n  end\n\n  defp handle({_value, pairs}) do \n    pairs\n    |> Enum.map(fn {_value, list_of_pairs} -> list_of_pairs end)\n    |> Enum.max() \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79605,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(ls) do\n    List.foldr(ls, [], fn x, acc -> \n      if Enum.member?(acc, x), do: acc, else: [x] ++ acc \n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79606,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(list, previous_values \\\\ nil)\n  def solve([], _previous_values), do: []\n  def solve(list, previous_values) when is_nil(previous_values), do: solve(Enum.reverse(list), [])\n  def solve([head | tail], []), do: Enum.reverse([head | solve(tail, [head])])\n  def solve([head | tail], previous_values) do\n    if exists_in_list?(previous_values, head) == true do\n      solve(tail, previous_values)\n    else\n      [head | solve(tail, [head | previous_values])]\n    end\n  end\n\n  defp exists_in_list?(list, value), do: value in list\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79607,"user_id":null,"body":"defmodule RemoveDuplicates do\n  def solve(list) do\n    do_solve(Enum.reverse(list), %{}, [])\n  end\n\n  def do_solve(list, nums, acc) do\n    case Enum.drop_while(list, &Map.has_key?(nums, &1)) do\n      [] -> acc\n      [h | t] -> do_solve(t, Map.put(nums, h, true), [h | acc])  \n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bb804397274c772b40000ca":[{"id":79608,"user_id":null,"body":"defmodule Kata do\n  \n  @ratio 0.8660254037844386 # :math.sqrt(0.75)\n\n  def stack_height_2d(0), do: 0.0\n  def stack_height_2d(layers), do: 1 + (layers - 1) * @ratio\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79609,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(n) do\n    if n >= 1 do\n      (n - 1) * :math.sqrt(3) \/ 2 + 1\n    else\n      0.0\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79610,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(layers) do\n    if layers == 0 do\n      0\n    else\n      (layers-1)*(:math.sqrt(3.0))\/2+1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79611,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(0),      do: 0\n  def stack_height_2d(layers), do: (layers - 1) * :math.sqrt(3) \/ 2 + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79612,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(0), do: 0\n  def stack_height_2d(1), do: 1\n  \n  def stack_height_2d(layers) do\n    ((layers - 1) * 0.86602) + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79613,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(layers) when layers == 0 do\n    0.0  \n  end\n  def stack_height_2d(layers) do\n    Float.round((:math.sqrt(3) * (layers - 1))\/2 + 1, 3 )\n  end\nend\n\n# test \"3\" do do_test(5,4.464) end","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79614,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(0), do: 0\n  def stack_height_2d(layers) do\n    layers - 0.1339745962155614*(layers - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79615,"user_id":null,"body":"defmodule Kata do\n    @m :math.sqrt(3) \/ 2\n    \n    def stack_height_2d(0), do: 0\n    def stack_height_2d(n), do: (n-1) * @m + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79616,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(layers) do\n    if layers > 1 do\n      :math.sqrt(:math.pow(layers - 1, 2) - :math.pow((layers - 1)\/2, 2)) + 1\n    else\n      layers\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79617,"user_id":null,"body":"defmodule Kata do\n  def stack_height_2d(0), do: 0\n  def stack_height_2d(layers), do: :math.sqrt(1 - :math.pow(0.5, 2)) * (layers - 1) + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bb904724c47249b10000131":[{"id":79618,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    games\n    |> Enum.map(&String.split(&1, \":\"))\n    |> Enum.map(&to_integers\/1)\n    |> Enum.map(&score\/1)\n    |> Enum.sum()\n  end\n\n  defp score([x, y]) when x > y, do: 3\n  defp score([x, y]) when x < y, do: 0\n  defp score([x, y]) when x == y, do: 1\n\n  defp to_integers(list) do\n    Enum.map(list, &String.to_integer\/1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79619,"user_id":null,"body":"defmodule TotalPoints do\n  \n  def points([]), do: 0\n  def points([ <<x,\":\", y>> | tail]), do: score(x, y) + points(tail)\n  \n  def score(x, y) when x > y, do: 3\n  def score(x, y) when x == y, do: 1\n  def score(x, y) when x < y, do: 0\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79620,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    Enum.reduce(games, 0, fn game, acc ->\n      [x, y] = String.split(game, \":\")\n      [x, y] = [String.to_integer(x), String.to_integer(y)]\n      cond do\n        x > y -> 3 + acc\n        x < y -> 0 + acc\n        x == y -> 1 + acc\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79621,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    for game <- games, reduce: 0 do\n      score ->\n        [x, y] = game |> String.split(\":\") |> Enum.map(&String.to_integer\/1)\n        score + case x - y do z when z > 0 -> 3; 0 -> 1; _ -> 0 end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79622,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games, count \\\\ 0)\n  def points(games, count) when length(games) > 0 do\n    [game | rest] = games\n    <<x::utf8, _colon, y::utf8>> = game\n    cond do\n      x > y -> points(rest, count + 3)\n      x < y -> points(rest, count)\n      x == y -> points(rest, count + 1)\n    end\n  end\n  def points(_games, count) do\n    count\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79623,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    games \n    |> Enum.reduce(0, fn score, acc ->\n        [x, y] = \n          String.split(score, \":\") \n          |> Enum.map(fn str -> Integer.parse(str) end) \n          |> Enum.map(fn {num, _} -> num end)\n        cond do\n          x > y -> acc + 3\n          x < y -> acc\n          true -> acc + 1\n        end\n      end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79624,"user_id":null,"body":"defmodule TotalPoints do \n  def points(games) do\n    points = Enum.map(games, fn x -> String.split(x, \":\") end )\n    res = Enum.reduce(points, 0, fn arr, acc -> acc + calc([String.to_integer(hd(arr)), String.to_integer(hd(tl(arr)))]) end)\n    res\n  end\n  \n  def calc(arr) do\n    [head| tail] = arr\n    cond do\n      head > hd(tail) -> \n        3\n      head < hd(tail) -> \n        0\n      head == hd(tail) -> \n        1\n     end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79625,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    games\n    |> Enum.map(fn points -> compare(String.split(points, \":\")) end)\n    |> Enum.sum()\n  end\n  \n  defp compare([x, y]) when x > y, do: 3\n  defp compare([x, y]) when x < y, do: 0\n  defp compare(_), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79626,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n  Enum.reduce(games, 0, fn x, acc ->\n      value =\n        (String.first(x) == String.last(x) && 1) || (String.first(x) > String.last(x) && 3) || 0\n\n      acc + value\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79627,"user_id":null,"body":"defmodule TotalPoints do\n  def points(games) do\n    games\n    |> Enum.map(&(calc(&1)))\n    |> Enum.sum\n  end\n  \n  defp calc(<< a::binary-size(1), separator::binary-size(1), b::binary-size(1) >>) when a > b, do: 3\n  defp calc(<< a::binary-size(1), separator::binary-size(1), b::binary-size(1) >>) when a == b, do: 1\n  defp calc(<< a::binary-size(1), separator::binary-size(1), b::binary-size(1) >>) when a < b, do: 0\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bc555bb62a4cec849000047":[{"id":79628,"user_id":null,"body":"defmodule Kata do\n  def find(0, 0, _), do: 0\n  def find(a, _, 0), do: a\n  def find(_, b, 1), do: b\n  def find(1, 1, n) when n >= 10, do: find(1, 1, rem(n, 10))\n  def find(1, 4, n) when n >= 4, do: find(1, 4, rem(n, 4))\n\n  def find(a, b, n) do\n    c = div(a + b, 10)\n    d = rem(a + b, 10)\n    if c == 0, do: find(b, d, n - 1), else: find(c, d, n - 2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79629,"user_id":null,"body":"defmodule Kata do\n#   def find(0,0,_), do: 0\n  def find(a,b,n) do\n    {start, loop} = extract_loop(a,b)\n    l = length(start)\n    m = length(loop)\n    if n < l, do: Enum.at(start, n), else: Enum.at(loop, rem((n - l), m))\n  end\n  \n  def gen(fs) do\n    [a, b] = fs |> Enum.take(-2)\n    new_fs = Integer.digits(a + b)\n    {v, _} = contains_pair(new_fs, fs)\n    if length(new_fs) == 2 and v, do: fs, else: fs ++ new_fs\n  end\n  \n  def fibs(fs, 0), do: fs\n  def fibs(fs, n), do: fibs(gen(fs), n-1)\n  def fibs(fs), do: fibs(fs, 20)\n  \n  def contains_sublist(_, [], i), do: {false, i}\n  def contains_sublist(sub, xs, i) do\n    if List.starts_with?(xs, sub), do: {true, i}, else: contains_sublist(sub, tl(xs), i+1)\n  end\n  \n  def contains_pair([c,d], xs) do\n    {v, i} = contains_sublist([c,d], xs, 0)\n    if v, do: {true, i}, else: {false, 0}\n  end\n  def contains_pair(c, xs) do\n    contains_sublist(c, xs, 0)\n  end\n\n  def will_loop(a,b) do\n    fs = fibs([a,b], 100)\n    [a,b] = fs |> Enum.take(-2)\n    new_fs = Integer.digits(a + b)\n    contains_pair(new_fs, fs)\n  end\n  \n  def extract_loop(0,0), do: {[], [0]}\n  # this case would ideally not be hard-coded\n  def extract_loop(9,1), do: {[9,1,1,0], [1,1,2,3,5,8,1,3,4,7]}\n  def extract_loop(a,b) do\n    fs = fibs([a,b], 20)\n    case will_loop(a,b) do\n      {true, i} -> {Enum.take(fs, i), Enum.drop(fs, i)}\n      _ -> fs\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79630,"user_id":53,"body":"defmodule Kata do\n  def find(a,_,0), do: a\n  def find(_,b,1), do: b\n  def find(0,0,_), do: 0\n  def find(1,1,n), do: Enum.at([1,1,2,3,5,8,1,3,4,7], rem(n,10))\n  def find(1,4,n), do: Enum.at([1,4,5,9], rem(n,4))\n  def find(a,b,n) do\n    d = div(a+b,10)\n    m = rem(a+b,10)\n    cond do\n      d == 0 -> find(b,m,n-1)\n      true   -> find(d,m,n-2)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79631,"user_id":149,"body":"defmodule Kata do\n  @a [{[], [0]}, {[0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[0, 2, 2, 4, 6, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[0, 3, 3, 6, 9, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[0, 4, 4, 8], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[0, 5, 5, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[0, 6, 6], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[0, 7, 7], [1, 4, 5, 9]}, {[0, 8, 8, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[0, 9, 9, 1, 8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[], [1, 4, 5, 9]}, {[1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[1, 8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[1, 9, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[2, 0, 2, 2, 4, 6, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[2], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[2, 2, 4, 6, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[], [2, 3, 5, 8, 1, 3, 4, 7, 1, 1]}, {[2, 4, 6, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[2, 5, 7], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[2, 6, 8], [1, 4, 5, 9]}, {[2, 7, 9, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[2, 8, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[2, 9], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[3, 0, 3, 3, 6, 9, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[3], [1, 4, 5, 9]}, {[3, 2, 5, 7], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[3, 3, 6, 9, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[], [3, 4, 7, 1, 1, 2, 3, 5, 8, 1]}, {[], [3, 5, 8, 1, 3, 4, 7, 1, 1, 2]}, {[3, 6, 9, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[3, 7, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[3, 8], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[3, 9], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[4, 0, 4, 4, 8], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[4, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[4, 2, 6, 8], [1, 4, 5, 9]}, {[4, 3, 7, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[4, 4, 8], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[], [4, 5, 9, 1]}, {[4, 6, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[], [4, 7, 1, 1, 2, 3, 5, 8, 1, 3]}, {[4, 8], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[4, 9], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[5, 0, 5, 5, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[5, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[5, 2, 7, 9, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[5, 3, 8], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[5, 4, 9], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[5, 5, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[5, 7], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[], [5, 8, 1, 3, 4, 7, 1, 1, 2, 3]}, {[], [5, 9, 1, 4]}, {[6, 0, 6, 6], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[6, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[6, 2, 8, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[6, 3, 9], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[6, 4, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[6, 5], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[6, 6], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[6, 8], [1, 4, 5, 9]}, {[6, 9, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 0, 7, 7], [1, 4, 5, 9]}, {[7, 1, 8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 2, 9], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 3, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 4], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 5], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[7, 6], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[7, 7], [1, 4, 5, 9]}, {[7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[7, 9, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[8, 0, 8, 8, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[8, 1, 9, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[8, 2, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[8, 3], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[8, 4], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[8, 5], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[8, 6], [1, 4, 5, 9]}, {[8, 7, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[8, 8, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 0, 9, 9, 1, 8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 1, 1, 0], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 2], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 3], [1, 2, 3, 5, 8, 1, 3, 4, 7, 1]}, {[9, 4], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[9, 5], [1, 4, 5, 9]}, {[9, 6, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 7, 1, 6, 7], [1, 3, 4, 7, 1, 1, 2, 3, 5, 8]}, {[9, 8, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}, {[9, 9, 1, 8, 9, 1, 7, 8, 1, 5, 6], [1, 1, 2, 3, 5, 8, 1, 3, 4, 7]}]\n\n  def find(a, b, n) do\n    {head, cycle} = Enum.at(@a, a * 10 + b)\n    if n < length(head), do: Enum.at(head, n), else: Enum.at(cycle, rem(n - length(head), length(cycle)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79632,"user_id":null,"body":"defmodule Kata do\n  @codex %{\n    \"00\" => \"00\",\n    \"11\" => \"1123581347\",\n    \"12\" => \"1235813471\",\n    \"13\" => \"1347112358\",\n    \"14\" => \"1459\",\n    \"23\" => \"2358134711\",\n    \"34\" => \"3471123581\",\n    \"35\" => \"3581347112\",\n    \"45\" => \"4591\",\n    \"47\" => \"4711235813\",\n    \"58\" => \"5813471123\",\n    \"59\" => \"5914\"\n  }\n  \n  def find(n1,_,0),do: n1\n  def find(_,n2,1),do: n2\n  \n  def find(n1,n2,n) do\n    sm = n1 + n2\n    {nn,n,m1,m2} = if sm > 9,do: {\"#{sm}\",n-2,1,rem(sm,10)},else: {\"#{n2}#{sm}\",n-1,n2,sm}\n    s = Map.get(@codex,\"#{nn}\")\n    if s != nil do\n      String.at(s,rem(n,String.length(s))) |> String.to_integer()\n    else\n      find(m1,m2,n)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bd776533a7e2720c40000e5":[{"id":79633,"user_id":null,"body":"defmodule Pendulum do\n    def pendulum(values), do: pendulum(Enum.sort(values), [], :left)\n    def pendulum([], acc, _direction), do: acc\n    def pendulum([hd | tl], acc, :left), do: pendulum(tl, [hd | acc], :right)\n    def pendulum([hd | tl], acc, :right), do: pendulum(tl, acc ++ [hd], :left)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79634,"user_id":250,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    values\n    |> Enum.sort\n    |> Enum.with_index\n    |> Enum.reduce([], fn {x, i}, acc -> \n      if rem(i,2) == 0 do \n        [x|acc]\n      else\n        acc ++ [x]\n      end\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79635,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    Enum.reduce(Enum.sort(values), {:left, []}, fn\n      x, {:left, acc} -> {:right, [x | acc]}\n      x, {:right, acc} -> {:left, [acc, x]}\n    end) |> elem(1) |> List.flatten()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79636,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    Enum.reverse(Enum.take_every(Enum.sort(values), 2)) ++ Enum.take_every(tl(Enum.sort(values)), 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79637,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    sv = Enum.sort(values)\n\n    (Stream.iterate(0, &(&1 + 2))\n     |> Stream.take_while(&(&1 < length(values)))\n     |> Enum.map(&Enum.at(sv, &1))\n     |> Enum.reverse()) ++\n      (Stream.iterate(1, &(&1 + 2))\n       |> Stream.take_while(&(&1 < length(values)))\n       |> Enum.map(&Enum.at(sv, &1)))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79638,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    sorted =\n      values\n      |> Enum.sort()\n      |> Enum.with_index()\n\n    arr1 =\n      sorted\n      |> Enum.map(fn {x, y} ->\n        if rem(y, 2) == 0, do: x\n      end)\n      |> Enum.reject(&is_nil(&1))\n\n    arr2 =\n      sorted\n      |> Enum.map(fn {x, y} ->\n        if rem(y, 2) != 0, do: x\n      end)\n      |> Enum.reject(&is_nil(&1))\n\n    arr1\n    |> Enum.reverse()\n    |> Enum.concat(arr2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79639,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    {left, reverse_right} = \n      values\n      |> Enum.sort()\n      |> Enum.with_index(1)\n      |> Enum.reduce({[], []}, fn {x, index}, {left_acc, reverse_right_acc} ->\n        if rem(index, 2) == 1, do: {[x | left_acc], reverse_right_acc}, else: {left_acc, [x | reverse_right_acc]}\n      end)\n      \n      left ++ Enum.reverse(reverse_right)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79640,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    [center | rest] = Enum.sort(values)\n    right = Enum.take_every(rest, 2)\n    left = Enum.drop_every(rest, 2)\n    \n    Enum.reduce(left, [center | right], & [&1 | &2])\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79641,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n   %{even: even, odd: odd} = values\n    |> Enum.sort()\n    |> split_list_by_index()\n    \n    Enum.reverse(even) ++ odd\n  end\n  \n  defp split_list_by_index(list) do\n    list\n    |> Enum.with_index()\n    |> Enum.group_by(\n        fn\n          {_n, idx} when rem(idx, 2) == 0 -> :even\n          _                               -> :odd\n        end,\n        fn {n, _idx} -> n end\n    )\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79642,"user_id":null,"body":"defmodule Pendulum do\n  def pendulum(values) do\n    [min | rest] = Enum.sort(values)\n    \n    [min] |> right(rest)\n  end\n  \n  def right(pendulum, []), do: pendulum\n  def right(pendulum, [tick | rest]), do: pendulum ++ [tick] |> left(rest)\n  \n  def left(pendulum, []), do: pendulum\n  def left(pendulum, [tock | rest]), do: [tock | pendulum] |> right(rest)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5c824b7b9775761ada934500":[{"id":79643,"user_id":null,"body":"defmodule Kata do\n  def rthn_between(a, b),\n    do: scan([], Enum.map(1..9, fn d -> {d, d} end) |> :queue.from_list(), a, b) |> Enum.reverse()\n\n  def scan(res, rh, a, b) do\n    {{:value, {num, digsum}}, rh2} = :queue.out(rh)\n\n    next =\n      Enum.reduce_while(0..9, {res, rh2}, fn i, {res, rh} ->\n        dsum = digsum + i\n        num2 = num * 10 + i\n\n        if rem(num2, dsum) == 0 do\n          rh2 = :queue.in({num2, dsum}, rh)\n\n          cond do\n            num2 > b -> {:halt, res}\n            num2 >= a -> {:cont, {[num2 | res], rh2}}\n            true -> {:cont, {res, rh2}}\n          end\n        else\n          {:cont, {res, rh}}\n        end\n      end)\n\n    case next do\n      {res, rh} -> scan(res, rh, a, b)\n      res -> res\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79644,"user_id":null,"body":"defmodule Kata do\n    def rthn_between(a,b) do\n      queue = 1..9\n       |> Enum.map(& {&1, &1})\n       |> :queue.from_list()\n\n      get_rthn_recursive([], queue, a, b)\n    end\n    \n    defp get_rthn_recursive(acc, rthn_queue, min, max) do\n      {{_, {rthn, rthn_digit_sum}}, rthn_queue} = :queue.out(rthn_queue)\n      \n      new_rthns = 0..9\n       |> Enum.map(& {&1 + rthn*10, &1 + rthn_digit_sum})\n       |> Enum.filter(fn {new_rthn, new_rthn_digit_sum} -> rem(new_rthn, new_rthn_digit_sum) == 0 end)\n      \n      acc = new_rthns\n       |> Enum.filter(fn {new_rthn, _} -> new_rthn >= min and new_rthn <= max end)\n       |> Enum.reduce(acc, fn {new_rthn, _}, acc -> [new_rthn | acc] end)\n      \n      if Enum.filter(new_rthns, fn {new_rthn, _} -> new_rthn > max end) == [] do\n        rthn_queue = Enum.reduce(new_rthns, rthn_queue, fn value, queue -> :queue.in(value, queue) end)\n        get_rthn_recursive(acc, rthn_queue, min, max)\n      else\n        Enum.reverse(acc)\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79645,"user_id":470,"body":"defmodule Kata do\n\tdef rthn_between(_,n2) when n2 < 10,do: []\n\tdef rthn_between(n1,n2),do: forge(Enum.zip(1..9,1..9),n1,n2)\n\t\n\tdefp forge([{n,_}|_],_,nd) when n > nd,do: []\n\tdefp forge(r,st,nd) do\n\t\tr2 = ix(r)\n\t\t(for {n,_} <- r2,n >= st && n <= nd,do: n) ++ forge(r2,st,nd)\n\tend\n\t\n\tdefp ix([]),do: []\n\tdefp ix([{n,sum}|r]),do: (for q <- 0..9,rem(n*10+q,sum+q) == 0,do: {n*10+q,sum+q}) ++ ix(r)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ce399e0047a45001c853c2b":[{"id":79646,"user_id":1774,"body":"defmodule SumsParts do\n  def parts_sums(ls) do\n    List.foldr(ls, [0], &[&1 + hd(&2) | &2])\n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79647,"user_id":null,"body":"defmodule SumsParts do                                                           \n  def parts_sums(ls) do                                                                                                         \n     ls\n     |> Enum.reduce([Enum.sum(ls)], & [hd(&2) - &1 | &2])\n     |> Enum.reverse()\n  end                                                                                                                              \nend            ","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79648,"user_id":492,"body":"defmodule SumsParts do\n\n  def aux(xs) when xs == [], do: 0\n  def aux([x | _]) do x end\n  def parts_sums(ls) when ls == [], do: [0]\n  def parts_sums([x | xs]) do\n    r = parts_sums xs\n    [(aux r) + x | r]\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79649,"user_id":null,"body":"defmodule SumsParts do\n\n  def parts_sums(ls) do\n    [Enum.sum(ls) | ls] |> Enum.scan(&(&2 - &1))\n  end\n  \nend","lang_id":14,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79650,"user_id":null,"body":"defmodule SumsParts do\n  import Enum\n\n  def parts_sums(ls), do: scan([0 | ls], sum(ls), &(&2 - &1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79651,"user_id":null,"body":"defmodule SumsParts do\n\n  def parts_sums(ls) do\n    ls\n    |> List.foldr([0], fn(el, [h|t]) -> [el + h, h|t] end)\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79652,"user_id":null,"body":"defmodule SumsParts do\n  def parts_sums(ls) do\n    ls\n    |> Enum.reverse\n    |> Enum.reduce([0], fn(el, [h|t]) -> [el + h, h|t] end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79653,"user_id":null,"body":"defmodule SumsParts do\n\n  def parts_sums(ls) do\n    max = Enum.sum(ls)\n    \n    ls\n    |> Enum.reduce([max], fn x, [h | _] = acc -> [h - x] ++ acc end)\n    |> Enum.reverse()\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79654,"user_id":null,"body":"defmodule SumsParts do\n\n  def parts_sums(ls) do\n    ls \n    |> Enum.reverse \n    |> Enum.reduce([0], fn x, acc -> [x + hd(acc) | acc] end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79655,"user_id":null,"body":"defmodule SumsParts do\n  def parts_sums(ls) do\n    sum = Enum.sum(ls)\n    if ls == [] do\n      [0]\n    else\n      Enum.reverse(reduce(ls, [sum], sum))\n    end\n  end\n  \n  defp reduce(ls, acc, sum) do\n    [head | tail] = ls\n    new_sum = sum - head\n    new_acc = [new_sum | acc]\n    if tail == [] do\n      new_acc\n    else\n      reduce(tail, new_acc, new_sum)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d16af632cf48200254a6244":[{"id":79656,"user_id":53,"body":"defmodule StrongestEvenNumber do\n  use Bitwise\n  def strongest_even(n, m) do\n    k = band(m, m - 1)\n    if k >= n do strongest_even(n, k) else m end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79657,"user_id":470,"body":"defmodule StrongestEvenNumber do\n\tdef strongest_even(n,m,q\\\\1) do\n\t\tcond do\n\t\t\tm == n -> n * q\n\t\t\trem(n,2) == 1 -> strongest_even(n+1,m,q)\n\t\t\ttrue -> strongest_even(div(n,2),div(m,2),q*2)\n\t\tend\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79658,"user_id":null,"body":"defmodule StrongestEvenNumber do\n    use Bitwise, only_operators: true\n    \n    def strongest_even(n,m) do\n        [a,b] = [n,m] |> Enum.map(& &1 |> :math.log2 |> floor)\n        if a == b do\n            b..1\n            |> Enum.map(fn k -> with k <- 1 <<< k, do: div(m,k)*k end)\n            |> Enum.find(& &1 in n..m)\n        else\n            1 <<< b\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79659,"user_id":null,"body":"defmodule StrongestEvenNumber do\n  def strongest_even(n, m) do\n    calc_possible_strength(1, n, m, 1)\n  end\n\n  def calc_possible_strength(multiple, min, max, starting_value) do\n    multiple = multiple * 2\n\n    if multiple > max do\n      calc_possible_strength(starting_value + 1, min, max, starting_value + 1)\n    else\n      if multiple < min do\n        calc_possible_strength(multiple, min, max, starting_value)\n      else\n        if multiple * 2 < max do\n          calc_possible_strength(multiple, min, max, starting_value)\n        else\n          multiple\n        end\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79660,"user_id":null,"body":"defmodule StrongestEvenNumber do\n  def str(k, n, m) do\n    mult = div(n + k - 1, k) * k\n    if mult <= m, do: mult, else: str(div(k, 2), n, m)\n  end\n\n  def strongest_even(n, m) do\n    Integer.undigits([1] ++ List.duplicate(0, length(Integer.digits(m, 2)) - 1), 2) |> str(n, m)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79661,"user_id":null,"body":"defmodule StrongestEvenNumber do\n\n  def strongest_even(start, stop), do: get_strongest(start, stop, floor(:math.log2(stop)))\n\n  defp get_strongest(start, stop, n) do\n    case is_current_power_of_2_inside_interval?(start, stop, n) do\n      true -> get_factor_inside_interval(start, stop, n)\n      false -> get_strongest(start, stop, n - 1)\n    end\n  end\n\n  defp get_factor_inside_interval(start, stop, n), do:\n    get_factor_inside_interval(start, stop, n, div(start, round(:math.pow(2, n))))\n\n  defp get_factor_inside_interval(start, stop, n, k) do\n    current_factor = k * round(:math.pow(2, n))\n    case current_factor >= start and current_factor <= stop do\n      true -> current_factor\n      false -> get_factor_inside_interval(start, stop, n, k + 1)\n    end\n  end\n\n  defp is_current_power_of_2_inside_interval?(start, stop, n), do:\n    (fn p -> div(start, p) != div(stop, p) or rem(start, p) == 0 end).(round(:math.pow(2, n)))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d376cdc9bcee7001fcb84c0":[{"id":79662,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    groups = Enum.group_by(nums, &(&1))\n    \n    Enum.reject(nums, &(odd_length(groups[&1])))\n  end\n  \n  def odd_length(list) when rem(length(list), 2) == 0, do: false\n  def odd_length(list), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79663,"user_id":564,"body":"defmodule OddOnesOut do\n  def odd_ones_out(ns) do\n    counts = ns\n      |> Enum.group_by(&(&1))\n      |> Enum.map(fn {k, v} -> {k, length(v)} end)\n      |> Map.new\n    Enum.filter(ns, fn n -> rem(counts[n], 2) == 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79664,"user_id":null,"body":"defmodule OddOnesOut do\n  @spec odd_ones_out([integer]) :: [integer]\n  def odd_ones_out(nums) do\n    nums\n    |> Enum.map(fn x -> [x, Enum.count(nums, fn y -> x == y end)] end)\n    |> Enum.filter(fn [x, y] -> rem(y, 2) == 0 end)\n    |> Enum.map(fn [x, y] -> x end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79665,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    Enum.filter(nums, fn n -> Enum.count(nums, & &1 == n) |> rem(2) == 0 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79666,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    reject_nums =\n      nums\n      |> Enum.map(fn x ->\n        {x, Enum.count(nums, fn y -> y == x end)}\n      end)\n      |> Enum.uniq()\n      |> Enum.reject(fn {x, y} ->\n        rem(y, 2) == 0\n      end)\n      |> Enum.map(fn {x, y} ->\n        List.duplicate(x, y)\n      end)\n      |> List.flatten()\n\n    nums -- reject_nums\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79667,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    IO.inspect(nums)\n    Map.new()\n    |> odd_ones_out(nums)\n    |> show_evens()\n    |> final_result(nums, [])\n  end\n  \n  def final_result(accepted, [], final), do: final\n  def final_result(accepted, [head|tail], final) do\n    if(Enum.member?(accepted, head)) do\n      final_result(accepted, tail, final ++ [head])\n    else\n      final_result(accepted, tail, final)\n    end\n  end\n  \n  def odd_ones_out(map, []), do: map\n  def odd_ones_out(map, [head|tail]) do\n    if(head in Map.keys(map)) do\n      Map.put(map, head, map[head]+1)\n      |> odd_ones_out(tail)\n    else\n      Map.put_new(map, head, 1)\n      |> odd_ones_out(tail)\n    end\n  end\n  \n  def show_evens(map) do\n    require Integer\n    Enum.filter(map, fn {key, val} -> rem(val, 2)  == 0 end)\n    |> Enum.map(fn {key, val} -> key end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79668,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    del_list =\n      nums\n      |> Enum.reduce(%{}, fn x, acc ->\n        Map.update(acc, x, 1, &(&1 + 1))\n      end)\n      |> Enum.reduce([], fn {k, v}, acc ->\n        case rem(v, 2) do\n          0 -> acc\n          1 -> [k | acc]\n        end\n      end)\n\n    nums\n    |> Enum.reduce([], fn x, acc ->\n      case x in del_list do\n        true -> acc\n        false -> [x | acc]\n      end\n    end)\n    |> Enum.reverse\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79669,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n    counts = Enum.frequencies(nums)\n    Enum.reject(nums, &rem(counts[&1], 2) == 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79670,"user_id":null,"body":"defmodule OddOnesOut do\n  def odd_ones_out(nums) do\n   nums_even  = Enum.sort(nums)\n    |> Enum.chunk_by(fn x -> x end)\n    |> Enum.map(fn list ->   if rem(Enum.count(list),2) == 1 do\n      list\n      else\n      nil\n      end\n    end)\n    |> Enum.filter( fn x -> x end)\n    |> List.flatten()\n   nums -- nums_even\n  end\nend\n\n#test  assert odd_ones_out([1, 1, 1, 1, 3, 3, 4, 2, 1, 5, 5]) == [3, 3, 5, 5] ","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79671,"user_id":527,"body":"defmodule OddOnesOut do\n  require Integer\n  def odd_ones_out(nums) do\n    fs = Enum.frequencies(nums)\n    for n <- nums, %{^n => f} = fs, Integer.is_even(f), do: n\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d49c93d089c6e000ff8428c":[{"id":79672,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    sizes |> Enum.scan(&+\/2) |> Enum.count(&(&1 <= hd))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79673,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    sizes\n    |> Enum.scan(0, &(&1 + &2))\n    |> Enum.reject(&(&1 > hd))\n    |> Enum.count\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79674,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    {result_list, _space_taken} =\n      sizes\n      |> Enum.map_reduce({0, false}, fn x, acc ->\n        if elem(acc, 0) + x <= hd and elem(acc, 1) === false do\n          new_acc_value = elem(acc, 0) + x\n          acc = put_elem(acc, 0, new_acc_value)\n          {x, acc}\n        else\n          acc = put_elem(acc, 1, true)\n          {nil, acc}\n        end\n      end)\n\n    result_list\n    |> Enum.filter(fn x -> x != nil end)\n    |> length()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79675,"user_id":null,"body":"defmodule FillTheDrive do\n  @spec save([pos_integer], pos_integer) :: pos_integer\n  def save(sizes, hd) do\n    sizes\n    |> Enum.reduce_while({0, 0}, fn x, {total, count} = acc -> \n      if hd >= total + x,\n      do: {:cont, {total + x, count + 1}},\n      else: {:halt, acc}\n    end)\n    |> elem(1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79676,"user_id":null,"body":"defmodule FillTheDrive do\n  @spec save([pos_integer], pos_integer) :: pos_integer\n  def save(sizes, hd) do\n    save(sizes, hd, {0, 0})\n  end\n  \n  def save([], _hd, {_total, count}), do: count\n  \n  def save([head | tail], hd, {total, count}) do\n    case total + head <= hd do\n      true -> save(tail, hd, {total + head, count + 1})\n      false -> count\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79677,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    Enum.scan(sizes, & &1+&2) |> Enum.count(& &1 <= hd)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79678,"user_id":250,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    r = Enum.with_index(sizes)\n    |> Enum.reduce({-1, 0}, fn {v, i}, {r, s} ->\n      cond do\n        r == -1 && s+v == hd -> {i+1, s}\n        r == -1 && s+v > hd -> {i, s}\n        true -> {r, s + v}\n      end\n    end)\n    |> elem(0)\n    \n    if r < 0 do\n      length(sizes)\n    else \n      r\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79679,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    sizes\n    |> Enum.scan(0, &(&1 + &2))\n    |> Enum.map(&if &1 <= hd, do: &1)\n    |> Enum.reject(&is_nil&1)\n    |> Enum.count\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79680,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    save(sizes, hd, 0, 0)\n  end\n  \n  def save([head|tail], hd, sum, files) when sum+head>hd, do: files\n  def save([], hd, sum, files), do: files\n  def save([head|tail], hd, sum, files) do\n    save(tail, hd, sum+head, files+1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79681,"user_id":null,"body":"defmodule FillTheDrive do\n  def save(sizes, hd) do\n    case sizes do\n      [] -> 0\n      [first | rest] -> if first > hd, do: 0, else: 1 + save(rest, hd - first)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d50e3914861a500121e1958":[{"id":79682,"user_id":null,"body":"defmodule AddLetters do\n@letter_values ?a..?z\n               |> Enum.zip(1..26)\n               |> Enum.into(%{}, fn {k, v} -> {<<k>>, v} end)\n\n@letter_values Map.merge(@letter_values, Map.new(@letter_values, fn {k, v} -> {v, k} end))\n               \n  def add_letters([]), do: \"z\"\n    \n  def add_letters(letters) do\n  sum =\n   letters\n   |> Enum.reduce(0, & @letter_values[&1] + &2)\n   |> Integer.mod(26)\n   \n   @letter_values[sum] || \"z\"\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79683,"user_id":null,"body":"defmodule AddLetters do\n  def add_letters(letters) do\n    for <<char>> <- letters, reduce: \"z\" do\n      <<acc>> -> \n        <<?a + rem(acc - ?a + char - ?a + 1, 26)>>  \n    end\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79684,"user_id":null,"body":"defmodule AddLetters do\n\n  def add_letters([h|t]) do add_letters([h|t], []) end\n  def add_letters([]) do \"z\" end\n  def add_letters([], sum) do List.to_string([add(sum) + 96]) end\n  def add_letters([h|t], sum) do\n    add_letters(t, [to_int(h)|sum])\n  end\n\n  def to_int(letter) do\n    :binary.first(letter) - 96\n  end\n\n  def add([]) do 0 end\n  def add([h|t]) do\n    sum = h + add(t)\n    check(sum)\n  end\n  def add(last) do last end\n\n  def check(num)do\n    if num > 26 do\n      newnum = (num - 26)\n    else\n      num\n    end\n  end\n\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79685,"user_id":null,"body":"defmodule AddLetters do\n  def add_letters(letters) do\n    letters\n    |> Enum.map(fn << l :: utf8 >> -> l - 96 end)\n    |> Enum.sum\n    |> Kernel.-(1)\n    |> Integer.mod(26)\n    |> Kernel.+(97)\n    |> List.wrap\n    |> List.to_string\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79686,"user_id":null,"body":"defmodule AddLetters do\n  def add_letters([]), do: \"z\"\n  \n  def add_letters(letters) do\n    letters |> Enum.map(&points\/1) |> Enum.sum |> letter\n  end\n  \n  def letter(points) do\n    <<Integer.mod(points - 1, 26) + 97::utf8>>\n  end\n  \n  def points(letter) do\n    :binary.first(letter) - 96\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79687,"user_id":676,"body":"defmodule AddLetters do\n  def add_letters(letters) do\n    c = letters\n      |> Stream.map(&(:binary.first(&1) - 96))\n      |> Enum.sum()\n    \n    <<Integer.mod(c - 1, 26) + 97>>\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79688,"user_id":null,"body":"defmodule AddLetters do\n  @alphabet ~w(z a b c d e f g h i j k l m n o p q r s t u v w x y)\n  \n  def add_letters(letters) do\n    letters\n    |> Enum.map(&letter_to_val\/1)\n    |> Enum.sum()\n    |> val_to_letter()\n  end\n  \n  defp letter_to_val(letter) do\n    Enum.find_index(@alphabet, fn x -> x == letter end)\n  end\n  \n  defp val_to_letter(val) do\n    Enum.at(@alphabet, rem(val, length(@alphabet)))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79689,"user_id":null,"body":"defmodule AddLetters do\n  @a_z_list for n <- ?a..?z, do: <<n>>\n    # [\"a\", \"b\", \"c\"...]\n  @char_num_map Enum.with_index(@a_z_list, 1) |> Enum.into(%{})\n    # %{\"a\" => 1, \"b\" => 2...}\n  @num_char_map Enum.into(@char_num_map, %{}, fn {x,y} -> {y,x} end)\n    # %{1 => \"a\", 2 => \"b\"}\n  \n  @spec add_letters([String.t]) :: String.t\n  def add_letters([]), do: \"z\"\n  def add_letters(letters) do\n    n = letters\n    |> Enum.map(fn x -> Map.get(@char_num_map, x) end)\n    |> Enum.sum\n    |> rem(26)\n    \n    Map.get(@num_char_map, n, \"z\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79690,"user_id":null,"body":"defmodule AddLetters do\n  def compare(letter, alphabet, counter2) when counter2 == length(alphabet) do\n    0\n  end\n\n  def compare(letter, alphabet, counter2) do\n    if letter == String.at(alphabet, counter2) do\n      counter2+1\n    else\n      compare(letter, alphabet, counter2+1)\n    end\n  end\n\n  def letters2(letters, alphabet, counter, sum) when counter == 0 do\n    sum\n  end\n\n  def letters2([head|tail], alphabet, counter, sum) do\n    letters2(tail, alphabet, counter-1, sum +\n      compare(head, alphabet, 0))\n  end\n\n  def add_letters(letters) do\n    with alphabet = \"abcdefghijklmnopqrstuvwxyz\",\n         result <- letters2(letters, alphabet, length(letters), 0) do\n      if result == 26 do\n        \"z\"\n      else \n        String.at(alphabet, rem(result, 26)-1)\n      end\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79691,"user_id":null,"body":"defmodule AddLetters do\n  def add_letters(letters) do\n    <<\n      (((Enum.map(letters, &(hd(to_charlist(&1)) - 96))\n         |> Enum.sum()) - 1)\n       |> Integer.mod(26)) + 97\n    >>\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d5a7525207a674b71aa25b5":[{"id":79692,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    x = (:math.pow(n, 2) - n + 1) |> trunc\n\n    :lists.seq(x, x + n * 2 - 1, 2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79693,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    start = n * n - n + 1\n    Enum.map(0..n-1, &start + 2 * &1)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79694,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    (n*n)-n+1\n    |> Stream.iterate(&(&1 + 2)) \n    |> Enum.take(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79695,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    m = n - 1\n    Enum.reverse( do_odd_row(n, m*m+n, []) )\n  end\n  \n  defp do_odd_row(0, _value, acc), do: acc\n  defp do_odd_row(n, value, acc), do: do_odd_row(n-1, value + 2,  [ value | acc ])\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79696,"user_id":53,"body":"defmodule OddRow do\n  def odd_row(n) do\n    m = n * (n - 1) + 1\n    Enum.to_list(0..n-1) |> Enum.map(&(&1 * 2) + m)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79697,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    start = div(n * (n - 1), 2) + 1\n    (start..start+n-1) |> Enum.map(fn x -> x * 2 - 1 end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79698,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    for x <- 0..(n - 1) do\n      n * n - n + 1 + 2 * x\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79699,"user_id":null,"body":"defmodule OddRow do\n  def odd_row(n) do\n    cond do\n    n == 1 -> [1]\n    true ->\n      xs = Enum.map(1..n - 1, fn x -> x * 2 end)\n      xa = Enum.sum([1|Enum.map(1..n - 1, fn x -> x * 2 end)])\n      [xa | Enum.map(xs, fn x -> xa + x end)]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79700,"user_id":null,"body":"defmodule OddRow do\n\n  def odd_row(n), do: for x <- 0..n - 1, do: n * n - n + 1 + 2 * x\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79701,"user_id":872,"body":"defmodule OddRow do\n  def odd_row(n) do\n    start(n)\n    |> Stream.iterate(&(&1+2))\n    |> Stream.take(n)\n    |> Enum.to_list\n  end\n\n  def start(1), do: 1\n  def start(n) when n > 0, do: (1..n-1|> Enum.reduce(0, &(&1 + &2))) * 2 + 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d81d8571c6411001a40ba66":[{"id":79702,"user_id":null,"body":"defmodule DnB do\n  def dots_and_boxes(turns_array) do\n    acc = %{lines: [], score: {0, 0}, player: 1}\n\n    %{score: score} =\n      Enum.reduce(\n        turns_array,\n        acc,\n        fn turn, %{lines: lines, score: score, player: player} ->\n          line = MapSet.new(Tuple.to_list(turn))\n\n          turn_score = calc_score(line, lines)\n\n          %{\n            lines: [line | lines],\n            score: upd_score(turn_score, player, score),\n            player: next_player(player, turn_score)\n          }\n        end\n      )\n\n    score\n  end\n\n  def calc_score(line, lines) do\n    possible_points =\n      lines\n      # find lines that intersect with the given line\n      |> Enum.reject(fn el -> MapSet.disjoint?(el, line) end)\n      # form mapset of possible points of closing line\n      |> Enum.reduce(MapSet.new(), fn el, acc ->\n        MapSet.difference(el, line) |> MapSet.union(acc)\n      end)\n\n    lines\n    # find lines with both coords belong to possible points, i.e. closing lines\n    |> Enum.filter(fn el -> MapSet.subset?(el, possible_points) end)\n    # the number of closing lines correspond to the number of boxes formed, i.e. score\n    |> length()\n  end\n\n  defp next_player(player, 0) do\n    case player do\n      1 -> 2\n      2 -> 1\n    end\n  end\n\n  defp next_player(player, score) when score > 0 do\n    player\n  end\n\n  defp upd_score(0, _player, score) do\n    score\n  end\n\n  defp upd_score(value, player, score) do\n    {f, s} = score\n\n    case player do\n      1 -> {f + value, s}\n      2 -> {f, s + value}\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79703,"user_id":null,"body":"defmodule DnB do\n\tdef dots_and_boxes(moves) do\n    moves\n    |> process_moves\n    |> extract_score\n\tend\n  \n  def process_moves(moves) do\n    scores = [0, 0]\n    player = 0\n    board  = get_board(moves)\n    \n    Enum.reduce(moves, {scores, player, board}, &process_move\/2)\n  end\n  \n  def extract_score({scores, _player, _board}), do: scores |> List.to_tuple\n  \n  def get_board(moves) do\n    size = moves \n      |> Enum.max \n      |> Tuple.to_list \n      |> Enum.max \n      |> Kernel.+(1) \n      |> :math.sqrt \n      |> trunc\n      \n    base = (1..(size - 1))\n    Enum.reduce(base, {%{}, %{}}, fn col, acc -> \n      Enum.reduce(base, acc, fn row, {mvs, sqs} -> \n        x = (col - 1) * size + (row - 1)\n        y = col * size + (row - 1)\n        \n        sqs = Map.put(sqs, x, 0)\n        {_, mvs} = Map.get_and_update(mvs, [x, x + 1],     &add_move(&1, x))\n        {_, mvs} = Map.get_and_update(mvs, [y, y + 1],     &add_move(&1, x))\n        {_, mvs} = Map.get_and_update(mvs, [x, y],         &add_move(&1, x))\n        {_, mvs} = Map.get_and_update(mvs, [x + 1, y + 1], &add_move(&1, x))\n        \n        {mvs, sqs}\n      end)\n    end)\n  end\n  \n  defp add_move(nil, square),     do: {nil, [square]}\n  defp add_move(squares, square), do: {squares, [square|squares]}\n  \n  def process_move(move, {scores, player, {mv_to_sq, sqt}}) do\n    move    = move |> Tuple.to_list |> Enum.sort\n    squares = mv_to_sq[move]\n    \n    sqt = Enum.reduce(squares, sqt, fn square, sqt ->\n      Map.update!(sqt, square, &(&1 + 1))\n    end)\n    \n    scored = Map.take(sqt, squares) |> Enum.count(fn {_, val} -> val == 4 end)\n    {scores, player} = process_score(scores, player, scored)\n    \n    {scores, player, {mv_to_sq, sqt}}\n  end\n  \n  defp process_score(scores, player, 0) do\n    {scores, rem(player + 1, 2)}\n  end\n  defp process_score(scores, player, scored) do\n    {List.update_at(scores, player, &(&1 + scored)), player}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79704,"user_id":null,"body":"defmodule DnB do\n\tdef dots_and_boxes(moves) do\n    moves\n    |> Enum.reduce({MapSet.new(), %{player1: 0, player2: 0}, :player1}, &do_one_move\/2)\n    |> elem(1)\n    |> (fn map -> {map.player1, map.player2} end).()\n  end\n\n  def do_one_move({a, b}, {graph, scores, player}) do\n    {dots1, dots2} = Enum.reduce(graph, {[], []}, fn {x, y}, {d1, d2} ->\n      case {x == a, y == a, x == b, y == b} do\n        {true, _, _, _} -> {[y | d1], d2}\n        {_, true, _, _} -> {[x | d1], d2}\n        {_, _, true, _} -> {d1, [y | d2]}\n        {_, _, _, true} -> {d1, [x | d2]}\n        {_,_,_,_}       -> {d1, d2}\n      end\n    end)\n\n    score = Enum.count(for x <- dots1, y <- dots2, {x, y} in graph or {y, x} in graph, do: {x, y})\n    new_scores = if score > 0, do: Map.update(scores, player, 1, fn n -> n + score end), else: scores\n\n    new_player = case {score > 0, player} do\n      {false, :player1} -> :player2\n      {false, :player2} -> :player1\n      _                 -> player\n    end\n\n    {MapSet.put(graph, {a, b}), new_scores, new_player}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79705,"user_id":2391,"body":"defmodule DnB do\n\tdef dots_and_boxes(ar) do\n    grid_size = get_grid_size(ar)\n    starting_state = %{\n      score: {0,0},\n      board: MapSet.new(),\n      turn: 0, \n    }\n    winning_moves = generate_winning_moves(grid_size)\n    %{score: score} = make_moves(ar, starting_state, winning_moves)\n    score\n\tend\n  \n  def get_grid_size(ar) do\n    case length(ar) do\n      12 -> 3\n      24 -> 4\n      40 -> 5\n      60 -> 6\n      84 -> 7\n      112 -> 8\n      144 -> 9\n      180 -> 10\n      220 -> 11\n      264 -> 12\n    end\n  end\n  \n  def make_moves([], state, _winning_moves) do\n    state\n  end\n  \n  def make_moves([{a, b} | rest], state = %{board: board, score: score , turn: turn}, winning_moves) do\n    # Check previous moves (board) for connecting edges \/ closed boxes\n    current_move = if a < b do \n      {a, b}\n    else\n      {b, a}\n    end\n    board = MapSet.put(board, current_move)\n#     check if any winning move is subset of board\n    remaining_winning_moves = Enum.reject(winning_moves, fn set -> \n      MapSet.subset?(set, board)\n    end)\n#     if yes, remove winning move from winning_moves & Increase score, turn is the same\n     squares_won = length(winning_moves) - length(remaining_winning_moves)\n     if squares_won > 0 do\n       player_score = elem(score, turn) + squares_won\n       new_scores = put_elem(score, turn, player_score)\n       make_moves(rest, %{state | board: board, score: new_scores, turn: turn }, remaining_winning_moves)\n    else\n        next_turn = case turn do\n        1 -> 0\n        0 -> 1\n        end\n       make_moves(rest, %{state | board: board, score: score, turn: next_turn }, remaining_winning_moves)\n    end\n  end\n  \n\n#   list of all possible winning squares e.g. [{0,1},{1,3},{2,3},{0,2}, ...]\n  def generate_winning_moves(grid_size) do\n    max = trunc(:math.pow(grid_size,2) -1)\n    0..max\n    |> Enum.chunk_every(grid_size) \n    |> Enum.drop(-1) \n    |> Enum.flat_map(fn n -> Enum.drop(n, -1) end) \n    |> Enum.map(fn n -> \n      drawbox(n, grid_size)\n    end)\n  end\n  \n  def drawbox(inital_num, grid) do\n    [{inital_num, inital_num + 1}, \n    {inital_num, inital_num + grid}, \n    {inital_num + grid, inital_num + grid + 1}, \n    {inital_num + 1, inital_num + grid + 1}]\n    |> MapSet.new()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79706,"user_id":null,"body":"defmodule DnB do\n  def dots_and_boxes(ar) do\n    sorted_ar = Enum.map(ar, fn({first, last} = line) -> if (first > last), do: {last, first}, else: line end)\n    length = sorted_ar |> Enum.map(&elem(&1, 1)) |> Enum.max |> (&(&1 + 1)).() |> :math.sqrt |> Kernel.trunc\n    squares = build_squares(length)\n\n    {score_first, score_last, turn, _} = Enum.reduce(sorted_ar, {0, 0, 0, squares}, &step\/2)\n    if turn == 0, do: {score_first, score_last}, else: {score_last, score_first}\n  end\n\n  defp build_squares(length) do\n    0..(length-2) |> Enum.flat_map(fn(row) ->\n      0..(length-2) |> Enum.map(fn(col) ->\n        top_left     = row * length + col\n        top_right    = top_left + 1\n        bottom_left  = (row + 1) * length + col\n        bottom_right = bottom_left + 1\n        [\n          {top_left, top_right},\n          {top_left, bottom_left},\n          {top_right, bottom_right},\n          {bottom_left, bottom_right},\n        ]\n      end)\n    end)\n  end\n\n  defp step(line, {score_first, score_second, turn, squares}) do\n    new_squares = squares\n                  |> Enum.map(&List.delete(&1, line))\n                  |> Enum.filter(&List.first\/1)\n\n    delta = length(squares) - length(new_squares)\n\n    if delta > 0 do\n      {score_first + delta, score_second, turn, new_squares}\n    else\n      {score_second, score_first, rem(turn + 1, 2), new_squares}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79707,"user_id":null,"body":"defmodule DnB do\n  def check(mp, {x, y}) do \n    MapSet.member?(mp, {x, y}) or MapSet.member?(mp, {y, x})\n  end\n  \n  def winner(n, mp, {a, b}) do\n    {l1, l2} =\n      if abs(a - b) == 1 do\n        {[{a - n, b - n}, {a - n, a}, {b - n, b}],\n         [{a + n, b + n}, {a, a + n}, {b, b + n}]}\n      else\n        {[{a - 1, a}, {b - 1, b}, {a - 1, b - 1}],\n         [{a, a + 1}, {b, b + 1}, {a + 1, b + 1}]}\n      end\n      \n    l1? = Enum.all?(l1, &check(mp, &1))\n    l2? = Enum.all?(l2, &check(mp, &1))\n    \n    case {l1?, l2?} do\n      {true, true}   -> 2\n      {false, false} -> 0\n      _              -> 1\n    end\n  end\n\n\tdef dots_and_boxes(ar) do\n    n = \n      {Enum.max_by(ar, fn {x, _} -> x end), Enum.max_by(ar, fn {_, y} -> y end)}\n      |> (fn {{a, _}, {_, b}} -> max(a, b) end).()\n      |> (&(trunc(:math.sqrt(&1 + 1)))).()\n  \n\t\tar\n    |> Enum.reduce({MapSet.new(), 1, 0, 0}, fn line, {mp, p, p1, p2} ->\n      mp_prime = MapSet.put(mp, line)\n      num_win = winner(n, mp_prime, line)\n      \n      case {num_win, p} do\n        {0, 1} -> {mp_prime, 2, p1, p2}\n        {0, 2} -> {mp_prime, 1, p1, p2}\n        {x, 1} -> {mp_prime, 1, p1 + x, p2}\n        {x, 2} -> {mp_prime, 2, p1, p2 + x}\n      end\n    end)\n    |> (fn {_, _, p1, p2} -> {p1, p2} end).()\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79708,"user_id":null,"body":"defmodule DnB do\n\n  def dots_and_boxes(ar) do\n    bl = board_size(ar) |> box_list\n    ar |> play(bl, {0, {0,0}, 0})\n  end\n\n  def play([], _, {_,score,_}) do\n    score\n  end\n  def play([h|t], box_list, {empty_box, score, player}) do\n    new_bl = box_list |> Enum.map(fn box -> reject_side_from_box(box, h) end)\n    new_empty_box = new_bl |> count_empty_box\n\n    new_player = cond do\n      new_empty_box == empty_box and player == 0 -> 1\n      new_empty_box == empty_box and player == 1 -> 0\n      true -> player\n    end\n\n    new_score = update_score(new_empty_box - empty_box, score, new_player)\n\n    play(t, new_bl, {new_empty_box, new_score, new_player})\n  end\n\n  def update_score(x, score={a,b}, 0), do: {a+x, b}\n  def update_score(x, score={a,b}, 1), do: {a, b+x}\n  def update_score(0, score, _), do: score\n\n  def count_empty_box(box_list) do\n    box_list\n    |> Enum.reduce(0,\n        fn\n          [], acc -> acc + 1\n          _, acc -> acc\n        end\n      )\n  end\n\n  def reject_side_from_box(box, {a,b}) do\n    box\n    |> Enum.reject(fn side -> side == {a,b} or side == {b,a} end)\n  end\n\n  def box_list(board_size) do\n    n = board_size + 1\n\n    0..(n*n-1) # dots\n    |> Enum.reject(fn dot -> rem(dot, n) == board_size or dot >= board_size * n end) # collect left top vertex\n    |> Enum.map(fn dot -> [{dot, dot+1}, {dot, dot+n}, {dot+n, dot+n+1}, {dot+1,dot+1+n}] end)\n  end\n\n  def board_size(list) do\n    list\n    |> Enum.reduce(0,\n         fn tuple, acc ->\n           tmax = Tuple.to_list(tuple) |> Enum.max\n           cond do\n             tmax > acc -> tmax\n             true -> acc\n           end\n         end\n       )\n    |> IO.inspect\n    |> (fn x -> trunc(:math.sqrt(x + 1) - 1) end).()\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79709,"user_id":470,"body":"defmodule DnB do\n\tuse Bitwise, only_operators: true\n\t\n\tdef dots_and_boxes(r) do\n\t\trln = length(r)\n\t\tln = Stream.zip(1..100,3..16) |> Stream.drop_while(fn {i,n} -> (i+n)*n != rln end) |> Enum.at(0) |> elem(1)\n\t\tcodex = for n <- 0..(ln-1)*(ln-1)-1,into: %{},do: {n,4}\n\t\tforge(r,ln,0,codex,{0,0})\n\tend\n\t\n\tdefp forge([v|r],ln,p,cdx,score) do\n\t\t{cdx,score,b} = Enum.reduce(proc(v,ln),{cdx,score,1},fn n,{cdx,score,b} ->\n\t\t\tif Map.get(cdx,n) do\n\t\t\t\t%{^n => cn} = cdx\n\t\t\t\tif cn == 1 do\n\t\t\t\t\t{elem(Map.pop(cdx,n),1),incrv(score,p),0}\n\t\t\t\telse\n\t\t\t\t\t{%{cdx | n => cn-1},score,b}\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t{cdx,score,b}\n\t\t\tend\n\t\tend)\n\t\tforge(r,ln,p ^^^ b,cdx,score)\n\tend\n\t\n\tdefp forge([],_,_,_,score),do: score\n\t\n\tdefp incrv({p1,p2},0),do: {p1+1,p2}\n\tdefp incrv({p1,p2},1),do: {p1,p2+1}\n\t\n\tdefp proc({n1,n2},ln) do\n\t\t{n1,n2} = if n1 > n2,do: {n2,n1},else: {n1,n2}\n\t\t{dv,rm} = {div(n1,ln),rem(n1,ln)}\n\t\tcase n2 - n1 do\n\t\t\t1 -> [(dv-1)*(ln-1)+rm,dv*(ln-1)+rm]\n\t\t\tln -> cond do\n\t\t\t\trm == 0 -> [dv*(ln-1)+rm]\n\t\t\t\trm == ln-1 -> [dv*(ln-1)+rm-1]\n\t\t\t\ttrue -> [dv*(ln-1)+rm,dv*(ln-1)+rm-1]\n\t\t\tend\n\t\tend\n\tend\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d9f95424a336600278a9632":[{"id":79710,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n    for {b, i} <- to_binary(n), b == ?1, do: trunc(:math.pow(2, i))\n  end\n  \n  defp to_binary(n) do\n    n |> Integer.to_string(2) |> String.to_charlist |> Enum.reverse |> Enum.with_index\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79711,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n    Stream.iterate(1, & &1*2)\n    |> Stream.take_while(& &1 <= n)\n    |> Enum.filter(&Bitwise.band(n, &1) != 0)\n  end  \nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79712,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n    n\n    |> Integer.digits(2)\n    |> Enum.reverse()\n    |> Enum.with_index()\n    |> Enum.map(fn {x, y} ->\n      if x == 0, do: 0, else: trunc(:math.pow(2, y))\n    end)\n    |> Enum.filter(&(&1 != 0))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79713,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n    n\n    |> Integer.digits(2)\n    |> Enum.reverse()\n    |> Stream.zip(Stream.iterate(1, & &1 * 2))\n    |> Stream.map(fn {a, b} -> a * b end)\n    |> Enum.reject(& &1 == 0)\n  end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79714,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n    Integer.digits(n, 2) \n    |> Enum.reverse() \n    |> Enum.with_index() \n    |> Enum.map(fn {digit, power} -> \n      floor(:math.pow(2, power) * digit) \n    end) \n    |> Enum.filter(fn x -> x != 0 end)\n  end  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79715,"user_id":null,"body":"defmodule Kata do\n    def powers(n), do: n\n        |> Integer.digits(2)\n        |> Enum.reverse\n        |> Enum.zip(Stream.iterate(1, & &1 * 2))\n        |> Enum.filter(& elem(&1, 0) == 1)\n        |> Enum.map(& elem(&1, 1))\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79716,"user_id":1640,"body":"defmodule Kata do\n  def powers(n) do\n    Integer.to_string(n,2) \n    |> String.split(\"\", trim: true) \n    |> Enum.reverse \n    |> Enum.with_index \n    |> Enum.map(fn {x,i} -> :math.pow(2,i) * String.to_integer(x) end)\n    |> Enum.filter(fn x -> x != 0 end)\n    |> Enum.map(fn x -> Kernel.trunc(x) end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79717,"user_id":null,"body":"defmodule Kata do\n  def powers(n) do\n\n    max_pow = Kernel.trunc(:math.log2(n))\n    \n    {list, 0} = max_pow..0\n    |> Enum.map(&Kernel.trunc(:math.pow(2, &1)))\n    |> Enum.map_reduce(n, &reducer(&1, &2))\n    \n    list\n    |> Enum.filter(&(&1 != nil))\n    |> Enum.reverse()\n  end  \n  \n  def reducer(x, acc) do\n    y = acc - x\n    if (y >= 0) do\n      {x, y}\n    else\n      {nil, acc}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79718,"user_id":null,"body":"defmodule Kata do\n  def powers(1), do: [1]\ndef powers(2), do: [2]\n\ndef powers(num) do\n  num\n  |> to_reverse_binary()\n  |> Enum.with_index()\n  |> Enum.filter(fn {x, _i} -> x == 1 end)\n  |> Enum.map(fn {_x, i} -> trunc(:math.pow(2, i)) end)\nend\n\ndef to_reverse_binary(1), do: [0]\ndef to_reverse_binary(2), do: [1]\n\ndef to_reverse_binary(number) when number >= 1 do\n  to_reverse_binary(number, [])\nend\n\ndef to_reverse_binary(0, acc), do: [1 | acc] |> Enum.reverse()\ndef to_reverse_binary(1, acc), do: [1 | acc] |> Enum.reverse()\n\ndef to_reverse_binary(number, acc) do\n  to_reverse_binary(trunc(number \/ 2), [rem(number, 2) | acc])\nend\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79719,"user_id":645,"body":"defmodule Kata, do: def powers(n), do:\n  n\n    |> Integer.to_string(2)\n    |> String.split(\"\", trim: true) \n    |> Enum.reverse\n    |> Enum.with_index\n    |> Enum.map(fn {x, i} -> if x != \"0\", do: trunc(:math.pow(2, i)), else: 0 end)\n    |> Enum.filter(&(&1 != 0))","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5dae2599a8f7d90025d2f15f":[{"id":79720,"user_id":null,"body":"defmodule Kata do\n  use Bitwise, only_operators: true\n  def consecutive_ducks(n) do\n    (n &&& n-1) != 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79721,"user_id":null,"body":"defmodule Kata do\n  @spec consecutive_ducks(pos_integer) :: boolean\n  def consecutive_ducks(n) do\n    :math.log2(n) \n    |> Float.to_string() \n    |> String.ends_with?(\"0\")\n    |> Kernel.!\n  end\nend\n\n\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79722,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(n) do\n    n != 1 && (rem(n, 2) == 1 || consecutive_ducks(div(n, 2)))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79723,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(n) do\n    floor(:math.log2(n)) != :math.log2(n)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79724,"user_id":168,"body":"use Bitwise\n\ndefmodule Kata do\n  def consecutive_ducks(n) do\n    (n &&& n - 1) > 0\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79725,"user_id":53,"body":"defmodule Kata do\n  def consecutive_ducks(1), do: false\n  def consecutive_ducks(n) when rem(n, 2) == 0, do: consecutive_ducks(div(n, 2))\n  def consecutive_ducks(n), do: true\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79726,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(1), do: false\n  def consecutive_ducks(n) when rem(n, 2) == 1, do: true\n  def consecutive_ducks(n), do: consecutive_ducks(div n, 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79727,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(2), do: false\n  def consecutive_ducks(n) when rem(n, 2) == 1, do: true\n  def consecutive_ducks(n), do: consecutive_ducks(div n, 2)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79728,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(n) do\n    :math.log2(n) != Float.floor(:math.log2(n))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79729,"user_id":null,"body":"defmodule Kata do\n  def consecutive_ducks(n, nowc \\\\ 2) do\n    sumn = n - round(nowc * (nowc + 1) \/ 2)\n    \n    if sumn<0, do: false, else:\n    if rem(sumn, nowc) == 0, do: true, else:\n    consecutive_ducks(n, nowc + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e07b5c55654a900230f0229":[{"id":79730,"user_id":null,"body":"defmodule Kata do\n    def reverse_in_parens(test) do\n        String.graphemes(test)\n        |> Enum.reduce({:forward, \"\", []}, &process\/2)\n        |> case do\n            {:forward, output, []} -> output\n        end\n    end\n\n    defp process(\"(\", {:forward, output, stack}) do\n        {:backward, \"\", [output|stack]}\n    end\n\n    defp process(\")\", {:backward, reversed, [output|stack]}) do\n        {:forward, output <> \"(\" <> reversed <> \")\", stack}\n    end\n    \n    defp process(\"(\", {:backward, reversed, stack}) do\n        {:forward, \"\", [reversed|stack]}\n    end\n\n    defp process(\")\", {:forward, forward, [reversed|stack]}) do\n        {:backward, \"(\" <> forward <> \")\" <> reversed, stack}\n    end\n\n    defp process(c, {:forward, output, stack}) do\n        {:forward, output <> c, stack}\n    end\n    \n    defp process(c, {:backward, output, stack}) do\n        {:backward, c <> output, stack}\n    end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79731,"user_id":null,"body":"defmodule Kata do\n  def reverse_in_parens(text, reverse \\\\ false)\n\n  def reverse_in_parens(\"\", _), do: \"\"\n\n  def reverse_in_parens(text, reverse) do\n    c = String.first(text)\n\n    if c == \"(\" do\n      pos = match_paren(text)\n\n      add(\n        reverse_in_parens(String.slice(text, pos..-1), reverse),\n        \"(\" <> reverse_in_parens(String.slice(text, 1..(pos - 2)), !reverse) <> \")\",\n        reverse\n      )\n    else\n      add(reverse_in_parens(String.slice(text, 1..-1), reverse), c, reverse)\n    end\n  end\n\n  def add(str, item, reverse), do: if(reverse, do: str <> item, else: item <> str)\n\n  def match_paren(str),\n    do:\n      Enum.reduce_while(0..(String.length(str) - 1), 0, fn i, lvl ->\n        case String.at(str, i) do\n          \"(\" -> {:cont, lvl + 1}\n          \")\" -> if lvl <= 1, do: {:halt, i + 1}, else: {:cont, lvl - 1}\n          _ -> {:cont, lvl}\n        end\n      end)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79732,"user_id":null,"body":"defmodule Kata do\n  def reverse_in_parens(text) do\n    text\n    |> split_in_stacks\n    |> join_stacks\n  end\n\n  def split_in_stacks(text) do\n    text\n    |> String.split(~r\/[()]\/, include_captures: true, trim: true)\n    |> Enum.reduce([[]], &split_in_stacks\/2)\n    |> hd\n  end\n\n  defp split_in_stacks(\"(\", stack),            do: [[]|stack]\n  defp split_in_stacks(\")\", [body,prev|rest]), do: [[body|prev] | rest]\n  defp split_in_stacks(word, [head|rest]),     do: [[word|head] | rest]\n\n  def join_stacks(stacks) do\n    stacks\n    |> Enum.reverse\n    |> Enum.reduce(\"\", &join_stack(&1, &2, :n))\n  end\n\n  defp join_stack(word, acc, :n) when is_binary(word), do: acc <> word\n  defp join_stack(word, acc, :r) when is_binary(word), do: acc <> String.reverse(word)\n  defp join_stack(list, acc, :n) do\n    acc <> \"(\" <> Enum.reduce(list, \"\", &join_stack(&1, &2, :r)) <> \")\"\n  end\n  defp join_stack(list, acc, :r) do\n    acc <> \"(\" <> Enum.reduce(Enum.reverse(list), \"\", &join_stack(&1, &2, :n)) <> \")\"\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79733,"user_id":null,"body":"defmodule Kata do\n    def reverse_in_parens(text) do\n        # Set the initial direction to forwards\n        parse(text, [], false)\n        |> List.flatten\n        |> List.to_string\n    end\n    \n    def parse(\"\", acc, _direction) do\n      Enum.reverse(acc)\n    end\n    def parse(\"(\" <> text, acc, direction) do\n      # Reverse the direction for the string inside the parens.\n      {remaining, reversed} = parse(text, [], !direction)\n      parse(remaining, [[\"(\", reversed, \")\"]|acc], direction)\n    end\n    def parse(\")\" <> text, acc, direction) do\n      # If direction is true then return the reversed contents.\n      if direction do\n        {text, acc}\n      else\n        # Otherwise reverse them first.\n        {text, Enum.reverse(acc)}\n      end\n    end\n    def parse(text, acc, direction) do\n      parse(String.slice(text, 1..-1),\n            [String.first(text)|acc],\n            direction)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79734,"user_id":null,"body":"defmodule Kata do\n  @pattern ~r\/\\((?:[^)(]+|(?R))*+\\)\/\n\n  def reverse_in_parens(s) do\n    cond do\n      String.match?(s, @pattern) -> \n        String.replace(s, @pattern, fn x -> \"(#{reverse_and_preserve_parens(x)})\" end)\n      true                       -> s\n    end\n  end\n  \n  def reverse_and_preserve_parens(s) do\n    s\n    |> String.replace(~r\/^\\(|\\)$\/, \"\")\n    |> reverse_in_parens\n    |> String.reverse\n    |> String.replace(~r\/[\\(\\)]\/, fn x -> if x == \"(\", do: \")\" , else: \"(\" end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79735,"user_id":null,"body":"defmodule Kata do\n    def reverse_in_parens(text), do: parse(text, [\"\"])\n   \n    def parse(<<\"(\"::binary, rest::binary>>, [top|tail] = s) do\n      parse(rest, [\"\",top <> \"(\" | tail])\n    end\n    \n    def parse(<<\")\"::binary, rest::binary>>, [top,nx|tail] = s) do\n      parse(rest, [nx <> str_reverse(top) <> \")\" | tail])\n    end\n    \n    def parse(<<c::binary-size(1), rest::binary>>, [top|tail] = s) do\n      parse(rest, [top <> c|tail])\n    end\n    def parse(\"\",[str]), do: str\n    \n    def str_reverse(str) do\n      String.reverse(str)\n      |> String.replace(\"(\", \"<<\")\n      |> String.replace(\")\", \"(\")\n      |> String.replace(\"<<\", \")\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79736,"user_id":null,"body":"defmodule Kata do\n    defp cl(\"(\" <> s,i,c), do: cl(s,i+1,c+1)\n    defp cl(\")\" <> s,i,c), do: if c == 1, do: i, else: cl(s,i+1,c-1)\n    defp cl(<<_>> <> s,i,c), do: cl(s,i+1,c)\n\n    defp scan(\"\",r,q), do: [r|q] |> Enum.reject(& &1 == \"\") |> Enum.reverse\n    defp scan(\"(\" <> s,r,q) do\n        {a,<<_>> <> b} = String.split_at(s, cl(s,0,1))\n        scan(b,\"\",[scan(a,\"\",[]),r|q])\n    end\n    defp scan(<<c>> <> s,r,q), do: scan(s,r <> <<c>>,q)\n\n    defp walk(a,n) do\n        x = rem(n,2) < 1\n        a = Enum.map(a, fn\n            e when is_binary(e) -> if x, do: e, else: String.reverse(e)\n            e -> \"(\" <> walk(e,n+1) <> \")\"\n        end)\n        (if x, do: a, else: Enum.reverse(a)) |> Enum.join(\"\")\n    end\n\n    def reverse_in_parens(s), do: s |> scan(\"\",[]) |> walk(0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79737,"user_id":null,"body":"defmodule Kata do\n  def reverse_in_parens(\"\"), do: \"\"\n  def reverse_in_parens(<<head, tail::binary>> = str) do\n    case {head, tail} do\n      {_, \"\"} -> str\n      {40, _} ->\n        {aftr, btwn} = split_on_closure(tail)\n        \"(\" <> reverse_in_parens(String.reverse(btwn)) <> \")\" <> reverse_in_parens(aftr)\n      _ ->\n        <<head>> <> reverse_in_parens(tail)\n    end\n  end\n\n  defp split_on_closure(str, acc \\\\ \"\", depth \\\\ 0)\n  defp split_on_closure(str, acc, depth) do\n    <<head, tail::binary>> = str\n    case {head, depth} do\n      {41, 0} -> {tail, acc}\n      {40, _} ->\n        split_on_closure(tail, <<acc::binary>> <> <<41>>, depth + 1)\n      {41, _} ->\n        split_on_closure(tail, <<acc::binary>> <> <<40>>, depth - 1)\n      {_ , _} ->\n        split_on_closure(tail, <<acc::binary>> <> <<head>>, depth)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79738,"user_id":443,"body":"defmodule Kata do\n  def reverse_in_parens(text) do\n    text\n    |> String.to_charlist\n    |> do_r_i_p([], [])\n    |> do_reverses\n    |> to_string\n  end\n\n  defp do_r_i_p([], _, parsed) do\n    parsed\n  end\n  defp do_r_i_p([?( | unparsed], stack, parsed) do\n    do_r_i_p(unparsed, [parsed | stack], [])\n  end\n  defp do_r_i_p([?) | unparsed], [stack_top | stack], parsed) do\n    do_r_i_p(unparsed, stack, [parsed | stack_top])\n  end\n  defp do_r_i_p([char | unparsed], stack, parsed) do\n    do_r_i_p(unparsed, stack, [char | parsed])\n  end\n  \n  defp do_reverses(items) do\n    do_reverses(items, :backward, [], [])\n  end\n  defp do_reverses([], _, [], result) do\n    result\n  end\n  defp do_reverses([], direction, [stack_top | stack], result) do\n    do_reverses(stack_top, swap_dir(direction), stack, [?( | result])\n  end\n  defp do_reverses([item | items], :backward, stack, result) when is_list(item) do\n    do_reverses(Enum.reverse(item), :forward, [items | stack], [?) | result])\n  end\n  defp do_reverses([item | items], :forward, stack, result) when is_list(item) do\n    do_reverses(item, :backward, [items | stack], [?) | result])\n  end\n  defp do_reverses([char | items], direction, stack, result) do\n    do_reverses(items, direction, stack, [char | result])\n  end\n  \n  defp swap_dir(:forward), do: :backward\n  defp swap_dir(:backward), do: :forward\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79739,"user_id":null,"body":"defmodule Kata do\n\n  @moduledoc \"\"\"\n  Reverse Inside Parentheses\n  https:\/\/www.codewars.com\/kata\/5e07b5c55654a900230f0229\n  \"\"\"\n\n  @doc \"\"\"\n  Reorder a string so that the contents of parenthentical groupings are flipped.\n\n  Given a string containing parenthesized segments, re-arrange its contents as\n  follows:\n    - within a parenthetical grouping, the contents should be reversed\n  character-wise, but\n    - nested parenthetical groups toggle the reversing, so that the contents of\n  a group that's inside another group appear in their original order (and\n  another level of nesting goes back to reversal, and so on).\n\n  Whitespace characters are treated as any other character, and the parentheses\n  themselves will appear in the output at the same locations as in the input.\n\n  ## Examples\n\n      iex> Kata.reverse_in_parens(\"h(el)lo\")\n      \"h(le)lo\"\n\n      iex> Kata.reverse_in_parens(\"a ((d e) c b)\")\n      \"a (b c (d e))\")\n\n      iex> Kata.reverse_in_parens(\"one (two (three) four)\")\n      \"one (ruof (three) owt)\"\n\n      iex> Kata.reverse_in_parens(\"one (ruof ((rht)ee) owt)\")\n      \"one (two ((thr)ee) four)\"\n  \"\"\"\n  def reverse_in_parens(input) do\n    input\n    |> parse()\n    |> render()\n  end\n\n  # A node in this tiny grammar: either a character or a parenthesized grouping.\n  @typep expression :: {:char, char()} | {:reversed, ast()}\n  # A list of `expression()`s; the output of parsing\n  @typep ast() :: list(expression())\n\n  # Walk a string, recognizing characters and parenthesized groups.\n  # Return a list of `expression()`s.\n  @spec parse(String.t(), ast()) :: ast()\n  defp parse(input, ast \\\\ [])\n\n  defp parse(\"\", ast), do: Enum.reverse(ast)\n\n  defp parse(<<char::utf8, rest::binary>>, ast) do\n    case char do\n      ?( ->\n        {nested_ast, rest} = parse_paren_expr(rest, [])\n        parse(rest, [{:reversed, nested_ast} | ast])\n      ?) -> raise \"Close paren with no matching open\"\n      _ -> parse(rest, [{:char, char} | ast])\n    end\n  end\n\n  # Parse a parenthetical grouping in a string; the first argument\n  # should be the contents of the string immediately following the\n  # opening paren. Returns the resulting `expression()`s and the unparsed\n  # remainder of the input. (The closing paren is consumed.)\n  @spec parse_paren_expr(String.t(), ast()) :: {ast(), String.t()}\n\n  defp parse_paren_expr(\"\", _), do: raise \"Missing close paren\"\n\n  defp parse_paren_expr(<<char::utf8, rest::binary>>, ast) do\n    case char do\n      ?( ->\n        {nested_ast, rest} = parse_paren_expr(rest, [])\n        parse_paren_expr(rest, [{:reversed, nested_ast} | ast])\n      ?) -> {Enum.reverse(ast), rest}\n      _ -> parse_paren_expr(rest, [{:char, char} | ast])\n    end\n  end\n\n  # Transform the output of `parse\/2` back into a string by interpreting the\n  # list of `expression()`s and emitting characters, flipping grouped contents\n  # as needed.\n  @spec render(ast(), String.t()) :: String.t()\n  defp render(ast, output \\\\ \"\")\n\n  defp render([], output), do: output\n\n  defp render([node | rest], output) do\n    case node do\n      {:reversed, ast} ->\n        nested_output = ast |> Enum.reverse() |> render_reversed()\n        render(rest, output <> nested_output)\n      {:char, char} -> render(rest, output <> <<char>>)\n    end\n  end\n\n  # Render the list of `expression()`s inside a `{:reversed, ast()}` node\n  @spec render_reversed(ast(), String.t()) :: String.t()\n  defp render_reversed(ast, output \\\\ \"(\")\n\n  defp render_reversed([], output), do: output <> \")\"\n\n  defp render_reversed([node | rest], output) do\n    case node do\n      {:reversed, ast} ->\n        nested_output = render(ast, \"(\") <> \")\"\n        render_reversed(rest, output <> nested_output)\n      {:char, char} -> render_reversed(rest, output <> <<char>>)\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e18743cd3346f003228b604":[{"id":79740,"user_id":53,"body":"defmodule Kata do\n  def nines(9), do: 1\n  def nines(n) when n<10, do: 0\n  def nines(n) do\n    d = n |> Integer.digits |> length\n    b = pow(10,d-1)\n    a = div(n,b)\n    a*k(d-1) + (if a==9, do: n-a*b+1, else: nines(rem(n,b)))\n  end\n  defp pow(_,0), do: 1\n  defp pow(b,e), do: b*pow(b,e-1)\n  defp k(d) when d<=1, do: d\n  defp k(d), do: 9*k(d-1)+pow(10,d-1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79741,"user_id":null,"body":"defmodule Kata do\n  def nines(n) do\n    n -\n      String.to_integer(\n        Regex.replace(~r\/9.*$\/, \"#{n}\", &String.duplicate(\"8\", String.length(&1))),\n        9\n      )\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79742,"user_id":null,"body":"defmodule Kata do\n  defp pow(b,e,p \\\\ 1)\n  defp pow(_b,e,p) when e <= 0, do: p\n  defp pow(b,e,p), do: pow(b,e-1,p*b)\n\n  defp helper([], _n), do: 0\n  defp helper([d | r], n), do:\n    d * (pow(10,n) - pow(9,n)) + (if d == 9, do: Integer.undigits(r) + 1, else: helper(r,n-1))\n  \n  def nines(n) do\n    ds = Integer.digits n\n    helper ds, length(ds) - 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79743,"user_id":null,"body":"defmodule Kata do\n  def nines(n) when is_integer(n), do: nines(Integer.digits(n))\n  def nines([9]), do: 1\n  def nines([_]), do: 0\n\n  def nines([head | tail]) when head == 9 do\n    head_by_nines(head, tail) + Integer.undigits(tail)+1\n  end\n\n  def nines([head | tail]) do\n    head_by_nines(head, tail) + nines(tail)\n  end\n\n  defp head_by_nines(head, tail), do: head * nines( Enum.map(tail, fn _ -> 9 end ))\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79744,"user_id":null,"body":"defmodule Kata do\n  def nines(n) when is_integer(n), do: nines(Integer.digits(n))\n  def nines([9]), do: 1\n  def nines([_]), do: 0\n\n  def nines([head | tail]) do\n    head * nines( Enum.map(tail, fn _ -> 9 end ))+ (\n      if head == 9 do\n        Integer.undigits(tail)+1\n      else\n        nines(tail)\n      end\n    )\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79745,"user_id":470,"body":"defmodule Kata do\n\tdef nines(n) do\n\t\tr = Integer.digits(n)\n\t\tzq = Enum.find_index(r,&(&1==9))\n\t\t{r2,r3} = if is_nil(zq),do: {r,[]},else: Enum.split(r,zq+1)\n\t\tix = forge(length(r),1,0) |> Enum.reverse\n\t\t(Stream.zip(ix,r2) |> Stream.map(fn {n1,n2} -> n1*n2 end) |> Enum.sum) + Integer.undigits(r3) + (if is_nil(zq),do: 0,else: 1)\n\tend\n\t\n\tdefp forge(0,_,_),do: []\n\tdefp forge(n,p10,q),do: [q | forge(n-1,p10*10,q*9+p10)]\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e4a1a43698ef0002d2a1f73":[{"id":79746,"user_id":null,"body":"defmodule Kata do\n  def next(n), do: gen_poly(n, [0], 1)\n\n  defp gen_poly(n, pd, i) do\n    pd2 =\n      Enum.flat_map(pd, fn p ->\n        Enum.map(0..9, fn d -> p * 10 + d end)\n        |> Enum.filter(fn p2 -> rem(p2, i) == 0 end)\n      end)\n\n    res = Enum.find(pd2, fn x -> x > n end)\n\n    cond do\n      res ->\n        res\n\n      pd2 == [] ->\n        nil\n\n      true ->\n        [h | pd3] = pd2\n        gen_poly(n, if(h == 0, do: pd3, else: pd2), i + 1)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79747,"user_id":527,"body":"defmodule Kata do\n  @polydivisible_numbers [0,1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,102,105,108,120,123,126,129,141,144,147,162,165,168,180,183,186,189,201,204,207,222,225,228,240,243,246,249,261,264,267,282,285,288,300,303,306,309,321,324,327,342,345,348,360,363,366,369,381,384,387,402,405,408,420,423,426,429,441,444,447,462,465,468,480,483,486,489,501,504,507,522,525,528,540,543,546,549,561,564,567,582,585,588,600,603,606,609,621,624,627,642,645,648,660,663,666,669,681,684,687,702,705,708,720,723,726,729,741,744,747,762,765,768,780,783,786,789,801,804,807,822,825,828,840,843,846,849,861,864,867,882,885,888,900,903,906,909,921,924,927,942,945,948,960,963,966,969,981,984,987,1020,1024,1028,1052,1056,1080,1084,1088,1200,1204,1208,1232,1236,1260,1264,1268,1292,1296,1412,1416,1440,1444,1448,1472,1476,1620,1624,1628,1652,1656,1680,1684,1688,1800,1804,1808,1832,1836,1860,1864,1868,1892,1896,2012,2016,2040,2044,2048,2072,2076,2220,2224,2228,2252,2256,2280,2284,2288,2400,2404,2408,2432,2436,2460,2464,2468,2492,2496,2612,2616,2640,2644,2648,2672,2676,2820,2824,2828,2852,2856,2880,2884,2888,3000,3004,3008,3032,3036,3060,3064,3068,3092,3096,3212,3216,3240,3244,3248,3272,3276,3420,3424,3428,3452,3456,3480,3484,3488,3600,3604,3608,3632,3636,3660,3664,3668,3692,3696,3812,3816,3840,3844,3848,3872,3876,4020,4024,4028,4052,4056,4080,4084,4088,4200,4204,4208,4232,4236,4260,4264,4268,4292,4296,4412,4416,4440,4444,4448,4472,4476,4620,4624,4628,4652,4656,4680,4684,4688,4800,4804,4808,4832,4836,4860,4864,4868,4892,4896,5012,5016,5040,5044,5048,5072,5076,5220,5224,5228,5252,5256,5280,5284,5288,5400,5404,5408,5432,5436,5460,5464,5468,5492,5496,5612,5616,5640,5644,5648,5672,5676,5820,5824,5828,5852,5856,5880,5884,5888,6000,6004,6008,6032,6036,6060,6064,6068,6092,6096,6212,6216,6240,6244,6248,6272,6276,6420,6424,6428,6452,6456,6480,6484,6488,6600,6604,6608,6632,6636,6660,6664,6668,6692,6696,6812,6816,6840,6844,6848,6872,6876,7020,7024,7028,7052,7056,7080,7084,7088,7200,7204,7208,7232,7236,7260,7264,7268,7292,7296,7412,7416,7440,7444,7448,7472,7476,7620,7624,7628,7652,7656,7680,7684,7688,7800,7804,7808,7832,7836,7860,7864,7868,7892,7896,8012,8016,8040,8044,8048,8072,8076,8220,8224,8228,8252,8256,8280,8284,8288,8400,8404,8408,8432,8436,8460,8464,8468,8492,8496,8612,8616,8640,8644,8648,8672,8676,8820,8824,8828,8852,8856,8880,8884,8888,9000,9004,9008,9032,9036,9060,9064,9068,9092,9096,9212,9216,9240,9244,9248,9272,9276,9420,9424,9428,9452,9456,9480,9484,9488,9600,9604,9608,9632,9636,9660,9664,9668,9692,9696,9812,9816,9840,9844,9848,9872,9876,10200,10205,10240,10245,10280,10285,10520,10525,10560,10565,10800,10805,10840,10845,10880,10885,12000,12005,12040,12045,12080,12085,12320,12325,12360,12365,12600,12605,12640,12645,12680,12685,12920,12925,12960,12965,14120,14125,14160,14165,14400,14405,14440,14445,14480,14485,14720,14725,14760,14765,16200,16205,16240,16245,16280,16285,16520,16525,16560,16565,16800,16805,16840,16845,16880,16885,18000,18005,18040,18045,18080,18085,18320,18325,18360,18365,18600,18605,18640,18645,18680,18685,18920,18925,18960,18965,20120,20125,20160,20165,20400,20405,20440,20445,20480,20485,20720,20725,20760,20765,22200,22205,22240,22245,22280,22285,22520,22525,22560,22565,22800,22805,22840,22845,22880,22885,24000,24005,24040,24045,24080,24085,24320,24325,24360,24365,24600,24605,24640,24645,24680,24685,24920,24925,24960,24965,26120,26125,26160,26165,26400,26405,26440,26445,26480,26485,26720,26725,26760,26765,28200,28205,28240,28245,28280,28285,28520,28525,28560,28565,28800,28805,28840,28845,28880,28885,30000,30005,30040,30045,30080,30085,30320,30325,30360,30365,30600,30605,30640,30645,30680,30685,30920,30925,30960,30965,32120,32125,32160,32165,32400,32405,32440,32445,32480,32485,32720,32725,32760,32765,34200,34205,34240,34245,34280,34285,34520,34525,34560,34565,34800,34805,34840,34845,34880,34885,36000,36005,36040,36045,36080,36085,36320,36325,36360,36365,36600,36605,36640,36645,36680,36685,36920,36925,36960,36965,38120,38125,38160,38165,38400,38405,38440,38445,38480,38485,38720,38725,38760,38765,40200,40205,40240,40245,40280,40285,40520,40525,40560,40565,40800,40805,40840,40845,40880,40885,42000,42005,42040,42045,42080,42085,42320,42325,42360,42365,42600,42605,42640,42645,42680,42685,42920,42925,42960,42965,44120,44125,44160,44165,44400,44405,44440,44445,44480,44485,44720,44725,44760,44765,46200,46205,46240,46245,46280,46285,46520,46525,46560,46565,46800,46805,46840,46845,46880,46885,48000,48005,48040,48045,48080,48085,48320,48325,48360,48365,48600,48605,48640,48645,48680,48685,48920,48925,48960,48965,50120,50125,50160,50165,50400,50405,50440,50445,50480,50485,50720,50725,50760,50765,52200,52205,52240,52245,52280,52285,52520,52525,52560,52565,52800,52805,52840,52845,52880,52885,54000,54005,54040,54045,54080,54085,54320,54325,54360,54365,54600,54605,54640,54645,54680,54685,54920,54925,54960,54965,56120,56125,56160,56165,56400,56405,56440,56445,56480,56485,56720,56725,56760,56765,58200,58205,58240,58245,58280,58285,58520,58525,58560,58565,58800,58805,58840,58845,58880,58885,60000,60005,60040,60045,60080,60085,60320,60325,60360,60365,60600,60605,60640,60645,60680,60685,60920,60925,60960,60965,62120,62125,62160,62165,62400,62405,62440,62445,62480,62485,62720,62725,62760,62765,64200,64205,64240,64245,64280,64285,64520,64525,64560,64565,64800,64805,64840,64845,64880,64885,66000,66005,66040,66045,66080,66085,66320,66325,66360,66365,66600,66605,66640,66645,66680,66685,66920,66925,66960,66965,68120,68125,68160,68165,68400,68405,68440,68445,68480,68485,68720,68725,68760,68765,70200,70205,70240,70245,70280,70285,70520,70525,70560,70565,70800,70805,70840,70845,70880,70885,72000,72005,72040,72045,72080,72085,72320,72325,72360,72365,72600,72605,72640,72645,72680,72685,72920,72925,72960,72965,74120,74125,74160,74165,74400,74405,74440,74445,74480,74485,74720,74725,74760,74765,76200,76205,76240,76245,76280,76285,76520,76525,76560,76565,76800,76805,76840,76845,76880,76885,78000,78005,78040,78045,78080,78085,78320,78325,78360,78365,78600,78605,78640,78645,78680,78685,78920,78925,78960,78965,80120,80125,80160,80165,80400,80405,80440,80445,80480,80485,80720,80725,80760,80765,82200,82205,82240,82245,82280,82285,82520,82525,82560,82565,82800,82805,82840,82845,82880,82885,84000,84005,84040,84045,84080,84085,84320,84325,84360,84365,84600,84605,84640,84645,84680,84685,84920,84925,84960,84965,86120,86125,86160,86165,86400,86405,86440,86445,86480,86485,86720,86725,86760,86765,88200,88205,88240,88245,88280,88285,88520,88525,88560,88565,88800,88805,88840,88845,88880,88885,90000,90005,90040,90045,90080,90085,90320,90325,90360,90365,90600,90605,90640,90645,90680,90685,90920,90925,90960,90965,92120,92125,92160,92165,92400,92405,92440,92445,92480,92485,92720,92725,92760,92765,94200,94205,94240,94245,94280,94285,94520,94525,94560,94565,94800,94805,94840,94845,94880,94885,96000,96005,96040,96045,96080,96085,96320,96325,96360,96365,96600,96605,96640,96645,96680,96685,96920,96925,96960,96965,98120,98125,98160,98165,98400,98405,98440,98445,98480,98485,98720,98725,98760,98765,102000,102006,102054,102402,102408,102450,102456,102804,102852,102858,105204,105252,105258,105600,105606,105654,108000,108006,108054,108402,108408,108450,108456,108804,108852,108858,120000,120006,120054,120402,120408,120450,120456,120804,120852,120858,123204,123252,123258,123600,123606,123654,126000,126006,126054,126402,126408,126450,126456,126804,126852,126858,129204,129252,129258,129600,129606,129654,141204,141252,141258,141600,141606,141654,144000,144006,144054,144402,144408,144450,144456,144804,144852,144858,147204,147252,147258,147600,147606,147654,162000,162006,162054,162402,162408,162450,162456,162804,162852,162858,165204,165252,165258,165600,165606,165654,168000,168006,168054,168402,168408,168450,168456,168804,168852,168858,180000,180006,180054,180402,180408,180450,180456,180804,180852,180858,183204,183252,183258,183600,183606,183654,186000,186006,186054,186402,186408,186450,186456,186804,186852,186858,189204,189252,189258,189600,189606,189654,201204,201252,201258,201600,201606,201654,204000,204006,204054,204402,204408,204450,204456,204804,204852,204858,207204,207252,207258,207600,207606,207654,222000,222006,222054,222402,222408,222450,222456,222804,222852,222858,225204,225252,225258,225600,225606,225654,228000,228006,228054,228402,228408,228450,228456,228804,228852,228858,240000,240006,240054,240402,240408,240450,240456,240804,240852,240858,243204,243252,243258,243600,243606,243654,246000,246006,246054,246402,246408,246450,246456,246804,246852,246858,249204,249252,249258,249600,249606,249654,261204,261252,261258,261600,261606,261654,264000,264006,264054,264402,264408,264450,264456,264804,264852,264858,267204,267252,267258,267600,267606,267654,282000,282006,282054,282402,282408,282450,282456,282804,282852,282858,285204,285252,285258,285600,285606,285654,288000,288006,288054,288402,288408,288450,288456,288804,288852,288858,300000,300006,300054,300402,300408,300450,300456,300804,300852,300858,303204,303252,303258,303600,303606,303654,306000,306006,306054,306402,306408,306450,306456,306804,306852,306858,309204,309252,309258,309600,309606,309654,321204,321252,321258,321600,321606,321654,324000,324006,324054,324402,324408,324450,324456,324804,324852,324858,327204,327252,327258,327600,327606,327654,342000,342006,342054,342402,342408,342450,342456,342804,342852,342858,345204,345252,345258,345600,345606,345654,348000,348006,348054,348402,348408,348450,348456,348804,348852,348858,360000,360006,360054,360402,360408,360450,360456,360804,360852,360858,363204,363252,363258,363600,363606,363654,366000,366006,366054,366402,366408,366450,366456,366804,366852,366858,369204,369252,369258,369600,369606,369654,381204,381252,381258,381600,381606,381654,384000,384006,384054,384402,384408,384450,384456,384804,384852,384858,387204,387252,387258,387600,387606,387654,402000,402006,402054,402402,402408,402450,402456,402804,402852,402858,405204,405252,405258,405600,405606,405654,408000,408006,408054,408402,408408,408450,408456,408804,408852,408858,420000,420006,420054,420402,420408,420450,420456,420804,420852,420858,423204,423252,423258,423600,423606,423654,426000,426006,426054,426402,426408,426450,426456,426804,426852,426858,429204,429252,429258,429600,429606,429654,441204,441252,441258,441600,441606,441654,444000,444006,444054,444402,444408,444450,444456,444804,444852,444858,447204,447252,447258,447600,447606,447654,462000,462006,462054,462402,462408,462450,462456,462804,462852,462858,465204,465252,465258,465600,465606,465654,468000,468006,468054,468402,468408,468450,468456,468804,468852,468858,480000,480006,480054,480402,480408,480450,480456,480804,480852,480858,483204,483252,483258,483600,483606,483654,486000,486006,486054,486402,486408,486450,486456,486804,486852,486858,489204,489252,489258,489600,489606,489654,501204,501252,501258,501600,501606,501654,504000,504006,504054,504402,504408,504450,504456,504804,504852,504858,507204,507252,507258,507600,507606,507654,522000,522006,522054,522402,522408,522450,522456,522804,522852,522858,525204,525252,525258,525600,525606,525654,528000,528006,528054,528402,528408,528450,528456,528804,528852,528858,540000,540006,540054,540402,540408,540450,540456,540804,540852,540858,543204,543252,543258,543600,543606,543654,546000,546006,546054,546402,546408,546450,546456,546804,546852,546858,549204,549252,549258,549600,549606,549654,561204,561252,561258,561600,561606,561654,564000,564006,564054,564402,564408,564450,564456,564804,564852,564858,567204,567252,567258,567600,567606,567654,582000,582006,582054,582402,582408,582450,582456,582804,582852,582858,585204,585252,585258,585600,585606,585654,588000,588006,588054,588402,588408,588450,588456,588804,588852,588858,600000,600006,600054,600402,600408,600450,600456,600804,600852,600858,603204,603252,603258,603600,603606,603654,606000,606006,606054,606402,606408,606450,606456,606804,606852,606858,609204,609252,609258,609600,609606,609654,621204,621252,621258,621600,621606,621654,624000,624006,624054,624402,624408,624450,624456,624804,624852,624858,627204,627252,627258,627600,627606,627654,642000,642006,642054,642402,642408,642450,642456,642804,642852,642858,645204,645252,645258,645600,645606,645654,648000,648006,648054,648402,648408,648450,648456,648804,648852,648858,660000,660006,660054,660402,660408,660450,660456,660804,660852,660858,663204,663252,663258,663600,663606,663654,666000,666006,666054,666402,666408,666450,666456,666804,666852,666858,669204,669252,669258,669600,669606,669654,681204,681252,681258,681600,681606,681654,684000,684006,684054,684402,684408,684450,684456,684804,684852,684858,687204,687252,687258,687600,687606,687654,702000,702006,702054,702402,702408,702450,702456,702804,702852,702858,705204,705252,705258,705600,705606,705654,708000,708006,708054,708402,708408,708450,708456,708804,708852,708858,720000,720006,720054,720402,720408,720450,720456,720804,720852,720858,723204,723252,723258,723600,723606,723654,726000,726006,726054,726402,726408,726450,726456,726804,726852,726858,729204,729252,729258,729600,729606,729654,741204,741252,741258,741600,741606,741654,744000,744006,744054,744402,744408,744450,744456,744804,744852,744858,747204,747252,747258,747600,747606,747654,762000,762006,762054,762402,762408,762450,762456,762804,762852,762858,765204,765252,765258,765600,765606,765654,768000,768006,768054,768402,768408,768450,768456,768804,768852,768858,780000,780006,780054,780402,780408,780450,780456,780804,780852,780858,783204,783252,783258,783600,783606,783654,786000,786006,786054,786402,786408,786450,786456,786804,786852,786858,789204,789252,789258,789600,789606,789654,801204,801252,801258,801600,801606,801654,804000,804006,804054,804402,804408,804450,804456,804804,804852,804858,807204,807252,807258,807600,807606,807654,822000,822006,822054,822402,822408,822450,822456,822804,822852,822858,825204,825252,825258,825600,825606,825654,828000,828006,828054,828402,828408,828450,828456,828804,828852,828858,840000,840006,840054,840402,840408,840450,840456,840804,840852,840858,843204,843252,843258,843600,843606,843654,846000,846006,846054,846402,846408,846450,846456,846804,846852,846858,849204,849252,849258,849600,849606,849654,861204,861252,861258,861600,861606,861654,864000,864006,864054,864402,864408,864450,864456,864804,864852,864858,867204,867252,867258,867600,867606,867654,882000,882006,882054,882402,882408,882450,882456,882804,882852,882858,885204,885252,885258,885600,885606,885654,888000,888006,888054,888402,888408,888450,888456,888804,888852,888858,900000,900006,900054,900402,900408,900450,900456,900804,900852,900858,903204,903252,903258,903600,903606,903654,906000,906006,906054,906402,906408,906450,906456,906804,906852,906858,909204,909252,909258,909600,909606,909654,921204,921252,921258,921600,921606,921654,924000,924006,924054,924402,924408,924450,924456,924804,924852,924858,927204,927252,927258,927600,927606,927654,942000,942006,942054,942402,942408,942450,942456,942804,942852,942858,945204,945252,945258,945600,945606,945654,948000,948006,948054,948402,948408,948450,948456,948804,948852,948858,960000,960006,960054,960402,960408,960450,960456,960804,960852,960858,963204,963252,963258,963600,963606,963654,966000,966006,966054,966402,966408,966450,966456,966804,966852,966858,969204,969252,969258,969600,969606,969654,981204,981252,981258,981600,981606,981654,984000,984006,984054,984402,984408,984450,984456,984804,984852,984858,987204,987252,987258,987600,987606,987654,1020005,1020061,1020068,1020544,1024023,1024086,1024506,1024562,1024569,1028041,1028048,1028524,1028580,1028587,1052044,1052520,1052527,1052583,1056006,1056062,1056069,1056545,1080002,1080009,1080065,1080541,1080548,1084020,1084027,1084083,1084503,1084566,1088045,1088521,1088528,1088584,1200003,1200066,1200542,1200549,1204021,1204028,1204084,1204504,1204560,1204567,1208046,1208522,1208529,1208585,1232042,1232049,1232525,1232581,1232588,1236004,1236060,1236067,1236543,1260000,1260007,1260063,1260546,1264025,1264081,1264088,1264501,1264508,1264564,1268043,1268526,1268582,1268589,1292046,1292522,1292529,1292585,1296001,1296008,1296064,1296540,1296547,1412040,1412047,1412523,1412586,1416002,1416009,1416065,1416541,1416548,1440005,1440061,1440068,1440544,1444023,1444086,1444506,1444562,1444569,1448041,1448048,1448524,1448580,1448587,1472044,1472520,1472527,1472583,1476006,1476062,1476069,1476545,1620003,1620066,1620542,1620549,1624021,1624028,1624084,1624504,1624560,1624567,1628046,1628522,1628529,1628585,1652042,1652049,1652525,1652581,1652588,1656004,1656060,1656067,1656543,1680000,1680007,1680063,1680546,1684025,1684081,1684088,1684501,1684508,1684564,1688043,1688526,1688582,1688589,1800001,1800008,1800064,1800540,1800547,1804026,1804082,1804089,1804502,1804509,1804565,1808044,1808520,1808527,1808583,1832040,1832047,1832523,1832586,1836002,1836009,1836065,1836541,1836548,1860005,1860061,1860068,1860544,1864023,1864086,1864506,1864562,1864569,1868041,1868048,1868524,1868580,1868587,1892044,1892520,1892527,1892583,1896006,1896062,1896069,1896545,2012045,2012521,2012528,2012584,2016000,2016007,2016063,2016546,2040003,2040066,2040542,2040549,2044021,2044028,2044084,2044504,2044560,2044567,2048046,2048522,2048529,2048585,2072042,2072049,2072525,2072581,2072588,2076004,2076060,2076067,2076543,2220001,2220008,2220064,2220540,2220547,2224026,2224082,2224089,2224502,2224509,2224565,2228044,2228520,2228527,2228583,2252040,2252047,2252523,2252586,2256002,2256009,2256065,2256541,2256548,2280005,2280061,2280068,2280544,2284023,2284086,2284506,2284562,2284569,2288041,2288048,2288524,2288580,2288587,2400006,2400062,2400069,2400545,2404024,2404080,2404087,2404500,2404507,2404563,2408042,2408049,2408525,2408581,2408588,2432045,2432521,2432528,2432584,2436000,2436007,2436063,2436546,2460003,2460066,2460542,2460549,2464021,2464028,2464084,2464504,2464560,2464567,2468046,2468522,2468529,2468585,2492042,2492049,2492525,2492581,2492588,2496004,2496060,2496067,2496543,2612043,2612526,2612582,2612589,2616005,2616061,2616068,2616544,2640001,2640008,2640064,2640540,2640547,2644026,2644082,2644089,2644502,2644509,2644565,2648044,2648520,2648527,2648583,2672040,2672047,2672523,2672586,2676002,2676009,2676065,2676541,2676548,2820006,2820062,2820069,2820545,2824024,2824080,2824087,2824500,2824507,2824563,2828042,2828049,2828525,2828581,2828588,2852045,2852521,2852528,2852584,2856000,2856007,2856063,2856546,2880003,2880066,2880542,2880549,2884021,2884028,2884084,2884504,2884560,2884567,2888046,2888522,2888529,2888585,3000004,3000060,3000067,3000543,3004022,3004029,3004085,3004505,3004561,3004568,3008040,3008047,3008523,3008586,3032043,3032526,3032582,3032589,3036005,3036061,3036068,3036544,3060001,3060008,3060064,3060540,3060547,3064026,3064082,3064089,3064502,3064509,3064565,3068044,3068520,3068527,3068583,3092040,3092047,3092523,3092586,3096002,3096009,3096065,3096541,3096548,3212041,3212048,3212524,3212580,3212587,3216003,3216066,3216542,3216549,3240006,3240062,3240069,3240545,3244024,3244080,3244087,3244500,3244507,3244563,3248042,3248049,3248525,3248581,3248588,3272045,3272521,3272528,3272584,3276000,3276007,3276063,3276546,3420004,3420060,3420067,3420543,3424022,3424029,3424085,3424505,3424561,3424568,3428040,3428047,3428523,3428586,3452043,3452526,3452582,3452589,3456005,3456061,3456068,3456544,3480001,3480008,3480064,3480540,3480547,3484026,3484082,3484089,3484502,3484509,3484565,3488044,3488520,3488527,3488583,3600002,3600009,3600065,3600541,3600548,3604020,3604027,3604083,3604503,3604566,3608045,3608521,3608528,3608584,3632041,3632048,3632524,3632580,3632587,3636003,3636066,3636542,3636549,3660006,3660062,3660069,3660545,3664024,3664080,3664087,3664500,3664507,3664563,3668042,3668049,3668525,3668581,3668588,3692045,3692521,3692528,3692584,3696000,3696007,3696063,3696546,3812046,3812522,3812529,3812585,3816001,3816008,3816064,3816540,3816547,3840004,3840060,3840067,3840543,3844022,3844029,3844085,3844505,3844561,3844568,3848040,3848047,3848523,3848586,3872043,3872526,3872582,3872589,3876005,3876061,3876068,3876544,4020002,4020009,4020065,4020541,4020548,4024020,4024027,4024083,4024503,4024566,4028045,4028521,4028528,4028584,4052041,4052048,4052524,4052580,4052587,4056003,4056066,4056542,4056549,4080006,4080062,4080069,4080545,4084024,4084080,4084087,4084500,4084507,4084563,4088042,4088049,4088525,4088581,4088588,4200000,4200007,4200063,4200546,4204025,4204081,4204088,4204501,4204508,4204564,4208043,4208526,4208582,4208589,4232046,4232522,4232529,4232585,4236001,4236008,4236064,4236540,4236547,4260004,4260060,4260067,4260543,4264022,4264029,4264085,4264505,4264561,4264568,4268040,4268047,4268523,4268586,4292043,4292526,4292582,4292589,4296005,4296061,4296068,4296544,4412044,4412520,4412527,4412583,4416006,4416062,4416069,4416545,4440002,4440009,4440065,4440541,4440548,4444020,4444027,4444083,4444503,4444566,4448045,4448521,4448528,4448584,4472041,4472048,4472524,4472580,4472587,4476003,4476066,4476542,4476549,4620000,4620007,4620063,4620546,4624025,4624081,4624088,4624501,4624508,4624564,4628043,4628526,4628582,4628589,4652046,4652522,4652529,4652585,4656001,4656008,4656064,4656540,4656547,4680004,4680060,4680067,4680543,4684022,4684029,4684085,4684505,4684561,4684568,4688040,4688047,4688523,4688586,4800005,4800061,4800068,4800544,4804023,4804086,4804506,4804562,4804569,4808041,4808048,4808524,4808580,4808587,4832044,4832520,4832527,4832583,4836006,4836062,4836069,4836545,4860002,4860009,4860065,4860541,4860548,4864020,4864027,4864083,4864503,4864566,4868045,4868521,4868528,4868584,4892041,4892048,4892524,4892580,4892587,4896003,4896066,4896542,4896549,5012042,5012049,5012525,5012581,5012588,5016004,5016060,5016067,5016543,5040000,5040007,5040063,5040546,5044025,5044081,5044088,5044501,5044508,5044564,5048043,5048526,5048582,5048589,5072046,5072522,5072529,5072585,5076001,5076008,5076064,5076540,5076547,5220005,5220061,5220068,5220544,5224023,5224086,5224506,5224562,5224569,5228041,5228048,5228524,5228580,5228587,5252044,5252520,5252527,5252583,5256006,5256062,5256069,5256545,5280002,5280009,5280065,5280541,5280548,5284020,5284027,5284083,5284503,5284566,5288045,5288521,5288528,5288584,5400003,5400066,5400542,5400549,5404021,5404028,5404084,5404504,5404560,5404567,5408046,5408522,5408529,5408585,5432042,5432049,5432525,5432581,5432588,5436004,5436060,5436067,5436543,5460000,5460007,5460063,5460546,5464025,5464081,5464088,5464501,5464508,5464564,5468043,5468526,5468582,5468589,5492046,5492522,5492529,5492585,5496001,5496008,5496064,5496540,5496547,5612040,5612047,5612523,5612586,5616002,5616009,5616065,5616541,5616548,5640005,5640061,5640068,5640544,5644023,5644086,5644506,5644562,5644569,5648041,5648048,5648524,5648580,5648587,5672044,5672520,5672527,5672583,5676006,5676062,5676069,5676545,5820003,5820066,5820542,5820549,5824021,5824028,5824084,5824504,5824560,5824567,5828046,5828522,5828529,5828585,5852042,5852049,5852525,5852581,5852588,5856004,5856060,5856067,5856543,5880000,5880007,5880063,5880546,5884025,5884081,5884088,5884501,5884508,5884564,5888043,5888526,5888582,5888589,6000001,6000008,6000064,6000540,6000547,6004026,6004082,6004089,6004502,6004509,6004565,6008044,6008520,6008527,6008583,6032040,6032047,6032523,6032586,6036002,6036009,6036065,6036541,6036548,6060005,6060061,6060068,6060544,6064023,6064086,6064506,6064562,6064569,6068041,6068048,6068524,6068580,6068587,6092044,6092520,6092527,6092583,6096006,6096062,6096069,6096545,6212045,6212521,6212528,6212584,6216000,6216007,6216063,6216546,6240003,6240066,6240542,6240549,6244021,6244028,6244084,6244504,6244560,6244567,6248046,6248522,6248529,6248585,6272042,6272049,6272525,6272581,6272588,6276004,6276060,6276067,6276543,6420001,6420008,6420064,6420540,6420547,6424026,6424082,6424089,6424502,6424509,6424565,6428044,6428520,6428527,6428583,6452040,6452047,6452523,6452586,6456002,6456009,6456065,6456541,6456548,6480005,6480061,6480068,6480544,6484023,6484086,6484506,6484562,6484569,6488041,6488048,6488524,6488580,6488587,6600006,6600062,6600069,6600545,6604024,6604080,6604087,6604500,6604507,6604563,6608042,6608049,6608525,6608581,6608588,6632045,6632521,6632528,6632584,6636000,6636007,6636063,6636546,6660003,6660066,6660542,6660549,6664021,6664028,6664084,6664504,6664560,6664567,6668046,6668522,6668529,6668585,6692042,6692049,6692525,6692581,6692588,6696004,6696060,6696067,6696543,6812043,6812526,6812582,6812589,6816005,6816061,6816068,6816544,6840001,6840008,6840064,6840540,6840547,6844026,6844082,6844089,6844502,6844509,6844565,6848044,6848520,6848527,6848583,6872040,6872047,6872523,6872586,6876002,6876009,6876065,6876541,6876548,7020006,7020062,7020069,7020545,7024024,7024080,7024087,7024500,7024507,7024563,7028042,7028049,7028525,7028581,7028588,7052045,7052521,7052528,7052584,7056000,7056007,7056063,7056546,7080003,7080066,7080542,7080549,7084021,7084028,7084084,7084504,7084560,7084567,7088046,7088522,7088529,7088585,7200004,7200060,7200067,7200543,7204022,7204029,7204085,7204505,7204561,7204568,7208040,7208047,7208523,7208586,7232043,7232526,7232582,7232589,7236005,7236061,7236068,7236544,7260001,7260008,7260064,7260540,7260547,7264026,7264082,7264089,7264502,7264509,7264565,7268044,7268520,7268527,7268583,7292040,7292047,7292523,7292586,7296002,7296009,7296065,7296541,7296548,7412041,7412048,7412524,7412580,7412587,7416003,7416066,7416542,7416549,7440006,7440062,7440069,7440545,7444024,7444080,7444087,7444500,7444507,7444563,7448042,7448049,7448525,7448581,7448588,7472045,7472521,7472528,7472584,7476000,7476007,7476063,7476546,7620004,7620060,7620067,7620543,7624022,7624029,7624085,7624505,7624561,7624568,7628040,7628047,7628523,7628586,7652043,7652526,7652582,7652589,7656005,7656061,7656068,7656544,7680001,7680008,7680064,7680540,7680547,7684026,7684082,7684089,7684502,7684509,7684565,7688044,7688520,7688527,7688583,7800002,7800009,7800065,7800541,7800548,7804020,7804027,7804083,7804503,7804566,7808045,7808521,7808528,7808584,7832041,7832048,7832524,7832580,7832587,7836003,7836066,7836542,7836549,7860006,7860062,7860069,7860545,7864024,7864080,7864087,7864500,7864507,7864563,7868042,7868049,7868525,7868581,7868588,7892045,7892521,7892528,7892584,7896000,7896007,7896063,7896546,8012046,8012522,8012529,8012585,8016001,8016008,8016064,8016540,8016547,8040004,8040060,8040067,8040543,8044022,8044029,8044085,8044505,8044561,8044568,8048040,8048047,8048523,8048586,8072043,8072526,8072582,8072589,8076005,8076061,8076068,8076544,8220002,8220009,8220065,8220541,8220548,8224020,8224027,8224083,8224503,8224566,8228045,8228521,8228528,8228584,8252041,8252048,8252524,8252580,8252587,8256003,8256066,8256542,8256549,8280006,8280062,8280069,8280545,8284024,8284080,8284087,8284500,8284507,8284563,8288042,8288049,8288525,8288581,8288588,8400000,8400007,8400063,8400546,8404025,8404081,8404088,8404501,8404508,8404564,8408043,8408526,8408582,8408589,8432046,8432522,8432529,8432585,8436001,8436008,8436064,8436540,8436547,8460004,8460060,8460067,8460543,8464022,8464029,8464085,8464505,8464561,8464568,8468040,8468047,8468523,8468586,8492043,8492526,8492582,8492589,8496005,8496061,8496068,8496544,8612044,8612520,8612527,8612583,8616006,8616062,8616069,8616545,8640002,8640009,8640065,8640541,8640548,8644020,8644027,8644083,8644503,8644566,8648045,8648521,8648528,8648584,8672041,8672048,8672524,8672580,8672587,8676003,8676066,8676542,8676549,8820000,8820007,8820063,8820546,8824025,8824081,8824088,8824501,8824508,8824564,8828043,8828526,8828582,8828589,8852046,8852522,8852529,8852585,8856001,8856008,8856064,8856540,8856547,8880004,8880060,8880067,8880543,8884022,8884029,8884085,8884505,8884561,8884568,8888040,8888047,8888523,8888586,9000005,9000061,9000068,9000544,9004023,9004086,9004506,9004562,9004569,9008041,9008048,9008524,9008580,9008587,9032044,9032520,9032527,9032583,9036006,9036062,9036069,9036545,9060002,9060009,9060065,9060541,9060548,9064020,9064027,9064083,9064503,9064566,9068045,9068521,9068528,9068584,9092041,9092048,9092524,9092580,9092587,9096003,9096066,9096542,9096549,9212042,9212049,9212525,9212581,9212588,9216004,9216060,9216067,9216543,9240000,9240007,9240063,9240546,9244025,9244081,9244088,9244501,9244508,9244564,9248043,9248526,9248582,9248589,9272046,9272522,9272529,9272585,9276001,9276008,9276064,9276540,9276547,9420005,9420061,9420068,9420544,9424023,9424086,9424506,9424562,9424569,9428041,9428048,9428524,9428580,9428587,9452044,9452520,9452527,9452583,9456006,9456062,9456069,9456545,9480002,9480009,9480065,9480541,9480548,9484020,9484027,9484083,9484503,9484566,9488045,9488521,9488528,9488584,9600003,9600066,9600542,9600549,9604021,9604028,9604084,9604504,9604560,9604567,9608046,9608522,9608529,9608585,9632042,9632049,9632525,9632581,9632588,9636004,9636060,9636067,9636543,9660000,9660007,9660063,9660546,9664025,9664081,9664088,9664501,9664508,9664564,9668043,9668526,9668582,9668589,9692046,9692522,9692529,9692585,9696001,9696008,9696064,9696540,9696547,9812040,9812047,9812523,9812586,9816002,9816009,9816065,9816541,9816548,9840005,9840061,9840068,9840544,9844023,9844086,9844506,9844562,9844569,9848041,9848048,9848524,9848580,9848587,9872044,9872520,9872527,9872583,9876006,9876062,9876069,9876545,10200056,10200616,10200680,10200688,10205440,10205448,10240232,10240864,10245064,10245624,10245696,10280416,10280480,10280488,10285240,10285248,10285800,10285808,10285872,10520440,10520448,10525200,10525208,10525272,10525832,10560064,10560624,10560696,10565456,10800024,10800096,10800656,10805416,10805480,10805488,10840200,10840208,10840272,10840832,10845032,10845664,10880456,10885216,10885280,10885288,10885840,10885848,12000032,12000664,12005424,12005496,12040216,12040280,12040288,12040840,12040848,12045040,12045048,12045600,12045608,12045672,12080464,12085224,12085296,12085856,12320424,12320496,12325256,12325816,12325880,12325888,12360040,12360048,12360600,12360608,12360672,12365432,12600000,12600008,12600072,12600632,12605464,12640256,12640816,12640880,12640888,12645016,12645080,12645088,12645640,12645648,12680432,12685264,12685824,12685896,12920464,12925224,12925296,12925856,12960016,12960080,12960088,12960640,12960648,12965400,12965408,12965472,14120400,14120408,14120472,14125232,14125864,14160024,14160096,14160656,14165416,14165480,14165488,14400056,14400616,14400680,14400688,14405440,14405448,14440232,14440864,14445064,14445624,14445696,14480416,14480480,14480488,14485240,14485248,14485800,14485808,14485872,14720440,14720448,14725200,14725208,14725272,14725832,14760064,14760624,14760696,14765456,16200032,16200664,16205424,16205496,16240216,16240280,16240288,16240840,16240848,16245040,16245048,16245600,16245608,16245672,16280464,16285224,16285296,16285856,16520424,16520496,16525256,16525816,16525880,16525888,16560040,16560048,16560600,16560608,16560672,16565432,16800000,16800008,16800072,16800632,16805464,16840256,16840816,16840880,16840888,16845016,16845080,16845088,16845640,16845648,16880432,16885264,16885824,16885896,18000016,18000080,18000088,18000640,18000648,18005400,18005408,18005472,18040264,18040824,18040896,18045024,18045096,18045656,18080440,18080448,18085200,18085208,18085272,18085832,18320400,18320408,18320472,18325232,18325864,18360024,18360096,18360656,18365416,18365480,18365488,18600056,18600616,18600680,18600688,18605440,18605448,18640232,18640864,18645064,18645624,18645696,18680416,18680480,18680488,18685240,18685248,18685800,18685808,18685872,18920440,18920448,18925200,18925208,18925272,18925832,18960064,18960624,18960696,18965456,20120456,20125216,20125280,20125288,20125840,20125848,20160000,20160008,20160072,20160632,20165464,20400032,20400664,20405424,20405496,20440216,20440280,20440288,20440840,20440848,20445040,20445048,20445600,20445608,20445672,20480464,20485224,20485296,20485856,20720424,20720496,20725256,20725816,20725880,20725888,20760040,20760048,20760600,20760608,20760672,20765432,22200016,22200080,22200088,22200640,22200648,22205400,22205408,22205472,22240264,22240824,22240896,22245024,22245096,22245656,22280440,22280448,22285200,22285208,22285272,22285832,22520400,22520408,22520472,22525232,22525864,22560024,22560096,22560656,22565416,22565480,22565488,22800056,22800616,22800680,22800688,22805440,22805448,22840232,22840864,22845064,22845624,22845696,22880416,22880480,22880488,22885240,22885248,22885800,22885808,22885872,24000064,24000624,24000696,24005456,24040240,24040248,24040800,24040808,24040872,24045000,24045008,24045072,24045632,24080424,24080496,24085256,24085816,24085880,24085888,24320456,24325216,24325280,24325288,24325840,24325848,24360000,24360008,24360072,24360632,24365464,24600032,24600664,24605424,24605496,24640216,24640280,24640288,24640840,24640848,24645040,24645048,24645600,24645608,24645672,24680464,24685224,24685296,24685856,24920424,24920496,24925256,24925816,24925880,24925888,24960040,24960048,24960600,24960608,24960672,24965432,26120432,26125264,26125824,26125896,26160056,26160616,26160680,26160688,26165440,26165448,26400016,26400080,26400088,26400640,26400648,26405400,26405408,26405472,26440264,26440824,26440896,26445024,26445096,26445656,26480440,26480448,26485200,26485208,26485272,26485832,26720400,26720408,26720472,26725232,26725864,26760024,26760096,26760656,26765416,26765480,26765488,28200064,28200624,28200696,28205456,28240240,28240248,28240800,28240808,28240872,28245000,28245008,28245072,28245632,28280424,28280496,28285256,28285816,28285880,28285888,28520456,28525216,28525280,28525288,28525840,28525848,28560000,28560008,28560072,28560632,28565464,28800032,28800664,28805424,28805496,28840216,28840280,28840288,28840840,28840848,28845040,28845048,28845600,28845608,28845672,28880464,28885224,28885296,28885856,30000040,30000048,30000600,30000608,30000672,30005432,30040224,30040296,30040856,30045056,30045616,30045680,30045688,30080400,30080408,30080472,30085232,30085864,30320432,30325264,30325824,30325896,30360056,30360616,30360680,30360688,30365440,30365448,30600016,30600080,30600088,30600640,30600648,30605400,30605408,30605472,30640264,30640824,30640896,30645024,30645096,30645656,30680440,30680448,30685200,30685208,30685272,30685832,30920400,30920408,30920472,30925232,30925864,30960024,30960096,30960656,30965416,30965480,30965488,32120416,32120480,32120488,32125240,32125248,32125800,32125808,32125872,32160032,32160664,32165424,32165496,32400064,32400624,32400696,32405456,32440240,32440248,32440800,32440808,32440872,32445000,32445008,32445072,32445632,32480424,32480496,32485256,32485816,32485880,32485888,32720456,32725216,32725280,32725288,32725840,32725848,32760000,32760008,32760072,32760632,32765464,34200040,34200048,34200600,34200608,34200672,34205432,34240224,34240296,34240856,34245056,34245616,34245680,34245688,34280400,34280408,34280472,34285232,34285864,34520432,34525264,34525824,34525896,34560056,34560616,34560680,34560688,34565440,34565448,34800016,34800080,34800088,34800640,34800648,34805400,34805408,34805472,34840264,34840824,34840896,34845024,34845096,34845656,34880440,34880448,34885200,34885208,34885272,34885832,36000024,36000096,36000656,36005416,36005480,36005488,36040200,36040208,36040272,36040832,36045032,36045664,36080456,36085216,36085280,36085288,36085840,36085848,36320416,36320480,36320488,36325240,36325248,36325800,36325808,36325872,36360032,36360664,36365424,36365496,36600064,36600624,36600696,36605456,36640240,36640248,36640800,36640808,36640872,36645000,36645008,36645072,36645632,36680424,36680496,36685256,36685816,36685880,36685888,36920456,36925216,36925280,36925288,36925840,36925848,36960000,36960008,36960072,36960632,36965464,38120464,38125224,38125296,38125856,38160016,38160080,38160088,38160640,38160648,38165400,38165408,38165472,38400040,38400048,38400600,38400608,38400672,38405432,38440224,38440296,38440856,38445056,38445616,38445680,38445688,38480400,38480408,38480472,38485232,38485864,38720432,38725264,38725824,38725896,38760056,38760616,38760680,38760688,38765440,38765448,40200024,40200096,40200656,40205416,40205480,40205488,40240200,40240208,40240272,40240832,40245032,40245664,40280456,40285216,40285280,40285288,40285840,40285848,40520416,40520480,40520488,40525240,40525248,40525800,40525808,40525872,40560032,40560664,40565424,40565496,40800064,40800624,40800696,40805456,40840240,40840248,40840800,40840808,40840872,40845000,40845008,40845072,40845632,40880424,40880496,40885256,40885816,40885880,40885888,42000000,42000008,42000072,42000632,42005464,42040256,42040816,42040880,42040888,42045016,42045080,42045088,42045640,42045648,42080432,42085264,42085824,42085896,42320464,42325224,42325296,42325856,42360016,42360080,42360088,42360640,42360648,42365400,42365408,42365472,42600040,42600048,42600600,42600608,42600672,42605432,42640224,42640296,42640856,42645056,42645616,42645680,42645688,42680400,42680408,42680472,42685232,42685864,42920432,42925264,42925824,42925896,42960056,42960616,42960680,42960688,42965440,42965448,44120440,44120448,44125200,44125208,44125272,44125832,44160064,44160624,44160696,44165456,44400024,44400096,44400656,44405416,44405480,44405488,44440200,44440208,44440272,44440832,44445032,44445664,44480456,44485216,44485280,44485288,44485840,44485848,44720416,44720480,44720488,44725240,44725248,44725800,44725808,44725872,44760032,44760664,44765424,44765496,46200000,46200008,46200072,46200632,46205464,46240256,46240816,46240880,46240888,46245016,46245080,46245088,46245640,46245648,46280432,46285264,46285824,46285896,46520464,46525224,46525296,46525856,46560016,46560080,46560088,46560640,46560648,46565400,46565408,46565472,46800040,46800048,46800600,46800608,46800672,46805432,46840224,46840296,46840856,46845056,46845616,46845680,46845688,46880400,46880408,46880472,46885232,46885864,48000056,48000616,48000680,48000688,48005440,48005448,48040232,48040864,48045064,48045624,48045696,48080416,48080480,48080488,48085240,48085248,48085800,48085808,48085872,48320440,48320448,48325200,48325208,48325272,48325832,48360064,48360624,48360696,48365456,48600024,48600096,48600656,48605416,48605480,48605488,48640200,48640208,48640272,48640832,48645032,48645664,48680456,48685216,48685280,48685288,48685840,48685848,48920416,48920480,48920488,48925240,48925248,48925800,48925808,48925872,48960032,48960664,48965424,48965496,50120424,50120496,50125256,50125816,50125880,50125888,50160040,50160048,50160600,50160608,50160672,50165432,50400000,50400008,50400072,50400632,50405464,50440256,50440816,50440880,50440888,50445016,50445080,50445088,50445640,50445648,50480432,50485264,50485824,50485896,50720464,50725224,50725296,50725856,50760016,50760080,50760088,50760640,50760648,50765400,50765408,50765472,52200056,52200616,52200680,52200688,52205440,52205448,52240232,52240864,52245064,52245624,52245696,52280416,52280480,52280488,52285240,52285248,52285800,52285808,52285872,52520440,52520448,52525200,52525208,52525272,52525832,52560064,52560624,52560696,52565456,52800024,52800096,52800656,52805416,52805480,52805488,52840200,52840208,52840272,52840832,52845032,52845664,52880456,52885216,52885280,52885288,52885840,52885848,54000032,54000664,54005424,54005496,54040216,54040280,54040288,54040840,54040848,54045040,54045048,54045600,54045608,54045672,54080464,54085224,54085296,54085856,54320424,54320496,54325256,54325816,54325880,54325888,54360040,54360048,54360600,54360608,54360672,54365432,54600000,54600008,54600072,54600632,54605464,54640256,54640816,54640880,54640888,54645016,54645080,54645088,54645640,54645648,54680432,54685264,54685824,54685896,54920464,54925224,54925296,54925856,54960016,54960080,54960088,54960640,54960648,54965400,54965408,54965472,56120400,56120408,56120472,56125232,56125864,56160024,56160096,56160656,56165416,56165480,56165488,56400056,56400616,56400680,56400688,56405440,56405448,56440232,56440864,56445064,56445624,56445696,56480416,56480480,56480488,56485240,56485248,56485800,56485808,56485872,56720440,56720448,56725200,56725208,56725272,56725832,56760064,56760624,56760696,56765456,58200032,58200664,58205424,58205496,58240216,58240280,58240288,58240840,58240848,58245040,58245048,58245600,58245608,58245672,58280464,58285224,58285296,58285856,58520424,58520496,58525256,58525816,58525880,58525888,58560040,58560048,58560600,58560608,58560672,58565432,58800000,58800008,58800072,58800632,58805464,58840256,58840816,58840880,58840888,58845016,58845080,58845088,58845640,58845648,58880432,58885264,58885824,58885896,60000016,60000080,60000088,60000640,60000648,60005400,60005408,60005472,60040264,60040824,60040896,60045024,60045096,60045656,60080440,60080448,60085200,60085208,60085272,60085832,60320400,60320408,60320472,60325232,60325864,60360024,60360096,60360656,60365416,60365480,60365488,60600056,60600616,60600680,60600688,60605440,60605448,60640232,60640864,60645064,60645624,60645696,60680416,60680480,60680488,60685240,60685248,60685800,60685808,60685872,60920440,60920448,60925200,60925208,60925272,60925832,60960064,60960624,60960696,60965456,62120456,62125216,62125280,62125288,62125840,62125848,62160000,62160008,62160072,62160632,62165464,62400032,62400664,62405424,62405496,62440216,62440280,62440288,62440840,62440848,62445040,62445048,62445600,62445608,62445672,62480464,62485224,62485296,62485856,62720424,62720496,62725256,62725816,62725880,62725888,62760040,62760048,62760600,62760608,62760672,62765432,64200016,64200080,64200088,64200640,64200648,64205400,64205408,64205472,64240264,64240824,64240896,64245024,64245096,64245656,64280440,64280448,64285200,64285208,64285272,64285832,64520400,64520408,64520472,64525232,64525864,64560024,64560096,64560656,64565416,64565480,64565488,64800056,64800616,64800680,64800688,64805440,64805448,64840232,64840864,64845064,64845624,64845696,64880416,64880480,64880488,64885240,64885248,64885800,64885808,64885872,66000064,66000624,66000696,66005456,66040240,66040248,66040800,66040808,66040872,66045000,66045008,66045072,66045632,66080424,66080496,66085256,66085816,66085880,66085888,66320456,66325216,66325280,66325288,66325840,66325848,66360000,66360008,66360072,66360632,66365464,66600032,66600664,66605424,66605496,66640216,66640280,66640288,66640840,66640848,66645040,66645048,66645600,66645608,66645672,66680464,66685224,66685296,66685856,66920424,66920496,66925256,66925816,66925880,66925888,66960040,66960048,66960600,66960608,66960672,66965432,68120432,68125264,68125824,68125896,68160056,68160616,68160680,68160688,68165440,68165448,68400016,68400080,68400088,68400640,68400648,68405400,68405408,68405472,68440264,68440824,68440896,68445024,68445096,68445656,68480440,68480448,68485200,68485208,68485272,68485832,68720400,68720408,68720472,68725232,68725864,68760024,68760096,68760656,68765416,68765480,68765488,70200064,70200624,70200696,70205456,70240240,70240248,70240800,70240808,70240872,70245000,70245008,70245072,70245632,70280424,70280496,70285256,70285816,70285880,70285888,70520456,70525216,70525280,70525288,70525840,70525848,70560000,70560008,70560072,70560632,70565464,70800032,70800664,70805424,70805496,70840216,70840280,70840288,70840840,70840848,70845040,70845048,70845600,70845608,70845672,70880464,70885224,70885296,70885856,72000040,72000048,72000600,72000608,72000672,72005432,72040224,72040296,72040856,72045056,72045616,72045680,72045688,72080400,72080408,72080472,72085232,72085864,72320432,72325264,72325824,72325896,72360056,72360616,72360680,72360688,72365440,72365448,72600016,72600080,72600088,72600640,72600648,72605400,72605408,72605472,72640264,72640824,72640896,72645024,72645096,72645656,72680440,72680448,72685200,72685208,72685272,72685832,72920400,72920408,72920472,72925232,72925864,72960024,72960096,72960656,72965416,72965480,72965488,74120416,74120480,74120488,74125240,74125248,74125800,74125808,74125872,74160032,74160664,74165424,74165496,74400064,74400624,74400696,74405456,74440240,74440248,74440800,74440808,74440872,74445000,74445008,74445072,74445632,74480424,74480496,74485256,74485816,74485880,74485888,74720456,74725216,74725280,74725288,74725840,74725848,74760000,74760008,74760072,74760632,74765464,76200040,76200048,76200600,76200608,76200672,76205432,76240224,76240296,76240856,76245056,76245616,76245680,76245688,76280400,76280408,76280472,76285232,76285864,76520432,76525264,76525824,76525896,76560056,76560616,76560680,76560688,76565440,76565448,76800016,76800080,76800088,76800640,76800648,76805400,76805408,76805472,76840264,76840824,76840896,76845024,76845096,76845656,76880440,76880448,76885200,76885208,76885272,76885832,78000024,78000096,78000656,78005416,78005480,78005488,78040200,78040208,78040272,78040832,78045032,78045664,78080456,78085216,78085280,78085288,78085840,78085848,78320416,78320480,78320488,78325240,78325248,78325800,78325808,78325872,78360032,78360664,78365424,78365496,78600064,78600624,78600696,78605456,78640240,78640248,78640800,78640808,78640872,78645000,78645008,78645072,78645632,78680424,78680496,78685256,78685816,78685880,78685888,78920456,78925216,78925280,78925288,78925840,78925848,78960000,78960008,78960072,78960632,78965464,80120464,80125224,80125296,80125856,80160016,80160080,80160088,80160640,80160648,80165400,80165408,80165472,80400040,80400048,80400600,80400608,80400672,80405432,80440224,80440296,80440856,80445056,80445616,80445680,80445688,80480400,80480408,80480472,80485232,80485864,80720432,80725264,80725824,80725896,80760056,80760616,80760680,80760688,80765440,80765448,82200024,82200096,82200656,82205416,82205480,82205488,82240200,82240208,82240272,82240832,82245032,82245664,82280456,82285216,82285280,82285288,82285840,82285848,82520416,82520480,82520488,82525240,82525248,82525800,82525808,82525872,82560032,82560664,82565424,82565496,82800064,82800624,82800696,82805456,82840240,82840248,82840800,82840808,82840872,82845000,82845008,82845072,82845632,82880424,82880496,82885256,82885816,82885880,82885888,84000000,84000008,84000072,84000632,84005464,84040256,84040816,84040880,84040888,84045016,84045080,84045088,84045640,84045648,84080432,84085264,84085824,84085896,84320464,84325224,84325296,84325856,84360016,84360080,84360088,84360640,84360648,84365400,84365408,84365472,84600040,84600048,84600600,84600608,84600672,84605432,84640224,84640296,84640856,84645056,84645616,84645680,84645688,84680400,84680408,84680472,84685232,84685864,84920432,84925264,84925824,84925896,84960056,84960616,84960680,84960688,84965440,84965448,86120440,86120448,86125200,86125208,86125272,86125832,86160064,86160624,86160696,86165456,86400024,86400096,86400656,86405416,86405480,86405488,86440200,86440208,86440272,86440832,86445032,86445664,86480456,86485216,86485280,86485288,86485840,86485848,86720416,86720480,86720488,86725240,86725248,86725800,86725808,86725872,86760032,86760664,86765424,86765496,88200000,88200008,88200072,88200632,88205464,88240256,88240816,88240880,88240888,88245016,88245080,88245088,88245640,88245648,88280432,88285264,88285824,88285896,88520464,88525224,88525296,88525856,88560016,88560080,88560088,88560640,88560648,88565400,88565408,88565472,88800040,88800048,88800600,88800608,88800672,88805432,88840224,88840296,88840856,88845056,88845616,88845680,88845688,88880400,88880408,88880472,88885232,88885864,90000056,90000616,90000680,90000688,90005440,90005448,90040232,90040864,90045064,90045624,90045696,90080416,90080480,90080488,90085240,90085248,90085800,90085808,90085872,90320440,90320448,90325200,90325208,90325272,90325832,90360064,90360624,90360696,90365456,90600024,90600096,90600656,90605416,90605480,90605488,90640200,90640208,90640272,90640832,90645032,90645664,90680456,90685216,90685280,90685288,90685840,90685848,90920416,90920480,90920488,90925240,90925248,90925800,90925808,90925872,90960032,90960664,90965424,90965496,92120424,92120496,92125256,92125816,92125880,92125888,92160040,92160048,92160600,92160608,92160672,92165432,92400000,92400008,92400072,92400632,92405464,92440256,92440816,92440880,92440888,92445016,92445080,92445088,92445640,92445648,92480432,92485264,92485824,92485896,92720464,92725224,92725296,92725856,92760016,92760080,92760088,92760640,92760648,92765400,92765408,92765472,94200056,94200616,94200680,94200688,94205440,94205448,94240232,94240864,94245064,94245624,94245696,94280416,94280480,94280488,94285240,94285248,94285800,94285808,94285872,94520440,94520448,94525200,94525208,94525272,94525832,94560064,94560624,94560696,94565456,94800024,94800096,94800656,94805416,94805480,94805488,94840200,94840208,94840272,94840832,94845032,94845664,94880456,94885216,94885280,94885288,94885840,94885848,96000032,96000664,96005424,96005496,96040216,96040280,96040288,96040840,96040848,96045040,96045048,96045600,96045608,96045672,96080464,96085224,96085296,96085856,96320424,96320496,96325256,96325816,96325880,96325888,96360040,96360048,96360600,96360608,96360672,96365432,96600000,96600008,96600072,96600632,96605464,96640256,96640816,96640880,96640888,96645016,96645080,96645088,96645640,96645648,96680432,96685264,96685824,96685896,96920464,96925224,96925296,96925856,96960016,96960080,96960088,96960640,96960648,96965400,96965408,96965472,98120400,98120408,98120472,98125232,98125864,98160024,98160096,98160656,98165416,98165480,98165488,98400056,98400616,98400680,98400688,98405440,98405448,98440232,98440864,98445064,98445624,98445696,98480416,98480480,98480488,98485240,98485248,98485800,98485808,98485872,98720440,98720448,98725200,98725208,98725272,98725832,98760064,98760624,98760696,98765456,102000564,102006162,102006801,102006882,102054402,102054483,102402324,102408642,102450645,102456243,102456963,102804165,102804804,102804885,102852405,102852486,102858003,102858084,102858723,105204402,105204483,105252003,105252084,105252723,105258321,105600645,105606243,105606963,105654564,108000243,108000963,108006561,108054162,108054801,108054882,108402003,108402084,108402723,108408321,108450324,108456642,108804564,108852165,108852804,108852885,108858402,108858483,120000321,120006648,120054240,120054249,120054960,120054969,120402162,120402801,120402882,120408408,120408480,120408489,120450402,120450483,120456000,120456009,120456081,120456720,120456729,120804642,120852243,120852963,120858561,123204240,123204249,123204960,123204969,123252561,123258168,123258807,123258888,123600402,123600483,123606000,123606009,123606081,123606720,123606729,123654321,126000000,126000009,126000081,126000720,126000729,126006327,126054648,126402561,126408168,126408807,126408888,126450162,126450801,126450882,126456408,126456480,126456489,126804321,126852642,126858240,126858249,126858960,126858969,129204648,129252240,129252249,129252960,129252969,129258567,129600162,129600801,129600882,129606408,129606480,129606489,129654000,129654009,129654081,129654720,129654729,141204006,141204087,141204726,141252327,141258645,141600240,141600249,141600960,141600969,141606567,141654168,141654807,141654888,144000567,144006165,144006804,144006885,144054405,144054486,144402327,144408645,144450648,144456246,144456966,144804168,144804807,144804888,144852408,144852480,144852489,144858006,144858087,144858726,147204405,147204486,147252006,147252087,147252726,147258324,147600648,147606246,147606966,147654567,162000324,162006642,162054243,162054963,162402165,162402804,162402885,162408402,162408483,162450405,162450486,162456003,162456084,162456723,162804645,162852246,162852966,162858564,165204243,165204963,165252564,165258162,165258801,165258882,165600405,165600486,165606003,165606084,165606723,165654324,168000003,168000084,168000723,168006321,168054642,168402564,168408162,168408801,168408882,168450165,168450804,168450885,168456402,168456483,168804324,168852645,168858243,168858963,180000162,180000801,180000882,180006408,180006480,180006489,180054000,180054009,180054081,180054720,180054729,180402642,180408240,180408249,180408960,180408969,180450243,180450963,180456561,180804402,180804483,180852003,180852084,180852723,180858321,183204000,183204009,183204081,183204720,183204729,183252321,183258648,183600243,183600963,183606561,183654162,183654801,183654882,186000561,186006168,186006807,186006888,186054408,186054480,186054489,186402321,186408648,186450642,186456240,186456249,186456960,186456969,186804162,186804801,186804882,186852402,186852483,186858000,186858009,186858081,186858720,186858729,189204408,189204480,189204489,189252000,189252009,189252081,189252720,189252729,189258327,189600642,189606240,189606249,189606960,189606969,189654561,201204567,201252168,201252807,201252888,201258405,201258486,201600000,201600009,201600081,201600720,201600729,201606327,201654648,204000327,204006645,204054246,204054966,204402168,204402807,204402888,204408405,204408486,204450408,204450480,204450489,204456006,204456087,204456726,204804648,204852240,204852249,204852960,204852969,204858567,207204246,207204966,207252567,207258165,207258804,207258885,207600408,207600480,207600489,207606006,207606087,207606726,207654327,222000165,222000804,222000885,222006402,222006483,222054003,222054084,222054723,222402645,222408243,222408963,222450246,222450966,222456564,222804405,222804486,222852006,222852087,222852726,222858324,225204003,225204084,225204723,225252324,225258642,225600246,225600966,225606564,225654165,225654804,225654885,228000564,228006162,228006801,228006882,228054402,228054483,228402324,228408642,228450645,228456243,228456963,228804165,228804804,228804885,228852405,228852486,228858003,228858084,228858723,240000642,240006240,240006249,240006960,240006969,240054561,240402402,240402483,240408000,240408009,240408081,240408720,240408729,240450003,240450084,240450723,240456321,240804243,240804963,240852564,240858162,240858801,240858882,243204561,243252162,243252801,243252882,243258408,243258480,243258489,243600003,243600084,243600723,243606321,243654642,246000321,246006648,246054240,246054249,246054960,246054969,246402162,246402801,246402882,246408408,246408480,246408489,246450402,246450483,246456000,246456009,246456081,246456720,246456729,246804642,246852243,246852963,246858561,249204240,249204249,249204960,249204969,249252561,249258168,249258807,249258888,249600402,249600483,249606000,249606009,249606081,249606720,249606729,249654321,261204327,261252648,261258246,261258966,261600561,261606168,261606807,261606888,261654408,261654480,261654489,264000168,264000807,264000888,264006405,264006486,264054006,264054087,264054726,264402648,264408246,264408966,264450240,264450249,264450960,264450969,264456567,264804408,264804480,264804489,264852000,264852009,264852081,264852720,264852729,264858327,267204006,267204087,267204726,267252327,267258645,267600240,267600249,267600960,267600969,267606567,267654168,267654807,267654888,282000645,282006243,282006963,282054564,282402405,282402486,282408003,282408084,282408723,282450006,282450087,282450726,282456324,282804246,282804966,282852567,282858165,282858804,282858885,285204564,285252165,285252804,285252885,285258402,285258483,285600006,285600087,285600726,285606324,285654645,288000324,288006642,288054243,288054963,288402165,288402804,288402885,288408402,288408483,288450405,288450486,288456003,288456084,288456723,288804645,288852246,288852966,288858564,300000402,300000483,300006000,300006009,300006081,300006720,300006729,300054321,300402243,300402963,300408561,300450564,300456162,300456801,300456882,300804003,300804084,300804723,300852324,300858642,303204321,303252642,303258240,303258249,303258960,303258969,303600564,303606162,303606801,303606882,303654402,303654483,306000162,306000801,306000882,306006408,306006480,306006489,306054000,306054009,306054081,306054720,306054729,306402642,306408240,306408249,306408960,306408969,306450243,306450963,306456561,306804402,306804483,306852003,306852084,306852723,306858321,309204000,309204009,309204081,309204720,309204729,309252321,309258648,309600243,309600963,309606561,309654162,309654801,309654882,321204168,321204807,321204888,321252408,321252480,321252489,321258006,321258087,321258726,321600321,321606648,321654240,321654249,321654960,321654969,324000648,324006246,324006966,324054567,324402408,324402480,324402489,324408006,324408087,324408726,324450000,324450009,324450081,324450720,324450729,324456327,324804240,324804249,324804960,324804969,324852561,324858168,324858807,324858888,327204567,327252168,327252807,327252888,327258405,327258486,327600000,327600009,327600081,327600720,327600729,327606327,327654648,342000405,342000486,342006003,342006084,342006723,342054324,342402246,342402966,342408564,342450567,342456165,342456804,342456885,342804006,342804087,342804726,342852327,342858645,345204324,345252645,345258243,345258963,345600567,345606165,345606804,345606885,345654405,345654486,348000165,348000804,348000885,348006402,348006483,348054003,348054084,348054723,348402645,348408243,348408963,348450246,348450966,348456564,348804405,348804486,348852006,348852087,348852726,348858324,360000243,360000963,360006561,360054162,360054801,360054882,360402003,360402084,360402723,360408321,360450324,360456642,360804564,360852165,360852804,360852885,360858402,360858483,363204162,363204801,363204882,363252402,363252483,363258000,363258009,363258081,363258720,363258729,363600324,363606642,363654243,363654963,366000642,366006240,366006249,366006960,366006969,366054561,366402402,366402483,366408000,366408009,366408081,366408720,366408729,366450003,366450084,366450723,366456321,366804243,366804963,366852564,366858162,366858801,366858882,369204561,369252162,369252801,369252882,369258408,369258480,369258489,369600003,369600084,369600723,369606321,369654642,381204648,381252240,381252249,381252960,381252969,381258567,381600162,381600801,381600882,381606408,381606480,381606489,381654000,381654009,381654081,381654720,381654729,384000408,384000480,384000489,384006006,384006087,384006726,384054327,384402240,384402249,384402960,384402969,384408567,384450561,384456168,384456807,384456888,384804000,384804009,384804081,384804720,384804729,384852321,384858648,387204327,387252648,387258246,387258966,387600561,387606168,387606807,387606888,387654408,387654480,387654489,402000246,402000966,402006564,402054165,402054804,402054885,402402006,402402087,402402726,402408324,402450327,402456645,402804567,402852168,402852807,402852888,402858405,402858486,405204165,405204804,405204885,405252405,405252486,405258003,405258084,405258723,405600327,405606645,405654246,405654966,408000645,408006243,408006963,408054564,408402405,408402486,408408003,408408084,408408723,408450006,408450087,408450726,408456324,408804246,408804966,408852567,408858165,408858804,408858885,420000003,420000084,420000723,420006321,420054642,420402564,420408162,420408801,420408882,420450165,420450804,420450885,420456402,420456483,420804324,420852645,420858243,420858963,423204642,423252243,423252963,423258561,423600165,423600804,423600885,423606402,423606483,423654003,423654084,423654723,426000402,426000483,426006000,426006009,426006081,426006720,426006729,426054321,426402243,426402963,426408561,426450564,426456162,426456801,426456882,426804003,426804084,426804723,426852324,426858642,429204321,429252642,429258240,429258249,429258960,429258969,429600564,429606162,429606801,429606882,429654402,429654483,441204408,441204480,441204489,441252000,441252009,441252081,441252720,441252729,441258327,441600642,441606240,441606249,441606960,441606969,441654561,444000240,444000249,444000960,444000969,444006567,444054168,444054807,444054888,444402000,444402009,444402081,444402720,444402729,444408327,444450321,444456648,444804561,444852162,444852801,444852882,444858408,444858480,444858489,447204168,447204807,447204888,447252408,447252480,447252489,447258006,447258087,447258726,447600321,447606648,447654240,447654249,447654960,447654969,462000006,462000087,462000726,462006324,462054645,462402567,462408165,462408804,462408885,462450168,462450807,462450888,462456405,462456486,462804327,462852648,462858246,462858966,465204645,465252246,465252966,465258564,465600168,465600807,465600888,465606405,465606486,465654006,465654087,465654726,468000405,468000486,468006003,468006084,468006723,468054324,468402246,468402966,468408564,468450567,468456165,468456804,468456885,468804006,468804087,468804726,468852327,468858645,480000564,480006162,480006801,480006882,480054402,480054483,480402324,480408642,480450645,480456243,480456963,480804165,480804804,480804885,480852405,480852486,480858003,480858084,480858723,483204402,483204483,483252003,483252084,483252723,483258321,483600645,483606243,483606963,483654564,486000243,486000963,486006561,486054162,486054801,486054882,486402003,486402084,486402723,486408321,486450324,486456642,486804564,486852165,486852804,486852885,486858402,486858483,489204162,489204801,489204882,489252402,489252483,489258000,489258009,489258081,489258720,489258729,489600324,489606642,489654243,489654963,501204240,501204249,501204960,501204969,501252561,501258168,501258807,501258888,501600402,501600483,501606000,501606009,501606081,501606720,501606729,501654321,504000000,504000009,504000081,504000720,504000729,504006327,504054648,504402561,504408168,504408807,504408888,504450162,504450801,504450882,504456408,504456480,504456489,504804321,504852642,504858240,504858249,504858960,504858969,507204648,507252240,507252249,507252960,507252969,507258567,507600162,507600801,507600882,507606408,507606480,507606489,507654000,507654009,507654081,507654720,507654729,522000567,522006165,522006804,522006885,522054405,522054486,522402327,522408645,522450648,522456246,522456966,522804168,522804807,522804888,522852408,522852480,522852489,522858006,522858087,522858726,525204405,525204486,525252006,525252087,525252726,525258324,525600648,525606246,525606966,525654567,528000246,528000966,528006564,528054165,528054804,528054885,528402006,528402087,528402726,528408324,528450327,528456645,528804567,528852168,528852807,528852888,528858405,528858486,540000324,540006642,540054243,540054963,540402165,540402804,540402885,540408402,540408483,540450405,540450486,540456003,540456084,540456723,540804645,540852246,540852966,540858564,543204243,543204963,543252564,543258162,543258801,543258882,543600405,543600486,543606003,543606084,543606723,543654324,546000003,546000084,546000723,546006321,546054642,546402564,546408162,546408801,546408882,546450165,546450804,546450885,546456402,546456483,546804324,546852645,546858243,546858963,549204642,549252243,549252963,549258561,549600165,549600804,549600885,549606402,549606483,549654003,549654084,549654723,561204000,561204009,561204081,561204720,561204729,561252321,561258648,561600243,561600963,561606561,561654162,561654801,561654882,564000561,564006168,564006807,564006888,564054408,564054480,564054489,564402321,564408648,564450642,564456240,564456249,564456960,564456969,564804162,564804801,564804882,564852402,564852483,564858000,564858009,564858081,564858720,564858729,567204408,567204480,567204489,567252000,567252009,567252081,567252720,567252729,567258327,567600642,567606240,567606249,567606960,567606969,567654561,582000327,582006645,582054246,582054966,582402168,582402807,582402888,582408405,582408486,582450408,582450480,582450489,582456006,582456087,582456726,582804648,582852240,582852249,582852960,582852969,582858567,585204246,585204966,585252567,585258165,585258804,585258885,585600408,585600480,585600489,585606006,585606087,585606726,585654327,588000006,588000087,588000726,588006324,588054645,588402567,588408165,588408804,588408885,588450168,588450807,588450888,588456405,588456486,588804327,588852648,588858246,588858966,600000165,600000804,600000885,600006402,600006483,600054003,600054084,600054723,600402645,600408243,600408963,600450246,600450966,600456564,600804405,600804486,600852006,600852087,600852726,600858324,603204003,603204084,603204723,603252324,603258642,603600246,603600966,603606564,603654165,603654804,603654885,606000564,606006162,606006801,606006882,606054402,606054483,606402324,606408642,606450645,606456243,606456963,606804165,606804804,606804885,606852405,606852486,606858003,606858084,606858723,609204402,609204483,609252003,609252084,609252723,609258321,609600645,609606243,609606963,609654564,621204561,621252162,621252801,621252882,621258408,621258480,621258489,621600003,621600084,621600723,621606321,621654642,624000321,624006648,624054240,624054249,624054960,624054969,624402162,624402801,624402882,624408408,624408480,624408489,624450402,624450483,624456000,624456009,624456081,624456720,624456729,624804642,624852243,624852963,624858561,627204240,627204249,627204960,627204969,627252561,627258168,627258807,627258888,627600402,627600483,627606000,627606009,627606081,627606720,627606729,627654321,642000168,642000807,642000888,642006405,642006486,642054006,642054087,642054726,642402648,642408246,642408966,642450240,642450249,642450960,642450969,642456567,642804408,642804480,642804489,642852000,642852009,642852081,642852720,642852729,642858327,645204006,645204087,645204726,645252327,645258645,645600240,645600249,645600960,645600969,645606567,645654168,645654807,645654888,648000567,648006165,648006804,648006885,648054405,648054486,648402327,648408645,648450648,648456246,648456966,648804168,648804807,648804888,648852408,648852480,648852489,648858006,648858087,648858726,660000645,660006243,660006963,660054564,660402405,660402486,660408003,660408084,660408723,660450006,660450087,660450726,660456324,660804246,660804966,660852567,660858165,660858804,660858885,663204564,663252165,663252804,663252885,663258402,663258483,663600006,663600087,663600726,663606324,663654645,666000324,666006642,666054243,666054963,666402165,666402804,666402885,666408402,666408483,666450405,666450486,666456003,666456084,666456723,666804645,666852246,666852966,666858564,669204243,669204963,669252564,669258162,669258801,669258882,669600405,669600486,669606003,669606084,669606723,669654324,681204321,681252642,681258240,681258249,681258960,681258969,681600564,681606162,681606801,681606882,681654402,681654483,684000162,684000801,684000882,684006408,684006480,684006489,684054000,684054009,684054081,684054720,684054729,684402642,684408240,684408249,684408960,684408969,684450243,684450963,684456561,684804402,684804483,684852003,684852084,684852723,684858321,687204000,687204009,687204081,687204720,687204729,687252321,687258648,687600243,687600963,687606561,687654162,687654801,687654882,702000648,702006246,702006966,702054567,702402408,702402480,702402489,702408006,702408087,702408726,702450000,702450009,702450081,702450720,702450729,702456327,702804240,702804249,702804960,702804969,702852561,702858168,702858807,702858888,705204567,705252168,705252807,705252888,705258405,705258486,705600000,705600009,705600081,705600720,705600729,705606327,705654648,708000327,708006645,708054246,708054966,708402168,708402807,708402888,708408405,708408486,708450408,708450480,708450489,708456006,708456087,708456726,708804648,708852240,708852249,708852960,708852969,708858567,720000405,720000486,720006003,720006084,720006723,720054324,720402246,720402966,720408564,720450567,720456165,720456804,720456885,720804006,720804087,720804726,720852327,720858645,723204324,723252645,723258243,723258963,723600567,723606165,723606804,723606885,723654405,723654486,726000165,726000804,726000885,726006402,726006483,726054003,726054084,726054723,726402645,726408243,726408963,726450246,726450966,726456564,726804405,726804486,726852006,726852087,726852726,726858324,729204003,729204084,729204723,729252324,729258642,729600246,729600966,729606564,729654165,729654804,729654885,741204162,741204801,741204882,741252402,741252483,741258000,741258009,741258081,741258720,741258729,741600324,741606642,741654243,741654963,744000642,744006240,744006249,744006960,744006969,744054561,744402402,744402483,744408000,744408009,744408081,744408720,744408729,744450003,744450084,744450723,744456321,744804243,744804963,744852564,744858162,744858801,744858882,747204561,747252162,747252801,747252882,747258408,747258480,747258489,747600003,747600084,747600723,747606321,747654642,762000408,762000480,762000489,762006006,762006087,762006726,762054327,762402240,762402249,762402960,762402969,762408567,762450561,762456168,762456807,762456888,762804000,762804009,762804081,762804720,762804729,762852321,762858648,765204327,765252648,765258246,765258966,765600561,765606168,765606807,765606888,765654408,765654480,765654489,768000168,768000807,768000888,768006405,768006486,768054006,768054087,768054726,768402648,768408246,768408966,768450240,768450249,768450960,768450969,768456567,768804408,768804480,768804489,768852000,768852009,768852081,768852720,768852729,768858327,780000246,780000966,780006564,780054165,780054804,780054885,780402006,780402087,780402726,780408324,780450327,780456645,780804567,780852168,780852807,780852888,780858405,780858486,783204165,783204804,783204885,783252405,783252486,783258003,783258084,783258723,783600327,783606645,783654246,783654966,786000645,786006243,786006963,786054564,786402405,786402486,786408003,786408084,786408723,786450006,786450087,786450726,786456324,786804246,786804966,786852567,786858165,786858804,786858885,789204564,789252165,789252804,789252885,789258402,789258483,789600006,789600087,789600726,789606324,789654645,801204642,801252243,801252963,801258561,801600165,801600804,801600885,801606402,801606483,801654003,801654084,801654723,804000402,804000483,804006000,804006009,804006081,804006720,804006729,804054321,804402243,804402963,804408561,804450564,804456162,804456801,804456882,804804003,804804084,804804723,804852324,804858642,807204321,807252642,807258240,807258249,807258960,807258969,807600564,807606162,807606801,807606882,807654402,807654483,822000240,822000249,822000960,822000969,822006567,822054168,822054807,822054888,822402000,822402009,822402081,822402720,822402729,822408327,822450321,822456648,822804561,822852162,822852801,822852882,822858408,822858480,822858489,825204168,825204807,825204888,825252408,825252480,825252489,825258006,825258087,825258726,825600321,825606648,825654240,825654249,825654960,825654969,828000648,828006246,828006966,828054567,828402408,828402480,828402489,828408006,828408087,828408726,828450000,828450009,828450081,828450720,828450729,828456327,828804240,828804249,828804960,828804969,828852561,828858168,828858807,828858888,840000006,840000087,840000726,840006324,840054645,840402567,840408165,840408804,840408885,840450168,840450807,840450888,840456405,840456486,840804327,840852648,840858246,840858966,843204645,843252246,843252966,843258564,843600168,843600807,843600888,843606405,843606486,843654006,843654087,843654726,846000405,846000486,846006003,846006084,846006723,846054324,846402246,846402966,846408564,846450567,846456165,846456804,846456885,846804006,846804087,846804726,846852327,846858645,849204324,849252645,849258243,849258963,849600567,849606165,849606804,849606885,849654405,849654486,861204402,861204483,861252003,861252084,861252723,861258321,861600645,861606243,861606963,861654564,864000243,864000963,864006561,864054162,864054801,864054882,864402003,864402084,864402723,864408321,864450324,864456642,864804564,864852165,864852804,864852885,864858402,864858483,867204162,867204801,867204882,867252402,867252483,867258000,867258009,867258081,867258720,867258729,867600324,867606642,867654243,867654963,882000000,882000009,882000081,882000720,882000729,882006327,882054648,882402561,882408168,882408807,882408888,882450162,882450801,882450882,882456408,882456480,882456489,882804321,882852642,882858240,882858249,882858960,882858969,885204648,885252240,885252249,885252960,885252969,885258567,885600162,885600801,885600882,885606408,885606480,885606489,885654000,885654009,885654081,885654720,885654729,888000408,888000480,888000489,888006006,888006087,888006726,888054327,888402240,888402249,888402960,888402969,888408567,888450561,888456168,888456807,888456888,888804000,888804009,888804081,888804720,888804729,888852321,888858648,900000567,900006165,900006804,900006885,900054405,900054486,900402327,900408645,900450648,900456246,900456966,900804168,900804807,900804888,900852408,900852480,900852489,900858006,900858087,900858726,903204405,903204486,903252006,903252087,903252726,903258324,903600648,903606246,903606966,903654567,906000246,906000966,906006564,906054165,906054804,906054885,906402006,906402087,906402726,906408324,906450327,906456645,906804567,906852168,906852807,906852888,906858405,906858486,909204165,909204804,909204885,909252405,909252486,909258003,909258084,909258723,909600327,909606645,909654246,909654966,921204243,921204963,921252564,921258162,921258801,921258882,921600405,921600486,921606003,921606084,921606723,921654324,924000003,924000084,924000723,924006321,924054642,924402564,924408162,924408801,924408882,924450165,924450804,924450885,924456402,924456483,924804324,924852645,924858243,924858963,927204642,927252243,927252963,927258561,927600165,927600804,927600885,927606402,927606483,927654003,927654084,927654723,942000561,942006168,942006807,942006888,942054408,942054480,942054489,942402321,942408648,942450642,942456240,942456249,942456960,942456969,942804162,942804801,942804882,942852402,942852483,942858000,942858009,942858081,942858720,942858729,945204408,945204480,945204489,945252000,945252009,945252081,945252720,945252729,945258327,945600642,945606240,945606249,945606960,945606969,945654561,948000240,948000249,948000960,948000969,948006567,948054168,948054807,948054888,948402000,948402009,948402081,948402720,948402729,948408327,948450321,948456648,948804561,948852162,948852801,948852882,948858408,948858480,948858489,960000327,960006645,960054246,960054966,960402168,960402807,960402888,960408405,960408486,960450408,960450480,960450489,960456006,960456087,960456726,960804648,960852240,960852249,960852960,960852969,960858567,963204246,963204966,963252567,963258165,963258804,963258885,963600408,963600480,963600489,963606006,963606087,963606726,963654327,966000006,966000087,966000726,966006324,966054645,966402567,966408165,966408804,966408885,966450168,966450807,966450888,966456405,966456486,966804327,966852648,966858246,966858966,969204645,969252246,969252966,969258564,969600168,969600807,969600888,969606405,969606486,969654006,969654087,969654726,981204003,981204084,981204723,981252324,981258642,981600246,981600966,981606564,981654165,981654804,981654885,984000564,984006162,984006801,984006882,984054402,984054483,984402324,984408642,984450645,984456243,984456963,984804165,984804804,984804885,984852405,984852486,984858003,984858084,984858723,987204402,987204483,987252003,987252084,987252723,987258321,987600645,987606243,987606963,987654564,1020005640,1020061620,1020068010,1020068820,1020544020,1020544830,1024023240,1024086420,1024506450,1024562430,1024569630,1028041650,1028048040,1028048850,1028524050,1028524860,1028580030,1028580840,1028587230,1052044020,1052044830,1052520030,1052520840,1052527230,1052583210,1056006450,1056062430,1056069630,1056545640,1080002430,1080009630,1080065610,1080541620,1080548010,1080548820,1084020030,1084020840,1084027230,1084083210,1084503240,1084566420,1088045640,1088521650,1088528040,1088528850,1088584020,1088584830,1200003210,1200066480,1200542400,1200542490,1200549600,1200549690,1204021620,1204028010,1204028820,1204084080,1204084800,1204084890,1204504020,1204504830,1204560000,1204560090,1204560810,1204567200,1204567290,1208046420,1208522430,1208529630,1208585610,1232042400,1232042490,1232049600,1232049690,1232525610,1232581680,1232588070,1232588880,1236004020,1236004830,1236060000,1236060090,1236060810,1236067200,1236067290,1236543210,1260000000,1260000090,1260000810,1260007200,1260007290,1260063270,1260546480,1264025610,1264081680,1264088070,1264088880,1264501620,1264508010,1264508820,1264564080,1264564800,1264564890,1268043210,1268526420,1268582400,1268582490,1268589600,1268589690,1292046480,1292522400,1292522490,1292529600,1292529690,1292585670,1296001620,1296008010,1296008820,1296064080,1296064800,1296064890,1296540000,1296540090,1296540810,1296547200,1296547290,1412040060,1412040870,1412047260,1412523270,1412586450,1416002400,1416002490,1416009600,1416009690,1416065670,1416541680,1416548070,1416548880,1440005670,1440061650,1440068040,1440068850,1440544050,1440544860,1444023270,1444086450,1444506480,1444562460,1444569660,1448041680,1448048070,1448048880,1448524080,1448524800,1448524890,1448580060,1448580870,1448587260,1472044050,1472044860,1472520060,1472520870,1472527260,1472583240,1476006480,1476062460,1476069660,1476545670,1620003240,1620066420,1620542430,1620549630,1624021650,1624028040,1624028850,1624084020,1624084830,1624504050,1624504860,1624560030,1624560840,1624567230,1628046450,1628522460,1628529660,1628585640,1652042430,1652049630,1652525640,1652581620,1652588010,1652588820,1656004050,1656004860,1656060030,1656060840,1656067230,1656543240,1680000030,1680000840,1680007230,1680063210,1680546420,1684025640,1684081620,1684088010,1684088820,1684501650,1684508040,1684508850,1684564020,1684564830,1688043240,1688526450,1688582430,1688589630,1800001620,1800008010,1800008820,1800064080,1800064800,1800064890,1800540000,1800540090,1800540810,1800547200,1800547290,1804026420,1804082400,1804082490,1804089600,1804089690,1804502430,1804509630,1804565610,1808044020,1808044830,1808520030,1808520840,1808527230,1808583210,1832040000,1832040090,1832040810,1832047200,1832047290,1832523210,1832586480,1836002430,1836009630,1836065610,1836541620,1836548010,1836548820,1860005610,1860061680,1860068070,1860068880,1860544080,1860544800,1860544890,1864023210,1864086480,1864506420,1864562400,1864562490,1864569600,1864569690,1868041620,1868048010,1868048820,1868524020,1868524830,1868580000,1868580090,1868580810,1868587200,1868587290,1892044080,1892044800,1892044890,1892520000,1892520090,1892520810,1892527200,1892527290,1892583270,1896006420,1896062400,1896062490,1896069600,1896069690,1896545610,2012045670,2012521680,2012528070,2012528880,2012584050,2012584860,2016000000,2016000090,2016000810,2016007200,2016007290,2016063270,2016546480,2040003270,2040066450,2040542460,2040549660,2044021680,2044028070,2044028880,2044084050,2044084860,2044504080,2044504800,2044504890,2044560060,2044560870,2044567260,2048046480,2048522400,2048522490,2048529600,2048529690,2048585670,2072042460,2072049660,2072525670,2072581650,2072588040,2072588850,2076004080,2076004800,2076004890,2076060060,2076060870,2076067260,2076543270,2220001650,2220008040,2220008850,2220064020,2220064830,2220540030,2220540840,2220547230,2224026450,2224082430,2224089630,2224502460,2224509660,2224565640,2228044050,2228044860,2228520060,2228520870,2228527260,2228583240,2252040030,2252040840,2252047230,2252523240,2252586420,2256002460,2256009660,2256065640,2256541650,2256548040,2256548850,2280005640,2280061620,2280068010,2280068820,2280544020,2280544830,2284023240,2284086420,2284506450,2284562430,2284569630,2288041650,2288048040,2288048850,2288524050,2288524860,2288580030,2288580840,2288587230,2400006420,2400062400,2400062490,2400069600,2400069690,2400545610,2404024020,2404024830,2404080000,2404080090,2404080810,2404087200,2404087290,2404500030,2404500840,2404507230,2404563210,2408042430,2408049630,2408525640,2408581620,2408588010,2408588820,2432045610,2432521620,2432528010,2432528820,2432584080,2432584800,2432584890,2436000030,2436000840,2436007230,2436063210,2436546420,2460003210,2460066480,2460542400,2460542490,2460549600,2460549690,2464021620,2464028010,2464028820,2464084080,2464084800,2464084890,2464504020,2464504830,2464560000,2464560090,2464560810,2464567200,2464567290,2468046420,2468522430,2468529630,2468585610,2492042400,2492042490,2492049600,2492049690,2492525610,2492581680,2492588070,2492588880,2496004020,2496004830,2496060000,2496060090,2496060810,2496067200,2496067290,2496543210,2612043270,2612526480,2612582460,2612589660,2616005610,2616061680,2616068070,2616068880,2616544080,2616544800,2616544890,2640001680,2640008070,2640008880,2640064050,2640064860,2640540060,2640540870,2640547260,2644026480,2644082460,2644089660,2644502400,2644502490,2644509600,2644509690,2644565670,2648044080,2648044800,2648044890,2648520000,2648520090,2648520810,2648527200,2648527290,2648583270,2672040060,2672040870,2672047260,2672523270,2672586450,2676002400,2676002490,2676009600,2676009690,2676065670,2676541680,2676548070,2676548880,2820006450,2820062430,2820069630,2820545640,2824024050,2824024860,2824080030,2824080840,2824087230,2824500060,2824500870,2824507260,2824563240,2828042460,2828049660,2828525670,2828581650,2828588040,2828588850,2852045640,2852521650,2852528040,2852528850,2852584020,2852584830,2856000060,2856000870,2856007260,2856063240,2856546450,2880003240,2880066420,2880542430,2880549630,2884021650,2884028040,2884028850,2884084020,2884084830,2884504050,2884504860,2884560030,2884560840,2884567230,2888046450,2888522460,2888529660,2888585640,3000004020,3000004830,3000060000,3000060090,3000060810,3000067200,3000067290,3000543210,3004022430,3004029630,3004085610,3004505640,3004561620,3004568010,3004568820,3008040030,3008040840,3008047230,3008523240,3008586420,3032043210,3032526420,3032582400,3032582490,3032589600,3032589690,3036005640,3036061620,3036068010,3036068820,3036544020,3036544830,3060001620,3060008010,3060008820,3060064080,3060064800,3060064890,3060540000,3060540090,3060540810,3060547200,3060547290,3064026420,3064082400,3064082490,3064089600,3064089690,3064502430,3064509630,3064565610,3068044020,3068044830,3068520030,3068520840,3068527230,3068583210,3092040000,3092040090,3092040810,3092047200,3092047290,3092523210,3092586480,3096002430,3096009630,3096065610,3096541620,3096548010,3096548820,3212041680,3212048070,3212048880,3212524080,3212524800,3212524890,3212580060,3212580870,3212587260,3216003210,3216066480,3216542400,3216542490,3216549600,3216549690,3240006480,3240062460,3240069660,3240545670,3244024080,3244024800,3244024890,3244080060,3244080870,3244087260,3244500000,3244500090,3244500810,3244507200,3244507290,3244563270,3248042400,3248042490,3248049600,3248049690,3248525610,3248581680,3248588070,3248588880,3272045670,3272521680,3272528070,3272528880,3272584050,3272584860,3276000000,3276000090,3276000810,3276007200,3276007290,3276063270,3276546480,3420004050,3420004860,3420060030,3420060840,3420067230,3420543240,3424022460,3424029660,3424085640,3424505670,3424561650,3424568040,3424568850,3428040060,3428040870,3428047260,3428523270,3428586450,3452043240,3452526450,3452582430,3452589630,3456005670,3456061650,3456068040,3456068850,3456544050,3456544860,3480001650,3480008040,3480008850,3480064020,3480064830,3480540030,3480540840,3480547230,3484026450,3484082430,3484089630,3484502460,3484509660,3484565640,3488044050,3488044860,3488520060,3488520870,3488527260,3488583240,3600002430,3600009630,3600065610,3600541620,3600548010,3600548820,3604020030,3604020840,3604027230,3604083210,3604503240,3604566420,3608045640,3608521650,3608528040,3608528850,3608584020,3608584830,3632041620,3632048010,3632048820,3632524020,3632524830,3632580000,3632580090,3632580810,3632587200,3632587290,3636003240,3636066420,3636542430,3636549630,3660006420,3660062400,3660062490,3660069600,3660069690,3660545610,3664024020,3664024830,3664080000,3664080090,3664080810,3664087200,3664087290,3664500030,3664500840,3664507230,3664563210,3668042430,3668049630,3668525640,3668581620,3668588010,3668588820,3692045610,3692521620,3692528010,3692528820,3692584080,3692584800,3692584890,3696000030,3696000840,3696007230,3696063210,3696546420,3812046480,3812522400,3812522490,3812529600,3812529690,3812585670,3816001620,3816008010,3816008820,3816064080,3816064800,3816064890,3816540000,3816540090,3816540810,3816547200,3816547290,3840004080,3840004800,3840004890,3840060060,3840060870,3840067260,3840543270,3844022400,3844022490,3844029600,3844029690,3844085670,3844505610,3844561680,3844568070,3844568880,3848040000,3848040090,3848040810,3848047200,3848047290,3848523210,3848586480,3872043270,3872526480,3872582460,3872589660,3876005610,3876061680,3876068070,3876068880,3876544080,3876544800,3876544890,4020002460,4020009660,4020065640,4020541650,4020548040,4020548850,4024020060,4024020870,4024027260,4024083240,4024503270,4024566450,4028045670,4028521680,4028528070,4028528880,4028584050,4028584860,4052041650,4052048040,4052048850,4052524050,4052524860,4052580030,4052580840,4052587230,4056003270,4056066450,4056542460,4056549660,4080006450,4080062430,4080069630,4080545640,4084024050,4084024860,4084080030,4084080840,4084087230,4084500060,4084500870,4084507260,4084563240,4088042460,4088049660,4088525670,4088581650,4088588040,4088588850,4200000030,4200000840,4200007230,4200063210,4200546420,4204025640,4204081620,4204088010,4204088820,4204501650,4204508040,4204508850,4204564020,4204564830,4208043240,4208526450,4208582430,4208589630,4232046420,4232522430,4232529630,4232585610,4236001650,4236008040,4236008850,4236064020,4236064830,4236540030,4236540840,4236547230,4260004020,4260004830,4260060000,4260060090,4260060810,4260067200,4260067290,4260543210,4264022430,4264029630,4264085610,4264505640,4264561620,4264568010,4264568820,4268040030,4268040840,4268047230,4268523240,4268586420,4292043210,4292526420,4292582400,4292582490,4292589600,4292589690,4296005640,4296061620,4296068010,4296068820,4296544020,4296544830,4412044080,4412044800,4412044890,4412520000,4412520090,4412520810,4412527200,4412527290,4412583270,4416006420,4416062400,4416062490,4416069600,4416069690,4416545610,4440002400,4440002490,4440009600,4440009690,4440065670,4440541680,4440548070,4440548880,4444020000,4444020090,4444020810,4444027200,4444027290,4444083270,4444503210,4444566480,4448045610,4448521620,4448528010,4448528820,4448584080,4448584800,4448584890,4472041680,4472048070,4472048880,4472524080,4472524800,4472524890,4472580060,4472580870,4472587260,4476003210,4476066480,4476542400,4476542490,4476549600,4476549690,4620000060,4620000870,4620007260,4620063240,4620546450,4624025670,4624081650,4624088040,4624088850,4624501680,4624508070,4624508880,4624564050,4624564860,4628043270,4628526480,4628582460,4628589660,4652046450,4652522460,4652529660,4652585640,4656001680,4656008070,4656008880,4656064050,4656064860,4656540060,4656540870,4656547260,4680004050,4680004860,4680060030,4680060840,4680067230,4680543240,4684022460,4684029660,4684085640,4684505670,4684561650,4684568040,4684568850,4688040060,4688040870,4688047260,4688523270,4688586450,4800005640,4800061620,4800068010,4800068820,4800544020,4800544830,4804023240,4804086420,4804506450,4804562430,4804569630,4808041650,4808048040,4808048850,4808524050,4808524860,4808580030,4808580840,4808587230,4832044020,4832044830,4832520030,4832520840,4832527230,4832583210,4836006450,4836062430,4836069630,4836545640,4860002430,4860009630,4860065610,4860541620,4860548010,4860548820,4864020030,4864020840,4864027230,4864083210,4864503240,4864566420,4868045640,4868521650,4868528040,4868528850,4868584020,4868584830,4892041620,4892048010,4892048820,4892524020,4892524830,4892580000,4892580090,4892580810,4892587200,4892587290,4896003240,4896066420,4896542430,4896549630,5012042400,5012042490,5012049600,5012049690,5012525610,5012581680,5012588070,5012588880,5016004020,5016004830,5016060000,5016060090,5016060810,5016067200,5016067290,5016543210,5040000000,5040000090,5040000810,5040007200,5040007290,5040063270,5040546480,5044025610,5044081680,5044088070,5044088880,5044501620,5044508010,5044508820,5044564080,5044564800,5044564890,5048043210,5048526420,5048582400,5048582490,5048589600,5048589690,5072046480,5072522400,5072522490,5072529600,5072529690,5072585670,5076001620,5076008010,5076008820,5076064080,5076064800,5076064890,5076540000,5076540090,5076540810,5076547200,5076547290,5220005670,5220061650,5220068040,5220068850,5220544050,5220544860,5224023270,5224086450,5224506480,5224562460,5224569660,5228041680,5228048070,5228048880,5228524080,5228524800,5228524890,5228580060,5228580870,5228587260,5252044050,5252044860,5252520060,5252520870,5252527260,5252583240,5256006480,5256062460,5256069660,5256545670,5280002460,5280009660,5280065640,5280541650,5280548040,5280548850,5284020060,5284020870,5284027260,5284083240,5284503270,5284566450,5288045670,5288521680,5288528070,5288528880,5288584050,5288584860,5400003240,5400066420,5400542430,5400549630,5404021650,5404028040,5404028850,5404084020,5404084830,5404504050,5404504860,5404560030,5404560840,5404567230,5408046450,5408522460,5408529660,5408585640,5432042430,5432049630,5432525640,5432581620,5432588010,5432588820,5436004050,5436004860,5436060030,5436060840,5436067230,5436543240,5460000030,5460000840,5460007230,5460063210,5460546420,5464025640,5464081620,5464088010,5464088820,5464501650,5464508040,5464508850,5464564020,5464564830,5468043240,5468526450,5468582430,5468589630,5492046420,5492522430,5492529630,5492585610,5496001650,5496008040,5496008850,5496064020,5496064830,5496540030,5496540840,5496547230,5612040000,5612040090,5612040810,5612047200,5612047290,5612523210,5612586480,5616002430,5616009630,5616065610,5616541620,5616548010,5616548820,5640005610,5640061680,5640068070,5640068880,5640544080,5640544800,5640544890,5644023210,5644086480,5644506420,5644562400,5644562490,5644569600,5644569690,5648041620,5648048010,5648048820,5648524020,5648524830,5648580000,5648580090,5648580810,5648587200,5648587290,5672044080,5672044800,5672044890,5672520000,5672520090,5672520810,5672527200,5672527290,5672583270,5676006420,5676062400,5676062490,5676069600,5676069690,5676545610,5820003270,5820066450,5820542460,5820549660,5824021680,5824028070,5824028880,5824084050,5824084860,5824504080,5824504800,5824504890,5824560060,5824560870,5824567260,5828046480,5828522400,5828522490,5828529600,5828529690,5828585670,5852042460,5852049660,5852525670,5852581650,5852588040,5852588850,5856004080,5856004800,5856004890,5856060060,5856060870,5856067260,5856543270,5880000060,5880000870,5880007260,5880063240,5880546450,5884025670,5884081650,5884088040,5884088850,5884501680,5884508070,5884508880,5884564050,5884564860,5888043270,5888526480,5888582460,5888589660,6000001650,6000008040,6000008850,6000064020,6000064830,6000540030,6000540840,6000547230,6004026450,6004082430,6004089630,6004502460,6004509660,6004565640,6008044050,6008044860,6008520060,6008520870,6008527260,6008583240,6032040030,6032040840,6032047230,6032523240,6032586420,6036002460,6036009660,6036065640,6036541650,6036548040,6036548850,6060005640,6060061620,6060068010,6060068820,6060544020,6060544830,6064023240,6064086420,6064506450,6064562430,6064569630,6068041650,6068048040,6068048850,6068524050,6068524860,6068580030,6068580840,6068587230,6092044020,6092044830,6092520030,6092520840,6092527230,6092583210,6096006450,6096062430,6096069630,6096545640,6212045610,6212521620,6212528010,6212528820,6212584080,6212584800,6212584890,6216000030,6216000840,6216007230,6216063210,6216546420,6240003210,6240066480,6240542400,6240542490,6240549600,6240549690,6244021620,6244028010,6244028820,6244084080,6244084800,6244084890,6244504020,6244504830,6244560000,6244560090,6244560810,6244567200,6244567290,6248046420,6248522430,6248529630,6248585610,6272042400,6272042490,6272049600,6272049690,6272525610,6272581680,6272588070,6272588880,6276004020,6276004830,6276060000,6276060090,6276060810,6276067200,6276067290,6276543210,6420001680,6420008070,6420008880,6420064050,6420064860,6420540060,6420540870,6420547260,6424026480,6424082460,6424089660,6424502400,6424502490,6424509600,6424509690,6424565670,6428044080,6428044800,6428044890,6428520000,6428520090,6428520810,6428527200,6428527290,6428583270,6452040060,6452040870,6452047260,6452523270,6452586450,6456002400,6456002490,6456009600,6456009690,6456065670,6456541680,6456548070,6456548880,6480005670,6480061650,6480068040,6480068850,6480544050,6480544860,6484023270,6484086450,6484506480,6484562460,6484569660,6488041680,6488048070,6488048880,6488524080,6488524800,6488524890,6488580060,6488580870,6488587260,6600006450,6600062430,6600069630,6600545640,6604024050,6604024860,6604080030,6604080840,6604087230,6604500060,6604500870,6604507260,6604563240,6608042460,6608049660,6608525670,6608581650,6608588040,6608588850,6632045640,6632521650,6632528040,6632528850,6632584020,6632584830,6636000060,6636000870,6636007260,6636063240,6636546450,6660003240,6660066420,6660542430,6660549630,6664021650,6664028040,6664028850,6664084020,6664084830,6664504050,6664504860,6664560030,6664560840,6664567230,6668046450,6668522460,6668529660,6668585640,6692042430,6692049630,6692525640,6692581620,6692588010,6692588820,6696004050,6696004860,6696060030,6696060840,6696067230,6696543240,6812043210,6812526420,6812582400,6812582490,6812589600,6812589690,6816005640,6816061620,6816068010,6816068820,6816544020,6816544830,6840001620,6840008010,6840008820,6840064080,6840064800,6840064890,6840540000,6840540090,6840540810,6840547200,6840547290,6844026420,6844082400,6844082490,6844089600,6844089690,6844502430,6844509630,6844565610,6848044020,6848044830,6848520030,6848520840,6848527230,6848583210,6872040000,6872040090,6872040810,6872047200,6872047290,6872523210,6872586480,6876002430,6876009630,6876065610,6876541620,6876548010,6876548820,7020006480,7020062460,7020069660,7020545670,7024024080,7024024800,7024024890,7024080060,7024080870,7024087260,7024500000,7024500090,7024500810,7024507200,7024507290,7024563270,7028042400,7028042490,7028049600,7028049690,7028525610,7028581680,7028588070,7028588880,7052045670,7052521680,7052528070,7052528880,7052584050,7052584860,7056000000,7056000090,7056000810,7056007200,7056007290,7056063270,7056546480,7080003270,7080066450,7080542460,7080549660,7084021680,7084028070,7084028880,7084084050,7084084860,7084504080,7084504800,7084504890,7084560060,7084560870,7084567260,7088046480,7088522400,7088522490,7088529600,7088529690,7088585670,7200004050,7200004860,7200060030,7200060840,7200067230,7200543240,7204022460,7204029660,7204085640,7204505670,7204561650,7204568040,7204568850,7208040060,7208040870,7208047260,7208523270,7208586450,7232043240,7232526450,7232582430,7232589630,7236005670,7236061650,7236068040,7236068850,7236544050,7236544860,7260001650,7260008040,7260008850,7260064020,7260064830,7260540030,7260540840,7260547230,7264026450,7264082430,7264089630,7264502460,7264509660,7264565640,7268044050,7268044860,7268520060,7268520870,7268527260,7268583240,7292040030,7292040840,7292047230,7292523240,7292586420,7296002460,7296009660,7296065640,7296541650,7296548040,7296548850,7412041620,7412048010,7412048820,7412524020,7412524830,7412580000,7412580090,7412580810,7412587200,7412587290,7416003240,7416066420,7416542430,7416549630,7440006420,7440062400,7440062490,7440069600,7440069690,7440545610,7444024020,7444024830,7444080000,7444080090,7444080810,7444087200,7444087290,7444500030,7444500840,7444507230,7444563210,7448042430,7448049630,7448525640,7448581620,7448588010,7448588820,7472045610,7472521620,7472528010,7472528820,7472584080,7472584800,7472584890,7476000030,7476000840,7476007230,7476063210,7476546420,7620004080,7620004800,7620004890,7620060060,7620060870,7620067260,7620543270,7624022400,7624022490,7624029600,7624029690,7624085670,7624505610,7624561680,7624568070,7624568880,7628040000,7628040090,7628040810,7628047200,7628047290,7628523210,7628586480,7652043270,7652526480,7652582460,7652589660,7656005610,7656061680,7656068070,7656068880,7656544080,7656544800,7656544890,7680001680,7680008070,7680008880,7680064050,7680064860,7680540060,7680540870,7680547260,7684026480,7684082460,7684089660,7684502400,7684502490,7684509600,7684509690,7684565670,7688044080,7688044800,7688044890,7688520000,7688520090,7688520810,7688527200,7688527290,7688583270,7800002460,7800009660,7800065640,7800541650,7800548040,7800548850,7804020060,7804020870,7804027260,7804083240,7804503270,7804566450,7808045670,7808521680,7808528070,7808528880,7808584050,7808584860,7832041650,7832048040,7832048850,7832524050,7832524860,7832580030,7832580840,7832587230,7836003270,7836066450,7836542460,7836549660,7860006450,7860062430,7860069630,7860545640,7864024050,7864024860,7864080030,7864080840,7864087230,7864500060,7864500870,7864507260,7864563240,7868042460,7868049660,7868525670,7868581650,7868588040,7868588850,7892045640,7892521650,7892528040,7892528850,7892584020,7892584830,7896000060,7896000870,7896007260,7896063240,7896546450,8012046420,8012522430,8012529630,8012585610,8016001650,8016008040,8016008850,8016064020,8016064830,8016540030,8016540840,8016547230,8040004020,8040004830,8040060000,8040060090,8040060810,8040067200,8040067290,8040543210,8044022430,8044029630,8044085610,8044505640,8044561620,8044568010,8044568820,8048040030,8048040840,8048047230,8048523240,8048586420,8072043210,8072526420,8072582400,8072582490,8072589600,8072589690,8076005640,8076061620,8076068010,8076068820,8076544020,8076544830,8220002400,8220002490,8220009600,8220009690,8220065670,8220541680,8220548070,8220548880,8224020000,8224020090,8224020810,8224027200,8224027290,8224083270,8224503210,8224566480,8228045610,8228521620,8228528010,8228528820,8228584080,8228584800,8228584890,8252041680,8252048070,8252048880,8252524080,8252524800,8252524890,8252580060,8252580870,8252587260,8256003210,8256066480,8256542400,8256542490,8256549600,8256549690,8280006480,8280062460,8280069660,8280545670,8284024080,8284024800,8284024890,8284080060,8284080870,8284087260,8284500000,8284500090,8284500810,8284507200,8284507290,8284563270,8288042400,8288042490,8288049600,8288049690,8288525610,8288581680,8288588070,8288588880,8400000060,8400000870,8400007260,8400063240,8400546450,8404025670,8404081650,8404088040,8404088850,8404501680,8404508070,8404508880,8404564050,8404564860,8408043270,8408526480,8408582460,8408589660,8432046450,8432522460,8432529660,8432585640,8436001680,8436008070,8436008880,8436064050,8436064860,8436540060,8436540870,8436547260,8460004050,8460004860,8460060030,8460060840,8460067230,8460543240,8464022460,8464029660,8464085640,8464505670,8464561650,8464568040,8464568850,8468040060,8468040870,8468047260,8468523270,8468586450,8492043240,8492526450,8492582430,8492589630,8496005670,8496061650,8496068040,8496068850,8496544050,8496544860,8612044020,8612044830,8612520030,8612520840,8612527230,8612583210,8616006450,8616062430,8616069630,8616545640,8640002430,8640009630,8640065610,8640541620,8640548010,8640548820,8644020030,8644020840,8644027230,8644083210,8644503240,8644566420,8648045640,8648521650,8648528040,8648528850,8648584020,8648584830,8672041620,8672048010,8672048820,8672524020,8672524830,8672580000,8672580090,8672580810,8672587200,8672587290,8676003240,8676066420,8676542430,8676549630,8820000000,8820000090,8820000810,8820007200,8820007290,8820063270,8820546480,8824025610,8824081680,8824088070,8824088880,8824501620,8824508010,8824508820,8824564080,8824564800,8824564890,8828043210,8828526420,8828582400,8828582490,8828589600,8828589690,8852046480,8852522400,8852522490,8852529600,8852529690,8852585670,8856001620,8856008010,8856008820,8856064080,8856064800,8856064890,8856540000,8856540090,8856540810,8856547200,8856547290,8880004080,8880004800,8880004890,8880060060,8880060870,8880067260,8880543270,8884022400,8884022490,8884029600,8884029690,8884085670,8884505610,8884561680,8884568070,8884568880,8888040000,8888040090,8888040810,8888047200,8888047290,8888523210,8888586480,9000005670,9000061650,9000068040,9000068850,9000544050,9000544860,9004023270,9004086450,9004506480,9004562460,9004569660,9008041680,9008048070,9008048880,9008524080,9008524800,9008524890,9008580060,9008580870,9008587260,9032044050,9032044860,9032520060,9032520870,9032527260,9032583240,9036006480,9036062460,9036069660,9036545670,9060002460,9060009660,9060065640,9060541650,9060548040,9060548850,9064020060,9064020870,9064027260,9064083240,9064503270,9064566450,9068045670,9068521680,9068528070,9068528880,9068584050,9068584860,9092041650,9092048040,9092048850,9092524050,9092524860,9092580030,9092580840,9092587230,9096003270,9096066450,9096542460,9096549660,9212042430,9212049630,9212525640,9212581620,9212588010,9212588820,9216004050,9216004860,9216060030,9216060840,9216067230,9216543240,9240000030,9240000840,9240007230,9240063210,9240546420,9244025640,9244081620,9244088010,9244088820,9244501650,9244508040,9244508850,9244564020,9244564830,9248043240,9248526450,9248582430,9248589630,9272046420,9272522430,9272529630,9272585610,9276001650,9276008040,9276008850,9276064020,9276064830,9276540030,9276540840,9276547230,9420005610,9420061680,9420068070,9420068880,9420544080,9420544800,9420544890,9424023210,9424086480,9424506420,9424562400,9424562490,9424569600,9424569690,9428041620,9428048010,9428048820,9428524020,9428524830,9428580000,9428580090,9428580810,9428587200,9428587290,9452044080,9452044800,9452044890,9452520000,9452520090,9452520810,9452527200,9452527290,9452583270,9456006420,9456062400,9456062490,9456069600,9456069690,9456545610,9480002400,9480002490,9480009600,9480009690,9480065670,9480541680,9480548070,9480548880,9484020000,9484020090,9484020810,9484027200,9484027290,9484083270,9484503210,9484566480,9488045610,9488521620,9488528010,9488528820,9488584080,9488584800,9488584890,9600003270,9600066450,9600542460,9600549660,9604021680,9604028070,9604028880,9604084050,9604084860,9604504080,9604504800,9604504890,9604560060,9604560870,9604567260,9608046480,9608522400,9608522490,9608529600,9608529690,9608585670,9632042460,9632049660,9632525670,9632581650,9632588040,9632588850,9636004080,9636004800,9636004890,9636060060,9636060870,9636067260,9636543270,9660000060,9660000870,9660007260,9660063240,9660546450,9664025670,9664081650,9664088040,9664088850,9664501680,9664508070,9664508880,9664564050,9664564860,9668043270,9668526480,9668582460,9668589660,9692046450,9692522460,9692529660,9692585640,9696001680,9696008070,9696008880,9696064050,9696064860,9696540060,9696540870,9696547260,9812040030,9812040840,9812047230,9812523240,9812586420,9816002460,9816009660,9816065640,9816541650,9816548040,9816548850,9840005640,9840061620,9840068010,9840068820,9840544020,9840544830,9844023240,9844086420,9844506450,9844562430,9844569630,9848041650,9848048040,9848048850,9848524050,9848524860,9848580030,9848580840,9848587230,9872044020,9872044830,9872520030,9872520840,9872527230,9872583210,9876006450,9876062430,9876069630,9876545640,10200056405,10200616206,10200680105,10200688201,10205440201,10205448308,10240232409,10240864205,10245064500,10245624301,10245696307,10280416509,10280480408,10280488504,10285240504,10285248600,10285800305,10285808401,10285872300,10520440205,10520448301,10525200301,10525208408,10525272307,10525832108,10560064504,10560624305,10560696300,10565456407,10800024301,10800096307,10800656108,10805416204,10805480103,10840200305,10840208401,10840272300,10840832101,10845032407,10845664203,10880456400,10885216507,10885280406,10885288502,10885840207,10885848303,12000664808,12005424002,12005424904,12005496008,12040280109,12040288205,12040840801,12040848006,12040848908,12045040205,12045048301,12045600006,12045600908,12045608102,12045672001,12045672903,12080464209,12085224305,12085296300,12085856101,12320424006,12320424908,12320496001,12320496903,12325256108,12325816800,12325888806,12360040209,12360048305,12360600901,12360608106,12360672005,12360672907,12365432101,12600000006,12600000908,12600008102,12600072001,12600072903,12600632704,12605464806,12640256101,12640816804,12640880703,12645016208,12645080107,12645088203,12645648004,12645648906,12680432105,12685264207,12685824008,12685896003,12685896905,12925224004,12925224906,12925296901,12925856702,12960016201,12960080100,12960088207,12960640803,12960648008,12965400008,12965408104,12965472003,12965472905,14120400602,14120408709,14120472608,14125232704,14125864500,14160024901,14160096005,14160096907,14160656708,14165416804,14165480703,14400056704,14400616505,14400680404,14400688500,14405440500,14405448607,14440232708,14440864504,14445624600,14445696606,14480416808,14480480707,14480488803,14485240803,14485248008,14485800604,14485808700,14720440504,14720448600,14725200600,14725208707,14725272606,14725832407,14760064803,14760624604,14765456706,16200032409,16200664205,16205424301,16205496307,16240216509,16240280408,16240288504,16240840209,16240848305,16245040504,16245048600,16245600305,16245608401,16245672300,16280464508,16285224604,16285856400,16520424305,16520496300,16525256407,16525816208,16525880107,16525888203,16560040508,16560048604,16560600309,16560608405,16560672304,16565432400,16800000305,16800008401,16800072300,16800632101,16805464203,16840256400,16840816201,16840880100,16840888207,16845016507,16845080406,16845088502,16845640207,16845648303,16880432404,16885264506,16885824307,16885896302,18000080109,18000088205,18000640801,18000648006,18000648908,18005400006,18005400908,18005408102,18005472001,18005472903,18040264209,18040824901,18040896005,18040896907,18045024305,18045096300,18045656101,18080440202,18080448309,18085200309,18085208405,18085272304,18085832105,18320400901,18320408106,18320472005,18320472907,18325232101,18360024309,18360096304,18360656105,18365416201,18365480100,18365488207,18600056101,18600616804,18600680703,18605448004,18605448906,18640232105,18640864803,18645064207,18645624008,18645696003,18645696905,18680416205,18680480104,18680488200,18685240200,18685248307,18685800001,18685800903,18685808108,18685872007,18685872909,18920440803,18920448008,18925200008,18925208104,18925272003,18925272905,18925832706,18960064200,18960624001,18960624903,18960696007,18960696909,18965456103,20120456708,20125216804,20125280703,20125840504,20125848600,20160000003,20160000905,20160072009,20160072900,20160632701,20165464803,20400032708,20400664504,20405424600,20405496606,20440216808,20440280707,20440288803,20440840508,20440848604,20445040803,20445048008,20445600604,20445608700,20480464807,20485224001,20485224903,20485296007,20485296909,20720424604,20725256706,20725816507,20725880406,20725888502,20760040807,20760048001,20760048903,20760600608,20760608704,20760672603,22200016509,22200080408,22200088504,22200640209,22200648305,22205400305,22205408401,22205472300,22240264508,22240824309,22240896304,22245024604,22245656400,22280440501,22280448608,22285200608,22285208704,22285272603,22285832404,22520400309,22520408405,22520472304,22525232400,22525864207,22560024608,22560096603,22560656404,22565416500,22565488506,22800056400,22800616201,22800680100,22800688207,22805440207,22805448303,22840232404,22840864200,22845064506,22845624307,22845696302,22880416504,22880480403,22885248606,22885800300,22885808407,22885872306,24000064209,24000624901,24000696005,24000696907,24005456101,24040240202,24040248309,24040800003,24040800905,24040872009,24040872900,24045000309,24045008405,24045072304,24045632105,24080424302,24080496308,24085256404,24085816205,24085880104,24085888200,24320456105,24325216201,24325280100,24325288207,24325840803,24325848008,24360000302,24360008409,24360072308,24360632109,24365464200,24600032105,24600664803,24605424008,24605496003,24605496905,24640216205,24640280104,24640288200,24640840807,24640848001,24640848903,24645040200,24645048307,24645600001,24645600903,24645608108,24645672007,24645672909,24680464204,24685224300,24685296306,24685856107,24920424001,24920424903,24920496007,24920496909,24925256103,24925816806,24925880705,24925888801,24960040204,24960048300,24960600005,24960600907,24960608101,24960672000,24960672902,24965432107,26120432701,26125264803,26125824604,26160056109,26160616801,26160680700,26160688807,26165440807,26165448001,26165448903,26400016808,26400080707,26400088803,26400640508,26400648604,26405400604,26405408700,26440264807,26440824608,26440896603,26445024001,26445024903,26445096007,26445096909,26480440800,26480448005,26480448907,26485200005,26485200907,26485208101,26485272000,26485272902,26485832703,26720400608,26720408704,26720472603,26725864506,26760024005,26760024907,26760096000,26760096902,26760656703,26765480709,26765488805,28200064508,28200624309,28200696304,28205456400,28240240501,28240248608,28240800302,28240808409,28240872308,28245000608,28245008704,28245072603,28245632404,28280424601,28280496607,28285256703,28285816504,28285880403,28520456404,28525216500,28525288506,28525840200,28525848307,28560000601,28560008708,28560072607,28560632408,28800032404,28800664200,28805424307,28805496302,28840216504,28840280403,28840840204,28840848300,28845048606,28845600300,28845608407,28845672306,28880464503,28885296605,28885856406,30000040202,30000048309,30000600003,30000600905,30000672009,30000672900,30005432105,30040224302,30040296308,30040856109,30045056404,30045616205,30045680104,30045688200,30080400306,30080408402,30080472301,30085232408,30085864204,30320432109,30325264200,30325824001,30325824903,30325896007,30325896909,30360056408,30360616209,30360680108,30360688204,30365440204,30365448300,30600016205,30600080104,30600088200,30600640807,30600648001,30600648903,30605400001,30605400903,30605408108,30605472007,30605472909,30640264204,30640824005,30640824907,30640896000,30640896902,30645024300,30645096306,30645656107,30680440208,30680448304,30685200304,30685208400,30685832100,30920400005,30920400907,30920408101,30920472000,30920472902,30925232107,30925864805,30960024304,30960656100,30965416207,30965480106,30965488202,32120416801,32120480700,32120488807,32125240807,32125248001,32125248903,32125800608,32125808704,32125872603,32160032102,32160664800,32165424005,32165424907,32165496000,32165496902,32400064807,32400624608,32400696603,32440240800,32440248005,32440248907,32440800601,32440808708,32440872607,32445000005,32445000907,32445008101,32445072000,32445072902,32445632703,32480424009,32480424900,32480496004,32480496906,32485256100,32485816803,32485880702,32485888809,32720456703,32725280709,32725288805,32725848606,32760000009,32760000900,32760008105,32760072004,32760072906,32760632707,32765464809,34200040501,34200048608,34200600302,34200608409,34200672308,34205432404,34240224601,34240296607,34240856408,34245056703,34245616504,34245680403,34280400605,34280408701,34280472600,34285232707,34285864503,34520432408,34525824300,34525896306,34560056707,34560616508,34560680407,34560688503,34565440503,34800016504,34800080403,34800640204,34800648300,34805400300,34805408407,34805472306,34840264503,34840824304,34845096605,34845656406,34880440507,34880448603,34885200603,34885272609,36000024302,36000096308,36000656109,36005416205,36005480104,36005488200,36040200306,36040208402,36040272301,36040832102,36045032408,36045664204,36080456401,36085216508,36085280407,36085288503,36085840208,36085848304,36320416209,36320480108,36320488204,36325240204,36325248300,36325800005,36325800907,36325808101,36325872000,36325872902,36360032401,36360664208,36365424304,36600064204,36600624005,36600624907,36600696000,36600696902,36605456107,36640240208,36640248304,36640800009,36640800900,36640808105,36640872004,36640872906,36645000304,36645008400,36645632100,36680424308,36680496303,36685816200,36685888206,36920456100,36925216207,36925280106,36925288202,36925840809,36925848003,36925848905,36960000308,36960008404,36960072303,36960632104,36965464206,38120464800,38125224005,38125224907,38125296000,38125296902,38125856703,38160016202,38160080101,38160088208,38160640804,38160648009,38160648900,38165400009,38165400900,38165408105,38165472004,38165472906,38400040800,38400048005,38400048907,38400600601,38400608708,38400672607,38405432703,38440224009,38440224900,38440296004,38440296906,38440856707,38445056100,38445616803,38445680702,38445688809,38480400002,38480400904,38480408109,38480472008,38485232104,38485864802,38720432707,38725264809,38725896605,38760056104,38760616807,38760680706,38760688802,38765440802,38765448007,38765448909,40200024601,40200096607,40200656408,40205416504,40205480403,40240200605,40240208701,40240272600,40240832401,40245032707,40245664503,40280456700,40285216807,40285280706,40285288802,40285840507,40285848603,40520416508,40520480407,40520488503,40525240503,40525800304,40525808400,40560032700,40560664507,40565424603,40565496609,40800064503,40800624304,40805456406,40840240507,40840248603,40840800308,40840808404,40840872303,40845000603,40845072609,40880424607,40880496602,40885256709,40885880409,40885888505,42000000306,42000008402,42000072301,42000632102,42005464204,42040256401,42040816202,42040880101,42040888208,42045016508,42045080407,42045088503,42045640208,42045648304,42080432405,42085264507,42085824308,42085896303,42320464208,42325224304,42325856100,42360016501,42360080400,42360088507,42360640201,42360648308,42365400308,42365408404,42365472303,42600040208,42600048304,42600600009,42600600900,42600608105,42600672004,42600672906,42605432100,42640224308,42640296303,42640856104,42645616200,42645688206,42680400301,42680408408,42680472307,42685232403,42920432104,42925264206,42925824007,42925824909,42925896002,42925896904,42960056403,42960616204,42960680103,42965448306,44120440804,44120448009,44120448900,44125200009,44125200900,44125208105,44125272004,44125272906,44125832707,44160064201,44160624002,44160624904,44160696008,44165456104,44400024009,44400024900,44400096004,44400096906,44400656707,44405416803,44405480702,44405488809,44440200002,44440200904,44440208109,44440272008,44440832700,44445032104,44445664802,44480456108,44485216204,44485280103,44485840806,44485848000,44485848902,44720416807,44720480706,44720488802,44725240802,44725248007,44725248909,44725800603,44725872609,44760032108,44760664806,44765424000,44765424902,44765496006,44765496908,46200000605,46200008701,46200072600,46200632401,46205464503,46240256700,46240816501,46240880400,46240888507,46245016807,46245080706,46245088802,46245640507,46245648603,46280432704,46285264806,46285824607,46285896602,46520464507,46525224603,46525296609,46560016800,46560088806,46560640500,46560648607,46565400607,46565408703,46565472602,46800040507,46800048603,46800600308,46800608404,46800672303,46840224607,46840296602,46840856403,46845056709,46845680409,46845688505,46880400600,46880408707,46880472606,46885232702,46885864509,48000056401,48000616202,48000680101,48000688208,48005440208,48005448304,48040232405,48040864201,48045064507,48045624308,48045696303,48080416505,48080480404,48080488500,48085240500,48085248607,48085800301,48085808408,48085872307,48320440201,48320448308,48325200308,48325208404,48325272303,48325832104,48360064500,48360624301,48360696307,48365456403,48600024308,48600096303,48600656104,48605416200,48605488206,48640200301,48640208408,48640272307,48640832108,48645032403,48680456407,48685216503,48685280402,48685288509,48685840203,48920416204,48920480103,48925248306,48925800000,48925800902,48925808107,48925872006,48925872908,48960032407,48960664203,48965496305,50120424002,50120424904,50120496008,50125256104,50125816807,50125880706,50125888802,50160040205,50160048301,50160600006,50160600908,50160608102,50160672001,50160672903,50165432108,50400000002,50400000904,50400008109,50400072008,50400632700,50405464802,50440256108,50440816800,50440888806,50445016204,50445080103,50445640806,50445648000,50445648902,50480432101,50485264203,50485824004,50485824906,50485896901,50720464806,50725224000,50725224902,50725296006,50725296908,50725856709,50760016208,50760080107,50760088203,50760648004,50760648906,50765400004,50765400906,50765408100,50765472901,52200056700,52200616501,52200680400,52200688507,52205440507,52205448603,52240232704,52240864500,52245064806,52245624607,52245696602,52280416804,52280480703,52285248004,52285248906,52285800600,52285808707,52285872606,52520440500,52520448607,52525200607,52525208703,52525272602,52525832403,52560624600,52560696606,52565456702,52800024607,52800096602,52800656403,52805480409,52805488505,52840200600,52840208707,52840272606,52840832407,52845032702,52845664509,52880456706,52885216802,52885280701,52885288808,52885840502,52885848609,54000032405,54000664201,54005424308,54005496303,54040216505,54040280404,54040288500,54040840205,54040848301,54045040500,54045048607,54045600301,54045608408,54045672307,54080464504,54085224600,54085296606,54085856407,54320424301,54320496307,54325256403,54325816204,54325880103,54360040504,54360048600,54360600305,54360608401,54360672300,54365432407,54600000301,54600008408,54600072307,54600632108,54640256407,54640816208,54640880107,54640888203,54645016503,54645080402,54645088509,54645640203,54680432400,54685264502,54685824303,54685896309,54920464203,54925296305,54925856106,54960016507,54960080406,54960088502,54960640207,54960648303,54965400303,54965472309,56120400006,56120400908,56120408102,56120472001,56120472903,56125232108,56125864806,56160024305,56160096300,56160656101,56165416208,56165480107,56165488203,56400056108,56400616800,56400688806,56405440806,56405448000,56405448902,56440232101,56445064203,56445624004,56445624906,56445696901,56480416201,56480480100,56480488207,56485240207,56485248303,56485800008,56485808104,56485872003,56485872905,56720448004,56720448906,56725200004,56725200906,56725208100,56725272901,56725832702,56760064207,56760624008,56760696003,56760696905,58200032704,58200664500,58205424607,58205496602,58240216804,58240280703,58240840504,58240848600,58245048004,58245048906,58245600600,58245608707,58245672606,58280464803,58285224008,58285296003,58285296905,58285856706,58520424600,58520496606,58525256702,58525816503,58525880402,58525888509,58560040803,58560048008,58560600604,58560608700,58565432706,58800000600,58800008707,58800072606,58800632407,58805464509,58840256706,58840816507,58840880406,58840888502,58845016802,58845080701,58845088808,58845640502,58845648609,58885264801,58885824602,58885896608,60000016505,60000080404,60000088500,60000640205,60000648301,60005400301,60005408408,60005472307,60040264504,60040824305,60040896300,60045024600,60045096606,60045656407,60080440508,60080448604,60085200604,60085208700,60085832400,60320400305,60320408401,60320472300,60325232407,60325864203,60360024604,60360656400,60365416507,60365480406,60365488502,60600056407,60600616208,60600680107,60600688203,60605440203,60640232400,60640864207,60645064502,60645624303,60645696309,60680416500,60680488506,60685240506,60685248602,60685800307,60685808403,60685872302,60920440207,60920448303,60925200303,60925272309,60960064506,60960624307,60960696302,60965456409,62120456101,62125216208,62125280107,62125288203,62125848004,62125848906,62160000309,62160008405,62160072304,62160632105,62165464207,62400032101,62405424004,62405424906,62405496901,62440216201,62440280100,62440288207,62440840803,62440848008,62445040207,62445048303,62445600008,62445608104,62445672003,62445672905,62480464200,62485224307,62485296302,62485856103,62720424008,62720496003,62720496905,62725816802,62725880701,62725888808,62760040200,62760048307,62760600001,62760600903,62760608108,62760672007,62760672909,62765432103,64200016804,64200080703,64200640504,64200648600,64205400600,64205408707,64205472606,64240264803,64240824604,64245024008,64245096003,64245096905,64245656706,64280440807,64280448001,64280448903,64285200001,64285200903,64285208108,64285272007,64285272909,64520400604,64520408700,64525232706,64525864502,64560024001,64560024903,64560096007,64560096909,64565416806,64565480705,64565488801,64800056706,64800616507,64800680406,64800688502,64805440502,64805448609,64840864506,64845064801,64845624602,64845696608,64880480709,64880488805,64885240805,64885248901,64885800606,64885808702,64885872601,66000064504,66000624305,66000696300,66005456407,66040240508,66040248604,66040800309,66040808405,66040872304,66045000604,66045008700,66045632400,66080424608,66080496603,66085816500,66085888506,66320456400,66325216507,66325280406,66325288502,66325840207,66325848303,66360000608,66360008704,66360072603,66360632404,66365464506,66600032400,66600664207,66605424303,66605496309,66640216500,66640288506,66640840200,66640848307,66645040506,66645048602,66645600307,66645608403,66645672302,66685224606,66685296601,66685856402,66920424307,66920496302,66925256409,66925880109,66925888205,66960048606,66960600300,66960608407,66960672306,66965432402,68120432105,68125264207,68125824008,68125896003,68125896905,68160056404,68160616205,68160680104,68160688200,68165440200,68165448307,68400016201,68400080100,68400088207,68400640803,68400648008,68405400008,68405408104,68405472003,68405472905,68440264200,68440824001,68440824903,68440896007,68440896909,68445024307,68445096302,68445656103,68480440204,68480448300,68485200300,68485208407,68485272306,68485832107,68720400001,68720400903,68720408108,68720472007,68720472909,68725232103,68725864801,68760024300,68760096306,68760656107,68765416203,68765480102,68765488209,70200064803,70200624604,70205456706,70240240807,70240248001,70240248903,70240800608,70240808704,70240872603,70245000001,70245000903,70245008108,70245072007,70245072909,70280424005,70280424907,70280496000,70280496902,70285256107,70285880709,70285888805,70525216806,70525280705,70525288801,70525840506,70525848602,70560000005,70560000907,70560008101,70560072000,70560072902,70560632703,70565464805,70800664506,70805424602,70805496608,70840280709,70840288805,70840848606,70845040805,70845048901,70845600606,70845608702,70845672601,70880464809,70885224003,70885224905,70885296009,70885296900,70885856701,72000040508,72000048604,72000600309,72000608405,72000672304,72005432400,72040224608,72040296603,72040856404,72045616500,72045688506,72080400601,72080408708,72080472607,72085232703,72320432404,72325264506,72325824307,72325896302,72360056703,72360616504,72360680403,72365448606,72600016500,72600088506,72600640200,72600648307,72605400307,72605408403,72605472302,72640824300,72640896306,72645024606,72645096601,72645656402,72680440503,72685208706,72685272605,72685832406,72920400300,72920408407,72920472306,72925232402,72925864209,72960096605,72960656406,72965416502,72965480401,72965488508,74120416205,74120480104,74120488200,74125240200,74125248307,74125800001,74125800903,74125808108,74125872007,74125872909,74160032408,74160664204,74165424300,74165496306,74400064200,74400624001,74400624903,74400696007,74400696909,74405456103,74440240204,74440248300,74440800005,74440800907,74440808101,74440872000,74440872902,74445000300,74445008407,74445072306,74445632107,74480424304,74485256406,74485816207,74485880106,74485888202,74720456107,74725216203,74725280102,74725288209,74725840805,74725848901,74760000304,74760008400,74760632100,74765464202,76200040807,76200048001,76200048903,76200600608,76200608704,76200672603,76240224005,76240224907,76240296000,76240296902,76240856703,76245056107,76245680709,76245688805,76280400009,76280400900,76280408105,76280472004,76280472906,76285232100,76285864809,76520432703,76525264805,76525824606,76525896601,76560056100,76560616803,76560680702,76560688809,76565440809,76565448003,76565448905,76800080709,76800088805,76800648606,76805400606,76805408702,76805472601,76840264809,76840896605,76845024003,76845024905,76845096009,76845096900,76845656701,76880440802,76880448007,76880448909,76885200007,76885200909,76885208103,76885272002,76885272904,76885832705,78000024608,78000096603,78000656404,78005416500,78005488506,78040200601,78040208708,78040272607,78040832408,78045032703,78080456707,78085216803,78085280702,78085288809,78085840503,78320416504,78320480403,78325248606,78325800300,78325808407,78325872306,78360032707,78360664503,78365496605,78600624300,78600696306,78605456402,78640240503,78640800304,78640808400,78645008706,78645072605,78645632406,78680424603,78680496609,78685256705,78685816506,78685880405,78685888501,78920456406,78925216502,78925280401,78925288508,78925840202,78925848309,78960000603,78960072609,78965464501,80120464204,80125224300,80125296306,80125856107,80160016508,80160080407,80160088503,80160640208,80160648304,80165400304,80165408400,80400040204,80400048300,80400600005,80400600907,80400608101,80400672000,80400672902,80405432107,80440224304,80440856100,80445056406,80445616207,80445680106,80445688202,80480400308,80480408404,80480472303,80485864206,80720432100,80725264202,80725824003,80725824905,80725896009,80725896900,80760616200,80760688206,80765440206,80765448302,82200024005,82200024907,82200096000,82200096902,82200656703,82205480709,82205488805,82240200009,82240200900,82240208105,82240272004,82240272906,82240832707,82245032100,82245664809,82280456104,82285216200,82285288206,82285840802,82285848007,82285848909,82520416803,82520480702,82520488809,82525240809,82525248003,82525248905,82525808706,82525872605,82560032104,82560664802,82565424007,82565424909,82565496002,82565496904,82800064809,82800696605,82805456701,82840240802,82840248007,82840248909,82840800603,82840872609,82845000007,82845000909,82845008103,82845072002,82845072904,82845632705,82880424000,82880424902,82880496006,82880496908,82885256102,82885816805,82885880704,82885888800,84000000601,84000008708,84000072607,84000632408,84040256707,84040816508,84040880407,84040888503,84045016803,84045080702,84045088809,84045640503,84080432700,84085264802,84085824603,84085896609,84320464503,84325296605,84325856406,84360016807,84360080706,84360088802,84360640507,84360648603,84365400603,84365472609,84600040503,84600600304,84600608400,84605432406,84640224603,84640296609,84645056705,84645616506,84645680405,84645688501,84680400607,84680408703,84680472602,84685232709,84685864505,84925264501,84925824302,84925896308,84960056709,84960680409,84960688505,84965440505,84965448601,86120440208,86120448304,86125200304,86125208400,86125832100,86160064507,86160624308,86160696303,86400024304,86400656100,86405416207,86405480106,86405488202,86440200308,86440208404,86440272303,86440832104,86445664206,86480456403,86485280409,86485288505,86485848306,86720416200,86720488206,86725240206,86725248302,86725800007,86725800909,86725808103,86725872002,86725872904,86760032403,86765424306,86765496301,88200000009,88200000900,88200008105,88200072004,88200072906,88200632707,88205464809,88240256104,88240816807,88240880706,88240888802,88245016200,88245088206,88245640802,88245648007,88245648909,88280432108,88285824000,88285824902,88285896006,88285896908,88520464802,88525224007,88525224909,88525296002,88525296904,88525856705,88560016204,88560080103,88560640806,88560648000,88560648902,88565400000,88565400902,88565408107,88565472006,88565472908,88800040802,88800048007,88800048909,88800600603,88800672609,88805432705,88840224000,88840224902,88840296006,88840296908,88840856709,88845056102,88845616805,88845680704,88845688800,88880400004,88880400906,88880408100,88880472901,88885232106,88885864804,90000056707,90000616508,90000680407,90000688503,90005440503,90040232700,90040864507,90045064802,90045624603,90045696609,90080416800,90080488806,90085240806,90085248000,90085248902,90085800607,90085808703,90085872602,90320440507,90320448603,90325200603,90325272609,90360064806,90360624607,90360696602,90365456709,90600024603,90600096609,90605416506,90605480405,90605488501,90640200607,90640208703,90640272602,90640832403,90645032709,90645664505,90680456702,90685216809,90685280708,90685288804,90685840509,90685848605,90920480409,90920488505,90925240505,90925248601,90925800306,90925808402,90925872301,90960032702,90960664509,90965424605,90965496600,92120424308,92120496303,92125816200,92125888206,92160040500,92160048607,92160600301,92160608408,92160672307,92165432403,92400000308,92400008404,92400072303,92400632104,92405464206,92440256403,92440816204,92440880103,92445080409,92445088505,92445648306,92480432407,92485264509,92485896305,92725224306,92725296301,92725856102,92760016503,92760080402,92760088509,92760640203,92765408406,92765472305,94200056104,94200616807,94200680706,94200688802,94205440802,94205448007,94205448909,94240232108,94240864806,94245624000,94245624902,94245696006,94245696908,94280416208,94280480107,94280488203,94285240203,94285800004,94285800906,94285808100,94285872901,94520440806,94520448000,94520448902,94525200000,94525200902,94525208107,94525272006,94525272908,94525832709,94560064203,94560624004,94560624906,94560696901,94565456106,94800024000,94800024902,94800096006,94800096908,94800656709,94805416805,94805480704,94805488800,94840200004,94840200906,94840208100,94840272901,94840832702,94845032106,94845664804,94885216206,94885280105,94885288201,94885840808,94885848002,94885848904,96000032700,96000664507,96005424603,96005496609,96040216800,96040288806,96040840500,96040848607,96045040806,96045048000,96045048902,96045600607,96045608703,96045672602,96085224004,96085224906,96085296901,96085856702,96320424607,96320496602,96325256709,96325880409,96325888505,96360048004,96360048906,96360600600,96360608707,96360672606,96365432702,96600000607,96600008703,96600072602,96600632403,96605464505,96640256702,96640816503,96640880402,96640888509,96645016809,96645080708,96645088804,96645640509,96645648605,96680432706,96685264808,96685824609,96685896604,96920464509,96925224605,96925296600,96925856401,96960016802,96960080701,96960088808,96960640502,96960648609,96965400609,96965408705,96965472604,98120400301,98120408408,98120472307,98125232403,98160024600,98160096606,98160656407,98165416503,98165480402,98165488509,98400056403,98400616204,98400680103,98405448306,98440232407,98440864203,98445064509,98445696305,98480416507,98480480406,98480488502,98485240502,98485248609,98485800303,98485872309,98720440203,98725208406,98725272305,98725832106,98760064502,98760624303,98760696309,98765456405,102006162060,102006882012,102054402012,102054483084,102402324096,102450645000,102456243012,102456963072,102804165096,102804804084,102804885048,102852405048,102852486000,102858084012,102858723000,105204483012,105252003012,105252084084,105252723072,105258321084,105600645048,105606963000,105654564072,108000243012,108000963072,108006561084,108054162048,108054801036,108402084012,108402723000,108408321012,108450324072,108456642036,108804564000,108852165072,108852804060,108852885024,108858402072,108858483036,120006648084,120054240024,120054249048,120054960084,120402801096,120408408012,120408480060,120408489084,120450483012,120456000060,120456009084,120456081024,120456720012,120456729036,120804642096,120852963000,120858561012,123204240060,123204249084,123204960012,123204969036,123252561084,123258168000,123258888060,123600402096,123606009012,123606081060,123606729072,123654321012,126000000060,126000009084,126000081024,126000720012,126000729036,126006327048,126054648060,126402561012,126408168048,126408807036,126450162084,126450801072,126450882036,126456480048,126456489060,126852642072,126858240084,126858960036,129252240048,129252249060,129252969012,129258567024,129600162012,129600801000,129600882072,129606408036,129606480084,129654000084,129654081048,129654720036,141204006024,141204087096,141204726084,141252327048,141258645000,141600249012,141600969072,141606567084,141654168048,141654807036,144000567048,144006804048,144006885000,144054405000,144054486072,144402327084,144408645048,144456246000,144456966060,144804168084,144804807072,144804888036,144852408036,144852480084,144858006048,144858087000,147204405048,147204486000,147252006000,147252087072,147252726060,147258324072,147600648036,147606246048,147654567060,162000324096,162054243012,162054963072,162402165096,162402804084,162402885048,162408402096,162450405048,162450486000,162456084012,162456723000,162804645084,162852246048,162858564000,165204963000,165252564072,165258162084,165258801072,165258882036,165600405084,165600486048,165606003096,165606723048,165654324000,168000084012,168000723000,168006321012,168054642036,168402564000,168408162012,168408801000,168408882072,168450165072,168450804060,168450885024,168456402072,168456483036,168804324048,168852645060,168858243072,168858963024,180000801096,180006408012,180006480060,180006489084,180054000060,180054009084,180054081024,180054720012,180054729036,180402642096,180408249012,180408969072,180450963000,180456561012,180804402024,180804483096,180852003096,180852723048,183204009012,183204081060,183204729072,183252321012,183600243096,183600963048,183654162012,183654801000,183654882072,186000561012,186006168048,186006807036,186054480048,186054489060,186408648036,186450642072,186456240084,186456960036,186804801048,186804882000,186852402000,186852483072,186858000012,186858009036,186858081084,186858720072,186858729096,189204408036,189204480084,189252000084,189252081048,189252720036,189258327060,189600642000,189606240012,189606249036,189606960072,189606969096,189654561036,201204567084,201252168048,201252807036,201258405048,201258486000,201600000036,201600720096,201600729000,201606327012,201654648036,204000327084,204006645048,204054246000,204054966060,204402168084,204402807072,204402888036,204408405084,204408486048,204450408036,204450480084,204456006048,204456087000,204804648072,204852240012,204852249036,204852960072,204852969096,207204246048,207252567060,207258165072,207258804060,207258885024,207600408072,207600480012,207600489036,207606006084,207606087048,207606726036,222000165096,222000804084,222000885048,222006402096,222054084012,222054723000,222402645084,222408243096,222408963048,222450246048,222456564000,222804405012,222804486084,222852006084,222852087048,222852726036,222858324048,225204003096,225204723048,225252324000,225258642072,225600246084,225600966036,225606564048,225654165000,225654885060,228000564000,228006162012,228006801000,228006882072,228054402072,228054483036,228402324048,228408642000,228450645060,228456243072,228456963024,228804165048,228804804036,228852486060,228858003000,228858084072,228858723060,240000642096,240006249012,240006969072,240054561012,240402402024,240402483096,240408000036,240408720096,240408729000,240450003096,240450723048,240804243024,240804963084,240852564048,240858801048,240858882000,243252162012,243252801000,243252882072,243258408036,243258480084,243600003024,243600084096,243600723084,243606321096,243654642000,246006648036,246054240084,246054960036,246402801048,246402882000,246408408072,246408480012,246408489036,246450402000,246450483072,246456000012,246456009036,246456081084,246456720072,246456729096,246804642048,246852243000,246852963060,246858561072,249204240012,249204249036,249204960072,249204969096,249252561036,249258168060,249258888012,249600402048,249600483000,249606009072,249606081012,249606720000,249606729024,249654321072,261204327012,261252648036,261258246048,261600561096,261606168012,261606807000,261606888072,261654408072,261654480012,261654489036,264000168084,264000807072,264000888036,264006405084,264006486048,264054006048,264054087000,264402648072,264408246084,264408966036,264450240012,264450249036,264450960072,264450969096,264804408000,264804489072,264852009072,264852081012,264852720000,264852729024,264858327036,267204006084,267204087048,267204726036,267258645060,267600249072,267600960000,267600969024,267606567036,267654807096,282000645084,282006243096,282006963048,282054564000,282402405012,282402486084,282408003024,282408084096,282408723084,282450006084,282450087048,282450726036,282456324048,282804246012,282804966072,282852567036,282858165048,282858804036,285204564048,285252165000,285252885060,285258402000,285258483072,285600006012,285600087084,285600726072,285606324084,288000324048,288006642000,288054243072,288054963024,288402165048,288402804036,288408402048,288408483000,288450486060,288456003000,288456084072,288456723060,288804645036,288858564060,300000402024,300000483096,300006000036,300006720096,300006729000,300402243024,300402963084,300408561096,300450564048,300456801048,300456882000,300804003060,300804084024,300804723012,300852324084,300858642048,303204321096,303252642000,303258240012,303258249036,303258960072,303258969096,303600564084,303606162096,303606801084,303606882048,303654402048,303654483000,306000801048,306000882000,306006408072,306006480012,306006489036,306054000012,306054009036,306054081084,306054720072,306054729096,306402642048,306408249072,306408960000,306408969024,306450243000,306450963060,306456561072,306804402084,306804483048,306852003048,306852084000,306858321000,309204009072,309204081012,309204720000,309204729024,309252321072,309600243048,309606561000,309654162072,309654801060,309654882024,321204168012,321204807000,321204888072,321252408072,321252480012,321252489036,321258006084,321258087048,321258726036,321600321024,321606648000,321654249072,321654960000,321654969024,324000648072,324006246084,324006966036,324402408000,324402489072,324408006012,324408087084,324408726072,324450009072,324450081012,324450720000,324450729024,324456327036,324804240096,324804249000,324804960048,324804969060,324852561000,324858168036,324858807024,324858888096,327204567036,327252807096,327258486060,327600000096,327600009000,327600720048,327600729060,327606327072,327654648096,342000405012,342000486084,342006003024,342006084096,342006723084,342054324048,342402246012,342402966072,342408564084,342450567036,342456165048,342456804036,342804087012,342804726000,342852327072,342858645036,345204324084,345258243000,345258963060,345600567072,345606165084,345606804072,345606885036,345654405036,348000165048,348000804036,348006402048,348006483000,348054003000,348054084072,348054723060,348402645036,348408243048,348456564060,348804405072,348804486036,348852006036,348852726096,360000243024,360000963084,360006561096,360054801048,360054882000,360402003060,360402084024,360402723012,360408321024,360450324084,360456642048,360804564012,360852165084,360852804072,360852885036,360858402084,360858483048,363204162096,363204801084,363204882048,363252402048,363252483000,363258009072,363258081012,363258720000,363258729024,363600324012,363606642084,363654243048,366000642048,366006249072,366006960000,366006969024,366054561072,366402402084,366402483048,366408000096,366408009000,366408720048,366408729060,366450003048,366450084000,366456321000,366804243084,366804963036,366858162000,366858882060,369204561000,369252162072,369252801060,369252882024,369258408096,369258480036,369600003084,369600084048,369600723036,369606321048,369654642060,381204648000,381252249072,381252960000,381252969024,381258567036,381600162024,381600801012,381600882084,381606408048,381606480096,381606489000,381654000096,381654009000,381654720048,381654729060,384000408000,384000489072,384006006012,384006087084,384006726072,384054327036,384402240096,384402249000,384402960048,384402969060,384408567072,384450561000,384456168036,384456807024,384456888096,384804000024,384804009048,384804081096,384804720084,384852321048,384858648024,387204327072,387252648096,387600561048,387606168072,387606807060,387606888024,387654408024,387654480072,387654489096,402000246012,402000966072,402006564084,402054165048,402054804036,402402087012,402402726000,402408324012,402450327072,402456645036,402804567000,402852168072,402852807060,402852888024,402858405072,402858486036,405204165084,405204804072,405204885036,405252405036,405258003048,405258084000,405600327000,405606645072,405654246036,405654966096,408000645036,408006243048,408054564060,408402405072,408402486036,408408003084,408408084048,408408723036,408450006036,408450726096,408804246072,408804966024,408852567096,408858804096,420000003060,420000084024,420000723012,420006321024,420054642048,420402564012,420408162024,420408801012,420408882084,420450165084,420450804072,420450885036,420456402084,420456483048,420852645072,420858243084,420858963036,423204642084,423252243048,423258561000,423600165012,423600804000,423600885072,423606402012,423606483084,423654003084,423654084048,423654723036,426000402084,426000483048,426006000096,426006009000,426006720048,426006729060,426054321000,426402243084,426402963036,426408561048,426456162000,426456882060,426804003012,426804084084,426804723072,426852324036,429204321048,429252642060,429258240072,429258249096,429258960024,429258969048,429600564036,429606162048,429606801036,429654483060,441204408048,441204480096,441204489000,441252000096,441252009000,441252720048,441252729060,441258327072,441600642012,441606240024,441606249048,441606960084,441654561048,444000240096,444000249000,444000960048,444000969060,444006567072,444054168036,444054807024,444054888096,444402000024,444402009048,444402081096,444402720084,444408327000,444450321048,444456648024,444804561084,444852162048,444852801036,444858408060,444858480000,444858489024,447204168072,447204807060,447204888024,447252408024,447252480072,447252489096,447258006036,447258726096,447600321084,447606648060,447654240000,447654249024,447654960060,447654969084,462000087012,462000726000,462006324012,462054645036,462402567000,462408165012,462408804000,462408885072,462450168072,462450807060,462450888024,462456405072,462456486036,462804327048,462852648060,462858246072,462858966024,465204645072,465252246036,465252966096,465600168000,465600888060,465606405000,465606486072,465654006072,465654087036,465654726024,468000405072,468000486036,468006003084,468006084048,468006723036,468402246072,468402966024,468408564036,468450567096,468456804096,468804006000,468804087072,468804726060,468852327024,468858645096,480000564012,480006162024,480006801012,480006882084,480054402084,480054483048,480408642012,480450645072,480456243084,480456963036,480804804048,480804885000,480852405000,480852486072,480858003012,480858084084,480858723072,483204402012,483204483084,483252003084,483252084048,483252723036,483258321048,483600645000,483606243012,483606963072,483654564036,486000243084,486000963036,486006561048,486054162000,486054882060,486402003012,486402084084,486402723072,486408321084,486450324036,486804564072,486852165036,486852804024,486852885096,486858402036,489204162048,489204801036,489252483060,489258000000,489258009024,489258081072,489258720060,489258729084,489600324072,489606642036,501204240024,501204249048,501204960084,501252561048,501258168072,501258807060,501258888024,501600483012,501606000060,501606009084,501606081024,501606720012,501606729036,501654321084,504000000024,504000009048,504000081096,504000720084,504006327000,504054648024,504402561084,504408168000,504408888060,504450162048,504450801036,504456408060,504456480000,504456489024,504804321012,504852642036,504858240048,504858249060,504858969012,507204648060,507252240000,507252249024,507252960060,507252969084,507258567096,507600162084,507600801072,507600882036,507606480048,507606489060,507654000048,507654009060,507654081000,507654729012,522000567000,522006165012,522006804000,522006885072,522054405072,522054486036,522402327048,522408645000,522450648060,522456246072,522456966024,522804168048,522804807036,522852480048,522852489060,522858006000,522858087072,522858726060,525204405000,525204486072,525252006072,525252087036,525252726024,525258324036,525606246000,525606966060,525654567024,528000246072,528000966024,528006564036,528054804096,528402006000,528402087072,528402726060,528408324072,528450327024,528456645096,528804567060,528852168024,528852807012,528852888084,528858405024,528858486096,540006642012,540054243084,540054963036,540402804048,540402885000,540408483012,540450405000,540450486072,540456003012,540456084084,540456723072,540804645048,540852246000,540852966060,540858564072,543204243012,543204963072,543252564036,543258162048,543258801036,543600405048,543600486000,543606084012,543606723000,543654324072,546000003012,546000084084,546000723072,546006321084,546402564072,546408162084,546408801072,546408882036,546450165036,546450804024,546450885096,546456402036,546804324000,546852645024,546858243036,546858963096,549204642036,549258561060,549600165072,549600804060,549600885024,549606402072,549606483036,549654003036,549654723096,561204000060,561204009084,561204081024,561204720012,561204729036,561252321084,561258648060,561600963000,561606561012,561654162084,561654801072,561654882036,564000561084,564006168000,564006888060,564054408060,564054480000,564054489024,564402321012,564450642036,564456240048,564456249060,564456969012,564804162012,564804801000,564804882072,564852402072,564852483036,564858000084,564858081048,564858720036,567204480048,567204489060,567252000048,567252009060,567252081000,567252729012,567258327024,567600642072,567606240084,567606960036,582000327048,582006645000,582054246072,582054966024,582402168048,582402807036,582408405048,582408486000,582450480048,582450489060,582456006000,582456087072,582456726060,582804648036,582852240084,582852960036,582858567060,585204246000,585204966060,585252567024,585258165036,585258804024,585258885096,585600408036,585600480084,585606006048,585606087000,585654327060,588000006000,588000087072,588000726060,588006324072,588054645096,588402567060,588408165072,588408804060,588408885024,588450168024,588450807012,588450888084,588456405024,588456486096,588852648012,588858246024,588858966084,600000804048,600000885000,600006483012,600054003012,600054084084,600054723072,600402645048,600408963000,600450246000,600450966060,600456564072,600804405084,600804486048,600852006048,600852087000,600858324000,603204084012,603204723000,603252324072,603258642036,603600246048,603606564000,603654165072,603654804060,603654885024,606000564072,606006162084,606006801072,606006882036,606054402036,606402324000,606408642072,606450645024,606456243036,606456963096,606804165000,606804885060,606852405060,606852486024,606858003072,606858084036,606858723024,609204402072,609204483036,609252003036,609252723096,609600645060,609606243072,609606963024,609654564096,621204561012,621252162084,621252801072,621252882036,621258480048,621258489060,621600003096,621600723048,621654642072,624000321012,624054240048,624054249060,624054969012,624402162012,624402801000,624402882072,624408408036,624408480084,624450402072,624450483036,624456000084,624456081048,624456720036,624804642000,624852243072,624852963024,624858561036,627204240084,627204960036,627258168024,627258807012,627258888084,627600402000,627600483072,627606000012,627606009036,627606081084,627606720072,627606729096,627654321036,642000168048,642000807036,642006405048,642006486000,642054006000,642054087072,642054726060,642402648036,642408246048,642450240084,642450960036,642456567060,642804408072,642804480012,642804489036,642852000012,642852009036,642852081084,642852720072,642852729096,645204006048,645204087000,645252327060,645258645024,645600240012,645600249036,645600960072,645600969096,645654168060,645654888012,648000567060,648006165072,648006804060,648006885024,648054405024,648054486096,648408645060,648450648012,648456246024,648456966084,648804807096,648852489012,648858006060,648858087024,648858726012,660000645048,660006963000,660054564072,660402405084,660402486048,660408003096,660408723048,660450006048,660450087000,660456324000,660804246084,660804966036,660858165000,660858885060,663204564000,663252165072,663252804060,663252885024,663258402072,663258483036,663600006084,663600087048,663600726036,663606324048,663654645060,666000324000,666006642072,666054243036,666054963096,666402165000,666402885060,666408402000,666408483072,666450405060,666450486024,666456003072,666456084036,666456723024,666852246060,666852966012,666858564024,669204243072,669204963024,669252564096,669258801096,669600486060,669606003000,669606084072,669606723060,669654324024,681252642072,681258240084,681258960036,681600564048,681606801048,681606882000,681654402000,681654483072,684000162012,684000801000,684000882072,684006408036,684006480084,684054000084,684054081048,684054720036,684402642000,684408240012,684408249036,684408960072,684408969096,684450243072,684450963024,684456561036,684804402048,684804483000,684852003000,684852084072,684852723060,684858321072,687204000012,687204009036,687204081084,687204720072,687204729096,687252321036,687258648012,687600243000,687600963060,687606561072,687654162036,687654801024,687654882096,702000648036,702006246048,702054567060,702402408072,702402480012,702402489036,702408006084,702408087048,702408726036,702450000012,702450009036,702450081084,702450720072,702450729096,702804249072,702804960000,702804969024,702852561072,702858807096,705252168060,705252888012,705258405060,705258486024,705600009072,705600081012,705600720000,705600729024,705606327036,708006645060,708054246024,708054966084,708402807096,708408486060,708450489012,708456006060,708456087024,708456726012,708804648096,708852240036,708852960096,708852969000,708858567012,720000405084,720000486048,720006003096,720006723048,720054324000,720402246084,720402966036,720408564048,720456165000,720456885060,720804006012,720804087084,720804726072,720852327036,723204324048,723252645060,723258243072,723258963024,723600567036,723606165048,723606804036,723654486060,726000165000,726000885060,726006402000,726006483072,726054003072,726054084036,726054723024,726408243000,726408963060,726450246060,726450966012,726456564024,726804405036,726852087060,726858324060,729204003000,729204084072,729204723060,729252324024,729258642096,729606564060,729654165024,729654804012,729654885084,741204801048,741204882000,741252402000,741252483072,741258000012,741258009036,741258081084,741258720072,741258729096,741600324084,741606642048,741654243000,741654963060,744000642000,744006240012,744006249036,744006960072,744006969096,744054561036,744402402048,744402483000,744408009072,744408081012,744408720000,744408729024,744450003000,744450084072,744450723060,744456321072,744804243048,744852564060,744858162072,744858801060,744858882024,747204561072,747252162036,747252801024,747252882096,747258489012,747600003048,747600084000,747606321000,747654642024,762000408072,762000480012,762000489036,762006006084,762006087048,762006726036,762402249072,762402960000,762402969024,762408567036,762450561072,762456807096,762804000096,762804009000,762804720048,762804729060,762852321000,762858648096,765204327036,765258246060,765258966012,765600561000,765606168036,765606807024,765606888096,765654408096,765654480036,768000807096,768006486060,768054006060,768054087024,768054726012,768402648096,768450240036,768450960096,768450969000,768456567012,768804408024,768804480072,768804489096,768852000072,768852009096,768852081036,768852720024,768852729048,780000246084,780000966036,780006564048,780054165000,780054885060,780402006012,780402087084,780402726072,780408324084,780450327036,780804567072,780852168036,780852807024,780852888096,780858405036,783204165048,783204804036,783252486060,783258003000,783258084072,783258723060,783600327072,783606645036,786006243000,786006963060,786054564024,786402405036,786408003048,786408084000,786450087060,786456324060,786804246036,786804966096,786858165060,786858885012,789204564060,789252165024,789252804012,789252885084,789258402024,789258483096,789600006036,789600726096,789654645012,801204642048,801252243000,801252963060,801258561072,801600165084,801600804072,801600885036,801606402084,801606483048,801654003048,801654084000,804000402048,804000483000,804006009072,804006081012,804006720000,804006729024,804054321072,804402243048,804408561000,804450564060,804456162072,804456801060,804456882024,804804003084,804804084048,804804723036,804858642060,807204321000,807252642024,807258240036,807258960096,807258969000,807606162000,807606882060,807654402060,807654483024,822000249072,822000960000,822000969024,822006567036,822054807096,822402000096,822402009000,822402720048,822402729060,822408327072,822450321000,822456648096,822804561048,822852162000,822852882060,822858408024,822858480072,822858489096,825204168036,825204807024,825204888096,825252408096,825252480036,825258087060,825600321048,825606648024,825654240072,825654249096,825654960024,825654969048,828000648096,828054567012,828402408024,828402480072,828402489096,828408006036,828408726096,828450000072,828450009096,828450081036,828450720024,828450729048,828804240000,828804249024,828804960060,828804969084,828852561024,828858807048,828858888000,840000006012,840000087084,840000726072,840006324084,840402567072,840408165084,840408804072,840408885036,840450168036,840450807024,840450888096,840456405036,840804327000,840852648024,840858246036,840858966096,843204645036,843258564060,843600168072,843600807060,843600888024,843606405072,843606486036,843654006036,843654726096,846000405036,846006003048,846006084000,846054324060,846402246036,846402966096,846456165060,846456885012,846804006072,846804087036,846804726024,846852327096,849252645012,849258243024,849258963084,849600567096,849606804096,849654486012,861204402084,861204483048,861252003048,861252084000,861258321000,861600645072,861606243084,861606963036,864000243048,864006561000,864054162072,864054801060,864054882024,864402003084,864402084048,864402723036,864408321048,864456642060,864804564036,864852804096,864858483060,867204162000,867204882060,867252402060,867252483024,867258000072,867258009096,867258081036,867258720024,867258729048,867600324036,867654243060,867654963012,882000000096,882000009000,882000720048,882000729060,882006327072,882054648096,882402561048,882408168072,882408807060,882408888024,882450162000,882450882060,882456408024,882456480072,882456489096,882804321084,882858240000,882858249024,882858960060,882858969084,885204648024,885252240072,885252249096,885252960024,885252969048,885600162048,885600801036,885606408060,885606480000,885606489024,885654000000,885654009024,885654081072,885654720060,885654729084,888000408024,888000480072,888000489096,888006006036,888006726096,888402240000,888402249024,888402960060,888402969084,888408567096,888450561024,888456807048,888456888000,888804000048,888804009060,888804081000,888804729012,888852321060,888858648048,900000567072,900006165084,900006804072,900006885036,900054405036,900402327000,900408645072,900450648024,900456246036,900456966096,900804168000,900804888060,900852408060,900852480000,900852489024,900858006072,900858087036,900858726024,903204405072,903204486036,903252006036,903252726096,903600648060,903606246072,903606966024,903654567096,906000246036,906000966096,906054165060,906054885012,906402006072,906402087036,906402726024,906408324036,906450327096,906804567024,906852168096,906852807084,906852888048,906858405096,909204804096,909252486012,909258003060,909258084024,909258723012,909600327024,909606645096,909654966000,921204243084,921204963036,921258162000,921258882060,921600405000,921600486072,921606003012,921606084084,921606723072,921654324036,924000003084,924000084048,924000723036,924006321048,924054642060,924402564036,924408162048,924408801036,924450804096,924456483060,924804324072,924852645096,927252243060,927252963012,927258561024,927600165036,927600804024,927600885096,927606402036,927654084060,942000561048,942006168072,942006807060,942006888024,942054408024,942054480072,942054489096,942402321084,942408648060,942456240000,942456249024,942456960060,942456969084,942804162084,942804801072,942804882036,942852402036,942858000048,942858009060,942858081000,942858729012,945204408060,945204480000,945204489024,945252000000,945252009024,945252081072,945252720060,945252729084,945258327096,945600642036,945606240048,945606249060,945606969012,945654561060,948000240000,948000249024,948000960060,948000969084,948006567096,948054807048,948054888000,948402000048,948402009060,948402081000,948402729012,948408327024,948450321060,948456648048,948852162060,948852882012,948858408084,948858480024,948858489048,960000327000,960006645072,960054246036,960054966096,960402168000,960402888060,960408405000,960408486072,960450408060,960450480000,960450489024,960456006072,960456087036,960456726024,960852240048,960852249060,960852969012,960858567024,963204246072,963204966024,963252567096,963258804096,963600480048,963600489060,963606006000,963606087072,963606726060,963654327024,966000006072,966000087036,966000726024,966006324036,966402567024,966408165036,966408804024,966408885096,966450168096,966450807084,966450888048,966456405096,966804327060,966852648084,966858246096,966858966048,969204645096,969252966000,969258564012,969600168024,969600807012,969600888084,969606405024,969606486096,969654006096,969654726048,981204003012,981204084084,981204723072,981252324036,981600246000,981600966060,981606564072,981654165036,981654804024,981654885096,984000564036,984006162048,984006801036,984054483060,984402324072,984408642036,984450645096,984804165072,984804804060,984804885024,984852405024,984852486096,984858003036,984858723096,987204402036,987252084060,987258321060,987600645024,987606243036,987606963096,1020061620604,1020068820121,1024023240968,1024506450006,1024562430125,1024569630721,1028041650961,1028524050489,1028587230008,1052044830122,1052520030120,1052527230729,1052583210848,1056006450486,1056069630005,1056545640722,1080009630726,1080065610845,1080541620483,1080548010360,1084020840123,1084027230000,1084566420366,1088045640006,1088521650723,1088528040600,1088528850240,1200066480847,1200542490485,1200549600848,1204028010965,1204084080121,1204084800607,1204084890840,1204504830126,1204560000605,1204560810245,1204567200122,1204567290368,1208529630009,1208585610128,1232042400602,1232042490848,1232049690365,1232525610849,1232581680005,1232588880601,1236004020966,1236060090122,1236060810608,1236543210123,1260000090843,1260007200127,1260007290360,1260546480609,1264025610120,1264081680485,1264088070362,1264508010727,1264508820367,1264564800486,1264564890602,1268526420720,1268589600369,1292522400481,1292529690127,1292585670246,1296001620121,1296064080363,1296064800849,1296540000847,1296540810487,1296547200364,1412040060249,1412040870968,1412047260845,1412523270483,1412586450002,1416002490123,1416541680489,1416548070366,1440005670480,1440068040489,1440544860729,1444023270846,1444086450482,1444562460003,1448048070729,1448048880369,1448524080367,1448524800840,1448580060486,1448580870009,1472044860000,1472527260607,1472583240726,1476006480364,1476062460483,1476545670600,1620003240960,1620549630726,1624021650966,1624028040843,1624028850483,1624084020962,1624504050481,1624504860004,1624560840123,1624567230000,1628046450849,1628522460487,1628585640006,1652525640727,1652581620846,1652588010723,1652588820363,1656004050844,1656004860484,1656060030963,1656067230480,1656543240001,1680000840128,1680007230005,1680063210124,1684088010007,1684088820726,1684501650728,1684508040605,1684508850245,1684564020724,1684564830364,1688043240481,1688589630247,1800064080126,1800064890845,1800540090843,1800547200127,1800547290360,1804026420963,1804089690728,1804509630001,1804565610120,1808044830969,1808520030967,1808527230484,1832040090127,1832040810600,1832047290723,1832523210128,1836002430964,1836009630481,1836541620121,1860005610125,1860068070367,1860544890607,1864086480360,1864506420725,1864562400844,1864569600361,1868048820001,1868580090364,1868587200727,1868587290960,1892044080368,1892044800841,1892527200369,1892583270604,1896006420009,1896062400128,1896062490361,1896069600724,1896545610362,2012045670843,2012521680481,2012584860000,2016000000365,2016007200961,2016546480364,2040066450487,2040542460008,2040549660604,2044021680844,2044028070721,2044028880361,2044084050840,2044084860480,2044504800845,2044560870001,2048046480727,2048522490365,2048529600728,2048529690961,2072042460488,2072525670605,2072581650724,2072588040601,2072588850241,2076004080722,2076004800129,2076004890362,2076060060841,2076060870481,2220008040848,2220008850488,2220064020967,2220540840128,2220547230005,2224026450841,2224082430960,2228044050128,2228044860847,2228520060845,2228520870485,2228527260362,2228583240481,2252040030968,2252047230485,2252523240006,2252586420721,2256002460842,2256548850608,2280005640003,2280061620122,2280544020729,2280544830369,2284023240486,2284086420005,2284506450603,2284562430722,2288048040369,2288524860609,2288580030009,2288580840728,2288587230605,2400006420968,2400062490124,2400069690720,2400545610125,2404024020242,2404024830961,2404080000361,2404087290007,2404507230489,2408042430248,2408049630844,2408525640482,2408588820001,2432521620126,2432528010003,2432528820722,2432584080368,2432584800841,2436000030243,2436000840962,2436546420009,2460066480365,2460542400849,2460549600366,2464028010483,2464028820006,2464084800125,2464504020004,2464504830723,2464560000123,2464560090369,2464560810842,2464567290965,2468046420489,2468529630606,2468585610725,2492042400120,2492042490366,2492049600729,2492049690962,2492525610367,2492581680602,2496004020484,2496004830007,2496060810126,2496067200003,2496067290249,2496543210720,2612043270122,2612526480369,2612582460488,2616061680128,2616068070005,2616068880724,2616544080722,2616544800129,2616544890362,2640001680849,2640008070726,2640008880366,2640064050845,2640064860485,2640540060483,2640540870006,2644089660368,2644502400124,2644509600720,2644509690966,2648044080006,2648044890725,2648520090723,2648527200007,2648527290240,2672040060846,2672040870486,2672047260363,2676002490720,2676009600004,2676065670369,2676548070963,2820006450846,2820062430965,2820069630482,2820545640003,2824024050120,2824087230848,2824507260367,2824563240486,2828042460126,2828049660722,2828525670360,2828588040369,2852045640483,2852521650004,2852528850600,2852584020000,2856000060121,2856000870840,2856063240849,2880542430727,2880549630244,2884021650484,2884028040361,2884084020480,2884084830003,2884504860601,2884560030001,2884560840720,2888046450367,2888585640603,3000004020247,3000004830966,3000060000366,3000067200962,3004022430240,3004029630849,3004085610968,3004505640487,3004568010483,3004568820006,3008040030606,3008040840246,3008047230123,3008523240840,3008586420489,3032043210963,3032526420001,3032582400120,3032582490366,3032589600729,3032589690962,3036061620969,3036068010846,3036068820486,3036544020484,3036544830007,3060008010488,3060064080723,3060064890363,3060540000128,3060540090361,3060540810847,3060547200724,3064026420481,3064082490729,3064089600000,3064089690246,3064502430002,3068044020847,3068044830487,3068520030485,3068520840008,3068583210004,3092040090724,3092047200008,3092047290241,3092523210725,3096002430482,3096065610001,3096548010608,3096548820248,3212041680120,3212048880729,3212524080727,3212524800121,3212524890367,3212580060846,3212580870486,3212587260363,3216066480003,3216542490720,3216549600004,3240006480724,3240062460843,3240069660360,3244080870849,3244087260726,3244500090728,3244500810122,3244507290245,3244563270364,3248042400967,3248042490004,3248049600484,3248049690600,3248525610005,3248588070247,3248588880966,3272045670361,3272528070968,3276000000962,3276007290608,3276063270727,3276546480961,3420004050125,3420004860844,3420060030244,3420060840963,3420067230840,3424029660727,3424085640846,3424505670365,3424561650484,3424568040361,3428040870124,3428047260001,3428586450367,3452043240841,3452589630607,3456005670728,3456061650847,3456068040724,3456068850364,3456544050362,3480001650489,3480008040366,3480064020485,3480064830008,3480540030006,3480540840725,3480547230602,3484565640608,3488044050725,3488044860365,3488520060363,3600002430245,3600009630841,3600065610960,3600548010488,3604027230128,3604083210247,3604503240845,3604566420481,3608045640121,3608528040728,3608528850368,3608584020847,3608584830487,3632041620961,3632524020489,3632580090724,3632587200008,3632587290241,3636003240129,3636066420844,3636542430482,3660006420486,3660062490721,3660069600005,3660545610722,3664080090008,3664087200488,3664087290604,3664500840000,3664563210009,3668042430845,3668049630362,3668581620002,3692045610006,3692521620723,3692528010600,3692528820240,3692584080965,3696000030840,3696000840480,3696063210489,3696546420606,3812046480008,3812522490725,3812529600009,3812529690242,3812585670361,3816001620249,3816008010126,3816008820845,3816064800964,3816064890001,3816540000962,3816547290608,3840004080003,3840004890722,3840060060122,3840060870841,3840543270369,3844022490009,3844029600489,3844029690605,3844085670724,3844561680362,3848040000246,3848040810965,3848047200842,3848523210480,3848586480245,3872526480966,3876061680725,3876068070602,3876068880242,3876544080240,3876544800726,4020002460123,4020541650489,4020548040366,4024020870129,4024027260006,4024083240125,4024503270723,4028521680729,4028528070606,4028528880246,4028584050725,4028584860365,4052048040729,4052048850369,4052524050367,4052580030486,4052580840009,4056003270007,4056066450722,4056542460360,4056549660969,4080006450364,4080062430483,4080545640600,4084080030849,4084080840489,4084087230366,4084500060368,4084507260964,4088042460723,4088049660240,4088588040966,4200000030603,4200000840243,4200007230120,4200546420486,4204025640126,4204081620245,4204088010122,4204088820841,4204501650843,4204508040720,4204508850360,4208526450726,4208582430845,4208589630362,4232046420849,4232522430487,4232585610006,4236001650127,4236008040004,4236008850723,4236064020123,4236064830842,4236540030840,4236540840480,4260004020844,4260004830484,4260060000963,4260060090000,4260067200480,4260067290609,4260543210001,4264029630367,4264085610486,4264561620007,4264568820603,4268040030124,4268040840843,4268047230720,4292043210481,4292582490963,4292589600247,4292589690480,4296005640368,4296061620487,4296068010364,4296544830604,4412044080483,4412044800969,4412044890006,4412520000967,4412520090004,4412527200484,4412527290600,4416006420124,4416062400243,4416062490489,4440002400964,4440002490001,4440009600481,4440065670729,4440541680367,4440548070244,4440548880963,4444020090484,4444027200847,4444083270003,4444503210485,4448045610840,4448528010368,4448584080603,4448584890243,4472048070607,4472048880247,4472524080245,4472524890964,4472580060364,4472587260960,4476003210848,4476066480600,4476542400005,4476549600601,4476549690847,4620000870121,4620546450364,4624025670004,4624081650123,4624088040000,4624501680721,4628043270487,4628526480604,4628582460723,4628589660240,4652046450727,4652522460365,4652529660961,4656001680005,4656008880601,4656064050001,4656064860720,4656547260248,4680004050722,4680004860362,4680060030841,4680060840481,4684022460728,4684029660245,4684085640364,4684505670962,4688040060002,4688040870721,4688523270249,4688586450964,4800068010127,4800068820846,4800544020844,4800544830484,4804086420120,4804569630367,4808048040484,4808048850007,4808524050005,4808524860724,4808580030124,4808580840843,4808587230720,4832044020128,4832044830847,4832520030845,4832520840485,4832527230362,4832583210481,4836006450002,4836062430121,4836545640368,4860002430842,4860548820608,4864020030129,4864020840848,4864027230725,4864083210844,4864503240363,4868521650369,4868528040246,4868528850965,4868584020365,4892048010369,4892524830609,4892580000009,4892580090242,4892580810728,4892587200605,4896003240726,4896066420362,5012042400248,5012042490481,5012049600844,5012525610482,5012588070607,5012588880247,5016004830122,5016060000601,5016060090847,5016060810241,5016067290364,5016543210848,5040000000243,5040000090489,5040000810962,5040063270008,5040546480242,5044025610845,5044081680001,5044501620483,5044508010360,5044564080608,5044564800002,5044564890248,5048526420366,5048582400485,5048582490601,5072046480605,5072522490243,5072529600606,5076001620846,5076008010723,5076008820363,5076064800482,5076540000480,5076540090609,5076540810003,5076547290126,5220005670009,5220061650128,5220068040005,5220068850724,5220544050722,5220544860362,5224506480609,5224562460728,5224569660245,5228041680485,5228048070362,5228524800486,5228524890602,5228580060002,5228580870721,5252044050006,5252044860725,5252520060723,5252520870363,5252527260240,5256069660608,5256545670246,5280002460720,5280065640369,5280548040963,5284020060007,5284020870726,5284027260603,5284083240722,5284503270241,5284566450969,5288045670609,5288521680247,5288528070124,5288528880843,5288584050243,5288584860962,5400066420125,5400542430842,5404028040489,5404504860729,5404560030129,5404560840848,5404567230725,5408046450482,5408522460003,5432042430126,5432049630722,5432525640360,5432588010369,5436004860000,5436067230009,5436543240726,5460000030121,5460000840840,5460063210849,5464025640723,5464081620842,5464501650361,5468526450244,5468582430363,5492046420367,5492585610603,5496001650724,5496008040601,5496008850241,5496064020720,5496064830360,5496547230967,5612040000606,5612040810246,5612047200123,5612047290369,5612523210840,5612586480605,5616065610129,5616541620846,5616548010723,5616548820363,5640061680006,5640068880602,5640544080600,5640544800007,5640544890240,5644023210124,5644562490606,5644569690123,5648048010007,5648048820726,5648524020724,5648524830364,5648580000843,5648580810483,5648587200360,5672044800487,5672044890603,5672520000485,5672520090601,5672520810008,5676006420721,5676062400840,5820003270484,5820066450003,5820542460720,5824028070367,5824084050486,5824084860009,5824504890607,5824560060007,5824560870726,5824567260603,5828046480360,5828522400844,5828529600361,5828585670609,5852042460004,5852049660600,5852588040247,5852588850966,5856004080368,5856004800841,5856060060487,5856543270604,5880007260608,5880063240727,5880546450961,5884025670601,5884081650720,5884508070129,5884508880848,5884564050248,5884564860967,5888526480122,5888582460241,6000008040481,6000008850004,6000064830123,6000540030121,6000540840840,6004026450487,6004089630006,6004502460008,6004509660604,6004565640723,6008044050840,6008044860480,6008520870001,6032040840124,6032047230001,6032586420367,6036002460488,6036065640007,6036541650724,6036548040601,6036548850241,6060005640728,6060061620847,6060068010724,6060068820364,6060544020362,6064023240002,6064506450249,6064562430368,6064569630964,6068041650008,6068048850604,6068524050602,6068524860242,6068580030721,6068580840361,6092044020725,6092044830365,6092520030363,6096069630248,6096545640965,6212045610121,6212528010728,6212528820368,6212584800487,6212584890603,6216000030968,6216007230485,6216546420721,6240003210129,6240542400482,6240549690128,6244021620122,6244084080364,6244504020729,6244504830369,6244560000848,6244560810488,6244567200365,6248046420005,6248522430722,6272042400845,6272049600362,6272581680248,6272588070125,6272588880844,6276004020000,6276060090365,6276067200728,6276067290961,6276543210366,6420001680482,6420064860001,6420547260608,6424026480365,6424082460484,6424502400849,6424509600366,6424565670601,6428044800125,6428520000123,6428520090369,6428520810842,6428527290965,6452040870002,6452523270609,6452586450245,6456002400120,6456002490366,6456009600729,6456009690962,6456541680602,6480005670606,6480061650725,6480068040602,6480068850242,6480544050240,6484086450608,6484506480127,6484562460246,6484569660842,6488524890120,6488587260129,6600545640728,6604024050845,6604024860485,6604080030964,6604087230481,6604500060483,6604500870006,6604563240002,6608049660368,6608581650008,6608588850604,6632521650729,6632528040606,6632528850246,6632584020725,6632584830365,6636000060846,6636000870486,6636007260363,6636063240482,6660003240007,6660066420722,6660542430360,6660549630969,6664021650000,6664028850609,6664084020009,6664084830728,6664504050607,6664504860247,6664560030726,6664560840366,6664567230243,6668522460600,6668585640249,6692042430723,6692049630240,6692588010966,6696060840729,6696067230606,6696543240244,6812526420726,6812582400845,6812589600362,6816005640483,6816068820002,6816544020000,6840001620127,6840008010004,6840008820723,6840064080369,6840064800842,6840540000840,6840540810480,6844082400129,6844082490362,6844089600725,6844502430727,6844509630244,6844565610363,6848044020480,6848044830003,6848520030001,6848520840720,6848583210729,6872040000124,6872040810843,6872047200720,6872047290966,6872586480123,6876009630607,6876065610726,6876541620364,6876548010241,6876548820960,7020062460489,7020545670606,7024024080723,7024024890363,7024080060842,7024080870482,7024500000128,7024500090361,7024500810847,7024507200724,7028042490729,7028049600000,7028049690246,7052521680607,7052528880124,7052584050603,7052584860243,7056000090724,7056007200008,7056007290241,7056063270360,7080066450600,7080549660847,7084028070964,7084084860606,7084504890125,7084560060604,7084560870244,7084567260121,7088522400362,7088529690008,7088585670127,7200060030969,7200067230486,7200543240007,7204022460843,7204029660360,7204561650000,7204568850609,7208040870849,7208047260726,7208523270364,7232043240487,7232526450604,7232582430723,7232589630240,7236005670361,7236061650480,7260001650005,7260008850601,7260064020001,7260064830720,7260547230248,7264082430007,7264089630603,7264502460605,7264509660122,7264565640241,7268583240607,7292040030002,7292040840721,7292523240249,7292586420964,7296065640604,7296541650242,7412048010484,7412048820007,7412524020005,7412524830724,7412580000124,7412580810843,7412587200720,7412587290966,7416003240841,7416549630607,7440006420002,7440062400121,7440062490367,7440069690963,7440545610368,7444024020485,7444024830008,7444080090720,7444080810127,7444087200004,7444500030006,7444500840725,7444507230602,7444563210721,7448525640608,7448581620727,7448588010604,7448588820244,7472521620369,7472528010246,7472528820965,7472584890121,7476000030486,7476000840009,7476063210005,7620004080728,7620004800122,7620004890368,7620060060847,7620060870487,7620067260364,7624022490721,7624029600005,7624505610722,7624568070964,7628040090008,7628047200488,7628047290604,7628523210009,7652043270365,7652582460601,7656005610006,7656068070248,7656068880967,7656544080965,7680008070969,7680540060609,7680540870249,7680547260126,7684026480962,7684502400367,7684509600963,7684509690000,7688044080249,7688044800722,7688044890968,7688520000720,7688520090966,7688520810360,7688527290483,7800002460848,7800009660365,7800065640484,7800541650005,7800548850601,7804020060122,7804020870841,7804503270369,7808045670724,7808521680362,7832041650485,7832048040362,7832524860602,7832580030002,7832580840721,7836066450368,7860069630608,7860545640246,7864024050363,7864080030482,7864080840005,7864500870603,7868042460369,7868049660965,7868581650605,7868588850122,7892045640609,7892521650247,7892528040124,7892528850843,7892584020243,7892584830962,7896000060364,7896007260960,8012046420482,8012522430003,8016008040729,8016008850369,8016064020848,8016064830488,8016540030486,8016540840009,8040004830000,8040060090725,8040067200009,8040067290242,8040543210726,8044022430483,8044085610002,8044505640600,8044568010609,8044568820249,8048040030849,8048040840489,8048047230366,8048586420602,8072526420244,8072582400363,8072589690009,8076061620003,8220002490726,8220009690243,8220065670362,8220548070969,8224020000963,8224020090000,8224027200480,8224027290609,8224083270728,8224503210001,8224566480962,8228045610486,8228521620007,8228528820603,8228584080249,8228584800722,8228584890968,8252041680363,8252048070240,8252524800364,8256003210481,8256066480246,8256542490963,8256549600247,8256549690480,8280006480967,8280545670124,8284024080241,8284024800727,8284024890960,8284080060360,8284087260969,8284500000725,8284500810365,8284507200242,8284507290488,8288042400001,8288042490247,8288049690843,8288525610248,8288588880000,8400000060127,8400000870846,8400007260723,8400063240842,8404025670729,8404081650848,8404088040725,8404088850365,8404501680367,8404508070244,8404508880963,8404564050363,8408043270003,8408582460369,8408589660965,8432046450360,8432585640609,8436008070607,8436008880247,8436064050726,8436064860366,8436540060364,8436547260960,8460004050368,8460060030487,8460543240604,8464022460361,8464568850127,8468040060727,8468040870367,8468047260244,8468523270961,8492526450122,8492582430241,8496068040967,8496544860128,8612044020840,8612044830480,8612520840001,8616006450727,8616062430846,8616069630363,8640002430488,8640065610007,8640541620724,8640548010601,8640548820241,8644020030841,8644020840481,8644566420607,8648045640364,8648584830600,8672041620008,8672048820604,8672524020602,8672524830242,8672580000721,8672580090967,8672580810361,8672587290484,8676542430608,8676549630125,8820000000968,8820000090005,8820007200485,8820007290601,8820063270720,8820546480967,8824081680726,8824088070603,8824088880243,8824508820608,8824564080241,8824564800727,8824564890960,8828043210844,8828582400001,8828582490247,8828589690843,8852522400722,8852522490968,8852529690485,8856008010369,8856064080604,8856064890244,8856540000009,8856540090242,8856540810728,8856547200605,8880004080246,8880004890965,8880060060365,8880067260961,8884022400006,8884029600602,8884029690848,8884085670967,8884505610240,8884568070482,8884568880005,8888040000489,8888040090605,8888047290122,8888523210606,8888586480488,9000005670721,9000061650840,9000544050368,9004023270008,9004086450723,9004506480242,9004562460361,9008041680001,9008524080608,9008524800002,9008524890248,9008580060727,9008580870367,9008587260244,9032520060369,9032527260965,9036006480605,9036062460724,9036069660241,9060002460366,9060009660962,9060541650602,9064027260249,9064083240368,9064503270966,9068045670242,9068528070849,9068528880489,9068584050968,9092524860120,9092587230129,9096066450965,9096549660003,9212049630368,9212581620008,9212588820604,9216004050006,9216004860725,9216060030125,9216060840844,9216067230721,9240000030846,9240000840486,9240007230363,9240063210482,9244025640369,9244081620488,9244088010365,9244508040963,9244564830605,9248043240722,9248526450969,9272522430600,9272585610249,9276008040247,9276008850966,9276064020366,9276540840606,9420005610483,9420068070608,9420068880248,9420544080246,9420544890965,9424023210849,9424086480601,9424562400006,9424569600602,9424569690848,9428041620842,9428580000489,9428580090605,9428587290122,9452044080609,9452044800003,9452044890249,9452520000001,9452520090247,9452520810720,9452527290843,9452583270962,9456006420367,9456062400486,9456062490602,9456545610603,9480002490244,9480009600607,9480009690840,9480548070487,9484020000481,9484020810004,9484027290127,9484083270246,9484566480480,9488521620604,9488528820121,9488584080846,9488584800240,9488584890486,9600003270000,9600066450728,9600542460366,9600549660962,9604021680006,9604028880602,9604084050002,9604084860721,9604504080600,9604504800007,9604504890240,9604567260249,9608522490606,9608529690123,9608585670242,9632042460729,9632049660246,9632525670963,9636004800487,9636004890603,9636060060003,9636060870722,9660000060724,9660000870364,9660007260241,9660063240360,9664025670247,9664081650366,9664088040243,9664088850962,9664501680964,9664508070841,9664508880481,9664564050960,9668043270600,9668526480847,9668582460966,9668589660483,9692529660008,9692585640127,9696001680248,9696008070125,9696008880844,9696064050244,9696064860963,9696540060961,9812040840849,9812047230726,9812523240364,9816002460004,9816009660600,9816548040247,9816548850966,9840005640361,9840061620480,9844023240727,9844086420363,9844506450961,9848041650720,9848524050248,9848524860967,9848580030367,9848587230963,9872583210607,9876006450245,9876062430364,9876069630960,10200616206046,10200688201214,10240232409680,10245064500062,10245696307210,10285240504896,10285872300088,10525272307298,10525832108484,10560064504864,10560696300056,10565456407226,10800096307266,10800656108452,10805480103600,10840208401232,10840272300004,10845664203668,10885280406000,12005424904858,12045608102458,12045672903684,12085296300098,12085856101284,12320424908484,12320496903652,12325256108494,12325816800052,12325888806014,12360040209664,12360600901222,12360608106084,12365432101232,12600000908432,12600072001272,12600072903600,12640256101200,12640816804854,12640880703626,12645088203678,12645648004864,12685896003690,12925224004812,12925296901272,12960016201216,12960648008490,12965400008470,14120400602490,14120408709680,14120472608452,14125864500020,14160024901232,14165416804896,14165480703668,14400680404894,14405448607298,14440232708468,14440864504822,14445624600036,14480480707294,14480488803690,14485240803670,14485248008406,14485808700090,14720448600004,14725272606072,14760624604838,14765456706000,16205496307266,16240216509664,16240280408436,16240288504832,16240840209622,16245040504812,16245048600046,16245608401232,16245672300004,16280464508490,16525816208468,16525888203636,16560048604848,16560600309638,16560672304806,16800008401288,16800632101246,16840880100072,16840888207262,16845016507284,16845080406056,16845088502452,16845640207242,16885896302478,18000640801262,18000648908452,18005400908432,18005472001272,18005472903600,18040264209632,18045096300014,18045656101200,18085272304848,18320400901278,18320408106000,18325232101288,18360024309648,18360096304816,18365416201216,18600056101256,18605448906072,18645064207252,18680488200010,18685800903644,18685872007278,18685872909606,18920440803684,18925272003694,18925832706046,18960064200098,18960624001284,18960624903612,18960696007246,18965456103622,20120456708436,20125216804812,20125848600004,20160000003654,20160072009616,20400664504878,20405496606040,20440280707210,20440848604806,20480464807278,20485224903654,20485296007288,20485296909616,20720424604880,20725256706056,20725816507242,20725880406014,20725888502410,20760040807226,20760048001294,20760048903622,20760600608412,22200088504888,22200640209678,22205408401288,22240824309606,22280440501284,22280448608474,22285200608454,22285208704850,22285272603622,22520400309680,22525232400062,22525864207210,22560024608422,22800056400030,22805440207298,22805448303694,22840232404864,22840864200056,22845624307226,22880480403690,22885248606094,22885800300090,22885808407280,22885872306052,24000064209688,24000624901246,24000696907208,24005456101256,24040240202426,24040248309616,24040800003612,24040872900072,24045072304890,24080424302480,24080496308442,24085888200010,24325280100030,24325288207220,24325840803684,24365464200098,24600664803652,24605424008494,24605496003662,24640280104832,24640288200066,24640848001252,24645040200046,24645048307236,24645600001232,24645608108422,24685296306062,24920424001200,24920424903668,24925256103678,24960040204848,24960608101268,24960672902494,26125264803694,26125824604880,26160616801284,26160680700056,26160688807246,26165440807226,26165448001294,26165448903622,26400016808494,26400080707266,26400088803662,26400640508452,26405408700062,26440896603688,26445024001242,26445096007204,26720400608468,26720408704864,26720472603636,26760656703690,26765480709632,28200064508462,28205456400030,28240240501200,28240872308488,28245072603678,28245632404864,28280424601268,28285256703606,28285880403690,28520456404832,28525216500046,28525288506008,28525840200004,28560000601216,28560008708406,28560632408490,28840216504848,28840840204806,28845048606010,28880464503674,28885856406036,30000600003668,30040296308498,30040856109684,30045056404874,30045680104832,30045688200066,30080400306068,30080408402464,30080472301236,30085232408406,30320432109632,30325264200014,30325824001200,30325824903668,30360688204868,30365440204848,30600080104888,30600648903636,30605400001288,30605400903616,30605408108478,30640264204816,30640824907294,30640896000008,30640896902462,30680440208474,30680448304870,30685200304850,30685208400084,30685832100042,30920400907242,30920472000082,30920472902410,30925232107252,30960656100010,30965488202488,32120416801200,32125248001210,32125248903678,32125800608468,32125808704864,32125872603636,32400624608436,32400696603604,32440808708490,32440872607262,32445000907284,32445008101226,32445072902452,32480424009670,32480424900042,32480496906004,32485256100052,32485880702478,32485888809668,32725280709688,32760632707278,32765464809616,34200040501256,34200048608446,34200600302442,34200608409632,34200672308404,34240296607272,34245616504848,34280472600010,34285864503674,34525896306076,34560056707288,34560616508474,34560680407246,34560688503642,34565440503622,34800016504890,34800080403662,34800648300082,34805400300062,34805408407252,34805472306024,34880448603658,34885200603638,36000024302452,36000096308414,36000656109600,36005480104888,36040832102478,36045664204816,36085280407288,36085288503684,36085840208474,36085848304870,36320416209616,36325240204890,36325800907242,36325872000082,36325872902410,36360032401294,36360664208442,36600624907210,36600696000050,36605456107220,36640800900088,36640872004884,36645008400000,36645632100098,36680424308458,36680496303626,36685816200026,36920456100066,36925216207236,36925280106008,36925288202404,36960000308406,36960008404802,36965464206062,38120464800082,38125224907252,38125296000092,38125296902420,38160016202490,38160080101262,38160088208452,38160648900010,38400040800030,38400048907220,38405432703694,38440224900098,38440296004894,38440856707246,38445616803622,38480400002464,38480408109654,38480472008426,38485232104802,38760680706020,40205416504890,40205480403662,40240208701294,40240272600066,40240832401252,40245032707236,40285216807290,40285280706062,40285848603658,40520488503698,40525240503678,40525800304864,40525808400098,40565424603606,40565496609694,40800064503646,40800624304832,40805456406008,40840800308490,40845000603680,40845072609642,40880424607232,40880496602400,40885880409668,42000008402436,42000072301208,42040256401262,42040880101220,42040888208410,42045016508432,42045080407204,42045088503600,42085824308458,42085896303626,42320464208498,42325224304874,42325856100066,42360016501278,42360640201236,42360648308426,42365400308406,42365408404802,42600040208446,42600048304842,42600600009632,42600600900004,42600672004800,42600672906092,42605432100014,42640856104868,42645688206030,42680472307200,42920432104816,42925824909632,42925896002472,42925896904800,42960056403684,42960616204870,42960680103642,42965448306046,44120440804832,44120448009694,44120448900066,44125200009674,44125200900046,44125272004842,44125272906008,44160064201246,44160624002432,44400024009642,44400024900014,44400096004810,44405416803678,44440200904848,44445032104858,44485280103684,44485840806036,44485848902432,44720480706076,44720488802472,44725240802452,44725248909642,44725872609600,44760032108484,44760664806004,44765424000052,44765496006014,46200008701210,46205464503646,46240816501236,46240880400008,46280432704870,46285264806046,46285824607232,46285896602400,46520464507272,46525296609610,46560016800052,46560088806014,46560640500010,46560648607200,46565472602488,46800040507220,46800608404816,46840224607288,46840296602456,46840856403642,46845056709626,46880400600026,46880408707216,46885232702490,48000680101276,48000688208466,48005440208446,48005448304842,48040864201204,48080488500072,48085240500052,48085248607242,48085872307200,48325208404858,48325832104816,48360064500020,48365456403684,48605488206086,48640200301294,48640208408484,48640272307256,48640832108442,48645032403632,48685840203658,48920480103698,48925800000098,48925800902426,48925808107288,48960664203626,50120424002488,50120424904816,50125256104826,50125880706076,50125888802472,50160600908474,50160608102416,50160672903642,50165432108484,50400000002436,50400000904890,50400008109626,50400632700082,50405464802420,50440256108452,50440816800010,50445080103600,50445648000020,50445648902488,50485264203668,50485824004854,50725224902436,50760016208468,50760088203636,50760648004822,50765400004802,50765400906094,50765408100036,50765472901262,52200056700092,52200680400050,52200688507240,52205440507220,52245624607288,52245696602456,52280416804854,52280480703626,52285248004864,52285800600026,52285808707216,52520440500066,52520448607256,52525200607236,52525208703632,52525272602404,52560696606082,52800024607204,52800656403698,52840272606030,52845664509694,52880456706098,52885216802474,52885280701246,52885288808436,52885840502432,52885848609622,54040280404894,54045048607298,54045600301294,54045608408484,54045672307256,54080464504822,54085224600036,54320424301262,54320496307224,54325256403600,54325880103698,54360048600004,54600000301210,54600008408400,54600632108498,54640816208426,54645016503616,54685264502442,54925856106030,54960016507242,54960080406014,54960088502410,54960640207200,54965472309678,56120400006062,56120472001230,56120472903698,56125232108400,56160656101298,56165416208468,56165488203636,56400616800066,56400688806028,56405440806008,56405448000076,56405448902404,56440232101246,56445624906062,56445696901230,56480480100072,56480488207262,56485240207242,56485808104838,56720448004878,56720448906030,56725200004858,56725200906010,56760064207210,58200032704842,58200664500034,58205424607204,58240840504868,58245048906072,58245672606030,58285856706098,58525880402472,58525888509662,58560040803684,58560600604870,58565432706046,58800072606086,58800632407272,58805464509610,58840256706014,58840816507200,58845640502488,58845648609678,58885824602416,60000080404810,60000088500044,60000648301230,60005400301210,60005408408400,60040264504878,60045096606040,60080448604806,60320408401246,60320472300018,60360024604880,60360656400072,60365416507242,60365480406014,60365488502410,60600056407282,60600680107240,60640232400020,60645064502498,60645624303684,60645696309646,60680416500088,60685248602426,60685800307216,60685808403612,60920440207256,60920448303652,60925200303632,62120456101214,62125280107282,62125848004878,62125848906030,62160000309680,62165464207210,62405424004826,62405496901286,62440840803642,62445040207298,62445048303694,62445600008484,62445608104880,62445672003652,62480464200056,62485224307226,62720424008452,62720496003620,62725816802488,62760040200004,62760600903658,62765432103668,64200016804826,64200648600018,64205472606086,64240264803652,64245024008494,64245096003662,64245656706014,64280448001252,64285200001232,64285208108422,64520408700020,64525864502456,64560024001200,64560024903668,64800616507256,64800680406028,64800688502424,64805440502404,64840864506082,64845064801272,64845696608420,64885248901200,64885872601298,66005456407282,66040240508452,66045008700062,66045632400020,66080496603688,66085816500088,66325216507298,66325288502466,66325840207256,66325848303652,66360000608468,66360008704864,66360072603636,66360632404822,66600032400076,66600664207224,66605424303600,66640216500004,66640288506092,66645040506072,66645608403668,66685224606000,66685856402494,66920496302408,66925880109662,66960608407294,66960672306066,66965432402442,68125264207266,68125824008452,68125896003620,68160056404832,68160688200024,68165440200004,68400016201272,68400080100044,68400088207234,68400640803698,68400648008420,68405400008400,68440824001298,68440824903626,68445656103636,68480440204806,68485832107294,68720400001246,68720408108436,68720472007208,68720472909662,68725864801230,68760096306076,68760656107262,68765480102410,68765488209600,70200624604894,70240248903636,70240800608426,70240808704822,70245000001288,70245000903616,70245008108478,70280424907294,70280496000008,70280496902462,70525216806072,70525288801240,70525840506030,70560000907242,70560072000082,70560072902410,70805496608476,70840280709646,70840848606066,70845048901256,70845600606046,70845608702442,70845672601214,70885224003622,70885296900082,72000600309694,72000672304862,72005432400076,72040224608436,72040296603604,72045616500004,72045688506092,72080408708490,72080472607262,72320432404878,72325264506040,72325896302408,72360616504806,72600640200018,72600648307208,72605472302482,72640824300072,72640896306034,72645024606056,72645096601224,72645656402410,72920400300020,72920408407210,72925232402498,72925864209646,72965416502426,74120480104846,74125800001246,74125808108436,74125872007208,74125872909662,74165496306076,74400064200028,74400624001214,74400696909630,74440248300082,74440800907200,74440872000040,74445000300062,74445008407252,74445072306024,74445632107210,74485816207278,74485888202446,74725216203694,74725280102466,74725288209656,74725848901214,74760000304864,74760008400098,74760632100056,76200040807282,76200048001224,76200608704878,76240224907210,76240296000050,76245056107220,76245680709646,76280400900088,76280472004884,76285232100098,76520432703652,76525824606014,76560056100066,76805408702498,76845024003678,76880440802494,76880448909684,76885200909664,76885208103606,76885272904832,78000656404846,78045032703694,78080456707246,78085216803622,78320480403620,78325248606024,78325800300020,78325808407210,78360664503688,78605456402466,78640240503636,78640800304822,78640808400056,78680424603690,78680496609652,78685816506052,78685888501220,78920456406092,78925280401240,78925288508430,78960072609600,80125224300030,80160088503698,80160640208488,80160648304884,80165400304864,80165408400098,80400600907256,80400672000096,80400672902424,80405432107266,80440224304832,80440856100024,80445056406008,80445680106092,80480400308490,80485864206020,80725824003636,80725896900096,82200024907266,82200096902434,82200656703620,82240200009632,82240200900004,82240272004800,82240272906092,82245032100014,82280456104868,82285288206030,82285840802494,82285848909684,82520416803636,82520480702408,82525248003646,82560032104816,82560664802462,82565424909632,82565496002472,82565496904800,82800064809672,82805456701240,82840240802410,82840248007272,82840248909600,82840872609698,82845000007252,82845072002420,82845072904888,82880424000010,82880424902478,82885256102488,82885888800008,84000000601272,84000008708462,84000072607234,84000632408420,84040816508488,84040888503656,84045016803678,84045640503636,84085824603690,84085896609652,84320464503604,84325856406092,84360080706076,84360088802472,84360640507262,84365472609600,84600600304878,84605432406040,84645688501276,84680400607278,84680408703674,84680472602446,84685232709616,84925264501224,84925824302410,86120440208404,86120448304800,86125208400014,86160064507272,86400024304888,86405488202418,86440208404816,86445664206076,86480456403642,86485848306004,86720416200082,86720488206044,86725240206024,86725248302420,86725800007210,86725800909678,86725872904846,88200000009688,88200072004856,88200632707208,88205464809672,88240816807262,88240880706034,88240888802430,88245088206086,88245640802410,88245648007272,88245648909600,88280432108442,88285824000010,88285824902478,88525224007220,88525224909688,88525296904856,88560080103698,88560648902446,88565400000098,88565400902426,88565408107288,88800040802466,88800048909656,88800600603652,88800672609614,88840224000066,88840296006028,88840296908482,88845056102404,88845688800050,88880400906052,88880472901220,88885232106062,88885864804884,90000056707218,90000616508404,90040232700082,90040864507230,90045064802420,90080416800010,90085248000020,90085248902488,90085800607278,90085808703674,90085872602446,90325200603694,90325272609656,90360624607246,90360696602414,90600024603662,90600096609624,90605416506024,90640832403688,90685280708498,90685288804894,90685840509684,90925248601208,90925872301292,90960664509652,90965496600034,92120496303682,92125816200082,92125888206044,92160040500066,92160048607256,92160600301252,92160608408442,92160672307214,92400000308462,92400072303630,92440256403698,92440816204884,92440880103656,92485264509694,92725224306008,92760080402472,92760088509662,92765408406062,94200688802486,94205440802466,94205448909656,94240232108498,94240864806018,94245624000066,94245696006028,94245696908482,94280416208426,94285800906052,94285872901220,94520440806092,94520448000034,94525200000014,94525208107204,94525272908430,94560624004868,94560624906020,94565456106030,94800096006070,94805480704872,94840200004816,94840272901276,94840832702462,94845664804800,94885216206046,94885288201214,94885848002400,94885848904868,96000664507286,96005424603662,96005496609624,96040216800066,96040288806028,96040840500024,96040848607214,96045040806008,96045048000076,96045048902404,96085224906062,96085296901230,96360048004878,96360048906030,96600008703646,96600072602418,96600632403604,96640256702472,96640880402430,96640888509620,96645016809642,96645080708414,96645088804810,96645640509600,96680432706004,96685824609668,96685896604836,96925856401276,96960016802488,96960640502446,96960648609636,96965400609616,98120408408498,98125232403646,98165480402472,98165488509662,98400056403614,98400616204800,98440232407272,98445064509610,98480416507200,98485240502488,98485248609678,98485800303674,98485872309636,98725832106076,98760064502456,98760624303642,98760696309604,102006162060465,102456963072105,102852405048960,102858723000885,105258321084840,105600645048645,108000963072660,108006561084525,108054801036000,108402723000045,108852804060000,120054249048585,120456081024585,120456729036840,120858561012840,123204249084840,123204969036525,123252561084945,123258168000525,123600402096645,123606009012225,123606081060840,126000720012720,126000729036000,126402561012000,126408168048540,126450882036780,126456480048645,126858960036900,129252240048120,129252969012720,129600162012165,129606480084900,129654000084705,141204006024900,141204726084525,141654168048960,144006804048945,144408645048225,144456246000360,144804807072945,144804888036900,144852408036705,144852480084060,144858087000900,147204486000045,147252726060720,147654567060000,162054963072660,162402165096645,162402804084360,162408402096225,162450405048120,162450486000465,162456723000045,162804645084900,165258882036360,165600486048480,165606723048060,168000084012885,168006321012465,168408801000720,168450165072840,168450885024525,168456402072420,168858963024780,180006489084525,180054720012720,180054729036000,180456561012000,180852723048480,183204009012780,183204081060000,183252321012885,183600243096480,183600963048165,183654162012165,186054489060720,186450642072525,186804882000105,186858720072780,186858729096060,189204408036840,189252720036945,189258327060465,189606240012840,189606249036120,189606960072465,189654561036225,201204567084360,201252168048120,201258486000045,201600000036540,201600720096165,204006645048780,204054966060405,204402807072105,204408486048060,204804648072780,204852249036540,204852960072885,204852969096165,207258165072420,207258885024105,207600480012945,207600489036225,207606006084120,222000885048885,222006402096780,222054084012885,222408243096060,222804405012840,222852006084540,222852726036225,225258642072105,225600246084225,228000564000300,228054483036945,228402324048645,228804804036900,228852486060945,228858003000900,228858723060525,240000642096885,240006249012465,240402483096165,240408000036120,240408729000720,240450723048900,240804963084420,240858882000105,243252801000300,243258408036840,246006648036525,246054240084945,246402882000660,246408480012525,246450402000465,246450483072360,246456081084225,249204240012000,249252561036780,249600402048480,249606729024945,261252648036945,261606168012840,261606888072465,261654480012945,261654489036225,264000168084945,264000807072660,264006405084525,264408966036885,264450240012420,264450960072045,267204087048645,267204726036360,267606567036900,282054564000300,282402405012000,282408723084885,282450726036780,282456324048645,282852567036060,282858804036900,285252165000465,285258402000045,285600006012165,285600087084060,285606324084900,288402165048480,288408402048060,288450486060105,288858564060360,300408561096840,300456882000660,300804084024645,300804723012360,300852324084060,303258240012000,303654402048480,306000801048885,306006489036360,306054000012885,306054009036165,306054081084780,306402642048165,306408249072945,306804483048705,306852084000840,306858321000420,309204009072420,309204720000825,309204729024105,309252321072525,309606561000105,309654882024885,321204168012000,321252480012105,321252489036780,321258087048645,321258726036360,324006246084360,324006966036045,324408087084900,324450009072840,324450729024525,324804240096705,324804249000420,324804969060045,324852561000525,324858807024780,327252807096885,327606327072780,327654648096165,342000486084465,342006003024420,342006723084045,342402966072720,342456165048480,342804726000105,345258963060765,345600567072885,345606804072465,345606885036420,345654405036225,348000165048900,348006483000825,348054084072525,348054723060240,348804486036585,360000243024525,360006561096000,360054801048885,360408321024780,360456642048165,360852804072885,360852885036840,360858483048705,363204162096165,363252402048900,363258009072420,363258720000825,363258729024105,363600324012945,363606642084420,366006249072105,366408009000885,366408720048840,366450084000000,366804243084585,369204561000660,369252162072360,369252882024045,369600003084060,381204648000825,381252249072525,381600162024900,381600882084525,381606489000105,384000408000300,384054327036945,384402960048945,384408567072465,384456168036225,384804000024645,384804081096540,402054165048900,402402087012945,402402726000660,402408324012525,402450327072360,402852168072900,402858486036585,405252405036780,405258003048645,405654246036060,405654966096945,408000645036465,408408003084900,408450726096420,408804966024000,420000084024360,420408882084105,420450804072045,420450885036000,420858243084585,423258561000660,423600165012780,423606402012360,423654003084060,426000402084465,426000483048420,426006009000045,426006720048000,426456882060300,426804723072000,429204321048165,429258960024720,429258969048000,429600564036840,429606162048705,429606801036420,429654483060465,441204480096945,441204489000660,441252009000465,441252720048420,441600642012465,444000240096420,444000960048105,444054168036780,444402009048480,444450321048585,444852801036840,444858408060360,447204807060765,447204888024720,447252408024525,447252489096420,447258726096000,447600321084840,447606648060045,447654240000525,462000087012105,462054645036465,462408165012360,462804327048705,462852648060465,462858966024000,465204645072720,465252966096105,465600168000525,465606405000105,465606486072000,465654726024885,468006084048165,468402246072885,468408564036420,468804087072165,468852327024900,480006801012765,480006882084660,480054402084465,480054483048420,480408642012045,480804885000720,480852405000525,480852486072420,480858723072000,483252084048585,483258321048165,483654564036840,486402003012945,486402084084840,486408321084420,486858402036585,489258081072885,501204240024885,501204249048165,501258807060765,501258888024720,501606081024165,501606729036420,501654321084840,504000000024360,504000009048900,504006327000825,504402561084525,504408168000105,504450801036000,504456489024885,504858240048540,507252249024360,507600882036360,507606480048225,507654009060945,507654081000360,522006885072405,522456246072885,522804168048540,522852480048645,522858087072165,525204405000660,525252006072360,525252726024045,525606966060825,528000246072045,528402726060300,528456645096945,528852807012465,528852888084360,528858486096225,540402804048945,540456003012945,540456084084840,540804645048225,540852246000360,543204963072240,543252564036000,543600486000045,546000003012105,546000084084000,546450165036165,546852645024420,549258561060300,549600165072420,549600885024105,549606402072000,549654723096780,561204720012300,561252321084000,561654882036360,564006168000660,564006888060285,564054480000765,564054489024045,564402321012465,564456969012300,564804801000720,564852402072420,567204480048780,567204489060300,567252000048585,567252009060105,567600642072105,582000327048420,582006645000345,582054246072045,582450489060720,582456726060300,585258804024720,585600408036840,585606006048705,585654327060465,588006324072720,588054645096105,588408165072000,588456405024885,588456486096780,588858246024165,600000804048105,600006483012300,600054003012105,600054084084000,600402645048780,600450966060405,600804486048060,603204084012465,603204723000180,603606564000720,603654165072420,603654885024105,606000564072825,606006801072405,606456243036840,606456963096465,606804165000885,606858003072165,606858084036120,609204483036525,621252801072825,621258480048780,621258489060300,621654642072105,624408408036420,624450483036945,624456000084840,624456720036525,627204240084525,627258168024885,627600402000045,627606009036585,642006486000180,642402648036525,642450240084945,642804480012525,642852081084225,645600240012000,648006804060285,648006885024240,648054405024045,648408645060825,648450648012720,648852489012000,660054564072825,660402405084525,660804966036885,660858165000885,663252885024660,663258483036525,663600087048645,663600726036360,663606324048225,666000324000765,666006642072240,666054243036000,666402165000045,666450405060720,666852246060000,666858564024945,669606084072945,669606723060660,669654324024420,681252642072660,681258240084525,681606882000240,681654402000045,684000162012720,684000882072345,684054000084000,684456561036360,684804402048060,684858321072945,687204000012465,687204081084360,687258648012300,687600963060765,687654801024105,687654882096000,702006246048945,702402489036360,702408087048225,702450000012885,702450009036165,702450081084780,702804249072945,705252168060720,705252888012405,705258405060300,705600009072420,705600720000825,705600729024105,708054966084765,708402807096465,708408486060660,708456006060465,708456087024420,708852240036225,708852969000825,720006003096945,720054324000765,720402246084360,720402966036045,720456165000045,720804087084900,723204324048780,723252645060405,723606165048060,726006402000180,726054723024825,726408243000720,726408963060345,726450966012240,726456564024105,729204084072105,729258642096465,741204801048465,741258000012465,741258081084360,741654963060765,744000642000285,744006969096300,744402483000825,744408009072000,744408720000405,744450084072525,744450723060240,744456321072105,744858162072780,744858882024465,747252162036945,747252801024660,747600003048645,762000408072825,762000480012240,762006087048780,762402249072105,762456807096465,762804009000885,762804720048840,765204327036525,765600561000660,768450240036780,768804408024945,768804489096840,768852009096645,768852081036060,780006564048465,780450327036945,780804567072465,780852168036225,783252486060240,783258084072105,783606645036885,786054564024660,786402405036360,786408003048225,786804246036900,786804966096525,786858165060525,789252804012405,789252885084300,789600726096000,801252243000300,801606402084885,801606483048840,801654003048645,804006720000960,804006729024240,804054321072660,804408561000240,804804003084900,807258240036360,807258969000960,822000249072660,822000969024345,822402009000045,822402720048000,822852882060300,822858408024945,822858489096840,825204168036360,825252480036465,825600321048165,825654960024720,825654969048000,828000648096720,828054567012405,828402408024105,828402480072720,828402489096000,828450000072525,828450729048885,828804240000105,828804249024780,828852561024885,840000006012720,840000726072345,840408165084885,840450168036780,840456405036360,840858246036900,840858966096525,843204645036045,843600807060765,843600888024720,843654726096000,846006003048780,846054324060405,846456885012765,846804006072780,846804726024465,846852327096165,849252645012240,849258243024105,861204402084045,861204483048000,861600645072720,864000243048885,864054882024180,864402084048165,864456642060765,864804564036420,864858483060045,867204162000825,867252402060240,867258000072105,867258009096780,867258729048465,882000000096885,882054648096720,882408807060345,882408888024300,882456408024105,882456480072720,882456489096000,882804321084420,882858240000105,882858249024780,885252249096885,885606489024465,885654081072885,888000408024660,888006006036525,888402240000660,888402960060285,888402969084825,888450561024045,888804009060525,888858648048840,900000567072180,900006165084045,900402327000825,900408645072300,900804168000105,900852489024885,900858006072780,900858726024465,903252006036945,903606246072465,906000966096240,906054165060240,906408324036885,906852888048945,906858405096840,909606645096525,909654966000345,921204963036825,921258162000825,921600405000660,921606003012525,921606084084420,924000723036300,924408162048840,924852645096945,927600804024720,942054408024660,942408648060180,942456240000660,942456960060285,942456969084825,942858009060525,945204480000345,945252081072045,945252729084300,945654561060300,948000960060705,948054807048720,948402000048165,948402729012765,948456648048000,948852162060465,948858480024000,960054966096240,960402168000660,960402888060285,960408405000240,960450480000765,960450489024045,960852969012300,963600480048780,963600489060300,966000087036465,966000726024180,966006324036045,966402567024720,966408804024300,966450168096420,966450888048105,966456405096000,966804327060045,966858966048360,969258564012765,969600168024885,969606405024465,969606486096360,969654006096165,981252324036465,981654804024720,984006162048000,984402324072720,984450645096105,984804165072000,984852405024885,984852486096780,984858723096360,987258321060765,987606243036420,987606963096045,1020061620604656,1024569630721056,1028524050489600,1052583210848400,1080009630726608,1080548010360000,1088528040600000,1200542490485856,1204560810245856,1204567290368400,1208585610128400,1232042490848400,1232525610849456,1236060090122256,1236060810608400,1260007200127200,1260007290360000,1264025610120000,1264081680485408,1264508820367808,1268589600369008,1292522400481200,1292529690127200,1296064800849008,1296540000847056,1412040060249008,1416541680489600,1440068040489456,1444086450482256,1444562460003600,1448048070729456,1448048880369008,1448524080367056,1448524800840608,1448580870009008,1472527260607200,1476545670600000,1620549630726608,1624028040843600,1624084020962256,1624504050481200,1624504860004656,1628046450849008,1652588820363600,1656004860484800,1656067230480608,1680063210124656,1684088010007200,1684501650728400,1684564020724208,1688589630247808,1800547200127200,1800547290360000,1804565610120000,1808527230484800,1832040090127808,1832040810600000,1836002430964800,1860544890607200,1868048820001056,1868587200727808,1868587290960608,1892044080368400,1892527200369456,1892583270604656,1896062400128400,1896062490361200,1896069600724656,1896545610362256,2012045670843600,2012521680481200,2016000000365408,2040066450487808,2044028070721056,2044084860480608,2048046480727808,2048522490365408,2072581650724208,2072588850241056,2076004800129456,2076004890362256,2076060060841200,2220064020967808,2224082430960608,2228044050128400,2228520060845408,2228527260362256,2252586420721056,2256002460842256,2280005640003008,2280544830369456,2288048040369008,2288524860609456,2288580030009008,2400062490124656,2404080000361200,2404087290007200,2404507230489008,2408049630844208,2408588820001056,2432528010003008,2432584080368400,2460542400849456,2464028820006608,2464504020004656,2464504830723600,2464560810842256,2492042400120000,2492525610367808,2496004020484800,2496067290249456,2612526480369456,2616061680128400,2616068880724656,2616544800129456,2616544890362256,2640001680849456,2640008070726608,2644502400124208,2672047260363600,2676065670369008,2820545640003008,2824024050120000,2824507260367808,2828525670360608,2828588040369008,2852521650004656,2856000870840608,2856063240849008,2884021650484800,2884084020480608,2884504860601056,2888585640603600,3004085610968400,3004568820006608,3008047230123600,3008523240840608,3032582400120000,3036544020484800,3060064890363600,3060540810847808,3064082490729456,3068044830487056,3068520840008400,3068583210004208,3092040090724208,3092047200008256,3092047290241056,3096065610001056,3212041680120000,3212524800121056,3212524890367808,3212587260363600,3240062460843600,3244080870849008,3244500090728400,3248042400967056,3248042490004208,3248588070247808,3276063270727808,3420004860844656,3420060030244208,3424029660727200,3424561650484800,3428047260001056,3456068040724656,3456068850364208,3456544050362256,3480001650489008,3480064830008256,3480547230602400,3488044860365856,3600065610960000,3604083210247808,3608528850368400,3608584830487056,3632524020489008,3632580090724208,3632587200008256,3632587290241056,3636003240129456,3636066420844208,3660062490721056,3664087200488400,3664500840000000,3668042430845856,3692045610006608,3692521620723600,3696000030840608,3812046480008256,3816001620249008,3816064890001056,3840004080003008,3840543270369456,3844029600489456,3844085670724656,3844561680362256,3848040810965408,4020541650489008,4024020870129456,4024027260006608,4024503270723600,4028521680729008,4028584860365856,4052524050367808,4056542460360608,4056549660969456,4080006450364656,4084080030849008,4084507260964208,4088049660240000,4200000840243600,4204088820841056,4204508850360000,4208582430845856,4232585610006608,4236001650127808,4236064020123600,4236540030840608,4260004020844656,4260004830484208,4260067200480000,4264568820603008,4268047230720000,4292589600247200,4292589690480000,4296005640368400,4296061620487056,4296068010364208,4296544830604656,4412044800969456,4412044890006608,4412520090004656,4412527200484208,4416006420124656,4440002400964208,4440009600481056,4440541680367808,4444020090484800,4444503210485856,4448528010368400,4448584080603600,4472048880247200,4472524890964208,4472587260960000,4476003210848400,4620000870121056,4620546450364656,4624081650123600,4628043270487056,4628526480604656,4628589660240000,4652046450727200,4652529660961056,4656064050001056,4656064860720000,4684085640364208,4688523270249008,4800068820846608,4800544020844656,4800544830484208,4808048850007200,4808524860724208,4808587230720000,4832520840485856,4836545640368400,4864020030129456,4864020840848400,4864083210844208,4868584020365856,5012588880247200,5016067290364208,5016543210848400,5040000000243600,5040000090489008,5040063270008256,5044081680001056,5044508010360000,5048582400485408,5072522490243600,5076008820363600,5076064800482256,5076540090609456,5076540810003600,5228041680485408,5252044050006608,5252520060723600,5256069660608256,5284027260603008,5284566450969456,5288528070124656,5288528880843600,5288584860962256,5404028040489456,5404560030129456,5404560840848400,5408046450482256,5408522460003600,5432049630722400,5432525640360000,5460000030121056,5460000840840000,5468526450244208,5492585610603008,5496001650724208,5496008850241056,5496064020720000,5496547230967808,5612047200123008,5612523210840000,5616548820363600,5640061680006608,5644023210124656,5644569690123008,5648048010007200,5648524020724208,5672044800487808,5672044890603008,5672520000485856,5672520090601056,5676006420721056,5820003270484208,5820066450003456,5824504890607200,5824567260603008,5852588040247200,5856004080368400,5856060060487056,5856543270604656,5880063240727200,5880546450961056,5884081650720000,5884564860967808,6000008040481056,6000064830123008,6000540030121056,6000540840840000,6004026450487808,6008044860480608,6032040840124656,6032047230001808,6036065640007200,6036541650724208,6036548850241056,6060005640728256,6064562430368400,6064569630964656,6068580840361200,6212528010728256,6212584800487808,6212584890603008,6216546420721056,6244084080364208,6244504830369456,6244560000848400,6276060090365856,6420064860001808,6424502400849456,6428520810842256,6456002400120000,6480068850242400,6484086450608256,6484506480127200,6488524890120000,6600545640728256,6632528850246608,6636007260363600,6636063240482256,6660066420722400,6660542430360000,6664504050607200,6668522460600000,6668585640249456,6696060840729456,6696067230606608,6696543240244208,6812526420726608,6816068820002400,6840001620127200,6840008820723456,6840540000840000,6844565610363600,6848044020480608,6848583210729456,6872040000124656,6872040810843600,6872586480123008,6876548010241056,6876548820960000,7020062460489456,7024024890363600,7024080870482256,7024500810847808,7028042490729456,7052521680607200,7052584050603008,7056000090724208,7056007200008256,7056007290241056,7084028070964656,7084084860606608,7084560060604656,7084560870244208,7088522400362256,7088529690008256,7200060030969456,7204022460843600,7208040870849008,7232043240487808,7236061650480608,7260064020001808,7260547230248256,7264082430007200,7264089630603456,7264509660122400,7264565640241056,7292040840721056,7292586420964656,7412048010484656,7412580000124656,7412580810843600,7440069690963008,7444024830008256,7444080090720000,7444507230602400,7444563210721056,7448581620727808,7448588820244656,7472521620369456,7472528010246608,7620004080728256,7620004800122400,7620060870487808,7624022490721056,7624568070964656,7628047200488400,7656005610006608,7684502400367808,7688044080249456,7688044890968400,7688520810360608,7800065640484656,7804503270369456,7808045670724656,7808521680362256,7832524860602400,7832580840721056,7860545640246608,7864024050363600,7864080030482256,7868042460369008,7892528850843008,7896007260960000,8012522430003008,8016064830488400,8040067200009600,8040067290242400,8040543210726608,8044085610002400,8048040030849008,8072582400363600,8072589690009600,8220002490726608,8220009690243456,8224027200480000,8228528820603008,8228584080249456,8228584890968400,8252041680363600,8252524800364656,8256549600247200,8256549690480000,8280006480967200,8284024080241056,8284024800727200,8284024890960000,8288042400001056,8288042490247808,8400000060127200,8400007260723456,8404501680367808,8404564050363600,8408582460369008,8436008880247200,8436547260960000,8460060030487808,8468040060727808,8468047260244656,8492526450122400,8492582430241056,8612044830480000,8616006450727200,8640548820241808,8648045640364208,8672041620008256,8672524020602400,8672580000721056,8672580090967808,8672587290484656,8820546480967200,8824088070603456,8824088880243008,8824564080241056,8824564800727200,8824564890960000,8828043210844208,8828582400001056,8828582490247808,8856064890244656,8880004080246608,8884022400006608,8884029690848256,8888586480488400,9000005670721808,9004023270008256,9004086450723008,9008041680001056,9008580060727808,9008587260244656,9032520060369456,9036062460724656,9060009660962400,9060541650602400,9068528880489456,9068584050968400,9096549660003456,9212049630368256,9212581620008256,9216004050006608,9216060840844208,9240007230363008,9244081620488400,9248526450969456,9276008040247200,9420544080246608,9424086480601808,9424562400006608,9424569690848256,9452044800003456,9452527290843008,9456545610603008,9480009600607056,9480548070487200,9484566480480000,9488521620604656,9488584800240000,9600549660962400,9604021680006608,9604084050002400,9608529690123008,9636004800487808,9636004890603008,9660000870364656,9660007260241808,9664025670247200,9664088040243008,9664501680964208,9664508880481056,9664564050960000,9668589660483600,9696064050244656,9696064860963600,9812523240364656,9816548040247200,9840061620480000,9844023240727200,9844506450961056,9848041650720000,9848524860967808,9848587230963600,9876062430364208,10200616206046568,10285240504896008,10525832108484002,10800096307266086,10805480103600001,12005424904858560,12045672903684001,12360600901222567,12600072001272009,12640256101200009,12640816804854088,12645088203678089,12685896003690084,12925224004812002,12925296901272005,12960648008490082,14165416804896002,14400680404894563,14440864504822563,14480480707294561,14480488803690081,14485808700090082,16205496307266087,16240840209622568,16245040504812006,16245048600046562,16280464508490086,16525888203636006,16560672304806086,16845640207242087,18085272304848000,18320400901278084,18320408106000008,18605448906072004,18680488200010565,18685872007278081,18685872909606087,18920440803684003,18960624903612003,18960696007246566,20120456708436008,20125216804812000,20400664504878080,20440848604806080,20485224903654087,20725816507242081,20725888502410568,20760048001294566,20760600608412008,22200640209678085,22240824309606085,22280440501284001,22285272603622562,22560024608422560,22800056400030088,22805448303694569,22885248606094567,24040800003612008,24045072304890087,24085888200010566,24325840803684004,24640288200066082,24645048307236003,24960040204848002,26160688807246564,26165448001294567,26760656703690084,28205456400030089,28525216500046565,28560632408490089,28840840204806089,28845048606010565,28885856406036007,30045688200066083,30085232408406084,30365440204848003,30600648903636006,30680448304870560,30685208400084007,30685832100042083,30920400907242087,30920472000082568,30960656100010568,32125248001210565,32440808708490083,32445000907284001,32480424009670565,32480424900042080,32485880702478083,32760632707278081,34200048608446563,34200600302442087,34240296607272004,34565440503622565,34800016504890083,34800648300082562,34805472306024005,34880448603658569,36040832102478081,36085288503684007,36085848304870561,36325800907242088,36325872000082569,36360664208442081,36640872004884000,36645008400000005,36920456100066085,36925216207236006,36960000308406086,38120464800082566,38160016202490081,38160648900010566,38440296004894569,38440856707246567,38480408109654082,40205416504890084,40240208701294567,40240272600066089,40285216807290082,40525240503678082,40565424603606082,40800064503646567,40845072609642082,40880496602400008,42000008402436003,42040888208410567,42045088503600005,42325856100066086,42365400308406087,42645688206030086,42925896002472005,42960056403684009,42960616204870563,42960680103642085,42965448306046562,44120448009694568,44120448900066083,44125272004842082,44160064201246565,44400024009642080,44400096004810567,44440200904848003,44720488802472002,46200008701210565,46205464503646568,46240816501236007,46280432704870567,46285264806046566,46285896602400009,46520464507272007,46525296609610568,46560648607200007,46885232702490086,48000688208466084,48080488500072000,48325208404858569,48640208408484008,48640832108442084,48685840203658562,50125888802472003,50160672903642083,50400632700082569,50440816800010569,50485824004854087,50725224902436008,50760088203636001,50765400906094560,50765408100036002,52280416804854084,52560696606082563,52885288808436002,54045600301294560,54045608408484009,54085224600036006,54325256403600008,54600008408400006,54925856106030089,54960088502410563,56165488203636002,56400616800066086,56440232101246568,56445696901230088,56480480100072009,56485240207242083,56720448004878089,56720448906030086,56725200004858561,56760064207210568,58200032704842082,58200664500034561,58245048906072000,58565432706046569,60000648301230086,60005408408400007,60320408401246562,60320472300018084,60360656400072003,60365488502410564,60600056407282562,60645696309646565,62125280107282569,62125848906030087,62165464207210569,62440840803642086,62445048303694565,62445600008484001,62760600903658562,64560024001200008,64840864506082566,64845064801272004,64885248901200004,66005456407282563,66325288502466081,66360072603636008,66360632404822562,66600664207224002,66645040506072009,66685224606000009,66685856402494569,66960608407294567,66960672306066089,66965432402442081,68125264207266086,68400016201272002,68445656103636005,68480440204806085,68720408108436003,68765488209600005,70240248903636002,70245008108478087,70525216806072003,70560000907242083,70560072000082564,70840848606066083,70885296900082560,72000600309694561,72040224608436007,72600640200018087,72605472302482567,72640824300072006,72645656402410567,72920408407210565,72925864209646568,74125808108436004,74400696909630089,74440800907200000,74445072306024001,74485888202446561,74725216203694568,76200040807282569,76240224907210569,76560056100066081,76880448909684007,78000656404846565,78080456707246563,78325808407210566,78605456402466084,78640800304822565,78680424603690083,78925288508430084,80125224300030088,80160648304884007,80400672902424004,80405432107266089,80480400308490088,80725824003636008,82200024907266086,82285288206030082,82285848909684008,82520416803636005,82525248003646560,82565496002472001,82565496904800007,82800064809672005,82840248909600005,82880424000010567,84000000601272009,84000072607234561,84045016803678089,84085824603690084,84600600304878082,84680400607278080,84680472602446567,86120448304800005,86160064507272003,86720416200082561,86725240206024004,86725800909678083,88205464809672006,88240880706034565,88240888802430085,88245648007272000,88245648909600006,88280432108442080,88285824000010568,88560648902446561,88840224000066084,88840296908482561,90040232700082565,90080416800010565,90085800607278081,90085872602446568,90360624607246566,90685288804894564,90685840509684000,92120496303682561,92125816200082562,92160040500066088,92485264509694569,92760080402472007,94240864806018082,94245624000066085,94245696908482562,94565456106030085,94885216206046561,94885848002400004,96040216800066082,96040840500024005,96085296901230084,96360048004878085,96360048906030082,96600008703646560,96600072602418082,96640256702472001,96645088804810562,96685896604836004,96960648609636002,98125232403646567,98165480402472008,98400616204800008,98440232407272006,98445064509610567,98480416507200006,98485248609678086,98485872309636009,108054801036000018,120054249048585600,123606009012225672,126000720012720096,126402561012000096,126408168048540888,126450882036780894,126858960036900846,144006804048945636,144408645048225636,144804807072945612,144804888036900810,144858087000900828,162054963072660870,162450405048120066,162450486000465624,165606723048060864,168456402072420876,183204009012780846,183204081060000084,186054489060720048,186858729096060870,189606960072465660,207606006084120084,222006402096780852,222408243096060852,222804405012840012,225600246084225600,228000564000300888,228852486060945678,240450723048900870,240858882000105660,243258408036840042,246450483072360036,261606888072465642,261654480012945672,267606567036900846,288450486060105654,300456882000660834,300852324084060846,303654402048480030,306804483048705606,306852084000840078,309204009072420876,324408087084900834,324804249000420804,324858807024780834,342000486084465630,342006003024420870,348000165048900834,348006483000825624,360408321024780816,360852885036840078,363258720000825696,363606642084420810,366450084000000054,369204561000660852,369600003084060864,381204648000825660,381606489000105660,384402960048945690,384408567072465678,384804081096540822,402402087012945672,402852168072900828,405252405036780822,405654246036060822,408000645036465678,408804966024000084,420000084024360030,420450885036000054,426456882060300864,429600564036840096,429606801036420858,441204489000660834,441252720048420828,444402009048480030,462408165012360078,462804327048705678,465204645072720072,465606486072000072,480006882084660840,480804885000720000,483252084048585690,486402084084840084,486408321084420846,501258888024720030,504006327000825696,504408168000105696,504858240048540870,507252249024360084,507600882036360018,507654009060945606,525606966060825636,528852888084360024,540456003012945600,546000084084000060,549600885024105636,564402321012465684,564804801000720090,567204489060300864,567252000048585618,582000327048420828,582006645000345618,585654327060465690,600054084084000078,603204723000180846,603606564000720036,606000564072825624,606456963096465654,621252801072825696,621654642072105696,624456000084840012,648450648012720042,648852489012000042,663252885024660810,666858564024945696,669654324024420816,684000162012720024,684456561036360054,705252168060720030,705600720000825642,708852969000825606,720402246084360078,726054723024825672,726456564024105672,741258081084360042,744408009072000000,744858882024465618,747252162036945684,762000408072825696,762402249072105696,765600561000660816,768804489096840072,783258084072105660,786054564024660846,786408003048225654,789252885084300840,801252243000300888,804006729024240042,804804003084900888,822852882060300828,825204168036360054,825252480036465606,825654960024720012,825654969048000078,828804240000105678,840000006012720096,840000726072345618,840450168036780894,840858246036900846,846006003048780828,846804006072780804,846804726024465672,861600645072720036,867252402060240042,867258009096780834,882054648096720066,882456480072720000,882456489096000066,885606489024465618,888402969084825612,903606246072465660,906858405096840000,921258162000825624,921600405000660888,924852645096945696,942408648060180822,942456240000660852,948852162060465618,948858480024000048,960852969012300840,963600489060300828,966000087036465606,966000726024180822,966402567024720012,966858966048360042,981252324036465678,981654804024720084,984450645096105672,1080548010360000180,1200542490485856008,1236060090122256720,1260007200127200961,1444086450482256366,1448048880369008100,1448580870009008288,1860544890607200485,2220064020967808524,2228044050128400125,2256002460842256008,2288524860609456784,2404507230489008702,2408588820001056602,2432584080368400425,2464504830723600361,2616068880724656424,3036544020484800301,3068044830487056064,3248588070247808345,3420004860844656301,3420060030244208700,3604083210247808165,3608528850368400786,3632587200008256963,3692045610006608523,3696000030840608647,3812046480008256607,3816064890001056600,4028521680729008280,4052524050367808222,4080006450364656789,4088049660240000845,4200000840243600307,4296068010364208580,4412527200484208287,4624081650123600784,4628043270487056787,4800068820846608404,4808048850007200005,4832520840485856906,4864020840848400841,4864083210844208465,5012588880247200305,5040063270008256961,5072522490243600841,5076008820363600187,5404560030129456004,5460000840840000607,5648048010007200900,5672520000485856186,5820003270484208285,5856543270604656902,6060005640728256249,6064569630964656548,6216546420721056967,6488524890120000428,6632528850246608102,6696543240244208163,7052521680607200301,7264565640241056724,7412580810843600420,7444080090720000002,7448588820244656189,7624022490721056965,7832580840721056609,7892528850843008402,8040067290242400429,8048040030849008886,8228528820603008286,8252524800364656066,8256549600247200129,8400007260723456184,8404501680367808948,8460060030487808287,8468047260244656728,8672524020602400427,8824564890960000663,8856064890244656187,8884029690848256121,9068584050968400006,9248526450969456969,9424562400006608523,9488521620604656185,9636004890603008284,9660000870364656064,9660007260241808226,9664025670247200127,9668589660483600426,9812523240364656789,10805480103600001800,12005424904858560080,12360600901222567200,14440864504822563660,14480488803690081000,14485808700090082880,22200640209678085240,22560024608422560080,22885248606094567840,24045072304890087020,24085888200010566020,26160688807246564240,30680448304870560640,34200600302442087000,36085288503684007860,38160648900010566000,40285216807290082800,40525240503678082220,42960680103642085800,46240816501236007840,48000688208466084040,48325208404858569060,54045600301294560040,56480480100072009000,56725200004858561860,58565432706046569020,60645696309646565480,64885248901200004280,66325288502466081020,72645656402410567240,74125808108436004200,74440800907200000020,78925288508430084020,80480400308490088860,82285288206030082860,82525248003646560660,84000072607234561840,84045016803678089480,84680472602446567280,90685840509684000060,96360048906030082840,96600008703646560640,96600072602418082260,96685896604836004260,123606009012225672009,144408645048225636603,144858087000900828807,240858882000105660207,306804483048705606405,342006003024420870009,360852885036840078603,402852168072900828009,564804801000720090006,567252000048585618606,663252885024660810201,726456564024105672408,741258081084360042000,846804726024465672807,906858405096840000609,963600489060300828408,966000087036465606405,966858966048360042609,1236060090122256720090,1444086450482256366038,2408588820001056602074,3420060030244208700096,3608528850368400786036,4028521680729008280092,5672520000485856186064,7264565640241056724082,7412580810843600420006,8468047260244656728072,9068584050968400006092,9668589660483600426096,12360600901222567200901,14440864504822563660381,24085888200010566020746,36085288503684007860367,40285216807290082800921,72645656402410567240820,144408645048225636603816,360852885036840078603672,402852168072900828009216,3608528850368400786036725]\n  def next(n) do\n    Enum.find(@polydivisible_numbers, &(&1 > n))\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79748,"user_id":470,"body":"defmodule Kata do\n\tdef next(n),do: forge(Enum.to_list(1..9),2) |> Enum.find(&(&1 > n))\n\t\n\tdefp forge([],_),do: []\n\tdefp forge(r,q),do: r ++ forge((for n1 <- r,n2 <- 0..9,rem(10*n1+n2,q) == 0,do: 10*n1+n2),q+1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e4d8a53b499e20016b018a0":[{"id":79749,"user_id":527,"body":"defmodule Kata do\n  def decoder(s) do\n    for [m] <- Regex.scan(~r\/(?(?=0)0(?R).|1)\/, s),\n        {n, \"\"} = Integer.parse(m, 2),\n        do: n - 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79750,"user_id":null,"body":"defmodule Kata do\n  def decoder(\"\"), do: []\n\n  def decoder(s) do\n    blen = 1 + 2 * (Regex.run(~r\/^0*\/, s) |> hd |> String.length())\n    [String.to_integer(String.slice(s, 0, blen), 2) - 1] ++ decoder(String.slice(s, blen..-1))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79751,"user_id":null,"body":"defmodule Kata do\n    def decoder(s) do\n      s\n      |> forge()\n      |> Enum.map(&bits_to_int\/1)\n    end\n    \n    defp forge(bits, res \\\\ [])\n    defp forge(\"\", res), do: res\n    defp forge(bits, res) do\n      lzero = get_leading_zero_count(bits)\n      {current, rest} = bits |> String.split_at(2 * lzero + 1) \n      forge(rest, res ++ [current])\n    end\n    \n    defp get_leading_zero_count(bits) do\n      bits\n      |> String.split(\"1\") \n      |> hd\n      |> String.length \n    end\n    \n    defp bits_to_int(bits) do\n      bits \n      |> String.codepoints\n      |> Enum.reverse\n      |> Enum.with_index\n      |> Enum.reduce(0, fn {val, idx}, acc ->\n        acc + String.to_integer(val) * :math.pow(2, idx)\n      end)\n      |> Kernel.-(1)\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79752,"user_id":null,"body":"defmodule Kata do\n    \n    def decoder(str) do\n      str\n      |> read(0, [])\n      |> Enum.map(&binary_decode\/1)\n      |> Enum.map(& &1 - 1)\n    end\n    \n    defp read(\"\", _, acc), do: Enum.reverse(acc)\n    \n    defp read(\"0\" <> rest, count, acc) do\n      read(rest, count + 1, acc)\n    end\n    \n    defp read(\"1\" <> _ = str, count, acc) do\n      {binary, rest} = String.split_at(str, count + 1)\n      read(rest, 0, [binary | acc])\n    end\n    \n    defp binary_decode(str) do\n      String.reverse(str)\n      |> String.graphemes()\n      |> Enum.map(&String.to_integer\/1)\n      |> Enum.with_index()\n      |> Enum.map(fn {n, index} -> n * trunc(:math.pow(2, index)) end)\n      |> Enum.reduce(&+\/2)\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79753,"user_id":null,"body":"# Apologies for my amateurish style, in Elixir!\ndefmodule Kata do\n    def decoder(\"\"), do: []\n    def decoder(s) do\n        case Regex.run(~r\/(0*)(.+)\/, s) do\n            nil -> []\n            [_, zeroes, rest] ->\n                {num_str, rest}  = String.split_at(rest, String.length(zeroes)+1)\n                {num, _}         = Integer.parse(num_str, 2)\n                [num-1 | decoder(rest)]\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79754,"user_id":527,"body":"defmodule Kata do\n  def decoder(\"\"), do: []\n  def decoder(s) do\n    {b, 1} = :binary.match(s, \"1\")\n    l = b + 1\n    <<_ :: binary-size(b), h :: binary-size(l), t :: binary>> = s\n    {n, \"\"} = Integer.parse(h, 2)\n    [n - 1 | decoder(t)]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79755,"user_id":null,"body":"defmodule Kata do\n    def decoder(\"\"), do: []\n    def decoder(s) do\n        {i, n} = case :binary.match(s, \"1\") do\n            {i, _j} -> {i, String.slice(s, i .. 2 * i) |> Integer.parse(2) |> elem(0)}\n            _ -> {1, 1}\n        end\n        [ n - 1 | decoder(String.slice(s, 2 * i + 1 .. -1)) ]\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e5ccbda30e9d0001ec77bb6":[{"id":79756,"user_id":null,"body":"defmodule Kata do\n  def send(s) do\n    to_charlist(s)\n    |> Enum.map_join(fn c -> Integer.to_string(c, 2) |> String.pad_leading(7, \"0\") end)\n    |> String.graphemes()\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map_join(\" \", fn chk ->\n      \"#{if hd(chk) == \"0\", do: \"00\", else: \"0\"} #{String.duplicate(\"0\", length(chk))}\"\n    end)\n  end\n\n  def receive(s) do\n    String.split(s)\n    |> Enum.chunk_every(2)\n    |> Enum.flat_map(fn [a, b] ->\n      List.duplicate(if(a == \"00\", do: 0, else: 1), String.length(b))\n    end)\n    |> Enum.chunk_every(7)\n    |> Enum.map(&Integer.undigits(&1, 2))\n    |> List.to_string()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79757,"user_id":null,"body":"defmodule Kata do\n  def send(s) do\n    to_charlist(s)\n    |> Enum.map_join(fn c ->\n      Integer.to_string(c, 2)\n      |> String.pad_leading(7, \"0\")\n    end)\n    |> String.graphemes()\n    |> Enum.chunk_by(&Function.identity\/1)\n    |> Enum.map(fn chk ->\n      \"#{if hd(chk) == \"0\", do: \"00\", else: \"0\"} #{String.duplicate(\"0\", length(chk))}\"\n    end)\n    |> Enum.join(\" \")\n  end\n\n  def receive(s) do\n    String.split(s)\n    |> Enum.chunk_every(2)\n    |> Enum.flat_map(fn [a, b] ->\n      List.duplicate(if(a == \"00\", do: 0, else: 1), String.length(b))\n    end)\n    |> Enum.chunk_every(7)\n    |> Enum.map(&Integer.undigits(&1, 2))\n    |> List.to_string()\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79758,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n      s \n      |> String.to_charlist()\n      |> Enum.map(&(Integer.to_string(&1, 2) |> String.pad_leading(7, \"0\")))\n      |> Enum.join()\n      |> String.split(~r\/1{1,}\/, include_captures: true, trim: true)\n      |> Enum.map(&encode_00(&1))\n      |> Enum.join(\" \")\n    end\n    \n    def receive(s) do\n      Regex.scan(~r\/0{1,2} 0{1,}\/, s)\n      |> List.flatten()\n      |> Enum.map(&decode_00(&1))\n      |> Enum.join()\n      |> String.split(~r\/.{7}\/, include_captures: true, trim: true)\n      |> Enum.map(&(String.to_integer(&1, 2)))\n      |> List.to_string\n      \n    end\n    \n    def encode_00(numbers) do\n      case String.at(numbers, 0) do\n        \"1\" ->\n          \"0 #{String.pad_leading(\"\", String.length(numbers), \"0\")}\"\n        \"0\" ->\n          \"00 #{String.pad_leading(\"\", String.length(numbers), \"0\")}\"\n        _ ->\n          :error\n      end\n    end\n    \n    def decode_00(numbers) do\n      String.split(numbers)\n      |> case do\n        [\"0\", zeroes] ->\n          \"#{String.pad_leading(\"\", String.length(zeroes), \"1\")}\"\n        [\"00\", zeroes] ->\n          zeroes\n        _ ->\n          :error\n        end\n    end\n    \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79759,"user_id":null,"body":"defmodule Kata do\n\n  def send(s) do\n    s\n    |> String.graphemes\n    |> encode\n  end\n\n  def receive(s) do\n    s\n    |> String.split(\" \")\n    |> decode\n  end\n\n  defp encode(seq) do\n    seq\n    |> Enum.map(&to_bits\/1)\n    |> Enum.join\n    |> String.graphemes\n    |> Enum.chunk_by(& &1)\n    |> Enum.map(&convert_chunk_to\/1)\n    |> Enum.join(\" \")\n  end\n\n  defp decode(seq) do\n    seq\n    |> Enum.chunk_every(2)\n    |> Enum.map(&convert_chunk_from\/1)\n    |> Enum.join\n    |> String.graphemes\n    |> Enum.chunk_every(7)\n    |> Enum.map(&Enum.join\/1)\n    |> Enum.map(&from_bits\/1)\n    |> List.to_string\n  end\n\n  defp to_bits(sym) do\n    sym\n    |> :binary.first\n    |> Integer.to_string(2)\n    |> String.pad_leading(7, \"0\")\n  end\n\n  defp from_bits(str) do\n    str\n    |> Integer.parse(2)\n    |> elem(0)\n  end\n\n  defp convert_chunk_to(seq) when hd(seq) == \"0\", do: \"00 \" <> String.duplicate(\"0\", length(seq))\n  defp convert_chunk_to(seq) when hd(seq) == \"1\", do: \"0 \" <> String.duplicate(\"0\", length(seq))\n\n  defp convert_chunk_from([\"0\", str]), do: String.duplicate(\"1\", String.length(str))\n  defp convert_chunk_from([\"00\", str]), do: String.duplicate(\"0\", String.length(str))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79760,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        String.codepoints(s)|> Enum.map(&to_binary_digits\/1) |> List.flatten |> build_message\n    end\n    \n    def to_binary_digits(x), do: to_ascii_char_code(x) |> Integer.digits(2) |> pad\n    \n    def to_ascii_char_code(x), do: String.to_charlist(x) |> hd\n    \n    def pad(binary_list) do\n      leading_zeroes = List.duplicate(0, 7 - length(binary_list))\n      leading_zeroes ++ binary_list\n    end\n    \n    def build_message(binary), do: build_message(binary, [])\n    \n    def build_message([], message), do: Enum.join(message, \" \")\n    def build_message([h | t] = binary_digits, message) do\n      count = digit_chunk_size(binary_digits, h)\n      new_message = message ++ [binary_to_unary(h), String.duplicate(\"0\", count)]\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def digit_chunk_size(binary_digits, digit), do: length(Enum.take_while(binary_digits, fn x -> x == digit end))\n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {unary_to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&binary_digits_to_character_string\/1)\n        |> Enum.join\n    end\n    \n    def binary_digits_to_character_string(bin) do\n      {value, _ } = Enum.join(bin) |> Integer.parse(2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.reduce(digit_frequencies, \"\", fn {b, n}, acc -> acc <> String.duplicate(Integer.to_string(b), n) end)\n    end\n    \n    def unary_to_binary(\"00\"), do: 0\n    def unary_to_binary(\"0\"), do: 1\n    \n    def binary_to_unary(0), do: \"00\"\n    def binary_to_unary(1), do: \"0\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79761,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        String.codepoints(s)\n        |> Enum.map(&to_binary_digits\/1)\n        |> List.flatten\n        |> build_message\n    end\n    \n    def to_binary_digits(x), do: to_ascii_char_code(x) |> Integer.digits(2) |> pad\n    \n    def to_ascii_char_code(x), do: String.to_charlist(x) |> hd\n    \n    def pad(binary_list) do\n      leading_zeroes = List.duplicate(0, 7 - length(binary_list))\n      leading_zeroes ++ binary_list\n    end\n    \n    def build_message(binary), do: build_message(binary, [])\n    \n    def build_message([], message), do: Enum.join(message, \" \")\n    def build_message([h | t] = binary_digits, message) do\n      count = digit_chunk_size(binary_digits, h)\n      new_message = message ++ [binary_to_unary(h), String.duplicate(\"0\", count)]\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def digit_chunk_size(binary_digits, digit), do: length(Enum.take_while(binary_digits, fn x -> x == digit end))\n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {unary_to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&Enum.join\/1)\n        |> Enum.map(&parse_binary\/1)\n        |> Enum.join\n    end\n    \n    def parse_binary(bin) do\n      {value, _ } = Integer.parse(bin, 2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.reduce(digit_frequencies, \"\", fn {b, n}, acc -> acc <> String.duplicate(Integer.to_string(b), n) end)\n    end\n    \n    def unary_to_binary(\"00\"), do: 0\n    def unary_to_binary(\"0\"), do: 1\n    \n    def binary_to_unary(0), do: \"00\"\n    def binary_to_unary(1), do: \"0\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79762,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        String.codepoints(s)\n        |> Enum.map(&to_binary_digits\/1)\n        |> List.flatten\n        |> build_message\n    end\n    \n    def to_binary_digits(x), do: to_ascii_char_code(x) |> Integer.digits(2) |> pad\n    \n    def to_ascii_char_code(x), do: String.to_charlist(x) |> hd\n    \n    def pad(binary_list) do\n      leading_zeroes = List.duplicate(0, 7 - length(binary_list))\n      leading_zeroes ++ binary_list\n    end\n    \n    def build_message(binary), do: build_message(binary, [])\n    def build_message([], message), do: Enum.join(message, \" \")\n    \n    def build_message([h | t] = binary_digits, message) do\n      count = length(Enum.take_while(binary_digits, fn x -> x == h end))\n      new_message = message ++ [binary_to_unary(h), String.duplicate(\"0\", count)]\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {unary_to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&Enum.join\/1)\n        |> Enum.map(&parse_binary\/1)\n        |> Enum.join\n    end\n    \n    def parse_binary(bin) do\n      {value, _ } = Integer.parse(bin, 2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.reduce(digit_frequencies, \"\", fn {b, n}, acc -> acc <> String.duplicate(Integer.to_string(b), n) end)\n    end\n    \n    def unary_to_binary(\"00\"), do: 0\n    def unary_to_binary(\"0\"), do: 1\n    \n    def binary_to_unary(0), do: \"00\"\n    def binary_to_unary(1), do: \"0\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79763,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        String.codepoints(s)\n        |> Enum.map(&codepoint_to_binary_digits\/1)\n        |> List.flatten\n        |> build_message\n    end\n    \n    def codepoint_to_binary_digits(x), do: String.to_charlist(x) |> hd |> Integer.digits(2) |> leading_zeroes_pad\n    \n    def leading_zeroes_pad(binary_digits), do: List.duplicate(0, 7 - length(binary_digits)) ++ binary_digits\n    \n    def build_message(binary_digits), do: build_message(binary_digits, \"\")\n    def build_message([], message), do: String.trim(message)\n    def build_message([1 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 1 end)) + 1\n      new_message = message <> \" 0 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def build_message([0 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 0 end)) + 1\n      new_message = message <> \" 00 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {unary_to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&Enum.join\/1)\n        |> Enum.map(&parse_binary\/1)\n        |> Enum.join\n    end\n    \n    def parse_binary(bin) do\n      {value, _ } = Integer.parse(bin, 2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.map(digit_frequencies, fn {b, n} -> String.duplicate(Integer.to_string(b), n) end) |> Enum.join\n    end\n    \n    def unary_to_binary(\"00\"), do: 0\n    def unary_to_binary(\"0\"), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79764,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        String.codepoints(s)\n        |> Enum.map(&to_binary_digits\/1)\n        |> Enum.map(&pad\/1)\n        |> List.flatten\n        |> build_message\n        |> String.trim\n    end\n    \n    def to_binary_digits(x), do: Integer.digits(to_ascii_char_code(x), 2)\n    \n    def to_ascii_char_code(x), do: String.to_charlist(x) |> hd\n    \n    def pad(binary_list) do\n      leading_zeroes = List.duplicate(0, 7 - length(binary_list))\n      leading_zeroes ++ binary_list\n    end\n    \n    def build_message(binary), do: build_message(binary, \"\")\n    def build_message([], message), do: message\n    def build_message([1 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 1 end)) + 1\n      new_message = message <> \" 0 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def build_message([0 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 0 end)) + 1\n      new_message = message <> \" 00 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {unary_to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&Enum.join\/1)\n        |> Enum.map(&parse_binary\/1)\n        |> Enum.join\n    end\n    \n    def parse_binary(bin) do\n      {value, _ } = Integer.parse(bin, 2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.reduce(digit_frequencies, \"\", fn {b, n}, acc -> acc <> String.duplicate(Integer.to_string(b), n) end)\n    end\n    \n    def unary_to_binary(\"00\"), do: 0\n    def unary_to_binary(\"0\"), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79765,"user_id":null,"body":"defmodule Kata do\n    def send(s) do\n        # your code here\n        String.codepoints(s)\n        |> Enum.map(fn x -> Integer.digits(to_codepoint(x), 2) end)\n        |> Enum.map(&pad\/1)\n        |> List.flatten\n        |> build_message\n        |> String.trim\n    end\n    \n    def pad(binary_list) when length(binary_list) < 7 do\n      extra = List.duplicate(0, 7 - length(binary_list))\n      extra ++ binary_list\n    end\n    def pad(binary_list), do: binary_list\n    \n    def build_message(binary), do: build_message(binary, \"\")\n    def build_message([], message), do: message\n    def build_message([1 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 1 end)) + 1\n      new_message = message <> \" 0 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def build_message([0 | t], message) do\n      count = length(Enum.take_while(t, fn x -> x == 0 end)) + 1\n      new_message = message <> \" 00 \" <> String.duplicate(\"0\", count)\n      build_message(Enum.slice(t, count - 1..length(t) - 1), new_message)\n    end\n    \n    def to_codepoint(x) do\n      String.to_charlist(x) |> hd\n    end\n    \n    def receive(s) do\n        String.split(s, \" \")\n        |> Enum.chunk_every(2)\n        |> Enum.map(fn [x, y] -> {to_binary(x), String.length(y)} end)\n        |> to_binary_string\n        |> String.codepoints\n        |> Enum.chunk_every(7)\n        |> Enum.map(&Enum.join\/1)\n        |> Enum.map(&parse_binary\/1)\n        |> Enum.join\n    end\n    \n    def parse_binary(bin) do\n      {value, _ } = Integer.parse(bin, 2)\n      List.to_string([value])\n    end\n    \n    def to_binary_string(digit_frequencies) do\n      Enum.reduce(digit_frequencies, \"\", fn {b, n}, acc -> acc <> String.duplicate(Integer.to_string(b), n) end)\n    end\n    \n    def to_binary(\"00\"), do: 0\n    def to_binary(\"0\"), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5e96332d18ac870032eb735f":[{"id":79766,"user_id":null,"body":"defmodule Kata do\n    def womens_age(n), do: \"#{n}? That's just #{20 + rem(n, 2)}, in base #{div(n, 2)}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79767,"user_id":null,"body":"defmodule Kata do\n  def womens_age(n), do: \"#{n}? That's just #{20 + rem(n, 2)}, in base #{trunc(n \/ 2)}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79768,"user_id":null,"body":"defmodule Kata do\n    def womens_age(n) when rem(n, 2) == 0, do: \"#{n}? That's just 20, in base #{div(n, 2)}!\"\n    def womens_age(n) when rem(n, 2) == 1, do: \"#{n}? That's just 21, in base #{div(n - 1, 2)}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79769,"user_id":null,"body":"defmodule Kata do\n  def womens_age(n) do\n    base = div(n,2)\n    string_base =\n      Integer.digits(n, base)\n      |> Integer.undigits()\n      \n\n    \"#{n}? That's just #{string_base}, in base #{base}!\"\n  end\nend\n\n#test \"46\", do: assert Kata.womens_age(46) == \"46? That's just 20, in base 23!\"","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79770,"user_id":null,"body":"defmodule Kata do\n    def womens_age(n) do\n        case rem(n,2) == 0 do\n          true -> \"#{n}? That's just 20, in base #{trunc((n-2) \/ 2 + 1)}!\"\n          false -> \"#{n}? That's just 21, in base #{trunc((n-1) \/ 2)}!\"\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79771,"user_id":null,"body":"defmodule Kata do\n    def womens_age(n) do\n        \"#{n}? That's just #{20+rem(n, 2)}, in base #{div(n,2)}!\"\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79772,"user_id":872,"body":"defmodule Kata do\n  def womens_age(n) do\n    {b, a} = Stream.unfold(10, &({&1, &1 + 1}))\n             |> Stream.map(&(base(&1, n)))\n             |> Enum.find(fn {b, a} -> Enum.member?(20..21, a) end)\n    \"#{n}? That's just #{a}, in base #{b}!\"\n  end\n\n  def base(b, n, a \\\\ []) do\n    {d, r} = {div(n, b), Integer.mod(n, b)}\n    a = [r | a]\n    if d == 0 do\n      {b, a |> Enum.join |> String.to_integer }\n    else\n      base(b, d, a)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79773,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  def womens_age(n) when Integer.is_odd(n), do: \"#{n}? That's just 21, in base #{div(n-1,2)}!\"\n  def womens_age(n), do: \"#{n}? That's just 20, in base #{div(n,2)}!\"\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79774,"user_id":null,"body":"defmodule Kata do\n    def womens_age(age) do\n      {base, inc} = divmod_2(age)\n      adjusted_age = 20 + inc\n      \"#{age}? That's just #{adjusted_age}, in base #{base}!\"\n    end\n    \n    defp divmod_2(n), do: {div(n, 2), rem(n, 2)}\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79775,"user_id":527,"body":"defmodule Kata do\n  def womens_age(n), do: \"#{n}? That's just 2#{rem(n, 2)}, in base #{div(n, 2)}!\";\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5eaf88f92b679f001423cc66":[{"id":79776,"user_id":470,"body":"defmodule Kata do\n\tuse Bitwise, only_operators: true\n\tdef reflections(x,y),do: (x &&& -x) == (y &&& -y)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79777,"user_id":527,"body":"defmodule Kata do\n  use Bitwise\n  def reflections(max_x, max_y), do: (max_x &&& -max_x) == (max_y &&& -max_y)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79778,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  def reflections(max_x,max_y) do\n    g = Integer.gcd(max_x,max_y)\n    Integer.is_odd(div(max_x, g)) && Integer.is_odd(div(max_y, g))\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79779,"user_id":null,"body":"defmodule Kata do\n  import Bitwise\n\n  def reflections(max_x, max_y) do\n    (max_x &&& -max_x) == (max_y &&& -max_y)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79780,"user_id":null,"body":"defmodule Kata do\n    def reflections(max_x,max_y) do\n      move(0, 0, max_x, max_y, :top_right)\n    end\n    def move(x, y, max_x, max_y, :top_right) do\n      case (max_x - x) - (max_y - y) do\n        0 -> true\n        k when k > 0 -> \n          move(\n            x + (max_y - y),\n            max_y, \n            max_x, \n            max_y, \n            :bottom_right\n          )\n        _ -> \n          move(\n            max_x,\n            y + (max_x - x), \n            max_x, \n            max_y, \n            :top_left\n          )\n      end\n    end\n    def move(x, y, max_x, max_y, :top_left) do\n      case x - (max_y - y) do\n        0 -> false\n        k when k > 0 -> \n          move(\n            x - (max_y - y),\n            max_y, \n            max_x, \n            max_y, \n            :bottom_left\n          )\n        _ -> \n          move(\n            0,\n            y + x, \n            max_x, \n            max_y, \n            :top_right\n          )\n      end\n    end\n    def move(x, y, max_x, max_y, :bottom_right) do\n      case (max_x - x) - y do\n        0 -> false\n        k when k > 0 -> \n          move(\n            x + y,\n            0, \n            max_x, \n            max_y, \n            :top_right\n          )\n        _ -> \n          move(\n            max_x,\n            y - (max_x - x),\n            max_x, \n            max_y, \n            :bottom_left\n          )\n      end\n    end\n    def move(x, y, max_x, max_y, :bottom_left) do\n      case x - y do\n        0 -> true\n        k when k > 0 -> \n          move(\n            x - y,\n            0, \n            max_x, \n            max_y, \n            :top_left\n          )\n        _ -> \n          move(\n            0,\n            y - x,\n            max_x,\n            max_y,\n            :bottom_right\n          )\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79781,"user_id":null,"body":"defmodule Kata do\n    def reflections(max_x , max_y, cur_x \\\\ 0, cur_y \\\\ 0, nap_x \\\\ 100, nap_y \\\\ 100) do\n\n        if cur_x == 0 && cur_y == 0 && nap_x == 1 && nap_y == 1 do true else\n        if cur_x == max_x && cur_y == max_y && nap_x == -1 && nap_y == -1 do true else \n        if cur_x == max_x && cur_y == 0 && nap_x == -1 && nap_y == 1 do false else\n        if cur_x == 0 && cur_y == max_y && nap_x == 1 && nap_y == -1 do false else\n\n        nap_x = if nap_x == 100, do: 1, else: nap_x\n        nap_y = if nap_y == 100, do: 1, else: nap_y\n\n        cur_x = cur_x + nap_x\n        cur_y = cur_y + nap_y\n        nap_x = nap_x * if cur_x == 0 or cur_x == max_x, do: -1, else: 1\n        nap_y = nap_y * if cur_y == 0 or cur_y == max_y, do: -1, else: 1\n        \n        reflections(max_x, max_y, cur_x, cur_y, nap_x, nap_y)\n\n          end end end end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79782,"user_id":null,"body":"defmodule Kata do\n  defp ray(x, y, px, py, mx, my) do\n    {nx, ny} = cond do\n      px && py -> { min(mx, x+my-y), min(my, y+mx-x) }\n      px && !py -> { min(mx, x+y), max(0, y+x-mx) }\n      !px && py -> { max(0, x+y-my), min(my, y+x) }\n      true -> { max(0, x-y), max(0, y-x) }\n    end\n    {ix, iy} = {nx>0 && nx<mx, ny>0 && ny<my}\n    cond do\n      ix || iy -> ray(nx, ny, px==ix, py==iy, mx, my)\n      true -> nx+ny==mx+my || nx+ny==0\n    end\n  end\n  def reflections(max_x, max_y) do\n    ray(0, 0, true, true, max_x, max_y)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79783,"user_id":null,"body":"defmodule Kata do\n  defp ray(x, y, px, py, mx, my) do\n    {nx, ny} = cond do\n      px && py -> { min(mx, x+my-y), min(my, y+mx-x) }\n      px && !py -> { min(mx, x+y), max(0, y+x-mx) }\n      !px && py -> { max(0, x+y-my), min(my, y+x) }\n      true -> { max(0, x-y), max(0, y-x) }\n    end\n    {ix, iy} = {nx>0 && nx<mx, ny>0 && ny<my}\n    if ix || iy do\n      ray(nx, ny, px==ix, py==iy, mx, my)\n    else\n      nx+ny==mx+my || nx+ny==0\n    end\n  end\n  def reflections(max_x, max_y) do\n    ray(0, 0, true, true, max_x, max_y)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79784,"user_id":null,"body":"defmodule Kata do\n    defp f(n), do: n\n        |> Integer.digits(2)\n        |> Enum.reverse\n        |> Enum.find_index(& &1 == 1)\n        \n    def reflections(h,w), do: f(h) == f(w)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79785,"user_id":null,"body":"defmodule Kata do\n  def reflections(max_x,max_y) when max_x == max_y, do: true\n  def reflections(max_x,max_y,x \\\\ 1,y \\\\ 1,dir_x \\\\ 1, dir_y \\\\ 1)\n  def reflections(max_x,max_y,x,y,_,_) when x == 0 and y == 0 or x == max_x and y == max_y, do: true\n  def reflections(max_x,max_y,x,y,_,_) when x == max_x and y == 0 or x == 0 and y == max_y, do: false\n  def reflections(max_x,max_y,x,y,dir_x,dir_y) do\n      dir_x = (x == 0 || x == max_x) && -dir_x || dir_x\n      dir_y = (y == 0 || y == max_y) && -dir_y || dir_y\n      reflections(max_x,max_y,x+dir_x,y+dir_y,dir_x,dir_y)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5eb9a92898f59000184c8e34":[{"id":79786,"user_id":527,"body":"defmodule Kata do\n  def sum_arrangements(num) do\n    ds = Integer.digits(num)\n    Enum.sum(ds) * Integer.undigits(List.duplicate(1, length(ds))) *\n      Enum.reduce(1 .. length(ds) - 1, &Kernel.*\/2)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79787,"user_id":null,"body":"defmodule Kata do\n  def sum_arrangements(num) do\n    digits = Integer.digits(num)\n\n    Enum.sum(digits) * Integer.undigits(List.duplicate(1, length(digits))) *\n      Enum.reduce(1..(length(digits) - 1), 1, &*\/2)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79788,"user_id":null,"body":"defmodule Kata do\n\n  def sum_arrangements(num), do:\n    num\n    |> Integer.digits\n    |> Enum.sum\n    |> Kernel.*(factorial(length(Integer.digits(num)) - 1))\n    |> Kernel.*(String.to_integer(String.duplicate(\"1\", length(Integer.digits(num)))))\n\n  defp factorial(n), do: factorial(n, 1)\n  defp factorial(0, acc), do: acc\n  defp factorial(n, acc), do: factorial(n - 1, acc * n)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79789,"user_id":53,"body":"defmodule Kata do\n\n  require Integer\n  \n  def fac(n), do: fac(n, 1)\n\tdefp fac(0, f), do: f\n\tdefp fac(n, f) when n > 0, do: fac(n - 1, f * n)\n  \n  def pow(_, 0), do: 1\n  def pow(x, n) when Integer.is_odd(n), do: x * pow(x, n - 1)\n  def pow(x, n) do\n    r = pow(x, div(n, 2))\n    r * r\n  end\n  \n  def sum_arrangements(num) do\n    digits = Integer.digits(num)\n    m = length(digits)\n    p = Enum.sum(digits)\n    q = Enum.reduce(0..m-1, 0, fn i, acc -> pow(10, i) + acc end)\n    p * q * fac(m - 1)\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ecc1d68c6029000017d8aaf":[{"id":79790,"user_id":53,"body":"defmodule Kata do\n  def max_hexagon_beam(n, seq) do\n    ans = walk(Enum.to_list(0 .. (6 * n - 4))\n      |> Enum.map(fn e -> { e, 0 } end)\n      |> Map.new, seq, n, -1, 1 - n, 0, 0)\n    Enum.max(Map.values(ans))\n  end\n  defp walk(hs, seq, n, i, q, r, l) do\n    cond do\n      l == 0 && q > n - 1 -> hs\n      l == 0 -> walk(hs, seq, n, i, q, max(-n, -q - n) + 1, 1)\n      l == 1 && r > min(n, n - q) - 1 ->  walk(hs, seq, n, i, q + 1, 0, 0)\n      true -> i1 = rem(i + 1, length(seq))\n              s = -q - r\n              v = Enum.at(seq, i1)\n              hs1 = Map.replace(hs, q + n - 1, Map.get(hs, q + n - 1) + v)\n              hs2 = Map.replace(hs1, r + 3 * n - 2, Map.get(hs1, r + 3 * n - 2) + v)\n              hs3 = Map.replace(hs2, s + 5 * n - 3, Map.get(hs2, s + 5 * n - 3) + v)\n              walk(hs3, seq, n, i1, q, r + 1, l)\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79791,"user_id":645,"body":"defmodule Kata do\n  def max_hexagon_beam(n,seq) do\n    len = length(seq)\n    lens = (for c <- n..n+n-1,do: c) ++ Enum.reverse(for c <- n..n+n-2,do: c)\n    accrlens = agg(lens,%{},0,0)\n    seqmap = for {i,n} <- Enum.zip(0..len-1,seq),into: %{},do: {i,n}\n    \n    Enum.reduce(Stream.with_index(lens),-100000000,fn {ln,q},z ->\n      Enum.reduce(0..ln-1,{0,0,0},fn w,{n1,n2,n3} -> \n        {\n          n1 + seqmap[rem(accrlens[q]+w,len)],\n          n2 + seqmap[rem(accrlens[max(0,q-n+1)+w]+min(q,ln-w-1+max(0,q-n+1)),len)],\n          n3 + seqmap[rem(accrlens[max(0,n-q-1)+w]+max(0,q-n+1)+min(w,min(q,n-1)),len)]\n        }\n      end) |> Tuple.to_list |> (&Enum.max([z|&1])).()\n    end)\n  end\n  \n  defp agg([h|r],ix,i,acc),do: agg(r,Map.put(ix,i,acc),i+1,acc+h)\n  defp agg([],ix,_,_),do: ix\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79792,"user_id":null,"body":"defmodule Kata do\n  def max_hexagon_beam(n, lst) do\n    generated_fill_list =\n      lst\n      |> generate_fill_list_for_hex(n)\n\n    hex =\n      generated_fill_list\n      |> generate_hex(n, 0, n, [], false)\n\n    reversed_hex =\n      generated_fill_list\n      |> generate_hex(n, 0, n, [], true)\n\n    [\n      beam1_sum(hex),\n      beam2_sum(hex),\n      beam2_sum(reversed_hex)\n    ]\n    |> Enum.max()\n  end\n\n  # -> beam\n  defp beam1_sum(hex_list),\n    do:\n      hex_list\n      |> Enum.map(&Enum.sum(&1))\n      |> Enum.max()\n\n  # \/ beam\n  defp beam2_sum(hex_list) do\n    hex_list\n    |> Enum.reduce([], &sum_columns(&1, &2))\n    |> Enum.max()\n  end\n\n  defp sum_columns(list, []), do: list\n\n  defp sum_columns(list, acc),\n    do:\n      acc\n      |> Enum.zip(list)\n      |> Enum.map(fn {x, y} -> x + y end)\n\n  defp addZeros(hex_list, side) do\n    hex_list\n    |> Enum.map_reduce(0, fn x, row ->\n      {\n        Stream.cycle([0])\n        |> Enum.take(2 * side - 1 - length(x))\n        |> append_zeros(x, row >= side - 1),\n        row + 1\n      }\n    end)\n    |> elem(0)\n  end\n\n  defp append_zeros(zeros_list, list, true), do: [zeros_list | list] |> List.flatten()\n  defp append_zeros(zeros_list, list, false), do: [list | zeros_list] |> List.flatten()\n\n  defp items_count_in_hex(side_length) do\n    b = 2 * side_length - 1\n    (side_length + b) * (b - side_length + 1) - b\n  end\n\n  defp generate_fill_list_for_hex(lst, side_length) do\n    items_length = items_count_in_hex(side_length)\n\n    lst\n    |> Stream.cycle()\n    |> Enum.take(items_length)\n  end\n\n  defp generate_hex(_, side, row, _, hexagon, reversed) when row == 2 * side - 1,\n    do: hexagon |> Enum.reverse() |> reverse_rows(reversed) |> addZeros(side)\n\n  defp generate_hex(filler, side, row, row_length, hexagon, reversed) when row < side - 1 do\n    {to_fill, new_filler} = Enum.split(filler, row_length)\n\n    generate_hex(new_filler, side, row + 1, row_length + 1, [to_fill | hexagon], reversed)\n  end\n\n  defp generate_hex(filler, side, row, row_length, hexagon, reversed) when row >= side - 1 do\n    {to_fill, new_filler} = Enum.split(filler, row_length)\n\n    generate_hex(new_filler, side, row + 1, row_length - 1, [to_fill | hexagon], reversed)\n  end\n\n  defp reverse_rows(list, false), do: list\n  defp reverse_rows(list, true), do: list |> Enum.map(&Enum.reverse\/1)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5edc8c53d7cede0032eb6029":[{"id":79793,"user_id":53,"body":"defmodule SqNum do\n  defp walk(n, i) when i >= n, do: -1\n  defp walk(n, i) do\n    p = :math.sqrt(i * i + n)\n    if floor(p) == ceil(p) do i * i else walk(n, i + 1) end\n  end\n  def solve(n), do: walk(n, 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79794,"user_id":527,"body":"defmodule SqNum do\n  def solve(n) do\n    (for d <- trunc(:math.sqrt(n)) .. 1,\n        x = div(div(n, d) - d, 2),\n        (2 * x + d) * d == n,\n        x != 0,\n      do: x * x)\n    |> Enum.at(0)\n    || -1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79795,"user_id":null,"body":"defmodule SqNum do\n  def prime_factors(n, factor \\\\ 2) do\n    if factor * factor <= n do\n      if rem(n, factor) == 0 do\n        [factor] ++ prime_factors(div(n, factor), factor)\n      else\n        [] ++ prime_factors(n, if(factor == 2, do: 3, else: factor + 2))\n      end\n    else\n      if n > 1, do: [n], else: []\n    end\n  end\n\n  def divisors(n) do\n    factors =\n      Enum.group_by(prime_factors(n), &Function.identity\/1)\n      |> Enum.map(fn {k, v} -> {k, length(v)} end)\n\n    Enum.reduce(factors, [1], fn {factor, count}, acc ->\n      Enum.flat_map(acc, fn m ->\n        Enum.map([1] ++ Enum.scan(1..count, 1, fn _, acc -> acc * factor end), &(&1 * m))\n      end)\n    end)\n  end\n\n  def solve(n) do\n    res =\n      divisors(n)\n      |> Enum.filter(&(&1 * &1 <= n))\n      |> Enum.sort(:desc)\n      |> Enum.map(&(div(n, &1) - &1))\n      |> Enum.find(&(&1 > 0 && rem(&1, 2) == 0))\n\n    if res == nil do\n      -1\n    else\n      x = div(res, 2)\n      x * x\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79796,"user_id":null,"body":"defmodule SqNum do\n    def solve(n) do\n      root = floor(:math.sqrt(n))\n      \n      # Naive lookup for factorings, we could use primes there, but that would be more troublesome\n      root..1\n      |> Stream.filter(&rem(n, &1) == 0)\n      |> Enum.find_value(-1, fn a -> find_root(a, div(n, a)) end)\n    end\n    \n    # Solve equations in form of\n    #\n    #   y - x = a\n    #   y + x = b\n    #\n    # And return square of 2\n    #\n    # Special case of `a == b` as existing perfect roots will always fail.\n    defp find_root(a, a), do: nil\n    defp find_root(a, b) when rem(a, 2) != rem(b, 2), do: nil\n    defp find_root(a, b) do\n      x = div(b - a, 2)\n      x * x\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79797,"user_id":null,"body":"defmodule SqNum do\n\n  def solve(n), do: do_solve(n)\n\n  defp do_solve(n), do: do_solve(n, round(:math.sqrt(n)))\n\n  defp do_solve(_, k) when k < 1, do: -1\n  defp do_solve(n, k) when rem(n, k) == 0 and rem(div(n, k) + k, 2) == 0 and div(n, k) != k, do:\n    (& &1 * &1).(div(div(n, k) - k, 2))\n  defp do_solve(n, k), do: do_solve(n, k - 1)\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79798,"user_id":null,"body":"defmodule SqNum do\n  def solve(n), do: solve(n, 1)\n  def solve(n, c) do\n    r1 = n + c*c\n    r2 = :math.sqrt(r1) |> trunc\n    cond do\n      r2*r2 == r1 ->\n        c*c\n      c > div(n,2) ->\n        -1\n      true ->\n        solve(n, c+1)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79799,"user_id":null,"body":"defmodule SqNum do\n    import :math, only: [sqrt: 1] \n    def solve(n) do\n      solve(n, 1)\n    end\n    \n    defp solve(n, x0) when x0 > div(n, 2), do: -1\n    defp solve(n, x0) do\n      sqr = x0*x0\n      sqrt = sqrt(sqr + n)\n      if trunc(sqrt) == sqrt, do: sqr, else: solve(n, x0 + 1)\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79800,"user_id":470,"body":"defmodule SqNum do\n\t@mx 1000000000\n\tdef solve(n),do: forge(1,ceil(:math.sqrt(n)),n,@mx)\n\t\n\tdefp forge(i,mx,_,res) when i >= mx,do: (if res == @mx,do: -1,else: res*res)\n\t\n\tdefp forge(i,mx,n,res) when rem(n,i) == 0 do\n\t\ta = i\n\t\tb = div(n,i)\n\t\tif (b-a != 0) and (rem(b-a,2) == 0),do: forge(i+1,mx,n,min(res,div(b-a,2))),else: forge(i+1,mx,n,res)\n\tend\n\t\n\tdefp forge(i,mx,n,res),do: forge(i+1,mx,n,res)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5efae11e2d12df00331f91a6":[{"id":79801,"user_id":564,"body":"defmodule CodeWars do\n  Agent.start(fn -> %{} end, name: :hash_cache)\n\n  def to_pin(n), do: n |> to_string |> String.pad_leading(5, \"0\")\n  def to_md5(pin), do: :crypto.hash(:md5, pin) |> Base.encode16 |> String.downcase\n  def populate_agent() do\n    (0..99999)\n      |> Enum.map(fn n -> {to_pin(n), to_md5(to_pin(n))} end)\n      |> Enum.map(fn {pin, md5} -> Agent.update(:hash_cache, &Map.put(&1, md5, pin)) end)\n  end\n\n  def crack(hash) do\n    case Agent.get(:hash_cache, &Map.get(&1, hash)) do\n      nil ->\n        populate_agent()\n        crack(hash)\n      pin -> pin\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79802,"user_id":null,"body":"defmodule CodeWars do\n    @hashes Enum.map(0..99999, & :crypto.hash(:md5, &1 |> to_string |> String.pad_leading(5, \"0\")) |> Base.encode16)\n    \n    def crack(s) do\n        s = String.upcase(s)\n        \n        @hashes\n        |> Enum.find_index(& &1 == s)\n        |> to_string\n        |> String.pad_leading(5, \"0\")\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79803,"user_id":564,"body":"defmodule CodeWars do  \n  @cache (0..99999)\n    |> Enum.map(fn n -> n |> to_string |> String.pad_leading(5, \"0\") end)\n    |> Enum.reduce(%{}, fn pin, map -> Map.put(map, :crypto.hash(:md5, pin) |> Base.encode16(case: :lower), pin) end)\n\n  def crack(hash), do: Map.get(@cache, hash)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79804,"user_id":null,"body":"defmodule CodeWars do\n  @table Map.new(0..99999, fn n ->\n           ns = String.pad_leading(\"#{n}\", 5, \"0\")\n           {:crypto.hash(:md5, ns) |> Base.encode16(case: :lower), ns}\n         end)\n  def crack(hash), do: @table[hash]\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79805,"user_id":null,"body":"defmodule CodeWars do\n  def crack(hash) do\n    test = 00000\n    loop(hash, test)\n  end\n    \n  def loop(hash, test) do\n    stringtest = test \n    |> Integer.to_string()\n    |> String.pad_leading(5, \"0\")\n    hashedtest = :crypto.hash(:md5 , stringtest) \n    |> Base.encode16()\n    |> String.downcase()\n    if hashedtest == hash do\n      stringtest\n    else \n      loop(hash, test + 1) \n    end  \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79806,"user_id":null,"body":"defmodule CodeWars do\n  def crack(hash) do\n    hash = Base.decode16!(hash, case: :lower)\n    \n    0..99_999\n    |> Enum.find(fn n -> \n      n = n |> Integer.to_string |> String.pad_leading(5, \"0\")\n      :crypto.hash(:md5, n) == hash\n    end)\n    |> Integer.to_string\n    |> String.pad_leading(5, \"0\")\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79807,"user_id":null,"body":"defmodule CodeWars do\n  def crack(hash) do\n    bhash = Base.decode16!(hash, case: :lower)\n    digits = ?0..?9\n    \n    digits\n    |> List.duplicate(5)\n    |> stream_product()\n    |> Stream.map(&List.to_string\/1)\n    |> Enum.find(& :erlang.md5(&1) == bhash)\n  end\n  \n  defp stream_product(list) do\n    Enum.reduce(list, Stream.cycle([[]]), fn elem, acc ->\n      Stream.flat_map(acc, fn v -> Stream.map(elem, &[&1 | v]) end)\n    end)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79808,"user_id":null,"body":"defmodule CodeWars do\n\n  def crack(hash), do:\n    do_crack(hash, \"00000\")\n\n  defp do_crack(hash, str) do\n    cond do\n      hash == get_hash(str) -> str\n      true -> do_crack(hash, get_next_pin(str))\n    end\n  end\n\n  defp get_hash(str),\n       do: str\n           |> (&:crypto.hash(:md5, &1)).()\n           |> Base.encode16\n           |> String.downcase\n\n  defp get_next_pin(str),\n       do: str\n           |> String.to_integer\n           |> Kernel.+(1)\n           |> Integer.to_string\n           |> fill_with_zeros\n\n  defp fill_with_zeros(str), do: String.duplicate(\"0\", 5 - String.length(str)) <> str\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79809,"user_id":null,"body":"defmodule CodeWars do\n  @hashes 0..99999\n    |> Enum.map(fn n -> String.pad_leading(\"#{n}\", 5, \"0\") end)\n    |> Enum.reduce(%{}, fn(pin, hashes) -> Map.put(hashes, :crypto.hash(:md5, pin) |> Base.encode16(case: :lower), pin) end)\n\n  def crack(hash) do\n    @hashes[hash]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79810,"user_id":null,"body":"defmodule CodeWars do\n  @hashes 0..99999\n    |> Enum.map(fn n -> String.pad_leading(\"#{n}\", 5, \"0\") end)\n    |> Enum.reduce(%{}, fn(x, hashes) ->\n      num = to_string(x)\n      Map.put(hashes, :crypto.hash(:md5, num) |> Base.encode16(case: :lower), num)\n    end)\n\n  def crack(hash) do\n    @hashes[hash]\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5effa412233ac3002a9e471d":[{"id":79811,"user_id":53,"body":"defmodule Kata do\n  def add(0,0), do: 0\n  def add(a,b) do\n    d = rem(a, 10) + rem(b, 10)\n    n = add(div(a, 10), div(b, 10))\n    f = if d >= 10, do: 100, else: 10\n    n * f + d\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79812,"user_id":250,"body":"defmodule Kata do\n    def add(a,b) do\n      a1 = Integer.digits(a) |> Enum.reverse\n      a2 = Integer.digits(b) |> Enum.reverse\n      \n      m = max(length(a1), length(a2))\n      \n      Enum.zip(a1 ++ for n <- 0..m-length(a1)-1 do 0 end, a2 ++ for n <- 0..m-length(a2)-1 do 0 end)\n      |> Enum.map(fn {x, y} -> x+y end)\n      |> Enum.reverse\n      |> Enum.join(\"\")\n      |> String.to_integer\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79813,"user_id":null,"body":"defmodule Kata do\n  defp stack_string([]), do: \"\"\n  defp stack_string([head | tail]), do: \"#{head}\" <> stack_string(tail)\n\n  defp lists_map_zip_add(r0, r1) do\n    Enum.zip(r0, r1)\n    |> Enum.map(fn {a, b} -> a + b end)\n    |> stack_string()\n  end\n\n  defp make_longer(list, 0), do: list\n  defp make_longer(list, len), do: make_longer([0] ++ list, len - 1)\n\n  def add(a, b) do\n    # TODO: working solution\n    a_digits = a |> Integer.digits()\n    a_count = a_digits |> Enum.count()\n    b_digits = b |> Integer.digits()\n    b_count = b_digits |> Enum.count()\n\n    a_digits =\n      if(a_count < b_count) do\n        make_longer(a_digits, b_count - a_count)\n      else\n        a_digits\n      end\n\n    b_digits =\n      if(a_count > b_count) do\n        make_longer(b_digits, a_count - b_count)\n      else\n        b_digits\n      end\n\n    lists_map_zip_add(a_digits, b_digits)\n    |> Integer.parse()\n    |> elem(0)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79814,"user_id":null,"body":"defmodule Kata do\n    defp helper(0,0), do: \"\"\n    defp helper(a,b), do: \"#{helper(div(a,10), div(b,10))}#{rem(a,10) + rem(b,10)}\"\n\n    def add(0,0), do: 0\n    def add(a,b), do: helper(a,b) |> String.to_integer\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79815,"user_id":null,"body":"defmodule Kata do\n  @spec add(pos_integer, pos_integer) :: pos_integer\n  def add(a,b) do\n    a_list = Integer.digits(a)\n    b_list = Integer.digits(b)\n    \n    {a_balanced, b_balanced} = \n      case length(a_list) - length(b_list) do\n        x when x == 0 -> {a_list, b_list}\n        x when x > 0 -> {a_list, List.duplicate(0, abs(x)) ++ b_list}\n        x when x < 0 -> {List.duplicate(0, abs(x)) ++ a_list, b_list}\n      end\n\n    result = \n      Enum.zip(a_balanced, b_balanced)\n      |> Enum.map_join(\"\", fn x -> Enum.sum(Tuple.to_list(x)) end)\n      |> String.to_integer()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79816,"user_id":null,"body":"defmodule Kata do\n  def add(a,b) do\n    aa = Integer.digits(a)\n    bb = Integer.digits(b)\n    dmax = max(length(aa), length(bb))\n    Enum.map([aa, bb], fn dlst -> List.duplicate(0, dmax - length(dlst)) ++ dlst end)\n    |> Enum.zip\n    |> Enum.flat_map(fn {x, y} -> Integer.digits(x+y) end)\n    |> Integer.undigits\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79817,"user_id":null,"body":"defmodule Kata do\n  def add(a, b) when a == 0, do: b\n  def add(a, b) when b == 0, do: a\n\n  def add(a, b) do\n    rev_a = Integer.digits(a) |> Enum.reverse()\n    rev_b = Integer.digits(b) |> Enum.reverse()\n\n    [rev_a, rev_b] =\n      cond do\n        length(rev_a) > length(rev_b) ->\n          [rev_a, rev_b ++ List.duplicate(0, length(rev_a) - length(rev_b))]\n\n        length(rev_a) < length(rev_b) ->\n          [rev_a ++ List.duplicate(0, length(rev_b) - length(rev_a)), rev_b]\n\n        length(rev_a) == length(rev_b) ->\n          [rev_a, rev_b]\n      end\n\n    _sum(rev_a, rev_b, [])\n    |> Enum.reverse()\n    |> Enum.join()\n    |> String.to_integer()\n  end\n\n  def _sum(x, y, arr) do\n    [x | tl] = x\n    [y | tly] = y\n\n    if length(tl) > 0 do\n      arr = arr ++ [x + y]\n      _sum(tl, tly, arr)\n    else\n      arr = arr ++ [x + y]\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79818,"user_id":null,"body":"defmodule Kata do\n    def add(a,b) do\n      add(\n        Enum.reverse(Integer.digits(a)),\n        Enum.reverse(Integer.digits(b)),\n        []\n      ) |> Enum.reduce(0, fn(el, acc) -> acc * 10 + el end)\n    end\n    \n    def add(a, [], acc) do Enum.reverse(a) ++ acc end\n    def add([], b, acc) do Enum.reverse(b) ++ acc end\n    def add([a | ta], [b | tb], acc) do add(ta,tb,Integer.digits(a + b) ++ acc) end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79819,"user_id":null,"body":"defmodule Kata do\n    def add(a,b) do\n      a = Integer.digits(a) |> Enum.reverse\n      b = Integer.digits(b) |> Enum.reverse\n      0..Enum.max([length(a), length(b)])\n      |> Enum.map(fn i ->\n        (Enum.at(a, i) || 0) + (Enum.at(b, i) || 0)\n      end)\n      |> Enum.map(&Integer.to_string\/1)\n      |> Enum.reverse\n      |> Enum.join\n      |> String.to_integer\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79820,"user_id":null,"body":"defmodule Kata do\n  def add(a,b) do\n    [Stream.unfold(a, fn x -> {rem(x, 10), div(x, 10)} end),\n     Stream.unfold(b, fn x -> {rem(x, 10), div(x, 10)} end)]\n    |> Stream.zip()\n    |> Stream.map(fn {x, y} -> (x + y) |> Integer.digits() |> Enum.reverse() end)\n    |> Stream.flat_map(& &1)\n    |> Enum.take(32)\n    |> Enum.reverse()\n    |> Integer.undigits()\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5f0ed36164f2bc00283aed07":[{"id":79821,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n      n * 2 + 1 - address\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79822,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    \n    where = (2 * n) + 1 - address\n    \n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79823,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    require Integer\n    if(Integer.is_odd(address)) do\n      (((div (address+1), 2)*-1) + n + 1) *2\n    else\n      ((((div (address), 2)*-1) + n + 1) * 2) -1\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79824,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n   (n*2)-(address-1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79825,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    2 * n + 1 - address\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79826,"user_id":null,"body":"defmodule CodeWars do\n  require Integer\n  \n  def overTheRoad(address, n) when Integer.is_odd(address) do\n    steps = (address - 1) |> div(2)\n    2 * (n - steps)\n  end\n  \n  def overTheRoad(address, n) when Integer.is_even(address) do\n    steps = 2 * n - address |> div(2)\n    2 * steps + 1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79827,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    if rem(address, 2) == 1 do\n      (2 * n) - (2 * (div(address + 1, 2) - 1))\n    else\n      (2 * n - 1) - (2 * (div(address, 2) - 1))\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79828,"user_id":null,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    pos = (address + 1) \/ 2\n    2 * n - 2 * ( pos - 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79829,"user_id":527,"body":"defmodule CodeWars do\n  def overTheRoad(address, n), do: 2 * n + 1 - address\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79830,"user_id":513,"body":"defmodule CodeWars do\n  def overTheRoad(address, n) do\n    2*n-address+1\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5f79b90c5acfd3003364a337":[{"id":79831,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  @digits [1, 1, 2, 6, 4, 2, 2, 4, 2, 8]\n  def last_digit(n) do\n    if n < 10 do\n      Enum.at(@digits, n)\n    else\n      (if(Integer.is_even(div(n, 10)), do: 6, else: 4) * last_digit(div(n, 5)) *\n         Enum.at(@digits, rem(n, 10)))\n      |> rem(10)\n    end\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79832,"user_id":null,"body":"defmodule Kata do\n  require Integer\n  \n  # For speed:\n  def last_digit(0), do: 1\n  def last_digit(1), do: 1\n  def last_digit(2), do: 2\n  def last_digit(3), do: 6\n  def last_digit(4), do: 4\n  def last_digit(5), do: 2\n  def last_digit(6), do: 2\n  def last_digit(7), do: 4\n  def last_digit(8), do: 2\n  def last_digit(9), do: 8\n  \n  def last_digit(n) do\n    case Integer.is_odd(tens n) do\n      true  -> 4 * last_digit(div n, 5) * last_digit(units n) |> last_nonzero_digit\n      false -> 6 * last_digit(div n, 5) * last_digit(units n) |> last_nonzero_digit\n    end\n  end\n  \n  defp last_nonzero_digit(n) do\n    m = rem n, 10\n    case m do\n      0 -> last_nonzero_digit(div n, 10)\n      _ -> m\n    end\n  end\n  \n  defp units(n), do: rem n, 10\n  defp tens(n),  do: div (rem n, 100), 10\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79833,"user_id":77,"body":"defmodule Kata do\n    @div5p {{0,0,0,0,0},{0,6,8,2,4},{0,2,6,4,8},{0,8,4,6,2},{0,4,2,8,6}}\n    @ca {1,1,2,1,4,4,4,3,4,1}\n    @c2 {1,2,4,3}\n    def solve(n, pa, z) when n == 0, do: elem(elem(@div5p, pa), elem(@c2, rem(z, 4)))\n    def solve(n, pa, z), do: solve(\n      div(n, 5), \n      rem(pa * elem(@ca, rem(n,10)), 5),\n      z + div(n, 5))\n    def last_digit(n) when n < 2, do: 1\n    def last_digit(n), do: solve(n, 1, 0)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79834,"user_id":null,"body":"defmodule Kata do\n    @base {1, 1, 2, 6, 4, 2, 2, 4, 2, 8}\n    @mult {6, 4}\n\n    def last_digit(n) when n < 10, do: elem(@base, n)\n    def last_digit(n), do:\n        rem(elem(@mult, rem(div(n, 10), 2)) *\n        last_digit(rem(n, 10)) *\n        last_digit(div(n, 5)), 10)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5fde1ea66ba4060008ea5bd9":[{"id":79835,"user_id":null,"body":"defmodule Kata do\n  def burner(c,h,o) do\n    a = min(div(h,2),o)\n    b = min(div(o-a,2),c)\n    {a, b, min(div(h-2*a,4),c-b)}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79836,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    with water = min(div(h, 2), o),\n         co2 = min(c, div(o-water, 2)),\n\t       methane = min(c-co2, div(h-2*water, 4)) do\n\t     {water, co2, methane}\n    end\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79837,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    water = min(div(h, 2), o)\n    h = h - water * 2\n    o = o - water\n    co2 = min(c, div(o, 2))\n    c = c - co2\n    o = o - co2 * 2\n    methane = min(c, div(h, 4))\n    {water, co2, methane}\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79838,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    h2o = trunc(min(o, h \/ 2))\n    co2 = trunc(min(c, (o - h2o) \/ 2))\n    ch4 = trunc(min(c - co2, (h - 2 * h2o) \/ 4))\n    {h2o, co2, ch4}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79839,"user_id":492,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    water = min(div(h,2), o)\n    co2 = min(div((o - water), 2), c)\n    methane = min(div(h - water * 2, 4), c - co2)\n    {water, co2, methane}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79840,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    water     = min(div(h, 2), o)\n    {c, h, o} = {c, h - 2 * water, o - water}\n    co2       = min(c, div(o, 2))\n    {c, h, o} = {c - co2, h, o - 2 * co2}\n    ch4       = min(c, div(h, 4))\n    {water, co2, ch4}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79841,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    h2 = floor(h \/ 2) \n    water = if h2 < o, do: h2, else: o\n    o2 = floor((o - water) \/ 2)\n    co2 = if o2 < c, do: o2, else: c\n#     {water, co2, ch4}\n    h4 = floor((h - (water*2)) \/ 4) \n    c2 = c - co2\n    ch4 = \n      if h4 <= 3 || c2 <= 1 do\n        0\n      else \n        min(h4, c2)\n      end\n    {water, co2, ch4}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79842,"user_id":null,"body":"defmodule Kata do\n  import Enum\n  def burner(c, h, o) do\n    ho = min([trunc(h\/2),o])\n    [h,o] = [h - ho*2, o - ho]\n    co = min([c,trunc(o\/2)])\n    [c,o] = [c - co, o - co*2]\n    ch = min([c,trunc(h\/4)])\n    {ho, co, ch}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79843,"user_id":77,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    h2o = min(div(h, 2), o)\n    co2 = min(c, div(o-h2o, 2))\n    ch4 = min(c-co2, div(h-2*h2o, 4))\n    {h2o, co2, ch4}\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79844,"user_id":null,"body":"defmodule Kata do\n  def burner(c, h, o) do\n    {c, h, o, 0, 0, 0}\n    |> h2o\n    |> co2\n    |> ch4\n  end\n  \n  defp h2o({c, h, o, w, d, m}) when h < 2, do: {c, 0, o, w, d, m}\n  defp h2o({c, h, 0, w, d, m}),            do: {c, h, 0, w, d, m}\n  defp h2o({c, h, o, w, d, m}),            do: h2o({c, h - 2, o - 1, w + 1, d, m})\n  \n  defp co2({c, h, o, w, d, m}) when o < 2, do: {c, h, o, w, d, m}\n  defp co2({0, h, o, w, d, m}),            do: {0, h, o, w, d, m}\n  defp co2({c, h, o, w, d, m}),            do: co2({c - 1, h, o - 2, w, d + 1, m})\n  \n  defp ch4({c, h, o, w, d, m}) when h < 4, do: {w, d, m}\n  defp ch4({0, h, o, w, d, m}),            do: {w, d, m}\n  defp ch4({c, h, o, w, d, m}),            do: ch4({c - 1, h - 4, o, w, d, m + 1})\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"60512be8bbc51a000a83d767":[{"id":79845,"user_id":null,"body":"defmodule Kata do\n\n  def operator(a, n, b), do: evaluate(a, b, n)\n\n  defp evaluate(a, b, 0), do: 1 + b\n  defp evaluate(a, b, 1), do: a + b\n  defp evaluate(a, b, 2), do: a * b\n  defp evaluate(a, b, 3), do: round(:math.pow(a, b))\n  defp evaluate(a, b, 4), do: hyperpower(a, b)\n\n  defp hyperpower(a, 1), do: a\n  defp hyperpower(a, b), do: round(:math.pow(a, hyperpower(a, b - 1)))\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79846,"user_id":53,"body":"defmodule Kata do\n\n  def operator(_, 0, b), do: b + 1\n  def operator(a, 1, b), do: a + b\n  def operator(a, 2, b), do: a * b  \n  def operator(_, _, 0), do: 1\n  def operator(a, n, b), do: operator(a, n - 1, operator(a, n, b - 1))\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79847,"user_id":168,"body":"defmodule Kata do\n\n  def operator(a, n, b) do\n    case n do\n      0 -> b + 1\n      1 -> a + b\n      2 -> a * b\n      3 -> :math.pow(a, b)\n      _ -> List.duplicate(a, b) |> List.foldl(1, &(:math.pow(&1, &2)))\n    end\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79848,"user_id":null,"body":"defmodule Kata do\n  def operator(_a,0,b), do: b+1\n  def operator( a,1,b), do: a+b\n  def operator( a,2,b), do: a*b\n  def operator( a,3,b), do: :math.pow(a,b)\n  def operator( a,4,b), do: Enum.reduce(1..b, 1, fn _,x -> :math.pow(a,x) end)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79849,"user_id":null,"body":"defmodule Kata do\n\n  def operator(a, n, b) do\n    case n do\n      0 -> 1 + b\n      1 -> a + b\n      2 -> a * b\n      3 -> round(:math.pow(a, b))\n      4 -> Enum.reduce(1..b, 1, fn _, acc -> round(:math.pow(a, acc)) end)\n    end\n  end\n\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"6129095b201d6b000e5a33f0":[{"id":79850,"user_id":527,"body":"defmodule Kata do\n  @spec f(pos_integer(), pos_integer(), pos_integer()) :: pos_integer()\n  def f(x, y, z) do\n    x * (y + 1) * (z + 1) + y * (z + 1) * (x + 1) + z * (x + 1) * (y + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79851,"user_id":53,"body":"defmodule Kata do\n\n  def f(x, y, z), do: (x * (y + 1) + y * (x + 1)) * (z + 1) + z * (x + 1) * (y + 1)\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79852,"user_id":null,"body":"defmodule Kata do\n  def f(x, y, z), do: x * (y + 1) * (z + 1) + y * (x + 1) * (z + 1) + z * (x + 1) * (y + 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79853,"user_id":null,"body":"defmodule Kata do\n  def f(x, y, z) do\n    x * (y + 1) * (z + 1) + y * (z + 1) * (x + 1) + z * (x + 1) * (y + 1)\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79854,"user_id":50,"body":"defmodule Kata do\n\n  def f(x, y, z) do\n      z*(3*x*y+1+2*(x+y))+2*x*y+x+y\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79855,"user_id":null,"body":"defmodule Kata do\n\n  def f(x, y, z) do\n    3*x*y*z + 2*(x*y + y*z + x*z) + x + y + z\n  end\n\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79856,"user_id":null,"body":"defmodule Kata do\n  def f(x, 1, 1), do: 4 + 8 * x\n  def f(x, y, 1), do: f(x, 1, 1) + (2 * (x + 1) + 2 * x + x + 1) * (y - 1)\n  def f(x, y, z), do: f(x, y, 1) + ((x + 1) * (y + 1) + x * (y + 1) + y * (x + 1)) * (z - 1)\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79857,"user_id":null,"body":"defmodule Kata, do: def f(x, y, z), do: x * (y * (3 * z + 2) + 2 * z + 1) + y * (2 * z + 1) + z","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79858,"user_id":209,"body":"defmodule Kata do\n\n  def f(x, y, z) do\n    x + y + z + 2 * (x * y + y * z + z * x ) + 3 * x*y*z\n  end \n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5917a2205ffc30ec3a0000a8":[{"id":79859,"user_id":null,"body":"defmodule PuzzleSolver do\n  # Program uses a 3-step approach.\n  # 1. Process clues against valid permutations repeatedly until matrix :changed-->:unchanged\n  # 2. Look for rows or columns where a cell contains a value present in no other cell.  If none exists :unchanged -> :still_unchanged (else -> :changed)\n  # 3. Start exhaustive search by setting the first available possibility and go to #1.  If :no_solution, backtrack.\n\n  # Pre-calculate table of all permutations of 1..dim and place them in a map indexed # visible buildings for that perm (close to far)\n  # Calculate lookup table of matrix cell indexes for each clue position (close to far)\n  # Initialize matrix, a dim*dim element vector of MapSets inidicating all possibilities for each cell ([1..dim]). Process clues.\n  def solve_puzzle(clues) do\n    dim = clues |> length |> div(4)\n    visible_perms = get_visible_permutations(dim)\n    clue_table = get_clue_table(dim)\n\n    {_state, new_matrix} = solve(dim, {:changed, List.duplicate(MapSet.new(Enum.to_list(1..dim)), dim*dim)}, clues, clue_table, visible_perms, false, nil)\n\n    new_matrix |> Enum.map(fn set -> hd(MapSet.to_list(set)) end) |> Enum.chunk_every(dim)\n  end\n\n  # Found the solution. Halt the search and return it\n  def solve_puzzle(_, {_, matrix}, _, _, _, true, _), do: {:solved, matrix}\n\n  # For the current matrix, iterate through each clue, removing possibilites from row\/columns and setting cells.\n  def solve_puzzle(dim, {:changed, matrix}, clues, clue_table, visible_perms, _, _) do\n    {new_state, new_matrix} = clues\n    |> Enum.with_index\n    |> Enum.reduce_while({:unchanged, matrix}, fn clue, acc ->\n          acc =  process_clue(dim, clue, acc, clue_table, visible_perms)\n          if elem(acc, 0) == :no_solution, do: {:halt, acc}, else: {:cont, acc} end)\n    solve(dim, {new_state, new_matrix}, clues, clue_table, visible_perms, solution?(dim, new_matrix, clues, clue_table), adjustable_index(matrix))\n  end\n\n  # Find singletons (values that appear only once) in each row and column and set them\n  def solve_puzzle(dim, {:unchanged, matrix}, clues, clue_table, visible_perms, _, _) do\n    {new_state, new_matrix} = {:still_unchanged, matrix}\n    |> set_singletons(dim, &same_row_as\/2)\n    |> set_singletons(dim, &same_column_as\/2)\n\n    solve(dim, {new_state, new_matrix}, clues, clue_table, visible_perms, solution?(dim, new_matrix, clues, clue_table), adjustable_index(matrix))\n  end\n\n  # All cells have been set (no adjustable indexes remain) but this is not a solution.\n  def solve_puzzle(_, {:still_unchanged, matrix}, _, _, _, false, nil), do: {:no_solution, matrix}\n\n  # Iteratively processing clues has led to a state where no more cells can be set, but we are not yet at a solution\n  # Set the first cell that contains multiple possibilities and follow the implications by processing the clues again.\n  # If we reach a dead end (:no_solution), remove that possibility and start over\n  def solve_puzzle(dim, {:still_unchanged, matrix}, clues, clue_table, visible_perms, _, first_adjustable_index) do\n    value = matrix |> Enum.at(first_adjustable_index) |> MapSet.to_list |> hd\n    {new_state, new_matrix} = solve(dim, set_element(dim, {:changed, matrix}, first_adjustable_index, value), clues, clue_table, visible_perms, false, nil)\n\n    if new_state == :no_solution do\n      solve(dim, remove_possibility(dim, {:changed, matrix}, first_adjustable_index, value), clues, clue_table, visible_perms, false, nil)\n    else\n      solve(dim, {new_state, new_matrix}, clues, clue_table, visible_perms, solution?(dim, new_matrix, clues, clue_table), adjustable_index(new_matrix))\n    end\n  end\n\n  # Reached a dead end. Stop following this search path any further.\n  def solve_puzzle(_, {:no_solution, matrix}, _, _, _, _, _), do: {:no_solution, matrix}\n\n  # Exterior position with no clue\n  def process_clue(_, {0, _}, {state, matrix}, _, _), do: {state, matrix}\n\n  # For the current clue, get the updated set of possibilities given that the current cell values for this\n  # row or column may reduce the set of visible permutations.\n  def process_clue(dim, {num_visible, clue_pos}, {state, matrix}, clue_table, visible_perms) do\n    slice = slice_indexes(dim, clue_pos, clue_table)\n    filtered_perms = visible_perms\n    |> Map.get(num_visible)\n    |> Enum.filter(fn perm -> Enum.all?(Enum.zip(perm, matrix_slice(matrix, slice)),\n            fn {element, set} -> MapSet.member?(set, element) end) end)\n\n    # Update each of the cell locations with the (possibly) reduced set of possibilites\n    Enum.reduce(0..dim-1, {state, matrix}, fn\n        index, acc -> update_possibilities(dim, acc, Enum.at(slice, index), cell_possibilities(filtered_perms, index)) end)\n  end\n\n  # For the list of valid permutations for the current row\/column, determine the set of possibilities for each cell location\n  def cell_possibilities(filtered_perms, index) do\n    filtered_perms |> Enum.reduce(MapSet.new(), fn perm, acc -> MapSet.put(acc, Enum.at(perm,index)) end)\n  end\n\n  # A situation with no possibilites for another cell in this row\/column has already been found.\n  def update_possibilities(_, {:no_solution, matrix}, _, _), do: {:no_solution, matrix}\n\n  # Compare the (possibly) reduced set of possibilities to the current one for each cell.\n  # If only one possibility remains, set it and update same row\/column to remove that value from those sets.\n  def update_possibilities(dim, {state, matrix}, index, cell_possibilities) do\n    current_set = Enum.at(matrix, index)\n    cond do\n      MapSet.size(cell_possibilities) == 0  -> {:no_solution, matrix}\n      MapSet.equal?(current_set, cell_possibilities) -> {state, matrix}\n      MapSet.size(cell_possibilities) > 1 -> {:changed, List.replace_at(matrix, index, cell_possibilities)}\n      true -> set_element(dim, {state, matrix}, index, hd(MapSet.to_list(cell_possibilities)))\n    end\n  end\n\n  # Setting an element in one cell removes that value as a possibility in other cells in same row\/column\n  def remove_possibility(dim, {state, matrix}, index, value) do\n    current_set = Enum.at(matrix, index)\n    cond do\n      !MapSet.member?(current_set, value) -> {state, matrix}\n      MapSet.size(current_set) > 2 -> {:changed, List.replace_at(matrix, index, MapSet.delete(current_set, value))}\n      MapSet.size(current_set) == 2 -> set_element(dim, {:changed, matrix}, index, hd(MapSet.to_list(MapSet.delete(current_set, value))))\n      true -> {:no_solution, matrix}\n    end\n  end\n\n  # If the first available index is nil, then all elements have been set during the search, but this is not a solution.\n  def set_element(_, {_, matrix}, nil, _), do: {:no_solution, matrix}\n\n  # Set cell element and remove that value from other cells in the same row\/column.  Follow implications that result.\n  def set_element(dim, {_, matrix}, index, value) do\n    same_row_as(dim, index) ++ same_column_as(dim, index)\n    |> Enum.reduce({:changed, List.replace_at(matrix, index, MapSet.new([value]))}, fn\n      ind, {state, mat} -> remove_possibility(dim, {state, mat}, ind, value) end)\n  end\n\n  # Given the array index of matrix cell, return indexes of cells in same matrix row\n  def same_row_as(dim, index) do\n    0..dim-1 |> Enum.to_list() |> Enum.map(&(&1+index-rem(index, dim))) |> Kernel.--([index])\n  end\n\n  # Given the array index of matrix cell, return indexes of cells in same matrix column\n  def same_column_as(dim, index) do\n    0..dim-1 |> Enum.to_list() |> Enum.map(&(&1*dim + rem(index, dim))) |> Kernel.--([index])\n  end\n\n  # Return vector of matrix indexes from closest cell to clue to farthest\n  def slice_indexes(dim, clue_pos, clue_table), do: Enum.map(0..dim-1, &Enum.at(Enum.at(clue_table, clue_pos), &1))\n\n  # Return vector of sets of possibilites for the specified matrix cells\n  def matrix_slice(matrix, slice), do: Enum.map(slice, &Enum.at(matrix, &1))\n\n  # Return number of buildings visible given a list of building heights, closest to farthest\n  def num_visible(list) do\n    list\n    |> Enum.scan(0, &max(&1, &2))\n    |> Enum.zip(list)\n    |> Enum.count(fn {a,b} -> b >= a end)\n  end\n\n  # Find the first cell where more than one possibility exists. Used during the systematic search process\n  def adjustable_index(matrix) do\n    matrix\n    |> Enum.with_index\n    |> Enum.reduce_while(nil, fn {set, index}, acc ->\n      if MapSet.size(set) > 1, do: {:halt, index}, else: {:cont, acc} end)\n  end\n\n  # If all cells have only one possibility and all clues satsified, we've found the solution\n  def solution?(dim, matrix, clues, clue_table) do\n    Enum.all?(matrix, &MapSet.size(&1)==1) &&\n    clues\n    |> Enum.with_index\n    |> Enum.reduce(true, fn {num_visible, clue_pos}, acc ->\n      acc && (num_visible == 0 or num_visible(matrix_slice(matrix, slice_indexes(dim, clue_pos, clue_table))) == num_visible) end)\n  end\n\n  # Return the elements (with MapSet.size>1) of a list of MapSets where a value is contained in that cell but no other.\n  def get_singletons(dim, matrix, direction_fn) do\n    empty = MapSet.new()\n\n    matrix\n    |> Enum.with_index\n    |> Enum.map(fn {set1, index1} -> if MapSet.size(set1) > 1,\n          do: Enum.reduce(direction_fn.(dim, index1), Enum.at(matrix, index1), fn\n                index2, acc -> if index1 != index2,\n                do: MapSet.difference(acc, Enum.at(matrix, index2)),\n                else: acc end),\n          else: empty end)\n  end\n\n  # Update the matrix by setting any identified singletons by row\/column as specified by the direction_fn\n  def set_singletons({state, matrix}, dim, direction_fn) do\n    get_singletons(dim, matrix, direction_fn)\n    |> Enum.with_index\n    |> Enum.reduce({state, matrix}, fn {set, index}, acc -> if MapSet.size(set) > 0,\n        do: set_element(dim, acc, index, hd(MapSet.to_list(set))),\n        else: acc end)\n  end\n\n  # Construct lookup table of matrix indexes as seen from each clue position closest to farthest cell\n  def get_clue_table(dim) do\n    left = 0..dim*dim-1 |> Enum.to_list |> Enum.chunk_every(dim) |> Enum.reverse\n    top = left |> Enum.map(&Enum.map(&1, fn a -> dim*rem(a, dim) + div(a, dim) end)) |> Enum.reverse\n\n    top ++ Enum.reverse(Enum.map(left, &Enum.reverse\/1)) ++ Enum.reverse(Enum.map(top, &Enum.reverse\/1)) ++ left\n  end\n\n  # Return a lookup table of the valid permutations for each visibility value, from closest to farthest cell\n  def get_visible_permutations(dim) do\n    map = Enum.to_list(1..dim) |> Enum.reduce(%{}, &Map.put(&2, &1, []))\n\n    permutations(Enum.to_list(1..dim))\n    |> Enum.reduce(map, fn perm, acc -> %{acc | num_visible(perm) => [perm | Map.get(acc,num_visible(perm))]} end)\n  end\n\n  # Routine to generate all permutations of a list of objects and return a list of lists\n  def permutations(list) do\n    permutations(list, [], [])\n  end\n\n  def permutations([], current, _), do: [current]\n\n  def permutations(list, current, results) do\n    list\n    |> Enum.reduce(results, fn item, acc -> acc ++ permutations(list--[item], [item | current], results) end)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79860,"user_id":null,"body":"defmodule PuzzleSolver do\n\n  @size 7\n  \n  def visibility(x), do: visibility(x, 0)\n  def visibility([], _), do: 0\n  def visibility([x], prev_max) when prev_max < x, do: 1\n  def visibility([@size | _xs], _prev_max), do: 1\n  def visibility([x | xs], prev_max) when prev_max < x, do: 1 + visibility(xs, x) \n  def visibility([x | xs], prev_max) when prev_max > x, do: visibility(xs, prev_max) \n  \n  def permutations([]), do:  [[]]\n  def permutations(list) do\n    for h <- list, t <- permutations(Enum.to_list(list) -- [h]), do: [h | t]\n  end\n  \n  def visibility_for_hint(0), do: 1..@size |> permutations\n  def visibility_for_hint(hint) do\n    1..@size\n    |> permutations()\n    |> Enum.group_by(&visibility\/1)\n    |> Map.get(hint)\n  end\n  \n  def visibility_for_hints(hint1, hint2) do\n    v1 = visibility_for_hint(hint1) |> MapSet.new()\n    v2 = visibility_for_hint(hint2) |> Enum.map(&Enum.reverse\/1) |> MapSet.new()\n    MapSet.intersection(v1, v2)\n  end\n    \n  def filter_vset([], _, _), do: MapSet.new()\n  def filter_vset(_, _, []), do: MapSet.new()\n  def filter_vset(vset, i, values) do\n    vset\n    |> Enum.filter(fn p -> Enum.member?(values, Enum.at(p, i)) end)\n    |> MapSet.new()\n  end\n  \n  def cross_vsets(vset1, i1, vset2, i2) do\n    vset1 = filter_vset(vset1, i1, Enum.map(vset2, &(Enum.at(&1, i2))) |> Enum.uniq)\n    vset2 = filter_vset(vset2, i2, Enum.map(vset1, &(Enum.at(&1, i1))) |> Enum.uniq)\n    {vset1, vset2}\n  end\n  \n  def counts(sets) do\n    sets\n    |> Enum.map(&Enum.count\/1)\n  end\n  \n  def count(sets) do\n    sets\n    |> counts()\n    |> Enum.reduce(&+\/2)\n  end\n    \n  def run_crosses({horizontals, verticals}) do\n    \n    hvcounts = {count(horizontals), count(verticals)}\n    \n    if elem(hvcounts,0) <= @size do\n      { horizontals, verticals }\n    else\n      horizontals \n      |> Enum.with_index()\n      |> Enum.map_reduce(verticals, fn {hset, i}, verticals -> \n\n        {verticals, hset} = verticals \n        |> Enum.with_index()\n        |> Enum.map_reduce(hset, fn {vset, j}, hset ->\n\n          cross_vsets(vset, i, hset, j)\n        end)\n\n        {hset, verticals}\n      end)\n      |> break_ties(hvcounts)\n    end\n  end\n  \n  def break_ties({horizontals, verticals} = both, hvcounts) do\n    if {count(horizontals), count(verticals)} == hvcounts do\n      sorted_with_index = horizontals\n      |> Enum.with_index()\n      |> Enum.sort_by(fn {h, _i} -> Enum.count(h) end)\n      \n      Enum.find_value(sorted_with_index, fn {h, i} ->\n        Enum.find_value(h, fn set -> \n          horizontals = List.replace_at(horizontals, i, MapSet.new([set]))\n          {horizontals, verticals} = run_crosses({horizontals, verticals})\n\n          if Enum.member?(counts(horizontals), 0) || Enum.member?(counts(verticals), 0) do\n            nil\n          else\n            {horizontals, verticals}\n          end\n        end)\n      end)\n    else\n      run_crosses(both)\n    end\n  end\n    \n    \n    \n  def solve_puzzle(clues) do\n  \n    {horizontals, _verticals} =\n      {Enum.map(@size..(@size*2 - 1), fn n -> visibility_for_hints(Enum.at(clues, (@size*5-1)-n), Enum.at(clues, n)) end),\n       Enum.map(0..(@size - 1), fn n -> visibility_for_hints(Enum.at(clues, n), Enum.at(clues, (@size*3-1)-n)) end)}\n      |>  run_crosses()\n    \n    horizontals\n    |> Enum.map(&MapSet.to_list\/1)\n    |> Enum.map(&List.flatten\/1)\n    \n  end\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79861,"user_id":null,"body":"defmodule PuzzleSolver do\n  @all [0,1,2,3,4,5,6]\n  @floors [1,2,3,4,5,6,7]\n\n  def solve_puzzle(clues) do\n    matrix = for _i <- 0..6, do: for _j <- 0..6, do: @floors \n    map=gen_variants(init_map())\n    {matrix,stat}= Enum.reduce_while(1..10, {matrix,0}, fn _step, {matr,prev_status} ->\n      matr=matr|>check_cell(clues,map)|>additional_check_cell()\n      stat=status(matr)\n      if prev_status != stat, do: {:cont,{matr,stat}}, else: {:halt,{matr,stat}}\n    end)\n    {matrix,stat}= Enum.reduce_while(1..10, {matrix,stat}, fn _step, {matr,prev_status} ->\n      matr=matr|>check_cell2(clues)|>additional_check_cell()\n      stat=status(matr)\n      if prev_status != stat, do: {:cont,{matr,stat}}, else: {:halt,{matr,stat}}\n    end)\n    matrix=(if stat > 49, do: check_imit(matrix,clues), else: matrix) \n    Enum.reduce(matrix, [], fn row,matr-> matr++[List.flatten(row)] end)\n  end\n\n  defp check_imit(matrix,clues) do\n    arr=init_model(matrix)\n    Enum.reduce(arr,matrix, fn {r,c}, matr1 ->\n      arr=Enum.at(matr1,r)|>Enum.at(c)\n      Enum.reduce_while(arr, matr1, fn el, matr ->\n        matr_temp=set_value(matr,r,c,el)\n        {matr_temp,stat}= Enum.reduce_while(1..10, {matr_temp,0}, fn _step, {matr,prev_status} ->\n          matr=matr|>check_cell2(clues)|>additional_check_cell()\n          stat=status(matr)\n          if prev_status != stat, do: {:cont,{matr,stat}}, else: {:halt,{matr,stat}}\n        end)\n        if stat < 49 do \n          {:cont,matr} \n        else if stat == 49, do:  {:halt,matr_temp}, else: {:cont,matr_temp}\n        end\n      end)\n    end)\n  end\n\n  defp init_model(matrix) do\n    Enum.reduce(0..6,[], fn r, arr -> \n      Enum.reduce(0..6, arr, fn c, a -> if length(Enum.at(matrix,r)|>Enum.at(c)) > 1, do: a++[{r,c}], else: a end)\n    end)\n  end\n\n  defp status(matrix) do\n     Enum.reduce(0..6,0, fn j, sum1 -> Enum.reduce(0..6,sum1, fn i, sum -> sum+length(Enum.at(matrix,j)|>Enum.at(i)) end) end)\n  end\n\n  defp check_cell2(matrix,clues) do\n    Enum.reduce(0..3, matrix, fn step,matr -> \n      clues1=Enum.slice(clues,step*7..((step+1)*7-1))\n      matr=Enum.reduce(0..6, matr, fn col, m -> \n        clue=Enum.at(clues1,col)\n        if clue != 0 do\n          map2 = init_map2(matr,col)\n          arr=gen_variants2(map2,clue)\n          m|>act_on_col(clue,col,arr)|>check_uniq(col)|>check_duplicates(col)\n        else\n          m\n        end\n      end)  \n      matr|>rotate\n    end)\n  end\n\n  defp check_cell(matrix,clues,map) do\n    Enum.reduce(0..3, matrix, fn step,matr -> \n      clues1=Enum.slice(clues,step*7..((step+1)*7-1))\n      matr=Enum.reduce(0..6, matr, fn col, m -> \n        clue=Enum.at(clues1,col)\n        m|>act_on_col(clue,col,map[clue])|>check_uniq(col)|>check_duplicates(col)\n      end)  \n      matr|>rotate\n    end)\n  end\n\n  defp additional_check_cell(matrix) do\n    Enum.reduce(0..3, matrix, fn _step,matr -> \n         matr=Enum.reduce(0..6, matr, fn col, m -> \n         m|>check_uniq(col)|>check_duplicates(col)\n      end)  \n      matr|>rotate\n    end)\n  end\n\n  defp act_on_col(matrix,clue_top,col,variants) when clue_top > 0 and clue_top <= 7, do: set_column(matrix,col, variants)\n  defp act_on_col(matrix,_clue_top,_col,_variants), do: matrix\n  defp check_duplicates(matrix,col) do\n    Enum.reduce(1..7, matrix, fn val,m -> \n       row = get_row_for(m,col,val) \n       if row >= 0, do: m|>del_values(@all--[row],[col],val)|>del_values([row],@all--[col],val), else: m \n     end)\n  end\n\n  defp check_uniq(matrix,col) do\n     Enum.reduce(1..7, matrix, fn val,m -> \n      {num_val,row} = Enum.reduce(0..6, {0,0}, fn row, {num,r} -> \n        a=Enum.at(m,row)|>Enum.at(col)\n        if Enum.member?(a,val), do: {num+1,row}, else: {num,r}\n      end)\n      if num_val == 1, do: set_value(m,row,col,val), else: m \n    end)\n  end\n\n  defp get_row_for(matrix, col, val) do\n    Enum.reduce_while(0..6, -1, fn row, _ind -> \n        a=Enum.at(matrix,row)|>Enum.at(col)\n        if length(a) == 1 && Enum.at(a,0) == val, do: {:halt,row}, else: {:cont,-1} \n      end)\n  end\n\n  defp del_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)\n    r=List.replace_at(r,col,Enum.at(r,col)--[value])\n    List.replace_at(matrix,row,r)\n  end\n  defp del_values(matrix,rows,cols,value) do\n    Enum.reduce(rows, matrix, fn row, matr1 -> \n      Enum.reduce(cols, matr1, fn col, matr2 -> del_value(matr2,row,col,value) end )\n    end)\n  end\n  defp set_column(matrix,col, arr) do\n     m=Enum.reduce( 0..6, matrix, fn row, matr ->\n      r=Enum.at(matr,row)\n      c=Enum.at(r,col)\n      if length(c)>length(Enum.at(arr,row)) do \n        r=List.replace_at(r,col,intersect(c,Enum.at(arr,row)))\n        List.replace_at(matr,row,r)\n      else matr\n      end\n     end)\n     m\n  end\n  defp intersect(a1,a2) do\n     Enum.reduce( a1, [], fn el,arr->\n        if Enum.member?(a2,el), do: arr++[el], else: arr\n     end) \n  end\n  defp set_value(matrix,row,col,value) do\n    r=Enum.at(matrix,row)|>List.replace_at(col,[value])\n    List.replace_at(matrix,row,r)\n  end\n  defp init_map2(m,col) do\n    Enum.at(m,0)|>Enum.at(col)\n    for a<-Enum.at(m,0)|>Enum.at(col),b<-Enum.at(m,1)|>Enum.at(col),c<-Enum.at(m,2)|>Enum.at(col),d<-Enum.at(m,3)|>Enum.at(col),\n        e<-Enum.at(m,4)|>Enum.at(col),f<-Enum.at(m,5)|>Enum.at(col),j<-Enum.at(m,6)|>Enum.at(col),\n        a not in [b,c,d,e,f,j], b not in [c,d,e,f,j], c not in [d,e,f,j], d not in [e,f,j], e not in [f,j], f != j,  do: [a,b,c,d,e,f,j]\n  end  \n  defp gen_variants2(map,clue) do\n    Enum.reduce(map,[], fn el, m -> if get_vis(el) ==clue, do: m++[el], else: m end)|> merge\n  end\n  \n  defp init_map do\n    for a <- 1..7, b <- 1..7, c <- 1..7, d <- 1..7, e <- 1..7, f <- 1..7, j <- 1..7, \n      a not in [b,c,d,e,f,j], b not in [c,d,e,f,j], c not in [d,e,f,j], d not in [e,f,j], e not in [f,j], f != j,  do: [a,b,c,d,e,f,j]\n  end\n  defp gen_variants(a) do\n      map=Enum.reduce(a,%{1=>[],2=>[],3=>[],4=>[],5=>[],6=>[],7=>[]}, fn el, m -> \n        vis = get_vis(el) \n        {_old,m}=Map.get_and_update(m,vis, fn cur -> {cur, cur++[el]} end)\n        m\n      end)\n      Enum.reduce(1..7,map, fn key,m -> \n        {_,m}=Map.get_and_update(m,key, fn arr -> {arr,merge(arr)} end) \n        m \n      end)\n  end\n  defp get_vis(arr) do\n      {_,vis,_} = Enum.reduce(arr, {0,0,0}, fn el,{prev,vis,max} -> comp(el,prev,vis,max) end)\n      vis\n  end\n  defp comp(el,prev,vis,max) when el <= prev or el < max , do: {el,vis,max}\n  defp comp(el,prev,vis,max) when el > prev and el > max , do: {el,vis+1,el}\n  defp merge(a_in) do\n    Enum.reduce(a_in,[[],[],[],[],[],[],[]], fn el, arr -> \n        Enum.reduce(0..6, arr, fn ind, a ->\n         List.replace_at(a,ind,Enum.at(a,ind)++[Enum.at(el,ind)]|>Enum.uniq|>Enum.sort) end  )\n    end)\n  end\n  defp rotate(matrix), do: matrix |> Enum.zip |> Enum.map(fn t -> :erlang.tuple_to_list(t) end) |> Enum.reverse\nend\n","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79862,"user_id":null,"body":"defmodule Helper do\n    def permute([]), do: [[]]\n    def permute(ls), do: ls\n        |> Enum.with_index\n        |> Enum.flat_map(fn {x,i} -> ls\n            |> List.delete_at(i)\n            |> permute\n            |> Enum.map(& [x|&1])\n        end)\n\n    def rev_tuple(t), do: t |> Tuple.to_list |> Enum.reverse |> List.to_tuple\nend\n\ndefmodule PuzzleSolver do\n    @size 7\n\n    @row_per_vis 1..@size\n        |> Enum.to_list\n        |> Helper.permute\n        |> Enum.reduce(Map.new(0..@size, & {&1,MapSet.new}), fn p,m ->\n            {_,v} = Enum.reduce(p, {0,0}, fn h,(a = {m,c}) ->\n                if m < h, do: {h,c+1}, else: a\n            end)\n            p = List.to_tuple(p)\n            m |> Map.put(0,MapSet.put(m[0],p)) |> Map.put(v,MapSet.put(m[v],p))\n        end)\n\n    defp fit(rfs, cfs) do\n        if not Enum.any?(rfs, &Enum.empty?\/1) do\n            if Enum.all?(rfs, fn [_] -> true; _ -> false end) do\n                Enum.map(rfs, &hd\/1)\n            else\n                prev = rfs\n                {rfs,cfs} = Enum.reduce(0..@size-1, {rfs,cfs}, fn i,a ->\n                    Enum.reduce(0..@size-1, a, fn j,{r,c} ->\n                        xs = Enum.at(c,i)\n                        ys = Enum.at(r,j)\n                        cmn = MapSet.intersection(\n                            MapSet.new(xs, & elem(&1,j)),\n                            MapSet.new(ys, & elem(&1,i))\n                        )\n                        {\n                            List.replace_at(r, j, Enum.filter(ys, & elem(&1,i) in cmn)),\n                            List.replace_at(c, i, Enum.filter(xs, & elem(&1,j) in cmn))\n                        }\n                    end)\n                end)\n                if prev == rfs, do: search(rfs,cfs), else: fit(rfs,cfs)\n            end\n        end\n    end\n\n    defp search(rfs, cfs) do\n        {x,i} = rfs\n            |> Enum.with_index\n            |> Enum.reject(fn {[_],_} -> true; _ -> false end)\n            |> Enum.min_by(fn {x,_} -> length(x) end)\n\n        Enum.reduce(x, nil, fn p,r -> r || rfs |> List.replace_at(i,[p]) |> fit(cfs) end)\n    end\n\n    def solve_puzzle(clues) do\n        clues = List.to_tuple(clues)\n\n        cfs = Enum.map(0..@size-1, fn i ->\n            opc = elem(clues, 3*@size-i-1)\n            MapSet.intersection(\n                @row_per_vis[elem(clues,i)],\n                MapSet.new(@row_per_vis[opc], &Helper.rev_tuple\/1)\n            ) |> MapSet.to_list\n        end)\n\n        rfs = Enum.map(@size..2*@size-1, fn i ->\n            opc = elem(clues, 5*@size-i-1)\n            MapSet.intersection(\n                MapSet.new(@row_per_vis[elem(clues,i)], &Helper.rev_tuple\/1),\n                @row_per_vis[opc]\n            ) |> MapSet.to_list\n        end)\n\n        rfs |> fit(cfs) |> Enum.map(&Tuple.to_list\/1)\n    end\nend","lang_id":14,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a331ea7ee1aae8f24000175":[{"id":79863,"user_id":null,"body":"import Enum, only: [map: 2, zip: 2, drop: 2, take_every: 2]\nimport String, only: [graphemes: 1, at: 2]\ndefmodule Kata do\n  def tr(r) do\n    case [length(r), rem((length(r) - 1), 3)] do\n      [1, _] -> r\n      [_, 0] -> tr take_every r, 3\n      [_, _] -> tr map zip(r, drop(r, 1)), fn({x,y}) -> rem 2*(x+y), 3 end \n    end\n  end\n  def triangle(row) do\n    hd map tr(map graphemes(row), &%{\"R\"=>0,\"G\"=>1,\"B\"=>2}[&1]), &at(\"RGB\", &1)\n  end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-19 13:44:27"},{"id":79864,"user_id":null,"body":"defmodule Kata do\n    @log3 :math.log(3)\n\n    defp step(row,1,i), do: rem(:binary.at(row,i), 3)\n    defp step(row,n,i) do\n        d = floor(:math.pow(3, floor(:math.log(n-1) \/ @log3)))\n        3 + rem(-step(row,n-d,i) - step(row,n-d,i+d), 3)\n    end\n\n    def triangle(row) do\n        case rem(step(row,byte_size(row),0), 3) do\n            0 -> \"B\"\n            1 -> \"R\"\n            2 -> \"G\"\n        end\n    end\nend","lang_id":14,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-19 13:44:29"},{"id":79865,"user_id":null,"body":"defmodule Kata do\n\nrequire Integer\n    def triangle(row) do\n        x = for <<el <- row >> do \n            case el do \n                66 -> 2 \n                71 -> 1\n                82 -> 0 \n            end\n        end\n        n=length x\n        {sum,_} = Enum.reduce(x,{0,0},fn el,{s,k} ->\n            r = if el == 0, do: 0, else: binomial_mod3(n-1,k)*el\n            { Integer.mod(r+s,3), k+1 }\n        end)\n        p=if Integer.is_even(n), do: -1, else: 1\n        Enum.at([\"R\",\"G\",\"B\"],Integer.mod(sum*p,3))\n    end\n    defp binomial_mod3(0, k, res), do: res\n    defp binomial_mod3(n, k, res\\\\1) do\n        n3 = rem(n,3)\n        k3 = rem(k,3)\n        if k3 > n3 do\n             0 \n        else\n          temp = if k3 == 0 or k3 == n3, do: 1 , else: 2\n          res = rem(res * temp,3)\n          n = n\/3|>trunc\n          k = k\/3|>trunc\n          binomial_mod3(n,k,res)\n        end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79866,"user_id":null,"body":"defmodule Kata do\n  @match %{\n    {\"R\", \"R\"} => \"R\",\n    {\"G\", \"G\"} => \"G\",\n    {\"B\", \"B\"} => \"B\",\n    {\"R\", \"B\"} => \"G\",\n    {\"B\", \"R\"} => \"G\",\n    {\"R\", \"G\"} => \"B\",\n    {\"G\", \"R\"} => \"B\",\n    {\"G\", \"B\"} => \"R\",\n    {\"B\", \"G\"} => \"R\"\n  }\n\n  @reduce [59050, 19684, 6562, 2188, 730, 244, 82, 28, 10, 4, 2]\n\n  def triangle(row) do\n    Enum.reduce(@reduce, String.graphemes(row), fn length, row -> red(row, length) end)\n    |> hd()\n  end\n\n  defp red(row, length) when length(row) < length, do: row\n\n  defp red(row, length) do\n    Enum.zip(row, Enum.slice(row, (length - 1)..-1))\n    |> Enum.map(fn pair -> @match[pair] end)\n    |> red(length)\n  end\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79867,"user_id":null,"body":"defmodule Kata do\n  @match %{\n    {\"R\", \"R\"} => \"R\",\n    {\"G\", \"G\"} => \"G\",\n    {\"B\", \"B\"} => \"B\",\n    {\"R\", \"B\"} => \"G\",\n    {\"B\", \"R\"} => \"G\",\n    {\"R\", \"G\"} => \"B\",\n    {\"G\", \"R\"} => \"B\",\n    {\"G\", \"B\"} => \"R\",\n    {\"B\", \"G\"} => \"R\"\n  }\n\n  @reduce [59050, 19684, 6562, 2188, 730, 244, 82, 28, 10, 4, 2]\n\n  def triangle(row) do\n    Enum.reduce(@reduce, String.graphemes(row), fn length, row -> red(row, length) end)\n    |> hd()\n  end\n\n  defp red(row, length) when length(row) < length, do: row\n\n  defp red(row, length) do\n    Enum.zip(row, Enum.slice(row, (length - 1)..-1))\n    |> Enum.map(fn pair -> @match[pair] end)\n    |> red(length)\n  end\n\n  defp pow(_, 0), do: 1\n  defp pow(n, p), do: n * pow(n, p - 1)\nend\n","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79868,"user_id":null,"body":"defmodule Kata do\n\n  # It's double cursed, but also double fast (on average, 4 second for all tests)\n  # I might make it faster later if I remember, maybe\n\n  def triangle(row) when is_bitstring(row) do\n    out = row\n    |> String.to_charlist() # To charlist conversion is fastest in this case\n    |> triangle()\n    List.to_string([out]) # Back to string\n  end\n\n  def triangle([left | []]) do\n    left # For short ones\n  end\n\n  def triangle([left | [right | []]]) do\n    colors(left, right) # For short ones\n  end\n\n  def triangle([left | [center | [right | []]]]) do\n    colors(colors(left, center), colors(center, right)) # For short ones\n  end\n  \n  @doc\"\"\"\n  Understanding how this works\n  \n  First of all, if you're here, you've figured out that you can skip every 2 characters if the string length - 1 can be divided by 3.\n  \n  Why is that? Because it's actually any string where length - 1 is a power of 3. So even a length 1594323 string can solve just from the start and end characters.\n  \n  This solution builds off of actually making it to a string that has that property.\n  \n  Below is 3 different functions for if it's divisible by 3 or not. Everything else is explained inline.\n  \"\"\"\n\n  def triangle(list) when rem((length(list) - 1), 3) == 0 do\n    gcd = Integer.gcd(length(list) - 1, 10460353203) # I explain this better in function steps\/3\n    if gcd == length(list) - 1 do\n      [colors(List.first(list), List.last(list))] # This is an instant solution\n    else\n      steps = steps(gcd, length(list) - 1, length(list)) # This returns the number of actually useful characters at the start and end of string\n      triangle(List.flatten([triangle(Enum.take(list, steps)), triangle(Enum.take(list, -steps))])) # This just runs the same function on those characters and then solves the simple triangle left\n    end\n  end\n\n  def triangle(list) when rem((length(list) - 1), 3) == 1 do\n    steps = steps(Integer.gcd(length(list) - 2, 10460353203), length(list) - 2, length(list)) # Same as above\n    triangle(List.flatten([triangle(Enum.take(list, steps)), triangle(Enum.take(list, -steps))])) # Same as above\n  end\n\n  def triangle(list) do\n    steps = steps(Integer.gcd(length(list) - 3, 10460353203), length(list) - 3, length(list)) # Same as above\n    triangle(List.flatten([triangle(Enum.take(list, steps)), triangle(Enum.take(list, -steps))])) # Same as above\n  end\n  \n  @doc\"\"\"\n  Now here it's pretty simple (It is, really!), we get the gcd of length of string - previous gcd and the biggest number that is power of 3 (that I could think of) and repeat the process until length equals gcd, at which point we take the actual length of the string and subtract the gcd (or len) from it, to get the sub-triangles that are required to get to the solution instantly.\n  \"\"\"\n\n  def steps(gcd, len, max_len) when gcd == len or gcd == 10460353203 do\n    max_len - len\n  end\n\n  def steps(gcd, len, max_len) do\n    steps(Integer.gcd(len - gcd, 10460353203), len - gcd, max_len)\n  end\n\n  # These are just quick basic triangle solutions\n\n  defp colors(left, right) when left == right do\n    left\n  end\n\n  defp colors(left, right) when (left == 82 or right == 82) and (left == 71 or right == 71) do\n    66\n  end\n\n  defp colors(left, right) when (left == 82 or right == 82) and (left == 66 or right == 66) do\n    71\n  end\n\n  defp colors(left, right) when (left == 71 or right == 71) and (left == 66 or right == 66) do\n    82\n  end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79869,"user_id":null,"body":"defmodule Kata do\n\n  # Very cursed\n\n  def triangle(row) when is_bitstring(row) do\n    #IO.inspect(:os.system_time(:millisecond))\n    row\n    |> String.to_charlist()\n    |> triangle()\n  end\n\n  def triangle([_ | []] = ans) do\n    List.to_string(ans)\n  end\n\n  def triangle(list) when rem((length(list) - 1), 3) == 0 do\n    gcd = Integer.gcd(length(list) - 1, 59049)\n    Enum.chunk_every(list, gcd + 1, gcd, :discard)\n    |> Enum.map(fn\n      [left | _] = item ->\n        colors(left, List.last(item))\n    end)\n    |> triangle()\n  end\n\n  def triangle(list) when rem((length(list) - 1), 3) == 1 do\n    gcd = Integer.gcd(length(list) - 2, 59049)\n    Enum.chunk_every(list, 2, gcd, :discard)\n    |> Enum.map(fn\n      [left | [right | _]] ->\n        colors(left, right)\n    end)\n    |> triangle()\n  end\n\n  def triangle(list) do\n    gcd = Integer.gcd(length(list) - 3, 59049)\n    Enum.chunk_every(list, 3, gcd, :discard)\n    |> Enum.map(fn\n      [left | [center | [right | []]]] ->\n        colors(colors(left, center), colors(center, right))\n    end)\n    |> triangle()\n  end\n\n  defp colors(left, right) when left == right do\n    left\n  end\n\n  defp colors(left, right) when (left == 82 or right == 82) and (left == 71 or right == 71) do\n    66\n  end\n\n  defp colors(left, right) when (left == 82 or right == 82) and (left == 66 or right == 66) do\n    71\n  end\n\n  defp colors(left, right) when (left == 71 or right == 71) and (left == 66 or right == 66) do\n    82\n  end\n  \nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79870,"user_id":null,"body":"defmodule Kata do\n    def triangle(row) do\n      n = String.length(row) - 1\n      {_, result} = row\n      |> String.graphemes\n      |> Enum.map(&color_to_num(&1))\n      |> Enum.with_index\n      |> Enum.map_reduce(0, fn({num, index}, acc) -> {acc, rem((acc + (binomial(n, index, 1) * num)), 3)} end)\n      \n      \n      if rem(n, 2) == 1 do\n        num_to_color(Integer.mod(-result, 3))\n      else\n        num_to_color(result)\n      end\n    end\n    \n    defp binomial(n, _k, result) when n <= 0, do: result\n    defp binomial(n, k, result) do\n      n3 = rem(n, 3)\n      k3 = rem(k, 3)\n      \n      if k3 > n3 do\n        0\n      else\n        temp = if k3 == 0 || k3 == n3 do\n          1\n        else\n          2\n        end\n        result = rem((result * temp), 3)\n        binomial(div(n, 3), div(k, 3), result)\n      end\n      \n    end\n    defp num_to_color(n) do\n      case n do\n        0 -> \"R\"\n        1 -> \"G\"\n        2 -> \"B\"\n      end\n    end\n    defp color_to_num(c) do\n      case c do\n        \"R\" -> 0\n        \"G\" -> 1\n        \"B\" -> 2\n      end\n    end\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79871,"user_id":null,"body":"defmodule Kata do\n  @to_number %{?R => 0, ?G => 1, ?B => 2}\n  @to_string %{0 => \"R\", 1 => \"G\", 2 => \"B\"}\n  \n  def triangle(row) do\n    n = String.length(row)\n  \n    if n > 1 do\n      {result, _} = row\n      |> String.to_charlist\n      |> Enum.map(& Map.fetch!(@to_number, &1))\n      |> Enum.reduce({0, 1}, fn number, {result, k} ->\n        {rem(result + binomial(n - 1, k - 1) * number, 3), k + 1}\n      end)\n\n      result = if rem(n, 2) == 0, do: (-1) * result, else: result\n      result = Integer.mod(result, 3)\n      Map.fetch!(@to_string, result)\n    else\n      row\n    end\n  end\n  \n  defp binomial(n, m) do\n    n_digits = Integer.digits(n, 3)\n    k = length(n_digits)\n    m_digits = Integer.digits(m, 3)\n    m_digits = List.duplicate(0, k - length(m_digits)) ++ m_digits\n    \n    n_digits\n    |> Enum.zip(m_digits)\n    |> Enum.reduce(1, fn {n, m}, acc -> acc * base_3_binomial(n, m) end)\n  end\n  \n  defp base_3_binomial(n, m) when n < m, do: 0\n  defp base_3_binomial(2, 1), do: 2\n  defp base_3_binomial(_, _), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":79872,"user_id":null,"body":"defmodule Kata do\n  @int_mapping %{ 0 => \"R\", 1 => \"G\", 2 => \"B\" }\n\n  def triangle(row) do\n    graphemes = row |> String.graphemes()\n    n = length(graphemes)\n    mult = if rem(n, 2) == 0, do: -1, else: 1\n    \n    ni_s = Integer.digits(n - 1, 3)\n    ni_l = length(ni_s)\n    sum =\n      graphemes\n      |> Stream.map(&char_to_int\/1)\n      |> Stream.with_index(1)\n      |> Enum.reduce(0, fn {ak, k}, acc ->\n        acc + ak * binomial_mod3(ni_s, ni_l, k - 1)\n      end)\n      \n    Map.fetch!(@int_mapping, Integer.mod(mult * sum, 3))\n  end\n  \n  def char_to_int(\"R\"), do: 0\n  def char_to_int(\"G\"), do: 1\n  def char_to_int(\"B\"), do: 2\n  \n  def binomial_mod3(nis, ni_l, k) do\n    kis = Integer.digits(k, 3)\n    nis = Enum.drop(nis, ni_l - length(kis))\n    Enum.zip(nis, kis)\n    |> Enum.map(fn {n_i, k_i} -> binomial_coefficient(n_i, k_i) end)\n    |> Enum.reduce(&(&1 * &2))\n  end\n  \n  def binomial_coefficient(_, 0), do: 1\n  def binomial_coefficient(0, _), do: 0\n  def binomial_coefficient(1, 1), do: 1\n  def binomial_coefficient(1, 2), do: 0\n  def binomial_coefficient(2, 1), do: 2\n  def binomial_coefficient(2, 2), do: 1\nend","lang_id":14,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}]}