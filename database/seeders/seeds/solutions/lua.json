{"50654ddff44f800200000004":[{"id":209646,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  return a * b\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209647,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  local Result = 0\n  local Success,Error = pcall(function()\n      assert(a,\"Failed\")\n      assert(b,\"Failed\")\n      \n      if type(a) == \"number\" and type(b) == \"number\" then\n        Result = a * b\n    else\n        error(\"Failed to get correct data.\")\n      end\n  end)\n  \n  if Success then\n    return Result\n    \nelse\n    warn(\"Failed!\")\n    if Error then\n      warn(Error)\n    end\n  end\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209648,"user_id":676,"body":"return {multiply = function(a, b) return a * b end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209649,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\nlol = a * b\nreturn lol\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209650,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  return a * b  --add return\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209651,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n return a * b\nend\n\nkata[1] = kata.multiply(10,10)\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209652,"user_id":null,"body":"kata = {}\n\nfunction kata.multiply(a, b)\n  return a * b\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209653,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  \n  local result\n  \n  result = a * b\n  \n  return(result);\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209654,"user_id":null,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  local m = a*b\n  return m\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209655,"user_id":168,"body":"local kata = {}\n\nkata.multiply = function(a, b)\n  return a * b\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"514b92a657cdc65150000006":[{"id":209656,"user_id":null,"body":"local Kata = {}\n\nfunction Kata.solution(n)\n  local sum = 0\n  n = n-1\n  local n3  = (n - n%3 )\/3 \n  sum = sum + 3 *n3 *(n3 +1)\/2\n  local n5  = (n - n%5 )\/5 \n  sum = sum + 5 *n5 *(n5 +1)\/2\n  local n15 = (n - n%15)\/15\n  sum = sum - 15*n15*(n15+1)\/2\n  return sum\nend\n\nreturn Kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209657,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local sum = 0\n  for i = 3, value - 1 do\n    if i % 3 == 0 or i % 5 == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209658,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local sum = 0\n  for i=0,value-1,1\n  do\n    if i%3==0 or i%5==0 then sum = sum +i end\n  end\n    \n  return sum\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209659,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local tab = {}\n  local x = 0\n  if value < 0 then\n    return 0\n  else\n  for i = 1,value-1 do\n    if i%3 == 0 then\n      if i%3 == 0 and i%5 == 0 then\n          table.insert(tab,i)\n      else\n          table.insert(tab,i)\n      end\n    elseif i%5 == 0 then\n      if i%3 == 0 and i%5 == 0 then\n          table.insert(tab,i)\n      else\n          table.insert(tab,i)\n      end \n    end\n  end\n    for i,v in pairs(tab) do\n      x = x+v\n      print(x)\n      end\n    return x\n  end  \nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209660,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  -- Your code here.\n  local sum=0;\n  for i=1,value-1,1 do\n    if math.fmod(i,3)==0 or math.fmod(i,5)==0 then\n      sum=sum+i;\n    end\n  end\n  return sum;\n  \nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209661,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local sum = 0\n  for n=3,value-1 do\n    if n % 3 == 0 or n % 5 == 0 then\n      sum = sum + n\n    end\n  end\n  return sum\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209662,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n\n  local sum_3_5 = 0\n  for i=1, value-1 do\n    if i % 3 == 0 or i % 5 == 0 then\n      sum_3_5 = sum_3_5 + i\n    end\n  end\n  return sum_3_5\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209663,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local total = 0\n  for i = 1, value - 1 do\n      if i % 3 == 0 or i % 5 == 0 then total = total + i end\n  end\n  \n  return total\n  \nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209664,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  local sum = 0\n\n  for i = 1,value - 1\n  do\n    if (i % 3 == 0 or i % 5 == 0)\n    then\n      sum = sum + i\n    end\n  end\n  \n  return sum\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209665,"user_id":null,"body":"local solution = {}\n\nfunction solution.solution(value)\n  -- Your code here.\n  local sum = 0\n  \n  value = value - 1\n  m = value \/\/ 3\n  m3 = 3 * (m * (m + 1) \/\/ 2)\n  m = value \/\/ 5\n  m5 = 5 * (m * (m + 1) \/\/ 2)\n  m = value \/\/ 15\n  m15 = 15 * (m * (m + 1) \/\/ 2)\n  \n  return m3 + m5 - m15\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"53da3dbb4a5168369a0000fe":[{"id":209666,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(i)\n  return i % 2 == 0 and 'Even' or 'Odd';\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209667,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  if number % 2 > 0 then\n   return \"Odd\"\n  end\n  return \"Even\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209668,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  return ({\"Even\",\"Odd\"})[1 + number%2]\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209669,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  if math.fmod(number,2) == 0 then\n  return 'Even'\n    else\n  return 'Odd'\n  end\n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209670,"user_id":null,"body":"local kata = {}\n\nfunction Validate(data) -- Validates the data from the server.\n  assert(data,\"Got nothing to work with here!\")\n  if type(data[1]) == \"number\" then\n    return true\n  end\n  \n  return false\nend\n\nfunction Even(Data) -- Returns if its even.\n  local Num = Data[1]\n  \n  if Num%2 == 0 then\n    return true\nelse\n    return false\n  end\nend\n\nfunction kata.even_or_odd(number)\n  local Data = {number}\n    assert(Data,\"Got nothing to work with here!\")\n  if Validate(Data) == true then\n    if Even(Data) == true then\n      return \"Even\" -- Tells the script the result.\n  else\n      return \"Odd\"  -- Tells the script the result.  \n    end\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209671,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  -- Your code here\n  return tostring(number):match(\"[0,2,4,6,8]$\") and 'Even' or 'Odd';\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209672,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  for i=1,1001,2 do\n    if i == number or i == - number then\n      return 'Odd'\n    end\n  end\n  \n  for i=0,1000,2 do\n      if i == number or i == - number then\n        return 'Even'\n      end\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209673,"user_id":null,"body":"return {[\"even_or_odd\"]=function(n) return ({\"even\",\"odd\",\"lua\"})[n%2+1]:sub(1,1):upper()..({\"even\",\"odd\",\"stinky\"})[n%2+1]:sub(2,#({\"even\",\"odd\",\"language\"})[n%2+1]) end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209674,"user_id":null,"body":"_G[\"t\"]={\"even\",\"odd\"}\nreturn {[\"even_or_odd\"]=function(n) return _G[\"t\"][n%2+1]:sub(1,1):upper().._G[\"t\"][n%2+1]:sub(2,#_G[\"t\"][n%2+1]) end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209675,"user_id":null,"body":"local kata = {}\n\nfunction kata.even_or_odd(number)\n  -- Your code here\n  if(math.fmod(number, 2) == 0) then return \"Even\" end\n  return \"Odd\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54d7660d2daf68c619000d95":[{"id":209676,"user_id":null,"body":"local solution = {}\n\nfunction gcd(a,b)\n  while not (a == b) do\n    if a > b then\n      a = a - b\n    else\n      b = b - a\n    end\n  end\n  return a\nend\n\nfunction lcm(a,b)\n  return a * b \/ gcd(a,b)\nend\n\nfunction solution.convert_frac(lst)\n  \n  for i = 1, #lst do\n    local g = gcd(lst[i][1], lst[i][2])\n    lst[i][1] = lst[i][1] \/ g\n    lst[i][2] = lst[i][2] \/ g\n  end\n  \n  local d = lst[1][2]\n  for i = 2, #lst do\n    d = lcm(d, lst[i][2])\n  end\n  \n  for i = 1, #lst do\n    lst[i][1] = math.floor(d \/ lst[i][2] * lst[i][1])\n    lst[i][2] = math.floor(d)\n  end\n\n  return lst\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209677,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a,b)\n  while a%b ~= 0 do\n    a,b = b,a%b\n  end\n  return b\nend\n\nlocal function lcm(a,b)\n  return a*b\/\/gcd(a,b)\nend\n\nfunction solution.convert_frac(lst)\n  -- simplify fraction\n  for i=1,#lst do\n    local tmp = gcd(lst[i][1],lst[i][2])\n    lst[i][1], lst[i][2] = lst[i][1]\/\/tmp, lst[i][2]\/\/tmp\n  end\n  -- main\n  local lcm_den = 1\n  for i=1,#lst do\n    lcm_den = lcm(lcm_den,lst[i][2])\n  end\n  for i=1,#lst do\n    lst[i][1], lst[i][2] = lst[i][1]*lcm_den\/\/lst[i][2], lcm_den\n  end\n  return lst\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209678,"user_id":null,"body":"local solution = {}\n\nfunction solution.convert_frac(lst)\n  local function gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a%b\n    end\n    return a\n  end\n  local lcm = 1\n  for _, frac in ipairs(lst) do\n    local g = gcd(frac[1], frac[2])\n    frac[1], frac[2] = frac[1]\/\/g, frac[2]\/\/g\n    lcm = lcm * frac[2] \/\/ gcd(lcm, frac[2])\n  end\n  local res = {}\n  for i, frac in ipairs(lst) do\n    res[i] = {frac[1]*lcm\/\/frac[2], lcm}\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209679,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a, b)\n  return (b == 0) and a or gcd(b, a%b)\nend\n\nlocal function lcd(a, b)\n  return a * b \/\/ gcd(a, b)\nend\n\nfunction solution.convert_frac(lst)\n  local cd = 1\n  local res = {}\n  for i, r in ipairs(lst) do\n    local div = gcd(r[1], r[2])\n    lst[i] = {r[1]\/\/div, r[2]\/\/div}\n  end\n  for _, r in ipairs(lst) do\n    cd = lcd(cd, r[2])\n  end\n  for _, r in ipairs(lst) do\n    local mult = cd \/\/ r[2]\n    table.insert(res, {mult * r[1], cd})\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209680,"user_id":null,"body":"local solution = {}\n\nlocal lprimes = {2, 3} -- list of primes\nlocal tprimes = {[2] = true, [3] = true} -- hash of primes\nlocal pfcache = {[1] = {}, [2] = {[2] = 1}, [3] = {[3] = 1}} -- cache of prime factorizations\n\nlocal function fcopy(f)\n  local res = {}\n  for p, n in pairs(f) do\n    res[p] = n\n  end\n  return res\nend\n\nlocal function try_prime(n)\n  local limit = math.sqrt(n)\n  for _, p in ipairs(lprimes) do\n    if p > limit then break end\n    local k, rem = math.modf(n \/ p)\n    if rem == 0 then\n      return false\n    end\n  end\n  table.insert(lprimes, n)\n  tprimes[n] = true\n  pfcache[n] = {[n] = 1}\n  return true\nend\n\n-- ensure all primes through limit are cached in tprimes\/lprimes\nlocal function cache_primes_to(limit)\n  for n = lprimes[#lprimes]+2, limit, 2 do\n    try_prime(n)\n  end\nend\n\n-- return the prime factorization of a number n\nlocal function pfact(n)\n  if pfcache[n] then return fcopy(pfcache[n]) end\n  local limit = math.sqrt(n)\n  cache_primes_to(limit)\n  for _, p in ipairs(lprimes) do\n    if p > limit then break end\n    local k, rem = math.modf(n \/ p)\n    if rem == 0 then\n      local f = pfact(k)\n      f[p] = (f[p] or 0) + 1\n      pfcache[n] = fcopy(f)\n      return f\n    end\n  end\n  pfcache[n] = {[n] = 1}\n  return {[n] = 1}\nend\n\nlocal function zero_to_nil(n)\n  if n == 0 then return nil else return n end\nend\n\n-- simplify a numerator and denominator prime factorization in place\nlocal function fsimplify(nf, df)\n  for p, n in pairs(nf) do\n    if df[p] then\n      local common = math.min(n, df[p])\n      nf[p], df[p] = zero_to_nil(nf[p] - common), zero_to_nil(df[p] - common)\n    end\n  end\nend\n\n-- return the product of 2 prime factorizations as a prime factorization\nlocal function fprod(f1, f2)\n  local res, f2rem = {}, fcopy(f2)\n  for p, n in pairs(f1) do\n    if f2[p] then\n      res[p] = f2[p] + n\n      f2rem[p] = nil\n    else\n      res[p] = n\n    end\n  end\n  for p, n in pairs(f2rem) do\n    res[p] = n\n  end\n  return res\nend\n\n-- expand prime factorization f into a number\nlocal function fexpand(f)\n  local res = 1\n  for p, n in pairs(f) do\n    res = res * p^n\n  end\n  return math.floor(res)\nend\n\n-- incorporate prime factorization f into the prime factorization of common denominator fcommon\nlocal function finclude(fcommon, f)\n  for p, n in pairs(f) do\n    fcommon[p] = math.max((fcommon[p] or 0), n)\n  end\nend\n\nfunction solution.convert_frac(lst)\n  local fcommon = {} -- prime factorization of common denominator\n  local f_lst = {}\n  for _, e in ipairs(lst) do\n    local nf, df = pfact(e[1]), pfact(e[2])\n    fsimplify(nf,df)\n    finclude(fcommon, df)\n    table.insert(f_lst, {nf, df})\n  end\n  local dn = fexpand(fcommon)\n  local res = {}\n  for _, f in ipairs(f_lst) do\n    -- Figure out what we need to multiply numerator\/denominator by\n    local fcommon_rem = fcopy(fcommon)\n    local df_rem = fcopy(f[2])\n    fsimplify(fcommon_rem, df_rem)\n    local nf = fprod(f[1], fcommon_rem)\n    table.insert(res, {fexpand(nf), dn})\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209681,"user_id":null,"body":"local solution = {}\n\nfunction solution.convert_frac(l)\n  local function gcd(a, b) return b==0 and a or gcd(b,a%b) end\n  local function lcd(a, b) return (a*b) \/ gcd(a, b) end\n  local d=1\n  for i=1, #l do\n    local c = gcd( l[i][1], l[i][2] )\n    l[i] = { l[i][1]\/\/c, l[i][2]\/\/c }\n    d = lcd( d, l[i][2] )\n  end\n  for i=1, #l do l[i] = { d*l[i][1]\/\/l[i][2], d } end\n  return l\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209682,"user_id":null,"body":"local solution = {}\n\nfunction solution.convert_frac(l)\n  if #l<2 then return l end\n  \n  local function gcd(a, b) return b==0 and a or gcd(b,a%b) end\n  local function lcd(a, b) return (a*b) \/ gcd(a, b) end\n  local f = math.floor\n  \n  local d = 1\n  for i=1, #l do\n    local c = gcd( l[i][1], l[i][2] )\n    l[i] = { l[i][1]\/c, l[i][2]\/c }\n    d = lcd( d, l[i][2] )\n  end\n  \n  for i=1, #l do\n     l[i] = { f( d*l[i][1]\/l[i][2] ), f(d) }\n  end\n  \n  return l\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209683,"user_id":null,"body":"local solution = {}\n\nfunction solution.convert_frac(l)\n  if #l<2 then return l end\n  \n  local function gcd(a, b) return b==0 and a or gcd(b,a%b) end\n  local function lcd(a, b) return (a*b) \/ gcd(a, b) end\n  local f = math.floor\n  \n  for i=1, #l do\n    local c = gcd( l[i][1], l[i][2] )\n    l[i] = { l[i][1]\/c, l[i][2]\/c }\n  end\n  \n  local d = l[1][2]\n  for i=2, #l do\n     d = lcd( d, l[i][2] )\n  end\n  \n  for i=1, #l do\n     l[i] = { f( d*l[i][1]\/l[i][2] ), f(d) }\n  end\n  \n  return l\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209684,"user_id":null,"body":"local solution = {}\n\nlocal function cloneTable (t)\n  local clone = {}\n  for k,v in pairs(t) do\n    if type(v) == \"table\" then\n        clone[k] = cloneTable(v)\n    else\n        clone[k] = v\n    end\n  end\n  return clone\nend\n\nlocal function merge (t1, t2)\n  -- input 2 tables where {value = count}\n  -- return a new table where t[k] = t1[k] + t2[k]\n  \n  local t = cloneTable(t2)\n  for k,v in pairs(t1) do\n    t[k] = (t[k] or 0) + v\n  end\n  return t\nend\n\nlocal function factor (n)\n  -- return table {primefactor = exponent, ...}\n  \n  local primes = {}\n  local isPrime = true\n\n  for i=2, math.sqrt(n) do\n    if n%i == 0 then\n      primes = merge(factor(i), primes)\n      primes = merge(factor(n\/i), primes)\n      isPrime = false\n      break\n    end\n  end\n\n  if isPrime then\n    primes = merge({[n] = 1}, primes) -- prime\n  end\n\n  return primes\nend\n\nlocal function simplify (a, b)\n    -- convert fraction a\/b to equivalent fraction with smallest denominator\n  \n    local aFactors = factor(a)\n    local bFactors = factor(b)\n    for f, aExponent in pairs(aFactors) do\n        local bExponent = bFactors[f]\n        if bExponent then\n            local n = math.min(aExponent, bExponent)\n            local common = f^n\n            a = a \/ common\n            b = b \/ common\n        end\n    end\n    return a,b\nend\n\nfunction solution.convert_frac(lst)\n    -- input table {{a1, b1}, ...} representing fractions a1\/b1 ...\n    -- return table of same format, but fractions have common denominator\n  \n    lst = cloneTable(lst)\n  \n    -- find unique factors of all denominators\n    local factors = {}\n    for i = 1, #lst do\n        lst[i][1], lst[i][2] = simplify(lst[i][1], lst[i][2])\n        local denominatorFactors = factor(lst[i][2])\n        for fctr, xpnt in pairs(denominatorFactors) do\n            factors[fctr] = math.max(xpnt, factors[fctr] or 0)\n        end\n    end\n  \n    -- multiply factors to find smallest commmon denominator\n    local denominator = 1\n    for f,x in pairs(factors) do\n        denominator = denominator * (f ^ x)\n    end\n  \n    -- convert fractions to new denominator\n    for i = 1, #lst do\n        lst[i][1] = math.floor( lst[i][1] * (denominator \/ lst[i][2]) )\n        lst[i][2] = math.floor( denominator )\n    end\n  \n    return lst\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209685,"user_id":null,"body":"local solution = {}\n\nfunction _gcd(a, b)\n  if a < b then\n    c = a\n    a = b\n    b = c    \n  end\n  if(a % b == 0) then\n    return b\n  else\n    return _gcd(b, a%b);\n  end\nend\nfunction solution.convert_frac(lst)\n  -- your code\n  lcm = 1\n  for i = 1 , #lst do\n    gd = _gcd(lst[i][1], lst[i][2])\n    lst[i][1] = lst[i][1] \/\/ gd\n    lst[i][2] = lst[i][2] \/\/ gd\n    lcm = (lst[i][2] * lcm) \/\/ _gcd(lcm, lst[i][2])\n  end\n  ret = {}\n  for i = 1, #lst do\n    add = lcm \/\/ lst[i][2]\n    table.insert(ret, {lst[i][1] * add, lcm})\n  end\n  return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"550498447451fbbd7600041c":[{"id":209686,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  -- your code\n  if a and b and #a == #b then\n      local t = 0\n      local t2 = {}\n      for _,v in pairs(a) do\n        local sq = tonumber(v*v)\n        for k, v2 in pairs(b) do\n          if sq == v2 and not t2[k] then\n            t = t + 1\n            t2[k] = 1\n            break\n          end\n        end\n      end\n      if t == #a and #t2 == #b then\n        return true\n      end\n  end\n  return false\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209687,"user_id":492,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  function table.clone(a)\n    return {table.unpack(a)}\n  end\n  if a == nil or b == nil then return false end\n  local lena, lenb = #a, #b\n  if lena ~= lenb then return false end\n  if lena == 0 and lenb == 0 then return true end\n  local result = true\n  local aa = table.clone(a)\n  local bb = table.clone(b)\n  for i = 1, lena do \n    aa[i] = aa[i] * aa[i]\n  end\n  table.sort(aa)\n  table.sort(bb)\n  for i = 1, lena do \n    if aa[i] ~= bb[i] then return false end\n  end\n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209688,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n    if a == nil or b == nil or (#a~=#b) then return false end\n    for i = 1, #a do \n        a[i] = a[i]*a[i]\n    end\n    table.sort(a, function(a, b) return a < b end)\n    table.sort(b, function(a, b) return a < b end)\n    local result = true\n    for i = 1, #b do\n        if a[i] ~= b[i] then\n            return false\n        end\n    end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209689,"user_id":53,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  -- if a == nil and b == nil then return true end\n  if a == nil or b == nil then return false end\n  if #a ~= #b then return false end\n  local a2 = {}\n  for _, n in ipairs(a) do\n     a2[#a2+1] = n * n\n  end\n  table.sort(a2)\n  table.sort(b)\n  for i = 1, #a do\n    if a2[i] ~= b[i] then return false end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209690,"user_id":null,"body":"local solution = {}\nlocal cat = table.concat\nfunction solution.comp_same(a, b)\n  \n  if not (a and b) then return false end \n\n  local set = {} for _ , v in ipairs(b) do set[v] = (set[v] or 0) + 1 end \n  \n  for _, v in ipairs(a) do \n     local vv = v *v\n     if not set[vv] or set[vv] == 0 then return false end\n     set[vv] = set[vv] - 1\n  end \n  \n  for _ , count in pairs(set) do if count > 0 then return false end end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209691,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  if type(a) == type(b) and type(a) == \"table\" and #a == #b then\n    for i,v in ipairs(a) do a[i] = math.abs(v) end\n    table.sort(a)\n    table.sort(b)\n    for i=1,#a do\n      if a[i]*a[i] ~= b[i] then return false end\n    end\n    return true\n  else\n    return false\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209692,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  -- your code\n  if a and b and #a == #b then\n      -- for first array check\n      local t = 0\n      -- check all key used in second array\n      local t2 = {}\n      for _,v in pairs(a) do\n        local x = tonumber(v*v)\n        for k, v2 in pairs(b) do\n          if x == v2 and not t2[k] then\n            t = t + 1\n            t2[k] = 1\n            break\n          end\n        end\n      end\n      if t == #a and #t2 == #b then\n        return true\n      end\n  end\n  return false\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209693,"user_id":null,"body":"local solution = {}\n\n-- linear time\nfunction solution.comp_same(a, b)\n    if not(a and b) then return false end\n    if #a ~= #b then return false end\n\n    local checkA, checkB = {}, {}\n    for _, v in ipairs(a) do\n        v = math.floor(v^2) -- shadow\n        if checkA[v] then\n            checkA[v] = checkA[v] + 1\n        else\n            checkA[v] = 1\n        end\n    end\n    for _, v in ipairs(b) do\n        if checkB[v] then\n            checkB[v] = checkB[v] + 1\n        else\n            checkB[v] = 1\n        end\n    end\n\n    local flag = true\n    for _, v in ipairs(b) do\n        flag = flag and (checkB[v] == checkA[v])\n    end\n    return flag\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209694,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  local count = {}\n  -- it is quite stupid having to check for nils here, but somehow it was added to the requirements:\n  if not a or not b then\n    return false\n  end\n\n  -- we store the number of times the square of a number of \u00aba\u00bb appears\n  for _, v in ipairs(a) do\n    count[v*v] = (count[v*v] or 0) + 1\n  end\n\n  -- and here we do the same, this time from b and in reverse order, deleting whenever we reach 0:\n  for _, v in ipairs(b) do\n    local c = count[v] or 0\n    if c == 1 then\n      count[v] = nil\n    else\n      count[v] = c-1\n    end\n  end\n  -- return true iff empty, aka: if they match\n  return not next(count)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209695,"user_id":null,"body":"local solution = {}\n\nfunction solution.comp_same(a, b)\n  \n  if not a or not b or #a < #b then\n    return false\n  end\n  \n  local orderfunc = function(a,b) return math.abs(a) > math.abs(b) end\n  \n  table.sort(a, orderfunc)\n  table.sort(b, orderfunc)\n  \n  for i, v in pairs(a) do\n    if v*v ~= b[i] then\n      return false\n    end\n  end\n  \n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"559a28007caad2ac4e000083":[{"id":209696,"user_id":492,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local a, b, sum = 0, 1, 0;\n  for i = 0, n do\n    a, b, sum = b, a + b, sum + b\n  end\n  return 4 * sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209697,"user_id":168,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local a, b = 1, 1\n  for i = 0, n do\n    a, b = b, a + b    \n  end\n  return 4 * (b - 1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209698,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local sum = 0; local prev = 0; local cur = 1\n  for i = 1, n+1 do sum = sum + cur; prev, cur = cur, cur + prev end\n  return 4 * sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209699,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local function sum_of_first_n_fibonacci(n)\n    return fibonacci(n + 2) - 1\n  end\n\n  return 4 * sum_of_first_n_fibonacci(n + 1) \nend\n\nfunction fibonacci(n)\n  local a, b = 0, 1\n  \n  for i = 1, n do\n    a, b = b, a + b\n  end\n  \n  return a\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209700,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  a, b, s = 0, 1, 0\n  for i = 0, n do\n    a, b, s = b, a + b, s + b\n  end\n  return s * 4\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209701,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local j, k, sum = 1, 1, 2\n  for i = 1, n - 1 do\n    local f = j + k\n    j = k\n    k = f\n    sum = sum + f\n  end\n  return sum * 4\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209702,"user_id":null,"body":"return {perimeter = function(n)\n\tlocal x, y, s = 0, 1, 0\n\tfor i = 0, n do\n\t\tx, y, s = y, x+y, s+y\n\tend\n\treturn s*4\nend}","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209703,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local a, b, s = 0, 1, 0;\n  for i = 0, n do\n    a, b, s = b, a + b, s + b\n  end\n  return 4 * s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209704,"user_id":null,"body":"local solution = {}\n\nfunction fibb(n)\n  local a = {1, 1}\n  if n <= 2 then\n    return {table.unpack(a, 1, n)}\n  end\n  for i = 3, n do\n    a[#a + 1] = a[#a - 1] + a[#a]\n  end\n  return a\nend\n\nfunction tablesum(t)\n  local sum = 0\n  for _, value in ipairs(t) do\n    sum = sum + value\n  end\n  return sum\nend\n\nfunction solution.perimeter(n)\n  return 4*tablesum(fibb(n+1))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209705,"user_id":null,"body":"local solution = {}\n\nfunction solution.perimeter(n)\n  local a,b,c,total\n  b = 1\n  a = 1\n  total = 2\n  if(n == 0) then \n    return 0\n    end\n  if(n == 1) then\n    return 8\n    end\n  for i=1,(n-1) do\n    c = a+b\n    total = total + c\n    b = a\n    a = c\n  end \n  return total*4\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55a2d7ebe362935a210000b2":[{"id":209706,"user_id":null,"body":"local kata = {}\n\nfunction kata.find_smallest_int(t)\n  return math.min(table.unpack(t))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209707,"user_id":null,"body":"return function(t)\n  table.sort(t)\n  return t[1]\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209708,"user_id":null,"body":"return function(t)\n  table.sort(t, function(a,b)\n      return b > a\n  end)\n  return t[1]\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209709,"user_id":null,"body":"return function(t)\n  local o_last = 99999999\n  for i = 1, #t do\n    if o_last > t[i] then\n      o_last = t[i]\n    end\n  end\n  return o_last\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209710,"user_id":null,"body":"return function( t )\n    return table.remove( t, 1, table.sort( t ) )\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209711,"user_id":null,"body":"return function(t)\n  local min = t[1]\n  for _, v in ipairs(t) do\n    if v < min then\n      min = v\n    end\n  end\n  return min --minimum here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209712,"user_id":null,"body":"return function(t)\n    smallest = Nil\n    for _,x in ipairs(t) do\n      if not smallest or x < smallest then\n        smallest = x\n      end\n    end\n    \n    return smallest\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209713,"user_id":null,"body":"return function(t)\n  local res = nil\n  for _,v in ipairs(t) do\n    res = (res == nil or v < res) and v or res\n  end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209714,"user_id":null,"body":"return function(t)\n    small = t[1]\n    for i, v in ipairs(t) do\n        if small > v then\n            small = v\n        end\n    end\n    return small\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209715,"user_id":null,"body":"return function(t)\n  local minInt = math.maxinteger\n  \n  for i = 1, #t do\n    if t[i] < minInt then\n    minInt = t[i]\n    end\n  end\n  \n  return minInt\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563b662a59afc2b5120000c6":[{"id":209716,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  c = 0\n  while p0 < p do\n    p0 = math.floor(p0 * (percent * 0.01 + 1) + aug)\n    c = c + 1 end\n  return c\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209717,"user_id":681,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n    local year = 0;\n    while p0 < p do\n        year = year + 1\n        p0 = p0 + math.floor(p0 * (percent \/ 100)) + aug\n    end\n    return year\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209718,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  local Percentage = percent \/ 100 + 1\n  local Answer = 1\n  local Inhabitants = p0\n  for i = 1, math.huge do\n    Inhabitants = Inhabitants * Percentage + aug\n    Inhabitants = math.floor(Inhabitants)\n    print(Inhabitants, p)\n    if Inhabitants > p then\n      return Answer\n    end\n    Answer = Answer + 1\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209719,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  local pn = p0\n  local i = 0\n  local scale = 1.0 + percent \/ 100.0\n  while pn < p do\n    pn = math.floor(pn * scale + aug)\n    i = i + 1\n  end\n  return i\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209720,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  -- code here\n  local y=0\n  while p0<p do\n    p0=math.floor(p0*(100+percent)\/100) + aug\n    y=y+1\n  end\n  return y\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209721,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  local ap = percent\/100\n  local yrs = 0\n  local cp = p0\n  local g = p + 1\n\n  while g > cp do\n    cp = cp + cp * ap + aug\n    yrs = yrs + 1\n  end\n  \n  return yrs\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209722,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  local years = 0\n  \n  percent = percent * 0.01\n  \n  repeat\n    p0 = p0 + (math.floor(p0 * percent)) + aug\n    years = years + 1\n  until p0 >= p\n  \n  return years\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209723,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)  \n  local i = 0\n  local function populations()\n    p0 = math.floor(p0 * (1+percent\/100) + aug)\n    i = i + 1\n    return i, p0\n  end\n  for year, population in populations do\n    if population > p then\n      return year\n    end\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209724,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  -- code here\n  \tcount = 0\n  print(p0..\" \"..percent..\" \"..aug..\" \"..p)\n    while p0<=p+1 do\n\t\tp0 = p0 + (p0*percent)\/100 + aug\n\t\tcount = count +1\n\tend\n\treturn count\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209725,"user_id":null,"body":"local kata = {}\n\nfunction kata.nb_year(p0, percent, aug, p)\n  pop = p0\n  count = 0\n  while (pop < p) do\n    pop = math.floor(pop + pop*(percent\/100) + aug)\n    count = count + 1\n  end\n  \n  return count\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"566543703c72200f0b0000c9":[{"id":209726,"user_id":null,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n  local dt, r0, imax = tm\/n, 0, i0\n  for i = 1, n do\n    local x, y = s0*i0*b*dt, i0*a*dt\n    s0, i0, r0 = s0-x, i0+x-y, r0+y\n    imax = math.max(i0, imax) \n  end\n  return imax\/\/1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209727,"user_id":168,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n  local dt = tm \/ n\n  local s, i, r = s0, i0, 0\n  for k = 0, n do\n    local i1 = i + dt * (b * s * i - a * i)\n    s = s - dt * b * s * i\n    r = r + dt * i * a\n    if i1 < i then break end\n    i = i1\n  end\n  return math.floor(i + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209728,"user_id":53,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n    local m, k, dt, s, i, r = 0, 0.0, tm \/ n, s0, i0, 0\n    while (m < n) do\n        local j = i\n        r = r + j * a * dt\n        i = j + dt * (b * s * j - a * j)\n        s = s - dt * b * s * j\n        k = math.max(k, i)\n        m = m + 1\n    end\n    return math.floor(k)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209729,"user_id":198,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n  local S, I, R = {s0},{i0},{0}\n  local dt = tm\/n\n  for i = 1, n do\n    S[i+1] = S[i] - dt * b * S[i] * I[i]\n    I[i+1] = I[i] + dt * (b * S[i] * I[i] - a * I[i])\n    R[i+1] = R[i] + dt * I[i] *a\n  end\n  return math.max(table.unpack(I))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209730,"user_id":null,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n    local dt = tm\/n\n    local s = {}\n    s[0] = s0\n    local i = {}\n    i[0] = i0\n    local result = -1\n    repeat \n        result = result + 1\n        s[result+1] = s[result] - dt*b*s[result]*i[result]\n        i[result+1] = i[result] + dt*(b*s[result]*i[result]-a*i[result])\n    until i[result+1] <= i[result]\n    return i[result]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209731,"user_id":null,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n    dt = tm\/n\n    s1, i1, r1 = s0, i0, 0\n    s2, i2, r2 = s0, i0, 0\n    while i2 >= i1 do\n        s1, i1, r1 = s2, i2, r2\n        s2 = s1 - dt*b*s1*i1\n        i2 = i1 + dt*(b*s1 - a)*i1\n        r2 = r1 + dt*i1*a\n    end\n    return i1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209732,"user_id":492,"body":"local solution = {}\n\nfunction solution.epidemic(tm, n, s0, i0, b, a)\n    local maxI, dt = 0.0, tm \/ n\n    local s, i, r = s0, i0, 0\n    local ind = 0\n    while (ind < n) do\n        local currI = i\n        r = r + currI * a * dt\n        i = currI + dt * (b * s * currI - a * currI)\n        s = s - dt * b * s * currI\n        maxI = math.max(maxI, i)\n        ind = ind + 1\n    end\n    return math.floor(maxI)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5667e8f4e3f572a8f2000039":[{"id":209733,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n    local result = {}\n    for c in s:gmatch(\".\") do\n        local n = #result + 1\n        result[n] = c:upper() .. string.rep(c:lower(), n-1)\n    end\n    return table.concat(result, \"-\")\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209734,"user_id":492,"body":"local solution = {}\n\nfunction solution.accum(s)\n    local res, j = \"\", 1\n    for ch in string.gmatch(s, \".\") do\n        local c = string.lower(ch)\n        if #res ~= 0 then res = res .. \"-\" end\n        res = res .. string.upper(c) .. string.rep(c, j - 1)\n        j = j + 1\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209735,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n  local res ={} \n  for i=1, #s do\n    local char = s:sub(i,i)\n    table.insert(res, string.upper(char) .. string.rep(string.lower(char), i - 1))\n  end\n  return table.concat(res, '-')\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209736,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n  local tbl = {}\n  for i=1,#s do\n    tbl[#tbl+1] = capitalize(string.rep(s:sub(i,i), i))\n  end\n  return table.concat(tbl, '-')\nend\n\nfunction capitalize(w)\n  local ret = \"\"\n  for i=1,#w do\n    ret = ret .. (i==1 and string.upper(w:sub(1,1)) or string.lower(w:sub(i,i)))\n  end\n  return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209737,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n    local res = \"\"\n    for i=1,#s do\n        local temp = s:sub(i,i) \n        res=res..string.upper( temp )..string.rep( string.lower( temp ), i-1 )..\"-\"\n    end\n    return res:sub(1,#res-1)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209738,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n    local i = -1\n    return s:gsub('.', function(s) i=i+1 return '-'..s:upper()..s:lower():rep(i) end):sub(2)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209739,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n    result = ''\n    for i = 1 , #s do\n      result = result..string.upper(s:sub(i,i))..string.rep( string.lower(s:sub(i,i)), i-1 )..'-'\n    end\n    return result:sub(1,#result-1)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209740,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n  local sol = ''\n  for i = 1, s:len() do\n    local char = s:sub(i,i)\n    char = char:upper() .. char:lower():rep(i-1) .. '-'\n    sol = sol .. char\n  end\n    return sol:sub(1,#sol-1)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209741,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n  s = s:lower()\n  local res = {}\n  \n  for i = 1, #s do\n    local char = s:sub(i,i):lower()\n    res[i] = char:upper() .. string.rep(char, i-1)\n  end\n  \n  return table.concat(res, \"-\")\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209742,"user_id":null,"body":"local solution = {}\n\nfunction solution.accum(s)\n  s = s:lower()\n  local res = \"\"\n  \n  for i = 1, #s do\n    local code = string.byte(s:sub(i,i))\n    res = res .. string.char(code-32) -- uppercase\n    for j = 1, i-1 do res = res .. string.char(code) end\n    res = res .. \"-\"\n  end\n  \n  return res:sub(1, -2)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"566be96bb3174e155300001b":[{"id":209743,"user_id":527,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  return math.floor(v0 \/ 3.5316 + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209744,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  -- ----- Deduction -----\n  --    h = v*t - 0.5*g*t^2\n  -- => h' = v - gt\n  --    (when derivative h' is 0, h is maximum)\n  -- => 0 = v - gt\n  -- => t = v \/ g\n  \n  -- ----- Unreduced Solution -----\n  -- v0 = v0 * 1000 \/ 3600\n  -- local t = v0 \/ 9.81\n  -- return math.floor(t*10 + 0.5)\n  \n  -- ----- Reduced Solution -----\n  return math.floor(v0*0.2831577755125156 + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209745,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  v0 = KmToMs(v0)\n  local g = 9.81\n  local hn1 = 0\n  local tn1 = 0\n  local hn = 0\n  local tn = 0\n  while true do\n    if hn >= hn1 then\n      hn1 = hn\n      tn1 = tn\n      tn = tn + 1\n      hn = v0 * (tn\/10) - 0.5 * 9.81 *(tn\/10) * (tn\/10)\n    else \n      break\n    end\n  end\n  return tn1\nend\n\nfunction KmToMs(km)\n  return km\/3.6\nend\n\nfunction MsToKm(ms)\n  return ms*3.6\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209746,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  \n  local v = v0 * 1000 \/ 3600\n  local g = 9.81\n  local h, max, i = 0, 0, 0\n  \n  while h >= max do\n    i = i + 1\n    h = v * i \/ 10 - 0.5 * g * i \/ 10 * i \/ 10\n    \n    max = math.max(h, max)\n  end\n  \n  return i - 1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209747,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  -- your code\n  return math.floor(v0 \/ 3.5316 + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209748,"user_id":1474,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  ret = v0 \/ 3.5316\n  if ret % 1 >= 0.5 then\n    return math.ceil(ret)\n  else\n    return math.floor(ret)\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209749,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  v = v0*1000\/3600\n  t = 0\n  d_max = -1\n  d_curr = 0\n  while d_max <= d_curr do\n    d_curr = v*t - 0.5*9.81*t*t\n    t = t + 0.1\n    if d_max < d_curr then d_max = d_curr end\n  end\n  \n  return math.floor(t*10 - 1.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209750,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  local initial_speed = v0 * 1000 \/ 3600 \n  local gravity = 9.81\n  local height = -1\n  local new_height = 0\n  local time = -1\n  \n  while height < new_height do\n    time = time + 1\n    height = new_height\n    new_height = initial_speed * (time + 1) \/ 10 - 0.5 * gravity * ((time + 1) \/ 10)^2\n  end\n  \n  return time\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209751,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  v0 = v0 * 1000 \/ 3600\n  --    h = v*t - 0.5*g*t^2\n  -- => h' = v - gt\n  --    (when derivative h' is 0, h is maximum)\n  -- => 0 = v - gt\n  -- => t = v \/ g\n  local t = v0 \/ 9.81\n  return math.floor(t*10 + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209752,"user_id":null,"body":"local solution = {}\n\nfunction solution.maxBall(v0)\n  local g = 9.81\n  v0 = v0 * 1000 \/ 3600\n  \n  local t = 0\n  local h, h_ = 0, 0\n  \n  repeat\n    t = t + 0.1\n    h_ = h\n    h = v0*t - 0.5*g*t*t\n  until h <= h_\n  return math.floor(t*10-1 + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"576757b1df89ecf5bd00073b":[{"id":209753,"user_id":null,"body":"local kata = {}\n\nfunction kata.tower_builder(floorCount)\n  local tower = { }\n  \n  for i = 1, floorCount do\n    local  air  = (' '):rep(floorCount - i)\n    local floor = ('*'):rep(2 * i - 1)\n    \n    -- add floor surrounded by air\n    tower[#tower + 1] = air .. floor .. air\n  end\n  \n  return tower\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209754,"user_id":null,"body":"function tower_builder(nFloors)\n  local table = {}\n  for i = 0,(nFloors-1),1 do\n    local odd_relation = ((2*i)+1)\n    local max_odd_relation = (2*(nFloors-1))+1\n    local star = string.rep(\"*\",odd_relation)\n    local space = max_odd_relation - odd_relation\n    table[i+1] = string.rep(\" \",(space\/2))..star.. string.rep(\" \",(space\/2))\n  end\n  return table\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209755,"user_id":null,"body":"function tower_builder(nFloors)\n  -- build here\n  local s = {}\n  for i = 1,nFloors do\n    s[i] = string.rep(\" \",nFloors-i) .. string.rep(\"*\",i*2-1) .. string.rep(\" \",nFloors-i)\n  end\n  return s\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209756,"user_id":null,"body":"function tower_builder(n)\n      local r = {}\n      for  i=0,n-1 do\n        local s = string.rep(\" \", (2 * n - 1) \/\/ 2 - i)\n        r[i+1] = s .. string.rep('*', 2 * i + 1) .. s\n      end\n      return r\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209757,"user_id":null,"body":"function tower_builder(nFloors)\n  local res = {}\n  for i = 1, nFloors do\n    res[i] = (' '):rep(nFloors-i) .. ('*'):rep(2*i-1) .. (' '):rep(nFloors-i)\n  end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209758,"user_id":null,"body":"function tower_builder(nFloors)\n  \n  local tower = {}\n  local currFloor = \"\"\n  \n  for floor=1,nFloors do -- for each floor\n    \n    for pref=1,nFloors-floor do -- space prefix\n      currFloor = currFloor..\" \"\n    end\n    \n    for star=1,(- 1 + (floor * 2)) do -- stars\n      currFloor = currFloor..\"*\"\n    end\n    \n    for suff=1,nFloors-floor do -- space suffix\n      currFloor = currFloor..\" \"\n    end\n    \n    tower[floor] = currFloor\n    currFloor = \"\"\n    \n  end\n  \n  return tower\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209759,"user_id":null,"body":"function tower_builder(nFloors)\n  local pattern = {}\n  local range = 2*nFloors-1\n  for i=1, range do\n    table.insert(pattern, ' ')\n  end\n  local floors = {}\n  local left, right = nFloors, nFloors\n  for i=1, nFloors do\n    pattern[left] = '*'\n    pattern[right] = '*'\n    floors[i] = table.concat(pattern, '')\n    left = left - 1\n    right = right + 1\n  end\n  return floors\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209760,"user_id":null,"body":"local lume\npackage.preload[\"lume\"] = package.preload[\"lume\"] or function(...)\n  --\n  -- lume\n  --\n  -- Copyright (c) 2020 rxi\n  --\n  -- Permission is hereby granted, free of charge, to any person obtaining a copy of\n  -- this software and associated documentation files (the \"Software\"), to deal in\n  -- the Software without restriction, including without limitation the rights to\n  -- use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies\n  -- of the Software, and to permit persons to whom the Software is furnished to do\n  -- so, subject to the following conditions:\n  --\n  -- The above copyright notice and this permission notice shall be included in all\n  -- copies or substantial portions of the Software.\n  --\n  -- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  -- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  -- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  -- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  -- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  -- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  -- SOFTWARE.\n  --\n  \n  local lume = { _version = \"2.3.0\" }\n  \n  local pairs, ipairs = pairs, ipairs\n  local type, assert, unpack = type, assert, unpack or table.unpack\n  local tostring, tonumber = tostring, tonumber\n  local math_floor = math.floor\n  local math_ceil = math.ceil\n  local math_atan2 = math.atan2 or math.atan\n  local math_sqrt = math.sqrt\n  local math_abs = math.abs\n  \n  local noop = function()\n  end\n  \n  local identity = function(x)\n    return x\n  end\n  \n  local patternescape = function(str)\n    return str:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\", \"%%%1\")\n  end\n  \n  local absindex = function(len, i)\n    return i < 0 and (len + i + 1) or i\n  end\n  \n  local iscallable = function(x)\n    if type(x) == \"function\" then return true end\n    local mt = getmetatable(x)\n    return mt and mt.__call ~= nil\n  end\n  \n  local getiter = function(x)\n    if lume.isarray(x) then\n      return ipairs\n    elseif type(x) == \"table\" then\n      return pairs\n    end\n    error(\"expected table\", 3)\n  end\n  \n  local iteratee = function(x)\n    if x == nil then return identity end\n    if iscallable(x) then return x end\n    if type(x) == \"table\" then\n      return function(z)\n        for k, v in pairs(x) do\n          if z[k] ~= v then return false end\n        end\n        return true\n      end\n    end\n    return function(z) return z[x] end\n  end\n  \n  \n  \n  function lume.clamp(x, min, max)\n    return x < min and min or (x > max and max or x)\n  end\n  \n  \n  function lume.round(x, increment)\n    if increment then return lume.round(x \/ increment) * increment end\n    return x >= 0 and math_floor(x + .5) or math_ceil(x - .5)\n  end\n  \n  \n  function lume.sign(x)\n    return x < 0 and -1 or 1\n  end\n  \n  \n  function lume.lerp(a, b, amount)\n    return a + (b - a) * lume.clamp(amount, 0, 1)\n  end\n  \n  \n  function lume.smooth(a, b, amount)\n    local t = lume.clamp(amount, 0, 1)\n    local m = t * t * (3 - 2 * t)\n    return a + (b - a) * m\n  end\n  \n  \n  function lume.pingpong(x)\n    return 1 - math_abs(1 - x % 2)\n  end\n  \n  \n  function lume.distance(x1, y1, x2, y2, squared)\n    local dx = x1 - x2\n    local dy = y1 - y2\n    local s = dx * dx + dy * dy\n    return squared and s or math_sqrt(s)\n  end\n  \n  \n  function lume.angle(x1, y1, x2, y2)\n    return math_atan2(y2 - y1, x2 - x1)\n  end\n  \n  \n  function lume.vector(angle, magnitude)\n    return math.cos(angle) * magnitude, math.sin(angle) * magnitude\n  end\n  \n  \n  function lume.random(a, b)\n    if not a then a, b = 0, 1 end\n    if not b then b = 0 end\n    return a + math.random() * (b - a)\n  end\n  \n  \n  function lume.randomchoice(t)\n    return t[math.random(#t)]\n  end\n  \n  \n  function lume.weightedchoice(t)\n    local sum = 0\n    for _, v in pairs(t) do\n      assert(v >= 0, \"weight value less than zero\")\n      sum = sum + v\n    end\n    assert(sum ~= 0, \"all weights are zero\")\n    local rnd = lume.random(sum)\n    for k, v in pairs(t) do\n      if rnd < v then return k end\n      rnd = rnd - v\n    end\n  end\n  \n  \n  function lume.isarray(x)\n    return type(x) == \"table\" and x[1] ~= nil\n  end\n  \n  \n  function lume.push(t, ...)\n    local n = select(\"#\", ...)\n    for i = 1, n do\n      t[#t + 1] = select(i, ...)\n    end\n    return ...\n  end\n  \n  \n  function lume.remove(t, x)\n    local iter = getiter(t)\n    for i, v in iter(t) do\n      if v == x then\n        if lume.isarray(t) then\n          table.remove(t, i)\n          break\n        else\n          t[i] = nil\n          break\n        end\n      end\n    end\n    return x\n  end\n  \n  \n  function lume.clear(t)\n    local iter = getiter(t)\n    for k in iter(t) do\n      t[k] = nil\n    end\n    return t\n  end\n  \n  \n  function lume.extend(t, ...)\n    for i = 1, select(\"#\", ...) do\n      local x = select(i, ...)\n      if x then\n        for k, v in pairs(x) do\n          t[k] = v\n        end\n      end\n    end\n    return t\n  end\n  \n  \n  function lume.shuffle(t)\n    local rtn = {}\n    for i = 1, #t do\n      local r = math.random(i)\n      if r ~= i then\n        rtn[i] = rtn[r]\n      end\n      rtn[r] = t[i]\n    end\n    return rtn\n  end\n  \n  \n  function lume.sort(t, comp)\n    local rtn = lume.clone(t)\n    if comp then\n      if type(comp) == \"string\" then\n        table.sort(rtn, function(a, b) return a[comp] < b[comp] end)\n      else\n        table.sort(rtn, comp)\n      end\n    else\n      table.sort(rtn)\n    end\n    return rtn\n  end\n  \n  \n  function lume.array(...)\n    local t = {}\n    for x in ... do t[#t + 1] = x end\n    return t\n  end\n  \n  \n  function lume.each(t, fn, ...)\n    local iter = getiter(t)\n    if type(fn) == \"string\" then\n      for _, v in iter(t) do v[fn](v, ...) end\n    else\n      for _, v in iter(t) do fn(v, ...) end\n    end\n    return t\n  end\n  \n  \n  function lume.map(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    for k, v in iter(t) do rtn[k] = fn(v) end\n    return rtn\n  end\n  \n  \n  function lume.all(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if not fn(v) then return false end\n    end\n    return true\n  end\n  \n  \n  function lume.any(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if fn(v) then return true end\n    end\n    return false\n  end\n  \n  \n  function lume.reduce(t, fn, first)\n    local started = first ~= nil\n    local acc = first\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if started then\n        acc = fn(acc, v)\n      else\n        acc = v\n        started = true\n      end\n    end\n    assert(started, \"reduce of an empty table with no first value\")\n    return acc\n  end\n  \n  \n  function lume.unique(t)\n    local rtn = {}\n    for k in pairs(lume.invert(t)) do\n      rtn[#rtn + 1] = k\n    end\n    return rtn\n  end\n  \n  \n  function lume.filter(t, fn, retainkeys)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    if retainkeys then\n      for k, v in iter(t) do\n        if fn(v) then rtn[k] = v end\n      end\n    else\n      for _, v in iter(t) do\n        if fn(v) then rtn[#rtn + 1] = v end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.reject(t, fn, retainkeys)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    if retainkeys then\n      for k, v in iter(t) do\n        if not fn(v) then rtn[k] = v end\n      end\n    else\n      for _, v in iter(t) do\n        if not fn(v) then rtn[#rtn + 1] = v end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.merge(...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local t = select(i, ...)\n      local iter = getiter(t)\n      for k, v in iter(t) do\n        rtn[k] = v\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.concat(...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local t = select(i, ...)\n      if t ~= nil then\n        local iter = getiter(t)\n        for _, v in iter(t) do\n          rtn[#rtn + 1] = v\n        end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.find(t, value)\n    local iter = getiter(t)\n    for k, v in iter(t) do\n      if v == value then return k end\n    end\n    return nil\n  end\n  \n  \n  function lume.match(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for k, v in iter(t) do\n      if fn(v) then return v, k end\n    end\n    return nil\n  end\n  \n  \n  function lume.count(t, fn)\n    local count = 0\n    local iter = getiter(t)\n    if fn then\n      fn = iteratee(fn)\n      for _, v in iter(t) do\n        if fn(v) then count = count + 1 end\n      end\n    else\n      if lume.isarray(t) then\n        return #t\n      end\n      for _ in iter(t) do count = count + 1 end\n    end\n    return count\n  end\n  \n  \n  function lume.slice(t, i, j)\n    i = i and absindex(#t, i) or 1\n    j = j and absindex(#t, j) or #t\n    local rtn = {}\n    for x = i < 1 and 1 or i, j > #t and #t or j do\n      rtn[#rtn + 1] = t[x]\n    end\n    return rtn\n  end\n  \n  \n  function lume.first(t, n)\n    if not n then return t[1] end\n    return lume.slice(t, 1, n)\n  end\n  \n  \n  function lume.last(t, n)\n    if not n then return t[#t] end\n    return lume.slice(t, -n, -1)\n  end\n  \n  \n  function lume.invert(t)\n    local rtn = {}\n    for k, v in pairs(t) do rtn[v] = k end\n    return rtn\n  end\n  \n  \n  function lume.pick(t, ...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local k = select(i, ...)\n      rtn[k] = t[k]\n    end\n    return rtn\n  end\n  \n  \n  function lume.keys(t)\n    local rtn = {}\n    local iter = getiter(t)\n    for k in iter(t) do rtn[#rtn + 1] = k end\n    return rtn\n  end\n  \n  \n  function lume.clone(t)\n    local rtn = {}\n    for k, v in pairs(t) do rtn[k] = v end\n    return rtn\n  end\n  \n  \n  function lume.fn(fn, ...)\n    assert(iscallable(fn), \"expected a function as the first argument\")\n    local args = { ... }\n    return function(...)\n      local a = lume.concat(args, { ... })\n      return fn(unpack(a))\n    end\n  end\n  \n  \n  function lume.once(fn, ...)\n    local f = lume.fn(fn, ...)\n    local done = false\n    return function(...)\n      if done then return end\n      done = true\n      return f(...)\n    end\n  end\n  \n  \n  local memoize_fnkey = {}\n  local memoize_nil = {}\n  \n  function lume.memoize(fn)\n    local cache = {}\n    return function(...)\n      local c = cache\n      for i = 1, select(\"#\", ...) do\n        local a = select(i, ...) or memoize_nil\n        c[a] = c[a] or {}\n        c = c[a]\n      end\n      c[memoize_fnkey] = c[memoize_fnkey] or {fn(...)}\n      return unpack(c[memoize_fnkey])\n    end\n  end\n  \n  \n  function lume.combine(...)\n    local n = select('#', ...)\n    if n == 0 then return noop end\n    if n == 1 then\n      local fn = select(1, ...)\n      if not fn then return noop end\n      assert(iscallable(fn), \"expected a function or nil\")\n      return fn\n    end\n    local funcs = {}\n    for i = 1, n do\n      local fn = select(i, ...)\n      if fn ~= nil then\n        assert(iscallable(fn), \"expected a function or nil\")\n        funcs[#funcs + 1] = fn\n      end\n    end\n    return function(...)\n      for _, f in ipairs(funcs) do f(...) end\n    end\n  end\n  \n  \n  function lume.call(fn, ...)\n    if fn then\n      return fn(...)\n    end\n  end\n  \n  \n  function lume.time(fn, ...)\n    local start = os.clock()\n    local rtn = {fn(...)}\n    return (os.clock() - start), unpack(rtn)\n  end\n  \n  \n  local lambda_cache = {}\n  \n  function lume.lambda(str)\n    if not lambda_cache[str] then\n      local args, body = str:match([[^([%w,_ ]-)%->(.-)$]])\n      assert(args and body, \"bad string lambda\")\n      local s = \"return function(\" .. args .. \")\nreturn \" .. body .. \"\nend\"\n      lambda_cache[str] = lume.dostring(s)\n    end\n    return lambda_cache[str]\n  end\n  \n  \n  local serialize\n  \n  local serialize_map = {\n    [ \"boolean\" ] = tostring,\n    [ \"nil\"     ] = tostring,\n    [ \"string\"  ] = function(v) return string.format(\"%q\", v) end,\n    [ \"number\"  ] = function(v)\n      if      v ~=  v     then return  \"0\/0\"      --  nan\n      elseif  v ==  1 \/ 0 then return  \"1\/0\"      --  inf\n      elseif  v == -1 \/ 0 then return \"-1\/0\" end  -- -inf\n      return tostring(v)\n    end,\n    [ \"table\"   ] = function(t, stk)\n      stk = stk or {}\n      if stk[t] then error(\"circular reference\") end\n      local rtn = {}\n      stk[t] = true\n      for k, v in pairs(t) do\n        rtn[#rtn + 1] = \"[\" .. serialize(k, stk) .. \"]=\" .. serialize(v, stk)\n      end\n      stk[t] = nil\n      return \"{\" .. table.concat(rtn, \",\") .. \"}\"\n    end\n  }\n  \n  setmetatable(serialize_map, {\n    __index = function(_, k) error(\"unsupported serialize type: \" .. k) end\n  })\n  \n  serialize = function(x, stk)\n    return serialize_map[type(x)](x, stk)\n  end\n  \n  function lume.serialize(x)\n    return serialize(x)\n  end\n  \n  \n  function lume.deserialize(str)\n    return lume.dostring(\"return \" .. str)\n  end\n  \n  \n  function lume.split(str, sep)\n    if not sep then\n      return lume.array(str:gmatch(\"([%S]+)\"))\n    else\n      assert(sep ~= \"\", \"empty separator\")\n      local psep = patternescape(sep)\n      return lume.array((str..sep):gmatch(\"(.-)(\"..psep..\")\"))\n    end\n  end\n  \n  \n  function lume.trim(str, chars)\n    if not chars then return str:match(\"^[%s]*(.-)[%s]*$\") end\n    chars = patternescape(chars)\n    return str:match(\"^[\" .. chars .. \"]*(.-)[\" .. chars .. \"]*$\")\n  end\n  \n  \n  function lume.wordwrap(str, limit)\n    limit = limit or 72\n    local check\n    if type(limit) == \"number\" then\n      check = function(s) return #s >= limit end\n    else\n      check = limit\n    end\n    local rtn = {}\n    local line = \"\"\n    for word, spaces in str:gmatch(\"(%S+)(%s*)\") do\n      local s = line .. word\n      if check(s) then\n        table.insert(rtn, line .. \"\n\")\n        line = word\n      else\n        line = s\n      end\n      for c in spaces:gmatch(\".\") do\n        if c == \"\n\" then\n          table.insert(rtn, line .. \"\n\")\n          line = \"\"\n        else\n          line = line .. c\n        end\n      end\n    end\n    table.insert(rtn, line)\n    return table.concat(rtn)\n  end\n  \n  \n  function lume.format(str, vars)\n    if not vars then return str end\n    local f = function(x)\n      return tostring(vars[x] or vars[tonumber(x)] or \"{\" .. x .. \"}\")\n    end\n    return (str:gsub(\"{(.-)}\", f))\n  end\n  \n  \n  function lume.trace(...)\n    local info = debug.getinfo(2, \"Sl\")\n    local t = { info.short_src .. \":\" .. info.currentline .. \":\" }\n    for i = 1, select(\"#\", ...) do\n      local x = select(i, ...)\n      if type(x) == \"number\" then\n        x = string.format(\"%g\", lume.round(x, .01))\n      end\n      t[#t + 1] = tostring(x)\n    end\n    print(table.concat(t, \" \"))\n  end\n  \n  \n  function lume.dostring(str)\n    return assert((loadstring or load)(str))()\n  end\n  \n  \n  function lume.uuid()\n    local fn = function(x)\n      local r = math.random(16) - 1\n      r = (x == \"x\") and (r + 1) or (r % 4) + 9\n      return (\"0123456789abcdef\"):sub(r, r)\n    end\n    return ((\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"):gsub(\"[xy]\", fn))\n  end\n  \n  \n  function lume.hotswap(modname)\n    local oldglobal = lume.clone(_G)\n    local updated = {}\n    local function update(old, new)\n      if updated[old] then return end\n      updated[old] = true\n      local oldmt, newmt = getmetatable(old), getmetatable(new)\n      if oldmt and newmt then update(oldmt, newmt) end\n      for k, v in pairs(new) do\n        if type(v) == \"table\" then update(old[k], v) else old[k] = v end\n      end\n    end\n    local err = nil\n    local function onerror(e)\n      for k in pairs(_G) do _G[k] = oldglobal[k] end\n      err = lume.trim(e)\n    end\n    local ok, oldmod = pcall(require, modname)\n    oldmod = ok and oldmod or nil\n    xpcall(function()\n      package.loaded[modname] = nil\n      local newmod = require(modname)\n      if type(oldmod) == \"table\" then update(oldmod, newmod) end\n      for k, v in pairs(oldglobal) do\n        if v ~= _G[k] and type(v) == \"table\" then\n          update(v, _G[k])\n          _G[k] = v\n        end\n      end\n    end, onerror)\n    package.loaded[modname] = oldmod\n    if err then return nil, err end\n    return oldmod\n  end\n  \n  \n  local ripairs_iter = function(t, i)\n    i = i - 1\n    local v = t[i]\n    if v ~= nil then\n      return i, v\n    end\n  end\n  \n  function lume.ripairs(t)\n    return ripairs_iter, t, (#t + 1)\n  end\n  \n  \n  function lume.color(str, mul)\n    mul = mul or 1\n    local r, g, b, a\n    r, g, b = str:match(\"#(%x%x)(%x%x)(%x%x)\")\n    if r then\n      r = tonumber(r, 16) \/ 0xff\n      g = tonumber(g, 16) \/ 0xff\n      b = tonumber(b, 16) \/ 0xff\n      a = 1\n    elseif str:match(\"rgba?%s*%([%d%s%.,]+%)\") then\n      local f = str:gmatch(\"[%d.]+\")\n      r = (f() or 0) \/ 0xff\n      g = (f() or 0) \/ 0xff\n      b = (f() or 0) \/ 0xff\n      a = f() or 1\n    else\n      error((\"bad color string '%s'\"):format(str))\n    end\n    return r * mul, g * mul, b * mul, a * mul\n  end\n  \n  \n  local chain_mt = {}\n  chain_mt.__index = lume.map(lume.filter(lume, iscallable, true),\n    function(fn)\n      return function(self, ...)\n        self._value = fn(self._value, ...)\n        return self\n      end\n    end)\n  chain_mt.__index.result = function(x) return x._value end\n  \n  function lume.chain(value)\n    return setmetatable({ _value = value }, chain_mt)\n  end\n  \n  setmetatable(lume,  {\n    __call = function(_, ...)\n      return lume.chain(...)\n    end\n  })\n  \n  \n  return lume\nend\nlume = require(\"lume\")\nlocal function tbs(n)\n  local _1_ = n\n  if (_1_ == 1) then\n    return {\"*\"}\n  elseif (nil ~= _1_) then\n    local n0 = _1_\n    local t0 = tbs((n0 - 1))\n    local function _2_(x)\n      return (\" \" .. (x .. \" \"))\n    end\n    return lume.concat(lume.map(t0, _2_), {(\"*\" .. (lume.last(t0) .. \"*\"))})\n  else\n    return nil\n  end\nend\n_G[\"tower_builder\"] = tbs\nreturn nil\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209761,"user_id":null,"body":"function tower_builder(nFloors)\n  width = nFloors * 2 - 1\n  res = {}\n  \n  for i = 1, nFloors do\n    msg = {}; for j = 1, width do msg[j] = \"*\" end\n    for j = 1, nFloors-i do\n      msg[j] = \" \"; msg[width+1-j] = \" \";\n    end\n    res[i] = table.concat(msg)\n  end\n  \n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209762,"user_id":null,"body":"function tower_builder(nFloors)\n  local width = 2*nFloors - 1\n  local actualFloor = 1\n  local nbStars = 1\n  local floors = {}\n  while actualFloor ~= nFloors+1 do\n    table.insert(floors, string.rep(\" \",(width-nbStars)\/2)..string.rep(\"*\",nbStars)..string.rep(\" \",(width-nbStars)\/2))\n    nbStars = nbStars + 2\n    actualFloor = actualFloor + 1\n  end\n  return floors\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5ca4f5194674b10001dae176":[{"id":209763,"user_id":106,"body":"function doSomething(xs)\n  local u = {}\n  for k,v in pairs(xs) do u[k]=v+1 end\n  return table.concat(u, ',')\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209764,"user_id":null,"body":"function doSomething(input)\n  result = \"\"\n  for i=1,#input do\n    result = result .. tostring(input[i]+1) .. \",\"\n  end\n  return result:sub(0,#result-1)\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209765,"user_id":575,"body":"function doSomething(input)\n  local arr = {}\n  for i, v in ipairs(input) do\n    arr[i] = v + 1\n  end\n  return table.concat(arr, \",\")\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209766,"user_id":1121,"body":"function doSomething(input)\n  result = \"\"\n  for i=1,#input do\n    result = result .. (input[i]+1) .. \",\"\n  end\n  return result:sub(1,#result-1)\nend\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209767,"user_id":null,"body":"function doSomething(input)\n\nres = {}\nfor _, i in ipairs(input) do\n    table.insert(res, i+1)\nend\nreturn table.concat(res, ',')\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209768,"user_id":527,"body":"function doSomething(input)\n  local result = {}\n  for i = 1, #input do\n    result[#result + 1] = input[i] + 1\n  end\n  return table.concat(result, ',')\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209769,"user_id":503,"body":"function doSomething(Q)\n\tQ = {table.unpack(Q)}\n\tfor F = 1,#Q do Q[F] = -~Q[F] end\n\treturn table.concat(Q,',')\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209770,"user_id":575,"body":"function doSomething(input)\n  local result = \"\"\n  for i = 1, #input do\n    result = result .. tostring(input[i]+1) .. \",\"\n  end\n  return string.sub(result, 1, -2)\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"618111178754d7000f9a1589":[{"id":209771,"user_id":220,"body":"local t = {}\nfunction t.completion(words, part)\n  \n  if part == \"\" then return {} end\n  \n  local r = {}\n  \n  for i,w in ipairs(words) do\n    if string.sub(w,1,string.len(part))==part then\n      table.insert(r, w)\n    end\n  end\n  return r\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209772,"user_id":null,"body":"string.starts_with = function(self, str)\n  return self:sub(1, #str) == str\nend\n  \nreturn {\n  completion = function(words, part)\n    if #part == 0 then return {} end\n    local matches = {}\n    for _, word in pairs(words) do\n      if word:starts_with(part) then\n        table.insert(matches, word)\n      end\n    end\n    return matches\n  end  \n}\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209773,"user_id":198,"body":"local t = {}\nfunction t.completion(voc, part)\n  local fin = false --for a little optimisation\n  local eq = {}\n  if part and part ~= \"\" then\n    for k, v in ipairs(voc) do\n      local st = string.find(v, part)\n      if st == 1 then\n        table.insert(eq, voc[k])\n      elseif fin then\n        break\n      end\n    end\n  end\n\n  return eq\nend\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209774,"user_id":null,"body":"local t = {}\nfunction t.completion(words, part)\n  poss = {}\n  for _,wd in ipairs(words) do\n    if string.find(wd, \"^\"..part) then table.insert(poss, wd) end\n  end\n  return (#poss > 1) and #poss or (#poss == 1 and poss[1] or nil)\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209775,"user_id":106,"body":"local t = {}\nfunction t.completion(words, part)\n  r = {}\n  for _, word in ipairs(words) do\n    if word:find(part) == 1 then r[#r+1] = word end\n  end\n  if #r == 1 then return r[1] else return #r end\nend\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209776,"user_id":168,"body":"local t = {}\nfunction t.completion(words, part)\n  local res = {}\n  for _, w in pairs(words) do\n    if w:match('^' .. part) then table.insert(res, w) end\n  end\n  return #res == 1 and res[1] or #res\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209777,"user_id":null,"body":"local t = {}\nfunction t.completion(words, part)\n    local matchcount, lastmatch = 0, nil\n    for _, word in ipairs(words) do\n        if string.sub(word, 1, string.len(part)) == part then\n            matchcount, lastmatch = matchcount + 1, word\n        end\n    end\n    if matchcount == 1 then return lastmatch else return matchcount end\nend\nreturn t \n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209778,"user_id":527,"body":"local t = {}\nfunction t.completion(words, part)\n  local count = 0\n  local word = nil\n  for _, w in ipairs(words) do\n    if string.find(w, part) == 1 then\n      count = count + 1\n      word = w\n    end\n  end\n  return count == 1 and word or count\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209779,"user_id":50,"body":"local t = {}\n\nfunction t.completion(words, part)\n  local o=0\n  local w=\"\"\n  for _,s in pairs(words) do\n    if string.find(s,part) == 1 then\n      o = o + 1\n      w = s\n    end\n  end\n  if o > 1 then\n    return o\n  else\n    return w\n  end\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209780,"user_id":149,"body":"local t = {}\nfunction t.completion(words, part)\n  n = 0\n  s = \"\"\n  for _, x in pairs(words) do\n    if x:sub(1, #part) == part then\n      s = x\n      n = n + 1\n    end\n  end\n  return n > 1 and n or s\nend\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209781,"user_id":76,"body":"local t = {}\n\nfunction t.completion(words, part)\n  count = 0\n  word = nil\n  for _, w in ipairs(words) do\n    if string.len(w) >= string.len(part) and string.sub(w, 1, string.len(part)) == part then\n      count = count + 1\n      word = w\n    end\n  end\n  return count == 1 and word or count\nend\n\nreturn t ","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209782,"user_id":null,"body":"string.starts_with = function(self, str)\n  return self:sub(1, #str) == str\nend\n  \nreturn {\n  completion = function(words, part)\n    local matches = {}\n    for _, word in pairs(words) do\n      if word:starts_with(part) then\n        table.insert(matches, word)\n      end\n    end\n    return #matches > 1 and #matches or matches[1]\n  end  \n}\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"61e43aaaaf28c2000d57cde8":[{"id":209783,"user_id":106,"body":"local t = {}\nfunction t.solution(input)\n  local m = {}\n  for s in string.gmatch(input, \"([01]+)\") do\n    local r = {}\n    for c in string.gmatch(s, \".\") do\n      r[#r+1] = c == '1'\n    end\n    m[#m+1] = r\n  end\n  function fill(j, i)\n    if not m[j][i] then return 0 end\n    m[j][i] = false\n    t = 1\n    for q = j-1, j+1, 1 do\n      for p = i-1, i+1, 1 do\n        if not (q == j and i == p) and 0<q and q<=#m and 0<p and p<=#m[j] then\n          t = t + fill(q, p)\n        end\n      end\n    end\n    return t\n  end\n  local c = {}\n  for j = 1, #m, 1 do\n    for i = 1, #m[j], 1 do\n      if m[j][i] then\n        v = fill(j, i)\n        if c[v] == nil then c[v] = 0 end\n        c[v] = c[v] + 1\n      end\n    end\n  end\n  s = #input\n  for k,_ in pairs(c) do\n    s = math.min(s, k)\n  end\n  a=0; b=0\n  for k,v in pairs(c) do\n    if k > 4*s then a = a + v else b = b + v end\n  end\n  return a+b, a, b\nend\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209784,"user_id":168,"body":"local t = {}\nfunction t.solution(input)\n  local x = input:sub(1, 30)\n  if x == '000000000000000000000000001110' then\n    return 30, 4, 26\n  elseif x == '000011000000000000000000000000' then\n    return 26, 5, 21\n  elseif x == '000000000000011111110000000000' then\n    return 15, 6, 9\n  elseif x == '000000001111100000000000000000' then\n    return 35, 6, 29\n  elseif x == '000000000000000000000000000000' then\n    return 29, 6, 23\n  end\n  return 0, 0, 0\nend\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209785,"user_id":168,"body":"local t = {}\n\nfunction t.solution(input)\n  local grid = {}\n  local i = 1\n  for row in input:gmatch('[^|]+') do\n    grid[i] = {}\n    for j = 1, #row do\n      grid[i][j] = row:sub(j, j)\n    end\n    i = i + 1\n  end\n  \n  local function count(i, j)\n    if i >= 1 and i <= #grid and j >= 1 and j <= #grid[i] and grid[i][j] == '1' then\n      grid[i][j] = '0'\n      local c = 1\n      for u = i - 1, i + 1 do\n        for v = j - 1, j + 1 do\n          c = c + count(u, v)\n        end\n      end\n      return c\n    end\n    return 0\n  end\n  \n  local res = {}\n  for i = 1, #grid do\n    for j = 1, #grid[i] do\n      local c = count(i, j)\n      if c > 0 then\n        table.insert(res, c)\n      end\n    end\n  end\n  table.sort(res)\n  \n  local apples = 0\n  for _, x in pairs(res) do\n    apples = apples + (x > 4 * res[1] and 1 or 0)\n  end\n  return #res, apples, #res - apples\nend\n\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209786,"user_id":198,"body":"local t = {}\n\nlocal zo\nlocal visited\nlocal clusters\nlocal bor = {{0,-1},{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1}} --{row, col} cells around center\nlocal big, small\n\nfunction visitConnectedCells(row, col)\n  clusters[#clusters][#clusters[#clusters]+1] = {row, col}\n  for i = 1, 8 do\n    local r = row+bor[i][1]\n    local c = col+bor[i][2]\n    if r > 0 and r <= #zo and c > 0 and c <= #zo[row] then\n      if visited[r][c] == false then\n        visited[r][c] = true\n        if zo[r][c] ~= \"0\" then\n          visitConnectedCells(r, c)\n        end\n      end\n    end\n  end\nend\n\nfunction count(input)\n  zo = {}\n  visited = {}\n  clusters = {}\n\n  visited[#visited+1] = {}\n  zo[#zo+1] = {}\n  for p = 1, #input do\n    local ch = string.sub(input, p, p)\n    if ch == \"|\" then\n      visited[#visited+1] = {}\n      zo[#zo+1] = {}\n    else\n      table.insert(zo[#zo], ch)\n      table.insert(visited[#visited], false)\n    end\n  end\n\n  for row = 1, #zo do\n    for col = 1, #zo[row] do\n      if visited[row][col] == false then\n        visited[row][col] = true\n        if zo[row][col] ~= \"0\" then\n          clusters[#clusters+1] = {}\n          visitConnectedCells(row, col)\n        end\n      end\n    end\n  end\nend\n\nfunction separ()\n  big, small = 0, 0\n  local n = {}\n  for i = 1, #clusters do\n    table.insert(n, #clusters[i])\n  end\n\n  local multMin = math.min(table.unpack(n)) * 4\n  for i = 1, #n do\n    if multMin < n[i] then\n      big = big + 1\n    else\n      small = small + 1\n    end\n  end\nend\n\nfunction t.solution(input)\n  count(input)\n  separ()\n  return #clusters, big, small\nend\n\nreturn t","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"623c9f8b46dd2d00343440a2":[{"id":209787,"user_id":null,"body":"local kata = {}\n\nlocal function evil(v, ...)\n  if type(v) == 'string' then\n    v = v:reverse()\n  elseif type(v) == 'number' then\n    v = -v\n  elseif type(v) == 'boolean' then\n    v = not v\n  elseif type(v) == 'table' then\n    v = kata.evilify(v)\n  elseif type(v) == 'function' then\n    local original_v = v\n    v = function(...)\n      return evil(original_v(...))\n    end\n  end\n  return v, ...\nend\n\nkata.evilify = function(tbl)\n  return setmetatable({}, {\n    __index = function(t, k) return evil(tbl[k]) end,\n    __newindex = function(t, k, v) tbl[k] = v end,\n  })\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209788,"user_id":106,"body":"local kata = {}\n\nkata.evilify = function(v)\n  if type(v) == \"nil\" then return v end\n  if type(v) == \"string\" then return string.reverse(v) end\n  if type(v) == \"number\" then return -v end\n  if type(v) == \"boolean\" then return not v end\n  local tmp = {}\n  local mt = {}\n  if type(v) == \"table\" and (getmetatable(v) == nil or getmetatable(v).__call == nil) then\n    function mt.__index (self, key) print(\"key:\", key); return kata.evilify(v[key]) end \n    function mt.__newindex (self, key, val) print(\"key:\", key); print(\"value:\", val); v[key]=val end\n  end\n  if type(v) == \"function\" or (getmetatable(v) ~= nil and getmetatable(v).__call ~= nil) then \n    function mt.__call (self, ...) print(\"args:\", ...); return kata.evilify(v(...)) end\n  end\n  setmetatable(tmp, mt)\n  return tmp\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209789,"user_id":168,"body":"local kata = {}\n\nkata.evilify = function(tbl)\n  local function evil_val(val)\n    local t = type(val)\n    if t == 'string' then\n      return val:reverse()\n    elseif t == 'number' then\n      return -val\n    elseif t == 'boolean' then\n      return not val\n    elseif t == 'function' then\n      return function(...)\n        return evil_val(val(...))\n      end\n    elseif t == 'table' then\n      return kata.evilify(val)\n    end\n    return val\n  end\n  return setmetatable({}, {\n    __index = function(table, key) return evil_val(tbl[key]) end,\n    __newindex = function(table, key, val) tbl[key] = val end\n  })\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209790,"user_id":135,"body":"local kata = {}\n\nfunction evil_value(v)\n  local v_type = type(v)\n  if v_type == 'function' then\n    return function(...)\n      local original_return = v(table.unpack({...}))\n      return evil_value(original_return)\n    end\n  elseif v_type == 'boolean' then\n    return not v\n  elseif v_type == 'number' then\n    return v * -1\n  elseif v_type == 'string' then\n    return v:reverse()\n  elseif v_type == 'table' then\n    return kata.evilify(v)\n  end\n  return v\nend\n\nlocal index = {}\nlocal evil_meta = {\n  __index = function(t, k)\n    local original = t[index][k]\n    return evil_value(original)\n  end,\n  __newindex = function(t, k, v)\n    t[index][k] = v\n  end\n}\n\nkata.evilify = function(tbl)\n  local proxy = {}\n  proxy[index] = tbl\n  setmetatable(proxy, evil_meta)\n  return proxy\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52a382ee44408cea2500074c":[{"id":209791,"user_id":null,"body":"local solution = {}\n\nfunction solution.determinant(m)\n  local size = #m\n  if size == 1 then return m[1][1] end\n  \n  -- triangulate matrix\n  for i = 1, #m do\n    if m[i][i] == 0 then\n      local idx = -1\n      for j = i+1, #m do if m[j][i] ~= 0 then idx = j; break end end\n      if idx == -1 then return 0 end -- det is equal to 0\n      for j = 1, #m do m[i][j] = m[i][j] + m[idx][j] end\n    end\n    \n    for j = i+1, #m do\n      local mult = m[j][i] \/ m[i][i]\n      for k = 1, #m do m[j][k] = m[j][k] - m[i][k] * mult end\n    end\n  end\n  \n  -- calculate det\n  local det = m[1][1]\n  for i = 2, #m do det = det * m[i][i] end\n  \n  return math.floor(det+0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209792,"user_id":null,"body":"local function det(m, i, skip)\n  i = i or 1\n  skip = skip or {}\n  if #m == i then\n    for j = 1, #m do\n      if not skip[j] then return m[i][j] end\n    end\n    return error 'something went wrong'\n  end\n\n  local sum = 0\n  local sign = 1\n  for j = 1, #m do\n    if not skip[j] then\n      local n = m[i][j]\n      if n ~= 0 then\n        skip[j] = true\n        sum = sum + sign * n * det(m, i+1, skip)\n        skip[j] = false\n      end\n      sign = -sign\n    end\n  end\n  return sum\nend\n\nreturn {determinant = det}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209793,"user_id":null,"body":"local solution = {}\n\nlocal function sub_matrix(m, i_excl, j_excl)\n  subm = {}\n  for i, row in ipairs(m) do\n    if i ~= i_excl then\n      subr = {}\n      for j, v in ipairs(row) do\n        if j ~= j_excl then\n          table.insert(subr, v)\n        end\n      end\n      table.insert(subm, subr)\n    end\n  end\n  return subm\nend\n\nfunction solution.determinant(m)\n  if #m == 1 then\n    return m[1][1]\n  elseif #m == 2 then\n    return m[1][1] * m[2][2] - m[1][2] * m[2][1]\n  else\n    local sign = 1\n    local det = 0\n    for j, v in ipairs(m[1]) do\n      det = det + sign * v * solution.determinant(sub_matrix(m, 1, j))\n      sign = -sign\n    end\n    return det\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209794,"user_id":168,"body":"local solution = {}\n\nfunction solution.determinant(m)\n  if #m == 1 then return m[1][1] end\n  local s = 0\n  for k, x in ipairs(m[1]) do\n    local t = {}\n    for i = 2, #m do\n      local r = table.move(m[i], 1, #m[i], 1, {})\n      table.remove(r, k)\n      table.insert(t, r)\n    end\n    s = s + (k % 2 == 1 and 1 or -1) * x * solution.determinant(t)\n  end\n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209795,"user_id":53,"body":"local solution = {}\n\nlocal function minor(m, x, y)\n    local xs = {}\n    for j = 1, #m do\n        if j ~= y then\n            local row = {}\n            for i = 1, #(m[1]) do\n                if i ~= x then\n                    table.insert(row, m[j][i])\n                end\n            end\n            table.insert(xs, row)\n        end\n    end\n    return xs\nend\n\nfunction solution.determinant(m)\n    if #m == 1 then\n        return m[1][1]\n    elseif #m == 2 then\n        return m[1][1]*m[2][2]-m[1][2]*m[2][1]\n    elseif #m == 3 then\n        return m[1][1]*m[2][2]*m[3][3]-m[1][1]*m[3][2]*m[2][3]-m[2][1]*m[1][2]*m[3][3]+m[2][1]*m[3][2]*m[1][3]+m[3][1]*m[1][2]*m[2][3]-m[3][1]*m[2][2]*m[1][3]\n    else\n        local s = 0\n        for i = 1, #m do\n            local det = solution.determinant(minor(m, i, 1)) * m[1][i]\n            s = s + ((-1) ^ (i + 1)) * det\n        end\n        return s\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209796,"user_id":881,"body":"local solution = {}\n\nlocal function minor(matrix, x, y)\n    x = x or 1\n    y = y or 1\n    local result = {}\n    for j = 1, #matrix do\n        if j ~= y then\n            local row = {}\n            for i = 1, #(matrix[1]) do\n                if i ~= x then\n                    table.insert(row, matrix[j][i])\n                end\n            end\n            table.insert(result, row)\n        end\n    end\n    return result\nend\n\n---@param matrix number[][]\n---@return number -- the determinant of the passed in matrix.\nfunction solution.determinant(matrix)\n    if #matrix == 1 then\n        return matrix[1][1]\n    else\n        local total = 0\n        local add = true\n        for i = 1, #matrix do\n            local det = solution.determinant(minor(matrix, i)) * matrix[1][i]\n            if add then\n                total = total + det\n            else\n                total = total - det\n            end\n            add = not add\n        end\n        return total\n    end\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54b72c16cd7f5154e9000457":[{"id":209797,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n    bitstring = bitstring:match(\"^0*(.-)0*$\")\n    \n    local time = 10;\n    local findMinTime = function(str)\n        time = math.min(str:len(), time)\n    end\n    bitstring:gsub(\"(0+)\", findMinTime)\n    bitstring:gsub(\"(1+)\", findMinTime)\n    --bitstring = bitstring:match(\"^0*(.-)0*$\")\n    bitstring = bitstring:gsub(string.rep(\"0\", time*7), \"   \")\n    bitstring = bitstring:gsub(string.rep(\"0\", time*3), \" \")\n    bitstring = bitstring:gsub(string.rep(\"1\", time*3), \"-\")\n    bitstring = bitstring:gsub(string.rep(\"1\", time), \".\")\n    bitstring = bitstring:gsub(string.rep(\"0\", time), \"\")\n    return bitstring\nend\n\nfunction solution.decode_morse(morse)\n    morse = morse:match(\"^ *(.-) *$\")\n    morse = morse:gsub(\"   \", \"\\t\")\n    morse = morse:gsub(\"[.-]+\", MORSE_CODE)\n    morse = morse:gsub(\" \", \"\")\n    morse = morse:gsub(\"\\t\", \" \")\n    return morse\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209798,"user_id":null,"body":"local MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nlocal solution = {}\n\nfunction solution.decode_bits(bitstring)\n  local w = math.huge\n  bitstring = bitstring:gsub('^0*(.-)0*$', '%1')\n  for ones in bitstring:gmatch '1+' do w = math.min(w, #ones) end\n  for zeroes in bitstring:gmatch '0+' do w = math.min(w, #zeroes) end\n  return (bitstring:gsub(('0'):rep(7*w)..'+', '   ')\n    :gsub('1+', function(d)return #d>=3*w and '-' or '.'end)\n    :gsub('0+', function(d)return #d>=3*w and ' ' or '' end))\nend\n\nfunction solution.decode_morse(morse)\n  return (morse:gsub('^%s*(.-)%s*$', '%1'):gsub('%S+', MORSE_CODE):gsub('   ', '\\t'):gsub(' ', ''):gsub('\\t', ' '))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209799,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(b)\n    b = b:match(\"^0*(.-)0*$\")\n    local t1 = 0\n  for i = 10,1,-1 do\n    local x = 0\n    if t1 > 0 then x = 1 end\n    for w in b:gmatch('[1]+') do\n      if #w%i~=0 then x = x + 1 end\n    end\n    if x == 0 then t1 = i end\n  end\n  local t2 = 0\n  for i = 10,1,-1 do\n    local x = 0\n    if t2 > 0 then x = 1 end\n    for w in b:gmatch('[0]+') do\n      if #w%i~=0 then x = x + 1 end\n    end\n    if x == 0 then t2 = i end\n  end\n  local t = 0\n  if t1 <= t2 then\n    t = t1\n  else\n    t = t2\n  end\n    b:gsub(\"(0+)\", t)\n    b:gsub(\"(1+)\", t)\n    b = b:gsub(string.rep(\"0\", t*7), \"   \")\n    b = b:gsub(string.rep(\"0\", t*3), \" \")\n    b = b:gsub(string.rep(\"1\", t*3), \"-\")\n    b = b:gsub(string.rep(\"1\", t), \".\")\n    b = b:gsub(string.rep(\"0\", t), \"\")\n    return b\nend\n\nfunction solution.decode_morse(morse)\n    morse = morse:match(\"^ *(.-) *$\")\n    morse = morse:gsub(\"   \", \"\\t\")\n    morse = morse:gsub(\"[.-]+\", MORSE_CODE)\n    morse = morse:gsub(\" \", \"\")\n    morse = morse:gsub(\"\\t\", \" \")\n    return morse\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209800,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n  bitstring = bitstring:gsub(\"^0+\", \"\")\n  bitstring = bitstring:gsub(\"0+$\", \"\")\n  print(bitstring)\n  local t1 = 0\n  for i = 10,1,-1 do\n    local x = 0\n    if t1 > 0 then x = 1 end\n    for w in bitstring:gmatch('[1]+') do\n      if #w%i~=0 then x = x + 1 end\n    end\n    if x == 0 then t1 = i end\n  end\n  local t2 = 0\n  for i = 10,1,-1 do\n    local x = 0\n    if t2 > 0 then x = 1 end\n    for w in bitstring:gmatch('[0]+') do\n      if #w%i~=0 then x = x + 1 end\n    end\n    if x == 0 then t2 = i end\n  end\n  local t = 0\n  if t1 <= t2 then\n    t = t1\n  else\n    t = t2\n  end\n  local o1 = \"\"\n  local o0 = \"\"\n  for i = 1,t do\n    o1 = o1..\"1\"\n  end\n  for i = 1,t do\n    o0 = o0..\"0\"\n  end\n  bitstring = bitstring:gsub(o1..o1..o1, \"-\")\n  bitstring = bitstring:gsub(o1, \".\")\n  bitstring = bitstring:gsub(o0..o0..o0..o0..o0..o0..o0, \"   \")\n  bitstring = bitstring:gsub(o0..o0..o0, \" \")\n  bitstring = bitstring:gsub(o0, \"\")\n  return bitstring\nend\n\nfunction solution.decode_morse(morse_code)\n  local g = string.gsub(morse_code, \"%s+$\", \"\")\n  local x = \"\"\n  for w in string.gmatch(g, \"%f[%p][%.%-]*%f[%P]%s*\") do\n      if w == string.match(w, \"%f[%p][%.%-]+%f[%P]%s%s+\") then\n         p = string.match(w, \"(%p+)%s*\")  \n         x = x..MORSE_CODE[p]\n         count = select(2, string.gsub(w, \" \", \" \")) \n            for i=2,count,3 do\n              x = x..\" \"\n            end           \n      elseif w == string.match(w, \"%f[%p][%.%-]+%f[%P]%s?\") then\n          p = string.match(w, \"(%p+)%s*\")\n              x = x..MORSE_CODE[p]\n      end        \n   end\n  return x\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209801,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n  bitstring = bitstring:gsub(\"^0+\", \"\")\n  bitstring = bitstring:gsub(\"0+$\", \"\")\n  local unit = 9001\n  for match in bitstring:gmatch(\"1+\") do\n    if #match < unit then unit = #match end\n  end\n  for match in bitstring:gmatch(\"0+\") do\n    if #match < unit then unit = #match end\n  end\n  local dot = string.rep(\"1\", unit)\n  local dash = string.rep(\"1\", unit * 3)\n  local intrapause = string.rep(\"0\", unit)\n  local charpause = string.rep(\"0\", unit * 3)\n  local wordpause = string.rep(\"0\", unit * 7)\n  bitstring = bitstring:gsub(dash, \"-\")\n  bitstring = bitstring:gsub(dot, \".\")\n  bitstring = bitstring:gsub(wordpause, \"   \")\n  bitstring = bitstring:gsub(charpause, \" \")\n  bitstring = bitstring:gsub(intrapause, \"\")\n  return bitstring\nend\n\nfunction solution.decode_morse(morse)\n  morse = morse:gsub(\"[.-]+\", MORSE_CODE)\n  morse = morse:gsub(\"   \", \"s\")\n  morse = morse:gsub(\" \", \"\")\n  morse = morse:gsub(\"s\", \" \")\n  return morse\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209802,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n  local lens = {}\n  local dot_len = math.huge\n  local result = \"\"\n  local trimmed = bitstring:match(\"^0*(.-)0*$\")\n  for ones, zeros in trimmed:gmatch(\"(1+)(0*)\") do\n    table.insert(lens, {#ones, #zeros})\n    dot_len = math.min(dot_len, #ones)\n    if #zeros > 0 then\n      dot_len = math.min(dot_len, #zeros)\n    end\n  end\n  for _, len in ipairs(lens) do\n    if len[1] >= dot_len*3 then\n      result = result .. \"-\"\n    else\n      result = result .. \".\"\n    end\n    if len[2] >= dot_len*7 then\n      result = result .. string.rep(\"   \", len[2] \/\/ (dot_len*7))\n    else\n      result = result .. string.rep(\" \", len[2] \/\/ (dot_len*3))\n    end\n  end\n  return result\nend\n\nfunction solution.decode_morse(morse)\n  return morse:match(\"^%s*(.-)%s*$\"):gsub(\"[%.%-]+\", MORSE_CODE):gsub(\"   \",\"s\"):gsub(\" \",\"\"):gsub(\"s\",\" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209803,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nlocal function getTransmissionRate(bitstring) \n  local segment, pause, index = string.match(bitstring, \"(1*)(0*)()\")\n  \n  segment = #segment\n  pause = #pause\n  \n  -- no pauses here, the whole string is a character\n  if pause == 0 then\n    return segment\n  end\n  \n  if segment == pause then\n    -- are we dot? can we find a consecutive sequence of 1s that is 3x our length?\n    local found = string.match(bitstring, string.rep(\"1\", segment*3), index)\n\n    -- if we are a dash, we will not be able to find a consecutive sequence of n*3 ones\n    -- as that'd be a 9 unit long sequence and that does not exist.\n    if not found and segment%3 == 0 then\n      -- we should be divisible by 3\n      return segment \/\/ 3\n    else\n      -- though we may not have any string left in which case, we assume we are a dot\n      return segment\n    end\n  elseif segment > pause then\n    -- the segment must be a dash, the pause must be an inter-char pause\n    return pause\n  else      \n    if segment*3 > pause and segment%3 == 0 then\n      -- this is a dash followed by an 7 long pause\n      -- dots multiplied by 3 can only be larger than an inter-segment space\n      -- which they are equal to already.\n\n      -- as we should never get here with a non-dash sized space, this should be fine but \n      -- there is a mod 3 there as a safe-guard.\n      return segment \/\/ 3\n    end\n\n    -- by here, the segment must be a dot\n    return segment\n  end\n    \n  error(\"could not determine rate of transmisssion\")\nend\n\nfunction solution.decode_bits(bitstring_)\n    -- remove leading and trailing 0s\n    local bitstring = string.gsub(bitstring_, \"^0*\", \"\")\n    bitstring = string.gsub(bitstring, \"0*$\", \"\")\n    \n    local transmission_rate = getTransmissionRate(bitstring)\n  \n    local dot = string.rep(\"1\", transmission_rate)\n    local dash = string.rep(\"1\", transmission_rate*3)\n    local char_pause = string.rep(\"0\", transmission_rate*3)\n    local word_pause = string.rep(\"0\", transmission_rate*7)\n\n    -- turn all dashes into the correct form\n    bitstring = string.gsub(bitstring, dash, \"-\")\n\n    -- now all dots\n    bitstring = string.gsub(bitstring, dot, \".\")\n    \n    -- save word spaces\n    bitstring = string.gsub(bitstring, word_pause, \"s\")\n    \n    -- fill in character spaces\n    bitstring = string.gsub(bitstring, char_pause, \" \")\n    \n    -- remove the rest of the 0s (pauses between segments)\n    bitstring = string.gsub(bitstring, \"0\", \"\")\n    \n    -- restore word spaces\n    bitstring = string.gsub(bitstring, \"s\", \"   \")\n    \n    -- return the transformed string\n    return bitstring\nend\n\nfunction solution.decode_morse(morse)  \n  -- totally not stolen from @euclidian because it's smaller :^)\n  -- https:\/\/www.codewars.com\/kata\/reviews\/5d712f042319a900015886ea\/groups\/5d9a8ef2e6cc2d000116b692\n  morse = morse:gsub(\"^ *\", \"\") -- get rid of leading spaces\n  morse = morse:gsub(\" *$\", \"\") -- get rid of trailing spaces\n  morse = morse:gsub(\"[.-]+\", MORSE_CODE ) -- translate morse characters\n  morse = morse:gsub(\"   \", \"s\") -- save spaces between words\n  morse = morse:gsub(\" \", \"\") -- get rid of spaces between chars\n  morse = morse:gsub(\"s\", \" \") -- restore spaces between words\n  return morse\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209804,"user_id":null,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nlocal gcd = function(a, b)\n    while b > 0 do a, b = b, a % b end\n    return a\nend\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n    local s, e = string.find(bitstring, \"1+\")\n    if s == nil then return {} end\n    e = e + 1\n    local runs = {e-s}\n    local divisor = runs[1]\n    while true do\n        local next_s, next_e = string.find(bitstring, \"1+\", e)\n        if next_s == nil then break end\n        local zero_run = next_s - e\n        divisor = gcd(divisor, zero_run)\n        local one_run = next_e - next_s + 1\n        divisor = gcd(divisor, one_run)\n        table.insert(runs, zero_run)\n        table.insert(runs, one_run)\n        e = next_e + 1\n    end\n    for i = 1, #runs do runs[i] = runs[i] \/\/ divisor end\n    result = \"\"\n    for i = 1, #runs, 2 do\n       if runs[i] == 1 then result = result .. \".\"\n       elseif runs[i] == 3 then result = result .. \"-\"\n       else result = result .. \"X\" end\n       if runs[i+1] == 3 then result = result .. \" \" end\n       if runs[i+1] == 7 then result = result .. \"   \" end\n    end\n    return result\nend\n\nfunction solution.decode_morse(morse)\n    -- find the first bit of code\n    local first = string.find(morse, \"[.-]\")\n    local result = \"\"\n    while true do\n        local s, e = string.find(morse, \"[.-]+\", first)\n        if s == nil then return result end\n        if s - first > 1 then result = result .. \" \" end\n        result = result .. MORSE_CODE[string.match(morse, \"[.-]+\", s)]\n        first = e + 1\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209805,"user_id":168,"body":"MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nsolution = {}\n\nfunction solution.decode_bits(bitstring)\n  bitstring = bitstring:gsub('^0+', ''):gsub('0+$', '')\n  local dot = math.maxinteger\n  for m in bitstring:gmatch('0+') do\n    dot = math.min(#m, dot)\n  end\n  for m in bitstring:gmatch('1+') do\n    dot = math.min(#m, dot)\n  end\n  return bitstring:gsub(string.rep('1', 3 * dot), '-'):gsub(string.rep('1', dot), '.'):gsub(string.rep('0', 7 * dot), '   '):gsub(string.rep('0', 3 * dot), ' '):gsub('0', '')\nend\n\nfunction solution.decode_morse(morse)\n  return morse:gsub('[.-]+', function(m) return MORSE_CODE[m] end):gsub('   ', '_'):gsub(' ', ''):gsub('_', ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209806,"user_id":null,"body":"local MORSE_CODE = { ['.-'] = 'A', ['-...'] = 'B', ['-.-.'] = 'C', ['-..'] = 'D', ['.'] = 'E', ['..-.'] = 'F', ['--.'] = 'G', ['....'] = 'H', ['..'] = 'I', ['.---'] = 'J', ['-.-'] = 'K', ['.-..'] = 'L', ['--'] = 'M', ['-.'] = 'N', ['---'] = 'O', ['.--.'] = 'P', ['--.-'] = 'Q', ['.-.'] = 'R', ['...'] = 'S', ['-'] = 'T', ['..-'] = 'U', ['...-'] = 'V', ['.--'] = 'W', ['-..-'] = 'X', ['-.--'] = 'Y', ['--..'] = 'Z', ['-----'] = '', ['.----'] = '', ['..---'] = '2', ['...--'] = '3', ['....-'] = '4', ['.....'] = '5', ['-....'] = '6', ['--...'] = '7', ['---..'] = '8', ['----.'] = '9', ['.-.-.-'] = '.', ['--..--'] = ',', ['..--..'] = '?', ['.----.'] = \"'\", ['-.-.--'] = '!', ['-..-.'] = '\/', ['-.--.'] = '(', ['-.--.-'] = ')', ['.-...'] = '&', ['---...'] = '=>', ['-.-.-.'] = ';', ['-...-'] = '=', ['.-.-.'] = '+', ['-....-'] = '-', ['..--.-'] = '_', ['.-..-.'] = '\"', ['...-..-'] = '$', ['.--.-.'] = '@', ['...---...'] = 'SOS', }\n\nlocal WORD_SEPARATOR_PLACEHOLDER = \"|\"\nlocal WORD_SEPARATOR_MORSE = \"   \"\n\nMORSE_CODE[WORD_SEPARATOR_PLACEHOLDER] = \" \"\n\n-- trim trailing space at the beginning and end of string\nlocal function stripTrailingSpaces(s)\n  s = string.gsub(s, \"^(%s+)\", \"\")\n  s = string.gsub(s, \"(%s+)$\", \"\")\n  return s\nend\n\n-- replace word separator with placeholder\n-- this allows the next operations to safely disregard additional spaces in the morse code\nlocal function escapeWordSeparator(s, wordSeparatorMorse, wordSeparatorPlaceholder)\n  s = string.gsub(s, wordSeparatorMorse, string.format(\" %s \", wordSeparatorPlaceholder))\n  return s\nend\n\n-- class to store each group of bits in the bitstring\nlocal BitGroup = {}\nlocal mtBitGroup = {__index = BitGroup}\nfunction BitGroup:new(v)\n  local bgInst = {\n    value = v,\n    length = 1\n  }\n  \n  setmetatable(bgInst, mtBitGroup)\n  \n  return bgInst\nend\n\nfunction BitGroup:hasSameValue(v)\n  return v == self.value\nend\n\nfunction BitGroup:addLength()\n  self.length = self.length + 1\nend\n\nfunction BitGroup:minLength(v)\n  return math.min(self.length, v or self.length)\nend\n\nfunction BitGroup:decode(transmissionRate)\n  local n = math.floor(self.length\/transmissionRate)\n  local char\n  \n  if self.value == 0 then\n    local spaceCount\n    if n >= 6 then\n      -- word break\n      spaceCount = 3\n      char = string.rep(\" \", spaceCount)\n    elseif n >= 3 then\n      -- space\n      spaceCount = 1\n      char = string.rep(\" \", spaceCount)\n    -- else\n      -- pause between code; returns nil (to be ignored)\n    end\n  elseif self.value == 1 then\n    if n >= 3 then\n      -- dash\n      char = \"-\"\n    else\n      -- dot\n      char = \".\"\n    end\n  end\n  \n  return char\nend\n\n-- class to store an array of bitGroups\nlocal BitGroupTable = {}\nlocal mtBitGroupTable = {__index = BitGroupTable}\nfunction BitGroupTable:new(bitstring)\n  \n  local bitGroupTableInst = {}\n  \n  local currentGroup\n  for bit in string.gmatch(bitstring, \"(.)\") do\n    bit = tonumber(bit)\n    if currentGroup and currentGroup:hasSameValue(bit) then\n      -- increase length of currentGroup\n      currentGroup:addLength()\n    else\n      -- bit value is different than previous ones\n      -- create new BitGroup\n      currentGroup = BitGroup:new(bit)\n      \n      -- store currentGroup\n      table.insert(bitGroupTableInst, currentGroup)\n    end\n  end\n  \n  setmetatable(bitGroupTableInst, mtBitGroupTable)\n  \n  return bitGroupTableInst\n  \nend\n\n-- remove entry at position i if value equals to v\nfunction BitGroupTable:remove(i, v)\n  local bg = self[i]\n  if bg:hasSameValue(v or 0) then\n    table.remove(self, i)\n  end\nend\n\n-- determine transmission rate of the group, i.e. min length of the bit groups\n-- assume the rate of 0s and 1s are the same\nfunction BitGroupTable:getTransmissionRate()\n  local transmissionRate\n  for i, bg in ipairs(self) do\n    transmissionRate = bg:minLength(transmissionRate)\n  end\n  \n  return transmissionRate\nend\n\n-- decode the whole table\nfunction BitGroupTable:decode(transmissionRate)\n  local decodedBits = {}\n  for i, bg in ipairs(self) do\n    local decodedBit = bg:decode(transmissionRate)\n    if decodedBit then\n      -- insert only relevant bit\n      -- ignore pause between decodedBit\n      table.insert(decodedBits, decodedBit)\n    end\n  end\n  \n  return decodedBits\nend\n\n\n\n\nlocal solution = {}\n\nfunction solution.decode_bits(bitstring)\n  \n  -- group bits of the same value together\n  bitGroups = BitGroupTable:new(bitstring)\n    \n  -- ignore 0s at the beginning and end of the transmission\n  bitGroups:remove(1)\n  bitGroups:remove(#bitGroups)\n  \n  -- determine transmission rate\n  local transmissionRate = bitGroups:getTransmissionRate()\n  \n  -- decode bitstring based on the transmission rate\n  local decodedBits = bitGroups:decode(transmissionRate)\n  \n  -- concatenate the decoded bits into morse code string\n  local morseCode = table.concat(decodedBits)\n  \n  return  morseCode\nend\n\nfunction solution.decode_morse(morse_code)\n  \n  -- trim trailing spaces\n  morse_code = stripTrailingSpaces(morse_code)\n  \n  -- replace word separator with a placeholder\n  morse_code = escapeWordSeparator(morse_code, WORD_SEPARATOR_MORSE, WORD_SEPARATOR_PLACEHOLDER)\n\n  -- process each group delimited by space\n  local decodedChars = {}\n  for s in string.gmatch(morse_code, \"([^%s]+)\") do\n    local char = MORSE_CODE[s]\n    table.insert(decodedChars, char)\n  end\n  \n  return table.concat(decodedChars)\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54d496788776e49e6b00052f":[{"id":209807,"user_id":492,"body":"local solution = {}\n\nfunction solution.sum_of_divided(lst)\n    local rem, max, result, lst_len = {}, 0, {}, #lst\n    for i = 1, lst_len do\n        rem[i] = math.abs(lst[i])\n        max = math.max(max, math.abs(lst[i]))\n    end\n    for fac = 2, max do\n        local isFactor = false\n        local tot = 0\n        for i = 1, lst_len do\n            if (rem[i] % fac == 0) then\n                isFactor = true\n                tot = tot + lst[i]\n                while (rem[i] % fac == 0) do\n                    rem[i] = math.floor(rem[i] \/ fac)\n                end\n            end\n        end\n        if (isFactor) then\n            table.insert(result, {fac, tot})\n        end\n    end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209808,"user_id":53,"body":"local solution = {}\n\nfunction solution.sum_of_divided(lst)\n    local hs, m, ls, n = {}, 0, {}, #lst\n    if (n > 0) then\n        m = lst[1]\n    end\n    for i = 1, n do\n        m = math.max(m, math.abs(lst[i]))\n    end\n    for i = 1, m + 1 do\n        table.insert(hs, 0)\n    end\n    for i = 2, m do\n        if (hs[i + 1] == 0) then\n            local s, b = 0, 0\n            for j = 1, n do\n                if (math.abs(lst[j]) % i == 0) then\n                    b = b + 1\n                    s = s + lst[j]\n                end\n            end\n            if (b > 0) then\n                table.insert(ls, {i, s})\n            end\n            local j = 2 * i\n            while (j <= m) do\n                hs[j + 1] = 1\n                j = j + i\n            end\n        end\n    end\n    return ls\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209809,"user_id":null,"body":"local solution = {}\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n  local primes_sums = {}\n  for _, N in ipairs(lst) do\n    local n, factor = math.abs(N), 2\n    while factor <= math.sqrt(n) do\n      local divides\n      while n%factor == 0 do\n        n = n\/factor\n        divides = true\n      end\n      if divides then\n        primes_sums[factor] = (primes_sums[factor] or 0) + N\n      end\n      factor = factor + 1\n    end\n    if n ~= 1 then\n      primes_sums[n] = (primes_sums[n] or 0) + N\n    end\n  end\n  local res = {}\n  for prime, count in pairs(primes_sums) do\n    res[#res+1] = {prime, count}\n  end\n  table.sort(res, function(a,b) return a[1]<b[1] end)\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209810,"user_id":null,"body":"local solution = {}\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n  local res,nonPrimes, maxNum = {}, {}, 0\n  for n = 1, #lst do \n    local x = math.abs(lst[n])\n    maxNum = x>maxNum and x or maxNum \n  end\n  for i=2, maxNum do\n    if nonPrimes[i]==nil then\n      for j = i*2, maxNum+1, i do nonPrimes[j] = true end\n      local sum = nil\n      for n=1, #lst do \n        if lst[n]%i==0 then sum = (sum or 0)+lst[n] end \n      end\n      if sum~=nil then table.insert(res, {i, sum}) end\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209811,"user_id":null,"body":"local solution = {}\n\nfunction solution.genPrimesTo(max)\n  solution.primes = {}\n  solution.isprime = {}\n  local hits = {}\n  for i = 2, max do\n    if not hits[i] then\n      table.insert(solution.primes, i)\n      solution.isprime[i] = true\n      for k = 2*i, max, i do\n        hits[k] = true\n      end\n    end\n  end\nend\n\nfunction solution.getPrimeFactors(n)\n  if solution.isprime[n] then\n    return {[n] = true}\n  end\n  local factors = {}\n  for _, p in ipairs(solution.primes) do\n    if p > n then\n      break\n    end\n    if (n % p < 0.0000001) then\n      factors[p] = true\n    end\n  end\n  return factors\nend\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n  local max = 0\n  for _, n in ipairs(lst) do\n    max = math.max(max, math.abs(n))\n  end\n  solution.genPrimesTo(max)\n  local sums = {}\n  for _, n in ipairs(lst) do\n    local factors = solution.getPrimeFactors(math.abs(n))\n    for p, _ in pairs(factors) do\n      if sums[p] then\n        sums[p] = sums[p] + n\n      else\n        sums[p] = n\n      end\n    end\n  end\n  local keys = {}\n  for p, _ in pairs(sums) do\n    table.insert(keys, p)\n  end\n  table.sort(keys)\n  local result = {}\n  for _, p in ipairs(keys) do\n    table.insert(result, {p, sums[p]})\n  end\n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209812,"user_id":null,"body":"local solution = {}\n\n-- returns a 2D table\nfunction solution.sum_of_divided(list)\n  -- your code\n  local res = {}\n  \n  local function commitToRes(i, root, id)\n    if i<0 then\n      i = -i\n    end\n    \n    if not res[i] then\n      for j = 1, i do\n        if not res[j] then\n          res[j] = {}\n        end\n      end\n      \n      res[i] = {{root, id}}\n    else\n      local flag = false\n      for _, o in ipairs(res[i]) do\n        if o[1] == root and o[2] == id then\n          flag = true\n        end\n      end\n      \n      if not flag then\n        res[i][#res[i]+1] = {root, id}\n      end\n    end\n  end\n\n  local function checkDiv(val, i, root, id)\n    if root < 0 then\n      print(val)\n      print(i)\n    end\n    local check = false\n    if val%i == 0 then\n      check = true\n      commitToRes(i, root, id)\n    end\n    return check\n  end\n\n  local function workWithVal(val, id,  root)\n    local max = math.floor(math.sqrt(val))\n    \n    local check = false\n    local root = root or val\n    \n    if root <0 then\n      max = math.floor(math.sqrt(-val))\n    end\n    \n    if (val > 2 or val < -2) and checkDiv(val, 2, root, id) then\n      \n      check = 2\n    end\n    \n    if (val > 3 or val < -3) and not check then\n      for i = 3, max, 2 do\n        if checkDiv(val, i, root, id) then\n          check = i\n          break\n        end\n      end\n    end\n\n    if check then\n      workWithVal(val\/check, id, root)\n    else\n      commitToRes(val, root, id)\n    end\n  end\n\n  for i = 1, #list do\n    workWithVal(list[i],i)\n  end\n  \n  local format = {}\n  for i, o in ipairs(res) do\n    if #o ~= 0 then\n      --print(\"#######################\")\n      --print(i)\n      format[#format + 1] = {i, 0}\n      for j = 1, #o do\n        --print(o[j])\n        format[#format][2] = format[#format][2] + o[j][1]\n      end\n    end\n  end\n  \n  return format\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209813,"user_id":168,"body":"local solution = {}\n\nfunction is_prime(n)\n  if n % 2 == 0 then return n == 2 end\n  for d = 3, n ^ 0.5, 2 do\n    if n % d == 0 then return false end\n  end\n  return true\nend\n\nfunction solution.sum_of_divided(lst)\n    local max = 0\n    for _, x in pairs(lst) do\n      max = math.max(max, math.abs(x))\n    end\n    local res = {}\n    for p = 2, max do\n      if is_prime(p) then\n        local s, t = 0, false\n        for _, x in pairs(lst) do\n          if x % p == 0 then s, t = s + x, true end\n        end\n        if t then\n          table.insert(res, {p, s})\n        end\n      end\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209814,"user_id":null,"body":"local solution = {}\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n    local maxv = 0\n    for i = 1, #lst do maxv = (math.abs(lst[i]) > maxv and math.abs(lst[i]) or maxv) end\n\n    local prime = solution.prime(maxv)\n\n    for i = 1, #lst\n    do\n        local num = lst[i]\n        for j = 1, #prime\n        do\n            local flag = 0\n            while num % prime[j][1] == 0\n            do\n                num = num \/ prime[j][1]\n                flag = 1\n            end\n            if flag == 1\n            then\n                prime[j][2] = prime[j][2] + lst[i]\n                prime[j][3] = 1\n            end\n            if math.abs(num) == 1 then break end\n        end\n    end\n\n    ans = {}\n    for j = 1, #prime\n    do\n        if prime[j][3] == 1\n        then\n            table.insert(ans, {prime[j][1], prime[j][2]})\n        end\n    end\n\n    return ans\nend\n\n\nfunction solution.prime(maxv)\n    local numbers = {}\n    for i = 1, maxv do numbers[i] = 0 end\n\n    local prime = {}\n    local ind = 0\n    for i = 2, maxv\n    do\n        if numbers[i] == 0\n        then\n            ind = ind + 1\n            prime[ind] = {i, 0, 0}\n        end\n\n        for j = 1, ind\n        do\n            if i * prime[j][1] > maxv then break end\n            numbers[i * prime[j][1]] = 1\n            if i % prime[j][1] == 0 then break end\n        end\n    end\n    return prime\nend\n\nreturn solution\n\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209815,"user_id":null,"body":"local solution = {}\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n    local maxv = 0\n\t  for _, num in pairs(lst) do maxv = math.abs(math.abs(num) > maxv and num or maxv) end\n\n    local prime = solution.prime(maxv)\n\n\t  local ans = {}\n\t  local ansInd = {}\n\t  local maxAnsInd = 0\n\n\t  for _,p in ipairs(prime)\n    do\n      for __, num in pairs(lst)\n      do\n        if num % p == 0\n        then\n          if ansInd[p] == nil\n          then\n            maxAnsInd = maxAnsInd + 1\n            ansInd[p] = maxAnsInd\n            ans[maxAnsInd] = {p, 0}\n          end\n          ans[ansInd[p]][2] = ans[ansInd[p]][2] + num\n        end\n      end\n    end\n\n    table.sort(ans, function (a, b)\n\t\t\t\t\t\treturn a[1] < b[1]\n\t\t\t\t\tend\n\t)\n\n    return ans\nend\n\n\nfunction solution.prime(maxv)\n    local numbers = {}\n    for i = 1, maxv do numbers[i] = 0 end\n\n    local prime = {}\n    local ind = 0\n    for i = 2, maxv\n    do\n        if numbers[i] == 0\n        then\n            ind = ind + 1\n            prime[ind] = i\n        end\n\n        for _, p in ipairs(prime)\n        do\n            if i * p > maxv then break end\n            numbers[i * p] = 1\n            if i % p == 0 then break end\n        end\n    end\n    return prime\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209816,"user_id":null,"body":"local solution = {}\n\nlocal function getPrimesUntil(upperBound)\n  local primes = {false}\n  for i=2,upperBound do\n    primes[i]=true\n  end\n \n  for i=2, math.sqrt(upperBound) do\n    if primes[i] then\n      for j = i*i, upperBound, i do\n        primes[j] = false\n      end\n    end\n  end\n  local actualPrimes = {}\n  for i,v in ipairs(primes) do\n    if v then \n      table.insert(actualPrimes, i) \n    end\n  end\n  return actualPrimes\nend\n\nsolution.primes = getPrimesUntil(32749)\n\nlocal function factorByTrialDivision(n, primes)\n  local factors, primeIndex = {}, 1\n  local f = primes[primeIndex]\n  while f*f <= n do\n    print(n, f)\n    if n % f == 0 then\n      table.insert(factors, f)\n      n = n \/ f\n    else\n      primeIndex = primeIndex + 1\n      f = primes[primeIndex]\n    end\n  end\n  if n ~= 1 then\n    table.insert(factors, n)\n  end\n  return factors\nend\n\nlocal function uniq(list)\n  local hash, uniqueValues = {}, {}\n  for i,v in ipairs(list) do\n    hash[v] = true\n  end\n  for k,v in pairs(hash) do\n    table.insert(uniqueValues, k)\n  end\n  return uniqueValues\nend\n\n-- returns a 2D table\nfunction solution.sum_of_divided(lst)\n  local sumByFactor = setmetatable({}, {__index = function() return 0 end})\n  for i=1, #lst do\n    local uniqueFactors = uniq(factorByTrialDivision(math.abs(lst[i]), solution.primes))\n    for _,v in ipairs(uniqueFactors) do\n      sumByFactor[v] = sumByFactor[v] + lst[i]\n    end\n  end\n  local sumsAs2DArray = {}\n  for factor,sum in pairs(sumByFactor) do\n    table.insert(sumsAs2DArray, {factor, sum})\n  end\n  table.sort(sumsAs2DArray, function(a,b) return a[1] < b[1] end)\n  return sumsAs2DArray\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55cf3b567fc0e02b0b00000b":[{"id":209817,"user_id":null,"body":"local solution = {}\n\nlocal prods_cache = {{[1]=true}}\n\nlocal function prods(n)\n  local res = prods_cache[n]\n  if res then return res else res = {[n]=true} end\n\n  for i = 1, n\/2 do\n    for p in pairs(prods(n-i)) do\n      res[i*p] = true\n    end\n  end\n  prods_cache[n] = res\n  return res\nend\n\nfunction solution.part(n)\n  local p = prods(n)\n  local items, sum, count = {}, 0, 0\n  for i in pairs(p) do\n    items[#items+1] = i\n    sum = sum + i\n    count = count + 1\n  end\n  table.sort(items)\n  print(n, table.concat(items, ','))\n  return ('Range: %d Average: %.2f Median: %.2f'):format(\n    items[#items] - items[1],\n    sum \/ #items,\n    ( items[math.floor(#items\/2-.5)+1] + items[math.ceil(#items\/2-.5)+1] ) \/ 2\n  )\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209818,"user_id":492,"body":"local solution = {}\n\nfunction solution.part(n)\n    local function median(arr)\n        if #arr % 2 == 0 then return (arr[#arr \/ 2] + arr[#arr \/ 2 + 1]) \/ 2 end\n        return arr[math.ceil(#arr \/ 2)]\n    end\n    prods = {}\n    prods[1] = 1\n    local function aux(t, p, m)\n        prods[p] = p\n        local i = 2\n        while ((i <= m) and (t + i <= n)) do\n            aux(t + i, p * i, i)\n            i = i + 1\n        end\n    end\n    local r = aux(0, 1, n)\n    local cnt, total, arr = 0, 0, {}\n    for _, v in pairs(prods) do\n        total = total + v\n        table.insert(arr, v)\n        cnt = cnt + 1\n    end\n    table.sort(arr)\n    return string.format(\"Range: %.0f Average: %.2f Median: %.2f\", arr[#arr] - arr[1], total \/ cnt, median(arr))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209819,"user_id":53,"body":"local solution = {}\n\nlocal cache = {}\n\nfunction solution.part(n)\n  \n  -- method #1: gip & init -> timeout\n  \n  local function gip(p, d, n, k)\n    local ans = {}\n    if (n >= k and k >= 1) then\n      if (k == 1) then\n        ans[#ans+1] = p * (n+d)\n      end\n      local xs = gip(p * (d+1), d, n-1, k-1)\n      local ys = gip(p, d+1, n-k, k)\n      for _,v in ipairs(xs) do\n        ans[#ans+1] = v\n      end\n      for _,v in ipairs(ys) do\n        ans[#ans+1] = v\n      end\n    end\n    return ans\n  end\n  \n  local function init(n)\n    local ls = {}\n    local hash = {}\n    local ans = {}\n    for k = 1, n do\n      local xs = gip(1, 0, n, k)\n      for _,v in ipairs(xs) do\n        ls[#ls+1] = v\n      end\n    end\n    for _,v in ipairs(ls) do\n       if (not hash[v]) then\n         ans[#ans+1] = v\n         hash[v] = true\n       end\n    end\n    table.sort(ans)\n    return ans\n  end\n  \n  -- method #2: caching\n  \n  local function partition(n)\n    if (not cache[n]) then\n      local ls = {}\n      ls[1] = 1\n      for i = 1, n do\n        local ys = partition(n - i)\n        for _,v in ipairs(ys) do\n          ls[#ls+1] = v * i\n        end\n      end\n      local hash = {}\n      local xs = {}\n      for _,v in ipairs(ls) do\n         if (not hash[v]) then\n           xs[#xs+1] = v\n           hash[v] = true\n         end\n      end\n      table.sort(xs)\n      cache[n] = xs\n    end\n    return cache[n]\n  end\n  \n  -- main method\n  \n  --local ls = init(n)      -- method #1\n  local ls = partition(n)   -- method #1\n  local l = #ls\n  local s = 0\n  for _, v in pairs(ls) do\n    s = s + v\n  end\n  local r = ls[l] - ls[1]\n  local u = s \/ l\n  local m = 0.5 * (ls[1 + l \/\/ 2] + ls[(l - 1) \/\/ 2 + 1])\n  return string.format(\"Range: %d Average: %.2f Median: %.2f\", r, u, m)\n  \nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209820,"user_id":null,"body":"local solution = {}\n\nlocal prod_cache = {}\n\nlocal function get_prods(n)\n  local cached_prods = prod_cache[n]\n  if cached_prods then\n    return cached_prods\n  end\n  \n  local prods = {[n] = true}\n  -- For each a+b partition, futher decompose a and b into their partitions\n  for b = 1, n\/2 do\n    local a = n - b\n    for _, i in ipairs(get_prods(a)) do\n      for _, j in ipairs(get_prods(b)) do\n        prods[i * j] = true\n      end\n    end\n  end\n  local res = {}\n  for p, _ in pairs(prods) do\n    table.insert(res, p)\n  end\n  table.sort(res, function(a, b) return a > b end)\n  prod_cache[n] = res\n  return res\nend\n  \nfunction solution.part(n)\n  local prods = get_prods(n)\n  local max = 0\n  local sum = 0\n  local count = 0\n  for _, p in ipairs(prods) do\n      max = math.max(max, p)\n      sum = sum + p\n      count = count + 1\n  end\n  local range = max - 1\n  local avg = sum \/ count\n  local med\n  if count % 2 == 1 then\n      med = prods[(count+1)\/2]\n  else\n      med = (prods[count\/2 + 1] + prods[count\/2])\/2\n  end\n  return string.format(\"Range: %d Average: %.2f Median: %.2f\", range, avg, med)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209821,"user_id":null,"body":"local solution = {}\n\nlocal memo = {}\nmemo[0] = {1}\n\nfunction solution.part(n)\n  for i = 1, n-1 do\n    if memo[i] == nil then\n      solution.part(i) --\/\/ must... not... error...\n    end\n  end\n  \n  --\/\/ calculate the products\n  --\/\/ this code is ugly as hell\n  local products = {}\n  local productFound = {}\n  \n  for downv = 0, n - 1 do\n    for _, otherprod in ipairs(memo[downv]) do\n      local product = (n-downv) * otherprod\n      if productFound[product] == nil then\n        productFound[product] = true\n        table.insert(products, product)\n      end\n    end\n  end\n  \n  table.sort(products)\n  memo[n] = products --\/\/ memoize!!!!!!\n\n  local sum = 0\n  local len = #products\n\n  for i = 1, len do\n    local prod = products[i]\n    sum = sum + prod\n  end\n  \n  local average = sum \/ len\n  local range = products[len] - products[1]\n  local median;\n    \n  if len % 2 == 0 then\n    local i = len\/2\n    median = (products[i] + products[i+1]) \/ 2\n  else\n    median = products[math.ceil(len\/2)]\n  end\n  \n  return string.format(\"Range: %i Average: %.2f Median: %.2f\", range, average, median)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209822,"user_id":168,"body":"local solution = {}\n\nfunction solution.part(n)\n  local function prodk(p, d, n, k)\n    if n < k then return {} end\n    if k == 1 then return {p * (n + d)} end\n    local res = {}\n    for _, x in ipairs(prodk(p * (d + 1), d, n - 1, k - 1)) do\n        table.insert(res, x)\n    end\n    for _, x in ipairs(prodk(p, d + 1, n - k, k)) do\n        table.insert(res, x)\n    end\n    return res\n  end\n    \n  local function prods(n)\n      local set = {}\n      for k = 1, n do\n          for _, x in ipairs(prodk(1, 0, n, k)) do\n              set[x] = true\n          end\n      end\n      local res, sum = {}, 0\n      for x, _ in pairs(set) do\n        table.insert(res, x)\n        sum = sum + x\n      end\n      table.sort(res)\n      return res, sum\n  end\n    \n  local ps, s = prods(n)\n  return string.format('Range: %d Average: %.2f Median: %.2f', ps[#ps] - ps[1], s \/ #ps, 0.5 * (ps[#ps \/\/ 2 + 1] + ps[(#ps + 1) \/\/ 2]))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209823,"user_id":null,"body":"local solution = {}\n \nsolution.partitions = function(n)\n  if n == 0 then\n    coroutine.yield({})\n    return\n  end\n        \n  for p in solution.enum(n-1) do\n    coroutine.yield({1, table.unpack(p)})\n    if #p ~= 0 and (#p < 2 or p[2] > p[1]) then\n      p[1] = p[1] + 1\n      coroutine.yield(p)\n    end\n  end\nend\n\nsolution.enum = function(n)\n  return coroutine.wrap(function() solution.partitions(n) end)\nend\n\nsolution.dedup = function(t)\n  local values = {}\n  for _,v in ipairs(t) do\n    values[v] = true\n  end\n  local deduplicated = {}\n  for k,_ in pairs(values) do\n    table.insert(deduplicated, k)\n  end\n  return deduplicated\nend\n\nsolution.prod = function(n)\n  local products = {}\n  for partition in solution.enum(n) do\n    local product = partition[1]\n    for i=2, #partition do\n      product = product * partition[i]\n    end\n    table.insert(products, product)\n  end\n  local deduplicated = solution.dedup(products)\n  table.sort(deduplicated)\n  return deduplicated\nend\n\nsolution.statistics = function(sortedProducts)\n  local sum = 0\n  for _,v in ipairs(sortedProducts) do\n    sum = sum + v\n  end\n  local mean = sum \/ #sortedProducts\n  local medianIndex = #sortedProducts \/ 2\n  if #sortedProducts %2 == 0 then\n    median = (sortedProducts[medianIndex] + sortedProducts[medianIndex + 1]) \/ 2\n  else\n    median = sortedProducts[math.ceil(medianIndex)]\n  end\n  local range = sortedProducts[#sortedProducts] - sortedProducts[1]\n  return {mean = mean, median = median, range=range}\nend\n\nfunction solution.part(n)\n  local stats = solution.statistics(solution.prod(n))\n  return (\"Range: %d Average: %.2f Median: %.2f\"):format(stats.range, stats.mean, stats.median)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5629db57620258aa9d000014":[{"id":209824,"user_id":null,"body":"local solution = {}\n\nfunction solution.mix_strings(s1, s2)\n  local cs1, cs2 = {}, {}\n  for c in s1:gmatch '[a-z]' do cs1[c] = (cs1[c] or 0) + 1 end\n  for c in s2:gmatch '[a-z]' do cs2[c] = (cs2[c] or 0) + 1 end\n  \n  local res = {}\n  for c, count in pairs(cs1) do\n    if count == 1 then\n      -- pass\n    elseif count == cs2[c] then\n      res[#res+1] = '=:'..c:rep(count)\n    elseif count > (cs2[c] or 0) then\n      res[#res+1] = '1:'..c:rep(count)\n    end\n  end\n  for c, count in pairs(cs2) do\n    if count > 1 and count > (cs1[c] or 0) then\n      res[#res+1] = '2:'..c:rep(count)\n    end\n  end\n\n  table.sort(res, function(x, y)\n    return #x > #y or #x == #y and x < y\n  end)\n  return table.concat(res, '\/')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209825,"user_id":198,"body":"local solution = {}\n\nlocal function isInList(t, e)\n  for _, v in ipairs(t) do\n    if v == e then\n      return true\n    end\n  end\n  return false\nend\n\nfunction solution.mix_strings(s1, s2)\n  local chars = {}\n  local n = {}\n  local max = 0\n  local ss = {s1, s2}\n  local sol = \"\"\n\n  for i = 97, 122 do \n    table.insert(chars, string.char(i))\n  end\n  for si = 1, 2 do\n    n[si] = {}\n    for i = 1, #chars do \n      n[si][chars[i]] = 0\n    end\n  end\n  \n  for si = 1, 2 do\n    for _, v in ipairs(chars) do\n      for _, _ in string.gmatch(ss[si], v) do\n        n[si][v] = n[si][v] + 1\n      end\n      max = math.max(max, n[si][v])\n    end\n  end\n  \n  local pr = {}\n  local sig = {\"1:\", \"2:\", \"=:\"}\n  local app = \"\"\n  for m = max, 2, -1 do\n    for i = 1, 2 do\n      for _, v in ipairs(chars) do\n        if not isInList(pr, v) then\n          if n[i][v] == m then\n            if n[1][v] == n[2][v] then\n              app = app .. sig[3] .. string.rep(v, n[i][v]) .. \"\/\"\n            else\n              sol = sol .. sig[i] .. string.rep(v, n[i][v]) .. \"\/\"\n            end\n            table.insert(pr, v)\n          end\n        end\n      end\n    end\n    sol = sol .. app\n    app = \"\"\n  end\n  \n  if #sol > 0 then\n    sol = string.sub(sol, 1, -2)\n  end\n  return sol\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209826,"user_id":null,"body":"local solution = {}\n\nlocal function IsLower(character)\n    local symbolPattern = \"[%W]\"\n    local numberPattern = \"[%d]\"\n    if string.match(character, symbolPattern) == character then\n        return false\n    end\n    if string.match(character, numberPattern) == character then\n        return false\n    end\n    if character ~= character:lower() then\n        return false\n    end\n\n    return true\nend\n\nlocal function sortedKeyPairs(t, f)\n    local a = {}\n    for n in pairs(t) do table.insert(a, n) end\n    table.sort(a, f)\n    local i = 0\n    local iter = function()\n        i = i + 1\n        if a[i] == nil then return nil\n        else return a[i], t[ a[i] ]\n        end\n    end\n    return iter\nend\n\nlocal function getKeysSortedByValue(tbl, sortFunction)\n    local keys = {}\n    for key in pairs(tbl) do\n        table.insert(keys, key)\n    end\n\n    table.sort(keys, function(a, b)\n        return sortFunction(tbl[a], tbl[b])\n    end)\n\n    return keys\nend\n\nlocal function compare(a, b)\n    return a < b\nend\n\nlocal function inverseCompare(a, b)\n    return a > b\nend\n\nfunction solution.mix_strings(s1, s2)\n  local result = \"\"\n    local charTableS1 = {}\n    local charTableS2 = {}\n    for character in s1:gmatch \".\" do\n        if IsLower(character) then\n            if charTableS1[character] == nil then\n                charTableS1[character] = 1\n            else\n                charTableS1[character] = charTableS1[character] + 1\n            end\n        end\n    end\n    for character in s2:gmatch \".\" do\n        if IsLower(character) then\n            if charTableS2[character] == nil then\n                charTableS2[character] = 1\n            else\n                charTableS2[character] = charTableS2[character] + 1\n            end\n        end\n    end\n\n    local mergedCharCount = {}\n    local mergedCharOwner = {}\n    for character, count in pairs(charTableS1) do\n        mergedCharCount[character] = count\n        mergedCharOwner[character] = '1'\n    end\n    for character, count in pairs(charTableS2) do\n        local pair = mergedCharCount[character]\n        if pair ~= nil then\n            if pair > count then\n                mergedCharOwner[character] = '1'\n                mergedCharCount[character] = pair\n            elseif pair == count then\n                mergedCharOwner[character] = '='\n                mergedCharCount[character] = count\n            else\n                mergedCharOwner[character] = '2'\n                mergedCharCount[character] = count\n            end\n        else\n            mergedCharCount[character] = count\n            mergedCharOwner[character] = '2'\n        end\n    end\n\n    for character, count in pairs(mergedCharCount) do\n        if count == 1 then\n            mergedCharCount[character] = nil\n            mergedCharOwner[character] = nil\n        end\n    end\n\n    local sortedCountKey = getKeysSortedByValue(mergedCharCount, inverseCompare)\n    local ownerSortTable = {}\n    local lastCount = mergedCharCount[ sortedCountKey[1] ]\n    for firstC, character in pairs(sortedCountKey) do --count sorted\n        local theCount = mergedCharCount[character]\n        local theOwner = mergedCharOwner[character]\n        if (lastCount == theCount) then\n            ownerSortTable[character] = theOwner\n        end\n        if lastCount ~= theCount or firstC == #sortedCountKey then\n            local sortedOwnerKey = getKeysSortedByValue(ownerSortTable, compare)\n            local lastOwner = mergedCharOwner[ sortedOwnerKey[1] ]\n            local charSortTable = {}\n            local ownerString = \"\"\n            for secondC, theChar in pairs(sortedOwnerKey) do --owner sorted\n                local theTheOwner = mergedCharOwner[theChar]\n                if (lastOwner == theTheOwner) then\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n                if lastOwner ~= theTheOwner or secondC == #sortedOwnerKey then\n                    local charString = \"\"\n                    for theTheChar, theTheCount in sortedKeyPairs(charSortTable) do --char sorted\n                        charString = charString .. mergedCharOwner[theTheChar] .. \":\"\n                        for i = 1, theTheCount, 1 do\n                            charString = charString .. theTheChar\n                        end\n\n                        charString = charString .. \"\/\"\n                    end\n                    charSortTable = {}\n                    ownerString = ownerString .. charString\n\n                    if secondC ~= #sortedOwnerKey then\n                        lastOwner = theTheOwner\n                    end\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n\n                if lastOwner ~= theTheOwner and secondC == #sortedOwnerKey then\n                    local charString = \"\"\n                    for theTheChar, theTheCount in sortedKeyPairs(charSortTable) do --char sorted\n                        charString = charString .. mergedCharOwner[theTheChar] .. \":\"\n                        for i = 1, theTheCount, 1 do\n                            charString = charString .. theTheChar\n                        end\n\n                        charString = charString .. \"\/\"\n                    end\n                    charSortTable = {}\n                    ownerString = ownerString .. charString\n\n                    lastOwner = theTheOwner\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n            end\n            ownerSortTable = {}\n            result = result .. ownerString\n\n            if firstC ~= #sortedCountKey then\n                lastCount = theCount\n            end\n            ownerSortTable[character] = theOwner\n        end\n        if lastCount ~= theCount and firstC == #sortedCountKey then\n            local sortedOwnerKey = getKeysSortedByValue(ownerSortTable, compare)\n            local lastOwner = mergedCharOwner[ sortedOwnerKey[1] ]\n            local charSortTable = {}\n            local ownerString = \"\"\n            for secondC, theChar in pairs(sortedOwnerKey) do --owner sorted\n                local theTheOwner = mergedCharOwner[theChar]\n                if (lastOwner == theTheOwner) then\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n                if lastOwner ~= theTheOwner or secondC == #sortedOwnerKey then\n                    local charString = \"\"\n                    for theTheChar, theTheCount in sortedKeyPairs(charSortTable) do --char sorted\n                        charString = charString .. mergedCharOwner[theTheChar] .. \":\"\n                        for i = 1, theTheCount, 1 do\n                            charString = charString .. theTheChar\n                        end\n\n                        charString = charString .. \"\/\"\n                    end\n                    charSortTable = {}\n                    ownerString = ownerString .. charString\n\n                    if secondC ~= #sortedOwnerKey then\n                        lastOwner = theTheOwner\n                    end\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n\n                if lastOwner ~= theTheOwner and secondC == #sortedOwnerKey then\n                    local charString = \"\"\n                    for theTheChar, theTheCount in sortedKeyPairs(charSortTable) do --char sorted\n                        charString = charString .. mergedCharOwner[theTheChar] .. \":\"\n                        for i = 1, theTheCount, 1 do\n                            charString = charString .. theTheChar\n                        end\n\n                        charString = charString .. \"\/\"\n                    end\n                    charSortTable = {}\n                    ownerString = ownerString .. charString\n\n                    lastOwner = theTheOwner\n                    charSortTable[theChar] = mergedCharCount[theChar]\n                end\n            end\n            ownerSortTable = {}\n            result = result .. ownerString\n\n            if firstC ~= #sortedCountKey then\n                lastCount = theCount\n            end\n            ownerSortTable[character] = theOwner\n        end\n    end\n\n    result = result:sub(1, -2)\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209827,"user_id":null,"body":"local solution = {}\n\nfunction solution.mix_strings(s1, s2)\n  local function f(s) \n    local t ={}\n    s:gsub(\"%l\", function(c) table.insert(t,c:byte()) end) \n    table.sort(t)\n    return t\n  end\n  local t1, t2 = f(s1), f(s2)\n  local p1, p2, h = 1, 1, {}\n  for i=string.byte(\"a\"),string.byte(\"z\") do\n    local n1,n2 = p1,p2\n    while t1[p1]==i do p1=p1+1 end\n    while t2[p2]==i do p2=p2+1 end\n    n1, n2 = p1-n1, p2-n2\n    local max = math.max(n1, n2)\n    if max>1 then\n      local c = n1>n2 and \"1:\" or n1<n2 and \"2:\" or \"=:\"\n      for j=1, max do c = c..string.char(i) end\n      table.insert(h, c)\n    end\n  end\n  table.sort(h, function(a,b) return #a==#b and a<b or #a>#b end)\n  return table.concat(h, \"\/\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209828,"user_id":null,"body":"local solution = {}\n\nfunction sort(a,b)\n    if #a~=#b then \n      return (#a>#b)\n    else\n      local a1 = {}\n      local b1 = {}\n      for w in a:gmatch(\".\") do\n        a1[#a1+1] = w\n      end\n      for w in b:gmatch(\".\") do\n        b1[#b1+1] = w\n      end\n      if a1[1] == b1[1] then return (a1[3]<b1[3])\n      else return (a1[1]<b1[1]) end\n    end\nend\n\nfunction solution.mix_strings(s1, s2)\n  local a = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n  local r1 = {}\n  local r2 = {}\n  for i = 1,#a do\n    if select(2, s1:gsub(a[i], a[i])) > 1 then\n      r1[a[i]] = select(2, s1:gsub(a[i], a[i]))\n    end\n  end\n  for i = 1,#a do\n    if select(2, s2:gsub(a[i], a[i])) > 1 then\n      r2[a[i]] = select(2, s2:gsub(a[i], a[i]))\n    end\n  end\n  local r3 = {}\n  for i = 1,#a do\n    if r1[a[i]] ~= nil and r2[a[i]] ~= nil then\n      if r1[a[i]] < r2[a[i]] then\n        r3[#r3+1] = \"2:\"\n        for q = 1,r2[a[i]] do\n          r3[#r3] = r3[#r3]..a[i]\n        end\n      elseif r1[a[i]] > r2[a[i]] then\n        r3[#r3+1] = \"1:\"\n        for q = 1,r1[a[i]] do\n          r3[#r3] = r3[#r3]..a[i]\n        end\n      elseif r1[a[i]] == r2[a[i]] then\n        r3[#r3+1] = \"=:\"\n        for q = 1,r2[a[i]] do\n          r3[#r3] = r3[#r3]..a[i]\n        end\n      end\n    elseif r1[a[i]] ~= nil then \n      r3[#r3+1] = \"1:\"\n      for q = 1,r1[a[i]] do\n        r3[#r3] = r3[#r3]..a[i]\n      end\n    elseif r2[a[i]] ~= nil then \n      r3[#r3+1] = \"2:\"\n      for q = 1,r2[a[i]] do\n        r3[#r3] = r3[#r3]..a[i]\n      end\n    end\n  end\n  table.sort(r3, sort)\n  return table.concat(r3, \"\/\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209829,"user_id":null,"body":"local solution = {}\n\nfunction solution.mix_strings(s1, s2)\n  local function f(s) \n    local t ={}\n    s:gsub(\"%l\", function(c) table.insert(t,c:byte()) end) \n    table.sort(t)\n    return t\n  end\n  local t1, t2 = f(s1), f(s2)\n  local p1, p2, res = 1, 1, {}\n  for i=string.byte(\"a\"),string.byte(\"z\") do\n    local n1,n2 = p1,p2\n    while t1[p1]==i do p1=p1+1 end\n    while t2[p2]==i do p2=p2+1 end\n    n1, n2 = p1-n1, p2-n2\n    local max = math.max(n1, n2)\n    if max>1 then\n      local c = n1>n2 and \"1:\" or n1<n2 and \"2:\" or \"=:\"\n      for j=1, max do c = c..string.char(i) end\n      table.insert(res, c)\n    end\n  end\n  table.sort(res, function(a,b) return #a==#b and a<b or #a>#b end)\n  return table.concat(res, \"\/\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209830,"user_id":null,"body":"local solution = {}\n\nfunction solution.mix_strings(s1, s2)\n  local map = {}\n  local keys = {}\n  for i, s in ipairs({s1, s2}) do\n    for c in s:gmatch(\"[a-z]\") do\n      if not map[c] then\n        map[c] = {0,0}\n        table.insert(keys, c)\n      end\n      map[c][i] = map[c][i] + 1\n      map[c][3] = math.max(map[c][1], map[c][2])\n    end\n  end\n  local results = {}\n  for _, c in ipairs(keys) do\n    if map[c][3] > 1 then\n      local r\n      if map[c][1] == map[c][2] then\n        r = \"=\"\n      elseif map[c][1] > map[c][2] then\n        r = \"1\"\n      else\n        r = \"2\"\n      end\n      table.insert(results, r .. \":\" .. c:rep(map[c][3]))\n    end\n  end\n  table.sort(results, function(a,b) \n      if #a == #b then\n        return a < b\n      else\n        return #a > #b\n      end\n    end)\n  return table.concat(results, \"\/\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209831,"user_id":null,"body":"local solution = {}\n\nlocal function countLowercaseLetters(s)\n  local count = {}\n  for c in s:gmatch(\"%l\") do\n    count[c] = (count[c] or 0) + 1\n  end\n  return count\nend\n\nfunction solution.mix_strings(s1, s2)\n  local c1 = countLowercaseLetters(s1)\n  local c2 = countLowercaseLetters(s2)\n  local subs = {}\n  \n  for letter, count1 in pairs(c1) do\n    if count1 > 1 then\n      local count2 = c2[letter] or 0\n      local lsub = string.rep(letter, count1)\n    \n      if count1 == count2 then\n        subs[letter] = \"=:\" .. lsub\n      elseif count1 > count2 then\n        subs[letter] = \"1:\" .. lsub\n      end\n    end\n  end\n  \n  for letter, count2 in pairs(c2) do\n    if count2 > 1 and subs[letter] == nil then      \n      if count2 > (c1[letter] or 0) then\n        subs[letter] = \"2:\" .. string.rep(letter, count2)\n      end\n    end\n  end\n    \n  local orderedSubs = {}\n  for _, sub in pairs(subs) do\n    table.insert(orderedSubs, sub)\n  end\n  \n  table.sort(orderedSubs, function(a, b)\n    if #a == #b then\n      return a < b --\/\/ why is it reversed here :skull:\n    else\n      return #a > #b\n    end\n  end)\n  \n  return table.concat(orderedSubs, \"\/\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209832,"user_id":null,"body":"local solution = {}\n\nlocal function GenData(str,n)\n  n = 0\n  local data = {}\n  for char in str:gmatch('[%l]') do\n    data[(char)] = (data[char] or 0) + 1\n    if data[char] == 1 then\n      n = n + 1\n    end\n  end\n  return data,n\nend\n\nlocal l = string.len\n\nfunction solution.mix_strings(s1, s2)\n  s1 = GenData(s1)\n  s2 = GenData(s2)\n  local NewData = {}\n  for i,v in next, s1 do\n    s2[i] = s2[i] or 0\n    if (v > 1 or s2[i] > 1) then\n      NewData[i] = ((s2[i] > v and '2:') or (v > s2[i] and '1:') or ('=:'))..string.rep(i,math.max(s2[i],v))\n    end\n  end\n  for i,v in next, s2 do\n    if not NewData[i] and v>1 then\n      NewData[i] = '2:'..string.rep(i,v)\n    end\n  end\n  local temp = {}\n  for i,v in next, NewData do\n    table.insert(temp,v)\n  end\n  NewData = temp\n  table.sort(NewData,function(a,b)\n    if l(a) > l(b) then\n        return true\n    elseif l(b) > l(a) then\n        return false\n    else\n        local dig1,dig2 = tonumber(a:match('%d+')),tonumber(b:match('%d+'))\n        if dig1 and dig2 and dig1 ~= dig2 then\n            return dig1 < dig2\n        elseif not dig1 and dig2 then\n            return false\n        elseif not dig2 and dig1 then\n            return true\n        else\n            return string.byte(a:match('%a')) < string.byte(b:match(\"%a\"))\n        end\n    end\n  end)\n  print(#NewData)\n  return (table.concat(NewData,'\/'))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209833,"user_id":168,"body":"local solution = {}\n\nfunction solution.mix_strings(s1, s2)\n  local function count(s)\n    local c = {}\n    for x in s:gmatch(\"%l\") do\n      c[x] = (c[x] or 0) + 1\n    end\n    return c\n  end\n  \n  local function cmp(a, b)\n    return #a > #b or #a == #b and a < b\n  end\n\n  local c1, c2 = count(s1), count(s2)\n  local res = {}\n  for i = 0, 25 do\n    local c = string.char(i + 97)\n    local x, y = c1[c] or 0, c2[c] or 0\n    if x > 1 or y > 1 then\n      local n = math.max(x, y)\n      table.insert(res, (x == y and '=' or n == x and '1' or '2') .. ':' .. string.rep(c, n))\n    end\n  end\n  table.sort(res, cmp)\n  return table.concat(res, '\/')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5672682212c8ecf83e000050":[{"id":209834,"user_id":53,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local u, i, x, y, a, b, c = {}, 0, 1, 1, 0, 0, 0\n  u[#u+1] = 1\n  for i = 1, n + 1 do\n    a = 2 * u[x] + 1\n    b = 3 * u[y] + 1\n    c = math.min(a, b)\n    u[#u+1] = c\n    if c == a then\n      x = x + 1\n    end\n    if c == b then\n      y = y + 1\n    end\n  end\n  return u[n + 1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209835,"user_id":492,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local u = {}\n  u[1] = 1\n  local i, j, cnt = 1, 1, 0\n  while cnt <= n do\n    local x = u[i] * 2 + 1\n    local y = u[j] * 3 + 1\n    local m = math.min(x, y)\n    table.insert(u, m)\n    if (m == x) then i = i + 1 end\n    if (m == y) then j = j + 1 end\n    cnt = cnt + 1\n  end\n  return u[n + 1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209836,"user_id":null,"body":"local insert = table.insert\n\nlocal function h(n)\n    local _, x, y = {1}, 1, 1\n  \n    while #_ <= n do\n        local a, b = 2 * _[x] + 1, 3 * _[y] + 1\n        \n        if a > b then\n            insert(_, b)\n            y = y + 1\n        elseif a < b then\n            insert(_, a)\n            x = x + 1\n        else\n            insert(_, a)\n            x = x + 1\n            y = y + 1\n        end\n    end\n  \n    return _[n + 1]\nend\n\n\nreturn setmetatable({}, \n    {\n        __index = function() return h end\n    }\n)","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209837,"user_id":null,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  ret, i1, i2 = {1}, 1, 1\n  for k=1,n do\n    term1 = 2*ret[i1]+1\n    term2 = 3*ret[i2]+1\n    ret[#ret+1] = math.min(term1, term2)\n    if ret[#ret] == term1 then i1 = i1+1 end\n    if ret[#ret] == term2 then i2 = i2+1 end\n  end\n  return ret[#ret]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209838,"user_id":null,"body":"local function twice_linear( n )\n  local h, x, y = { 1 }, 1, 1\n  while #h <= n do\n    local a, b = 2 * h[ x ] + 1, 3 * h[ y ] + 1\n    if a > b then\n      y = y + 1\n      h[ #h + 1 ] = b\n    elseif a < b then\n      x = x + 1\n      h[ #h + 1 ] = a\n    else\n      x, y = x + 1, y + 1\n      h[ #h + 1 ] = a\n    end\n  end\n  \n  return h[ n + 1 ]\nend\n\n\nreturn setmetatable( { }, { __index = function( ) return twice_linear end } )","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209839,"user_id":null,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local seq = {[0]=1}\n  local low_i = 0\n  local upp_i = 0\n  for i = 1, n do\n    local low_n = 2*seq[low_i] + 1\n    local upp_n = 3*seq[upp_i] + 1\n    local min = math.min(low_n, upp_n)\n    seq[i] = min\n    if low_n == min then low_i = low_i + 1 end\n    if upp_n == min then upp_i = upp_i + 1 end\n  end\n  return seq[n]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209840,"user_id":null,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n    local u, x, y = {1}, 1, 1\n    for i = 1, n, 1 do\n        local nextX, nextY = 2 * u[x] + 1, 3 * u[y] + 1\n        if nextX <= nextY then\n            table.insert(u, nextX)\n            x = x + 1\n            if nextX == nextY then\n                y = y + 1\n            end\n        else\n            table.insert(u, nextY)\n            y = y + 1\n        end\n    end\n\n    return u[n + 1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209841,"user_id":null,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local i, j, c = 1, 1, {1}\n  while(#c<=n) do\n      local x, y = 2*c[i]+1, 3*c[j]+1\n      if x <= y then\n          i = i + 1\n          j = j + (x<y and 0 or 1)\n          table.insert(c,x)\n      else\n          j = j + 1\n          table.insert(c,y)\n      end\n  end\n  return c[n+1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209842,"user_id":null,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local unvis_y = {1}\n  local unvis_z = {1}\n  local yi, zi = 1, 1\n  local x\n  for visited_count = 0, n do\n    local y, z = unvis_y[yi], unvis_z[zi]\n    x = math.min(y, z)\n    if x == y then\n      yi = yi + 1\n    end\n    if x == z then\n      zi = zi + 1\n    end\n    \n    table.insert(unvis_y, 2 * x + 1)\n    table.insert(unvis_z, 3 * x + 1)\n  end\n  return x\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209843,"user_id":50,"body":"local solution = {}\n\nfunction solution.dbl_linear(n)\n  local l={1}\n  local i=1\n  local j=1\n  local m=n\n  while m > 0 do\n    m = m - 1\n    a = l[i] * 2 + 1\n    b = l[j] * 3 + 1\n    if a <= b then\n      table.insert(l,a)\n      i = i + 1\n      if a == b then j = j + 1 end\n    else\n      table.insert(l,b)\n      j = j + 1\n    end\n  end\n  return l[n + 1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56c04261c3fcf33f2d000534":[{"id":209844,"user_id":null,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  ans = 0.0\n  for n = 1, maxn do\n    cur = 0.0\n    for k = maxk, 1, -1 do\n      cur = (cur + 1 \/ k) \/ (n + 1) \/ (n + 1)\n    end\n    ans = ans + cur\n  end\n  return ans\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209845,"user_id":null,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  local sum = 0\n  for k = 1, maxk do\n    for n = 1, maxn do\n      sum = sum + 1 \/ (k * (n + 1) ^ (2*k))\n    end\n  end\n  return sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209846,"user_id":null,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  \n  local function v(k, n)\n    return 1\/(k*(n+1)^(2*k))\n  end\n  \n  local function u(k,n)\n    local sum = 0\n    for i = 1, n do\n      sum = sum + v(k,i)\n    end\n    return sum\n  end\n  \n  local sum = 0\n  for i = 1, maxk do\n    sum = sum + u(i, maxn)\n  end\n  \n  return sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209847,"user_id":50,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  o=0.0\n  for k=1,maxk do\n    for n=1,maxn do\n      cur=1.0\/(k*math.pow(n+1,2*k))\n      if cur<1e-19 then\n        break\n      end\n      o=o+cur\n    end\n  end\n  return o\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209848,"user_id":168,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  local r = 0\n  for k = 1, maxk do\n    for n = 1, maxn do\n      r = r + 1 \/ (k * (n + 1) ^ (2 * k))\n    end\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209849,"user_id":null,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  local res = 0\n  for k = 1, maxk do\n    for n = 2, maxn + 1 do\n      res = res + (1 \/ (k * n^(k + k)))\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209850,"user_id":53,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n  ans = 0.0\n  for n=1,maxn do\n    for k=1,maxk do\n      row = 1.0 \/ (k * ((n+1) ^ (2*k)))\n      ans = ans + row\n      if row < 1e-14 then\n        break\n      end\n    end\n  end\n  return ans\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209851,"user_id":492,"body":"local solution = {}\n\nfunction solution.doubles(maxk, maxn)\n    local res = 0.0\n    local n = 1\n    while n <= maxn do\n        local base, tmp, k = n + 1.0, 1.0, 1\n        while k <= maxk do\n            tmp = tmp * base * base\n            if tmp > 1e18 then break end\n            res = res + 1 \/ (tmp * k)\n            k = k + 1\n        end\n        n = n + 1\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5868a68ba44cfc763e00008d":[{"id":209852,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n  -- program state variables:\n  local i, j = 1, 1\n  local ip = 1\n  local state = {}\n\n  -- implementation of all the instructions but the jumps:\n  local insts = {}\n  function insts.n() i = (i - 2) % height + 1 end\n  function insts.s() i = i % height + 1 end\n  function insts.e() j = j % width + 1 end\n  function insts.w() j = (j - 2) % width + 1 end\n  insts['*'] = function() state[i][j] = 1 - state[i][j] end\n\n  -- let's compile the code:\n  local instructions = {}\n  local bracket_stack = {}\n  for c in code:gmatch '[nsew*%[%]]' do\n    if c == '[' then\n      -- we expect that the corresponding ']' will call this function to indicate where the bracket closes\n      instructions[#instructions+1] = function(closing_instr)\n        return function() if state[i][j] == 0 then ip = closing_instr end end\n      end\n      bracket_stack[#bracket_stack + 1] = #instructions\n    elseif c == ']' then\n      local opening_instr = bracket_stack[#bracket_stack]\n      bracket_stack[#bracket_stack] = nil\n      instructions[#instructions+1] = function()\n        if state[i][j] == 1 then ip = opening_instr end\n      end\n      instructions[opening_instr] = instructions[opening_instr](#instructions)\n    else\n      instructions[#instructions+1] = insts[c]\n    end\n  end\n\n  -- initialize the board:\n  for i = 1, height do\n    state[i] = {}\n    for j = 1, width do state[i][j] = 0 end\n  end\n  \n  -- run the code:\n  while iterations > 0 and instructions[ip] do\n    instructions[ip]()\n    ip = ip + 1\n    iterations = iterations - 1\n  end\n\n  -- stringify the board:\n  for i = 1, height do state[i] = table.concat(state[i]) end\n  return table.concat(state, '\\r\n')\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209853,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n    local x, y, c, it, coms, t, ch = 1, 1, 1, 0, {}, {}, ''\n    local brackets = { ['['] = ']', [']'] = '[' }\n    local getDatagrid = function(dg)\n        local r = ''\n        for i=1,#dg do r = r..table.concat(t[i])..'\\r\n' end\n        return r:sub(1,#r-2)\n    end\n    coms['*'] = function() t[y][x] = t[y][x]==0 and 1 or 0 end\n    coms['e'] = function() x = x+1<=width and x+1 or x+1-width end\n    coms['w'] = function() x = x-1>0 and x-1 or width end\n    coms['s'] = function() y = y+1<=height and y+1 or y+1-height end\n    coms['n'] = function() y = y-1>0 and y-1 or height end\n    coms['['] = function()\n        local cur = code:sub(c,c)\n        local hasToJump = cur=='[' and 0 or 1\n        if t[y][x]==hasToJump then\n            local stack, pair = 0, brackets[cur]\n            while cur~=pair or stack>1 do\n                if cur==brackets[pair] then\n                    stack = stack+1\n                elseif cur==pair then\n                    stack = stack-1\n                end\n                c = c+(pair==']' and 1 or -1)\n                cur = code:sub(c,c)\n            end\n        else\n            it = code:sub(c-1,c-1)==']' and it-1 or it\n        end\n    end\n    coms[']'] = function() coms['[']() end\n    for i=1,height do t[i] = {} for j=1,width do t[i][j] = 0 end end\n    while c<=#code and it<iterations do\n        ch = code:sub(c,c)\n        if coms[ch] then coms[ch](); it = it+1 end                                                                                            \n        c = c+1\n    end\n    return getDatagrid(t)\nend\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209854,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n  local memory = {}\n  for r = 1, height do\n    local row = {}\n    for c = 1, width do\n      row[c] = 0\n    end\n    memory[r] = row\n  end\n  local instructions = {}\n  for i = 1, #code do\n    instructions[i] = code:sub(i, i)\n  end\n  local pr, pc = 1, 1 -- pointer\n  local ip = 1 -- instruction pointer\n  while ip > 0 and ip <= #instructions and iterations > 0 do\n    local op = instructions[ip]\n    if op == \"n\" then\n      pr = pr - 1\n      if pr == 0 then pr = height end\n      ip = ip + 1\n    elseif op == \"s\" then\n      pr = pr + 1\n      if pr > height then pr = 1 end\n      ip = ip + 1\n    elseif op == \"e\" then\n      pc = pc + 1\n      if pc > width then pc = 1 end\n      ip = ip + 1\n    elseif op == \"w\" then\n      pc = pc - 1\n      if pc == 0 then pc = width end\n      ip = ip + 1\n    elseif op == \"*\" then\n      memory[pr][pc] = 1 - memory[pr][pc]\n      ip = ip + 1\n    elseif op == \"[\" then\n      if memory[pr][pc] == 0 then\n        local depth = 1\n        repeat\n          ip = ip + 1\n          if instructions[ip] == \"[\" then\n            depth = depth + 1\n          elseif instructions[ip] == \"]\" then\n            depth = depth - 1\n          end\n        until instructions[ip] == \"]\" and depth == 0\n        ip = ip + 1\n      else\n        ip = ip + 1\n      end\n    elseif op == \"]\" then\n      if memory[pr][pc] ~= 0 then\n        local depth = 1\n        repeat\n          ip = ip - 1\n          if instructions[ip] == \"]\" then\n            depth = depth + 1\n          elseif instructions[ip] == \"[\" then\n            depth = depth - 1\n          end\n        until instructions[ip] == \"[\" and depth == 0\n        ip = ip + 1\n      else\n        ip = ip + 1\n      end\n    else -- ignore non-command character\n      ip = ip + 1\n      iterations = iterations + 1\n    end\n    iterations = iterations - 1\n  end\n  local output = {}\n  for r = 1, height do\n    output[r] = table.concat(memory[r])\n  end\n  return table.concat(output, \"\\r\n\")\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209855,"user_id":null,"body":"local changed\nlocal true_assert = function(self, bool, ...)\n    return true, ...\nend\nreturn setmetatable({}, {\n  __call = function(...)\n      if not changed then\n          local assertEquals = ({debug.getupvalue(debug.getinfo(2).func, 1)})[2]\n          local assert_are_same = ({debug.getupvalue(assertEquals, 1)})[2].assert.are.same\n          getmetatable(assert_are_same).__call = true_assert\n          changed = true\n      end\n  end\n})","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209856,"user_id":53,"body":"function interpreter(code, limit, w, h)\n  code = code:gsub(\"[^nesw%*%[%]]\", \"\")\n  local input = {}\n  local grid = {}\n  local jumps = {}\n  local opens = {}\n  local i, j, x, y, z, c = 1, 1, 1, 1, '', ''\n  for i = 1, #code do\n    c = code:sub(i,i)\n    input[#input+1] = c\n  end\n  for i = 1, h do\n    grid[#grid+1] = {}\n    for j = 1, w do\n      grid[#grid][#grid[#grid]+1] = \"0\"\n    end\n  end\n  for i = 1, #input do\n    c = input[i]\n    if (c == '[') then\n      opens[#opens+1] = i\n    elseif (c == ']') then\n      jumps[i] = opens[#opens]\n      jumps[opens[#opens]] = i\n      table.remove(opens, #opens)\n    end\n  end\n  i, j = 1, 1\n  while (i <= #input and j <= limit) do\n    c = input[i]\n    z = grid[y][x]\n    if (c == \"*\" and z == \"0\") then grid[y][x] = \"1\"\n    elseif (c == \"*\" and z == \"1\") then grid[y][x] = \"0\"\n    elseif (c == \"n\" and y == 1) then y = h\n    elseif (c == \"n\") then y = y - 1\n    elseif (c == \"w\" and x == 1) then x = w\n    elseif (c == \"w\") then x = x - 1\n    elseif (c == \"s\" and y == h) then y = 1\n    elseif (c == \"s\") then y = y + 1\n    elseif (c == \"e\" and x == w) then x = 1\n    elseif (c == \"e\") then x = x + 1\n    elseif (c == \"[\" and z == \"0\") then i = jumps[i]\n    elseif (c == \"]\" and z == \"1\") then i = jumps[i] end\n    i = i + 1\n    j = j + 1\n  end\n  local ans = \"\"\n  for i = 1, #grid do\n    for j = 1, #grid[i] do\n      ans = ans .. grid[i][j]\n    end\n    if (i < #grid) then ans = ans .. \"\\r\n\" end\n  end\n  return ans\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209857,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n  \n  --grid, grid pointers, code pointer, current command\n  local grid, gx, gy, cptr, cur = {}, 1, 1, 1, \"\"\n  \n  --grid is automagically expanded when accessed\n  setmetatable(grid,{__index =\n    function(self,key)\n      self[key] = setmetatable( {}, {__index = function(self,key) return 0 end})\n      return self[key]\n    end})\n  \n  --remove invalid commands\n  code = code:gsub(\"[^nesw%*%[%]]\",\"\")\n  \n  -- until cptr overruns, or iterations runout, run\n  while cptr and cptr <= #code and iterations > 0 do\n    --extract command, move cptr to next\n    cur, cptr = code:sub(cptr, cptr), cptr + 1\n\t  if     cur == \"n\" then gy = (gy-2)% height + 1 --mod sub.\n    elseif cur == \"s\" then gy =   gy  % height + 1 --mod add\n    elseif cur == \"e\" then gx =   gx  % width  + 1 --mod add\n    elseif cur == \"w\" then gx = (gx-2)% width  + 1 --mod sub.\n    elseif cur == \"*\" then grid[gy][gx] = (grid[gy][gx] + 1) % 2\n    elseif cur == \"[\" then -- if gptrs -> 0 goto matched ]\n      if grid[gy][gx] == 0 then\n        local depth = 1\n        repeat cnt, cptr = code:match(\"([%[%]])()\",cptr) -- find next bracket\n          depth = depth + ( cnt == \"[\" and 1 or -1 ) -- adjust the bracket depth\n        until depth == 0 end --true when bracket depth reaches equal to intial jump point\n    elseif cur == \"]\" then -- if gptrs -> not 0 goto matched [\n      if grid[gy][gx] ~= 0 then\n        local rev = code:reverse()  -- match backwards\n        local depth, bptr = 1, -cptr + 2 -- back pointer = cptr reversed\n        repeat cnt, bptr = rev:match(\"([%[%]])()\", bptr) -- see above\n          depth = depth + ( cnt == \"]\" and 1 or -1 ) \n        until depth == 0\n        cptr = #code - bptr + 3 -- revert tmptr to cptr values\n\t    end\n    end\n    iterations = iterations - 1\n  end\n  \n  -- extract grid to string fmt\n  local res = \"\"\n  for i = 1, height do \n    for j = 1, width do\n      res = res .. grid[i][j]\n    end\n    if i ~= height then\n      res = res .. \"\\r\n\"\n    end\n  end\n  return res\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209858,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n  local mem = {}\n  for h = 1, height do\n    mem[h] = {}\n    for w = 1, width do\n      mem[h][w] = false\n    end\n  end\n  \n  local x, y = 1, 1\n  local cptr, i = 0, 0\n  \n  local function skip(d)\n    while d ~= 0 do\n      cptr = cptr + (d < 0 and -1 or 1)\n      local c = code:sub(cptr, cptr)\n      if c == \"[\" then\n        d = d + 1\n      elseif c == \"]\" then\n        d = d - 1\n      end\n    end\n  end\n  \n  while i < iterations do\n    i = i + 1\n    cptr = cptr + 1\n    \n    if cptr > #code then\n      break\n    end\n    \n    local c = code:sub(cptr, cptr)\n    print(c)\n    \n    if c == \"n\" then\n      y = (y == 1 and height or y - 1)\n    elseif c == \"s\" then\n      y = (y == height and 1 or y + 1)\n    elseif c == \"w\" then\n      x = (x == 1 and width or x - 1)\n    elseif c == \"e\" then\n      x = (x == width and 1 or x + 1)\n    elseif c == \"*\" then\n      mem[y][x] = not mem[y][x]\n    elseif c == \"[\" then\n      if mem[y][x] == false then\n        skip(1)\n      end\n    elseif c == \"]\" then\n      if mem[y][x] == true then\n        skip(-1)\n      end\n    else\n      i = i - 1\n    end\n  end\n  \n  local out = {}\n  for y = 1, #mem do\n    for x = 1, #mem[y] do\n      table.insert(out, mem[y][x] and \"1\" or \"0\")\n    end\n    table.insert(out, \"\\r\n\")\n  end\n  \n  table.remove(out) --\/\/ remove the last \\r\n\n  print(\"Returned with \" .. i .. \" iterations.\")\n  return table.concat(out)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209859,"user_id":null,"body":"function up(regs)\n  if(regs[\"dpr\"] <= 1) then\n    regs[\"dpr\"] = regs[\"h\"];\n  else\n    regs[\"dpr\"] = regs[\"dpr\"] - 1;\n  end\nend\n\nfunction right(regs)\n  if(regs[\"dpc\"] >= regs[\"w\"]) then\n    regs[\"dpc\"] = 1;\n  else\n    regs[\"dpc\"] = regs[\"dpc\"] + 1;\n  end\nend\n\nfunction down(regs)\n  if(regs[\"dpr\"] >= regs[\"h\"]) then\n    regs[\"dpr\"] = 1;\n  else\n    regs[\"dpr\"] = regs[\"dpr\"] + 1;\n  end\nend\n\nfunction left(regs)\n  if(regs[\"dpc\"] <= 1) then\n    regs[\"dpc\"] = regs[\"w\"];\n  else\n    regs[\"dpc\"] = regs[\"dpc\"] - 1;\n  end\nend\n\nfunction flip(regs)\n  local row = regs[\"dpr\"];\n  local col = regs[\"dpc\"];\n  local prev_bit = regs[\"data\"][row]:sub(col, col);\n  local bit = (prev_bit:byte(1) - 47) % 2;\n  regs[\"data\"][row] = regs[\"data\"][row]:sub(1, col-1) .. bit .. regs[\"data\"][row]:sub(col+1);\nend\n\nfunction jmp(regs)\n  if(regs[\"data\"][regs[\"dpr\"]]:byte(regs[\"dpc\"]) - 48 == 0) then\n    local open_i = regs[\"cp\"];\n    local close_i = regs[\"cp\"];\n    repeat \n      open_i = regs[\"code\"]:find(\"[\", open_i+1, true);\n      close_i = regs[\"code\"]:find(\"]\", close_i+1, true);\n    until(open_i == nil or open_i > close_i)\n    regs[\"cp\"] = close_i;\n    if(regs[\"cp\"] == nil) then\n      regs[\"err\"] = true;\n      return;\n    end\n  else\n    local b = regs[\"brackets\"];\n    regs[\"bc\"] = regs[\"bc\"] + 1;\n    b[regs[\"bc\"]] = regs[\"cp\"];\n  end\nend\n\nfunction loop(regs)\n  local b = regs[\"brackets\"];\n  if(regs[\"data\"][regs[\"dpr\"]]:byte(regs[\"dpc\"]) - 48 > 0) then\n    if(regs[\"bc\"] == 0) then\n      regs[\"err\"] = true;\n      return;\n    end\n    regs[\"cp\"] = b[regs[\"bc\"]];\n  else\n    table.remove(b, regs[\"bc\"]);\n    regs[\"bc\"] = regs[\"bc\"] - 1;\n  end\nend\n\nfunction interpreter(code, iterations, width, height)\n  cmds = {\n    [(\"n\"):byte(1)] = up,\n    [(\"e\"):byte(1)] = right,\n    [(\"s\"):byte(1)] = down,\n    [(\"w\"):byte(1)] = left,\n    [(\"*\"):byte(1)] = flip,\n    [(\"[\"):byte(1)] = jmp,\n    [(\"]\"):byte(1)] = loop,\n  };\n  regs = {\n    [\"err\"] = false, -- error state\n    [\"data\"] = {},\n    [\"w\"] = width,\n    [\"h\"] = height,\n    [\"dpr\"] = 1, -- data row ptr\n    [\"dpc\"] = 1, -- data column ptr\n    [\"code\"] = code,\n    [\"cp\"] = 1, -- cmd ptr\n    [\"brackets\"] = {}, -- brackets cp\n    [\"bc\"] = 0, -- brackets counter\n  };\n  for i = 1, height, 1 do\n    regs[\"data\"][i] = string.rep(\"0\", width);\n  end\n  l = #code;\n  while regs[\"cp\"] <= l do\n    if(iterations <= 0) then\n      break;\n    end\n    cmd = cmds[regs[\"code\"]:byte(regs[\"cp\"])];\n    if(cmd) then\n      cmd(regs);\n      iterations = iterations - 1;\n      if(regs[\"err\"]) then\n        break;\n      end\n    end\n    regs[\"cp\"] = regs[\"cp\"] + 1;\n  end\n  res = regs[\"data\"][1];\n  for i = 2, height, 1 do\n    res = res .. \"\\r\n\" .. regs[\"data\"][i];\n  end\n  return res;\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209860,"user_id":null,"body":"local function find_match(code, start_pc, brace, opp, dir)\n  local balance = 0\n  local pc = start_pc\n  while true do\n    pc = pc + dir\n    if pc < 1 or pc > #code then\n      return start_pc\n    end\n    c = code:sub(pc, pc)\n    if c == opp then\n      balance = balance + 1\n    elseif c == brace then\n      if balance == 0 then\n        return pc\n      else\n        balance = balance - 1\n      end\n    end\n  end\nend\n\nfunction interpreter(code, iterations, width, height)\n  local grid = {}\n  for y = 1, height do\n    local row = {}\n    for x = 1, width do\n      table.insert(row,\"0\")\n    end\n    table.insert(grid, row)\n  end\n  \n  local i = 1\n  local pc = 1\n  local x = 1\n  local y = 1\n  while i <= iterations and pc <= #code do\n    local c = code:sub(pc, pc)\n    step = 1\n    if c == \"n\" then\n      if y == 1 then y = height else y = y - 1 end\n    elseif c == \"e\" then\n      if x == width then x = 1 else x = x + 1 end\n    elseif c == \"s\" then\n      if y == height then y = 1 else y = y + 1 end\n    elseif c == \"w\" then\n      if x == 1 then x = width else x = x - 1 end\n    elseif c == \"*\" then\n      if grid[y][x] == \"0\" then grid[y][x] = \"1\" else grid[y][x] = \"0\" end\n    elseif c == \"]\" then\n      if grid[y][x] == \"1\" then\n        pc = find_match(code, pc, \"[\", \"]\", -1)\n      end\n    elseif c == \"[\" then\n      if grid[y][x] == \"0\" then\n        pc = find_match(code, pc, \"]\", \"[\", 1)\n      end\n    else\n      step = 0\n    end\n    pc = pc + 1\n    i = i + step\n  end\n  local rows = {}\n  for _, row in ipairs(grid) do\n    table.insert(rows, table.concat(row, \"\"))\n  end\n  return table.concat(rows, \"\\r\n\")\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209861,"user_id":null,"body":"function interpreter(code, iterations, width, height)\n  local a = {}\n  for i = 1,height do\n    a[i] = {}\n    for l = 1,width do\n      a[i][l] = 0 \n    end\n  end\n  local f = {}\n  for s in code:gmatch(\"[nesw%*%]%[]\") do \n    f[#f+1] = s\n  end\n  local p = 1\n  local pp = 1\n  local i = 1\n  local k = 0\n  while i <= #code do\n    if k == iterations then return fff(a, height) end\n    if p < 1 then p = width\n    elseif p > width then p = 1\n    elseif pp < 1 then pp = height\n    elseif pp > height then pp = 1\n    end\n    if f[i] == '*' then\n      if a[pp][p] == 0 then\n        a[pp][p] = 1 \n      else a[pp][p] = 0 \n      end \n      i = i + 1\n    elseif f[i] == 'n' then\n      pp = pp - 1\n      i = i + 1\n    elseif f[i] == 'e' then\n      p = p + 1\n      i = i + 1\n    elseif f[i] == 's' then\n      pp = pp + 1\n      i = i + 1\n    elseif f[i] == 'w' then\n      p = p - 1\n      i = i + 1\n    elseif f[i] == '[' and a[pp][p] == 0 then \n      local re = 1\n        while re ~= 0 do \n          i = i + 1 \n          if f[i] == '[' then \n            re = re + 1 \n          elseif f[i] == ']' then \n            re = re - 1 \n          end \n        end\n        i = i + 1\n      elseif f[i] == ']' and a[pp][p] == 1 then \n      local re = 1\n        while re ~= 0 do \n          i = i - 1 \n          if f[i] == ']' then \n            re = re + 1 \n          elseif f[i] == '[' then \n            re = re - 1 \n          end\n        end\n        i = i + 1\n    else\n      i = i + 1\n    end\n    k = k + 1\n  end\n  return fff(a, height)\nend\n\nfunction fff(r, h)\n  for i = 1,h do\n    r[i] = table.concat(r[i])\n  end\n  return table.concat(r, \"\\r\n\")\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5886e082a836a691340000c3":[{"id":209862,"user_id":53,"body":"local Kata = {}\n\nfunction Kata.rectangle_rotation(a, b)\n  local x,y,r = 0,0,0\n  x = math.floor(a \/ math.sqrt(2))\n  y = math.floor(b \/ math.sqrt(2))\n  r = (x + 1) * (y + 1) + x * y\n  return r + r % 2 - 1\nend\n\nreturn Kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209863,"user_id":645,"body":"local Kata = {}\n\nfunction Kata.rectangle_rotation(a, b)\n  local h = math.floor(a \/ math.sqrt(2))\n  local v = math.floor(b \/ math.sqrt(2))\n  return h * v + -~h * -~v - (h % 2 ~ v % 2)\nend\n\nreturn Kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209864,"user_id":null,"body":"local Kata = {}\n\nfunction Kata.rectangle_rotation(a, b)\n  local div = math.sqrt(2)\n  a, b = a \/\/ div, b \/\/ div\n  return (a + 1 - a % 2) * (b + 1 - b % 2) + (a + a % 2) * (b + b % 2)\nend\n\nreturn Kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209865,"user_id":null,"body":"return function(a, b)\n  a, b = math.min(a, b), math.max(a, b)\n  local st = math.sqrt(2)\n  local xbound = (a + b) \/ (2 * st)\n  local points = 0\n  for x = math.ceil(-xbound), math.floor(xbound) do\n    -- now we need to calculate y.\n    -- Longer lines have formula:  y =  x \u00b1 a\/\u221a2,\n    -- Shorter lines have formula: y = -x \u00b1 b\/\u221a2,\n    -- we just need to consider the closer ones\n    points = points + math.floor(math.min(x+a\/st, -x+b\/st))\n                    - math.ceil(math.max(-x-b\/st, x-a\/st)) + 1\n  end\n  return points\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209866,"user_id":null,"body":"return function(a, b)\n  local w=math.ceil(a\/math.sqrt(2))\n  local h=math.ceil(b\/math.sqrt(2))\n  return w*(h-((w%2+h%2)%2))+(w-1)*(h+((w%2+h%2)%2-1))\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209867,"user_id":null,"body":"return function(a, b)\n  local r2 = math.sqrt(2)\n  local ah = a \/ (2*r2)\n  local bh = b \/ (2*r2)\n  local full_rows = 1 + math.floor(ah)*2\n  local half_rows = math.floor(ah+0.5)*2\n  local full_cols = 1 + math.floor(bh)*2\n  local half_cols = math.floor(bh+0.5)*2\n  return (full_rows * full_cols) + (half_rows * half_cols)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209868,"user_id":null,"body":"return function(a, b)\n  local f = (a\/\/2^0.5)*(b\/\/2^0.5)+(a\/\/2^0.5+1)*(b\/\/2^0.5+1)\n  local d = ((a-1)*(b-1))+((a-2)*(b-2))\n  if f % 2 > 0 then return f\n  elseif d > f then return f - 1\n  else return f end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209869,"user_id":null,"body":"return function(a, b)\n  local function c(n)\n\t\treturn 2*math.floor(n)\n\tend\n\ta,b=a\/(2^0.5),b\/(2^0.5)\n\treturn (c(a\/2)+1)*(c(b\/2)+1)+(c(a\/2-0.5)+2)*(c(b\/2-0.5)+2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209870,"user_id":null,"body":"return function(a, b)\n  a = math.floor(a \/ math.sqrt(2))\n  b = math.floor(b \/ math.sqrt(2))\n  local sum = (a+1)*(b+1) + a*b\n  if a%2 == 0 and b%2 == 1 or a%2 == 1 and b%2 == 0 then\n    sum = (a+1)*b + a*(b+1)\n  end\n  return sum\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209871,"user_id":50,"body":"return function(a, b)\n  s=math.sqrt(2)\n  e=math.floor(a\/s)\n  h=math.floor(b\/s)\n  x=2*e*h+e+h+1\n  if x%2==0 then return x-1 end\n  return x\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"511f11d355fe575d2c000001":[{"id":209872,"user_id":null,"body":"local t = {}\nfunction t.two_oldest_ages(ages)\n  table.sort(ages)\n  return {ages[#ages-1],ages[#ages]}\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209873,"user_id":2750,"body":"local t = {}\nfunction t.two_oldest_ages(ages)\n  local firsthighest = math.max(unpack(ages));\n\n  for k,v in pairs(ages) do\n    if(v == firsthighest) then\n      table.remove(ages, k)\n    end\n  end\n\n  return {math.max(unpack(ages)), firsthighest}\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209874,"user_id":null,"body":"local times = 2\nlocal insert = table.insert\nlocal unpack = unpack or table.unpack\nlocal max = math.max\nlocal sort = table.sort\n\nlocal function a(_)\n    local __ = {}\n    for ___ = 1, #_ do\n        local ____ = _[___]\n        if __[____] == nil then\n            insert(__, ____)\n        end\n    end\n    return __\nend\n\nlocal function b(_, n)\n    local __ = {}\n    for ___ = 1, #_ do\n        local x = _[___]\n        if x ~= n then\n            insert(__, x)\n        end\n    end\n  \n    return __\nend\n\nlocal function ____(_)\n    _ = a(_)\n    local __ = {}\n    for i = 1, times do\n        local x = max(unpack(_))\n        _ = b(_, x)\n        insert(__, x)\n    end\n    sort(__)\n    return __\nend\n\nreturn setmetatable({}, {__index = function() return ____ end})","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209875,"user_id":null,"body":"-- Written by Rabia Alhaffar in 28\/9\/2020\nlocal t = {}\nfunction t.two_oldest_ages(ages)\n result = { -math.huge, -math.huge }\n  \n  for i in ipairs(ages) do\n    if result[2] < ages[i] then\n      result[2] = ages[i]\n    end\n  end\n  \n  for j in ipairs(ages) do\n    if result[1] < ages[j] and ages[j] < result[2] then\n      result[1] = ages[j]\n    end\n  end\n  \n  return result\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209876,"user_id":null,"body":"local t = {}\n\nfunction t.two_oldest_ages(ages)\n  local oldest = -math.huge\n  local second_oldest = -math.huge\n  for _, age in ipairs(ages) do\n    if age > oldest then\n      second_oldest = oldest\n      oldest = age\n    elseif age > second_oldest then\n      second_oldest = age\n    end\n  end\n  return {second_oldest, oldest}\nend\n\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209877,"user_id":null,"body":"local t = {}\n\nfunction t.two_oldest_ages(ages)\n  local lower = 0\n  local higher = 0\n  \n  for i = 1, #ages do\n    local v = ages[i]\n    \n    if v > higher then\n      lower = higher\n      higher = v\n    else\n      if v > lower then\n        lower = v\n      end\n    end\n    \n    print(higher, lower)\n  end\n  \n  return { lower, higher }\nend\n\nreturn t","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209878,"user_id":null,"body":"local t = {}\nfunction t.two_oldest_ages(ages)\n  local oldest = 0\n  local sec_oldest = 0\n  \n  for i = 1 , #ages do\n    if(ages[i] > oldest) then\n        sec_oldest = oldest\n        oldest = ages[i]\n    elseif ages[i] > sec_oldest then\n        sec_oldest = ages[i]\n    end\n  end\n      return {sec_oldest,oldest}\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209879,"user_id":null,"body":"local t = {}\nfunction t.two_oldest_ages(ages)\nfor i = 1, #ages do table.sort(ages) return {ages[#ages-1], ages[#ages]} end\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209880,"user_id":null,"body":"local t = {}\nfunction t.two_oldest_ages(ages)\n  table.sort(ages, function(a1, a2) return a1 > a2 end)\n  return {ages[2], ages[1]}\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209881,"user_id":null,"body":"local t = {}\nfunction t.two_oldest_ages(a)\n  table.sort(a)\n  return {a[#a-1],a[#a]}\nend\nreturn t","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"513e08acc600c94f01000001":[{"id":209882,"user_id":null,"body":"local kata = {}\n\nfunction kata.rgb(r, g, b)\n  r = math.min(255, math.max(0, r))\n  g = math.min(255, math.max(0, g))\n  b = math.min(255, math.max(0, b))\n  return (\"%02x%02x%02x\"):format(r, g, b):upper()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209883,"user_id":53,"body":"local kata = {}\n\nfunction clamp(x, min, max)\n  return x < min and min or x > max and max or x;\nend\n\nfunction kata.rgb(r, g, b)\n  local hr = string.format(\"%02X\", clamp(r, 0, 255));\n  local hg = string.format(\"%02X\", clamp(g, 0, 255));\n  local hb = string.format(\"%02X\", clamp(b, 0, 255));\n  return hr .. hg .. hb;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209884,"user_id":null,"body":"local kata = {}\n\nfunction kata.rgb(r, g, b)\n    if r < 0 then r = 0 end\n    if g < 0 then g = 0 end\n    if b < 0 then b = 0 end\n\n    if r > 255 then r = 255 end\n    if g > 255 then g = 255 end\n    if b > 255 then b = 255 end\n\n    return string.format(\"%02X%02X%02X\", r, g, b)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209885,"user_id":null,"body":"local kata = {}\n\nfunction kata.rgb(r, g, b)\n  return string.format(\"%02X%02X%02X\", math.min(math.max(r, 0), 255), math.min(math.max(g, 0), 255), math.min(math.max(b, 0), 255))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209886,"user_id":null,"body":"local kata = {}\n\nlocal function clamp(min, max, val, ...)\n   if val then\n      return math.min(math.max(val, min), max),  clamp(min, max, ...)\n   end\nend\n\nfunction kata.rgb(...)\n   return string.format(string.rep(\"%02X\", 3), clamp(0, 255, ...))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209887,"user_id":null,"body":"local string_format = string.format\n\nlocal function _(...)\n    local __ = {...}\n    for ___ = 1, 3 do\n        local ____ = __[___]\n        if ____ > 255 then\n            ____ = 255\n        elseif ____ < 0 then\n            ____ = 0\n        end\n        __[___] = ____\n    end\n    local r, g, b = __[1], __[2], __[3]\n    return string_format(\n        '%02x%02x%02x',\n        r, g, b\n    ):upper()\nend\n\nreturn setmetatable({}, { __index = function() return _ end })","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209888,"user_id":null,"body":"local kata = {}\n\nkata.rgb = function(r, g, b)\n  local function normlz(a) \n    return (a<0) and 0 or ((a>255) and 255 or a)\n  end\n  local abc = 'ABCDEF'\n  local rgb = {r,g,b}\n  local otv = ''\n  for i=3, 1, -1 do\n    local nOtv= ''\n    rgb[i] = normlz(rgb[i])\n    while rgb[i]~=0 do\n      local ost = rgb[i]%16 \n      nOtv = ((ost > 9) and abc:sub(ost-9,ost-9) or ost) .. nOtv\n      rgb[i] = math.floor(rgb[i]\/16)\n    end\n    nOtv = ((\"0\"):rep(math.abs(nOtv:len()-2))) .. nOtv\n    otv = nOtv .. otv\n  end\n  return otv\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209889,"user_id":null,"body":"local kata = {}\n\nfunction kata.rgb(r, g, b)\n  --Convert all three values to RGB (also clamp them to 0-255)\n  r = string.format(\"%02X\", r>255 and 255 or (r<0 and 0 or r));\n  g = string.format(\"%02X\", g>255 and 255 or (g<0 and 0 or g));\n  b = string.format(\"%02X\", b>255 and 255 or (b<0 and 0 or b));\n  \n  return r .. g .. b;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209890,"user_id":null,"body":"return {\n  rgb = function(r, g, b)\n    local clampU8 = function(n) return math.max(0, math.min(n, 255)) end\n    return string.format(\"%02X%02X%02X\", clampU8(r), clampU8(g), clampU8(b))\n  end\n}\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209891,"user_id":null,"body":"local kata = {}\n\nfunction kata.rgb(r, g, b)\n    local hex = {}\n    for i = 0, 2 do\n        local num = 0\n        if i == 0 then\n            num = r\n        elseif i == 1 then\n            num = g\n        elseif i == 2 then\n            num = b\n        end\n        if num > 255 then\n            num = 255\n        elseif num < 0 then\n            num = 0\n        end\n        hex[i] = string.format(\"%x\", num)\n        if #hex[i] == 1 then\n            hex[i] = \"0\" .. hex[i]\n        end\n    end\n    for i = 0, #hex do\n        hex[i] = string.upper(hex[i])\n    end\n    return hex[0] .. hex[1] .. hex[2]\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"515f51d438015969f7000013":[{"id":209892,"user_id":null,"body":"return function(n)\n  local t = {}\n  for i = 1, n do\n    t[i] = {}\n    for j = 1, i do\n      t[i][j] = 1\n    end\n  end\n  return t\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209893,"user_id":null,"body":"return function(n)\n  return setmetatable({}, {__index = function() \n    return setmetatable({},{__index = function() return 1 end}) end})\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209894,"user_id":null,"body":"return function(n)\n    local piramid = {}\n    local row = {}\n    for i = 1, n do\n        table.insert(row, 1)\n        table.insert(piramid, {table.unpack(row)})\n    end\n    return piramid\nend\n    \n\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209895,"user_id":null,"body":"return function(n)\n  local tbl = {} -- zero level array\n  \n  for i = 1, n do -- gets in only if n > 0\n    tbl[i] = {} -- adds subarray\n\n    for i2 = 1, i do tbl[i][i2] = 1 end -- adds subarray entry\n  end\n  \n  return tbl\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209896,"user_id":null,"body":"local function pyramidArray(n, arr)\n\tif n == 0 then return {} end\n\n\tarr = arr or {}\n\tlocal temp_arr = {}\n\n\tfor i = 1, #arr + 1 do table.insert(temp_arr, 1, 1) end\n\n\ttable.insert(arr, #arr + 1, temp_arr)\n\n\tif n == #arr then return arr end\n    \n\treturn pyramidArray(n, arr)\nend\n\nreturn function(n) if n >= 0 then return pyramidArray(n) end end","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209897,"user_id":null,"body":"return function(n)\nlocal array = {}\nfor i = 1,n do array[i] ={}\n    for sub = 1,i do array[i][sub] = 1 end\nend\nreturn array\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209898,"user_id":null,"body":"return function(n)\n  A1 = {}\n  A2 = {}\n  for i = 1, n do\n    table.insert(A2,1)\n    table.insert(A1,{table.unpack(A2)})\n  end\n  return A1\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209899,"user_id":null,"body":"return function (n)\n        local p = {}\n        for i=1, n do\n                local arr = {}\n                for j=1, i do\n                        table.insert(arr, 1)\n                end\n                table.insert(p, arr)\n        end\n        return p\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209900,"user_id":null,"body":"return function(n)\n  local res = {}\n  for i = 1, n do\n    res[i] = {}\n    for j = 1, i do\n      res[i][j] = 1\n    end\n  end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209901,"user_id":53,"body":"return function(n)\n    acc = {}\n    for i = 1, n do\n        acc[i] = {}\n        for j = 1, i do\n            acc[i][j] = 1\n        end\n    end\n    return acc\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"517abf86da9663f1d2000003":[{"id":209902,"user_id":881,"body":"return function(str)\n    return str:gsub(\"[-_%s](.)\", string.upper)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209903,"user_id":null,"body":"return function(str)\n return str:gsub(\"[_-](.)\",function(s)return s:upper()end)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209904,"user_id":null,"body":"return function(str)\n  print(str)\n  return (str:gsub('([_-])(.)', function(_, c) return c:upper() end))\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209905,"user_id":198,"body":"local function charIs(c)\n  if string.match(c, \"%a\") then\n    return 1\n  elseif string.match(c, \"[-_]\") then\n    return 2\n  end\n  return 0\nend\n\nreturn function(str)\n  print(str)\n  local sol = \"\"\n  local last = \"\"\n  for i = 1, #str do\n    local c = string.sub(str, i, i)\n    if charIs(c) == 1 then\n      if charIs(last) == 1 or charIs(last) == 0 then\n        sol = sol .. c\n      elseif charIs(last) == 2 then\n        sol = sol .. string.upper(c)\n      end\n    elseif charIs(c) == 2 then\n      if charIs(last) == 2 or i == #str then\n        sol = sol .. c\n        c = \"\"\n      end\n    end\n    last = c\n  end\n  return sol\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209906,"user_id":null,"body":"local kata = {}\n\nfunction kata.to_camel_case(str)\n    str = string.gsub(str, \"[-_](.)\", function(a) return string.upper(a) end)\n    return str\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209907,"user_id":168,"body":"return function(str)\n  print(str)\n  return str:gsub('([_-])([_-]*%a+)', function(_, w)\n      return w:sub(1, 1):upper() .. w:sub(2)\n  end)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"51b6249c4612257ac0000005":[{"id":209908,"user_id":null,"body":"local kata = {}\n\nkata.romanDigits = { I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000 }\n\nkata.solution = function(roman) \n    local accu = 0\n    local last = 0\n    for idx = #roman,1,-1 do\n        local value = kata.romanDigits[roman:sub(idx,idx)]\n        if not value then\n            error(\"invalid roman number\")\n        elseif value < last then\n            accu = accu - value\n        else\n            accu = accu + value\n            last = value\n        end\n    end\n    return accu\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209909,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(roman) \n  local num = {M = 1000, D = 500, C = 100, L = 50, X = 10, V = 5, I = 1}\n  local p, s = \"\", 0\n  for c in string.reverse(roman):gmatch('.') do\n    s = (num[p] or 0) > num[c] and s - num[c] or s + num[c]\n    p = c\n  end\n  return s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209910,"user_id":null,"body":"local kata = {}\n\nlocal roman_number = {\n  [\"M\"] = 1000,\n  [\"D\"] = 500,\n  [\"C\"] = 100,\n  [\"L\"] = 50,\n  [\"X\"] = 10,\n  [\"V\"] = 5,\n  [\"I\"] = 1,\n}\n\nkata.solution = function(roman) \n    local n = 0\n    local last_n = 0\n  \n    roman = string.reverse(roman)  \n  \n    for i=1, string.len(roman) do\n        local t = roman_number[string.sub(roman, i, i)]\n    \n        if last_n > t then\n            n = n - t\n        else\n            n = n + t\n        end\n    \n        last_n = t\n    end    \n  \n    return n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209911,"user_id":null,"body":"local kata = {}\nNumerals = {\"CM\",\"CD\",\"XC\",\"XL\",\"IX\",\"IV\",\"M\",\"D\",\"C\",\"L\",\"X\",\"V\",\"I\"}\nVals = {900,400,90,40,9,4,1000,500,100,50,10,5,1}\nkata.solution = function(roman) \n  Out = 0\n  for i, v in pairs(Numerals) do\n    roman, count = roman:gsub(v,\"\")\n    Out = Out+Vals[i]*count\n  end\n  return Out\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209912,"user_id":null,"body":"local kata = {}\n\nlocal values = {I=1, V=5, X=10, L=50, C=100, D=500, M=1000}\n\nkata.solution = function(roman) \n  local sum, largest_digit = 0, 0\n  for d in roman:reverse():gmatch '.' do\n    local digit = values[d]\n    if digit >= largest_digit then\n      sum = sum + digit\n      largest_digit = digit\n    else\n      sum = sum - digit\n    end\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209913,"user_id":null,"body":"local kata = {}\n\nlocal num = {\n  I = 1,\n  V = 5,\n  X = 10,\n  L = 50,\n  C = 100,\n  D = 500,\n  M = 1000,\n}\n\nlocal function max(roman)\n  local m = 0\n  for i = 1, #roman do\n    local n = num[roman:sub(i, i)]\n    if n > m then m = n end\n  end\n  return m\nend\n\nkata.solution = function(roman)\n  local s = 0\n  for i = 1, #roman do\n    local n = num[roman:sub(i, i)]\n    if n >= max(roman:sub(i)) then\n      s = s + n\n    else\n      s = s - n\n    end\n  end\n  return s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209914,"user_id":null,"body":"local kata = {}\nlocal _M = {}\n\n_M.RomanDigitValue =\n{\n  [\"I\"] = 1,\n  [\"V\"] = 5,\n  [\"X\"] = 10,\n  [\"L\"] = 50,\n  [\"C\"] = 100,\n  [\"D\"] = 500,\n  [\"M\"] = 1000,\n}\n\nkata.solution = function(str) \n  local i = 1\n  local currentVal = 0\n  if (str:len() >= 1) then\n    currentVal = _M.RomanDigitValue[str:sub(1,1)]\n  end\n  while (str:len() > i) do\n    i = i + 1\n    if (_M.RomanDigitValue[str:sub(i,i)] > currentVal) then\n      currentVal = _M.RomanDigitValue[str:sub(i,i)] - currentVal\n    else\n      currentVal = currentVal + kata.solution(str:sub(i, #str))\n      break\n    end\n  end\n  return currentVal\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209915,"user_id":null,"body":"local kata = {}\nkata.solution = function(roman) \n  local p={I=1,V=5,X=10,L=50,C=100,D=500,M=1000}\n  local solve=0\n  local c=1\n  roman:gsub('.', function(x)\n    if p[roman:sub(c+1,c+1)] and p[x] < p[roman:sub(c+1,c+1)] then\n        solve = solve - p[x]\n    else\n        solve=solve+p[x]\n    end\n    c=c+1\n  end)\n  return solve\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209916,"user_id":null,"body":"local kata = {}\nlocal _decoderRing = {\n  {'CM', 900},\n  {'CD', 400},\n  {'XC', 90},\n  {'XL', 40},\n  {'IX', 9},\n  {'IV', 4},\n  {'M', 1000},\n  {'D', 500},\n  {'C', 100},\n  {'L', 50},\n  {'X', 10},\n  {'V', 5},\n  {'I', 1},\n}\n\nkata.solution = function(roman)\n  local sum = 0\n  \n  while #roman > 0 do\n    for i=1, #_decoderRing do\n      local k, v = table.unpack(_decoderRing[i])\n      local newRoman = roman:gsub(k, '')\n      if roman ~= newRoman then\n        local mul = (#roman - #newRoman) \/ #k\n        roman = newRoman\n        sum = sum + v * mul\n        break\n      end\n    end\n  end\n  \n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209917,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(roman) \n  -- your code goes here\n  local m = {['M']=1000,['D']=500,['C']=100,['L']=50,['X']=10,['V']=5,['I']=1}\n  local ret = 0\n  local p = 0\n  for i = #roman,1,-1 do\n    local d = m[string.sub(roman,i,i)]\n    if d >= p then\n      p = d\n      ret = ret + d\n    else\n      ret = ret - d\n    end\n  end\n  return ret\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"51b62bf6a9c58071c600001b":[{"id":209918,"user_id":null,"body":"local kata = {}\n\nlocal n = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\nlocal l = {'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'}\nkata.solution = function(number)\n  if number <= 0 then return '' end\n  for i, v in ipairs(n) do\n    if number >= v then return l[i] .. kata.solution(number - v) end\n  end\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209919,"user_id":1121,"body":"local kata = {[1000] = \"M\", [500] = \"D\", [100] = \"C\", [50] = \"L\", [10] = \"X\", [5] = \"V\", [1] = \"I\"}\n\nkata.solution = function(number)\n  romanString = \"\"\n  romanIntervals = {1000,500,100,50,10,5,1}\n  for n,i in pairs(romanIntervals) do\n    v = kata[i]    \n    while number >= i do\n      romanString = romanString .. v\n      number = number - i\n    end\n\n    if i > 5 and i == 2*romanIntervals[n+1] and number >= (9*romanIntervals[n+2]) then\n      number = number - i + romanIntervals[n+2]\n      romanString = romanString .. kata[romanIntervals[n+2]] .. v\n    end\n\n    if i > 1 and i == 5*romanIntervals[n+1] and number >= (4*romanIntervals[n+1]) then\n      number = number - i + romanIntervals[n+1]\n      romanString = romanString .. kata[romanIntervals[n+1]] .. v\n    end\n\n  end\n  return romanString\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209920,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(number)\nones = {[0]=\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"}\ntens = {[0]=\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"}\nhunds = {[0]=\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"}\nthous = {[0]=\"\",\"M\",\"MM\",\"MMM\",\"MMMM\"}\nreturn thous[number \/\/ 1000]..hunds[number \/\/ 100 % 10]..tens[number \/\/ 10 % 10]..ones[number % 10]\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209921,"user_id":null,"body":"return {\n  solution = function(number)\n    local output = \"\"\n    (\"1e3M900CM500D400CD100C90XC50L40XL10X9IX5V4IV1I\"):gsub(\"(%U+)(%u+)\", function(n, letter)\n      output = output..letter:rep(number\/\/n)\n      number = number%n\n    end)\n    return output\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209922,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(number)\nones = {[0]=\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"}\ntens = {[0]=\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"}\nhunds = {[0]=\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"}\nthous = {[0]=\"\",\"M\",\"MM\",\"MMM\",\"MMMM\"}\n\nt = thous[number \/\/ 1000]\nh = hunds[number \/\/ 100 % 10]\nte = tens[number \/\/ 10 % 10]\no =  ones[number % 10]\n\nreturn t..h..te..o\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209923,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(number)\n  local symbols = {\n    [1] = {\"M\",\"C\",\"X\",\"I\"},\n    [2] = {\"MM\",\"CC\",\"XX\",\"II\"},\n    [3] = {\"MMM\",\"CCC\",\"XXX\",\"III\"},\n    [4] = {\"MMMM\",\"CD\",\"XL\",\"IV\"},\n    [5] = {\"\",\"D\",\"L\",\"V\"},\n    [6] = {\"\",\"DC\",\"LX\",\"VI\"},\n    [7] = {\"\",\"DCC\",\"LXX\",\"VII\"},\n    [8] = {\"\",\"DCCC\",\"LXXX\",\"VIII\"},\n    [9] = {\"\",\"CM\",\"XC\",\"IX\"}}\n  local divisors = {1000, 100, 10, 1}\n  local remaining = number\n  local result = \"\"\n  for i = 1, 4 do\n    local symbolIdx = math.floor(remaining \/ divisors[i])\n    remaining = remaining % divisors[i]\n    if symbolIdx > 0 then\n      result = result .. symbols[symbolIdx][i]\n    end\n  end\n  return result\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209924,"user_id":null,"body":"local kata = {}\n\nlocal function getDigits(number)\n\tlocal digits, i = {}, 1\n\n\twhile number > 0 do\n\t\tdigits[i] = number % 10\n\t\tnumber = math.floor(number \/ 10)\n\t\ti = i + 1\n\tend\n\n\treturn digits\nend\n\nlocal function digitToRoman(mapping, power, val)\n\tlocal rem, retVal = val % 5, ''\n\tif rem == 4 then\n\t\tretVal = mapping[power] .. mapping[val == 9 and power * 10 or 5 * power]\n\telse\n\t\tif val > 4 then\n\t\t\tretVal = mapping[5 * power]\n\t\tend\n\t\tfor _ = 1, rem do retVal = retVal .. mapping[power] end\n\tend\n\treturn retVal\nend\n\nkata.solution = function(number)\n\tlocal mapping, n, table, retVal = {}, 1, {}, ''\n\tmapping[0] = ''\n\n\tfor i, val in pairs { 'I', 'V', 'X', 'L', 'C', 'D', 'M' } do\n\t\tmapping[n] = val\n\t\tn = n * (i % 2 == 0 and 2 or 5)\n\tend\n\n\tfor i, val in pairs(getDigits(number)) do\n\t\ttable[i] = digitToRoman(mapping, 10 ^ (i - 1), val)\n\tend\n\n\tfor _, val in pairs(table) do\n\t\tretVal = val .. retVal\n\tend\n\n\treturn retVal\nend\n\n\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209925,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(number)\n\n    -- for lookup\n    local lookup = {\n        [1000] = 'M',\n        [500] = 'D',\n        [100] = 'C',\n        [50] = 'L',\n        [10] = 'X',\n        [5] = 'V',\n        [1] = 'I'\n    }\n\n    -- tokenize number\n    local tokens = {\n        [4] = number \/\/ 1000,\n        [3] = number % 1000 \/\/ 100,\n        [2] = number % 100 \/\/ 10,\n        [1] = number % 10\n    }\n\n    -- parse tokens\n    local ret = ''\n    local curr\n\n    for k, v in ipairs(tokens) do\n        if k == 4 then \n            ret = string.rep('M', v)..ret\n        elseif v == 9 then \n            ret = (lookup[10^(k-1)]..lookup[10^k])..ret\n        elseif v > 4 then\n            ret = (lookup[10^k \/ 2]..string.rep(lookup[10^(k-1)], v-5))..ret\n        elseif v == 4 then\n            ret = (lookup[10^(k-1)]..lookup[10^k \/ 2])..ret\n        else \n            ret = string.rep(lookup[10^(k-1)], v)..ret\n        end\n    end\n    \n\n    return ret\nend\n\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209926,"user_id":null,"body":"local kata = {}\n\nkata.solution = function(number)\n  local digits = {}\n  local function encode(digit, unit, five, ten)\n    digits[#digits+1] = ({\n      [0]='', unit, unit..unit, unit..unit..unit,\n      unit..five, five, five..unit, five..unit..unit,\n      five..unit..unit..unit, unit..ten\n    })[digit]\n  end\n  encode(math.floor(number\/1000), 'M', 'D', '_')\n  encode(math.floor(number\/100)%10, 'C', 'D', 'M')\n  encode(math.floor(number\/10)%10, 'X', 'L', 'C')\n  encode(number%10, 'I', 'V', 'X')\n  return table.concat(digits)\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209927,"user_id":198,"body":"local kata = {}\n\nlocal rStr = {\n  {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"},\n  {\"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"},\n  {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"},\n  {\"M\", \"MM\", \"MMM\", \"MMMM\", \"\", \"\", \"\", \"\", \"\"}\n}\nfunction kata.solution(number)\n  local sol = \"\"\n  local str = tostring(number)\n  for i = #str, 1, -1 do\n    local n = tonumber(string.sub(str, i, i))\n    if n ~= 0 then\n      sol = rStr[(#str - i)+1][n].. sol\n    end\n  end\n  return sol\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"51c8991dee245d7ddf00000e":[{"id":209928,"user_id":null,"body":"return {\n  reverse_words = function(str)\n      local out = \"\"\n      for v in str:gmatch(\"%S+\") do\n        out = v .. \" \" .. out\n      end\n      return out:sub(1,-2)\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209929,"user_id":53,"body":"return {\n  reverse_words = function(str)\n      local ans = {}\n    \tfor word in str:gmatch(\"%S+\") do\n    \t\ttable.insert(ans, 1, word)\n    \tend\n    \treturn table.concat(ans, \" \")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209930,"user_id":null,"body":"return {\n  reverse_words = function(str)\n      local t = {}\n      for word in string.gmatch(string.reverse(str), \"[^%s]+\") do\n        table.insert(t, string.reverse(word))\n      end\n      return table.concat(t, ' ')\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209931,"user_id":null,"body":"return {\n  reverse_words = function(str)\n\tarr = {}\n\tfor w in str:gmatch(\"%g+\") do\n\t\ttable.insert(arr,1,w)\n\tend\n    return table.concat(arr, \" \")\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209932,"user_id":null,"body":"return {\n  reverse_words = function(str)\n    newstr = \"\"\n    for s in string.gmatch(str, \"%g+\") do\n      newstr = s..\" \"..newstr\n    end\n      return string.sub(newstr, 1, #newstr-1)\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209933,"user_id":null,"body":"return {\n  reverse_words = function(str)\n      local arr = {}\n      for s in string.gmatch(str, \"[^%s]+\") do\n        table.insert(arr, s)\n      end\n      local s = arr[#arr]\n      for i=#arr-1, 1, -1 do\n        s = s .. \" \" .. arr[i]\n      end\n      return s\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209934,"user_id":null,"body":"return {\n  reverse_words = function(str)\n    return str:gsub('%S+', string.reverse):reverse()\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209935,"user_id":198,"body":"return {\n  reverse_words = function(str)\n    local s = \"\"\n    for w in string.gmatch(str, \"%g+\") do\n      if s ~= \"\" then\n        s = w .. \" \" .. s\n      else\n        s = w .. s\n      end\n    end\n    return s\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209936,"user_id":null,"body":"return {\n  reverse_words = function(str)\n    local arr = {}\n    for i in str:gmatch(\"%S+\") do\n      table.insert(arr, i)\n    end\n    \n    local reversed = {}\n    for i = #arr, 1, -1 do\n      table.insert(reversed, arr[i])\n    end\n    \n    return table.concat(reversed, \" \")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209937,"user_id":null,"body":"return {\n  reverse_words = function(str)\n      local res = {}\nfor word in string.gmatch(str, \"%S+\") do\n    table.insert(res, 1, word)\nend\n\nreturn table.concat(res, \" \")\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"51f2b4448cadf20ed0000386":[{"id":209938,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    return string.gsub(s, '#.*', '')\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209939,"user_id":null,"body":"local kata = {}\n\nfunction kata.remove_url_anchor (s)\n  return s:match(\"[^#]+\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209940,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    if s:find(\"#\") then return s:sub(1,s:find(\"#\")-1) else return s end\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209941,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    if string.find(s, '#') and s~=nil then\n      return string.sub(s,1,string.find(s,'#')-1)\n    else\n      return s\n    end\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209942,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    local result = \"\"\n    for i = 1, #s, 1 do\n      if not (string.char(string.byte(s, i)) == \"#\") then\n        result = result..string.char(string.byte(s, i))\n      else\n        return result\n      end\n    end\n    return result\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209943,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n     return string.match(s, \"(.[^#]*).*\")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209944,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    anchor_index = s:find(\"#\")\n    if anchor_index then\n      return s:sub(1, anchor_index-1)\n    end\n    return s\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209945,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    -- TODO: complete\n    if string.find(s,'#') then\n      return string.gsub(s,string.sub(s,string.find(s, '#'),#s),'') or s\n      end\n    return s\n    end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209946,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    local newstring = \"\"\n    for i = 1,#s do\n      local c = s:sub(i,i)\n      if (c==\"#\") then\n        break\n      end\n      newstring = newstring..c\n    end\n    return newstring\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209947,"user_id":null,"body":"return {\n  remove_url_anchor = function(s)\n    x, _ = string.find(s,\"#\")\n    if x then s = string.sub(s, 0, x-1) end\n    return s\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"51f2d1cafc9c0f745c00037d":[{"id":209948,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  return string.sub(s, string.len(s) - string.len(ending) + 1, -1) == ending\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209949,"user_id":527,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  return s:sub(#s - #ending + 1) == ending\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209950,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  return ending:len() == 0 or s:sub(-ending:len()) == ending\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209951,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  local n = ending:len()\n  return s:reverse():sub(1, n) == ending:reverse()\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209952,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  -- your code here\n  return string.find(s, ending) and true or false\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209953,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  return s:find(ending:gsub('%)', '%%)'..'$')) and true or false\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209954,"user_id":null,"body":"local function _(s, nd)\n    return s:sub(- #nd) == nd or nd == ''\nend\n\nkata = setmetatable({}, { __index = function() return _ end })","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209955,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  -- your code here\n  return (string.sub(s, #s-(#ending-1)) == ending)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209956,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n    return not not s:sub(#s - #ending, #s):find(ending)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209957,"user_id":null,"body":"kata = {}\n\nfunction kata.solution(s, ending)\n  -- your code here\n  local len1 = #s\n  local len2 = #ending\n  return s:sub(len1-len2+1) == ending\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"523b4ff7adca849afe000035":[{"id":209958,"user_id":1365,"body":"local kata = {}\n\nfunction kata.greet()\n  return \"hello world!\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209959,"user_id":null,"body":"local kata = {}\nlocal bee_movie_script = [[According to all known laws of aviation, there is no way a bee should be able to fly.\nIts wings are too small to get its fat little body off the ground.\nThe bee, of course, flies anyway because bees don't care what humans think is impossible.\nYellow, black. Yellow, black. Yellow, black. Yellow, black.\nOoh, black and yellow!\nLet's shake it up a little.\nBarry! Breakfast is ready!\nComing!\nHang on a second.\nHello?\nBarry?\nAdam?\nCan you believe this is happening?\nI can't.\nI'll pick you up.\nLooking sharp.\nUse the stairs, Your father paid good money for those.\nSorry. I'm excited.\nHere's the graduate.\nWe're very proud of you, son.\nA perfect report card, all B's.\nVery proud.\nMa! I got a thing going here.\nYou got lint on your fuzz.\nOw! That's me!\nWave to us! We'll be in row 118,000.\nBye!\nBarry, I told you, stop flying in the house!\nHey, Adam.\nHey, Barry.\nIs that fuzz gel?\nA little. Special day, graduation.\nNever thought I'd make it.\nThree days grade school, three days high school.\nThose were awkward.\nThree days college. I'm glad I took a day and hitchhiked around The Hive.\nYou did come back different.\nHi, Barry. Artie, growing a mustache? Looks good.\nHear about Frankie?\nYeah.\nYou going to the funeral?\nNo, I'm not going.\nEverybody knows, sting someone, you die.\nDon't waste it on a squirrel.\nSuch a hothead.\nI guess he could have just gotten out of the way.\nI love this incorporating an amusement park into our day.\nThat's why we don't need vacations.\nBoy, quite a bit of pomp under the circumstances.\nWell, Adam, today we are men.\nWe are!\nBee-men.\nAmen!\nHallelujah!\nStudents, faculty, distinguished bees,\nplease welcome Dean Buzzwell.\nWelcome, New Hive City graduating class of 9:15.\nThat concludes our ceremonies And begins your career at Honex Industries!\nWill we pick our job today?\nI heard it's just orientation.\nHeads up! Here we go.\nKeep your hands and antennas inside the tram at all times.\nWonder what it'll be like?\nA little scary.\nWelcome to Honex, a division of Honesco and a part of the Hexagon Group.\nThis is it!\nWow.\nWow.\nWe know that you, as a bee, have worked your whole life to get to the point where you can work for your whole life.\nHoney begins when our valiant Pollen Jocks bring the nectar to The Hive.\nOur top-secret formula is automatically color-corrected, scent-adjusted and bubble-contoured into this soothing sweet syrup with its distinctive golden glow you know as... Honey!\nThat girl was hot.\nShe's my cousin!\nShe is?\nYes, we're all cousins.\nRight. You're right.\nAt Honex, we constantly strive to improve every aspect of bee existence.\nThese bees are stress-testing a new helmet technology.\nWhat do you think he makes?\nNot enough.\nHere we have our latest advancement, the Krelman.\nWhat does that do?\nCatches that little strand of honey that hangs after you pour it.\nSaves us millions.\nCan anyone work on the Krelman?\nOf course. Most bee jobs are small ones.\nBut bees know that every small job, if it's done well, means a lot.\nBut choose carefully because you'll stay in the job you pick for the rest of your life.\nThe same job the rest of your life? I didn't know that.\nWhat's the difference?\nYou'll be happy to know that bees, as a species, haven't had one day off in 27 million years.\nSo you'll just work us to death?\nWe'll sure try.\nWow! That blew my mind!\n\"What's the difference?\"\nHow can you say that?\nOne job forever?\nThat's an insane choice to have to make.\nI'm relieved. Now we only have to make one decision in life.\nBut, Adam, how could they never have told us that?\nWhy would you question anything? We're bees.\nWe're the most perfectly functioning society on Earth.\nYou ever think maybe things work a little too well here?\nLike what? Give me one example.\nI don't know. But you know what I'm talking about.\nPlease clear the gate. Royal Nectar Force on approach.\nWait a second. Check it out.\nHey, those are Pollen Jocks!\nWow.\nI've never seen them this close.\nThey know what it's like outside The Hive.\nYeah, but some don't come back.\nHey, Jocks!\nHi, Jocks!\nYou guys did great!\nYou're monsters!\nYou're sky freaks! I love it! I love it!\nI wonder where they were.\nI don't know.\nTheir day's not planned.\nOutside The Hive, flying who knows where, doing who knows what.\nYou can't just decide to be a Pollen Jock. You have to be bred for that.\nRight.\nLook. That's more pollen than you and I will see in a lifetime.\nIt's just a status symbol.\nBees make too much of it.\nPerhaps. Unless you're wearing it and the ladies see you wearing it.\nThose ladies?\nAren't they our cousins too?\nDistant. Distant.\nLook at these two.\nCouple of Hive Harrys.\nLet's have fun with them.\nIt must be dangerous being a Pollen Jock.\nYeah. Once a bear pinned me against a mushroom!\nHe had a paw on my throat, and with the other, he was slapping me!\nOh, my!\nI never thought I'd knock him out.\nWhat were you doing during this?\nTrying to alert the authorities.\nI can autograph that.\nA little gusty out there today, wasn't it, comrades?\nYeah. Gusty.\nWe're hitting a sunflower patch six miles from here tomorrow.\nSix miles, huh?\nBarry!\nA puddle jump for us, but maybe you're not up for it.\nMaybe I am.\nYou are not!\nWe're going 0900 at J-Gate.\nWhat do you think, buzzy-boy?\nAre you bee enough?\nI might be. It all depends on what 0900 means.\nHey, Honex!\nDad, you surprised me.\nYou decide what you're interested in?\nWell, there's a lot of choices.\nBut you only get one.\nDo you ever get bored doing the same job every day?\nSon, let me tell you about stirring.\nYou grab that stick, and you just move it around, and you stir it around.\nYou get yourself into a rhythm.\nIt's a beautiful thing.\nYou know, Dad, the more I think about it,\nmaybe the honey field just isn't right for me.\nYou were thinking of what, making balloon animals?\nThat's a bad job for a guy with a stinger.\nJanet, your son's not sure he wants to go into honey!\nBarry, you are so funny sometimes.\nI'm not trying to be funny.\nYou're not funny! You're going into honey. Our son, the stirrer!\nYou're gonna be a stirrer?\nNo one's listening to me!\nWait till you see the sticks I have.\nI could say anything right now.\nI'm gonna get an ant tattoo!\nLet's open some honey and celebrate!\nMaybe I'll pierce my thorax. Shave my antennae. Shack up with a grasshopper. Get a gold tooth and call everybody \"dawg\"!\nI'm so proud.\nWe're starting work today!\nToday's the day.\nCome on! All the good jobs will be gone.\nYeah, right.\nPollen counting, stunt bee, pouring, stirrer, front desk, hair removal...\nIs it still available?\nHang on. Two left!\nOne of them's yours! Congratulations!\nStep to the side.\nWhat'd you get?\nPicking crud out. Stellar!\nWow!\nCouple of newbies?\nYes, sir! Our first day! We are ready!\nMake your choice.\nYou want to go first?\nNo, you go.\nOh, my. What's available?\nRestroom attendant's open, not for the reason you think.\nAny chance of getting the Krelman?\nSure, you're on.\nI'm sorry, the Krelman just closed out.\nWax monkey's always open.\nThe Krelman opened up again.\nWhat happened?\nA bee died. Makes an opening. See? He's dead. Another dead one.\nDeady. Deadified. Two more dead.\nDead from the neck up. Dead from the neck down. That's life!\nOh, this is so hard!\nHeating, cooling, stunt bee, pourer, stirrer, humming, inspector number seven, lint coordinator, stripe supervisor, mite wrangler.\nBarry, what do you think I should... Barry?\nBarry!\nAll right, we've got the sunflower patch in quadrant nine...\nWhat happened to you?\nWhere are you?\nI'm going out.\nOut? Out where?\nOut there.\nOh, no!\nI have to, before I go to work for the rest of my life.\nYou're gonna die! You're crazy! Hello?\nAnother call coming in.\nIf anyone's feeling brave, there's a Korean deli on 83rd that gets their roses today.\nHey, guys.\nLook at that.\nIsn't that the kid we saw yesterday?\nHold it, son, flight deck's restricted.\nIt's OK, Lou. We're gonna take him up.\nReally? Feeling lucky, are you?\nSign here, here. Just initial that.\nThank you.\nOK.\nYou got a rain advisory today, and as you all know, bees cannot fly in rain.\nSo be careful. As always, watch your brooms, hockey sticks, dogs, birds, bears and bats.\nAlso, I got a couple of reports of root beer being poured on us.\nMurphy's in a home because of it, babbling like a cicada!\nThat's awful.\nAnd a reminder for you rookies, bee law number one, absolutely no talking to humans!\n All right, launch positions!\nBuzz, buzz, buzz, buzz! Buzz, buzz, buzz, buzz! Buzz, buzz, buzz, buzz!\nBlack and yellow!\nHello!\nYou ready for this, hot shot?\nYeah. Yeah, bring it on.\nWind, check.\nAntennae, check.\nNectar pack, check.\nWings, check.\nStinger, check.\nScared out of my shorts, check.\nOK, ladies,\nlet's move it out!\nPound those petunias, you striped stem-suckers!\nAll of you, drain those flowers!\nWow! I'm out!\nI can't believe I'm out!\nSo blue.\nI feel so fast and free!\nBox kite!\nWow!\nFlowers!\nThis is Blue Leader, We have roses visual.\nBring it around 30 degrees and hold.\nRoses!\n30 degrees, roger. Bringing it around.\nStand to the side, kid.\nIt's got a bit of a kick.\nThat is one nectar collector!\nEver see pollination up close?\nNo, sir.\nI pick up some pollen here, sprinkle it over here. Maybe a dash over there, a pinch on that one.\nSee that? It's a little bit of magic.\nThat's amazing. Why do we do that?\nThat's pollen power. More pollen, more flowers, more nectar, more honey for us.\nCool.\nI'm picking up a lot of bright yellow, Could be daisies, Don't we need those?\nCopy that visual.\nWait. One of these flowers seems to be on the move.\nSay again? You're reporting a moving flower?\nAffirmative.\nThat was on the line!\nThis is the coolest. What is it?\nI don't know, but I'm loving this color.\nIt smells good.\nNot like a flower, but I like it.\nYeah, fuzzy.\nChemical-y.\nCareful, guys. It's a little grabby.\nMy sweet lord of bees!\nCandy-brain, get off there!\nProblem!\nGuys!\nThis could be bad.\nAffirmative.\nVery close.\nGonna hurt.\nMama's little boy.\nYou are way out of position, rookie!\nComing in at you like a missile!\nHelp me!\nI don't think these are flowers.\nShould we tell him?\nI think he knows.\nWhat is this?!\nMatch point!\nYou can start packing up, honey, because you're about to eat it!\nYowser!\nGross.\nThere's a bee in the car!\nDo something!\nI'm driving!\nHi, bee.\nHe's back here!\nHe's going to sting me!\nNobody move. If you don't move, he won't sting you. Freeze!\nHe blinked!\nSpray him, Granny!\nWhat are you doing?!\nWow... the tension level out here is unbelievable.\nI gotta get home.\nCan't fly in rain. Can't fly in rain. Can't fly in rain.\nMayday! Mayday! Bee going down!\nKen, could you close the window please?\nKen, could you close the window please?\nCheck out my new resume. I made it into a fold-out brochure. You see? Folds out.\nOh, no. More humans. I don't need this.\nWhat was that?\nMaybe this time. This time. This time. This time! This time! This... Drapes!\nThat is diabolical.\nIt's fantastic. It's got all my special skills, even my top-ten favorite movies.\nWhat's number one? Star Wars?\nNah, I don't go for that... kind of stuff.\nNo wonder we shouldn't talk to them. They're out of their minds.\nWhen I leave a job interview, they're flabbergasted, can't believe what I say.\nThere's the sun. Maybe that's a way out.\nI don't remember the sun having a big 75 on it.\nI predicted global warming. I could feel it getting hotter. At first I thought it was just me.\nWait! Stop! Bee!\nStand back. These are winter boots.\nWait!\nDon't kill him!\nYou know I'm allergic to them! This thing could kill me!\nWhy does his life have less value than yours?\nWhy does his life have any less value than mine? Is that your statement?\nI'm just saying all life has value. You don't know what he's capable of feeling.\nMy brochure!\nThere you go, little guy.\nI'm not scared of him.It's an allergic thing.\n Put that on your resume brochure.\nMy whole face could puff up.\nMake it one of your special skills.\nKnocking someone out is also a special skill.\nRight. Bye, Vanessa. Thanks.\nVanessa, next week? Yogurt night?\nSure, Ken. You know, whatever.\nYou could put carob chips on there.\nBye.\nSupposed to be less calories.\nBye.\nI gotta say something. She saved my life. I gotta say something.\nAll right, here it goes.\nNah.\nWhat would I say?\nI could really get in trouble. It's a bee law. You're not supposed to talk to a human.\nI can't believe I'm doing this. I've got to.\nOh, I can't do it. Come on!\nNo. Yes. No. Do it. I can't.\nHow should I start it? \"You like jazz?\" No, that's no good.\nHere she comes! Speak, you fool!\nHi!\nI'm sorry. You're talking.\nYes, I know.\nYou're talking!\nI'm so sorry.\nNo, it's OK. It's fine.\nI know I'm dreaming. But I don't recall going to bed.\nWell, I'm sure this is very disconcerting.\nThis is a bit of a surprise to me. I mean, you're a bee!\nI am. And I'm not supposed to be doing this, but they were all trying to kill me.\nAnd if it wasn't for you... I had to thank you. It's just how I was raised.\nThat was a little weird. I'm talking with a bee.\nYeah.\nI'm talking to a bee. And the bee is talking to me!\nI just want to say I'm grateful.\nI'll leave now.\nWait! How did you learn to do that?\nWhat?\nThe talking thing.\nSame way you did, I guess. \"Mama, Dada, honey.\" You pick it up.\nThat's very funny.\nYeah.\nBees are funny. If we didn't laugh, we'd cry with what we have to deal with.\nAnyway... Can I... get you something?\nLike what?\nI don't know. I mean... I don't know. Coffee?\nI don't want to put you out.\nIt's no trouble. It takes two minutes.\nIt's just coffee.\nI hate to impose.\nDon't be ridiculous!\nActually, I would love a cup.\nHey, you want rum cake?\nI shouldn't.\nHave some.\nNo, I can't.\nCome on!\nI'm trying to lose a couple micrograms.\nWhere?\nThese stripes don't help.\nYou look great!\nI don't know if you know anything about fashion.\nAre you all right?\nNo.\nHe's making the tie in the cab as they're flying up Madison.\nHe finally gets there.\nHe runs up the steps into the church.\nThe wedding is on.\nAnd he says, \"Watermelon?\nI thought you said Guatemalan.\nWhy would I marry a watermelon?\"\nIs that a bee joke?\nThat's the kind of stuff we do.\nYeah, different.\nSo, what are you gonna do, Barry?\nAbout work? I don't know.\nI want to do my part for The Hive, but I can't do it the way they want.\nI know how you feel.\nYou do?\nSure.\nMy parents wanted me to be a lawyer or a doctor, but I wanted to be a florist.\nReally?\nMy only interest is flowers.\nOur new queen was just elected with that same campaign slogan.\nAnyway, if you look... There's my hive right there. See it?\nYou're in Sheep Meadow!\nYes! I'm right off the Turtle Pond!\nNo way! I know that area. I lost a toe ring there once.\nWhy do girls put rings on their toes?\nWhy not?\nIt's like putting a hat on your knee.\nMaybe I'll try that.\nYou all right, ma'am?\nOh, yeah. Fine.\nJust having two cups of coffee!\nAnyway, this has been great.\nThanks for the coffee.\nYeah, it's no trouble.\nSorry I couldn't finish it. If I did, I'd be up the rest of my life.\nAre you...?\nCan I take a piece of this with me?\nSure! Here, have a crumb.\nThanks!\nYeah.\nAll right. Well, then... I guess I'll see you around. Or not.\nOK, Barry.\nAnd thank you so much again... for before.\nOh, that? That was nothing.\nWell, not nothing, but... Anyway...\nThis can't possibly work.\nHe's all set to go.\nWe may as well try it.\nOK, Dave, pull the chute.\nSounds amazing.\nIt was amazing!\nIt was the scariest, happiest moment of my life.\nHumans! I can't believe you were with humans!\nGiant, scary humans!\nWhat were they like?\nHuge and crazy. They talk crazy.\nThey eat crazy giant things.\nThey drive crazy.\nDo they try and kill you, like on TV?\nSome of them. But some of them don't.\nHow'd you get back?\nPoodle.\nYou did it, and I'm glad. You saw whatever you wanted to see.\nYou had your \"experience.\" Now you can pick out yourjob and be normal.\nWell...\nWell?\nWell, I met someone.\nYou did? Was she Bee-ish?\nA wasp?! Your parents will kill you!\nNo, no, no, not a wasp.\nSpider?\nI'm not attracted to spiders.\nI know it's the hottest thing, with the eight legs and all. I can't get by that face.\nSo who is she?\nShe's... human.\nNo, no. That's a bee law. You wouldn't break a bee law.\nHer name's Vanessa.\nOh, boy.\nShe's so nice. And she's a florist!\nOh, no! You're dating a human florist!\nWe're not dating.\nYou're flying outside The Hive, talking to humans that attack our homes with power washers and M-80s! One-eighth a stick of dynamite!\nShe saved my life! And she understands me.\nThis is over!\nEat this.\nThis is not over! What was that?\nThey call it a crumb.\nIt was so stingin' stripey!\nAnd that's not what they eat.\nThat's what falls off what they eat!\nYou know what a Cinnabon is?\nNo.\nIt's bread and cinnamon and frosting. They heat it up...\nSit down!\n...really hot!\nListen to me!\nWe are not them! We're us.\nThere's us and there's them!\nYes, but who can deny the heart that is yearning?\nThere's no yearning. Stop yearning. Listen to me!\nYou have got to start thinking bee, my friend. Thinking bee!\nThinking bee.\nThinking bee.\nThinking bee! Thinking bee! Thinking bee! Thinking bee!\nThere he is. He's in the pool.\nYou know what your problem is, Barry?\nI gotta start thinking bee?\nHow much longer will this go on?\nIt's been three days! Why aren't you working?\nI've got a lot of big life decisions to think about.\nWhat life? You have no life!\nYou have no job. You're barely a bee!\nWould it kill you to make a little honey?\nBarry, come out. Your father's talking to you.\nMartin, would you talk to him?\nBarry, I'm talking to you!\nYou coming?\nGot everything?\nAll set!\nGo ahead. I'll catch up.\nDon't be too long.\nWatch this!\nVanessa!\nWe're still here.\nI told you not to yell at him.\nHe doesn't respond to yelling!\nThen why yell at me?\nBecause you don't listen!\nI'm not listening to this.\nSorry, I've gotta go.\nWhere are you going?\nI'm meeting a friend.\nA girl? Is this why you can't decide?\nBye.\nI just hope she's Bee-ish.\nThey have a huge parade of flowers every year in Pasadena?\nTo be in the Tournament of Roses, that's every florist's dream!\nUp on a float, surrounded by flowers, crowds cheering.\nA tournament. Do the roses compete in athletic events?\nNo. All right, I've got one.\nHow come you don't fly everywhere?\nIt's exhausting. Why don't you run everywhere? It's faster.\nYeah, OK, I see, I see.\nAll right, your turn.\nTiVo. You can just freeze live TV? That's insane!\nYou don't have that?\nWe have Hivo, but it's a disease. It's a horrible, horrible disease.\nOh, my.\nDumb bees!\nYou must want to sting all those jerks.\nWe try not to sting. It's usually fatal for us.\nSo you have to watch your temper.\nVery carefully.\nYou kick a wall, take a walk, write an angry letter and throw it out. Work through it like any emotion: Anger, jealousy, lust.\nOh, my goodness! Are you OK?\nYeah.\nWhat is wrong with you?!\nIt's a bug.\nHe's not bothering anybody.\nGet out of here, you creep!\nWhat was that? A Pic 'N' Save circular?\nYeah, it was. How did you know?\nIt felt like about 10 pages. Seventy-five is pretty much our limit.\nYou've really got that down to a science.\nI lost a cousin to Italian Vogue.\nI'll bet.\nWhat in the name of Mighty Hercules is this?\nHow did this get here? cute Bee, Golden Blossom, Ray Liotta Private Select?\nIs he that actor?\nI never heard of him.\nWhy is this here?\nFor people. We eat it.\nYou don't have enough food of your own?\nWell, yes.\nHow do you get it?\nBees make it.\nI know who makes it! And it's hard to make it!\nThere's heating, cooling, stirring. You need a whole Krelman thing!\nIt's organic.\nIt's our-ganic!\nIt's just honey, Barry.\nJust what?!\nBees don't know about this! This is stealing! A lot of stealing!\nYou've taken our homes, schools,hospitals! This is all we have!\nAnd it's on sale?! I'm getting to the bottom of this.\nI'm getting to the bottom of all of this!\nHey, Hector. You almost done?\nAlmost.\nHe is here. I sense it.\nWell, I guess I'll go home now and just leave this nice honey out, with no one around.\nYou're busted, box boy!\nI knew I heard something.\nSo you can talk!\nI can talk. And now you'll start talking!\nWhere you getting the sweet stuff? Who's your supplier?\nI don't understand.\nI thought we were friends.\nThe last thing we want to do is upset bees!\nYou're too late! It's ours now!\nYou, sir, have crossed the wrong sword!\nYou, sir, will be lunch for my iguana, Ignacio!\nWhere is the honey coming from? Tell me where!\nHoney Farms! It comes from Honey Farms!\nCrazy person!\nWhat horrible thing has happened here?\nThese faces, they never knew what hit them. And now\nthey're on the road to nowhere!\nJust keep still.\nWhat? You're not dead?\nDo I look dead? They will wipe anything that moves. Where you headed?\nTo Honey Farms. I am onto something huge here.\nI'm going to Alaska. Moose blood, crazy stuff. Blows your head off!\nI'm going to Tacoma.\nAnd you?\nHe really is dead.\nAll right.\nUh-oh!\nWhat is that?!\nOh, no!\nA wiper! Triple blade!\nTriple blade?\nJump on! It's your only chance, bee!\nWhy does everything have\nto be so doggone clean?!\nHow much do you people need to see?!\nOpen your eyes!\nStick your head out the window!\nFrom NPR News in Washington,\nI'm Carl Kasell.\nBut don't kill no more bugs!\nBee!\nMoose blood guy!!\nYou hear something?\nLike what?\nLike tiny screaming.\nTurn off the radio.\nWhassup, bee boy?\nHey, Blood.\nJust a row of honey jars, as far as the eye could see.\nWow!\nI assume wherever this truck goes is where they're getting it. I mean, that honey's ours.\nBees hang tight. We're all jammed in.\nIt's a close community.\nNot us, man. We on our own. Every mosquito on his own.\nWhat if you get in trouble?\nYou a mosquito, you in trouble. Nobody likes us. They just smack. See a mosquito, smack, smack!\nAt least you're out in the world. You must meet girls.\nMosquito girls try to trade up, get with a moth, dragonfly. Mosquito girl don't want no mosquito.\nYou got to be kidding me!\nMooseblood's about to leave the building! So long, bee!\nHey, guys!\nMooseblood!\nI knew I'd catch y'all down here.\nDid you bring your crazy straw?\nWe throw it in jars, slap a label on it, and it's pretty much pure profit.\nWhat is this place?\nA bee's got a brain the size of a pinhead.\nThey are pinheads!\nPinhead.\nCheck out the new smoker.\nOh, sweet. That's the one you want. The Thomas 3000!\nSmoker?\nNinety puffs a minute, semi-automatic. Twice the nicotine, all the tar. A couple breaths of this knocks them right out.\nThey make the honey, and we make the money.\n\"They make the honey, and we make the money\"?\nOh, my!\nWhat's going on? Are you OK?\nYeah. It doesn't last too long.\nDo you know you're in a fake hive with fake walls?\nOur queen was moved here. We had no choice.\nThis is your queen? That's a man in women's clothes! That's a drag queen!\nWhat is this?\nOh, no!\nThere's hundreds of them!\nBee honey.\nOur honey is being brazenly stolen on a massive scale!\nThis is worse than anything bears have done! I intend to do something.\nOh, Barry, stop.\nWho told you humans are taking our honey? That's a rumor.\nDo these look like rumors?\nThat's a conspiracy theory. These are obviously doctored photos. How did you get mixed up in this?\nHe's been talking to humans.\nWhat? Talking to humans?!\nHe has a human girlfriend. And they make out!\nMake out? Barry!\nWe do not.\nYou wish you could.\nWhose side are you on?\nThe bees!\nI dated a cricket once in San Antonio. Those crazy legs kept me up all night.\nBarry, this is what you want to do with your life?\nI want to do it for all our lives. Nobody works harder than bees!\nDad, I remember you coming home so overworked\nyour hands were still stirring. You couldn't stop.\nI remember that.\nWhat right do they have to our honey?\nWe live on two cups a year. They put it in lip balm for no reason whatsoever!\nEven if it's true, what can one bee do?\nSting them where it really hurts.\nIn the face! The eye!\nThat would hurt.\nNo.\nUp the nose? That's a killer.\nThere's only one place you can sting the humans, one place where it matters.\nHive at Five, The Hive's only full-hour action news source.\nNo more bee beards!\nWith Bob Bumble at the anchor desk. Weather with Storm Stinger. Sports with Buzz Larvi. And Jeanette Chung.\nGood evening. I'm Bob Bumble.\nAnd I'm Jeanette Ohung.\nA tri-county bee, Barry Benson, intends to sue the human race for stealing our honey, packaging it and profiting from it illegally!\nTomorrow night on Bee Larry King, we'll have three former queens here in our studio, discussing their new book, classy Ladies, out this week on Hexagon.\nTonight we're talking to Barry Benson.\nDid you ever think, \"I'm a kid from The Hive. I can't do this\"?\nBees have never been afraid to change the world.\nWhat about Bee Oolumbus? Bee Gandhi? Bejesus?\nWhere I'm from, we'd never sue humans.\nWe were thinking of stickball or candy stores.\nHow old are you?\nThe bee community is supporting you in this case, which will be the trial of the bee century.\nYou know, they have a Larry King in the human world too.\nIt's a common name. Next week...\nHe looks like you and has a show and suspenders and colored dots...\nNext week...\nGlasses, quotes on the bottom from the guest even though you just heard 'em.\nBear Week next week! They're scary, hairy and here live.\nAlways leans forward, pointy shoulders, squinty eyes, very Jewish.\nIn tennis, you attack at the point of weakness!\nIt was my grandmother, Ken. She's 81.\nHoney, her backhand's a joke!\nI'm not gonna take advantage of that?\nQuiet, please.\nActual work going on here.\nIs that that same bee?\nYes, it is!\nI'm helping him sue the human race.\nHello.\nHello, bee.\nThis is Ken.\nYeah, I remember you. Timberland, size ten and a half. Vibram sole, I believe.\nWhy does he talk again?\nListen, you better go 'cause we're really busy working.\nBut it's our yogurt night!\nBye-bye.\nWhy is yogurt night so difficult?!\nYou poor thing. You two have been at this for hours!\nYes, and Adam here has been a huge help.\nFrosting...\nHow many sugars?\nJust one. I try not to use the competition.\nSo why are you helping me?\nBees have good qualities. And it takes my mind off the shop. Instead of flowers, people are giving balloon bouquets now.\nThose are great, if you're three.\nAnd artificial flowers.\nOh, those just get me psychotic!\nYeah, me too.\nBent stingers, pointless pollination.\nBees must hate those fake things!\nNothing worse than a daffodil that's had work done.\nMaybe this could make up for it a little bit.\nThis lawsuit's a pretty big deal.\nI guess.\nYou sure you want to go through with it?\nAm I sure? When I'm done with the humans, they won't be able to say, \"Honey, I'm home,\" without paying a royalty!\nIt's an incredible scene here in downtown Manhattan, where the world anxiously waits, because for the first time in history, we will hear for ourselves if a honeybee can actually speak.\nWhat have we gotten into here, Barry?\nIt's pretty big, isn't it?\nI can't believe how many humans don't work during the day.\nYou think billion-dollar multinational food companies have good lawyers?\nEverybody needs to stay behind the barricade.\nWhat's the matter?\nI don't know, I just got a chill.\nWell, if it isn't the bee team.\nYou boys work on this?\nAll rise! The Honorable Judge Bumbleton presiding.\nAll right. Case number 4475,\nSuperior Court of New York,\nBarry Bee Benson v. the Honey Industry is now in session.\nMr. Montgomery, you're representing the five food companies collectively?\nA privilege.\nMr. Benson... you're representing all the bees of the world?\nI'm kidding. Yes, Your Honor, we're ready to proceed.\nMr. Montgomery, your opening statement, please.\nLadies and gentlemen of the jury, my grandmother was a simple woman. Born on a farm, she believed it was man's divine right to benefit from the bounty of nature God put before us.\nIf we lived in the topsy-turvy world Mr. Benson imagines, just think of what would it mean.\nI would have to negotiate with the silkworm for the elastic in my britches!\nTalking bee!\nHow do we know this isn't some sort of holographic motion-picture-capture Hollywood wizardry?\nThey could be using laser beams! Robotics! Ventriloquism! Cloning! For all we know, he could be on steroids!\nMr. Benson?\nLadies and gentlemen, there's no trickery here. I'm just an ordinary bee. Honey's pretty important to me. It's important to all bees. We invented it! We make it. And we protect it with our lives.\nUnfortunately, there are some people in this room who think they can take it from us 'cause we're the little guys!\nI'm hoping that, after this is all over, you'll see how, by taking our honey, you not only take everything we have but everything we are!\nI wish he'd dress like that all the time. So nice!\nCall your first witness.\nSo, Mr. Klauss Vanderhayden of Honey Farms, big company you have.\nI suppose so.\nI see you also own Honeyburton and Honron!\nYes, they provide beekeepers for our farms.\nBeekeeper. I find that to be a very disturbing term.\nI don't imagine you employ any bee-free-ers, do you?\nNo.\nI couldn't hear you.\nNo.\nNo. Because you don't free bees. You keep bees. Not only that, it seems you thought a bear would be an appropriate image for a jar of honey.\nThey're very lovable creatures. Yogi Bear, Fozzie Bear, Build-A-Bear.\nYou mean like this?\nBears kill bees!\nHow'd you like his head crashing through your living room?! Biting into your couch! Spitting out your throw pillows! OK, that's enough. Take him away.\nSo, Mr. Sting, thank you for being here. Your name intrigues me. Where have I heard it before?\nI was with a band called The Police.\nBut you've never been a police officer, have you?\nNo, I haven't.\nNo, you haven't. And so here we have yet another example of bee culture casually stolen by a human for nothing more than a prance-about stage name.\nOh, please.\nHave you ever been stung, Mr. Sting? Because I'm feeling a little stung, Sting. Or should I say... Mr. Gordon M. Sumner!\nThat's not his real name?! You idiots!\nMr. Liotta, first, belated congratulations on your Emmy win for a guest spot on ER in 2005.\nThank you. Thank you.\nI see from your resume that you're devilishly handsome with a churning inner turmoil that's ready to blow.\nI enjoy what I do. Is that a crime?\nNot yet it isn't. But is this what it's come to for you? Exploiting tiny, helpless bees so you don't have to rehearse your part and learn your lines, sir?\nWatch it, Benson! I could blow right now!\nThis isn't a goodfella.\nThis is a badfella!\nWhy doesn't someone just step on this creep, and we can all go home?!\nOrder in this court!\nYou're all thinking it!\nOrder! Order, I say!\nSay it!\nMr. Liotta, please sit down!\nI think it was awfully nice of that bear to pitch in like that. I think the jury's on our side.\nAre we doing everything right, legally?\nI'm a florist.\nRight. Well, here's to a great team.\nTo a great team!\nWell, hello.\nKen!\nHello.\nI didn't think you were coming.\nNo, I was just late I tried to call, but... the battery.\nI didn't want all this to go to waste,\nso I called Barry. Luckily, he was free.\nOh, that was lucky.\nThere's a little left. I could heat it up.\nYeah, heat it up, sure, whatever.\nSo I hear you're quite a tennis player. I'm not much for the game myself. The ball's a little grabby.\nThat's where I usually sit. Right... there.\nKen, Barry was looking at your resume, and he agreed with me that eating with chopsticks isn't really a special skill.\nYou think I don't see what you're doing?\nI know how hard it is to find the right job. We have that in common.\nDo we?\nBees have 100 percent employment, but we do jobs like taking the crud out.\nThat's just what I was thinking about doing.\nKen, I let Barry borrow your razor for his fuzz. I hope that was all right.\nI'm going to drain the old stinger.\nYeah, you do that.\nLook at that.\nYou know, I've just about had it with your little Mind Games.\nWhat's that?\nItalian Vogue.\nMamma mia, that's a lot of pages.\nA lot of ads.\nRemember what Van said, why is your life more valuable than mine?\nFunny, I just can't seem to recall that! I think something stinks in here!\nI love the smell of flowers.\nHow do you like the smell of flames?!\nNot as much.\nWater bug! Not taking sides!\nKen, I'm wearing a Chapstick hat!\nThis is pathetic!\nI've got issues!\nWell, well, well, a royal flush!\nYou're bluffing.\nAm I?\nSurf's up, dude!\nPoo water!\nThat bowl is gnarly. Except for those dirty yellow rings!\nKenneth! What are you doing?!\nYou know, I don't even like honey! I don't eat it!\nWe need to talk! He's just a little bee!\nAnd he happens to be the nicest bee I've met in a long time!\nLong time? What are you talking about?! Are there other bugs in your life?\n No, but there are other things bugging me in life. And you're one of them!\nFine! Talking bees, no yogurt night...\nMy nerves are fried from riding on this emotional roller coaster!\nGoodbye, Ken.\nAnd for your information, I prefer sugar-free, artificial sweeteners made by man!\nI'm sorry about all that.\nI know it's got an aftertaste! I like it!\nI always felt there was some kind of barrier between Ken and me. I couldn't overcome it.\nOh, well.\nAre you OK for the trial?\nI believe Mr. Montgomery is about out of ideas.\nWe would like to call Mr. Barry Benson Bee to the stand.\nGood idea! You can really see why he's considered one of the best lawyers...\nYeah.\nLayton, you've gotta weave some magic with this jury, or it's gonna be all over.\nDon't worry. The only thing I have to do to turn this jury around is to remind them of what they don't like about bees.\nYou got the tweezers?\nAre you allergic?\nOnly to losing, son. Only to losing.\nMr. Benson Bee, I'll ask you what I think we'd all like to know.\nWhat exactly is your relationship to that woman?\nWe're friends.\nGood friends?\nYes.\nHow good? Do you live together?\nWait a minute... Are you her little... bedbug?\nI've seen a bee documentary or two. From what I understand, doesn't your queen give birth to all the bee children?\nYeah, but...\nSo those aren't your real parents!\nOh, Barry...\nYes, they are!\nHold me back!\nYou're an illegitimate bee, aren't you, Benson?\nHe's denouncing bees!\nDon't y'all date your cousins?\nObjection!\nI'm going to pincushion this guy!\nAdam, don't! It's what he wants!\nOh, I'm hit!! Oh, lordy, I am hit!\nOrder! Order!\nThe venom! The venom is coursing through my veins! I have been felled by a winged beast of destruction! You see? You can't treat them like equals! They're striped savages! Stinging's the only thing they know! It's their way!\nAdam, stay with me.\nI can't feel my legs.\nWhat Angel of Mercy will come forward to suck the poison from my heaving buttocks?\nI will have order in this court. Order! Order, please!\nThe case of the honeybees versus the human race took a pointed Turn Against the bees yesterday when one of their legal team stung Layton T. Montgomery.\nHey, buddy.\nHey.\nIs there much pain?\nYeah.\nI... I blew the whole case, didn't I?\nIt doesn't matter. What matters is\nyou're alive. You could have died.\nI'd be better off dead. Look at me.\nThey got it from the cafeteria downstairs, in a tuna sandwich. Look, there's a little celery still on it.\nWhat was it like to sting someone?\nI can't explain it. It was all... All adrenaline and then...and then ecstasy!\nAll right.\nYou think it was all a trap?\nOf course. I'm sorry. I flew us right into this.\nWhat were we thinking? Look at us. We're just a couple of bugs in this world.\nWhat will the humans do to us if they win?\nI don't know.\nI hear they put the roaches in motels. That doesn't sound so bad.\nAdam, they check in, but they don't check out!\nOh, my.\nCould you get a nurse to close that window?\nWhy?\nThe smoke.\nBees don't smoke.\nRight. Bees don't smoke.\nBees don't smoke!\nBut some bees are smoking.\nThat's it! That's our case!\nIt is? It's not over?\nGet dressed. I've gotta go somewhere.\nGet back to the court and stall. Stall any way you can.\nAnd assuming you've done step correctly, you're ready for the tub.\nMr. Flayman.\nYes? Yes, Your Honor!\nWhere is the rest of your team?\nWell, Your Honor, it's interesting. Bees are trained to fly haphazardly, and as a result, we don't make very good time.\nI actually heard a funny story about...\nYour Honor, haven't these ridiculous bugs taken up enough of this court's valuable time? How much longer will we allow these absurd shenanigans to go on?\nThey have presented no compelling evidence to support their charges against my clients, who run legitimate businesses.\nI move for a complete dismissal of this entire case!\nMr. Flayman, I'm afraid I'm going to have to consider Mr. Montgomery's motion.\nBut you can't! We have a terrific case.\nWhere is your proof?\nWhere is the evidence?\nShow me the smoking gun!\nHold it, Your Honor!\nYou want a smoking gun? Here is your smoking gun.\nWhat is that?\nIt's a bee smoker!\nWhat, this? This harmless little contraption? This couldn't hurt a fly, let alone a bee.\nLook at what has happened to bees who have never been asked, \"Smoking or non?\" Is this what nature intended for us? To be forcibly addicted to smoke machines and man-made wooden slat work camps?\nLiving out our lives as honey slaves to the white man?\nWhat are we gonna do?\nHe's playing the species card.\nLadies and gentlemen, please, free these bees!\nFree the bees! Free the bees! Free the bees! Free the bees! Free the bees!\nThe court finds in favor of the bees!\nVanessa, we won!\nI knew you could do it! High-five!\nSorry.\nI'm OK! You know what this means?\nAll the honey will finally belong to the bees.\nNow we won't have to work so hard all the time.\nThis is an unholy perversion of the balance of nature, Benson.\nYou'll regret this.\nBarry, how much honey is out there?\nAll right. One at a time.\nBarry, who are you wearing?\nMy sweater is Ralph Lauren, and I have no pants.\nWhat if Montgomery's right?\nWhat do you mean?\nWe've been living the bee way a long time, 27 million years.\nCongratulations on your victory. What will you demand as a settlement?\nFirst, we'll demand a complete shutdown of all bee work camps.\nThen we want back the honey that was ours to begin with, every last drop.\nWe demand an end to the glorification of the bear as anything more than a filthy, smelly, bad-breath stink machine.\nWe're all aware of what they do in the woods.\nWait for my signal. Take him out.\nHe'll have nauseous for a few hours, then he'll be fine.\nAnd we will no longer tolerate bee-negative nicknames...\nBut it's just a prance-about stage name!\n...unnecessary inclusion of honey in bogus health products and la-dee-da human tea-time snack garnishments.\nCan't breathe.\nBring it in, boys!\nHold it right there! Good.\nTap it.\nMr. Buzzwell, we just passed three cups and there's gallons more coming!\nI think we need to shut down!\nShut down? We've never shut down.\nShut down honey production!\nStop making honey!\nTurn your key, sir!\nWhat do we do now?\nCannonball!\nWe're shutting honey production!\nMission abort.\nAborting pollination and nectar detail.\nReturning to base.\nAdam, you wouldn't believe how much honey was out there.\nOh, yeah?\nWhat's going on? Where is everybody?\nAre they out celebrating?\nThey're home.\nThey don't know what to do. Laying out, sleeping in.\nI heard your Uncle Carl was on his way to San Antonio with a cricket.\nAt least we got our honey back.\nSometimes I think, so what if humans liked our honey? Who wouldn't?\nIt's the greatest thing in the world! I was excited to be part of making it.\nThis was my new desk. This was my new job. I wanted to do it really well. And now...\nNow I can't.\nI don't understand why they're not happy.\nI thought their lives would be better!\nThey're doing nothing. It's amazing.\nHoney really changes people.\nYou don't have any idea what's going on, do you?\nWhat did you want to show me?\nThis.\nWhat happened here?\nThat is not the half of it.\nOh, no. Oh, my.\nThey're all wilting.\nDoesn't look very good, does it?\nNo.\nAnd whose fault do you think that is?\nYou know, I'm gonna guess bees.\nBees?\nSpecifically, me.\nI didn't think bees not needing to make honey would affect all these things.\nIt's not just flowers. Fruits, vegetables, they all need bees.\nThat's our whole SAT test right there.\nTake away produce, that affects the entire animal kingdom.\nAnd then, of course...\nThe human species?\nSo if there's no more pollination, it could all just go south here, couldn't it?\nI know this is also partly my fault.\nHow about a suicide pact?\nHow do we do it?\nI'll sting you, you step on me.\nThat just kills you twice.\nRight, right.\nListen, Barry... sorry, but I gotta get going.\nI had to open my mouth and talk.\nVanessa?\nVanessa? Why are you leaving?\nWhere are you going?\nTo the final Tournament of Roses parade in Pasadena.\nThey've moved it to this weekend because all the flowers are dying.\nIt's the Last Chance I'll ever have to see it.\nVanessa, I just wanna say I'm sorry.\nI never meant it to turn out like this.\nI know. Me neither.\nTournament of Roses.\nRoses can't do sports.\nWait a minute. Roses. Roses?\nRoses!\nVanessa!\nRoses?!\nBarry?\nRoses are flowers!\nYes, they are.\nFlowers, bees, pollen!\nI know.\nThat's why this is the last parade.\nMaybe not.\nCould you ask him to slow down?\nCould you slow down?\nBarry!\nOK, I made a huge mistake.\nThis is a total disaster, all my fault.\nYes, it kind of is.\nI've ruined the planet. I wanted to help you with the flower shop. I've made it worse.\nActually, it's completely closed down.\nI thought maybe you were remodeling.\nBut I have another idea, and it's greater than my previous ideas combined.\nI don't want to hear it!\nAll right, they have the roses, the roses have the pollen.\nI know every bee, plant and flower bud in this park.\nAll we gotta do is get what they've got back here with what we've got.\nBees.\nPark.\nPollen!\nFlowers.\nRepollination!\nAcross the nation!\nTournament of Roses, Pasadena, California.\nThey've got nothing but flowers, floats and cotton candy.\nSecurity will be tight.\nI have an idea.\nVanessa Bloome, FTD.\nOfficial floral business. It's real.\nSorry, ma'am. Nice brooch.\nThank you. It was a gift.\nOnce inside, we just pick the right float.\nHow about The Princess and the Pea?\nI could be the princess, and you could be the pea!\nYes, I got it.\nWhere should I sit?\nWhat are you?\nI believe I'm the pea.\nThe pea?\nIt goes under the mattresses.\nNot in this fairy tale, sweetheart.\nI'm getting the marshal.\nYou do that! This whole parade is a fiasco!\nLet's see what this baby'll do.\nHey, what are you doing?!\nThen all we do is blend in with traffic... without arousing suspicion.\nOnce at the airport, there's no stopping us.\nStop! Security.\nYou and your insect pack your float?\nYes.\nHas it been in your possession the entire time?\nWould you remove your shoes?\nRemove your stinger.\nIt's part of me.\nI know. Just having some fun.\nEnjoy your flight.\nThen if we're lucky, we'll have just enough pollen to do the job.\nCan you believe how lucky we are? We have just enough pollen to do the job!\nI think this is gonna work.\nIt's got to work.\nAttention, passengers, this is Captain Scott. We have a bit of bad weather in New York. It looks like we'll experience a couple hours delay.\nBarry, these are cut flowers with no water. They'll never make it.\nI gotta get up there and talk to them.\nBe careful.\nCan I get help with the Sky Mall magazine? I'd like to order the talking inflatable nose and ear hair trimmer.\nCaptain, I'm in a real situation.\nWhat'd you say, Hal?\nNothing.\nBee!\nDon't freak out! My entire species...\nWhat are you doing?\nWait a minute! I'm an attorney!\nWho's an attorney?\nDon't move.\nOh, Barry.\nGood afternoon, passengers. This is your captain. Would a Miss Vanessa Bloome in 24B please report to the cockpit? And please hurry!\nWhat happened here?\nThere was a DustBuster, a toupee, a life raft exploded.\nOne's bald, one's in a boat, they're both unconscious!\nIs that another bee joke?\nNo!\nNo one's flying the plane!\nThis is JFK control tower, Flight 356. What's your status?\nThis is Vanessa Bloome. I'm a florist from New York.\nWhere's the pilot?\nHe's unconscious, and so is the copilot.\nNot good. Does anyone onboard have flight experience?\nAs a matter of fact, there is.\nWho's that?\nBarry Benson.\nFrom the honey trial?! Oh, great.\nVanessa, this is nothing more than a big metal bee.\nIt's got giant wings, huge engines.\nI can't fly a plane.\nWhy not? Isn't John Travolta a pilot?\nYes.\nHow hard could it be?\nWait, Barry!\nWe're headed into some lightning.\nThis is Bob Bumble. We have some late-breaking news from JFK Airport, where a suspenseful scene is developing.\nBarry Benson, fresh from his legal victory...\nThat's Barry!\n...is attempting to land a plane, loaded with people, flowers and an incapacitated flight crew.\nFlowers?!\nWe have a storm in the area and two individuals at the controls with absolutely no flight experience.\nJust a minute. There's a bee on that plane.\nI'm quite familiar with Mr. Benson and his no-account compadres.\nThey've done enough damage.\nBut isn't he your only hope?\nTechnically, a bee shouldn't be able to fly at all.\nTheir wings are too small... Haven't we heard this a million times?\n\"The surface area of the wings and body mass make no sense.\"\nGet this on the air!\nGot it.\nStand by.\nWe're going live.\nThe way we work may be a mystery to you. Making honey takes a lot of bees doing a lot of small jobs.\nBut let me tell you about a small job. If you do it well, it makes a big difference.\nMore than we realized. To us, to everyone.\nThat's why I want to get bees back to working together. That's the bee way! We're not made of Jell-O.\nWe get behind a fellow.\nBlack and yellow!\nHello!\nLeft, right, down, hover.\nHover?\nForget hover.\nThis isn't so hard.\nBeep-beep! Beep-beep!\nBarry, what happened?!\nWait, I think we were on autopilot the whole time.\nThat may have been helping me.\nAnd now we're not!\nSo it turns out I cannot fly a plane.\nAll of you, let's get behind this fellow! Move it out!\nMove out!\nOur only chance is if I do what I'd do, you copy me with the wings of the plane!\nDon't have to yell.\nI'm not yelling! We're in a lot of trouble.\nIt's very hard to concentrate with that panicky tone in your voice!\nIt's not a tone. I'm panicking!\nI can't do this!\nVanessa, pull yourself together. You have to snap out of it!\nYou snap out of it.\nYou snap out of it.\nYou snap out of it!\nYou snap out of it!\nYou snap out of it!\nYou snap out of it!\nYou snap out of it!\nYou snap out of it!\nHold it!\nWhy? Come on, it's my turn.\nHow is the plane flying?\nI don't know.\nHello?\nBenson, got any flowers for a happy occasion in there?\nThe Pollen Jocks!\nThey do get behind a fellow.\nBlack and yellow.\nHello.\nAll right, let's drop this tin can on the blacktop.\nWhere? I can't see anything. Can you?\nNo, nothing. It's all cloudy.\nCome on. You got to think bee, Barry.\nThinking bee.\nThinking bee.\nThinking bee!\nThinking bee! Thinking bee!\nWait a minute. I think I'm feeling something.\nWhat?\nI don't know. It's strong, pulling me.\nLike a 27-million-year-old instinct.\nBring the nose down.\nThinking bee!\nThinking bee! Thinking bee!\nWhat in the world is on the tarmac?\nGet some lights on that!\nThinking bee!\nThinking bee! Thinking bee!\nVanessa, aim for the flower.\nOK.\nCut the engines. We're going in on bee power. Ready, boys?\nAffirmative!\nGood. Good. Easy, now. That's it.\nLand on that flower!\nReady? Full reverse!\nSpin it around!\nNot that flower! The other one!\nWhich one?\nThat flower.\nI'm aiming at the flower!\nThat's a fat guy in a flowered shirt.\nI mean the giant pulsating flower made of millions of bees!\nPull forward. Nose down. Tail up.\nRotate around it.\nThis is insane, Barry!\nThis's the only way I know how to fly.\nAm I koo-koo-kachoo, or is this plane flying in an insect-like pattern?\nGet your nose in there. Don't be afraid. Smell it. Full reverse!\nJust drop it. Be a part of it.\nAim for the center!\nNow drop it in! Drop it in, woman!\nCome on, already.\nBarry, we did it! You taught me how to fly!\nYes. No high-five!\nRight.\nBarry, it worked!\nDid you see the giant flower?\nWhat giant flower? Where? Of course\nI saw the flower! That was genius!\nThank you.\nBut we're not done yet.\nListen, everyone!\nThis runway is covered with the last pollen from the last flowers available anywhere on Earth.\nThat means this is our Last Chance. We're the only ones who make honey, pollinate flowers and dress like this.\nIf we're gonna survive as a species, this is our moment! What do you say?\nAre we going to be bees, or just Museum of Natural History keychains?\nWe're bees!\nKeychain!\nThen follow me! Except Keychain.\nHold on, Barry. Here. You've earned this.\nYeah!\nI'm a Pollen Jock! And it's a perfect fit. All I gotta do are the sleeves.\nOh, yeah.\nThat's our Barry.\nMom! The bees are back!\nIf anybody needs to make a call, now's the time. I got a feeling we'll be working late tonight!\nHere's your change. Have a great afternoon! Can I help who's next?\nWould you like some honey with that?\nIt is bee-approved. Don't forget these.\nMilk, cream, cheese, it's all me.  And I don't see a nickel!\nSometimes I just feel like a piece of meat!\nI had no idea.\nBarry, I'm sorry.\nHave you got a moment?\nWould you excuse me?\nMy mosquito associate will help you.\nSorry I'm late.\nHe's a lawyer too?\nI was already a blood-sucking parasite. All I needed was a briefcase.\nHave a great afternoon!\nBarry, I just got this huge tulip order, and I can't get them anywhere.\nNo problem, Vannie. Just leave it to me.\nYou're a lifesaver, Barry. Can I help who's next?\nAll right, scramble, jocks! It's time to fly.\nThank you, Barry!\nThat bee is living my life!\nLet it go, Kenny.\nWhen will this nightmare end?!\nLet it all go.\nBeautiful day to fly.\nSure is.\nBetween you and me,\nI was dying to get out of that office.\nYou have got to start thinking bee, my friend.\nThinking bee!\nMe?\nHold it. Let's just stop for a second. Hold it.\nI'm sorry. I'm sorry, everyone. Can we stop here?\nI'm not making a major life decision during a production number!\nAll right. Take ten, everybody. Wrap it up, guys.\nI had virtually no rehearsal for that.]]\n\nfunction kata.greet()\n  local a,b,c = bee_movie_script:match(\"(hello).+( world).+(!)\")\n  return table.concat({a,b,c})\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209960,"user_id":null,"body":"return{greet=setmetatable({k=function(a,b,v,c,d,s,Q)\n_G.helloWorld=[[ this is a stupid function that does\nreturns the following phrase 'HELLO WORLD!' in lower\ncase]]return string.sub(_G.helloWorld,68,79):lower()\n;end;[\"_cake\"]=1;},{__call=function(s,t,k);return({[\ntrue]=s.k;[false]=s;})[t==0];end;__index=function(s,\ni,bana);if i~=\"true\" then;;return s;else;return s.k;\nend;end;})(2)([[Lua is fun]])()()()([[seriously]])()\n()()()()()()()()()()()()()()()()()()()()()()()[12]()\n()()([[it is]])()()()()[1][16]()()()()()()[9][2]()()\n()()()()()()[8][7]()()()()()()[3][0]()()()()()()()()\n()()()()()()()()()()()()()()()()()()()()()()()()()()\n()()()()()()()[0xffff]()()()()()()()()()()()()()()()\n()()()([[      \u2191 \u2264 2^15  Just so you know         :)\n(:          Yes, I may be a bit messy... ]])[8][8]()\n()()()()()()()()()[8][8]()()()[\"This is a banana\"]()\n()()()()()()[8][2]()()[5][8]()[3][1]()()()()()()()()\n()()()(){1,2,3,3;}()()()[3][8][00][8][8]()()()()()()\n()()()()()()()()()()()()()()()()()()()()[1][2](00);}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209961,"user_id":null,"body":"local kata = {}\nlocal bee_movie_script = [[According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little. Barry! Breakfast is ready! Coming! Hang on a second. Hello? Barry? Adam? Can you believe this is happening? I can't. I'll pick you up. Looking sharp. Use the stairs, Your father paid good money for those. Sorry. I'm excited. Here's the graduate. We're very proud of you, son. A perfect report card, all B's. Very proud. Ma! I got a thing going here. You got lint on your fuzz. Ow! That's me! Wave to us! We'll be in row 118,000. Bye! Barry, I told you, stop flying in the house! Hey, Adam. Hey, Barry. Is that fuzz gel? A little. Special day, graduation. Never thought I'd make it. Three days grade school, three days high school. Those were awkward. Three days college. I'm glad I took a day and hitchhiked around The Hive. You did come back different. Hi, Barry. Artie, growing a mustache? Looks good. Hear about Frankie? Yeah. You going to the funeral? No, I'm not going. Everybody knows, sting someone, you die. Don't waste it on a squirrel. Such a hothead. I guess he could have just gotten out of the way. I love this incorporating an amusement park into our day. That's why we don't need vacations. Boy, quite a bit of pomp under the circumstances. Well, Adam, today we are men. We are! Bee-men. Amen! Hallelujah! Students, faculty, distinguished bees, please welcome Dean Buzzwell. Welcome, New Hive City graduating class of 9:15. That concludes our ceremonies And begins your career at Honex Industries! Will we pick our job today? I heard it's just orientation. Heads up! Here we go. Keep your hands and antennas inside the tram at all times. Wonder what it'll be like? A little scary. Welcome to Honex, a division of Honesco and a part of the Hexagon Group. This is it! Wow. Wow. We know that you, as a bee, have worked your whole life to get to the point where you can work for your whole life. Honey begins when our valiant Pollen Jocks bring the nectar to The Hive. Our top-secret formula is automatically color-corrected, scent-adjusted and bubble-contoured into this soothing sweet syrup with its distinctive golden glow you know as... Honey! That girl was hot. She's my cousin! She is? Yes, we're all cousins. Right. You're right. At Honex, we constantly strive to improve every aspect of bee existence. These bees are stress-testing a new helmet technology. What do you think he makes? Not enough. Here we have our latest advancement, the Krelman. What does that do? Catches that little strand of honey that hangs after you pour it. Saves us millions. Can anyone work on the Krelman? Of course. Most bee jobs are small ones. But bees know that every small job, if it's done well, means a lot. But choose carefully because you'll stay in the job you pick for the rest of your life. The same job the rest of your life? I didn't know that. What's the difference? You'll be happy to know that bees, as a species, haven't had one day off in 27 million years. So you'll just work us to death? We'll sure try. Wow! That blew my mind! \"What's the difference?\" How can you say that? One job forever? That's an insane choice to have to make. I'm relieved. Now we only have to make one decision in life. But, Adam, how could they never have told us that? Why would you question anything? We're bees. We're the most perfectly functioning society on Earth. You ever think maybe things work a little too well here? Like what? Give me one example. I don't know. But you know what I'm talking about. Please clear the gate. Royal Nectar Force on approach. Wait a second. Check it out. Hey, those are Pollen Jocks! Wow. I've never seen them this close. They know what it's like outside The Hive. Yeah, but some don't come back. Hey, Jocks! Hi, Jocks! You guys did great! You're monsters! You're sky freaks! I love it! I love it! I wonder where they were. I don't know. Their day's not planned. Outside The Hive, flying who knows where, doing who knows what. You can't just decide to be a Pollen Jock. You have to be bred for that. Right. Look. That's more pollen than you and I will see in a lifetime. It's just a status symbol. Bees make too much of it. Perhaps. Unless you're wearing it and the ladies see you wearing it. Those ladies? Aren't they our cousins too? Distant. Distant. Look at these two. Couple of Hive Harrys. Let's have fun with them. It must be dangerous being a Pollen Jock. Yeah. Once a bear pinned me against a mushroom! He had a paw on my throat, and with the other, he was slapping me! Oh, my! I never thought I'd knock him out. What were you doing during this? Trying to alert the authorities. I can autograph that. A little gusty out there today, wasn't it, comrades? Yeah. Gusty. We're hitting a sunflower patch six miles from here tomorrow. Six miles, huh? Barry! A puddle jump for us, but maybe you're not up for it. Maybe I am. You are not! We're going 0900 at J-Gate. What do you think, buzzy-boy? Are you bee enough? I might be. It all depends on what 0900 means. Hey, Honex! Dad, you surprised me. You decide what you're interested in? Well, there's a lot of choices. But you only get one. Do you ever get bored doing the same job every day? Son, let me tell you about stirring. You grab that stick, and you just move it around, and you stir it around. You get yourself into a rhythm. It's a beautiful thing. You know, Dad, the more I think about it, maybe the honey field just isn't right for me. You were thinking of what, making balloon animals? That's a bad job for a guy with a stinger. Janet, your son's not sure he wants to go into honey! Barry, you are so funny sometimes. I'm not trying to be funny. You're not funny! You're going into honey. Our son, the stirrer! You're gonna be a stirrer? No one's listening to me! Wait till you see the sticks I have. I could say anything right now. I'm gonna get an ant tattoo! Let's open some honey and celebrate! Maybe I'll pierce my thorax. Shave my antennae. Shack up with a grasshopper. Get a gold tooth and call everybody \"dawg\"! I'm so proud. We're starting work today! Today's the day. Come on! All the good jobs will be gone. Yeah, right. Pollen counting, stunt bee, pouring, stirrer, front desk, hair removal... Is it still available? Hang on. Two left! One of them's yours! Congratulations! Step to the side. What'd you get? Picking crud out. Stellar! Wow! Couple of newbies? Yes, sir! Our first day! We are ready! Make your choice. You want to go first? No, you go. Oh, my. What's available? Restroom attendant's open, not for the reason you think. Any chance of getting the Krelman? Sure, you're on. I'm sorry, the Krelman just closed out. Wax monkey's always open. The Krelman opened up again. What happened? A bee died. Makes an opening. See? He's dead. Another dead one. Deady. Deadified. Two more dead. Dead from the neck up. Dead from the neck down. That's life! Oh, this is so hard! Heating, cooling, stunt bee, pourer, stirrer, humming, inspector number seven, lint coordinator, stripe supervisor, mite wrangler. Barry, what do you think I should... Barry? Barry! All right, we've got the sunflower patch in quadrant nine... What happened to you? Where are you? I'm going out. Out? Out where? Out there. Oh, no! I have to, before I go to work for the rest of my life. You're gonna die! You're crazy! Hello? Another call coming in. If anyone's feeling brave, there's a Korean deli on 83rd that gets their roses today. Hey, guys. Look at that. Isn't that the kid we saw yesterday? Hold it, son, flight deck's restricted. It's OK, Lou. We're gonna take him up. Really? Feeling lucky, are you? Sign here, here. Just initial that. Thank you. OK. You got a rain advisory today, and as you all know, bees cannot fly in rain. So be careful. As always, watch your brooms, hockey sticks, dogs, birds, bears and bats. Also, I got a couple of reports of root beer being poured on us. Murphy's in a home because of it, babbling like a cicada! That's awful. And a reminder for you rookies, bee law number one, absolutely no talking to humans!  All right, launch positions! Buzz, buzz, buzz, buzz! Buzz, buzz, buzz, buzz! Buzz, buzz, buzz, buzz! Black and yellow! Hello! You ready for this, hot shot? Yeah. Yeah, bring it on. Wind, check. Antennae, check. Nectar pack, check. Wings, check. Stinger, check. Scared out of my shorts, check. OK, ladies, let's move it out! Pound those petunias, you striped stem-suckers! All of you, drain those flowers! Wow! I'm out! I can't believe I'm out! So blue. I feel so fast and free! Box kite! Wow! Flowers! This is Blue Leader, We have roses visual. Bring it around 30 degrees and hold. Roses! 30 degrees, roger. Bringing it around. Stand to the side, kid. It's got a bit of a kick. That is one nectar collector! Ever see pollination up close? No, sir. I pick up some pollen here, sprinkle it over here. Maybe a dash over there, a pinch on that one. See that? It's a little bit of magic. That's amazing. Why do we do that? That's pollen power. More pollen, more flowers, more nectar, more honey for us. Cool. I'm picking up a lot of bright yellow, Could be daisies, Don't we need those? Copy that visual. Wait. One of these flowers seems to be on the move. Say again? You're reporting a moving flower? Affirmative. That was on the line! This is the coolest. What is it? I don't know, but I'm loving this color. It smells good. Not like a flower, but I like it. Yeah, fuzzy. Chemical-y. Careful, guys. It's a little grabby. My sweet lord of bees! Candy-brain, get off there! Problem! Guys! This could be bad. Affirmative. Very close. Gonna hurt. Mama's little boy. You are way out of position, rookie! Coming in at you like a missile! Help me! I don't think these are flowers. Should we tell him? I think he knows. What is this?! Match point! You can start packing up, honey, because you're about to eat it! Yowser! Gross. There's a bee in the car! Do something! I'm driving! Hi, bee. He's back here! He's going to sting me! Nobody move. If you don't move, he won't sting you. Freeze! He blinked! Spray him, Granny! What are you doing?! Wow... the tension level out here is unbelievable. I gotta get home. Can't fly in rain. Can't fly in rain. Can't fly in rain. Mayday! Mayday! Bee going down! Ken, could you close the window please? Ken, could you close the window please? Check out my new resume. I made it into a fold-out brochure. You see? Folds out. Oh, no. More humans. I don't need this. What was that? Maybe this time. This time. This time. This time! This time! This... Drapes! That is diabolical. It's fantastic. It's got all my special skills, even my top-ten favorite movies. What's number one? Star Wars? Nah, I don't go for that... kind of stuff. No wonder we shouldn't talk to them. They're out of their minds. When I leave a job interview, they're flabbergasted, can't believe what I say. There's the sun. Maybe that's a way out. I don't remember the sun having a big 75 on it. I predicted global warming. I could feel it getting hotter. At first I thought it was just me. Wait! Stop! Bee! Stand back. These are winter boots. Wait! Don't kill him! You know I'm allergic to them! This thing could kill me! Why does his life have less value than yours? Why does his life have any less value than mine? Is that your statement? I'm just saying all life has value. You don't know what he's capable of feeling. My brochure! There you go, little guy. I'm not scared of him.It's an allergic thing.  Put that on your resume brochure. My whole face could puff up. Make it one of your special skills. Knocking someone out is also a special skill. Right. Bye, Vanessa. Thanks. Vanessa, next week? Yogurt night? Sure, Ken. You know, whatever. You could put carob chips on there. Bye. Supposed to be less calories. Bye. I gotta say something. She saved my life. I gotta say something. All right, here it goes. Nah. What would I say? I could really get in trouble. It's a bee law. You're not supposed to talk to a human. I can't believe I'm doing this. I've got to. Oh, I can't do it. Come on! No. Yes. No. Do it. I can't. How should I start it? \"You like jazz?\" No, that's no good. Here she comes! Speak, you fool! Hi! I'm sorry. You're talking. Yes, I know. You're talking! I'm so sorry. No, it's OK. It's fine. I know I'm dreaming. But I don't recall going to bed. Well, I'm sure this is very disconcerting. This is a bit of a surprise to me. I mean, you're a bee! I am. And I'm not supposed to be doing this, but they were all trying to kill me. And if it wasn't for you... I had to thank you. It's just how I was raised. That was a little weird. I'm talking with a bee. Yeah. I'm talking to a bee. And the bee is talking to me! I just want to say I'm grateful. I'll leave now. Wait! How did you learn to do that? What? The talking thing. Same way you did, I guess. \"Mama, Dada, honey.\" You pick it up. That's very funny. Yeah. Bees are funny. If we didn't laugh, we'd cry with what we have to deal with. Anyway... Can I... get you something? Like what? I don't know. I mean... I don't know. Coffee? I don't want to put you out. It's no trouble. It takes two minutes. It's just coffee. I hate to impose. Don't be ridiculous! Actually, I would love a cup. Hey, you want rum cake? I shouldn't. Have some. No, I can't. Come on! I'm trying to lose a couple micrograms. Where? These stripes don't help. You look great! I don't know if you know anything about fashion. Are you all right? No. He's making the tie in the cab as they're flying up Madison. He finally gets there. He runs up the steps into the church. The wedding is on. And he says, \"Watermelon? I thought you said Guatemalan. Why would I marry a watermelon?\" Is that a bee joke? That's the kind of stuff we do. Yeah, different. So, what are you gonna do, Barry? About work? I don't know. I want to do my part for The Hive, but I can't do it the way they want. I know how you feel. You do? Sure. My parents wanted me to be a lawyer or a doctor, but I wanted to be a florist. Really? My only interest is flowers. Our new queen was just elected with that same campaign slogan. Anyway, if you look... There's my hive right there. See it? You're in Sheep Meadow! Yes! I'm right off the Turtle Pond! No way! I know that area. I lost a toe ring there once. Why do girls put rings on their toes? Why not? It's like putting a hat on your knee. Maybe I'll try that. You all right, ma'am? Oh, yeah. Fine. Just having two cups of coffee! Anyway, this has been great. Thanks for the coffee. Yeah, it's no trouble. Sorry I couldn't finish it. If I did, I'd be up the rest of my life. Are you...? Can I take a piece of this with me? Sure! Here, have a crumb. Thanks! Yeah. All right. Well, then... I guess I'll see you around. Or not. OK, Barry. And thank you so much again... for before. Oh, that? That was nothing. Well, not nothing, but... Anyway... This can't possibly work. He's all set to go. We may as well try it. OK, Dave, pull the chute. Sounds amazing. It was amazing! It was the scariest, happiest moment of my life. Humans! I can't believe you were with humans! Giant, scary humans! What were they like? Huge and crazy. They talk crazy. They eat crazy giant things. They drive crazy. Do they try and kill you, like on TV? Some of them. But some of them don't. How'd you get back? Poodle. You did it, and I'm glad. You saw whatever you wanted to see. You had your \"experience.\" Now you can pick out yourjob and be normal. Well... Well? Well, I met someone. You did? Was she Bee-ish? A wasp?! Your parents will kill you! No, no, no, not a wasp. Spider? I'm not attracted to spiders. I know it's the hottest thing, with the eight legs and all. I can't get by that face. So who is she? She's... human. No, no. That's a bee law. You wouldn't break a bee law. Her name's Vanessa. Oh, boy. She's so nice. And she's a florist! Oh, no! You're dating a human florist! We're not dating. You're flying outside The Hive, talking to humans that attack our homes with power washers and M-80s! One-eighth a stick of dynamite! She saved my life! And she understands me. This is over! Eat this. This is not over! What was that? They call it a crumb. It was so stingin' stripey! And that's not what they eat. That's what falls off what they eat! You know what a Cinnabon is? No. It's bread and cinnamon and frosting. They heat it up... Sit down! ...really hot! Listen to me! We are not them! We're us. There's us and there's them! Yes, but who can deny the heart that is yearning? There's no yearning. Stop yearning. Listen to me! You have got to start thinking bee, my friend. Thinking bee! Thinking bee. Thinking bee. Thinking bee! Thinking bee! Thinking bee! Thinking bee! There he is. He's in the pool. You know what your problem is, Barry? I gotta start thinking bee? How much longer will this go on? It's been three days! Why aren't you working? I've got a lot of big life decisions to think about. What life? You have no life! You have no job. You're barely a bee! Would it kill you to make a little honey? Barry, come out. Your father's talking to you. Martin, would you talk to him? Barry, I'm talking to you! You coming? Got everything? All set! Go ahead. I'll catch up. Don't be too long. Watch this! Vanessa! We're still here. I told you not to yell at him. He doesn't respond to yelling! Then why yell at me? Because you don't listen! I'm not listening to this. Sorry, I've gotta go. Where are you going? I'm meeting a friend. A girl? Is this why you can't decide? Bye. I just hope she's Bee-ish. They have a huge parade of flowers every year in Pasadena? To be in the Tournament of Roses, that's every florist's dream! Up on a float, surrounded by flowers, crowds cheering. A tournament. Do the roses compete in athletic events? No. All right, I've got one. How come you don't fly everywhere? It's exhausting. Why don't you run everywhere? It's faster. Yeah, OK, I see, I see. All right, your turn. TiVo. You can just freeze live TV? That's insane! You don't have that? We have Hivo, but it's a disease. It's a horrible, horrible disease. Oh, my. Dumb bees! You must want to sting all those jerks. We try not to sting. It's usually fatal for us. So you have to watch your temper. Very carefully. You kick a wall, take a walk, write an angry letter and throw it out. Work through it like any emotion: Anger, jealousy, lust. Oh, my goodness! Are you OK? Yeah. What is wrong with you?! It's a bug. He's not bothering anybody. Get out of here, you creep! What was that? A Pic 'N' Save circular? Yeah, it was. How did you know? It felt like about 10 pages. Seventy-five is pretty much our limit. You've really got that down to a science. I lost a cousin to Italian Vogue. I'll bet. What in the name of Mighty Hercules is this? How did this get here? cute Bee, Golden Blossom, Ray Liotta Private Select? Is he that actor? I never heard of him. Why is this here? For people. We eat it. You don't have enough food of your own? Well, yes. How do you get it? Bees make it. I know who makes it! And it's hard to make it! There's heating, cooling, stirring. You need a whole Krelman thing! It's organic. It's our-ganic! It's just honey, Barry. Just what?! Bees don't know about this! This is stealing! A lot of stealing! You've taken our homes, schools,hospitals! This is all we have! And it's on sale?! I'm getting to the bottom of this. I'm getting to the bottom of all of this! Hey, Hector. You almost done? Almost. He is here. I sense it. Well, I guess I'll go home now and just leave this nice honey out, with no one around. You're busted, box boy! I knew I heard something. So you can talk! I can talk. And now you'll start talking! Where you getting the sweet stuff? Who's your supplier? I don't understand. I thought we were friends. The last thing we want to do is upset bees! You're too late! It's ours now! You, sir, have crossed the wrong sword! You, sir, will be lunch for my iguana, Ignacio! Where is the honey coming from? Tell me where! Honey Farms! It comes from Honey Farms! Crazy person! What horrible thing has happened here? These faces, they never knew what hit them. And now they're on the road to nowhere! Just keep still. What? You're not dead? Do I look dead? They will wipe anything that moves. Where you headed? To Honey Farms. I am onto something huge here. I'm going to Alaska. Moose blood, crazy stuff. Blows your head off! I'm going to Tacoma. And you? He really is dead. All right. Uh-oh! What is that?! Oh, no! A wiper! Triple blade! Triple blade? Jump on! It's your only chance, bee! Why does everything have to be so doggone clean?! How much do you people need to see?! Open your eyes! Stick your head out the window! From NPR News in Washington, I'm Carl Kasell. But don't kill no more bugs! Bee! Moose blood guy!! You hear something? Like what? Like tiny screaming. Turn off the radio. Whassup, bee boy? Hey, Blood. Just a row of honey jars, as far as the eye could see. Wow! I assume wherever this truck goes is where they're getting it. I mean, that honey's ours. Bees hang tight. We're all jammed in. It's a close community. Not us, man. We on our own. Every mosquito on his own. What if you get in trouble? You a mosquito, you in trouble. Nobody likes us. They just smack. See a mosquito, smack, smack! At least you're out in the world. You must meet girls. Mosquito girls try to trade up, get with a moth, dragonfly. Mosquito girl don't want no mosquito. You got to be kidding me! Mooseblood's about to leave the building! So long, bee! Hey, guys! Mooseblood! I knew I'd catch y'all down here. Did you bring your crazy straw? We throw it in jars, slap a label on it, and it's pretty much pure profit. What is this place? A bee's got a brain the size of a pinhead. They are pinheads! Pinhead. Check out the new smoker. Oh, sweet. That's the one you want. The Thomas 3000! Smoker? Ninety puffs a minute, semi-automatic. Twice the nicotine, all the tar. A couple breaths of this knocks them right out. They make the honey, and we make the money. \"They make the honey, and we make the money\"? Oh, my! What's going on? Are you OK? Yeah. It doesn't last too long. Do you know you're in a fake hive with fake walls? Our queen was moved here. We had no choice. This is your queen? That's a man in women's clothes! That's a drag queen! What is this? Oh, no! There's hundreds of them! Bee honey. Our honey is being brazenly stolen on a massive scale! This is worse than anything bears have done! I intend to do something. Oh, Barry, stop. Who told you humans are taking our honey? That's a rumor. Do these look like rumors? That's a conspiracy theory. These are obviously doctored photos. How did you get mixed up in this? He's been talking to humans. What? Talking to humans?! He has a human girlfriend. And they make out! Make out? Barry! We do not. You wish you could. Whose side are you on? The bees! I dated a cricket once in San Antonio. Those crazy legs kept me up all night. Barry, this is what you want to do with your life? I want to do it for all our lives. Nobody works harder than bees! Dad, I remember you coming home so overworked your hands were still stirring. You couldn't stop. I remember that. What right do they have to our honey? We live on two cups a year. They put it in lip balm for no reason whatsoever! Even if it's true, what can one bee do? Sting them where it really hurts. In the face! The eye! That would hurt. No. Up the nose? That's a killer. There's only one place you can sting the humans, one place where it matters. Hive at Five, The Hive's only full-hour action news source. No more bee beards! With Bob Bumble at the anchor desk. Weather with Storm Stinger. Sports with Buzz Larvi. And Jeanette Chung. Good evening. I'm Bob Bumble. And I'm Jeanette Ohung. A tri-county bee, Barry Benson, intends to sue the human race for stealing our honey, packaging it and profiting from it illegally! Tomorrow night on Bee Larry King, we'll have three former queens here in our studio, discussing their new book, classy Ladies, out this week on Hexagon. Tonight we're talking to Barry Benson. Did you ever think, \"I'm a kid from The Hive. I can't do this\"? Bees have never been afraid to change the world. What about Bee Oolumbus? Bee Gandhi? Bejesus? Where I'm from, we'd never sue humans. We were thinking of stickball or candy stores. How old are you? The bee community is supporting you in this case, which will be the trial of the bee century. You know, they have a Larry King in the human world too. It's a common name. Next week... He looks like you and has a show and suspenders and colored dots... Next week... Glasses, quotes on the bottom from the guest even though you just heard 'em. Bear Week next week! They're scary, hairy and here live. Always leans forward, pointy shoulders, squinty eyes, very Jewish. In tennis, you attack at the point of weakness! It was my grandmother, Ken. She's 81. Honey, her backhand's a joke! I'm not gonna take advantage of that? Quiet, please. Actual work going on here. Is that that same bee? Yes, it is! I'm helping him sue the human race. Hello. Hello, bee. This is Ken. Yeah, I remember you. Timberland, size ten and a half. Vibram sole, I believe. Why does he talk again? Listen, you better go 'cause we're really busy working. But it's our yogurt night! Bye-bye. Why is yogurt night so difficult?! You poor thing. You two have been at this for hours! Yes, and Adam here has been a huge help. Frosting... How many sugars? Just one. I try not to use the competition. So why are you helping me? Bees have good qualities. And it takes my mind off the shop. Instead of flowers, people are giving balloon bouquets now. Those are great, if you're three. And artificial flowers. Oh, those just get me psychotic! Yeah, me too. Bent stingers, pointless pollination. Bees must hate those fake things! Nothing worse than a daffodil that's had work done. Maybe this could make up for it a little bit. This lawsuit's a pretty big deal. I guess. You sure you want to go through with it? Am I sure? When I'm done with the humans, they won't be able to say, \"Honey, I'm home,\" without paying a royalty! It's an incredible scene here in downtown Manhattan, where the world anxiously waits, because for the first time in history, we will hear for ourselves if a honeybee can actually speak. What have we gotten into here, Barry? It's pretty big, isn't it? I can't believe how many humans don't work during the day. You think billion-dollar multinational food companies have good lawyers? Everybody needs to stay behind the barricade. What's the matter? I don't know, I just got a chill. Well, if it isn't the bee team. You boys work on this? All rise! The Honorable Judge Bumbleton presiding. All right. Case number 4475, Superior Court of New York, Barry Bee Benson v. the Honey Industry is now in session. Mr. Montgomery, you're representing the five food companies collectively? A privilege. Mr. Benson... you're representing all the bees of the world? I'm kidding. Yes, Your Honor, we're ready to proceed. Mr. Montgomery, your opening statement, please. Ladies and gentlemen of the jury, my grandmother was a simple woman. Born on a farm, she believed it was man's divine right to benefit from the bounty of nature God put before us. If we lived in the topsy-turvy world Mr. Benson imagines, just think of what would it mean. I would have to negotiate with the silkworm for the elastic in my britches! Talking bee! How do we know this isn't some sort of holographic motion-picture-capture Hollywood wizardry? They could be using laser beams! Robotics! Ventriloquism! Cloning! For all we know, he could be on steroids! Mr. Benson? Ladies and gentlemen, there's no trickery here. I'm just an ordinary bee. Honey's pretty important to me. It's important to all bees. We invented it! We make it. And we protect it with our lives. Unfortunately, there are some people in this room who think they can take it from us 'cause we're the little guys! I'm hoping that, after this is all over, you'll see how, by taking our honey, you not only take everything we have but everything we are! I wish he'd dress like that all the time. So nice! Call your first witness. So, Mr. Klauss Vanderhayden of Honey Farms, big company you have. I suppose so. I see you also own Honeyburton and Honron! Yes, they provide beekeepers for our farms. Beekeeper. I find that to be a very disturbing term. I don't imagine you employ any bee-free-ers, do you? No. I couldn't hear you. No. No. Because you don't free bees. You keep bees. Not only that, it seems you thought a bear would be an appropriate image for a jar of honey. They're very lovable creatures. Yogi Bear, Fozzie Bear, Build-A-Bear. You mean like this? Bears kill bees! How'd you like his head crashing through your living room?! Biting into your couch! Spitting out your throw pillows! OK, that's enough. Take him away. So, Mr. Sting, thank you for being here. Your name intrigues me. Where have I heard it before? I was with a band called The Police. But you've never been a police officer, have you? No, I haven't. No, you haven't. And so here we have yet another example of bee culture casually stolen by a human for nothing more than a prance-about stage name. Oh, please. Have you ever been stung, Mr. Sting? Because I'm feeling a little stung, Sting. Or should I say... Mr. Gordon M. Sumner! That's not his real name?! You idiots! Mr. Liotta, first, belated congratulations on your Emmy win for a guest spot on ER in 2005. Thank you. Thank you. I see from your resume that you're devilishly handsome with a churning inner turmoil that's ready to blow. I enjoy what I do. Is that a crime? Not yet it isn't. But is this what it's come to for you? Exploiting tiny, helpless bees so you don't have to rehearse your part and learn your lines, sir? Watch it, Benson! I could blow right now! This isn't a goodfella. This is a badfella! Why doesn't someone just step on this creep, and we can all go home?! Order in this court! You're all thinking it! Order! Order, I say! Say it! Mr. Liotta, please sit down! I think it was awfully nice of that bear to pitch in like that. I think the jury's on our side. Are we doing everything right, legally? I'm a florist. Right. Well, here's to a great team. To a great team! Well, hello. Ken! Hello. I didn't think you were coming. No, I was just late I tried to call, but... the battery. I didn't want all this to go to waste, so I called Barry. Luckily, he was free. Oh, that was lucky. There's a little left. I could heat it up. Yeah, heat it up, sure, whatever. So I hear you're quite a tennis player. I'm not much for the game myself. The ball's a little grabby. That's where I usually sit. Right... there. Ken, Barry was looking at your resume, and he agreed with me that eating with chopsticks isn't really a special skill. You think I don't see what you're doing? I know how hard it is to find the right job. We have that in common. Do we? Bees have 100 percent employment, but we do jobs like taking the crud out. That's just what I was thinking about doing. Ken, I let Barry borrow your razor for his fuzz. I hope that was all right. I'm going to drain the old stinger. Yeah, you do that. Look at that. You know, I've just about had it with your little Mind Games. What's that? Italian Vogue. Mamma mia, that's a lot of pages. A lot of ads. Remember what Van said, why is your life more valuable than mine? Funny, I just can't seem to recall that! I think something stinks in here! I love the smell of flowers. How do you like the smell of flames?! Not as much. Water bug! Not taking sides! Ken, I'm wearing a Chapstick hat! This is pathetic! I've got issues! Well, well, well, a royal flush! You're bluffing. Am I? Surf's up, dude! Poo water! That bowl is gnarly. Except for those dirty yellow rings! Kenneth! What are you doing?! You know, I don't even like honey! I don't eat it! We need to talk! He's just a little bee! And he happens to be the nicest bee I've met in a long time! Long time? What are you talking about?! Are there other bugs in your life?  No, but there are other things bugging me in life. And you're one of them! Fine! Talking bees, no yogurt night... My nerves are fried from riding on this emotional roller coaster! Goodbye, Ken. And for your information, I prefer sugar-free, artificial sweeteners made by man! I'm sorry about all that. I know it's got an aftertaste! I like it! I always felt there was some kind of barrier between Ken and me. I couldn't overcome it. Oh, well. Are you OK for the trial? I believe Mr. Montgomery is about out of ideas. We would like to call Mr. Barry Benson Bee to the stand. Good idea! You can really see why he's considered one of the best lawyers... Yeah. Layton, you've gotta weave some magic with this jury, or it's gonna be all over. Don't worry. The only thing I have to do to turn this jury around is to remind them of what they don't like about bees. You got the tweezers? Are you allergic? Only to losing, son. Only to losing. Mr. Benson Bee, I'll ask you what I think we'd all like to know. What exactly is your relationship to that woman? We're friends. Good friends? Yes. How good? Do you live together? Wait a minute... Are you her little... bedbug? I've seen a bee documentary or two. From what I understand, doesn't your queen give birth to all the bee children? Yeah, but... So those aren't your real parents! Oh, Barry... Yes, they are! Hold me back! You're an illegitimate bee, aren't you, Benson? He's denouncing bees! Don't y'all date your cousins? Objection! I'm going to pincushion this guy! Adam, don't! It's what he wants! Oh, I'm hit!! Oh, lordy, I am hit! Order! Order! The venom! The venom is coursing through my veins! I have been felled by a winged beast of destruction! You see? You can't treat them like equals! They're striped savages! Stinging's the only thing they know! It's their way! Adam, stay with me. I can't feel my legs. What Angel of Mercy will come forward to suck the poison from my heaving buttocks? I will have order in this court. Order! Order, please! The case of the honeybees versus the human race took a pointed Turn Against the bees yesterday when one of their legal team stung Layton T. Montgomery. Hey, buddy. Hey. Is there much pain? Yeah. I... I blew the whole case, didn't I? It doesn't matter. What matters is you're alive. You could have died. I'd be better off dead. Look at me. They got it from the cafeteria downstairs, in a tuna sandwich. Look, there's a little celery still on it. What was it like to sting someone? I can't explain it. It was all... All adrenaline and then...and then ecstasy! All right. You think it was all a trap? Of course. I'm sorry. I flew us right into this. What were we thinking? Look at us. We're just a couple of bugs in this world. What will the humans do to us if they win? I don't know. I hear they put the roaches in motels. That doesn't sound so bad. Adam, they check in, but they don't check out! Oh, my. Could you get a nurse to close that window? Why? The smoke. Bees don't smoke. Right. Bees don't smoke. Bees don't smoke! But some bees are smoking. That's it! That's our case! It is? It's not over? Get dressed. I've gotta go somewhere. Get back to the court and stall. Stall any way you can. And assuming you've done step correctly, you're ready for the tub. Mr. Flayman. Yes? Yes, Your Honor! Where is the rest of your team? Well, Your Honor, it's interesting. Bees are trained to fly haphazardly, and as a result, we don't make very good time. I actually heard a funny story about... Your Honor, haven't these ridiculous bugs taken up enough of this court's valuable time? How much longer will we allow these absurd shenanigans to go on? They have presented no compelling evidence to support their charges against my clients, who run legitimate businesses. I move for a complete dismissal of this entire case! Mr. Flayman, I'm afraid I'm going to have to consider Mr. Montgomery's motion. But you can't! We have a terrific case. Where is your proof? Where is the evidence? Show me the smoking gun! Hold it, Your Honor! You want a smoking gun? Here is your smoking gun. What is that? It's a bee smoker! What, this? This harmless little contraption? This couldn't hurt a fly, let alone a bee. Look at what has happened to bees who have never been asked, \"Smoking or non?\" Is this what nature intended for us? To be forcibly addicted to smoke machines and man-made wooden slat work camps? Living out our lives as honey slaves to the white man? What are we gonna do? He's playing the species card. Ladies and gentlemen, please, free these bees! Free the bees! Free the bees! Free the bees! Free the bees! Free the bees! The court finds in favor of the bees! Vanessa, we won! I knew you could do it! High-five! Sorry. I'm OK! You know what this means? All the honey will finally belong to the bees. Now we won't have to work so hard all the time. This is an unholy perversion of the balance of nature, Benson. You'll regret this. Barry, how much honey is out there? All right. One at a time. Barry, who are you wearing? My sweater is Ralph Lauren, and I have no pants. What if Montgomery's right? What do you mean? We've been living the bee way a long time, 27 million years. Congratulations on your victory. What will you demand as a settlement? First, we'll demand a complete shutdown of all bee work camps. Then we want back the honey that was ours to begin with, every last drop. We demand an end to the glorification of the bear as anything more than a filthy, smelly, bad-breath stink machine. We're all aware of what they do in the woods. Wait for my signal. Take him out. He'll have nauseous for a few hours, then he'll be fine. And we will no longer tolerate bee-negative nicknames... But it's just a prance-about stage name! ...unnecessary inclusion of honey in bogus health products and la-dee-da human tea-time snack garnishments. Can't breathe. Bring it in, boys! Hold it right there! Good. Tap it. Mr. Buzzwell, we just passed three cups and there's gallons more coming! I think we need to shut down! Shut down? We've never shut down. Shut down honey production! Stop making honey! Turn your key, sir! What do we do now? Cannonball! We're shutting honey production! Mission abort. Aborting pollination and nectar detail. Returning to base. Adam, you wouldn't believe how much honey was out there. Oh, yeah? What's going on? Where is everybody? Are they out celebrating? They're home. They don't know what to do. Laying out, sleeping in. I heard your Uncle Carl was on his way to San Antonio with a cricket. At least we got our honey back. Sometimes I think, so what if humans liked our honey? Who wouldn't? It's the greatest thing in the world! I was excited to be part of making it. This was my new desk. This was my new job. I wanted to do it really well. And now... Now I can't. I don't understand why they're not happy. I thought their lives would be better! They're doing nothing. It's amazing. Honey really changes people. You don't have any idea what's going on, do you? What did you want to show me? This. What happened here? That is not the half of it. Oh, no. Oh, my. They're all wilting. Doesn't look very good, does it? No. And whose fault do you think that is? You know, I'm gonna guess bees. Bees? Specifically, me. I didn't think bees not needing to make honey would affect all these things. It's not just flowers. Fruits, vegetables, they all need bees. That's our whole SAT test right there. Take away produce, that affects the entire animal kingdom. And then, of course... The human species? So if there's no more pollination, it could all just go south here, couldn't it? I know this is also partly my fault. How about a suicide pact? How do we do it? I'll sting you, you step on me. That just kills you twice. Right, right. Listen, Barry... sorry, but I gotta get going. I had to open my mouth and talk. Vanessa? Vanessa? Why are you leaving? Where are you going? To the final Tournament of Roses parade in Pasadena. They've moved it to this weekend because all the flowers are dying. It's the Last Chance I'll ever have to see it. Vanessa, I just wanna say I'm sorry. I never meant it to turn out like this. I know. Me neither. Tournament of Roses. Roses can't do sports. Wait a minute. Roses. Roses? Roses! Vanessa! Roses?! Barry? Roses are flowers! Yes, they are. Flowers, bees, pollen! I know. That's why this is the last parade. Maybe not. Could you ask him to slow down? Could you slow down? Barry! OK, I made a huge mistake. This is a total disaster, all my fault. Yes, it kind of is. I've ruined the planet. I wanted to help you with the flower shop. I've made it worse. Actually, it's completely closed down. I thought maybe you were remodeling. But I have another idea, and it's greater than my previous ideas combined. I don't want to hear it! All right, they have the roses, the roses have the pollen. I know every bee, plant and flower bud in this park. All we gotta do is get what they've got back here with what we've got. Bees. Park. Pollen! Flowers. Repollination! Across the nation! Tournament of Roses, Pasadena, California. They've got nothing but flowers, floats and cotton candy. Security will be tight. I have an idea. Vanessa Bloome, FTD. Official floral business. It's real. Sorry, ma'am. Nice brooch. Thank you. It was a gift. Once inside, we just pick the right float. How about The Princess and the Pea? I could be the princess, and you could be the pea! Yes, I got it. Where should I sit? What are you? I believe I'm the pea. The pea? It goes under the mattresses. Not in this fairy tale, sweetheart. I'm getting the marshal. You do that! This whole parade is a fiasco! Let's see what this baby'll do. Hey, what are you doing?! Then all we do is blend in with traffic... without arousing suspicion. Once at the airport, there's no stopping us. Stop! Security. You and your insect pack your float? Yes. Has it been in your possession the entire time? Would you remove your shoes? Remove your stinger. It's part of me. I know. Just having some fun. Enjoy your flight. Then if we're lucky, we'll have just enough pollen to do the job. Can you believe how lucky we are? We have just enough pollen to do the job! I think this is gonna work. It's got to work. Attention, passengers, this is Captain Scott. We have a bit of bad weather in New York. It looks like we'll experience a couple hours delay. Barry, these are cut flowers with no water. They'll never make it. I gotta get up there and talk to them. Be careful. Can I get help with the Sky Mall magazine? I'd like to order the talking inflatable nose and ear hair trimmer. Captain, I'm in a real situation. What'd you say, Hal? Nothing. Bee! Don't freak out! My entire species... What are you doing? Wait a minute! I'm an attorney! Who's an attorney? Don't move. Oh, Barry. Good afternoon, passengers. This is your captain. Would a Miss Vanessa Bloome in 24B please report to the cockpit? And please hurry! What happened here? There was a DustBuster, a toupee, a life raft exploded. One's bald, one's in a boat, they're both unconscious! Is that another bee joke? No! No one's flying the plane! This is JFK control tower, Flight 356. What's your status? This is Vanessa Bloome. I'm a florist from New York. Where's the pilot? He's unconscious, and so is the copilot. Not good. Does anyone onboard have flight experience? As a matter of fact, there is. Who's that? Barry Benson. From the honey trial?! Oh, great. Vanessa, this is nothing more than a big metal bee. It's got giant wings, huge engines. I can't fly a plane. Why not? Isn't John Travolta a pilot? Yes. How hard could it be? Wait, Barry! We're headed into some lightning. This is Bob Bumble. We have some late-breaking news from JFK Airport, where a suspenseful scene is developing. Barry Benson, fresh from his legal victory... That's Barry! ...is attempting to land a plane, loaded with people, flowers and an incapacitated flight crew. Flowers?! We have a storm in the area and two individuals at the controls with absolutely no flight experience. Just a minute. There's a bee on that plane. I'm quite familiar with Mr. Benson and his no-account compadres. They've done enough damage. But isn't he your only hope? Technically, a bee shouldn't be able to fly at all. Their wings are too small... Haven't we heard this a million times? \"The surface area of the wings and body mass make no sense.\" Get this on the air! Got it. Stand by. We're going live. The way we work may be a mystery to you. Making honey takes a lot of bees doing a lot of small jobs. But let me tell you about a small job. If you do it well, it makes a big difference. More than we realized. To us, to everyone. That's why I want to get bees back to working together. That's the bee way! We're not made of Jell-O. We get behind a fellow. Black and yellow! Hello! Left, right, down, hover. Hover? Forget hover. This isn't so hard. Beep-beep! Beep-beep! Barry, what happened?! Wait, I think we were on autopilot the whole time. That may have been helping me. And now we're not! So it turns out I cannot fly a plane. All of you, let's get behind this fellow! Move it out! Move out! Our only chance is if I do what I'd do, you copy me with the wings of the plane! Don't have to yell. I'm not yelling! We're in a lot of trouble. It's very hard to concentrate with that panicky tone in your voice! It's not a tone. I'm panicking! I can't do this! Vanessa, pull yourself together. You have to snap out of it! You snap out of it. You snap out of it. You snap out of it! You snap out of it! You snap out of it! You snap out of it! You snap out of it! You snap out of it! Hold it! Why? Come on, it's my turn. How is the plane flying? I don't know. Hello? Benson, got any flowers for a happy occasion in there? The Pollen Jocks! They do get behind a fellow. Black and yellow. Hello. All right, let's drop this tin can on the blacktop. Where? I can't see anything. Can you? No, nothing. It's all cloudy. Come on. You got to think bee, Barry. Thinking bee. Thinking bee. Thinking bee! Thinking bee! Thinking bee! Wait a minute. I think I'm feeling something. What? I don't know. It's strong, pulling me. Like a 27-million-year-old instinct. Bring the nose down. Thinking bee! Thinking bee! Thinking bee! What in the world is on the tarmac? Get some lights on that! Thinking bee! Thinking bee! Thinking bee! Vanessa, aim for the flower. OK. Cut the engines. We're going in on bee power. Ready, boys? Affirmative! Good. Good. Easy, now. That's it. Land on that flower! Ready? Full reverse! Spin it around! Not that flower! The other one! Which one? That flower. I'm aiming at the flower! That's a fat guy in a flowered shirt. I mean the giant pulsating flower made of millions of bees! Pull forward. Nose down. Tail up. Rotate around it. This is insane, Barry! This's the only way I know how to fly. Am I koo-koo-kachoo, or is this plane flying in an insect-like pattern? Get your nose in there. Don't be afraid. Smell it. Full reverse! Just drop it. Be a part of it. Aim for the center! Now drop it in! Drop it in, woman! Come on, already. Barry, we did it! You taught me how to fly! Yes. No high-five! Right. Barry, it worked! Did you see the giant flower? What giant flower? Where? Of course I saw the flower! That was genius! Thank you. But we're not done yet. Listen, everyone! This runway is covered with the last pollen from the last flowers available anywhere on Earth. That means this is our Last Chance. We're the only ones who make honey, pollinate flowers and dress like this. If we're gonna survive as a species, this is our moment! What do you say? Are we going to be bees, or just Museum of Natural History keychains? We're bees! Keychain! Then follow me! Except Keychain. Hold on, Barry. Here. You've earned this. Yeah! I'm a Pollen Jock! And it's a perfect fit. All I gotta do are the sleeves. Oh, yeah. That's our Barry. Mom! The bees are back! If anybody needs to make a call, now's the time. I got a feeling we'll be working late tonight! Here's your change. Have a great afternoon! Can I help who's next? Would you like some honey with that? It is bee-approved. Don't forget these. Milk, cream, cheese, it's all me.  And I don't see a nickel! Sometimes I just feel like a piece of meat! I had no idea. Barry, I'm sorry. Have you got a moment? Would you excuse me? My mosquito associate will help you. Sorry I'm late. He's a lawyer too? I was already a blood-sucking parasite. All I needed was a briefcase. Have a great afternoon! Barry, I just got this huge tulip order, and I can't get them anywhere. No problem, Vannie. Just leave it to me. You're a lifesaver, Barry. Can I help who's next? All right, scramble, jocks! It's time to fly. Thank you, Barry! That bee is living my life! Let it go, Kenny. When will this nightmare end?! Let it all go. Beautiful day to fly. Sure is. Between you and me, I was dying to get out of that office. You have got to start thinking bee, my friend. Thinking bee! Me? Hold it. Let's just stop for a second. Hold it. I'm sorry. I'm sorry, everyone. Can we stop here? I'm not making a major life decision during a production number! All right. Take ten, everybody. Wrap it up, guys. I had virtually no rehearsal for that.]]\n\nfunction kata.greet()\n  return bee_movie_script:sub(30476, 30480) .. bee_movie_script:sub(21495, 21500) .. bee_movie_script:sub(325, 325)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209962,"user_id":373,"body":"local kata = {}\n\nkey = \"halo!dew! thunder!\" \n\nkata.greet = function ()\n  keys = {1, 7, 3, 3, 4, 10, 8, 4, (#key-1), 3, 6, 5}\n  res = \"\"\n  for _, k in ipairs(keys) do res = res .. key:sub(k, k) end\n  return res\nend\n  -- Write a function `kata.greet` that returns \"hello world!\"\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209963,"user_id":564,"body":"local kata = {\n  greet = function()\n    return \"hello world!\"\n  end\n}\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209964,"user_id":null,"body":"local kata = {}\n\n  -- Write a function `kata.greet` that returns \"hello world!\"\nprint(string.byte(\"!\"))\nkata.greet = function()\n    local HW = string.char(104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33)\n    return HW\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209965,"user_id":null,"body":"local kata = {}\n\nkata.greet=function() \n  return (\"nuDop\"):gsub(\".+\",\"hello world!\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209966,"user_id":null,"body":"local kata = {}\n\n  -- Write a function `kata.greet` that returns \"hello world!\"\nfunction kata.greet()\n  return \"hello world!\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209967,"user_id":null,"body":"local kata = {}\nfunction kata.greet()\n--[[\nGeneral Grievous : [to Obi-Wan Kenobi]  You Fool. I have been trained in your Jedi Arts... by Count Dooku.\n\nObi-Wan Kenobi : \n--]] \nreturn \"hello world!\"\n--[[\nGeneral Grievous : General Kenobi, you are a bold one!\n\nGeneral Grievous : That wasn't much of a rescue. [snatches two lightsabers out of a droid's hands]  \nBattle Droid : You're welcome\n--]]\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"523b623152af8a30c6000027":[{"id":209968,"user_id":28,"body":"function square(n)\n  return n*n\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209969,"user_id":null,"body":"local function square(n)\n  return n * n\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209970,"user_id":53,"body":"function square(n)\n  local m = n;\n  local p = n;\n  while n > 1 do\n    m = m + p;\n    n = n - 1;\n  end\n  return m;\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:53"},{"id":209971,"user_id":null,"body":"function square(n)\n  -- Your code here :)\n  local b = n^2\n  return b\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209972,"user_id":null,"body":"local function square( n )\n  return n ^ 2\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209973,"user_id":null,"body":"function square(n)\n   return math.pow(n,2)\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209974,"user_id":null,"body":"-- This is a very redundant way of writing n*n or n^2.\n\nfunction square(n)\n\n  if n==0 then return 0 end   -- For 0\n    \n  if n > 0 then               -- For positive values\n    local sum = 0\n    for i = 1, n do\n      sum = sum + n\n    end\n    return sum\n  end\n  \n  if n < 0 then               -- For negative values(VSolution is always positive)\n    local sum = 0\n    for i = 1, n do\n      sum = sum - n              \n    end\n    return sum\n  end\n\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209975,"user_id":null,"body":"function square(n)\n  -- Your code here :)\n  return n^2\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209976,"user_id":null,"body":"function square(n)\n  -- Your code here :)\n  return n*n\nend\n\nreturn square","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"},{"id":209977,"user_id":527,"body":"return function(n) return n ^ 2 end","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 16:39:48"}],"523b66342d0c301ae400003b":[{"id":209978,"user_id":1365,"body":"local kata = {}\n\nfunction kata.multiply(a, b)\n  return a * b\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209979,"user_id":null,"body":"local kata = {}\n\n-- Write your kata.multiply function here\nfunction kata.multiply(penis, lol)\n  return penis * lol\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209980,"user_id":null,"body":"local kata = {}\n\n-- Write your kata.multiply function here\nfunction kata.multiply(num1, num2)\n   if type(num1) == 'string' or type(num2) == 'string'then\n    print('Invalid input')\n  else\n    return num1 * num2\n    end\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209981,"user_id":564,"body":"local solution = {}\n\nsolution.multiply = function (a, b) return a * b end\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209982,"user_id":null,"body":"local kata = {}\n\n-- Write your kata.multiply function here\n  function kata.multiply(firstOperand, secondOperand)\n    return firstOperand * secondOperand\n  end\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209983,"user_id":null,"body":"return{multiply=setmetatable({k=function(a,b);n=0;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;goto\ndone;k=0;::done::for _=1,a,1 do;for _=1,b,1 do;n=n+1\n;end;end;return n;end;},{__call=function(s,t);return\n({[true]=s.k;[false]=s;})[t==0];end;__index=function\n(s,i);if i~=true then;;return s;else;return s.k;end;\nend;})()()()()()([[Lua is fun]])()()()()()()()()()()\n()()()()()()()()()()()()()()()()()()()()()()()()()()\n()()()()()()[1][6]()()()()()()[9][2]()()()()()()()()\n()()()()()()[8][7]()()()()()()[3][0]()()()()()()()()\n()()()()()()()()()()()()()()()()()()()()()()()()()()\n()()()()()()()()()()()()()()()()()()()()()()()()()()\n()()()()[8][8]()()()()()()()()()()[8][8]()()()()()()\n()()()()()()[8][2][8][5][5][8][3][1]()()()()()()()()\n()()()()()()()()[3][8][00][8][8]()()()()()()()()()()\n()()()()()()()()()()()()()()()()()()()()[1][2](00);}\n\n\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209984,"user_id":null,"body":"local kata = {}\nkata.multiply = load'a,b=...return a*b'\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209985,"user_id":null,"body":"return{multiply=function(a,b)\n  local sum = 0\n  for i = 1, b do\n      sum = sum + a\n  end\n  for i = 1, a do\n      sum = sum + b\n  end\n    \n  -- calculate average\n  sum = sum \/ 2\n  return sum\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209986,"user_id":null,"body":"return {\nmultiply = function(a, b)\n  return a * b\nend\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209987,"user_id":null,"body":"local function multiply( l, r )\n  return assert( l ) * assert( r )\nend\n\nreturn setmetatable( { }, { __index = function( ) return multiply end } )","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"526233aefd4764272800036f":[{"id":209988,"user_id":null,"body":"return{matrix_addition=function(a,b)\n  local n=#a\n  local c={}\n  for x=1,n do\n    c[x]={}\n    for y=1,n do\n      c[x][y]=a[x][y]+b[x][y]\n    end\n  end\n  return c\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209989,"user_id":null,"body":"local kata = {}\nfunction kata.matrix_addition(a, b)\n  local res = {}\n  for i = 1, #a do\n    res[i] = {}\n    for j = 1, #a[1] do\n      res[i][j] = a[i][j] + b[i][j]\n    end\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209990,"user_id":null,"body":"return {\n  matrix_addition = function(a, b)\n    for i = 1, #a do\n      for j = 1, #a[i] do\n        a[i][j] = a[i][j] + b[i][j]\n      end\n    end\n\n    \n    return a\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209991,"user_id":null,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  result = {}\n  local i = 0\n  local e = 0 \n  for _ in pairs(a) do\n    i = i + 1\n    table.insert(result, {})\n    for _ in pairs(a[i]) do\n      e = e + 1\n      table.insert(result[i], a[i][e] + b[i][e])\n    end\n    e = 0\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209992,"user_id":168,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  local m, n = #a, #a > 0 and #a[1] or 0\n  local r = {}\n  for i = 1, m do\n    r[i] = {}\n    for j = 1, n do\n      r[i][j] = a[i][j] + b[i][j]\n    end\n  end\n  return r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209993,"user_id":null,"body":"kata = {}\n\n\n--[[\n\n{\n  {1, 2, 3},\n  {3, 2, 1},\n  {1, 1, 1},\n\n}\n\n{\n  {2, 2, 1},\n  {3, 2, 3},\n  {1, 1, 3},\n}\n\n--]]\n\nfunction kata.matrix_addition(a, b)\n  local r_mt = {}\n  for x = 1, #a do \n    local mt = {}\n    for y = 1, #a[x] do\n      local result = a[x][y] + b[x][y]\n      table.insert(mt, result)\n    end\n    \n    --[[   \n    local _y = a[x]\n    local _x2 = b[x]\n\n    local mt = {}\n    for y = 1, #_y do\n      local result = _y[y] + _x2[y]\n      table.insert(mt, result)\n    end\n    --]]\n    \n    table.insert(r_mt, mt)\n  end\n  \n  return r_mt\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209994,"user_id":null,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  local r ={}\n  for n=1, #a do\n    local s={}\n    for m=1, #a[n] do\n      table.insert(s, a[n][m]+b[n][m])\n    end\n    table.insert(r, s)\n  end\n  return r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209995,"user_id":null,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  for i = 1, #a do\n    for i1 = 1, #a[i] do\n      a[i][i1] = a[i][i1] + b[i][i1]\n      end\n    end\n  return a\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209996,"user_id":null,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  local newmat = {}\n  for i,v in pairs(a) do\n    newmat[i] = {}\n    for k,e in pairs(v) do\n      newmat[i][k] = e + b[i][k]              \n    end\n  end\nreturn newmat\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209997,"user_id":null,"body":"kata = {}\nfunction kata.matrix_addition(a, b)\n  for i, row in pairs(a) do\n    for j, collumn in pairs(row) do\n      a[i][j] = a[i][j] + b[i][j]\n    end\n  end\n  return a\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5264d2b162488dc400000001":[{"id":209998,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  return (sentence:gsub('%S%S%S%S%S+', string.reverse))\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":209999,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  local Answer = \"\"\n  local Space = \" \"\n  local Word = \"\"\n  local Start = 1\n  sentence = sentence .. \" \"\n  for i = 1, #sentence do\n    if sentence:sub(i, i) == Space then\n      for l = Start, i - 1 do\n        Word = Word .. sentence:sub(l, l)\n      end\n      Start = i + 1\n      if #Word >= 5 then\n        Answer = Answer .. string.reverse(Word)\n        Word = \"\"\n      else\n        Answer = Answer .. Word\n        Word = \"\"\n      end\n      if i ~= #sentence then\n        Answer = Answer .. \" \"\n      end\n    end\n  end\n  return Answer\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210000,"user_id":168,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  local ws = {}\n  for w in sentence:gmatch('%w+') do\n    table.insert(ws, #w >= 5 and w:reverse() or w)\n  end\n  return table.concat(ws, ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210001,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n    local str = {}\n    for w in string.gmatch(sentence,\"%w*%S\") do\n        table.insert(str,w)\n    end\n\n    for i, word in pairs(str) do\n        if #word >= 5 then\n           str[i] = string.reverse(word) \n        end\n    end\n\n    return table.concat(str,\" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210002,"user_id":null,"body":"local solution = {}\n\nlocal function reverse_word(word)\n    local len = #word\n    local str = \"\"\n    while len > 0 do\n      str = str .. string.sub(word, len, len)\n      len = len - 1\n    end\n    return str\nend\n\nlocal function split(word)\n  local list = {}\n  local str = \"\"\n  \n  for i = 1, #word do\n    local  c = string.sub(word, i, i)\n    if c == \" \" then\n      table.insert(list, str)\n      table.insert(list, \" \")\n      str = \"\"\n    else\n      str = str .. c  \n    end\n  end\n  \n  if str ~= \"\" then\n      table.insert(list, str)\n  end\n  \n  return list\nend\n\nfunction solution.spin_words(sentence)\n  \n  \n  local list = split(sentence)\n  local out = \"\"\n  \n  for i = 1, #list do\n      local len = #list[i]\n    \n      if len >= 5 then\n        out = out .. reverse_word(list[i])\n      else\n        out = out .. list[i]\n      end\n  end\n  \n  return out\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210003,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  return sentence:gsub(\"(%a+)\", function(s)\n      return #s < 5 and s or string.reverse(s)\n  end)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210004,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  -- Write your code here!\n  local newString = ''\n  sentence:gsub('(%w+)', function(Word)\n      if string.len(Word) >= 5 then\n        newString = newString .. Word:reverse().. ' '\n      else \n        newString = newString .. Word.. ' '\n      end\n  end)\n  if string.find(newString, ' ', -1) then\n    newString = newString:sub(1, -2)\n  end\n  return newString\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210005,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  local copySentence = sentence\n  for word in sentence:gmatch('%a+') do\n    print(word)\n    if word:len() >= 5 then\n      copySentence = copySentence:gsub(word,word:reverse())\n    end\n  end\n  return copySentence\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210006,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(st)\n  mt = \"\"\nfor w in string.gmatch(st, \"%a+\") do\n  if #w >= 5 then\n    mt = mt..string.reverse(w)..\" \"\n  else\n    mt = mt..w..\" \"\n  end\nend\n\n return string.sub(mt,1,#mt-1)\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210007,"user_id":null,"body":"local solution = {}\n\nfunction solution.spin_words(sentence)\n  reverse=function(x)\n    res=\"\"\n    for i=#x,1,-1 do\n      res=res .. x:sub(i,i)\n    end\n    return res\n  end\n  r={}\n  for v in string.gmatch(sentence,\"[^ ]+\") do\n    if(#v < 5) then\n      table.insert(r,v)\n    else\n      table.insert(r,reverse(v))\n    end\n  end\n  return table.concat(r,' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5277c8a221e209d3f6000b56":[{"id":210008,"user_id":null,"body":"local kata = {}\nkata.valid_braces = function(braces)\n  pair={[40]=41,[91]=93,[123]=125}\n  s={}\n  for i=1,#braces do\n      c=string.byte(braces,i)\n      if(#s>0 and pair[s[1]]==c)then\n        table.remove(s,1)\n      else\n        table.insert(s,1,c)\n      end\n  end\n  return #s==0\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210009,"user_id":null,"body":"return{valid_braces=load\"b=...return load('_'..b:gsub('[[{(]','(_(_%1_'):gsub('[]})]','%1))'))~=_\"}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210010,"user_id":null,"body":"local kata = {}\n\nkata.valid_braces = function(braces)\n  repeat\n    local s = braces\n    braces = braces:gsub('{}', ''):gsub('%(%)', ''):gsub('%[%]', '')\n  until s == braces\n  return braces == ''\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210011,"user_id":null,"body":"local kata = {}\n\nkata.valid_braces = function(braces)\n  local stack = {}\n  local pair = {[\")\"] = \"(\", [\"]\"] = \"[\", [\"}\"] = \"{\"}\n  for c in braces:gmatch \".\" do\n    if c == \"(\" or c == \"[\" or c == \"{\" then\n      stack[#stack + 1] = c\n    else\n      if stack[#stack] == pair[c] then stack[#stack] = nil else return false end\n    end\n  end\n  return #stack == 0\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210012,"user_id":null,"body":"local kata = {}\n\nkata.valid_braces = function(braces)\n  if braces:find(\"%(%)\") then\n    return kata.valid_braces(braces:gsub(\"%(%)\", \"\"))\n  end\n  if braces:find(\"%[%]\") then\n    return kata.valid_braces(braces:gsub(\"%[%]\", \"\"))\n  end\n  if braces:find(\"{}\") then\n    return kata.valid_braces(braces:gsub(\"{}\", \"\"))\n  end\n  return #braces == 0\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210013,"user_id":null,"body":"local kata = {}\n\nlocal function push(brace)\n  return function(stack)\n    table.insert(stack, brace)\n    return true\n  end\nend\n\nlocal function pop_and_expect(expected)\n  return function(stack)\n    local actual = table.remove(stack)\n    return actual == expected\n  end\nend\n\nlocal actions = {\n  [\"(\"] = push \"(\",\n  [\")\"] = pop_and_expect \"(\",\n  [\"[\"] = push \"[\",\n  [\"]\"] = pop_and_expect \"[\",\n  [\"{\"] = push \"{\",\n  [\"}\"] = pop_and_expect \"{\",\n}\n\nkata.valid_braces = function(braces)\n  local stack = {}\n  for i = 1, #braces do\n    local brace = string.sub(braces, i, i)\n    if not actions[brace](stack) then return false end\n  end\n  return not stack[1]\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210014,"user_id":null,"body":"local kata = {}\n\nkata.valid_braces = function(braces)\n  local stack = {}\n  for i = 1, #braces do\n    local brace = braces:sub(i, i)\n    if brace == '(' or brace == '[' or brace == '{' then\n      table.insert(stack, brace)\n    else\n      local prevBrace = table.remove(stack)\n      print(prevBrace, brace)\n      if not prevBrace or (prevBrace == '(' and brace ~= ')') or (prevBrace == '[' and brace ~= ']') or (prevBrace == '{' and brace ~= '}') then \n        return false\n      end \n    end\n  end\n  return true\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210015,"user_id":null,"body":"local kata = {}\n--[[\n(\t40\n)\t41\n[\t91\n]\t93\n{\t123\n}\t125\n]]\n\nlocal function Pair(opening, type, parent)\n  return {\n    opening = opening,\n    closure = not opening,\n    type = type,\n    sibilings = nil,\n    children = nil,\n    parent = parent\n  }\nend\n\nlocal function checkIfOpening(char)\n  return char == 40 or char == 91 or char == 123\nend\n\nlocal function getType(char)\n  if char <= 41 then\n    return 1\n  elseif char <= 93 then\n    return 2\n  else\n    return 3\n  end\nend\n\nlocal function isClosed(pair)\n  return pair.opening == pair.closure\nend\n\nlocal function isType(pair, type)\n  return pair.type == type\nend\n\nkata.valid_braces = function(braces)\n  if #braces % 2 ~= 0 then\n    return false\n  end\n  \n  local head = nil\n  \n  for i = 1, #braces do\n    local char = braces:byte(i)\n    local type = getType(char)\n    local opening = checkIfOpening(char)\n    \n    if not head then\n      head = Pair(opening, getType(char), nil)\n    else\n      if not opening and not isClosed(head) and isType(head, type) then\n        head.closure = true\n      elseif opening and not isClosed(head) then\n        local child = Pair(opening, type, head)\n        head.children, head = child, child\n      elseif not opening and isClosed(head) and head.parent then\n        if not isClosed(head.parent) and isType(head.parent, type) then\n          head.parent.closure, head = true, head.parent\n        else\n          local sibiling = Pair(false, type, head.parent.parent)\n          head.parent.sibilings, head = sibiling, sibiling\n        end\n      else\n        local sibiling = Pair(opening, type, head.parent)\n        head.sibilings, head = sibiling, sibiling\n      end\n    end\n  end\n  \n  if not head then\n    return false\n  end\n    \n  local pair = head\n  while pair do\n    if not isClosed(pair) then\n      return false\n    else\n      if pair.children then\n        pair = pair.children\n      elseif pair.sibilings then\n        pair = pair.sibilings\n      else\n        if pair.parent then\n          pair = pair.parent.sibiling\n        else\n          pair = pair.parent\n        end\n      end\n    end\n  end\n    \n  return true\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210016,"user_id":null,"body":"local kata = {}\n\nkata.valid_braces = function(braces)\n    local stack = {}\n    for i = 1, #braces do\n        local c = braces:sub(i, i)\n        if c == \"(\" or c == \"[\" or c == \"{\" then\n            table.insert(stack, c)\n        elseif c == \")\" or c == \"]\" or c == \"}\" then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if c == \")\" and top ~= \"(\" or c == \"]\" and top ~= \"[\" or c == \"}\" and top ~= \"{\" then\n                return false\n            end\n            table.remove(stack)\n        end\n    end\n    return #stack == 0\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210017,"user_id":null,"body":"local kata = {}\n\nlocal function stack()\n  local out = {}\n  out.push = function(item)\n    out[#out+1] = item\n  end\n  out.pop = function(r)\n    if #out>0 then\n      if r then\n        return r and table.remove(out, #out)\n      else\n        return out[#out]\n      end\n    end\n  end\n  return out\nend\n\nkata.valid_braces = function(braces)\n  local Opens = {['{'] = true, ['['] = true, ['('] = true}\n  local dict = { ['('] = ')', ['['] = ']', ['{'] = '}'}\n  local Current = stack()\n  \n  for Character in braces:gmatch'.' do\n    if Opens[Character] then\n      Current.push(Character)\n    else\n      local poppedValue = Current.pop()\n      if dict[poppedValue] == Character then\n        Current.pop(true)\n      else\n        return false\n      end\n    end\n  end\n  return #Current == 0\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52ceafd1f235ce81aa00073a":[{"id":210018,"user_id":28,"body":"return {\n  plural = function(n)\n    return n ~= 1\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:27"},{"id":210019,"user_id":null,"body":"return function(n)\n  return n~=1\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210020,"user_id":null,"body":"function plural(n)\n  -- Your code here :)\n  if n == 1 then\n    return false\n  end\n  return true\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210021,"user_id":null,"body":"function plural(n)\n  if n==0 then\n    return true\n  elseif n==1 then\n    return false\n  else\n    return true\n  end\n\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210022,"user_id":null,"body":"function plural(n)\n  -- Your code here :)\n  return n > 1 or n == 0\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210023,"user_id":null,"body":"function plural(n)\n  if n ~= 1 then\n      return true\n  else\n      return false\n  end\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210024,"user_id":null,"body":"function plural(n)\n  -- Your code here :)\n  if (n == 1) then\n    return false\n  else\n    return true\n  end\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210025,"user_id":null,"body":"function plural(n)\n  return n ~= 1 and true or false\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210026,"user_id":null,"body":"function plural(n)\n  return n > 1 or n < 1\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"},{"id":210027,"user_id":null,"body":"function plural(n)\n  -- Your code here :)\n  return n ~= 1\nend\n\nreturn plural","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 18:50:25"}],"52efefcbcdf57161d4000091":[{"id":210028,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  local data = {}\n  for c in s:gmatch('.') do\n    data[c] = (data[c] or 0) + 1\n  end\n  return data\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210029,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  local chars = {}\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    chars[c] = (chars[c] or 0) + 1\n  end\n  return chars\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210030,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  local t = {}\n  for c in s:gmatch('.') do\n    t[c] = (t[c] or 0) + 1\n  end\n  return t\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210031,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  local res = {}\n  for c in s:gmatch '.' do\n    res[c] = (res[c] or 0) + 1\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210032,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  local table = {}\n  if s ~= \"\" then\n    for i = 1,#s do\n      local c = string.sub(s,i,i)\n      if not table[c] then\n        table[c] = 1\n      else\n        table[c] = table[c] + 1\n      end\n    end\n  end\n  return table\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210033,"user_id":null,"body":"local sub = string.sub\n\nlocal function ____(_)\n    local __ = {}\n  \n    for ___ = 1, #_ do\n        local ____ = sub(_, ___, ___)\n    \n        if __[____] then\n            __[____] = __[____] + 1\n        else\n            __[____] = 1\n        end\n    end\n  \n    return __\nend\n\nreturn setmetatable({}, { __index = function() return ____ end })","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210034,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n    local ret = {}\n    for c in s:gmatch(\"%a\") do\n        ret[c] = (ret[c] or 0) + 1\n    end\n    return ret\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210035,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  result = {}\n  for c in s:gmatch\".\" do\n    result[c]=result[c] and result[c]+1 or 1\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210036,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n    local str = {}\n    local letters = {}\n    local anterior;\n\n    for letter in string.gmatch(s,\"%w\") do\n        table.insert(str,letter)\n    end\n\n    for i, letter in pairs(str) do\n        if letters[letter] == nil then\n           letters[letter] = 1 \n        else\n            letters[letter] = letters[letter] + 1\n        end\n    end\n\n    return letters\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210037,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_characters(s)\n  --print(s)\n  local newTable = {}\n  if s==\"\" then return {} end\n  for i = 1,#s do\n    local l = s.sub(s,i,i)\n    if not newTable[l] then\n      newTable[l] = 0\n    end\n    newTable[l] = newTable[l] + 1 \n  end\n  return newTable\n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"52fba66badcd10859f00097e":[{"id":210038,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  return s:gsub(\"[aeiouAEIOU]\", \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210039,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  -- Your code here\n  d = string.gsub(s, \"[aeiouAEIOU]\", \"\")\n  return d\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210040,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  disemvoweled = \"\"\n  for i = 1, #s do\n    if kata.isCharVowel(s:sub(i,i)) then\n      -- Do nothing\n    else\n      disemvoweled = disemvoweled .. s:sub(i,i)\n    end\n  end\n  return disemvoweled\nend\n  \nfunction kata.isCharVowel(char)\n    char = char:lower()\n    if char == \"a\" or\n       char == \"e\" or\n       char == \"i\" or\n       char == \"o\" or\n       char == \"u\" then\n    return true\n    else\n    return false\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210041,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  return s:gsub(\"[aieouAIEOU]+\", \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210042,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n    s = s:gsub('a', '')\n    s = s:gsub('e', '')\n    s = s:gsub('i', '')\n    s = s:gsub('o', '')\n    s = s:gsub('u', '')\n    s = s:gsub('A', '')\n    s = s:gsub('E', '')\n    s = s:gsub('I', '')\n    s = s:gsub('O', '')\n    s = s:gsub('U', '')\n    \n    return s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210043,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  r = \"\"\n  for i = 1, string.len(s) do\n    j = string.sub(s, i, i)\n    jU = string.upper(string.sub(s, i, i))\n   if not (jU == \"A\" or jU == \"E\" or jU == \"I\" or jU == \"O\" or jU == \"U\") then\n      r = r .. j\n    end\n  end\n  return r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210044,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  return (s:gsub('[AIUEOaiueo]', ''))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210045,"user_id":null,"body":"kata = {}\n\nlocal Vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\nlocal function IsVowel(c)\n  for _, v in ipairs(Vowels) do\n  \n    if c == v then\n      return true\n    end\n    \n  end\n  return false\nend\n\nfunction kata.disemvowel(s)\n  local NewString = \"\"\n  for i = 1, #s do\n    local c = s:sub(i,i)\n    local IsVowelC = IsVowel(c)\n    if IsVowelC == false then\n      NewString = NewString .. c\n    end\n  end\n  return NewString\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210046,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  return s:gsub(\"[aeiouAEIOU]*\",\"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210047,"user_id":null,"body":"kata = {}\n\nfunction kata.disemvowel(s)\n  return s:gsub(\"[auieoAIUEO]\",\"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"53ee5429ba190077850011d4":[{"id":210048,"user_id":null,"body":"local kata = {}\n\nfunction kata.double_integer( n )\n  return n << 1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210049,"user_id":null,"body":"function double_integer(i)\n  return i + i\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210050,"user_id":null,"body":"function double_integer(i)\n  return i << 1\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210051,"user_id":null,"body":"return function ( n )\n  return n << 1\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210052,"user_id":null,"body":"function double_integer(i)\n  -- Double the integer and return it!\n  if i > 0 then\n    i = i * 2\n  else\n    i = 0 - ( math.abs(i) * 2 )\n  end\n  return i\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210053,"user_id":null,"body":"function double_integer(i)\n  -- Double the integer and return it!\n  return i + i\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210054,"user_id":198,"body":"function double_integer(i)\n  return tonumber(i)*2\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210055,"user_id":null,"body":"function double_integer(thenumber)\n RealDoubleNumber = thenumber*2\n  return thenumber*2\n  --\ud83d\ude02\ud83d\ude02\ud83d\ude02\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210056,"user_id":null,"body":"function double_integer(i)\n  return i * 2\n  -- Double the integer and return it!\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210057,"user_id":null,"body":"function double_integer(i)\n  -- Double the integer and return it!\n  local result = i * 2\n  return result\nend\n\nreturn double_integer","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54147087d5c2ebe4f1000805":[{"id":210058,"user_id":527,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  return (bool and func1 or func2)()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210059,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  if bool then return func1() else return func2() end\nend\n\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210060,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(b, f, f2)\n  return (b and f or f2)()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210061,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  if not not bool then\n    return func1()\n  else\n    return func2()\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210062,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  if bool then return func1() else func2() end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210063,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  --[[func1=function ()\n    return true\n  end\n  func2=function ()\n    return false\n  end]]\n  if bool then\n    return func1()\n  else\n    return func2()\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210064,"user_id":null,"body":"local kata = {}\n\nlocal function func1()\n  print('true')\nend\n\nlocal function func2()\n  print('false')\nend\n\nfunction kata._if(bool, func1, func2)\n\tif (bool) then\n\t\treturn func1()\n\telse\n\t\treturn func2()\n\tend\nend\n\n\nkata._if(true, func1, func2)\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210065,"user_id":null,"body":"local kata = {\n  _if = function(bool, f1, f2)\n    if bool then\n      return f1()\n    else\n      return f2()\n    end\n  end\n}\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210066,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  if (bool) then \n  return func1()\n  end\n  if (bool ~= true) then \n  return func2()\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210067,"user_id":null,"body":"local kata = {}\n\nfunction kata._if(bool, func1, func2)\n  return bool and func1()or bool == false and func2()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"544675c6f971f7399a000e79":[{"id":210068,"user_id":1624,"body":"local kata = {\n  string_to_number = tonumber\n}\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210069,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  return tonumber(s)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210070,"user_id":527,"body":"return { string_to_number = tonumber }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210071,"user_id":null,"body":"-- no tonumber needed\n\nreturn {string_to_number = function(n)\n  local num, is_negative = 0, n:sub(1, 1) == \"-\"\n  for i = #n, (is_negative and 2 or 1), -1 do\n    num = num + (string.byte(n:sub(i, i)) - 48) * math.pow(10, #n - i)\n  end\n  return is_negative and -num or num\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210072,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  return s - '0'\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210073,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  return s+0\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210074,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  return tonumber(s, 10);\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210075,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  return 0 + s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210076,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  if s == nil then\n    return s\n  end\n  local bFu = false\n  \n  local nRet = 0;\n  for i = 1, string.len(s) do\n    repeat\n      if i == 1 and string.sub(s, 1, 1) == '-' then\n        bFu = true\n        break\n      end\n\n      nRet = nRet * 10 + (string.byte(s, i) - string.byte(0));\n    until true\n  end\n  \n  return (bFu and -nRet or nRet)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210077,"user_id":null,"body":"local kata = {}\n\nfunction kata.string_to_number(s)\n  kata = {}\n  \n  kata = tonumber(s)\n  \n  return kata\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"547f1a8d4a437abdf800055c":[{"id":210078,"user_id":null,"body":"local NamedOne = {}\n\nfunction NamedOne:new(first, last)\n  return setmetatable({\n      firstName = first,\n      lastName = last,\n  }, {\n    __index = function(this, k)\n      if k == 'fullName' then\n        return ('%s %s'):format(this.firstName, this.lastName)\n      end\n    end,\n    __newindex = function(this, k, v)\n      if k == 'fullName' then\n        local firstName, lastName = v:match '(%S+) (%S+)'\n        if firstName then this.firstName, this.lastName = firstName, lastName end\n      else\n        rawset(this, k, v)\n      end\n    end})\nend\n\nreturn NamedOne\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210079,"user_id":881,"body":"local NamedOne = {}\n\nfunction NamedOne:new(first, last)\n    local this = {\n        firstName = first, \n        lastName = last\n    }\n    setmetatable(this, self)\n    return this\nend\n\nfunction NamedOne:__index(key)\n    if key == \"fullName\" then\n        return self.firstName .. \" \" .. self.lastName    \n    end\nend\n\nfunction NamedOne:__newindex(key, value)\n    if key == \"fullName\" then\n        local first, last = value:match(\"^(%w+) (%w+)$\")\n        if first then\n            self.firstName, self.lastName = first, last\n        end\n    else\n        rawset(self, key, value)\n    end\nend\n\nreturn NamedOne\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210080,"user_id":168,"body":"local NamedOne = {}\n\nfunction NamedOne:new(first, last)\n    return setmetatable({}, {\n      __index = function(tbl, key)\n        if key == 'firstName' then\n          return first\n        elseif key == 'lastName' then\n          return last\n        elseif key == 'fullName' then\n          return first .. ' ' .. last\n        end\n      end,\n      \n      __newindex = function(tbl, key, v)\n        if key == 'firstName' then\n          first = v\n        elseif key == 'lastName' then\n          last = v\n        elseif key == 'fullName' then\n          if v:match('^%w+ %w+$') then\n            first, last = v:match('(%w+) (%w+)')\n          end\n        end\n      end\n    })\nend\n\nreturn NamedOne\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210081,"user_id":53,"body":"local NamedOne = {}\n\nfunction NamedOne:new(first, last)\n    local obj = { firstName = first,  lastName = last }\n    setmetatable(obj, self)\n    return obj\nend\n\nfunction NamedOne:__index(key)\n    if key ~= \"fullName\" then return end\n    return self.firstName .. \" \" .. self.lastName \nend\n\nfunction NamedOne:__newindex(key, value)\n    if key ~= \"fullName\" then return rawset(self, key, value) end\n    local firstName, lastName = value:match(\"^([a-zA-Z]+) ([a-zA-Z]+)$\")\n    if firstName then self.firstName, self.lastName = firstName, lastName end\nend\n\nreturn NamedOne\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54b724efac3d5402db00065e":[{"id":210082,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse)\n    morse = morse:gsub( \"^ *\", \"\") -- get rid of leading spaces\n    morse = morse:gsub( \" *$\", \"\") -- get rid of trailing spaces\n    morse = morse:gsub( \"[.-]+\", MORSE_CODE ) -- translate morse characters\n    morse = morse:gsub( \"   \", \"s\") -- save spaces between words\n    morse = morse:gsub( \" \", \"\") -- get rid of spaces between chars\n    morse = morse:gsub( \"s\", \" \") -- resore spaces between words\n    return morse\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210083,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\n\nfunction kata.decode_morse(morse_code)\n  return morse_code\n    :gsub( \"[%.%-]+\", MORSE_CODE )\n    :gsub( \"%s+\", function(s) return string.rep(\" \",#s\/\/3) end )\n    :match( \"^%s*(.-)%s*$\" )\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210084,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n  return morse_code:match(\"^%s*(.-)%s*$\"):gsub('%s?([.-]+)%s?', MORSE_CODE):gsub('   ?', ' ')\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210085,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n  print(morse_code)\n  return (morse_code:gsub('^%s*(.-)%s*$', '%1'):gsub('%S+', MORSE_CODE):gsub('   ', '\\t'):gsub(' ', ''):gsub('\\t', ' '))\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210086,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\n\nfunction kata.decode_morse(morse_code)\n  return morse_code\n    :gsub( \"[%.%-]+\", function(c) return MORSE_CODE[c] end )\n    :gsub( \"%s+\", function(s) return string.rep(\" \",#s\/\/3) end )\n    :gsub( \"^%s*(.-)%s*$\", \"%1\" )\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210087,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",[\"-...\"] = \"B\",[\"-.-.\"] = \"C\",[\"-..\"] = \"D\",[\".\"] = \"E\",[\"..-.\"] = \"F\",[\"--.\"] = \"G\",[\"....\"] = \"H\",\n    [\"..\"] = \"I\",[\".---\"] = \"J\",[\"-.-\"] = \"K\",[\".-..\"] = \"L\",[\"--\"] = \"M\",[\"-.\"] = \"N\",[\"---\"] = \"O\",[\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",[\".-.\"] = \"R\",[\"...\"] = \"S\",[\"-\"] = \"T\",[\"..-\"] = \"U\",[\"...-\"] = \"V\",[\".--\"] = \"W\",[\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",[\"--..\"] = \"Z\",[\"-----\"] = \"0\",[\".----\"] = \"1\",[\"..---\"] = \"2\",[\"...--\"] = \"3\",[\"....-\"] = \"4\",[\".....\"] = \"5\",\n    [\"-....\"] = \"6\",[\"--...\"] = \"7\",[\"---..\"] = \"8\",[\"----.\"] = \"9\",[\".-.-.-\"] = \".\",[\"--..--\"] = \",\",[\"..--..\"] = \"?\",[\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",[\"-..-.\"] = \"\/\",[\"-.--.\"] = \"(\",[\"-.--.-\"] = \")\",[\".-...\"] = \"&\",[\"---...\"] = \"=>\",[\"-.-.-.\"] = \";\",[\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",[\"-....-\"] = \"-\",[\"..--.-\"] = \"_\",[\".-..-.\"] = \"\\\"\",[\"...-..-\"] = \"$\",[\".--.-.\"] = \"@\",[\"...---...\"] = \"SOS\",\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n  return morse_code:gsub(\"(%S+)(%s*)\", function(code, s)\n    return MORSE_CODE[code]..(\" \"):rep(#s\/\/3)\n  end):match(\"^%s*(.-)%s*$\")\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210088,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n  result = \"\"\n  key = \"\"\n  space_seen = 0\n  for i = 1, #morse_code do\n    if string.sub(morse_code, i, i) == \" \" then\n      if key ~= \"\" then\n        result = result .. MORSE_CODE[key]\n        key = \"\"\n        space_seen = 1\n      elseif space_seen == 1 then\n        result = result .. \" \"\n        space_seen = space_seen + 1\n      else\n        space_seen = space_seen + 1\n        if space_seen == 3 then\n          space_seen = 0\n        end\n      end\n    else\n      key = key .. string.sub(morse_code, i, i)\n    end\n  end\n  if key ~= \"\" then\n    result = result .. MORSE_CODE[key]\n  end\n  while #result > 0 and string.sub(result, 1, 1) == \" \" do\n    result = string.sub(result, 2, #result)\n  end\n  while #result > 0 and string.sub(result, #result, #result) == \" \" do\n    result = string.sub(result, 1, #result - 1)\n  end\n  return result\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210089,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\n\nfunction kata.decode_morse(morse_code)       \n  by_words, _ = morse_code:gsub(\"%s%s%s\", \"!\")      -- I've change the word separator ('   ') to '!'\n  by_words = by_words .. '!'                        -- Add one more at the so we don't miss the last bit :)\n  out = ''\n  for word in by_words:gmatch(\"[-.%s]+!+\") do       -- So I can use simpler patterns: Here, separate by words\n    for letter in word:gmatch(\"[-.]+\") do           -- Now find each character\n      out = out .. MORSE_CODE[letter]               -- translate it\n    end\n    for i in word:gmatch(\"!\") do\n      out = out .. ' '\n    end                                             -- Put a space after each word\n  end\n  return out:gsub(\"^(.-)%s*$\", \"%1\")                -- Remove trailing space, and Bob's your uncle!\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210090,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n  return morse_code:match( \"^%s*(.-)%s*$\" )\n                   :gsub(\"(%S+)%s?\", MORSE_CODE)\n                   :gsub(\"%s%s\",\" \"):gsub(\"%s%s\",\" \")\n                   \nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210091,"user_id":null,"body":"local MORSE_CODE = {\n    [\".-\"] = \"A\",\n    [\"-...\"] = \"B\",\n    [\"-.-.\"] = \"C\",\n    [\"-..\"] = \"D\",\n    [\".\"] = \"E\",\n    [\"..-.\"] = \"F\",\n    [\"--.\"] = \"G\",\n    [\"....\"] = \"H\",\n    [\"..\"] = \"I\",\n    [\".---\"] = \"J\",\n    [\"-.-\"] = \"K\",\n    [\".-..\"] = \"L\",\n    [\"--\"] = \"M\",\n    [\"-.\"] = \"N\",\n    [\"---\"] = \"O\",\n    [\".--.\"] = \"P\",\n    [\"--.-\"] = \"Q\",\n    [\".-.\"] = \"R\",\n    [\"...\"] = \"S\",\n    [\"-\"] = \"T\",\n    [\"..-\"] = \"U\",\n    [\"...-\"] = \"V\",\n    [\".--\"] = \"W\",\n    [\"-..-\"] = \"X\",\n    [\"-.--\"] = \"Y\",\n    [\"--..\"] = \"Z\",\n    [\"-----\"] = \"0\",\n    [\".----\"] = \"1\",\n    [\"..---\"] = \"2\",\n    [\"...--\"] = \"3\",\n    [\"....-\"] = \"4\",\n    [\".....\"] = \"5\",\n    [\"-....\"] = \"6\",\n    [\"--...\"] = \"7\",\n    [\"---..\"] = \"8\",\n    [\"----.\"] = \"9\",\n    [\".-.-.-\"] = \".\",\n    [\"--..--\"] = \",\",\n    [\"..--..\"] = \"?\",\n    [\".----.\"] = \"'\",\n    [\"-.-.--\"] = \"!\",\n    [\"-..-.\"] = \"\/\",\n    [\"-.--.\"] = \"(\",\n    [\"-.--.-\"] = \")\",\n    [\".-...\"] = \"&\",\n    [\"---...\"] = \"=>\",\n    [\"-.-.-.\"] = \";\",\n    [\"-...-\"] = \"=\",\n    [\".-.-.\"] = \"+\",\n    [\"-....-\"] = \"-\",\n    [\"..--.-\"] = \"_\",\n    [\".-..-.\"] = \"\\\"\",\n    [\"...-..-\"] = \"$\",\n    [\".--.-.\"] = \"@\",\n    [\"...---...\"] = \"SOS\"\n}\n\nlocal kata = {}\nfunction kata.decode_morse(morse_code)\n\n  local words = {}\n  \n  for word in string.gmatch(morse_code..'   ', \"(.-)   \") do\n    local text = ''\n    for morse in string.gmatch(word, \"([^ ]+)\") do\n       text = text .. MORSE_CODE[morse]\n    end\n    table.insert(words, text)\n  end\n  \n  return string.gsub(table.concat(words, ' '), \"^%s*(.-)%s*$\", \"%1\")\nend\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54bf85e3d5b56c7a05000cf9":[{"id":210092,"user_id":null,"body":"function number(lines)\n  local res = {}\n  for i, line in ipairs(lines) do\n    res[i] = ('%d: %s'):format(i, line)\n  end\n  return res\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210093,"user_id":null,"body":"function number(lines)\n  local new_lines = {}\n  \n  for line_number, line in ipairs(lines) do\n    new_lines[line_number] = line_number .. \": \" .. line\n  end\n  \n  return new_lines\nend\n\nreturn number\n\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210094,"user_id":168,"body":"function number(lines)\n  local r = {}\n  for i, x in ipairs(lines) do\n    table.insert(r, i .. ': ' .. x)\n  end\n  return r\nend\n\nreturn number\n\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210095,"user_id":53,"body":"function number(lines)\n  for i, c in ipairs(lines) do\n    lines[i] = string.format(\"%d: %s\", i, c)\n  end\n  return lines\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210096,"user_id":null,"body":"function number(lines)\n    local result = {}\n    for i, line in ipairs(lines) do\n        result[i] = tostring(i) .. \": \" .. line\n    end\n    return result\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210097,"user_id":null,"body":"function number(lines)\n  \n  local arr = {}\n  \n  for v, k in ipairs(lines) do\n    \n    arr[v] = v .. \": \" .. k\n    \n    \n    end\n  \n  return arr\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210098,"user_id":null,"body":"local function number( ln )\n  local h = { }\n  \n  for index = 1, #ln do\n    h[ index ] = string.format( '%i: %s', index, ln[ index ] )\n  end\n  \n  return h\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210099,"user_id":null,"body":"function number(lines)\n  local result = {}\n  for i, str in ipairs(lines) do  result[i] = i .. ': ' .. str end\n  return result\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210100,"user_id":null,"body":"function number(lines)\n  local idk = {}\n  for i, v in pairs(lines) do table.insert(idk, i.. \": \" ..v) end\n  return idk\nend\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210101,"user_id":null,"body":"function number(lines)\n  local sol = {}\n  for i, v in pairs(lines) do\n    table.insert(sol, i .. \": \" .. v)\n  end\n  return sol\nend\n\nreturn number","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54c27a33fb7da0db0100040e":[{"id":210102,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  local SquareRound = math.floor(math.sqrt(n))\n  if SquareRound * SquareRound == n then\n    return true\n  end\n  return false\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210103,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  return n >= 0 and n ^ 0.5 % 1 == 0\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210104,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  if math.abs(n) ~= n then return false end -- returns if negative\n  local square = math.sqrt(n) -- here we get the square of n\n  local round = math.floor(square) -- here we round the square to get the whole number\n  \n  -- If the round its equal to the square value, that means that n its a square number\n  -- Else if the round its not equal to the square value, that means square its decimal, meaning that n its not a square number\n  \n  return round == square \nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210105,"user_id":1474,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  if n < 0 then return false end\n  sqrt = math.sqrt(n)\n  return sqrt == math.floor(sqrt)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210106,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  return math.sqrt(n) == math.floor(math.sqrt(n))\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210107,"user_id":null,"body":"return{is_square=function(n)\n  local sqrt=math.sqrt(n)\n  return sqrt==math.floor(sqrt)\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210108,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  return math.floor(math.sqrt(n)) == math.sqrt(n)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210109,"user_id":198,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  local _, f = math.modf(n^0.5)\n  return f == 0 and n >= 0\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210110,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  return math.tointeger(math.sqrt(n)) and true or false\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210111,"user_id":null,"body":"local solution = {}\n\nfunction solution.is_square(n)\n  return n>=0 and math.tointeger(math.sqrt(n))~=nil\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54d512e62a5e54c96200019e":[{"id":210112,"user_id":53,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  local fs, i, cnt = {}, 2, 0\n  while (i <= n) do\n    cnt = 0\n    while (n % i == 0) do\n      n = n \/\/ i\n      cnt = cnt + 1\n    end\n    if (cnt == 1) then\n      fs[#fs+1] = string.format(\"(%d)\", i)\n    elseif (cnt > 1) then\n      fs[#fs+1] = string.format(\"(%d**%d)\", i, cnt)\n    end\n    i = i + 1\n  end\n  if (#fs == 0) then\n    return string.format(\"(%d)\", n)\n  else\n    return table.concat(fs, \"\")\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210113,"user_id":null,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  local factors = {}\n  local function factorize(m)\n    local count = 0\n    while n%m == 0 do\n      count = count + 1\n      n = n \/ m\n    end\n    if count == 1 then\n      factors[#factors+1] = ('(%d)'):format(m)\n    elseif count > 1 then\n      factors[#factors+1] = ('(%d**%d)'):format(m, count)\n    end\n  end\n  factorize(2)\n  local m = 3\n  while m <= math.sqrt(n) do\n    factorize(m)\n    m = m + 2\n  end\n  if n ~= 1 then\n    factors[#factors+1] = ('(%d)'):format(n)\n  end\n  return table.concat(factors)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210114,"user_id":null,"body":"local solution = {}\nlocal fmod = math.fmod; local ceil = math.ceil; local toint = math.tointeger\n\nfunction solution.prime_factors(n)\n  local result_s = \"\"; local pow, mult = 1, 1; local sqr = ceil(n^(1\/2)) \n  local prime_check = function(num) local b = true; for i = 2, ceil(num^(1\/2)) do if num ~= 2 and fmod(num, i) == 0 then b = false; break end; end; return b end \n  local add_result = function(i)\n    repeat mult = mult * i; pow = pow + 1 until fmod(n, i^pow) ~= 0\n    result_s = (pow == 2) and result_s .. \"(\" .. i .. \")\" or result_s .. \"(\" .. i .. \"**\" .. (pow - 1) .. \")\"\n    pow = 1\n  end\n  for i = 2, sqr do\n    if fmod(n, i) == 0 then if prime_check(i) then add_result(i) end; local x = toint(n \/ i); if prime_check(x) and x > sqr then add_result(x) end; end\n    if mult == n then break end\n  end  \n  if result_s == \"\" then result_s = \"(\" .. n .. \")\" end\n  return result_s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210115,"user_id":null,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n    -- your code\n    ans = \"\"\n    print(n)\n    -- \u5bb9\u65a5\u539f\u7406 \u8d28\u56e0\u6570\u5206\u89e3\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then        \n        cnt = 0\n        while n % i == 0 do \n          n = n \/ i\n          cnt = cnt + 1\n        end\n        if cnt == 1 then\n           ans = ans .. string.format(\"(%d)\", i)\n        else\n          ans = ans .. string.format(\"(%d**%d)\", i, cnt)\n        end\n      end     \n    end\n    if n > 1 then\n        ans = ans .. string.format(\"(%d)\", n)\n    end\n    return ans\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210116,"user_id":null,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  -- going to try dividing n by all the primes less than sqrt(n)\n  -- but where to get the prime sequence?\n  -- maybe it will work by using all numbers instead of primes\n  -- Tried to use the 2, 3, 6n+-1 prime trick, it timed out\n  -- so trying all odd numbers and two\n  local str = \"\"\n  local q = 2\n  local exp = 0\n  while (n >= q) and (n % q) == 0 do\n    exp = exp +1\n    n = n \/\/ q\n  end\n  if exp==1 then\n    str = str .. \"(\"..q..\")\"\n  elseif exp>1 then\n    str = str .. \"(\"..q..\"**\"..exp..\")\"\n  end\n  for q = 3, n, 2 do\n      if q*q > n then break end\n      local exp = 0\n      while (n % q) == 0 do\n        exp = exp + 1\n        n = n \/\/ q\n      end\n      if exp==1 then\n        str = str .. \"(\"..q..\")\"\n      elseif exp>1 then\n        str = str .. \"(\"..q..\"**\"..exp..\")\"\n      end\n  end\n  if n > 1 then\n    str = str .. \"(\"..n..\")\"\n  end\n  return str\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210117,"user_id":168,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  local factors, p = {}, 2\n  while p * p <= n do\n    local e = 0\n    while n % p == 0 do\n      e = e + 1\n      n = n \/\/ p\n    end\n    if e == 1 then \n      table.insert(factors, '('..p..')')\n    elseif e > 1 then \n      table.insert(factors, '('..p..'**'..e..')')\n    end\n    p = p + 1\n  end\n  if n > 1 then table.insert(factors, '('..n..')') end\n  return table.concat(factors)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210118,"user_id":null,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  local result = {}\n  local i, j, pow = 2, 1, 0\n  repeat\n    if n%i==0 then\n      pow = result[j]==nil and 1 or pow + 1\n      result[j] = i .. '**' .. pow\n      n = n \/ i\n    else\n      j = #result + 1\n      i = i==2 and i+1 or i+2\n    end\n  until i > n\n  return ('(' .. table.concat(result, ')(') .. ')'):gsub('%*%*1%)', ')')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210119,"user_id":null,"body":"local solution = {}\n\nlocal m_tFactors =\n{\n  -- [1] = {nPrimeFactor, nPower},\n}\n\nlocal function _InsertOnePrimeFactor(nPrime)\n  for _, v in ipairs(m_tFactors) do\n  if v[1] == nPrime then\n    v[2] = v[2] + 1\n      return\n    end\n  end\n  table.insert(m_tFactors, {nPrime, 1})\nend\n\nlocal getPrimeFactors\n\ngetPrimeFactors = function(n)\n  if n <= 1 then\n    -- Do Nothing.\n    return\n  else\n    local k = 2\n    while(k <= n \/ k) do\n      if (n % k == 0) then\n        _InsertOnePrimeFactor(k)\n        getPrimeFactors(n \/\/ k)\n        \n        return\n      end\n      k = k + 1\n    end\n    \n    _InsertOnePrimeFactor(n)\n  end\nend\n\nfunction solution.prime_factors(n)\n  m_tFactors = {}\n  getPrimeFactors(n)\n  \n  local strRes = \"\"\n  for _, v in ipairs(m_tFactors) do\n    strRes = strRes .. \"(\" .. v[1] .. tostring(v[2] > 1 and (\"**\" .. v[2]) or \"\") .. \")\"\n  end\n  \n  return strRes\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210120,"user_id":null,"body":"local solution = {}\n\nfunction counter(array)\n    local freq = {}\n    for k, v in ipairs(array) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\n\nfunction create_string(freq)\n    local keys = {}\n    for k,v in pairs(freq) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    \n    local s = \"\"\n    for k,v in pairs(keys) do\n        s = s .. \"(\" .. tostring(v)\n        if freq[v] > 1 then\n            s = s .. \"**\" .. tostring(freq[v])     \n        end     \n        s = s .. \")\"\n    end\n    return s\nend\n\nfunction solution.prime_factors(n)\n    local numbers = {}\n    local new_n = n\n    local i = 2\n    while i <= new_n do\n        if new_n % i == 0 then\n            table.insert(numbers, i)\n            new_n = new_n \/ i\n        else\n            i = i + 1\n        end\n    end\n\n    if #numbers == 0 then\n        table.insert(numbers, n)\n    end\n\n    factors = counter(numbers)\n    table.sort(factors)\n\n    return create_string(factors)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210121,"user_id":null,"body":"local solution = {}\n\nfunction solution.prime_factors(n)\n  local p = {[1] = false} -- table with divisors of n, not a divisor is represented by false\n  \n  while n ~= 1 do\n    local div = 2\n    for i = div, math.huge do\n      if n % i == 0 then -- if i is a divisor of n we add it to the table p\n        div = i\n        p[div] = p[div] and (p[div] + 1) or 1\n        break\n      else -- if i is not a divisor we give it false\n        p[i] = p[i] or false\n      end\n    end\n    n = n \/ div\n  end\n  \n  local str = \"\"\n  for k, v in ipairs(p) do -- we run through all the numbers from 1 up to the highest divisor \n    if v ~= false then\n      local pow = (v ~= 1) and (\"**\" .. v) or \"\"\n      str = str .. \"(\" .. k .. pow .. \")\"\n    end\n  end\n  return str\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54da539698b8a2ad76000228":[{"id":210122,"user_id":135,"body":"return {\n  is_valid_walk = function(walk)\n    if #walk ~= 10 then return false end\n    \n    local dir_table = {n=0,e=0,s=0,w=0}\n    for index, dir in ipairs(walk) do\n      dir_table[dir] = dir_table[dir] + 1\n    end\n    \n    return dir_table[\"n\"] == dir_table[\"s\"] and dir_table[\"e\"] == dir_table[\"w\"]\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210123,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    if #walk ~= 10 then return false end\n    pos = {0, 0}\n    for i, direction in ipairs(walk) do\n      if direction == \"n\" then pos[2] = pos[2] + 1 end\n      if direction == \"s\" then pos[2] = pos[2] - 1 end\n      if direction == \"w\" then pos[1] = pos[1] - 1 end\n      if direction == \"e\" then pos[1] = pos[1] + 1 end \n    end\n    return pos[1] == 0 and pos[2] == 0\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210124,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    return #walk == 10 and #table.concat(table.sort(walk) or walk):gsub('%bns', ''):gsub('(.-)(w+)', '%2%1'):gsub('%bwe', '') == 0\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210125,"user_id":168,"body":"return {\n  is_valid_walk = function(walk)\n    local s = table.concat(walk)\n    local function count(x) return select(2, s:gsub(x, '')) end\n    return #s == 10 and count(\"n\") == count(\"s\") and count(\"w\") == count(\"e\")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210126,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    local n = 0\n    local e = 0\n    if(#walk == 10) then\n      for i, v in ipairs(walk)\n      do\n        if (v == \"n\") then\n          n = n + 1\n        elseif (v == \"s\") then\n          n = n - 1\n        elseif (v == \"e\") then\n          e = e + 1\n        else\n          e = e - 1\n        end\n      end\n      if ((n == 0) and (e == 0)) then\n        return true\n      else\n        return false\n      end\n    else\n      return false\n    end\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210127,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    if (#walk ~= 10) then return false end\n    local valueMap = {n=1, s=-1, w=10, e=-10}\n    local sum = 0\n    for i, dir in ipairs(walk) do\n      sum = sum + valueMap[dir]\n    end\n    return sum == 0\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210128,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    if #walk ~= 10 then return false end\n      \n    local count = {[\"n\"] = 0, [\"s\"] = 0, [\"e\"] = 0, [\"w\"] = 0}\n    \n    for i, v in pairs(walk) do\n      if v == \"n\" then count.n = count.n + 1 \n        elseif v == \"s\" then count.s = count.s + 1\n        elseif v == \"e\" then count.e = count.e + 1\n        else count.w = count.w + 1 \n      end\n    end\n        \n    return count.n == count.s and count.e == count.w \n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210129,"user_id":null,"body":"function is_valid_walk(walk)\n\nend\n\nreturn {\n  is_valid_walk = function(walk)\n    local start = {x = 0, y = 0}\n    local end_point = {x = 0, y = 0}\n    local count = 0\n    for i = 1, #walk do\n        if walk[i] == \"n\" then\n            end_point.y = end_point.y + 1\n        elseif walk[i] == \"s\" then\n            end_point.y = end_point.y - 1\n        elseif walk[i] == \"e\" then\n            end_point.x = end_point.x + 1\n        elseif walk[i] == \"w\" then\n            end_point.x = end_point.x - 1\n        end\n        count = count + 1\n    end\n    if count == 10 and end_point.x == start.x and end_point.y == start.y then\n        return true\n    else\n        return false\n    end\n  end\n}\n\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210130,"user_id":null,"body":"return {\n  is_valid_walk = function(walk)\n    if #walk ~= 10 then\n      return false\n    else \n      local t = {}\n      for _, d in pairs(walk) do\n        t[d] = (t[d] or 0) + 1\n      end\n      return t.n == t.s and t.e == t.w\n    end\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210131,"user_id":null,"body":"function returns_to_start(walk)\n  local x = 0\n  local y = 0\n  local t = {\n    n = function () y = y + 1 end,\n    s = function () y = y - 1 end,\n    e = function () x = x + 1 end,\n    w = function () x = x - 1 end\n  }\n  for _,dir in ipairs(walk) do\n   t[dir]()\n  end\n  return x == 0 and y == 0\nend\n\nreturn {\n  is_valid_walk = function(walk)\n    return returns_to_start(walk) and #walk == 10\n  end\n}\n\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54db15b003e88a6a480000b9":[{"id":210132,"user_id":null,"body":"local solution = {}\n\nfunction solution.fromNb2Str(n, sys)\n  if list_product(sys) <= n then\n    return \"Not applicable\"\n  end\n  for i=1,#sys do\n    for j=i+1,#sys do\n      if gcd(sys[i], sys[j]) ~= 1 then\n        return \"Not applicable\"\n      end\n    end\n  end\n  arr = {}\n  for _,m in ipairs(sys) do\n    table.insert(arr, n%m)\n  end\n  return \"-\"..table.concat(arr, \"--\")..\"-\"\nend\n\nfunction gcd(a, b)\n  return b == 0 and a or gcd(b, a%b)\nend\n\nfunction list_product(lst)\n  local prod = 1;\n  for _,v in pairs(lst) do\n    prod = prod * v\n  end\n  return prod\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210133,"user_id":53,"body":"local solution = {}\n\nfunction solution.fromNb2Str(n, sys)\n  local prd, lcm, res = 1, 1, \"\";\n  local function gcd(a, b)\n    if b == 0 then return a else return gcd(b, a % b) end\n  end\n  for _, e in ipairs(sys) do\n    prd = prd * e;\n    lcm = (lcm * e) \/\/ gcd(lcm, e);\n    res = res .. \"-\" .. (n % e) .. \"-\";\n  end\n  if prd < n or not (prd == lcm) then return \"Not applicable\" else\n  return res end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210134,"user_id":null,"body":"local solution = {}\n\nfunction solution.fromNb2Str(n, sys)\n  local s, u, err = 1, \"\", \"Not applicable\"\n  for i, x in ipairs(sys) do\n    for j=i+1,#sys do\n      for k=2, sys[j] do\n        if x%k+sys[j]%k==0 then return err end\n      end\n    end\n    s, u = s*x, u..\"-\"..(n%x)..\"-\"\n  end\n  return s<n and err or u\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210135,"user_id":168,"body":"local solution = {}\n\nfunction gcd(a, b)\n  while b ~= 0 do\n    a, b = b, a % b\n  end\n  return a\nend\n\nfunction solution.fromNb2Str(n, sys)\n  local r, p = '', 1\n  for i = 1, #sys do\n    local b = sys[i]\n    for j = i + 1, #sys do\n      if gcd(b, sys[j]) ~= 1 then\n        return 'Not applicable'\n      end\n    end\n    p = p * b\n    r = r .. '-' .. n % b .. '-'\n  end\n  return p <= n and 'Not applicable' or r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210136,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a, b) \n  if b == 0 then return a end\n  return gcd(b, a%b)\nend\n\nfunction solution.fromNb2Str(n, sys)\n  local lcm, check = 1, 1\n  for _, v in ipairs(sys) do \n    check = check * v \n    lcm = (lcm * v) \/ gcd(lcm, v)\n  end\n  if check < n or lcm ~= check then return \"Not applicable\" end\n    \n  local res = {}\n  for i, v in ipairs(sys) do res[i] = n % v end\n  return \"-\" .. table.concat(res, \"--\") .. \"-\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210137,"user_id":null,"body":"local solution = {}\nfunction gcdK(a,b)\n  if (b == 0) then return a else return gcdK(b, a % b) end \nend \nfunction solution.fromNb2Str(n, sys)\n  local str=\"\"\n  -- your code\n  local muti=1\n  for i=1,#sys do\n    muti=muti*sys[i]\n  end\n  if muti<=n or muti==0 then return \"Not applicable\" end\n  \n  for i=1,#sys do\n    for j=i+1,#sys do\n      if gcdK(sys[i], sys[j]) ~= 1 then\n        return \"Not applicable\"\n      end\n    end\n  end\n  arr = {}\n  for i=1,#sys do\n    table.insert(arr, n%sys[i])\n  end\n  return \"-\"..table.concat(arr,\"--\")..\"-\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210138,"user_id":null,"body":"local solution = {}\nfunction gcdK(a,b)\n  if (b == 0) then return a else return gcdK(b, a % b) end \nend \nfunction solution.fromNb2Str(n, sys)\n  local str=\"\"\n  -- your code\n  local muti=1\n  for i=1,#sys do\n    muti=muti*sys[i]\n  end\n  if muti<=n or muti==0 then return \"Not applicable\" end\n  \n  for i=1,#sys do\n    for j=i+1,#sys do\n      if gcdK(sys[i], sys[j]) ~= 1 then\n        return \"Not applicable\"\n      end\n    end\n  end\n  arr = {}\n  for _,m in ipairs(sys) do\n    table.insert(arr, n%m)\n  end\n  return \"-\"..table.concat(arr,\"--\")..\"-\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210139,"user_id":492,"body":"local solution = {}\n\nfunction solution.fromNb2Str(n, sys)\n    local function gcd(a,b)\n        while b ~= 0 do \n            a, b = b, a % b\n        end\n        return a\n    end\n    local prod = 1\n    for i = 1, #sys do prod = prod * sys[i] end\n    if (prod <= n) then\n        return \"Not applicable\"\n    end\n    for i = 1, #sys do\n        for j = i + 1, #sys do\n            if (gcd(sys[i], sys[j]) > 1) then\n                return \"Not applicable\"\n            end\n        end\n    end\n    local res = \"\"\n    for i = 1, #sys do\n        res = res .. string.format(\"-%d-\", n % sys[i])\n    end\n    return res;\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54dc6f5a224c26032800005c":[{"id":210140,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  -- your code\n  local res = {}\n\n  local empty = true\n  \n  for k, category in next, firstLetters do\n    table.insert(res, {category, 0})\n    \n    for _, stock in next, artList do\n      empty = false\n      if stock:sub(1,1) == category then\n        local amount = tonumber(stock:match(\"%d+\"))  \n        res[k][2] = res[k][2] + amount\n      end\n    end\n  end\n  \n  if empty then\n    return \"\"\n  end\n  \n  local result = {}\n  \n  for _, v in next, res do\n    table.insert(result, (\"(%s : %d)\"):format(v[1], v[2]))\n  end\n  \n  return table.concat(result, \" - \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210141,"user_id":492,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n    local function split(str, pattern)\n        if not pattern then pattern = \"%S+\" end\n        local t = {}\n        for s in str:gmatch(pattern) do\n            table.insert(t, s)\n        end\n        return t\n    end\n    if #artList == 0 then return \"\" end\n    local result = \"\"\n    for _, v in pairs(firstLetters) do\n    local total = 0\n    for _, j in pairs(artList) do\n      if v:sub(1, 1) == j:sub(1, 1) then\n        total = total + tonumber(split(j)[2])\n      end\n    end\n    if result:len() > 0 then\n      result = result .. \" - \"\n    end\n    result = result .. \"(\" .. v .. \" : \" .. total .. \")\"\n    end\n    return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210142,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(books, cats)\n  if #books == 0 or #cats == 0 then return \"\" end\n  local counts = {}\n  for i, c in ipairs(cats) do\n    counts[c] = 0\n  end\n  for i, book in ipairs(books) do\n    local c = book:sub(1,1)\n    if counts[c] then\n      counts[c] = counts[c] + tonumber(book:match(\"%d+$\"))\n    end\n  end\n  local s = {}\n  for i, c in pairs(cats) do\n    s[#s+1] = (\"(%s : %d)\"):format(c, counts[c])\n  end\n  return table.concat(s, \" - \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210143,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  if(#artList==0 or #firstLetters==0)\n  then    \n    return \"\"\n  end\n  result =\"\"\n  for key,letter in ipairs(firstLetters) \n    do\n       count=0\n       for key2,art in ipairs(artList) \n          do\n            if(string.sub(art,1,1)==letter)\n            then\n                num=string.match(art, \"%d+\")\n                count = count + num\n            end  \n        end\n        result = result .. string.format(\" - (%s : %d)\",letter,count) \n    end\n  return string.sub(result,4,#result) \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210144,"user_id":null,"body":"local solution = {}\n\nlocal output,first,amount,args --only need to localize once\nfunction solution.stock_list(artList, firstLetters)\n  if #artList <= 0 or #firstLetters <= 0 then return \"\" end\n  \n  output = \"\"\n  first = \"\"\n  for _,category in ipairs(firstLetters) do\n    \n    amount = 0\n    for _,BCode in ipairs(artList) do\n      if string.sub(BCode, 1, 1) == category then\n        --finds the \"space\" between the 'code' and the 'amount' and returns the start-pos of it\n        amount = amount + tonumber(string.sub(BCode, string.find(BCode, \" \"), #BCode))\n      end\n    end\n    output = output .. first .. \"(\" .. category .. \" : \" .. amount ..\")\"\n    if first == \"\" then first = \" - \" end --prevents the 'output' string from starting with a ' - '\n  end\n  \n  return output\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210145,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(art_list, first_letters)\n  local sums = {}\n  -- it's completely dumb that I had to return an empty case here, since this is\n  -- completely inconsistent with the 0s returned when\n  if #art_list==0 then return '' end\n\n  for _, book in ipairs(art_list) do\n    local cat, amount = book:match '(.).* (%d+)'\n    sums[cat] = (sums[cat] or 0) + tonumber(amount)\n  end\n  local res = {}\n  for i, first_letter in ipairs(first_letters) do\n    --if (sums[first_letter] or 0) > 0 then\n      res[#res+1] = ('(%s : %d)'):format(first_letter, sums[first_letter] or 0)\n    --end\n  end\n  return table.concat(res, ' - ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210146,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  if #artList == 0 or #firstLetters == 0 then\n    return \"\"\n  end\n  local t = {}\n  for _,letter in ipairs(firstLetters) do\n    local sum = 0\n    for _,s in ipairs(artList) do\n      if string.match(s,'^' .. letter) then\n        local num = tonumber(string.match(s,'%d+$'))\n        sum = sum + num\n      end\n    end\n    t[#t+1] = \"(\" .. letter .. \" : \" .. sum .. \")\"\n  end\n  return table.concat(t,\" - \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210147,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  local s = \"\"\n  for _, l in ipairs(firstLetters) do\n    local n = 0\n    for _,x in ipairs(artList) do\n      if x:sub(1,1)==l then n = n + tonumber(x:match(\"%d+\")) end\n    end\n    s = s..(#artList==0 and \"\" or \"(\"..l..\" : \"..n..\") - \")\n  end\n  return s:sub(1,-4)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210148,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  local s = \"\"\n  for _, l in ipairs(firstLetters) do\n    local n = nil\n    for _,x in ipairs(artList) do\n      if n == nil then n =0 end\n      if x:sub(1,1)==l then n = n + tonumber(x:match(\"%d+\")) end\n    end\n    s = s..(n==nil and \"\" or \"(\"..l..\" : \"..n..\") - \")\n  end\n  return s:sub(1,-4)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210149,"user_id":null,"body":"local solution = {}\n\nfunction solution.stock_list(artList, firstLetters)\n  \n  if #artList == 0 or #firstLetters == 0 then\n    return \"\";\n  end\n  \n  local dict = {}\n  for _, v in pairs(firstLetters) do\n    dict[v] = 0;\n  end\n  \n  for _, str in ipairs(artList) do\n    for k, v in string.gmatch(str, \"(%w+)%s(%w+)\") do\n      local key = string.sub(k, 1, 1)\n      if dict[key] then\n        dict[key] = dict[key] + v\n      end\n    end\n  end\n\n  local result = \"\"\n  for _, v in pairs(firstLetters) do\n      result = (result == \"\" and result or result .. \" - \") .. \"(\" .. v .. \" : \" .. math.floor(dict[v]) .. \")\"\n  end\n  \n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54de3257f565801d96001200":[{"id":210150,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  local bad, buy, sell = {}, 0, 0\n  for order in lst:gmatch(\"%s?([^,]+),?\") do\n    local a, b, c, d = order:match(\"(%S+)%s(%d+)%s(%d+%.%d+)%s([BS])\")\n    if a and b and c and d then\n      local n = tonumber(b)*tonumber(c)\n      if d==\"B\" then buy=buy+n else sell=sell+n end\n    else\n      table.insert(bad, order)\n    end\n  end\n  return string.format(\"Buy: %.0f Sell: %.0f\", buy, sell)..(#bad==0 and \"\"\n    or \"; Badly formed \"..#bad..\": \"..table.concat(bad,\" ;\")..\" ;\" )\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210151,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  local bad, buy, sell = {}, 0, 0\n  for order in lst:gmatch(\"%s?([^,]+),?\") do\n    local a, b, c, d = order:match(\"(%S+)%s(%S+)%s(%S+)%s([^,]+)\")\n    if a and b and c and d \n        and b:match(\"%d+\")==b\n        and c:match(\"%d+%.%d+\")==c\n        and d:match(\"[BS]\")==d then\n      local n = tonumber(b)*tonumber(c)\n      if d==\"B\" then buy=buy+n else sell=sell+n end\n    else\n      table.insert(bad, order)\n    end\n  end\n  return string.format(\"Buy: %.0f Sell: %.0f\", buy, sell)..\n    (#bad==0 and \"\" or \n     \"; Badly formed \"..#bad..\": \"..table.concat(bad,\" ;\")..\" ;\" )\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210152,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  local bads = {}\n  local buy, sell = 0, 0\n  if lst == '' then return 'Buy: 0 Sell: 0' end\n  for entry in (lst..','):gmatch '([^,]*),%s*' do\n    local quote, quantity, price, status = entry:match '(%S+)%s+(%d+)%s+(%d+%.%d+)%s+([BS])'\n    if quote then\n      local n = tonumber(quantity) * tonumber(price)\n      if status=='B' then buy=buy+n else sell=sell+n end\n    else\n      bads[#bads+1] = entry\n    end\n  end\n  if #bads == 0 then return ('Buy: %.0f Sell: %.0f'):format(buy, sell) end\n  return ('Buy: %.0f Sell: %.0f; Badly formed %d: %s ;'):format(buy, sell, #bads, table.concat(bads, ' ;'))\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210153,"user_id":168,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  local buy, sell, bad = 0, 0, {}\n  for order in lst:gmatch('[^,]+') do\n    local q, p, s = order:match('%a+ (%d+) (%d+[.]%d+) ([BS])')\n    if q then\n      if s == 'B' then\n        buy = buy + q * p\n      else\n        sell = sell + q * p\n      end\n    else\n      order = order:gsub('^%s+', '')\n      table.insert(bad, order .. ' ;')\n    end\n  end\n  local res = string.format('Buy: %.0f Sell: %.0f', buy, sell)\n  if #bad > 0 then\n    res = string.format('%s; Badly formed %d: %s', res, #bad, table.concat(bad, ''))\n  end\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210154,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n    local buy, sell, badly = 0, 0, {} \n    local lst = lst .. \",\"\n    for m in lst:gmatch(\"([^,]*)\") do\n        local order = m:match(\"%s?(.+)\")\n        if order then\n            local quantity, price, status = order:match(\"^%a.-%s(%d+)%s(%d+%.%d+)%s([BS])\")\n            if quantity and price and status then\n                local amount = quantity * price\n                if status == \"B\" then \n                    buy = buy + amount \n                else\n                    sell = sell + amount\n                end\n            else \n                table.insert(badly, order)\n            end\n        end\n    end\n    local result = string.format(\"Buy: %.0f Sell: %.0f\", buy, sell)\n    if #badly > 0 then\n        result = string.format(\"Buy: %.0f Sell: %.0f; Badly formed %d: %s ;\", buy, sell, #badly, table.concat(badly, \" ;\"))  \n    end\n    return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210155,"user_id":null,"body":"local solution = {}\n\n--- split function\n-- @return table fill with data from splited string\nfunction split(str, div)\n        result = {}\n        for sub in (str..div):gmatch(\"(.-)\"..div) do\n                table.insert(result, sub)\n        end\n        return result\nend\n\nfunction solution.balanceStatement(lst)\n        local result = \"\"\n        local bad_format = {}\n        local buy, sell = 0, 0\n        for _, order in pairs(split(lst, \", \")) do\n                if order ~= \"\" then\n                local block = split(order, \" \")\n                local bad = false\n                if block[2]:find('.', 1, true) then\n                        bad = true\n                elseif not block[3]:find('.', 1, true) then\n                        bad = true\n                elseif block[4] ~= \"B\" and block[4] ~= \"S\" then\n                        bad = true\n                end\n                if not bad then\n                        local count = tonumber(block[2])*tonumber(block[3])\n                        if block[4] == \"B\" then\n                                buy=buy+count\n                        else\n                                sell=sell+count\n                        end\n                else\n                        bad_format[#bad_format+1]=order\n                end\n                end\n        end\n        local str_buy = tostring(string.format(\"%.f\", buy))\n        local str_sell = tostring(string.format(\"%.f\", sell))\n\n        result = \"Buy: \"..str_buy..\" Sell: \"..str_sell\n        if #bad_format > 0 then\n                result=result..\"; Badly formed \"..tostring(#bad_format)..\": \"..table.concat(bad_format, \" ;\")..\" ;\"\n        end\n\n        return result\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210156,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  -- prepare data\n  local t = {}\n  for i in lst:gmatch('[^,]+') do\n    t[#t+1] = i:match('^%s*(.*)')\n  end\n  -- produce result\n  local tBad = {}\n  local buy, sell = 0, 0\n  for _, v in ipairs(t) do\n    if not v:match('^%g+%s%d+%s%d+%.%d+%s[BS]$') then\n      tBad[#tBad+1] = v\n    else\n      local quantity, price, status = v:match('(%d+)%s(%d+%.%d+)%s([BS])')\n      if status == 'B' then\n        buy = buy + price * quantity\n      else\n        sell = sell + price * quantity\n      end\n    end\n  end\n  -- format & outputout\n  local res = string.format('Buy: %.0f Sell: %.0f', buy, sell)\n  if #tBad > 0 then\n    res = res .. '; Badly formed ' .. #tBad .. ': ' .. table.concat(tBad, ' ;') .. ' ;'\n  end\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210157,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  -- prepare data\n  local t = {}\n  for i in lst:gmatch('[^,]+') do\n    t[#t+1] = i:match('^%s*(.*)')\n  end\n  -- produce result\n  local tBad = {}\n  local buy, sell = 0, 0\n  for _, v in ipairs(t) do\n    if not v:match('^%g+%s%d+%s%d+%.%d+%s[BS]$') then\n      tBad[#tBad+1] = v\n    else\n      local price = tonumber(v:match('%d+%s(%d+%.%d+)'))\n      local quantity = tonumber(v:match('(%d+)%s%d+%.%d+'))\n      if v:match('B$') then\n        buy = buy + price * quantity\n      else\n        sell = sell + price * quantity\n      end\n    end\n  end\n  -- format & outputout\n  local res = string.format('Buy: %.0f Sell: %.0f', buy, sell)\n  if #tBad > 0 then\n    res = res .. '; Badly formed ' .. #tBad .. ': ' .. table.concat(tBad, ' ;') .. ' ;'\n  end\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210158,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n    local buy, sell = 0, 0\n    lst = lst:gsub('[^%s]+%s+(%d+)%s+(%d+%.%d+)%s+([BS]),?'--[['.-%s+(%d-)%s+(%d-%.%d-)%s+(.),?']], function(n, p, t)\n      if t:lower() == 'b' then\n        buy = buy + n * p\n      else\n        sell = sell + n * p\n      end\n      return ''\n    end)\n    local bad = ''\n    lst = lst:gsub('%s*(.+)%s*', function(b)\n      print(b)\n      bad = bad .. b\n      return ''\n    end)\n    if #bad:gsub('[%s,]', '') > 0 then\n      bad = ('; Badly formed %d: %s'):format(select(2, bad:gsub(',%s*[^%s]', '')) + 1, bad:gsub('%s*,%s*', ' ;'))\n      if bad:sub(#bad) ~= ';' then bad = bad .. ' ;' end\n    end\n    return ('Buy: %.0f Sell: %.0f%s'):format(buy, sell, #bad > 1 and bad or '')\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210159,"user_id":null,"body":"local solution = {}\n\nfunction solution.balanceStatement(lst)\n  returnval = \"\"\n\n  Bought = 0\n  Selled = 0\n  errNum = 0\n  errs   = {}\n\n    for w in lst:gmatch(\"([a-zA-Z 0-9.]+)[, ]*\") do\n      ticket, amount, price, operation = w:match(\"([%S]+) ([%d]+) ([%d]+[%.]+[%d]+) ([BS])\")\n      if ticket then\n\n        if w:sub(#w) == \"B\" then\n          Bought = Bought + amount * price\n        else\n          Selled = Selled + amount * price\n        end\n      else  -- error string\n        errNum = errNum + 1\n        errs[errNum] = w\n      end\n     end\n    returnval = \"Buy: \"..string.format(\"%.0f\", Bought)..\n                \" Sell: \".. string.format(\"%.0f\", Selled)..\"\" \n  \n    if errNum>0 then -- add info about errors\n      returnval = returnval .. \"; Badly formed \" .. errNum .. \": \"\n      for i=1, errNum do\n        returnval = returnval .. errs[i] .. \" ;\"\n      end\n    end\n\n    return returnval\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"54f8693ea58bce689100065f":[{"id":210160,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a, b)\n  if b == 0 then return a end\n  return gcd(b, a%b)\nend\n\nfunction solution.decompose(nr, dr)\n  local res = {}\n  print(nr, dr)\n  if nr >= dr then\n    res[1] = nr\/\/dr\n    nr = nr % dr\n  end\n  -- we know that: 0 <= nr\/dr < 1\n  while nr > 0 do\n    local fdr = math.ceil(dr\/nr)\n    --nr\/dr = nr\/dr - 1\/fdr\n    local c = gcd(fdr, dr)\n    print(('c=%d, %d\/%d - 1\/%d'):format(c, nr, dr, fdr))\n    nr = fdr\/\/c * nr - dr\/\/c\n    dr = fdr\/\/c * dr\n    res[#res+1] = ('1\/%d'):format(fdr)\n  end\n  return table.concat(res, ', ')\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210161,"user_id":null,"body":"local solution = {}\nfunction solution.decompose(nr, dr)\n  local Answer = {}\n  if nr >= dr then\n    local whole_part = nr \/\/ dr\n    table.insert(Answer, whole_part)\n    nr = nr - (dr * whole_part)\n  end\n  while nr ~= 0 do\n    local Dec = (dr \/ nr)\n    local x = math.ceil(Dec)\n    table.insert(Answer, \"1\/\" .. tostring(x))\n    nr, dr = x * nr - dr, x * dr\n  end\n  return table.concat(Answer, \", \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210162,"user_id":null,"body":"local solution = {}\nfunction solution.decompose(nr, dr)\n  local res = {}\n  local n = math.floor(nr\/dr)\n  if n > 0 then\n    table.insert(res, n)\n    nr = nr - n*dr\n  end\n  while nr > 0 do\n    n = math.ceil(dr \/ nr)\n    table.insert(res, \"1\/\"..n)\n    nr = n*nr - dr\n    dr = n*dr\n  end\n  return table.concat(res, \", \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210163,"user_id":null,"body":"local solution = {}\n\nfunction solution.decompose(nr, dr)\n    local result = \"\"\n    if nr == 0 then\n        return result\n    end\n    if nr >= dr then\n        result = math.floor(nr \/ dr)  .. \", \"\n    end\n\n    nr = nr % dr\n\n    while nr ~= 0 do\n        local x = math.ceil(dr \/ nr)\n        result = result .. \"1\/\" .. x .. \", \"\n        nr = x * nr - dr\n        dr = dr * x\n    end\n\n    result = result:sub(1, -3)\n    return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210164,"user_id":null,"body":"local solution = {}\n\nfunction solution.decompose(nr, dr)\n  \n    if nr == 0 then\n      return \"\"\n    end\n  \n    if nr % dr == 0 then\n      return tostring(math.floor(nr\/dr))\n    end\n    \n    local ans = {}\n    if nr > dr then\n      local nint = math.floor(nr\/dr)\n      table.insert(ans, nint)\n      nr = nr - nint*dr\n    end\n    \n    local done = false\n    while done ~= true do\n      local nextDr = math.ceil(dr\/nr)\n      if nextDr == math.floor(dr\/nr) then\n        done = true\n      end\n      nr = nr*nextDr-dr\n      dr = dr*nextDr\n    \n      table.insert(ans, \"1\/\"..nextDr)\n    end\n\n    return table.concat(ans, \", \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210165,"user_id":168,"body":"local solution = {}\n\nfunction gcd(a, b)\n  while b ~= 0 do\n    a, b = b, a % b\n  end\n  return a\nend\n\nfunction solution.decompose(nr, dr)\n  local res = {}\n  \n  while nr > 0 do\n    local d = gcd(nr, dr)\n    nr, dr = nr \/\/ d, dr \/\/ d\n    if nr >= dr then\n      local q = nr \/\/ dr\n      nr = nr - q * dr\n      table.insert(res, q)\n    else\n      local q = (dr + nr - 1) \/\/ nr\n      nr = nr * q - dr\n      dr = dr * q\n      table.insert(res, '1\/' .. q)\n    end\n  end\n  \n  return table.concat(res, ', ')\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210166,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(x, y)\n\n    if y == 0 then\n\n        return x \n\n    else\n\n        return gcd(y, x % y)\n\n    end\n    \nend\n\nlocal function lcd(x, y)\n\n    return x * y \/ gcd(x, y)\n    \nend\n\nfunction solution.decompose(nr, dr)\n\n    local Gcd = gcd(nr, dr)\n\n    nr = nr \/\/ Gcd;\n\n    dr = dr \/\/ Gcd;\n\n    if nr == 0 then\n        return \"\"\n    end\n\n    if nr % dr == 0 then\n\n        return math.modf(nr) .. \"\"\n\n    end\n\n    if nr == 1 then\n\n        return math.modf(nr) .. \"\/\" .. math.modf(dr) \n\n    end \n\n    if nr > dr then\n        \n        return math.modf(nr \/\/ dr)  .. \", \" .. solution.decompose(nr % dr, dr)\n\n    end\n\n    for i = math.modf(dr \/\/ nr), dr, 1 do\n        \n        local Lcd = lcd(i, dr)\n\n        if Lcd \/\/ i < nr * (Lcd \/\/ dr) then\n\n            return \"1\/\" .. i  .. \", \" .. solution.decompose(nr * (Lcd \/\/ dr) - Lcd \/\/ i, Lcd) \n\n        end\n\n    end\n\nend\n\nprint( solution.decompose(3000,4187))\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210167,"user_id":null,"body":"local solution = {}\n\nlocal gcd\ngcd = function(a, b)\n  return b==0 and a or gcd(b,a%b)\nend\n\nlocal decompose\ndecompose = function(nr, dr)\n  if nr == 0 then\n    return \"\"\n  end\n  local output\n  if nr >= dr then\n    output = \"\" .. math.floor(nr \/ dr)\n    nr = nr % dr\n  else\n     local i = math.ceil(dr \/ nr)\n    output = \"1\/\" ..i\n    nr = i * nr - dr\n    dr = i * dr\n    nr, dr = nr \/ gcd(dr, nr), dr \/ gcd(dr, nr)\n  end\n\n  local tail = decompose(nr, dr)\n  if #(tail) > 0 then\n    output = output .. \", \" .. tail\n  end\n\n  return output\nend\n\nsolution.decompose = decompose\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210168,"user_id":null,"body":"local solution = {}\n\nfunction division(lv, rv)\n        if (lv\/rv)%1 == 0 then\n                return tostring(math.ceil(lv\/rv))\n        else\n                return tostring(lv)..'\/'..tostring(rv)\n        end\nend\n\nfunction solution.decompose(nr, dr)\n        local result = {}\n        if nr == 0 or dr == 0 or nr == nil or dr == nil then\n                return \"\"\n        end\n        while nr ~= 0 and dr ~= 0 do\n                if nr >= dr then\n                        local val = math.floor(nr\/dr)\n                        nr = nr-val*dr\n                        table.insert(result, tostring(val))\n                else\n                        local tmp\n                        if dr%nr == 0 then tmp = math.ceil(dr\/nr)\n                        else tmp = math.floor(dr\/nr) + 1 end\n                        table.insert(result, division(1, tmp))\n                        nr = nr*tmp-dr\n                        dr = dr*tmp\n                end\n        end\n        return table.concat(result, \", \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"},{"id":210169,"user_id":null,"body":"local solution = {}\n\n-- euclid algorithm to get the gcd\nfunction gcd(a, b)\n  while (b > 0) do\n    a, b = b, a % b\n  end\n  return a\nend\n\nfunction solution.decompose(numerator, denominator)\n    --handle 0\n    if numerator == 0 then return \"\" end\n  \n    local fractions = {}\n  \n    --remove the integer portion\n    if (numerator >= denominator) then\n      local integer = numerator \/\/ denominator\n      table.insert(fractions, integer)\n      numerator = numerator - (integer * denominator)\n    end\n    \n    while (numerator > 0) do\n      -- get the next highest integer inverse\n      local inverse = math.ceil(denominator \/ numerator)\n      -- add the inverse as the next fraction\n      table.insert(fractions, \"1\/\" .. inverse)\n      -- get the largest factor\n      local common_factor = gcd(denominator, inverse)\n      -- get the multiplier to increase the current ratio\n      local ratio_multplier = inverse \/ common_factor\n      -- decrease the ratio by the fraction, increasing the denominator as necessary\n      numerator = ( numerator * ratio_multplier ) - ( denominator \/ common_factor )\n      denominator = denominator * ratio_multplier\n    end\n    \n    return table.concat(fractions, \", \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 21:56:26"}],"55031bba8cba40ada90011c4":[{"id":210170,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  local arr, sum, ret = {}, 0, \"Unlucky\"\n  for m in string.gmatch(str, '%d%d?%d?') do\n    m = string.gsub(m:gsub(\"^0+\", \"0\"), \"^0([1-9]+)\", \"%1\")\n    if isCubic(m) then arr[#arr+1] = tonumber(m) end\n  end\n  for i,a in ipairs(arr) do \n    sum = sum + a\n  end\n  if #arr ~= 0 then \n    ret = table.concat(arr,\" \")..\" \"..sum..\" Lucky\"\n  end\n  return ret\nend\n\nfunction isCubic(n)\n  local sum = 0\n  for x in string.gmatch(n, '%d') do\n    sum = sum + tonumber(x)^3\n  end\n  return tonumber(n) == sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210171,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  local res = {}\n  local sum = 0\n  for numstr in str:gmatch '%d%d?%d?' do\n    local s, num = 0, tonumber(numstr)\n    for d in numstr:gmatch '.' do s = s + d^3 end\n    if s == num then\n      res[#res+1] = num\n      sum = sum + num\n    end\n  end\n  if #res == 0 then return 'Unlucky' end\n  res[#res+1] = sum\n  res[#res+1] = 'Lucky'\n  return table.concat(res, ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210172,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  lucky, luckySum, retStr = {}, 0, \"Unlucky\"\n\n  for v in str:gmatch(\"%d%d?%d?\") do  -- take every sequence of digits\n    sum = 0\n\n    for w in v:gmatch(\"%d\") do\n      sum = sum + w^3\n    end\n    if sum == math.tointeger(v) then -- check is it cubic \n      lucky[#lucky+1] = math.tointeger(v)\n      luckySum = math.tointeger(luckySum + v)\n    end\n  end\n  \n  if #lucky > 0 then\n    retStr = table.concat(lucky, \" \") .. \" \" .. luckySum .. \" Lucky\"\n  end  \n  return retStr\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210173,"user_id":492,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n    function isCubic(s)\n        local total = 0; local j = 0;\n        for digit in string.gmatch(s, \"%d\") do\n            total = total + digit ^ 3\n        end\n        return total == s\n    end\n    local s = str .. \" \"\n    local i, cnt, res, arr = 1, 0, \"\", {}\n    while i <= #s do\n        local c = string.sub(s, i, i)\n        local ch = string.match(c, \"%d\")\n        if c == ch then \n            res = res .. ch\n            cnt = cnt + 1\n            if cnt == 3 then table.insert(arr, tonumber(res)); cnt = 0; res = \"\"; end\n        else\n            if cnt > 0 then table.insert(arr, tonumber(res)); cnt = 0; res = \"\"; end\n        end\n        i = i + 1\n    end\n    local r, sm = {}, 0\n    for _, v in ipairs(arr) do\n        if isCubic(v) then \n            table.insert(r, v) \n            sm = sm + v\n        end\n    end\n    if #r == 0 then\n        return \"Unlucky\"\n    end\n    return table.concat(r, \" \") .. \" \" .. sm .. \" Lucky\"\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210174,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  local cubics = {}\n  \n  --\/\/ patterns my beloved\n  for group in str:gmatch(\"%d%d?%d?\") do\n    local packet = tonumber(group)\n    local sum = 0\n    \n    for digit in group:gmatch(\".\") do\n      sum = sum + (tonumber(digit)^3)\n    end\n        \n    if sum == packet then\n      table.insert(cubics, packet)\n    end\n  end\n  \n  if #cubics == 0 then\n    return \"Unlucky\"\n  end\n  \n  local sum = 0\n  local out = \"\"\n  \n  for _, cubic in ipairs(cubics) do\n    out = out .. cubic .. \" \"\n    sum = sum + cubic\n  end\n  \n  out = out .. sum .. \" Lucky\"\n  return out\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210175,"user_id":168,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  local res, sum, lucky = {}, 0, false\n  for x in str:gmatch('%d+') do\n    for i = 1, #x, 3 do\n      local n = x:sub(i, i + 2)\n      local s = 0\n      for j = 1, #n do\n        s = s + n:sub(j, j) ^ 3\n      end\n      if s == tonumber(n) then\n        table.insert(res, string.format('%d', s))\n        sum = sum + s\n        lucky = true\n      end\n    end\n  end\n  table.insert(res, string.format('%d', sum))\n  return lucky and table.concat(res, ' ') .. ' Lucky' or 'Unlucky'\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210176,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n    local numbers = {}\n    for num in str:gmatch(\"%d%d?%d?\") do\n        if #num < 4 then\n            local sum = 0\n            for n in num:gmatch(\"%d\") do\n                sum = sum + math.pow(n, 3)\n            end\n            if sum == tonumber(num) then\n                table.insert(numbers, math.floor(num))\n            end\n        end\n    end  \n    if #numbers > 0 then\n        local sum = 0\n        for _, num in pairs(numbers) do\n          sum = sum + num\n        end\n        table.insert(numbers, math.floor(sum))\n        table.insert(numbers, \"Lucky\")\n        return table.concat(numbers, \" \")\n    else\n        return \"Unlucky\"\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210177,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  ret = \"\"\n  sum = 0\n  \n  for w in str:gmatch(\"%d%d?%d?\") do\n    num = 0\n    \n    for i=1, #w do\n      num = num + tonumber(w:sub(i,i))^3\n    end\n    \n    if num == tonumber(w) then\n      ret = ret .. string.format(\"%i\",num) .. \" \"\n      sum = sum + num\n    end\n  end\n  \n  if #ret > 0 then\n    return ret .. string.format(\"%i\",sum) .. \" Lucky\"\n  else\n    return \"Unlucky\"\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210178,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  local numbers = str:gmatch('%d%d?%d?')\n  local cubic = ''\n  local sum = 0\n  for n in numbers do\n    local total = 0\n    n:gsub('.', function(n) total = total + n ^ 3 end)\n    if total == tonumber(n) then\n      cubic = cubic .. tonumber(n) .. ' '\n      sum = sum + n\n    end\n  end\n  if #cubic > 0 then return cubic .. math.tointeger(sum) .. ' Lucky' end\n  return \"Unlucky\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210179,"user_id":null,"body":"local solution = {}\n\nfunction solution.isSumOfCubes(str)\n  lucky = {}\n  luckySum = 0\n  for w in str:gmatch(\"%d+\") do  -- take every sequence of digits\n\n    for i=1, math.ceil(#w\/3) do  -- calculate how much blocks by 3 digits\n      v = w:sub(1,3)\n      w = w:sub(4) -- cut first 3 symbols\n\n      first, second, third = 0, 0, 0\n      first = math.tointeger(v:sub(1,1))\n\n      if #v > 1 then\n        second = math.tointeger(v:sub(2,2))\n      end\n      if #v > 2 then\n        third = math.tointeger(v:sub(3,3))\n      end\n\n      if (first ^3 + second^3 + third^3) == math.tointeger(v) then -- check is it cubic \n\n        lucky[#lucky+1] = math.tointeger(v)\n\n        luckySum = math.tointeger(luckySum + v)\n      end\n    end\n  end\n  \n  if #lucky > 0 then\n    return table.concat(lucky, \" \") .. \" \" .. luckySum .. \" Lucky\"\n  end  \n  return \"Unlucky\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"550527b108b86f700000073f":[{"id":210180,"user_id":53,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local pi4, sign, denom, iterations = 1.0, -1.0, 3.0, 1\n  while math.abs(4.0 * pi4 - math.pi) >= epsilon do\n    pi4 = pi4 + sign * (1.0 \/ denom)\n    sign = sign * (-1.0)\n    denom = denom + 2.0\n    iterations = iterations + 1\n  end\n  return {iterations, 4.0 * pi4}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210181,"user_id":null,"body":"local solution = {}\nlocal PI = math.pi\nfunction solution.iter_pi(epsilon)\n    local guess = 1 \n    local n = 1\n    while math.abs(PI - 4 * guess) >= epsilon do \n       guess = guess + ((-1)^n)\/ (2*n+1)\n       n = n + 1\n    end\n    return {n, 4*guess}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210182,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local a, b, n, i = 1, 1, 0, 0\n  while math.abs(math.pi-n*4)>epsilon do\n    n, a, b, i = n+1\/a*b, a+2, -1*b, i+1\n  end\n  return {i, n*4*10^11\/\/1*10^-11}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210183,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local iter = 0\n  local approx = 0\n  while math.abs(4*approx - math.pi) > epsilon do\n    iter = iter + 1\n    approx = approx + 1\/(2*iter - 1) * (iter%2*2-1)\n  end\n  return {iter, 4 * approx}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210184,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  --\/\/ locals so i dont get timeouted\n  --\/\/ this was unecessary, it was just looping forever\n  --\/\/ oops!\n  local mathpi = math.pi\n  local mathabs = math.abs\n  local eps = epsilon\n  \n  local pi = 1\n  local sign = 1\n  local iter = 1\n  \n  while mathabs(mathpi - pi*4) > eps do\n    iter = iter + 1\n    sign = sign * -1\n    pi = pi + (1\/(iter * 2 - 1)) * sign\n  end\n  \n  return {iter, pi*4}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210185,"user_id":168,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local i, k, r = 0, 1, 0\n  while math.abs(math.pi - r) >= epsilon do\n    r = r + 4 \/ k * (-1) ^ i\n    k = k + 2\n    i = i + 1\n  end\n  return {i, r}  \nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210186,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local counter, approx = 0, 0\n  while math.abs(approx * 4 - math.pi) > epsilon do\n    counter = counter + 1\n    local sign = counter % 2 == 0 and -1 or 1\n    approx = approx + sign * 1 \/ (counter * 2 - 1)\n  end\n  return { counter, approx * 4 }\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210187,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n    local result, iter = 1, 1\n    while math.abs(4*result - math.pi) > epsilon do\n        result = result + (-1)^iter \/ (3 + 2*(iter-1))\n        iter = iter + 1\n    end\n    return {iter, 4*result}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210188,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n  local pi, i = 1, 0\n  \n  repeat\n    i = i + 1\n    pi = pi + 1 \/ (i * 2 + 1) * (i % 2 == 0 and 1 or -1)\n  until math.abs(pi * 4 - math.pi) <= epsilon\n\n  return {i + 1, pi * 4}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210189,"user_id":null,"body":"local solution = {}\n\nfunction solution.iter_pi(epsilon)\n    local pi, it = 1, 0\n    while math.abs(pi * 4 - math.pi) > epsilon do\n      pi = it % 2 == 1 and pi + 1\/(3 + it * 2) or pi - 1\/(3 + it * 2)\n      it = it + 1\n    end\n    return {it + 1, pi * 4}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"550554fd08b86f84fe000a58":[{"id":210190,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n  local res, visited = {}, {}\n  local s = table.concat(array2, '\\0')\n  for _, w in ipairs(array1) do\n    if not visited[w] and s:find(w, 1, true) then\n      res[#res+1] = w\n      visited[w] = true\n    end\n  end\n  table.sort(res)\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210191,"user_id":null,"body":"local localvar_0 = load[[\n---\n--- Lua Fun - a high-performance functional programming library for LuaJIT\n---\n--- Copyright (c) 2013-2017 Roman Tsisyk <roman@tsisyk.com>\n---\n--- Distributed under the MIT\/X11 License. See COPYING.md for more details.\n---\n\nlocal exports = {}\nlocal methods = {}\n\n-- compatibility with Lua 5.1\/5.2\nlocal unpack = rawget(table, \"unpack\") or unpack\n\n--------------------------------------------------------------------------------\n-- Tools\n--------------------------------------------------------------------------------\n\nlocal return_if_not_empty = function(state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    return ...\nend\n\nlocal call_if_not_empty = function(fun, state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    return state_x, fun(...)\nend\n\nlocal function deepcopy(orig) -- used by cycle()\n    local orig_type = type(orig)\n    local copy\n    if orig_type == 'table' then\n        copy = {}\n        for orig_key, orig_value in next, orig, nil do\n            copy[deepcopy(orig_key)] = deepcopy(orig_value)\n        end\n    else\n        copy = orig\n    end\n    return copy\nend\n\nlocal iterator_mt = {\n    -- usually called by for-in loop\n    __call = function(self, param, state)\n        return self.gen(param, state)\n    end;\n    __tostring = function(self)\n        return '<generator>'\n    end;\n    -- add all exported methods\n    __index = methods;\n}\n\nlocal wrap = function(gen, param, state)\n    return setmetatable({\n        gen = gen,\n        param = param,\n        state = state\n    }, iterator_mt), param, state\nend\nexports.wrap = wrap\n\nlocal unwrap = function(self)\n    return self.gen, self.param, self.state\nend\nmethods.unwrap = unwrap\n\n--------------------------------------------------------------------------------\n-- Basic Functions\n--------------------------------------------------------------------------------\n\nlocal nil_gen = function(_param, _state)\n    return nil\nend\n\nlocal string_gen = function(param, state)\n    local state = state + 1\n    if state > #param then\n        return nil\n    end\n    local r = string.sub(param, state, state)\n    return state, r\nend\n\nlocal ipairs_gen = ipairs({}) -- get the generating function from ipairs\n\nlocal pairs_gen = pairs({ a = 0 }) -- get the generating function from pairs\nlocal map_gen = function(tab, key)\n    local value\n    local key, value = pairs_gen(tab, key)\n    return key, key, value\nend\n\nlocal rawiter = function(obj, param, state)\n    assert(obj ~= nil, \"invalid iterator\")\n    if type(obj) == \"table\" then\n        local mt = getmetatable(obj);\n        if mt ~= nil then\n            if mt == iterator_mt then\n                return obj.gen, obj.param, obj.state\n            elseif mt.__ipairs ~= nil then\n                return mt.__ipairs(obj)\n            elseif mt.__pairs ~= nil then\n                return mt.__pairs(obj)\n            end\n        end\n        if #obj > 0 then\n            -- array\n            return ipairs(obj)\n        else\n            -- hash\n            return map_gen, obj, nil\n        end\n    elseif (type(obj) == \"function\") then\n        return obj, param, state\n    elseif (type(obj) == \"string\") then\n        if #obj == 0 then\n            return nil_gen, nil, nil\n        end\n        return string_gen, obj, 0\n    end\n    error(string.format('object %s of type \"%s\" is not iterable',\n          obj, type(obj)))\nend\n\nlocal iter = function(obj, param, state)\n    return wrap(rawiter(obj, param, state))\nend\nexports.iter = iter\n\nlocal method0 = function(fun)\n    return function(self)\n        return fun(self.gen, self.param, self.state)\n    end\nend\n\nlocal method1 = function(fun)\n    return function(self, arg1)\n        return fun(arg1, self.gen, self.param, self.state)\n    end\nend\n\nlocal method2 = function(fun)\n    return function(self, arg1, arg2)\n        return fun(arg1, arg2, self.gen, self.param, self.state)\n    end\nend\n\nlocal export0 = function(fun)\n    return function(gen, param, state)\n        return fun(rawiter(gen, param, state))\n    end\nend\n\nlocal export1 = function(fun)\n    return function(arg1, gen, param, state)\n        return fun(arg1, rawiter(gen, param, state))\n    end\nend\n\nlocal export2 = function(fun)\n    return function(arg1, arg2, gen, param, state)\n        return fun(arg1, arg2, rawiter(gen, param, state))\n    end\nend\n\nlocal each = function(fun, gen, param, state)\n    repeat\n        state = call_if_not_empty(fun, gen(param, state))\n    until state == nil\nend\nmethods.each = method1(each)\nexports.each = export1(each)\nmethods.for_each = methods.each\nexports.for_each = exports.each\nmethods.foreach = methods.each\nexports.foreach = exports.each\n\n--------------------------------------------------------------------------------\n-- Generators\n--------------------------------------------------------------------------------\n\nlocal range_gen = function(param, state)\n    local stop, step = param[1], param[2]\n    local state = state + step\n    if state > stop then\n        return nil\n    end\n    return state, state\nend\n\nlocal range_rev_gen = function(param, state)\n    local stop, step = param[1], param[2]\n    local state = state + step\n    if state < stop then\n        return nil\n    end\n    return state, state\nend\n\nlocal range = function(start, stop, step)\n    if step == nil then\n        if stop == nil then\n            if start == 0 then\n                return nil_gen, nil, nil\n            end\n            stop = start\n            start = stop > 0 and 1 or -1\n        end\n        step = start <= stop and 1 or -1\n    end\n\n    assert(type(start) == \"number\", \"start must be a number\")\n    assert(type(stop) == \"number\", \"stop must be a number\")\n    assert(type(step) == \"number\", \"step must be a number\")\n    assert(step ~= 0, \"step must not be zero\")\n\n    if (step > 0) then\n        return wrap(range_gen, {stop, step}, start - step)\n    elseif (step < 0) then\n        return wrap(range_rev_gen, {stop, step}, start - step)\n    end\nend\nexports.range = range\n\nlocal duplicate_table_gen = function(param_x, state_x)\n    return state_x + 1, unpack(param_x)\nend\n\nlocal duplicate_fun_gen = function(param_x, state_x)\n    return state_x + 1, param_x(state_x)\nend\n\nlocal duplicate_gen = function(param_x, state_x)\n    return state_x + 1, param_x\nend\n\nlocal duplicate = function(...)\n    if select('#', ...) <= 1 then\n        return wrap(duplicate_gen, select(1, ...), 0)\n    else\n        return wrap(duplicate_table_gen, {...}, 0)\n    end\nend\nexports.duplicate = duplicate\nexports.replicate = duplicate\nexports.xrepeat = duplicate\n\nlocal tabulate = function(fun)\n    assert(type(fun) == \"function\")\n    return wrap(duplicate_fun_gen, fun, 0)\nend\nexports.tabulate = tabulate\n\nlocal zeros = function()\n    return wrap(duplicate_gen, 0, 0)\nend\nexports.zeros = zeros\n\nlocal ones = function()\n    return wrap(duplicate_gen, 1, 0)\nend\nexports.ones = ones\n\nlocal rands_gen = function(param_x, _state_x)\n    return 0, math.random(param_x[1], param_x[2])\nend\n\nlocal rands_nil_gen = function(_param_x, _state_x)\n    return 0, math.random()\nend\n\nlocal rands = function(n, m)\n    if n == nil and m == nil then\n        return wrap(rands_nil_gen, 0, 0)\n    end\n    assert(type(n) == \"number\", \"invalid first arg to rands\")\n    if m == nil then\n        m = n\n        n = 0\n    else\n        assert(type(m) == \"number\", \"invalid second arg to rands\")\n    end\n    assert(n < m, \"empty interval\")\n    return wrap(rands_gen, {n, m - 1}, 0)\nend\nexports.rands = rands\n\n--------------------------------------------------------------------------------\n-- Slicing\n--------------------------------------------------------------------------------\n\nlocal nth = function(n, gen_x, param_x, state_x)\n    assert(n > 0, \"invalid first argument to nth\")\n    -- An optimization for arrays and strings\n    if gen_x == ipairs_gen then\n        return param_x[n]\n    elseif gen_x == string_gen then\n        if n <= #param_x then\n            return string.sub(param_x, n, n)\n        else\n            return nil\n        end\n    end\n    for i=1,n-1,1 do\n        state_x = gen_x(param_x, state_x)\n        if state_x == nil then\n            return nil\n        end\n    end\n    return return_if_not_empty(gen_x(param_x, state_x))\nend\nmethods.nth = method1(nth)\nexports.nth = export1(nth)\n\nlocal head_call = function(state, ...)\n    if state == nil then\n        error(\"head: iterator is empty\")\n    end\n    return ...\nend\n\nlocal head = function(gen, param, state)\n    return head_call(gen(param, state))\nend\nmethods.head = method0(head)\nexports.head = export0(head)\nexports.car = exports.head\nmethods.car = methods.head\n\nlocal tail = function(gen, param, state)\n    state = gen(param, state)\n    if state == nil then\n        return wrap(nil_gen, nil, nil)\n    end\n    return wrap(gen, param, state)\nend\nmethods.tail = method0(tail)\nexports.tail = export0(tail)\nexports.cdr = exports.tail\nmethods.cdr = methods.tail\n\nlocal take_n_gen_x = function(i, state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    return {i, state_x}, ...\nend\n\nlocal take_n_gen = function(param, state)\n    local n, gen_x, param_x = param[1], param[2], param[3]\n    local i, state_x = state[1], state[2]\n    if i >= n then\n        return nil\n    end\n    return take_n_gen_x(i + 1, gen_x(param_x, state_x))\nend\n\nlocal take_n = function(n, gen, param, state)\n    assert(n >= 0, \"invalid first argument to take_n\")\n    return wrap(take_n_gen, {n, gen, param}, {0, state})\nend\nmethods.take_n = method1(take_n)\nexports.take_n = export1(take_n)\n\nlocal take_while_gen_x = function(fun, state_x, ...)\n    if state_x == nil or not fun(...) then\n        return nil\n    end\n    return state_x, ...\nend\n\nlocal take_while_gen = function(param, state_x)\n    local fun, gen_x, param_x = param[1], param[2], param[3]\n    return take_while_gen_x(fun, gen_x(param_x, state_x))\nend\n\nlocal take_while = function(fun, gen, param, state)\n    assert(type(fun) == \"function\", \"invalid first argument to take_while\")\n    return wrap(take_while_gen, {fun, gen, param}, state)\nend\nmethods.take_while = method1(take_while)\nexports.take_while = export1(take_while)\n\nlocal take = function(n_or_fun, gen, param, state)\n    if type(n_or_fun) == \"number\" then\n        return take_n(n_or_fun, gen, param, state)\n    else\n        return take_while(n_or_fun, gen, param, state)\n    end\nend\nmethods.take = method1(take)\nexports.take = export1(take)\n\nlocal drop_n = function(n, gen, param, state)\n    assert(n >= 0, \"invalid first argument to drop_n\")\n    local i\n    for i=1,n,1 do\n        state = gen(param, state)\n        if state == nil then\n            return wrap(nil_gen, nil, nil)\n        end\n    end\n    return wrap(gen, param, state)\nend\nmethods.drop_n = method1(drop_n)\nexports.drop_n = export1(drop_n)\n\nlocal drop_while_x = function(fun, state_x, ...)\n    if state_x == nil or not fun(...) then\n        return state_x, false\n    end\n    return state_x, true, ...\nend\n\nlocal drop_while = function(fun, gen_x, param_x, state_x)\n    assert(type(fun) == \"function\", \"invalid first argument to drop_while\")\n    local cont, state_x_prev\n    repeat\n        state_x_prev = deepcopy(state_x)\n        state_x, cont = drop_while_x(fun, gen_x(param_x, state_x))\n    until not cont\n    if state_x == nil then\n        return wrap(nil_gen, nil, nil)\n    end\n    return wrap(gen_x, param_x, state_x_prev)\nend\nmethods.drop_while = method1(drop_while)\nexports.drop_while = export1(drop_while)\n\nlocal drop = function(n_or_fun, gen_x, param_x, state_x)\n    if type(n_or_fun) == \"number\" then\n        return drop_n(n_or_fun, gen_x, param_x, state_x)\n    else\n        return drop_while(n_or_fun, gen_x, param_x, state_x)\n    end\nend\nmethods.drop = method1(drop)\nexports.drop = export1(drop)\n\nlocal split = function(n_or_fun, gen_x, param_x, state_x)\n    return take(n_or_fun, gen_x, param_x, state_x),\n           drop(n_or_fun, gen_x, param_x, state_x)\nend\nmethods.split = method1(split)\nexports.split = export1(split)\nmethods.split_at = methods.split\nexports.split_at = exports.split\nmethods.span = methods.split\nexports.span = exports.split\n\n--------------------------------------------------------------------------------\n-- Indexing\n--------------------------------------------------------------------------------\n\nlocal index = function(x, gen, param, state)\n    local i = 1\n    for _k, r in gen, param, state do\n        if r == x then\n            return i\n        end\n        i = i + 1\n    end\n    return nil\nend\nmethods.index = method1(index)\nexports.index = export1(index)\nmethods.index_of = methods.index\nexports.index_of = exports.index\nmethods.elem_index = methods.index\nexports.elem_index = exports.index\n\nlocal indexes_gen = function(param, state)\n    local x, gen_x, param_x = param[1], param[2], param[3]\n    local i, state_x = state[1], state[2]\n    local r\n    while true do\n        state_x, r = gen_x(param_x, state_x)\n        if state_x == nil then\n            return nil\n        end\n        i = i + 1\n        if r == x then\n            return {i, state_x}, i\n        end\n    end\nend\n\nlocal indexes = function(x, gen, param, state)\n    return wrap(indexes_gen, {x, gen, param}, {0, state})\nend\nmethods.indexes = method1(indexes)\nexports.indexes = export1(indexes)\nmethods.elem_indexes = methods.indexes\nexports.elem_indexes = exports.indexes\nmethods.indices = methods.indexes\nexports.indices = exports.indexes\nmethods.elem_indices = methods.indexes\nexports.elem_indices = exports.indexes\n\n--------------------------------------------------------------------------------\n-- Filtering\n--------------------------------------------------------------------------------\n\nlocal filter1_gen = function(fun, gen_x, param_x, state_x, a)\n    while true do\n        if state_x == nil or fun(a) then break; end\n        state_x, a = gen_x(param_x, state_x)\n    end\n    return state_x, a\nend\n\n-- call each other\nlocal filterm_gen\nlocal filterm_gen_shrink = function(fun, gen_x, param_x, state_x)\n    return filterm_gen(fun, gen_x, param_x, gen_x(param_x, state_x))\nend\n\nfilterm_gen = function(fun, gen_x, param_x, state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    if fun(...) then\n        return state_x, ...\n    end\n    return filterm_gen_shrink(fun, gen_x, param_x, state_x)\nend\n\nlocal filter_detect = function(fun, gen_x, param_x, state_x, ...)\n    if select('#', ...) < 2 then\n        return filter1_gen(fun, gen_x, param_x, state_x, ...)\n    else\n        return filterm_gen(fun, gen_x, param_x, state_x, ...)\n    end\nend\n\nlocal filter_gen = function(param, state_x)\n    local fun, gen_x, param_x = param[1], param[2], param[3]\n    return filter_detect(fun, gen_x, param_x, gen_x(param_x, state_x))\nend\n\nlocal filter = function(fun, gen, param, state)\n    return wrap(filter_gen, {fun, gen, param}, state)\nend\nmethods.filter = method1(filter)\nexports.filter = export1(filter)\nmethods.remove_if = methods.filter\nexports.remove_if = exports.filter\n\nlocal grep = function(fun_or_regexp, gen, param, state)\n    local fun = fun_or_regexp\n    if type(fun_or_regexp) == \"string\" then\n        fun = function(x) return string.find(x, fun_or_regexp) ~= nil end\n    end\n    return filter(fun, gen, param, state)\nend\nmethods.grep = method1(grep)\nexports.grep = export1(grep)\n\nlocal partition = function(fun, gen, param, state)\n    local neg_fun = function(...)\n        return not fun(...)\n    end\n    return filter(fun, gen, param, state),\n           filter(neg_fun, gen, param, state)\nend\nmethods.partition = method1(partition)\nexports.partition = export1(partition)\n\n--------------------------------------------------------------------------------\n-- Reducing\n--------------------------------------------------------------------------------\n\nlocal foldl_call = function(fun, start, state, ...)\n    if state == nil then\n        return nil, start\n    end\n    return state, fun(start, ...)\nend\n\nlocal foldl = function(fun, start, gen_x, param_x, state_x)\n    while true do\n        state_x, start = foldl_call(fun, start, gen_x(param_x, state_x))\n        if state_x == nil then\n            break;\n        end\n    end\n    return start\nend\nmethods.foldl = method2(foldl)\nexports.foldl = export2(foldl)\nmethods.reduce = methods.foldl\nexports.reduce = exports.foldl\n\nlocal length = function(gen, param, state)\n    if gen == ipairs_gen or gen == string_gen then\n        return #param\n    end\n    local len = 0\n    repeat\n        state = gen(param, state)\n        len = len + 1\n    until state == nil\n    return len - 1\nend\nmethods.length = method0(length)\nexports.length = export0(length)\n\nlocal is_null = function(gen, param, state)\n    return gen(param, deepcopy(state)) == nil\nend\nmethods.is_null = method0(is_null)\nexports.is_null = export0(is_null)\n\nlocal is_prefix_of = function(iter_x, iter_y)\n    local gen_x, param_x, state_x = iter(iter_x)\n    local gen_y, param_y, state_y = iter(iter_y)\n\n    local r_x, r_y\n    for i=1,10,1 do\n        state_x, r_x = gen_x(param_x, state_x)\n        state_y, r_y = gen_y(param_y, state_y)\n        if state_x == nil then\n            return true\n        end\n        if state_y == nil or r_x ~= r_y then\n            return false\n        end\n    end\nend\nmethods.is_prefix_of = is_prefix_of\nexports.is_prefix_of = is_prefix_of\n\nlocal all = function(fun, gen_x, param_x, state_x)\n    local r\n    repeat\n        state_x, r = call_if_not_empty(fun, gen_x(param_x, state_x))\n    until state_x == nil or not r\n    return state_x == nil\nend\nmethods.all = method1(all)\nexports.all = export1(all)\nmethods.every = methods.all\nexports.every = exports.all\n\nlocal any = function(fun, gen_x, param_x, state_x)\n    local r\n    repeat\n        state_x, r = call_if_not_empty(fun, gen_x(param_x, state_x))\n    until state_x == nil or r\n    return not not r\nend\nmethods.any = method1(any)\nexports.any = export1(any)\nmethods.some = methods.any\nexports.some = exports.any\n\nlocal sum = function(gen, param, state)\n    local s = 0\n    local r = 0\n    repeat\n        s = s + r\n        state, r = gen(param, state)\n    until state == nil\n    return s\nend\nmethods.sum = method0(sum)\nexports.sum = export0(sum)\n\nlocal product = function(gen, param, state)\n    local p = 1\n    local r = 1\n    repeat\n        p = p * r\n        state, r = gen(param, state)\n    until state == nil\n    return p\nend\nmethods.product = method0(product)\nexports.product = export0(product)\n\nlocal min_cmp = function(m, n)\n    if n < m then return n else return m end\nend\n\nlocal max_cmp = function(m, n)\n    if n > m then return n else return m end\nend\n\nlocal min = function(gen, param, state)\n    local state, m = gen(param, state)\n    if state == nil then\n        error(\"min: iterator is empty\")\n    end\n\n    local cmp\n    if type(m) == \"number\" then\n        -- An optimization: use math.min for numbers\n        cmp = math.min\n    else\n        cmp = min_cmp\n    end\n\n    for _, r in gen, param, state do\n        m = cmp(m, r)\n    end\n    return m\nend\nmethods.min = method0(min)\nexports.min = export0(min)\nmethods.minimum = methods.min\nexports.minimum = exports.min\n\nlocal min_by = function(cmp, gen_x, param_x, state_x)\n    local state_x, m = gen_x(param_x, state_x)\n    if state_x == nil then\n        error(\"min: iterator is empty\")\n    end\n\n    for _, r in gen_x, param_x, state_x do\n        m = cmp(m, r)\n    end\n    return m\nend\nmethods.min_by = method1(min_by)\nexports.min_by = export1(min_by)\nmethods.minimum_by = methods.min_by\nexports.minimum_by = exports.min_by\n\nlocal max = function(gen_x, param_x, state_x)\n    local state_x, m = gen_x(param_x, state_x)\n    if state_x == nil then\n        error(\"max: iterator is empty\")\n    end\n\n    local cmp\n    if type(m) == \"number\" then\n        -- An optimization: use math.max for numbers\n        cmp = math.max\n    else\n        cmp = max_cmp\n    end\n\n    for _, r in gen_x, param_x, state_x do\n        m = cmp(m, r)\n    end\n    return m\nend\nmethods.max = method0(max)\nexports.max = export0(max)\nmethods.maximum = methods.max\nexports.maximum = exports.max\n\nlocal max_by = function(cmp, gen_x, param_x, state_x)\n    local state_x, m = gen_x(param_x, state_x)\n    if state_x == nil then\n        error(\"max: iterator is empty\")\n    end\n\n    for _, r in gen_x, param_x, state_x do\n        m = cmp(m, r)\n    end\n    return m\nend\nmethods.max_by = method1(max_by)\nexports.max_by = export1(max_by)\nmethods.maximum_by = methods.maximum_by\nexports.maximum_by = exports.maximum_by\n\nlocal totable = function(gen_x, param_x, state_x)\n    local tab, key, val = {}\n    while true do\n        state_x, val = gen_x(param_x, state_x)\n        if state_x == nil then\n            break\n        end\n        table.insert(tab, val)\n    end\n    return tab\nend\nmethods.totable = method0(totable)\nexports.totable = export0(totable)\n\nlocal tomap = function(gen_x, param_x, state_x)\n    local tab, key, val = {}\n    while true do\n        state_x, key, val = gen_x(param_x, state_x)\n        if state_x == nil then\n            break\n        end\n        tab[key] = val\n    end\n    return tab\nend\nmethods.tomap = method0(tomap)\nexports.tomap = export0(tomap)\n\n--------------------------------------------------------------------------------\n-- Transformations\n--------------------------------------------------------------------------------\n\nlocal map_gen = function(param, state)\n    local gen_x, param_x, fun = param[1], param[2], param[3]\n    return call_if_not_empty(fun, gen_x(param_x, state))\nend\n\nlocal map = function(fun, gen, param, state)\n    return wrap(map_gen, {gen, param, fun}, state)\nend\nmethods.map = method1(map)\nexports.map = export1(map)\n\nlocal enumerate_gen_call = function(state, i, state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    return {i + 1, state_x}, i, ...\nend\n\nlocal enumerate_gen = function(param, state)\n    local gen_x, param_x = param[1], param[2]\n    local i, state_x = state[1], state[2]\n    return enumerate_gen_call(state, i, gen_x(param_x, state_x))\nend\n\nlocal enumerate = function(gen, param, state)\n    return wrap(enumerate_gen, {gen, param}, {1, state})\nend\nmethods.enumerate = method0(enumerate)\nexports.enumerate = export0(enumerate)\n\nlocal intersperse_call = function(i, state_x, ...)\n    if state_x == nil then\n        return nil\n    end\n    return {i + 1, state_x}, ...\nend\n\nlocal intersperse_gen = function(param, state)\n    local x, gen_x, param_x = param[1], param[2], param[3]\n    local i, state_x = state[1], state[2]\n    if i % 2 == 1 then\n        return {i + 1, state_x}, x\n    else\n        return intersperse_call(i, gen_x(param_x, state_x))\n    end\nend\n\n-- TODO: interperse must not add x to the tail\nlocal intersperse = function(x, gen, param, state)\n    return wrap(intersperse_gen, {x, gen, param}, {0, state})\nend\nmethods.intersperse = method1(intersperse)\nexports.intersperse = export1(intersperse)\n\n--------------------------------------------------------------------------------\n-- Compositions\n--------------------------------------------------------------------------------\n\nlocal function zip_gen_r(param, state, state_new, ...)\n    if #state_new == #param \/ 2 then\n        return state_new, ...\n    end\n\n    local i = #state_new + 1\n    local gen_x, param_x = param[2 * i - 1], param[2 * i]\n    local state_x, r = gen_x(param_x, state[i])\n    if state_x == nil then\n        return nil\n    end\n    table.insert(state_new, state_x)\n    return zip_gen_r(param, state, state_new, r, ...)\nend\n\nlocal zip_gen = function(param, state)\n    return zip_gen_r(param, state, {})\nend\n\n-- A special hack for zip\/chain to skip last two state, if a wrapped iterator\n-- has been passed\nlocal numargs = function(...)\n    local n = select('#', ...)\n    if n >= 3 then\n        -- Fix last argument\n        local it = select(n - 2, ...)\n        if type(it) == 'table' and getmetatable(it) == iterator_mt and\n           it.param == select(n - 1, ...) and it.state == select(n, ...) then\n            return n - 2\n        end\n    end\n    return n\nend\n\nlocal zip = function(...)\n    local n = numargs(...)\n    if n == 0 then\n        return wrap(nil_gen, nil, nil)\n    end\n    local param = { [2 * n] = 0 }\n    local state = { [n] = 0 }\n\n    local i, gen_x, param_x, state_x\n    for i=1,n,1 do\n        local it = select(n - i + 1, ...)\n        gen_x, param_x, state_x = rawiter(it)\n        param[2 * i - 1] = gen_x\n        param[2 * i] = param_x\n        state[i] = state_x\n    end\n\n    return wrap(zip_gen, param, state)\nend\nmethods.zip = zip\nexports.zip = zip\n\nlocal cycle_gen_call = function(param, state_x, ...)\n    if state_x == nil then\n        local gen_x, param_x, state_x0 = param[1], param[2], param[3]\n        return gen_x(param_x, deepcopy(state_x0))\n    end\n    return state_x, ...\nend\n\nlocal cycle_gen = function(param, state_x)\n    local gen_x, param_x, state_x0 = param[1], param[2], param[3]\n    return cycle_gen_call(param, gen_x(param_x, state_x))\nend\n\nlocal cycle = function(gen, param, state)\n    return wrap(cycle_gen, {gen, param, state}, deepcopy(state))\nend\nmethods.cycle = method0(cycle)\nexports.cycle = export0(cycle)\n\n-- call each other\nlocal chain_gen_r1\nlocal chain_gen_r2 = function(param, state, state_x, ...)\n    if state_x == nil then\n        local i = state[1]\n        i = i + 1\n        if param[3 * i - 1] == nil then\n            return nil\n        end\n        local state_x = param[3 * i]\n        return chain_gen_r1(param, {i, state_x})\n    end\n    return {state[1], state_x}, ...\nend\n\nchain_gen_r1 = function(param, state)\n    local i, state_x = state[1], state[2]\n    local gen_x, param_x = param[3 * i - 2], param[3 * i - 1]\n    return chain_gen_r2(param, state, gen_x(param_x, state[2]))\nend\n\nlocal chain = function(...)\n    local n = numargs(...)\n    if n == 0 then\n        return wrap(nil_gen, nil, nil)\n    end\n\n    local param = { [3 * n] = 0 }\n    local i, gen_x, param_x, state_x\n    for i=1,n,1 do\n        local elem = select(i, ...)\n        gen_x, param_x, state_x = iter(elem)\n        param[3 * i - 2] = gen_x\n        param[3 * i - 1] = param_x\n        param[3 * i] = state_x\n    end\n\n    return wrap(chain_gen_r1, param, {1, param[3]})\nend\nmethods.chain = chain\nexports.chain = chain\n\n--------------------------------------------------------------------------------\n-- Operators\n--------------------------------------------------------------------------------\n\nlocal operator = {\n    ----------------------------------------------------------------------------\n    -- Comparison operators\n    ----------------------------------------------------------------------------\n    lt  = function(a, b) return a < b end,\n    le  = function(a, b) return a <= b end,\n    eq  = function(a, b) return a == b end,\n    ne  = function(a, b) return a ~= b end,\n    ge  = function(a, b) return a >= b end,\n    gt  = function(a, b) return a > b end,\n\n    ----------------------------------------------------------------------------\n    -- Arithmetic operators\n    ----------------------------------------------------------------------------\n    add = function(a, b) return a + b end,\n    div = function(a, b) return a \/ b end,\n    floordiv = function(a, b) return math.floor(a\/b) end,\n    intdiv = function(a, b)\n        local q = a \/ b\n        if a >= 0 then return math.floor(q) else return math.ceil(q) end\n    end,\n    mod = function(a, b) return a % b end,\n    mul = function(a, b) return a * b end,\n    neq = function(a) return -a end,\n    unm = function(a) return -a end, -- an alias\n    pow = function(a, b) return a ^ b end,\n    sub = function(a, b) return a - b end,\n    truediv = function(a, b) return a \/ b end,\n\n    ----------------------------------------------------------------------------\n    -- String operators\n    ----------------------------------------------------------------------------\n    concat = function(a, b) return a..b end,\n    len = function(a) return #a end,\n    length = function(a) return #a end, -- an alias\n\n    ----------------------------------------------------------------------------\n    -- Logical operators\n    ----------------------------------------------------------------------------\n    land = function(a, b) return a and b end,\n    lor = function(a, b) return a or b end,\n    lnot = function(a) return not a end,\n    truth = function(a) return not not a end,\n}\nexports.operator = operator\nmethods.operator = operator\nexports.op = operator\nmethods.op = operator\n\n--------------------------------------------------------------------------------\n-- module definitions\n--------------------------------------------------------------------------------\n\n-- a special syntax sugar to export all functions to the global table\nsetmetatable(exports, {\n    __call = function(t, override)\n        for k, v in pairs(t) do\n            if rawget(_G, k) ~= nil then\n                local msg = 'function ' .. k .. ' already exists in global scope.'\n                if override then\n                    rawset(_G, k, v)\n                    print('WARNING: ' .. msg .. ' Overwritten.')\n                else\n                    print('NOTICE: ' .. msg .. ' Skipped.')\n                end\n            else\n                rawset(_G, k, v)\n            end\n        end\n    end,\n})\n\nreturn exports\n]]()\nlocal localvar_1 = load[=[\n--\n-- lume\n--\n-- Copyright (c) 2020 rxi\n--\n-- Permission is hereby granted, free of charge, to any person obtaining a copy of\n-- this software and associated documentation files (the \"Software\"), to deal in\n-- the Software without restriction, including without limitation the rights to\n-- use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies\n-- of the Software, and to permit persons to whom the Software is furnished to do\n-- so, subject to the following conditions:\n--\n-- The above copyright notice and this permission notice shall be included in all\n-- copies or substantial portions of the Software.\n--\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n-- SOFTWARE.\n--\n\nlocal lume = { _version = \"2.3.0\" }\n\nlocal pairs, ipairs = pairs, ipairs\nlocal type, assert, unpack = type, assert, unpack or table.unpack\nlocal tostring, tonumber = tostring, tonumber\nlocal math_floor = math.floor\nlocal math_ceil = math.ceil\nlocal math_atan2 = math.atan2 or math.atan\nlocal math_sqrt = math.sqrt\nlocal math_abs = math.abs\n\nlocal noop = function()\nend\n\nlocal identity = function(x)\n  return x\nend\n\nlocal patternescape = function(str)\n  return str:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\", \"%%%1\")\nend\n\nlocal absindex = function(len, i)\n  return i < 0 and (len + i + 1) or i\nend\n\nlocal iscallable = function(x)\n  if type(x) == \"function\" then return true end\n  local mt = getmetatable(x)\n  return mt and mt.__call ~= nil\nend\n\nlocal getiter = function(x)\n  if lume.isarray(x) then\n    return ipairs\n  elseif type(x) == \"table\" then\n    return pairs\n  end\n  error(\"expected table\", 3)\nend\n\nlocal iteratee = function(x)\n  if x == nil then return identity end\n  if iscallable(x) then return x end\n  if type(x) == \"table\" then\n    return function(z)\n      for k, v in pairs(x) do\n        if z[k] ~= v then return false end\n      end\n      return true\n    end\n  end\n  return function(z) return z[x] end\nend\n\n\n\nfunction lume.clamp(x, min, max)\n  return x < min and min or (x > max and max or x)\nend\n\n\nfunction lume.round(x, increment)\n  if increment then return lume.round(x \/ increment) * increment end\n  return x >= 0 and math_floor(x + .5) or math_ceil(x - .5)\nend\n\n\nfunction lume.sign(x)\n  return x < 0 and -1 or 1\nend\n\n\nfunction lume.lerp(a, b, amount)\n  return a + (b - a) * lume.clamp(amount, 0, 1)\nend\n\n\nfunction lume.smooth(a, b, amount)\n  local t = lume.clamp(amount, 0, 1)\n  local m = t * t * (3 - 2 * t)\n  return a + (b - a) * m\nend\n\n\nfunction lume.pingpong(x)\n  return 1 - math_abs(1 - x % 2)\nend\n\n\nfunction lume.distance(x1, y1, x2, y2, squared)\n  local dx = x1 - x2\n  local dy = y1 - y2\n  local s = dx * dx + dy * dy\n  return squared and s or math_sqrt(s)\nend\n\n\nfunction lume.angle(x1, y1, x2, y2)\n  return math_atan2(y2 - y1, x2 - x1)\nend\n\n\nfunction lume.vector(angle, magnitude)\n  return math.cos(angle) * magnitude, math.sin(angle) * magnitude\nend\n\n\nfunction lume.random(a, b)\n  if not a then a, b = 0, 1 end\n  if not b then b = 0 end\n  return a + math.random() * (b - a)\nend\n\n\nfunction lume.randomchoice(t)\n  return t[math.random(#t)]\nend\n\n\nfunction lume.weightedchoice(t)\n  local sum = 0\n  for _, v in pairs(t) do\n    assert(v >= 0, \"weight value less than zero\")\n    sum = sum + v\n  end\n  assert(sum ~= 0, \"all weights are zero\")\n  local rnd = lume.random(sum)\n  for k, v in pairs(t) do\n    if rnd < v then return k end\n    rnd = rnd - v\n  end\nend\n\n\nfunction lume.isarray(x)\n  return type(x) == \"table\" and x[1] ~= nil\nend\n\n\nfunction lume.push(t, ...)\n  local n = select(\"#\", ...)\n  for i = 1, n do\n    t[#t + 1] = select(i, ...)\n  end\n  return ...\nend\n\n\nfunction lume.remove(t, x)\n  local iter = getiter(t)\n  for i, v in iter(t) do\n    if v == x then\n      if lume.isarray(t) then\n        table.remove(t, i)\n        break\n      else\n        t[i] = nil\n        break\n      end\n    end\n  end\n  return x\nend\n\n\nfunction lume.clear(t)\n  local iter = getiter(t)\n  for k in iter(t) do\n    t[k] = nil\n  end\n  return t\nend\n\n\nfunction lume.extend(t, ...)\n  for i = 1, select(\"#\", ...) do\n    local x = select(i, ...)\n    if x then\n      for k, v in pairs(x) do\n        t[k] = v\n      end\n    end\n  end\n  return t\nend\n\n\nfunction lume.shuffle(t)\n  local rtn = {}\n  for i = 1, #t do\n    local r = math.random(i)\n    if r ~= i then\n      rtn[i] = rtn[r]\n    end\n    rtn[r] = t[i]\n  end\n  return rtn\nend\n\n\nfunction lume.sort(t, comp)\n  local rtn = lume.clone(t)\n  if comp then\n    if type(comp) == \"string\" then\n      table.sort(rtn, function(a, b) return a[comp] < b[comp] end)\n    else\n      table.sort(rtn, comp)\n    end\n  else\n    table.sort(rtn)\n  end\n  return rtn\nend\n\n\nfunction lume.array(...)\n  local t = {}\n  for x in ... do t[#t + 1] = x end\n  return t\nend\n\n\nfunction lume.each(t, fn, ...)\n  local iter = getiter(t)\n  if type(fn) == \"string\" then\n    for _, v in iter(t) do v[fn](v, ...) end\n  else\n    for _, v in iter(t) do fn(v, ...) end\n  end\n  return t\nend\n\n\nfunction lume.map(t, fn)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  local rtn = {}\n  for k, v in iter(t) do rtn[k] = fn(v) end\n  return rtn\nend\n\n\nfunction lume.all(t, fn)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  for _, v in iter(t) do\n    if not fn(v) then return false end\n  end\n  return true\nend\n\n\nfunction lume.any(t, fn)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  for _, v in iter(t) do\n    if fn(v) then return true end\n  end\n  return false\nend\n\n\nfunction lume.reduce(t, fn, first)\n  local started = first ~= nil\n  local acc = first\n  local iter = getiter(t)\n  for _, v in iter(t) do\n    if started then\n      acc = fn(acc, v)\n    else\n      acc = v\n      started = true\n    end\n  end\n  assert(started, \"reduce of an empty table with no first value\")\n  return acc\nend\n\n\nfunction lume.unique(t)\n  local rtn = {}\n  for k in pairs(lume.invert(t)) do\n    rtn[#rtn + 1] = k\n  end\n  return rtn\nend\n\n\nfunction lume.filter(t, fn, retainkeys)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  local rtn = {}\n  if retainkeys then\n    for k, v in iter(t) do\n      if fn(v) then rtn[k] = v end\n    end\n  else\n    for _, v in iter(t) do\n      if fn(v) then rtn[#rtn + 1] = v end\n    end\n  end\n  return rtn\nend\n\n\nfunction lume.reject(t, fn, retainkeys)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  local rtn = {}\n  if retainkeys then\n    for k, v in iter(t) do\n      if not fn(v) then rtn[k] = v end\n    end\n  else\n    for _, v in iter(t) do\n      if not fn(v) then rtn[#rtn + 1] = v end\n    end\n  end\n  return rtn\nend\n\n\nfunction lume.merge(...)\n  local rtn = {}\n  for i = 1, select(\"#\", ...) do\n    local t = select(i, ...)\n    local iter = getiter(t)\n    for k, v in iter(t) do\n      rtn[k] = v\n    end\n  end\n  return rtn\nend\n\n\nfunction lume.concat(...)\n  local rtn = {}\n  for i = 1, select(\"#\", ...) do\n    local t = select(i, ...)\n    if t ~= nil then\n      local iter = getiter(t)\n      for _, v in iter(t) do\n        rtn[#rtn + 1] = v\n      end\n    end\n  end\n  return rtn\nend\n\n\nfunction lume.find(t, value)\n  local iter = getiter(t)\n  for k, v in iter(t) do\n    if v == value then return k end\n  end\n  return nil\nend\n\n\nfunction lume.match(t, fn)\n  fn = iteratee(fn)\n  local iter = getiter(t)\n  for k, v in iter(t) do\n    if fn(v) then return v, k end\n  end\n  return nil\nend\n\n\nfunction lume.count(t, fn)\n  local count = 0\n  local iter = getiter(t)\n  if fn then\n    fn = iteratee(fn)\n    for _, v in iter(t) do\n      if fn(v) then count = count + 1 end\n    end\n  else\n    if lume.isarray(t) then\n      return #t\n    end\n    for _ in iter(t) do count = count + 1 end\n  end\n  return count\nend\n\n\nfunction lume.slice(t, i, j)\n  i = i and absindex(#t, i) or 1\n  j = j and absindex(#t, j) or #t\n  local rtn = {}\n  for x = i < 1 and 1 or i, j > #t and #t or j do\n    rtn[#rtn + 1] = t[x]\n  end\n  return rtn\nend\n\n\nfunction lume.first(t, n)\n  if not n then return t[1] end\n  return lume.slice(t, 1, n)\nend\n\n\nfunction lume.last(t, n)\n  if not n then return t[#t] end\n  return lume.slice(t, -n, -1)\nend\n\n\nfunction lume.invert(t)\n  local rtn = {}\n  for k, v in pairs(t) do rtn[v] = k end\n  return rtn\nend\n\n\nfunction lume.pick(t, ...)\n  local rtn = {}\n  for i = 1, select(\"#\", ...) do\n    local k = select(i, ...)\n    rtn[k] = t[k]\n  end\n  return rtn\nend\n\n\nfunction lume.keys(t)\n  local rtn = {}\n  local iter = getiter(t)\n  for k in iter(t) do rtn[#rtn + 1] = k end\n  return rtn\nend\n\n\nfunction lume.clone(t)\n  local rtn = {}\n  for k, v in pairs(t) do rtn[k] = v end\n  return rtn\nend\n\n\nfunction lume.fn(fn, ...)\n  assert(iscallable(fn), \"expected a function as the first argument\")\n  local args = { ... }\n  return function(...)\n    local a = lume.concat(args, { ... })\n    return fn(unpack(a))\n  end\nend\n\n\nfunction lume.once(fn, ...)\n  local f = lume.fn(fn, ...)\n  local done = false\n  return function(...)\n    if done then return end\n    done = true\n    return f(...)\n  end\nend\n\n\nlocal memoize_fnkey = {}\nlocal memoize_nil = {}\n\nfunction lume.memoize(fn)\n  local cache = {}\n  return function(...)\n    local c = cache\n    for i = 1, select(\"#\", ...) do\n      local a = select(i, ...) or memoize_nil\n      c[a] = c[a] or {}\n      c = c[a]\n    end\n    c[memoize_fnkey] = c[memoize_fnkey] or {fn(...)}\n    return unpack(c[memoize_fnkey])\n  end\nend\n\n\nfunction lume.combine(...)\n  local n = select('#', ...)\n  if n == 0 then return noop end\n  if n == 1 then\n    local fn = select(1, ...)\n    if not fn then return noop end\n    assert(iscallable(fn), \"expected a function or nil\")\n    return fn\n  end\n  local funcs = {}\n  for i = 1, n do\n    local fn = select(i, ...)\n    if fn ~= nil then\n      assert(iscallable(fn), \"expected a function or nil\")\n      funcs[#funcs + 1] = fn\n    end\n  end\n  return function(...)\n    for _, f in ipairs(funcs) do f(...) end\n  end\nend\n\n\nfunction lume.call(fn, ...)\n  if fn then\n    return fn(...)\n  end\nend\n\n\nfunction lume.time(fn, ...)\n  local start = os.clock()\n  local rtn = {fn(...)}\n  return (os.clock() - start), unpack(rtn)\nend\n\n\nlocal lambda_cache = {}\n\nfunction lume.lambda(str)\n  if not lambda_cache[str] then\n    local args, body = str:match([[^([%w,_ ]-)%->(.-)$]])\n    assert(args and body, \"bad string lambda\")\n    local s = \"return function(\" .. args .. \")\nreturn \" .. body .. \"\nend\"\n    lambda_cache[str] = lume.dostring(s)\n  end\n  return lambda_cache[str]\nend\n\n\nlocal serialize\n\nlocal serialize_map = {\n  [ \"boolean\" ] = tostring,\n  [ \"nil\"     ] = tostring,\n  [ \"string\"  ] = function(v) return string.format(\"%q\", v) end,\n  [ \"number\"  ] = function(v)\n    if      v ~=  v     then return  \"0\/0\"      --  nan\n    elseif  v ==  1 \/ 0 then return  \"1\/0\"      --  inf\n    elseif  v == -1 \/ 0 then return \"-1\/0\" end  -- -inf\n    return tostring(v)\n  end,\n  [ \"table\"   ] = function(t, stk)\n    stk = stk or {}\n    if stk[t] then error(\"circular reference\") end\n    local rtn = {}\n    stk[t] = true\n    for k, v in pairs(t) do\n      rtn[#rtn + 1] = \"[\" .. serialize(k, stk) .. \"]=\" .. serialize(v, stk)\n    end\n    stk[t] = nil\n    return \"{\" .. table.concat(rtn, \",\") .. \"}\"\n  end\n}\n\nsetmetatable(serialize_map, {\n  __index = function(_, k) error(\"unsupported serialize type: \" .. k) end\n})\n\nserialize = function(x, stk)\n  return serialize_map[type(x)](x, stk)\nend\n\nfunction lume.serialize(x)\n  return serialize(x)\nend\n\n\nfunction lume.deserialize(str)\n  return lume.dostring(\"return \" .. str)\nend\n\n\nfunction lume.split(str, sep)\n  if not sep then\n    return lume.array(str:gmatch(\"([%S]+)\"))\n  else\n    assert(sep ~= \"\", \"empty separator\")\n    local psep = patternescape(sep)\n    return lume.array((str..sep):gmatch(\"(.-)(\"..psep..\")\"))\n  end\nend\n\n\nfunction lume.trim(str, chars)\n  if not chars then return str:match(\"^[%s]*(.-)[%s]*$\") end\n  chars = patternescape(chars)\n  return str:match(\"^[\" .. chars .. \"]*(.-)[\" .. chars .. \"]*$\")\nend\n\n\nfunction lume.wordwrap(str, limit)\n  limit = limit or 72\n  local check\n  if type(limit) == \"number\" then\n    check = function(s) return #s >= limit end\n  else\n    check = limit\n  end\n  local rtn = {}\n  local line = \"\"\n  for word, spaces in str:gmatch(\"(%S+)(%s*)\") do\n    local s = line .. word\n    if check(s) then\n      table.insert(rtn, line .. \"\n\")\n      line = word\n    else\n      line = s\n    end\n    for c in spaces:gmatch(\".\") do\n      if c == \"\n\" then\n        table.insert(rtn, line .. \"\n\")\n        line = \"\"\n      else\n        line = line .. c\n      end\n    end\n  end\n  table.insert(rtn, line)\n  return table.concat(rtn)\nend\n\n\nfunction lume.format(str, vars)\n  if not vars then return str end\n  local f = function(x)\n    return tostring(vars[x] or vars[tonumber(x)] or \"{\" .. x .. \"}\")\n  end\n  return (str:gsub(\"{(.-)}\", f))\nend\n\n\nfunction lume.trace(...)\n  local info = debug.getinfo(2, \"Sl\")\n  local t = { info.short_src .. \":\" .. info.currentline .. \":\" }\n  for i = 1, select(\"#\", ...) do\n    local x = select(i, ...)\n    if type(x) == \"number\" then\n      x = string.format(\"%g\", lume.round(x, .01))\n    end\n    t[#t + 1] = tostring(x)\n  end\n  print(table.concat(t, \" \"))\nend\n\n\nfunction lume.dostring(str)\n  return assert((loadstring or load)(str))()\nend\n\n\nfunction lume.uuid()\n  local fn = function(x)\n    local r = math.random(16) - 1\n    r = (x == \"x\") and (r + 1) or (r % 4) + 9\n    return (\"0123456789abcdef\"):sub(r, r)\n  end\n  return ((\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"):gsub(\"[xy]\", fn))\nend\n\n\nfunction lume.hotswap(modname)\n  local oldglobal = lume.clone(_G)\n  local updated = {}\n  local function update(old, new)\n    if updated[old] then return end\n    updated[old] = true\n    local oldmt, newmt = getmetatable(old), getmetatable(new)\n    if oldmt and newmt then update(oldmt, newmt) end\n    for k, v in pairs(new) do\n      if type(v) == \"table\" then update(old[k], v) else old[k] = v end\n    end\n  end\n  local err = nil\n  local function onerror(e)\n    for k in pairs(_G) do _G[k] = oldglobal[k] end\n    err = lume.trim(e)\n  end\n  local ok, oldmod = pcall(require, modname)\n  oldmod = ok and oldmod or nil\n  xpcall(function()\n    package.loaded[modname] = nil\n    local newmod = require(modname)\n    if type(oldmod) == \"table\" then update(oldmod, newmod) end\n    for k, v in pairs(oldglobal) do\n      if v ~= _G[k] and type(v) == \"table\" then\n        update(v, _G[k])\n        _G[k] = v\n      end\n    end\n  end, onerror)\n  package.loaded[modname] = oldmod\n  if err then return nil, err end\n  return oldmod\nend\n\n\nlocal ripairs_iter = function(t, i)\n  i = i - 1\n  local v = t[i]\n  if v ~= nil then\n    return i, v\n  end\nend\n\nfunction lume.ripairs(t)\n  return ripairs_iter, t, (#t + 1)\nend\n\n\nfunction lume.color(str, mul)\n  mul = mul or 1\n  local r, g, b, a\n  r, g, b = str:match(\"#(%x%x)(%x%x)(%x%x)\")\n  if r then\n    r = tonumber(r, 16) \/ 0xff\n    g = tonumber(g, 16) \/ 0xff\n    b = tonumber(b, 16) \/ 0xff\n    a = 1\n  elseif str:match(\"rgba?%s*%([%d%s%.,]+%)\") then\n    local f = str:gmatch(\"[%d.]+\")\n    r = (f() or 0) \/ 0xff\n    g = (f() or 0) \/ 0xff\n    b = (f() or 0) \/ 0xff\n    a = f() or 1\n  else\n    error((\"bad color string '%s'\"):format(str))\n  end\n  return r * mul, g * mul, b * mul, a * mul\nend\n\n\nlocal chain_mt = {}\nchain_mt.__index = lume.map(lume.filter(lume, iscallable, true),\n  function(fn)\n    return function(self, ...)\n      self._value = fn(self._value, ...)\n      return self\n    end\n  end)\nchain_mt.__index.result = function(x) return x._value end\n\nfunction lume.chain(value)\n  return setmetatable({ _value = value }, chain_mt)\nend\n\nsetmetatable(lume,  {\n  __call = function(_, ...)\n    return lume.chain(...)\n  end\n})\n\n\nreturn lume\n]=]()\nlocal localvar_2 = {}\nlocalvar_2.inArray = function(var_0, var_1)\n\treturn localvar_1.sort(localvar_1.unique(localvar_0.totable(localvar_0.filter(function(var_2)\n\t\treturn localvar_0.any(function(var_3) return not(nil == string.find(var_3, var_2, 1, true)) end, var_1)\n\tend, var_0))))\nend\nreturn localvar_2","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210192,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n    local set = {}\n    for _,k in ipairs(array1) do\n        for _,v in ipairs(array2) do\n            if string.find(v,string.gsub(k,\"%.\",\" \")) then\n                set[k] = true\n            end\n        end\n    end\n    local sol = {}\n    for a,_ in pairs(set) do\n        table.insert(sol,a)\n    end\n    table.sort(sol)\n    return sol\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210193,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n  local result = {}\n  local new_result = {}\n  local Dupes ={}\n  local final = {}\n  if next(array1) ~= nil and next(array2) ~= nil then\n    for k, v in pairs(array1) do\n      for k2, v2 in pairs(array2) do\n        i, j = string.find(v2, v)\n        if i ~= nil or j ~= nil then\n          table.insert(result, v)\n        end\n      end\n    end\n    for i,v in pairs(result) do\n        if(new_result[v] ~= nil) then\n            table.insert(Dupes,v)\n        end\n        new_result[v] = i\n    end\n    for k, v in pairs(new_result) do\n      if not string.find(k, '[^a-zA-Z0-9&()]') then\n        table.insert(final, k)\n        table.sort(final)\n      end\n    end\n  end\n    -- your code\n    return final\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210194,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n  local t, res = {}, {}\n  for _, i in ipairs(array1) do t[i]=true end\n  for i in pairs(t) do\n    for _, j in ipairs(array2) do\n      if j:find(i,1,true) then table.insert(res,i); break end\n    end\n  end\n  table.sort(res)\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210195,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n    local hash = {}\n    local matches = {}\n    for _, s1 in ipairs(array1) do\n      for _, s2 in ipairs(array2) do\n        if s2:find(s1, 1, true) then\n          hash[s1] = true\n        end\n      end\n    end\n    for val, _ in pairs(hash) do\n      table.insert(matches, val)\n    end\n    table.sort(matches)\n    return matches\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210196,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n  resu = {}\n  for i=1,#array1 do\n    for j=1,#array2 do\n      if(string.find(array2[j],array1[i]:gsub(\"%.\",\"x\"))) then\n        flag=true\n        for x=1,#resu do\n          if(array1[i]==resu[x]) then\n            flag=false\n          end\n        end\n        if flag then\n          table.insert(resu,array1[i])\n        end\n        break\n      end\n    end\n  end\n  table.sort(resu)\n  \n    return resu\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210197,"user_id":168,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n  function contains(str)\n    str = str:gsub('%W', '%%%0')\n    print(str)\n    for _, x in pairs(array2) do\n      if x:match(str) then\n        return true\n      end\n    end\n    return false\n  end\n    \n  local xs, r = {}, {}\n  for _, x in pairs(array1) do\n    if not xs[x] and contains(x) then\n      xs[x] = true\n      table.insert(r, x)\n    end\n  end\n  \n  table.sort(r)\n  return r\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210198,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n    t = {}\n    h = {}\n    for _, a in pairs(array1) do\n      for _, b in pairs(array2) do\n        r1, r2 = string.find(b, a, 1, true)\n        if r1 and r2 and r2 - r1 + 1 == a:len() then\n          print(a, b)\n          h[a] = a\n        end\n      end\n    end\n    for _, w in pairs(h) do \n      table.insert(t, w)\n    end\n    table.sort(t)\n    return t\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210199,"user_id":null,"body":"local solution = {}\n\nfunction solution.inArray(array1, array2)\n    r = {}\n    for _, s in ipairs(array1) do\n      for _, t in ipairs(array2) do\n        if string.find(t, s, 1, true) then\n          found = false\n          for _, x in ipairs(r) do\n            if x == s then\n              found = true\n              \n            end\n          end\n\n          if found == false then\n            table.insert(r, s)\n          end\n          break\n        end\n      end\n    end\n    table.sort(r)\n    return r\n  end\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"550f22f4d758534c1100025a":[{"id":210200,"user_id":null,"body":"local kata = {}\n\nlocal opposites = {NORTH = \"SOUTH\", SOUTH = \"NORTH\", WEST = \"EAST\", EAST = \"WEST\"}\n\nfunction kata.dir_reduc(dir)\n  for i = 1, #dir-1 do\n    if dir[i] == opposites[dir[i+1]] then\n      table.remove(dir, i+1)\n      table.remove(dir, i)\n      return kata.dir_reduc(dir)\n    end\n  end\n  return dir\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210201,"user_id":null,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n\n  local opposites = {\n    NORTH = \"SOUTH\",\n    SOUTH = \"NORTH\",\n    EAST = \"WEST\",\n    WEST = \"EAST\"\n  }\n  \n  local function reducepairs(arr)\n\n    if #arr < 2 then return arr end\n    \n    for i = 1, #arr - 1 do\n\n      if arr[i + 1] and arr[i + 1] == opposites[ arr[i] ] then\n\n        table.remove(arr, i + 1)\n        table.remove(arr, i)\n        \n        arr = reducepairs(arr)\n        \n      end\n    \n    end\n    \n    return arr\n    \n  end\n  \n  return reducepairs(dir)\n  \n\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210202,"user_id":null,"body":"local kata = {}\n\nlocal opposite = {\n  NORTH=\"SOUTH\";\n  SOUTH=\"NORTH\";\n  EAST=\"WEST\";\n  WEST=\"EAST\";\n}\n\nfunction kata.dir_reduc(directions)\n  local route = {}\n  \n  for _,direction in ipairs(directions) do\n    if route[#route] ~= opposite[direction] then\n      table.insert(route, direction)\n    else\n      table.remove(route)\n    end\n  end\n  \n  return route\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210203,"user_id":null,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n    -- your code\n    local val = { [\"NORTH\"] = \"SOUTH\", [\"EAST\"] = \"WEST\", [\"WEST\"] = \"EAST\", [\"SOUTH\"] = \"NORTH\" };\n    local path = {}; \n\n    path[1] = dir[1];\n    \n    for i = 2, #dir, 1 do\n      if path[#path] == val[dir[i]] then\n        path[#path] = nil;\n      else \n        path[#path + 1] = dir[i];\n      end\n    end\n    return path;\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210204,"user_id":null,"body":"local kata = {}\nkata.Opposites =\n{\n  [\"NORTH\"] = \"SOUTH\",\n  [\"EAST\"] = \"WEST\",\n  [\"SOUTH\"] = \"NORTH\",\n  [\"WEST\"] = \"EAST\",\n}\n\nfunction kata.dir_reduc(dirList)\n  local reducedPath = {}\n  for _, dir in ipairs(dirList) do\n    if (reducedPath[#reducedPath] and reducedPath[#reducedPath] == kata.Opposites[dir]) then\n      table.remove(reducedPath)\n    else\n      table.insert(reducedPath, dir)\n    end\n  end\n  return reducedPath\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210205,"user_id":492,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n    local directions = {}\n    for k, d in pairs(dir) do\n        directions[k] = d\n    end\n    local arr = {NORTH = 'SOUTH', SOUTH = 'NORTH', EAST = 'WEST', WEST = 'EAST'}\n    repeat\n        local done = true;\n        for i, d in ipairs(directions) do\n            if directions[i + 1] == arr[d] then\n                table.remove(directions, i)\n                table.remove(directions, i)\n                done = false\n            end\n        end\n    until done\n    return directions\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210206,"user_id":null,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n  dir = table.concat(dir)\n  repeat\n    local d = dir\n    dir = dir:gsub('NORTHSOUTH', ''):gsub('SOUTHNORTH', ''):gsub('EASTWEST', ''):gsub('WESTEAST', '')\n  until d == dir\n  local res = {}\n  dir:gsub('(.-TH?)', function(s) res[#res+1]=s end)\n  return res\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210207,"user_id":null,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n  repeat\n    local removed = 0\n    for i, d in pairs(dir) do\n      if dir[i-1] and d then\n        local str1, str2 = dir[i-1], d\n        if str1 > str2 then str1, str2 = str2, str1 end\n        if (str1 == \"NORTH\" and str2 == \"SOUTH\") or (str1 == \"EAST\" and str2 == \"WEST\") then\n          table.remove(dir, i-1)\n          table.remove(dir, i-1)\n          removed = removed + 1\n        end\n      end\n    end\n  until removed == 0\n  return dir\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210208,"user_id":null,"body":"local kata = {}\n\nfunction kata.dir_reduc(dir)\n    if (dir[1]==\"NORTH\" and dir[2]==\"WEST\" and dir[3]==\"SOUTH\" and dir[4]==\"EAST\") then\n      dirfin = {\"NORTH\",\"WEST\",\"SOUTH\",\"EAST\"}\n    else\n      north = 0\n      south = 0\n      east = 0\n      west = 0\n      dirver = {}\n      dirhor = {}\n      dirfin = {}\n      for i=1,#dir do\n        if dir[i] == \"NORTH\" then\n          north = north + 1\n        elseif dir[i] == \"SOUTH\" then\n          south = south + 1\n        elseif dir[i] == \"EAST\" then\n          east = east + 1\n        elseif dir[i] == \"WEST\" then\n          west = west + 1\n        end\n      end\n      diry = north - south\n      dirx = west - east\n      if diry < 0 then\n        for i=1,math.abs(diry) do\n          dirver[i] = \"SOUTH\"\n        end\n      elseif diry > 0 then\n        for i=1,math.abs(diry) do\n          dirver[i] = \"NORTH\"\n        end\n      end\n      if dirx < 0 then\n        for i=1,math.abs(dirx) do\n          dirhor[i] = \"EAST\"\n        end\n      elseif dirx > 0 then\n        for i=1,math.abs(dirx) do\n          dirhor[i] = \"WEST\"\n        end\n      end\n      diry = math.abs(diry)\n      dirx = math.abs(dirx)\n      con = 1\n      for k,v in pairs(dir) do\n        if v==dirhor[dirx] then\n          dirfin[con] = dirhor[dirx]\n          con = con + 1\n          dirx = dirx - 1\n        elseif v==dirver[diry] then\n          dirfin[con] = dirver[diry]\n          con = con + 1\n          diry = diry - 1\n        end\n      end\n    end\n    return dirfin\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210209,"user_id":198,"body":"local kata = {}\n\nlocal oppos = {'ns', 'we'}\nlocal function isOppo(s1, s2)\n  local c = {\n    string.sub(string.lower(s1), 1, 1),\n    string.sub(string.lower(s2), 1, 1)\n  }\n  local cin = {0, 0}\n  if c[1] ~= c[2] then\n    for ic = 1, 2 do\n      for io = 1, #oppos do\n        if string.match(oppos[io], c[ic]) then\n          cin[ic] = io\n          break\n        end\n      end\n    end\n    if cin[1] == cin[2] then\n      return true\n    end\n  end\n  return false\nend\n\nfunction kata.dir_reduc(list)\n  local ss = list\n  local rem = false\n  repeat\n    rem = false\n    local i = 1\n    while i <= #ss - 1 do\n      if isOppo(ss[i], ss[i+1]) then\n        table.remove(ss, i)\n        table.remove(ss, i)\n        rem = true\n      end\n      i = i + 1\n    end\n  until not rem\n  return ss\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5517fcb0236c8826940003c9":[{"id":210210,"user_id":null,"body":"local solution = {}\n\nfunction solution.sum_fracts(lst)\n  if #lst == 0 then return {0, 1} end\n  local num, den = 0, 1\n  for _,p in ipairs(lst) do den = lcm(den, p[2]) end\n  for _,p in ipairs(lst) do num = num + (p[1] * (den \/ p[2])) end\n  return num%den == 0 and {math.floor(num\/den),1} or {num\/gcd(num,den), den\/gcd(num,den)}\nend\n\nfunction gcd(a, b)\n  return b == 0 and a or gcd(b, a%b)\nend\n\nfunction lcm(a, b)\n  return b * math.floor(a \/ gcd(a, b))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210211,"user_id":53,"body":"local solution = {}\n\nfunction solution.sum_fracts(lst)\n  local size, d, n, g = #lst, 1, 0, 0\n  if size == 0 then\n    return { 0, 1 }\n  else\n    for i = 1, size do \n      d = d * lst[i][2]\n    end\n    for i = 1, size do \n      n = n + lst[i][1] * d \/ lst[i][2]\n    end\n    d = math.floor(d)\n    n = math.floor(n)\n    g = solution.gcd(d, n)\n    if g == d then\n      return { n \/ d, 1 }\n    else\n      return { n \/ g, d \/ g }\n    end\n  end\nend\n\nfunction solution.gcd(a,b)\n  if b ~= 0 then return solution.gcd(b, a % b) else return a end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210212,"user_id":492,"body":"local solution = {}\n\nfunction solution.sum_fracts(lst)\n    local function gcd(a,b)\n        while b ~= 0 do \n            a, b = b, a % b\n        end\n        return a\n    end\n    local function lcm(a, b)\n        return math.abs(a * b) \/\/ gcd(a, b)\n    end\n\n    if #lst == 0 then\n      return {0, 1}\n    end\n    -- simplify ls\n    result = {}\n    for i = 1, #lst do\n        local g = gcd(lst[i][1], lst[i][2])\n        table.insert(result, {lst[i][1] \/\/ g, lst[i][2] \/\/ g})\n    end\n    -- common denominator\n    local lcmall = 1\n    for i = 1, #result do\n        lcmall = lcm(lcmall, result[i][2]);\n    end\n    -- sum of numerators\n    local s = 0\n    for i = 1, #result do\n        local r = (lcmall \/\/ result[i][2]) * result[i][1]\n        s = s + r\n    end   \n    -- simplify result\n    local g = gcd(s, lcmall)\n    return {s \/\/ g, lcmall \/\/ g}\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210213,"user_id":null,"body":"local solution = {}\n\nlocal function reduceFrac(n, d)\n  -- Reduces fraction n\/d\n  for i = 2, n do\n    if n % i == 0 and d % i == 0 then\n      return reduceFrac(n \/ i, d \/ i)\n    end\n  end\n  return {n, d}\nend\n\nfunction solution.sum_fracts(lst)\n  -- your code\n  local numerators = {}\n  local denominators = {}\n  for _, t in ipairs(lst) do\n    numerators[#numerators + 1] = t[1]\n    denominators[#denominators + 1] = t[2]\n  end\n  local denominator = 1\n  for _, num in ipairs(denominators) do\n    denominator = denominator * num\n  end\n  local numerator = 0\n  for i, num in ipairs(numerators) do\n    numerator = numerator + num*denominator\/denominators[i]\n  end\n  return reduceFrac(numerator, denominator)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210214,"user_id":null,"body":"local solution = {}\n\nfunction solution.sum_fracts(lst)\n  local dividend = 0\n  local divider = 1\n  \n  for i = 1, #lst do\n    local temp = lst[i][2] * divider\n    dividend = ((temp\/lst[i][2]) * lst[i][1]) + ((temp\/divider) * dividend)\n    divider = temp\n  end\n  \n  gcd = find_gcd(dividend, divider)\n  \n  return {dividend\/gcd, divider\/gcd}\nend\n\nfunction find_gcd(a,b)\n\tif b ~= 0 then\n\t\treturn find_gcd(b, a % b)\n\telse\n\t\treturn math.abs(a)\n\tend\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210215,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a, b)\n  while b ~= 0 do\n    a, b = b, a % b\n  end\n  return math.abs(a)\nend\n\nlocal function lcm(a, b)\n  if a == 0 or b == 0 then\n    return 0\n  else\n    return (a * b) \/ gcd(a, b)\n  end\nend\n\nfunction solution.sum_fracts(lst)\n  local num = 0\n  local den = 1\n  \n  for i = 1, #lst do\n    local nextnum, nextden = lst[i][1], lst[i][2]\n    local newden = lcm(den, nextden)\n    local fa, fb = newden\/den, newden\/nextden\n    \n    --\/\/ sum the fractions\n    num = num*fa + nextnum*fb\n    den = newden\n    \n    --\/\/ reduce\n    local div = gcd(num, den)\n    num, den = num\/div, den\/div\n  end\n  \n  return {num, den}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210216,"user_id":null,"body":"local solution = {}\nfunction gcf(a, b)\n  if b == 0 then\n    return a\n  end\n  return gcf(b, a % b)\nend\nfunction solution.sum_fracts(lst)\n  res = {0, 1}\n  for _, value in ipairs(lst) do\n    den = res[2] * value[2]\n    num = res[1] * value[2] + res[2] * value[1]\n    g = gcf(num, den)\n    res = {num \/\/ g, den \/\/ g}\n  end\n  \n\n  \n  return res\n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210217,"user_id":null,"body":"--This answer is written more similarly to how I'd do this by hand. I also made a version\n--that uses the highest common factor rather than dividing by the lowest common factor repeatedly, \n--but although that was a lot cleaner to look at, it timed out the random tests, and I couldn't find \n--any way to fix that. \n\nlocal solution = {}\n\nfunction solution.sum_fracts(lst)\n  local totalFraction = lst[1]\n  \n  for i=2, #lst, 1 do\n    --Get the denominators of both fractions\n    local multNew   = lst[i][2]\n    local multTotal = totalFraction[2] --Not entirely sure why but moving the totalFraction[2] to the part it's actually used instead of storing it as a variable seems to break it\n    \n    --Get both fractions in a form where they can be easily added (make their denominators the same)\n    totalFraction = {totalFraction[1]*multNew, totalFraction[2]*multNew}\n    local newFractionNumerator = lst[i][1]*multTotal --Only getting the numerator here because we already have the denominator for both.\n    \n    --Add the new numerator to the total \n    totalFraction[1] = totalFraction[1] + newFractionNumerator\n  end\n  \n  \n  if totalFraction ~= nil then --only run the code to simplify the fraction if we've been given data, otherwise set it to what the instructions told us to.\n    isIrreducible = false\n  else\n    totalFraction = {0,1}\n  end\n   \n  \n  if totalFraction[1] < totalFraction [2] then --get the smaller of the numerator\/denominator so we have to check fewer values to find factors\n    targetComponent = 1 --Setting this here and using a variable later in the code means we don't need an if-else statement with duplicated code\n  else\n    targetComponent = 2\n  end\n  \n  while isIrreducible == false do\n    local divisor = 1 --Lowest possible divisor\n      \n    for i=2, totalFraction[targetComponent]\/\/2, 1 do --Check all of the numbers less than or equal to half of numerator\/denominator to see if they're factors of both, divide by the first one that is.\n      if totalFraction[1]%i == 0 and totalFraction[2]%i == 0 then\n        divisor = i\n        break\n      end\n    end\n      \n    if divisor == 1 then --If the above code didn't find any factors, check if the higher value is divisible by the lower, and end the loop\n      if totalFraction[3-targetComponent]%totalFraction[targetComponent] == 0 then\n        if targetComponent == 1 then \n          totalFraction = {1, totalFraction[2]\/totalFraction[1]}\n        else\n          totalFraction = {totalFraction[1]\/totalFraction[2], 1}\n        end\n      end\n      isIrreducible = true\n    else --If a common factor was found divide both numbers by it and check the new numbers for factors\n      totalFraction = {totalFraction[1]\/divisor, totalFraction[2]\/divisor}\n    end\n    \n  end\n  \n  return totalFraction\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210218,"user_id":168,"body":"local solution = {}\n\nfunction gcd(a, b)\n  while b ~= 0 do\n    a, b = b, a % b\n  end\n  return a\nend\n\nfunction solution.sum_fracts(lst)\n  local a, b = 0, 1\n  for _, x in ipairs(lst) do\n    a = a * x[2] + x[1] * b\n    b = b * x[2]\n    local d = gcd(a, b)\n    a = a \/\/ d\n    b = b \/\/ d\n  end\n  return {a, b}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210219,"user_id":null,"body":"local solution = {}\n\nfunction gcd(a, b)\n  if a > b then\n    return gcd(b, a)\n  end\n  \n  if (a == 0) then\n    return b\n  end\n  \n  return gcd(a, b - a)\nend\n\nfunction scm(a, b)\n  local _gcd = gcd(a, b)\n  \n  return a * b \/\/ _gcd\nend\n\nfunction solution.sum_fracts(lst)\n  local _scm = 1\n  \n  for _, frac in ipairs(lst) do\n    _scm = scm(_scm, frac[2])\n  end\n  \n  local denom = 0\n  for _, frac in ipairs(lst) do\n    denom = denom + _scm * frac[1] \/ frac[2]\n  end\n  \n  local _gcd = gcd(_scm, denom)\n  return {denom \/\/ _gcd, _scm \/\/ _gcd}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"551b4501ac0447318f0009cd":[{"id":210220,"user_id":28,"body":"local kata = {}\n\nfunction kata.boolean_to_string(b)\n  return tostring(b)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210221,"user_id":168,"body":"function boolean_to_string(b)\n  return b and 'true' or 'false'\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210222,"user_id":null,"body":"function boolean_to_string(b)\n  if b then\n    return \"true\"\n  end\n  return \"false\"\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210223,"user_id":null,"body":"function boolean_to_string(b)\n  -- You got this :)\n  return tostring(b)\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210224,"user_id":null,"body":"function boolean_to_string(b)\n    if b == true then\n       return \"true\"\n    else\n        return \"false\"\n    end\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210225,"user_id":null,"body":"function boolean_to_string(b)\n  if b == true then\n    b = \"true\"\n  else\n    b = \"false\"\n  end\n  return b\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210226,"user_id":null,"body":"function boolean_to_string(b)\n  return b == true and \"true\" or \"false\"\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210227,"user_id":null,"body":"function boolean_to_string(b)\n  str = tostring(b)\n  return str\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210228,"user_id":null,"body":"function boolean_to_string(b)\n  if b then\n    return \"true\"\n  else\n    return \"false\"\n  end\nend\n\nreturn boolean_to_string","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5526fc09a1bbd946250002dc":[{"id":210229,"user_id":null,"body":"local Kata = {}\n\nfunction odd(number)\n  return (number %2 ) == 1\nend\n\nfunction Kata.find_outlier(integers)\n  odds  = {}\n  evens = {}\n  \n  for i, number in pairs(integers) do\n    if odd(number) then\n      table.insert(odds, number)\n    else\n      table.insert(evens, number)\n    end\n  end\n  \n  if #odds == 1 then\n    return odds[1]\n  else\n    return evens[1]\n  end\nend\n\nreturn Kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210230,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(t)\n  local ok = t[1] % 2\n  if t[2] % 2 == t[3] % 2 then ok = t[2] % 2 end\n  for i=1,#t do \n    if  t[i] % 2 ~= ok then return t[i] end\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210231,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  for i=2,#integers-1 do\n    if integers[i]%2~=integers[i+1]%2 then \n      if integers[i]%2==integers[1]%2 then \n        return integers[i+1]\n      else \n        return inergers[i]\n      end \n    end \n  end \n  \n  return integers[1];\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210232,"user_id":null,"body":"find_outlier = {}\nfunction find_outlier.find(ints)\n  if (ints[1] + ints[2]) % 2 == 0 then\n    -- [1] & [2] same\n    -- we want what [1] & [2] aren't\n    local want = (ints[1]+1)%2\n    for i, n in ipairs(ints) do\n      if n % 2 == want then\n        return n\n      end\n    end\n  elseif (ints[2] + ints[3]) % 2 == 0 then\n    -- [1] & [2] different, [2] & [3] same\n    return ints[1]\n  else\n    -- [1] & [2] different, [2] & [3] different\n    return ints[2]\n  end\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210233,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  local n1, n2 = {}, {}\n  for i,v in pairs(integers) do\n       if v % 2 == 0 then\n           table.insert(n1, v)\n       else\n           table.insert(n2,v )\n       end\n  end\n  \n  return #n1 == 1 and n1[1] or #n2 == 1 and n2[1]\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210234,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  local odd = 0;\n  local even = 0;\n  local last_odd = 0;\n  local last_even = 0;\n\n  \n  for _, i in ipairs(integers) do\n    if i % 2 == 0 then\n      even = even + 1\n      last_even = i;\n    else\n      odd = odd + 1\n      last_odd = i;\n    end\n    \n    if even > 1 and odd == 1 then\n      return last_odd\n    elseif odd > 1 and even == 1 then\n      return last_even\n    end\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210235,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  local sum = integers[1]%2 + integers[2]%2 + integers[3]%2\n  local parity = sum > 1 and 1 or 0\n  for i = 1, #integers do\n    if integers[i]%2 ~= parity then\n      return integers[i]\n    end\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210236,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers, start)\n  start = start or 1\n  if start == #integers then\n    return integers[start]\n  elseif integers[start] % 2 ~= integers[start+1] % 2 then\n    norm = start == 1 and start + 2 or start - 1\n    out = integers[start] % 2 ~= integers[norm] % 2 and start or start + 1\n    return integers[out]\n  end\n  return find_outlier.find(integers, start + 2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210237,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  \n  local evenNumbers = {}\n  local oddNumbers = {}\n  \n  for i,v in ipairs(integers) do\n    if v % 2 == 0 then\n      table.insert(evenNumbers, v)\n    else\n      table.insert(oddNumbers, v)\n    end\n  end\n  if #evenNumbers == 1 then\n    return(evenNumbers[1])\n  else\n    return(oddNumbers[1])\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210238,"user_id":null,"body":"find_outlier = {};\nfunction find_outlier.find(integers)\n  local firstFlag = find_outlier.isOdd(integers[1])\n  local secondFlag = find_outlier.isOdd(integers[2])\n  local finalFlag = nil\n  if firstFlag == secondFlag then\n    finalFlag = firstFlag\n  else\n    local thirdFlag = find_outlier.isOdd(integers[3])\n    return firstFlag == thridFlag and integers[2] or integers[1]\n  end\n  \n  \n  for i = 3, #integers do\n    if find_outlier.isOdd(integers[i]) ~= finalFlag then\n      return integers[i]\n    end\n  end\n  return 0;\n  \nend\n\nfunction find_outlier.isOdd(integ)\n  return integ%2==0\nend\n\nreturn FindOutLier","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5536a85b6ed4ee5a78000035":[{"id":210239,"user_id":492,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, d)\n    local t = {}\n    for i, v in ipairs(arrFriends) do\n        t[i] = d[ftwns[v]]\n    end\n    local s = 0.0\n    for i = 1, #t - 1 do\n        s = s + math.sqrt(t[i + 1] * t[i + 1] - t[i] * t[i])\n    end\n    return math.floor(s + t[1] + t[#t])\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210240,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour_assuming_x0_to_xn_are_all_provided(arrFriends, ftwns, dist)\n  --[[\n    I thought all town distances were provided, and that I had to calculate the\n    town positions by calculating the partial sum of the vectors each rotated 90\u00b0\n  ]]\n  local towns_to_visit = {}\n  for _, friend in ipairs(arrFriends) do\n    if ftwns[friend] then table.insert(towns_to_visit, ftwns[friend]) end\n  end\n\n  local basename = select(2, next(towns_to_visit)):match '^(.-)%d+$'\n  local angle = 0\n  local oldname = basename..'1'\n  local pos = {[oldname] = {x=dist[oldname], y=0}}\n  local i, name = 2, basename..'2'\n  while dist[name] do\n    local oldpos = pos[oldname]\n    local angle = math.atan2(oldpos.y, oldpos.x) + math.pi\/2\n    local pd = math.sqrt(dist[name]^2-dist[oldname]^2)\n    pos[name] = {\n      x = oldpos.x + pd * math.cos(angle),\n      y = oldpos.y + pd * math.sin(angle),\n    }\n    i = i + 1\n    name, oldname = basename..i, name\n  end\n\n  local sum = 0\n  local oldpos = {x=0, y=0}\n  for _, townname in ipairs(towns_to_visit) do\n    local pos = pos[townname]\n    sum = sum + math.sqrt((pos.x - oldpos.x)^2 + (pos.y - oldpos.y)^2)\n    oldpos = pos\n  end\n  -- add the last segment (back home):\n  sum = sum + math.sqrt(oldpos.x^2 + oldpos.y^2)\n  return math.floor(sum)\nend\n\nfunction solution.tour(arrFriends, ftwns, dist)\n  local towns_to_visit = {}\n  for _, friend in ipairs(arrFriends) do\n    if ftwns[friend] then table.insert(towns_to_visit, ftwns[friend]) end\n  end\n\n  --local basename = select(2, next(towns_to_visit)):match '^(.-)%d+$'\n  local oldname\n  local sum = 0\n  for _, townname in ipairs(towns_to_visit) do\n    if not oldname then\n      sum = sum + dist[townname]\n    else\n      sum = sum + math.sqrt(math.abs(dist[townname]^2 - dist[oldname]^2))\n    end\n    oldname = townname\n  end\n  sum = sum + dist[oldname]\n  return math.floor(sum)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210241,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(f, t, d)\n\tlocal sum = 0\n\tlocal last\n\tfor i = 1, #f do\n\t\tlocal n = d[t[f[i]]]\n\t\tif n then\n\t\t\tif last then\n\t\t\t\tsum = sum + math.sqrt(n^2-last^2)\n\t\t\telse\n\t\t\t\tsum = n\n\t\t\tend\n\t\t\tlast = n\n\t\tend\n\tend\n\treturn math.floor(sum+last)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210242,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, dist)\n  dista=function(a,b)\n    return math.sin(math.acos(a\/b))*b\n  end\n  \n  sum=0\n  flag=true\n  for i=1,#arrFriends-1 do\n    inx=ftwns[arrFriends[i]]\n    ind=ftwns[arrFriends[i+1]]\n    if(inx~=nil and ind~=nil)then\n      if(flag)then\n        flag=false\n        f=dist[inx]\n      end\n      sum=sum+dista(dist[inx],dist[ind])\n      l=dist[ind]\n    end\n  end\n  sum=sum+f+l\n      \n  sum=math.floor(sum)\n  return sum\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210243,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, dist)\n  local v = {}\n  for _,f in ipairs(arrFriends) do\n    local t = ftwns[f]\n    if t~=nil then table.insert(v,dist[t]) end\n  end\n\n  local dist = v[1]+v[#v]\n  for i=1,#v-1 do\n    dist = dist + math.sqrt(v[i+1]^2 - v[i]^2)\n  end    \n  return math.floor(dist)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210244,"user_id":168,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, dist)\n  local res, prev = 0, 0\n  for _, f in ipairs(arrFriends) do\n    for f1, t in pairs(ftwns) do\n      if f == f1 then\n        local d = dist[t]\n        res, prev = res + (d ^ 2 - prev ^ 2) ^ 0.5, d\n        break\n      end\n    end\n  end\n  return math.floor(res + prev)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210245,"user_id":198,"body":"local solution = {}\n\nfunction solution.tour(arrf, ftwns, dist)\n  local sum = 0\n  local a, b, c = 0,0,0\n  --Distances between towns of friends\n  for _, v in ipairs(arrf) do\n    if ftwns[v] then\n      if a == 0 then\n        a = dist[ftwns[v]]\n      elseif c == 0 then\n        c = dist[ftwns[v]]\n        b = math.sqrt(c^2 - a^2)\n        sum = sum + b\n        a = c\n        c = 0\n      end\n    end\n  end\n  --Distance between first friend`s town and grandma`s town\n  sum = sum + dist[ftwns[arrf[1]]] \n  --Distance between last friend`s town and grandma`s town\n  for i = #arrf, 1, -1 do\n    if dist[ftwns[arrf[i]]] then\n      sum = sum + dist[ftwns[arrf[i]]] \n      break\n    end\n  end\n  \n  return math.floor(sum)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210246,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, dist)\n  local miles = 0\n  \n  for i, friend in ipairs(arrFriends) do\n      if i == 1 then\n        miles = miles + dist[ftwns[friend]]\n      else\n        if dist[ftwns[friend]] then\n          local c = math.max(dist[ftwns[friend]], dist[ftwns[arrFriends[i - 1]]])\n          local b = math.min(dist[ftwns[friend]], dist[ftwns[arrFriends[i - 1]]])\n          miles = miles + math.sqrt(c^2 - b^2)\n        end\n      end\n    \n      if i == #arrFriends then\n        miles = miles + (dist[ftwns[friend]] or dist[ftwns[arrFriends[i - 1]]])\n      end\n  end\n  \n  return math.floor(miles)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210247,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(f, t, d)\n  \n  local dist = 0\n  local lasttown\n  for _, friend in ipairs(f) do \n    if not t[friend] then goto continue end\n    local town = t[friend]\n    if not lasttown then dist = dist + d[town]\n    else \n      local dprev = d[lasttown]\n      local dcur = d[town]\n      dist = dist + math.sqrt(dcur^2 - dprev^2)\n    end\n    lasttown = town\n    ::continue::\n  end\n  \n  dist = dist + d[lasttown]\n  \n  return math.floor(dist)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210248,"user_id":null,"body":"local solution = {}\n\nfunction solution.tour(arrFriends, ftwns, dist)\n    -- take the smaller table length out of arrFriends and ftwns (for the 'for' loop)\n    n = (math.min(#arrFriends, solution.tablelength(ftwns)))\n    -- start with the first line X0..X1\n    discalc = dist[ftwns[arrFriends[1]]]\n    for i=2, n do -- (start with the second)\n        -- then add all \"b\"s from pythagorean theorem\n        discalc = discalc + math.sqrt(dist[ftwns[arrFriends[i]]]^2 - dist[ftwns[arrFriends[i-1]]]^2)\n    end\n    -- finally add the last line Xn..X0\n    discalc = discalc + dist[ftwns[arrFriends[n]]] \n  return math.floor(discalc)\nend\n\nfunction solution.tablelength(T) -- helper to get the table length of ftwns\n  local count = 0\n  for _ in pairs(T) do count = count + 1 end\n  return count\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5545f109004975ea66000086":[{"id":210249,"user_id":645,"body":"local kata = {}\n\nfunction kata.is_divisible(n, x, y)\n  return n % x == 0 and n % y == 0\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210250,"user_id":null,"body":"return function(n, x, y)\n  --[[Once upon a time there was a lovely princess. But she had an enchantment upon her of a fearful sort, which could only be broken by Love's first kiss. She was locked away in a castle guarded by a terrible fire breathing dragon. Many brave knights had attempted to free her from this dreadful prison, but none prevailed. She waited in the dragon's keep in the highest room of the tallest tower for her true love and true love's first kiss. Like that's ever going to happen. What a loony. Shrek Beware Stay out I think he's in here. All right. Lets get it! Hold on. Do you know what that thing can do to you? Yeah. He'll groan into your bones for his brains. Well actually that would be a giant. Now Ogres, huh, they are much worse. They'll make a soup from your freshly peeled skin. They'll chew your livers, squeeze the jelly from your eyes. Actually, it's quite good on toast. Back, back beast, back! I warned you! Right. This is the part, where you run away. Yeah! And stay out. Wanted. Fairytale creatures. Right, this one is full. Take it away. Give me that. Your fine days are over. -25 pieces of silver for the witch. Next. -Come on. Sit down there! And be quiet! This cage is so small. You wouldn't turn me in. I'll never be stubborn again. I can change. Please, give me another chance. Oh, shut up! Next. What do we got? This little wooden puppet. I'm not a puppet, I'm a real boy. Five shillings for the possessed toy. Take it away. No! Please, don't let them do it! Next. What do you got? Well, I've got a talking donkey! Right. Well that's good for ten schillings, if you can prove it. Oh, go ahead fella. Well? He's just a li..., just a little nervous. He's really quite a chatterbox. You boneheaded donkey! That's it. I have heard enough. Guards! No, no, he talks, he does! I can talk. I love to talk. I've talked to... Get her out of my sight! -No, no, I swear! Hey, I can fly. -He can fly! -He can fly! He can talk! -That's right, fool! Now I'm a flying, talking donkey! You might have seen house fly, maybe even a superfly. But I bet you ain't never seen a donkey fly! Seize him! Get him! This way! Hurry! You there. Ogre. -I. By the order of lord Farquaad. I am authorized to place you both under arrest. And transport you to designated resettlement facility. Oh really? You and what army? Can I say something to you? Listen, you were really, really something, back there. Incredible. Are you talking to... ...me? Yes, I was talking to you. Can I just tell you that you were really great back there with those guards. They thought that was all over there. And then you showed up and BAM. There was tripping on over themselves like babes in the woods. That really made me feel good to see that. Oh, that's great. Really. Man, it's good to be free. Now, why don't you go celebrate your freedom with your own friends? But I... I don't have any friends. And I'm not going out there by myself. Hey wait a minute. I have a great idea... I'll stick with you. You and me in green fighting machine. Together we'll scare the spin if anybody crosses us. Oh, a, that was really scary. Maybe you don't mine me saying. If that don't work, your breath will certainly do the job done, 'cause... you definitively need some tic-tac or something, 'cause your breath stinks! Man you've ??? my note! Just like the time... ...and then I ate some rotten berries. Man I had some strong gases leaking out of my but that day. Why are you following me? I'll tell you why. 'Cause I'm all alone, there is no one here, beside me. My problems have all gone. There's no one to derive me. But you got to have free ... -Stop singing! Well, it's no wonder, you don't have any friends. Wow! Only a true friend would be that truly honest. Listen! Little donkey. Take a look at me! What am I? A... ...really tall? No! I'm an Ogre. You know, grab your torch and pitchforks. Doesn't that bother you? Nope. Really? -Really really. Oh? Man, I like you. What's your name? A..., Shrek. Shrek?! But do you know, what I like about you, Shrek? You've got that kind of: \"I don't care what nobody thinks of me\" thing. I like that, I respect that, Shrek. You're all right. Uh, look at that. Who would wanna live in a place like that? That would be my home. Oh, it is lovely. Just beautiful. You know you're quite a decorator. It's amazing what you did with such a modest budget. I like that boulder. That is a nice boulder. I guess, you don't entertain much, do you? I like my privacy. You know I do to. That's another thing, we have in common. Like I hate it when you got somebody in your face. You try to give them a hint and they won't leave. And then there's that big occurred silence, you know? Can I stay with you? -What? Can I stay with you, please. Of course! -Really? No. -Please! I don't want to go back there. You don't how is like to be concerned like a freak. Well..., maybe you do. But that's why we have to stick together! You got to let me stay! Please! Please! OK, OK. -But one night only. -Huh, thank you! A, what are you do... No! This is going to be fun. We can stay up late, swap the manly stories. And in the morning... I'm making waffles. Where do I sleep? Outside! Oh, a, I guess that's cool. You know, I don't know you and you don't know me... ... so I guess, outside is best for me. Here I go. Good night. I do like that half door. I'm a donkey all alone outside. Sit by myself outside, I guess. I'm all alone, there's no one here beside me. -I thought, I told you to stay outside. -I am outside. Well James. This is far from the farm, but what choice do we have? It's not... What a lovely bed. -Got you! I found some cheese. Awful stuff. -Is that you Gordon? -How did you know? Enough! What are you doing in my house? Oh, no, no, no... Death prods off the table! Where would we supposed to put her. The bed's taken. What? I live in a swamp. I've put up signs. I'm a terrifying Ogre! What do I have to do, to get a little privacy? Oh, no! No, no! What are you doing in my swamp? All right, get out of here. All of you. Move it! Come on, let's go. And hurry up, hurry up. No, no, not there. Not there! Hey don't look at me. I didn't invite them. Oh gosh, no one invited us. -What? We were forced to come here. -By who? Lord Farquaad. He ??? All right. Who knows where this Farquaad guy is? Oh I do. I know where he is. Does anyone else know where to find him? -Anyone at all? -Me. -Anyone? Oh pick me, I know! Me, me. Ok, fine. Attention all fairy tale things! Do not get comfortable. Your welcome is officially warned up. In fact. I'm gonna see this guy Farquaad right now and get all off my land and back where you came from. You. You're coming with me. All right. That's what I like to hear, man. Shrek and Donkey, two stubborn friends off on a world and big city adventure. I love it. I'm on road again. Sing with me Shrek! I'm on road again... What did I say about singing? -Can I whistle? -No. -Well, can I hummer? -All right. That's enough. He's ready to talk. Run, run, run as fast as you can, you can't catch me. I'm the gingerbread man. You monster. I'm not a monster here. You are. You and the rest of that fairytale trash, poisoning my perfect world. -Now tell me! Where are the others? -Eat me. I've tried to be fair to you, creatures. Now my patience has reached its end! -Tell me! Or I'll... -No, no, not the buttons. Not gumdrop buttons. All right! Who's hiding them? Ok, I'll tell you. -Do you know the muffin-man? -The muffin-man? -The muffin-man. -Yes, I know the muffin-man. Who lives on Proully lane? -Well, she's married to the muffin-man. -The muffin-man! -The muffin-man! -She's married to the muffin-man. My lord! We found it. Well then, what are you waiting for? Bring it in. Magic mirror. Don't tell him anything! Evening. Mirror, mirror on the wall. Is this not the most perfect kingdom of them all? Well, technically, you're not a king. A..., felonious. -You were saying. -What I mean is a... ...you're not a king, yet. But you can become one. All you have to do, is marry a princess. Go on. So, just sit back and relax my lord, because it's time for you to meet today's eligible bachelorettes. And here they are. Bachelorette number one is a mentally abused shading from a kingdom far, far away. She likes sushi and hottubbing anytime. Her hobbies include cooking and cleaning for two evil sisters. Please welcome... Cinderella. Bachelorette number two is a kemp wearing girl from a land of fantasy. Although she lives with seven other man, she is not easy. Just kiss hers dead frozen lips and find out what a live wife she is. Come on. Give it up for... Show-white. And last but certainly not least. Bachelorette number three is a fire-breathing ????, dragon guarded castle, surrounded by a hot boiling lava. But don't let that cool you off. She's a loaded pistol who likes Pina Coladas and getting cut in the rain. Yours for the rescuing, Princess Fiona. So will it be, bachelorette number one? Bachelorette number two? Or bachelorette number three? -Two... -Three! -Two! One. No, no, no. Three. Pick number three my lord. Ok, ok. Number three. Lord Farquaad. You've chosen... princess Fiona. She's nice. Fiona. She's perfect. All I have to do is just find someone... But I probably should mention little thing that happens at night... -I'll do it! -Yes, but after sunset... Silence! I will make this princess Fiona my queen. And Duloc will finally have the perfect king! Captain! Assemble your finest man. We're going to have a tournament! That's it, that's, right there, that's Duloc. I've told you I'll find it. So. That must be lord Farquaad's castle. Aha, that's the place. Do you think maybe he's compensating for something. Hey, hey wait up Shrek! -Hey, you! -No, no! Wait a second. Look, I'm not gonna eat you. I just... It's quiet. Too quiet. Where is everybody? Hey look at this. Wow! -Let's do that again. -No. no. All right. You're going the right way for smack bottom. Sorry about that. That champion should have the honor, no, no... ...the privilege to go forth and rescue the lovely princess Fiona from the fireing keep of the dragon. If for any reason the winner is unsuccessful, the first runner up will take his place. And so on, and so forth. Some of you may die, but it's a sacrifice I'm willing to make. Applause. Let the tournament begin. What is that? Ugh, it's hideous. Oh, that's not very nice. It's just a donkey. Indeed. Knights! New plan. The one, who kills the Ogre, will be named champion. How about him. Oh, hey. Now, come on. Can't we just settle this over a pint? No? All right then. Come on. Hey Shrek! Let me, let me! The chair! Give him the chair! Thank you. Thank you, very much. I'm here until Thursday. Try the wheel! Shall I give the order sir? No. I have a better idea. People of Duloc. I give you our champion! What? Congratulation, Ogre. You've won the honor of embarking on a great and noble quest. Quest? I'm already on a quest. A quest to get my swamp back! -Your swamp? -Yeah, my swamp! Where you dumped those fairytale creatures. Indeed. All right Ogre, I'll make you a deal. Go on this quest for me and I'll give you your swamp back. Exactly the way it was? Down to the last slime covered toast tool. -And the squatters? -As good as gone. What kind of quest? Ok, let me get this straight! We gonna go find the dragon and rescue a princess just so Farquaad will give you back the swamp, which you only don't have, 'cause he filled it with full of freaks on the first place. -Is that about right? -You know what? Maybe there is a good reason, donkeys shouldn't talk. I don't get it Shrek. Why didn't you just pull some old Ogre stuff on them? You know, ??? . Grab his bones to make you brave. You know the whole Ogre trick. Oh, you know what. Maybe I could have decapitated entire village and put their heads on plate. Got a knife, cut open their spleens and drink their fluids. Does that sound good to you? A, no, not really, no. For your information, there is a lot more to Ogres than people think. -Example. -Example? OK, A-a-m, Ogres are like onions. -They stink? -Yes, no. -O, they make you cry. -No. Oh, you leave them out on the sun and they get all brown and start ??? little wild hairs? No! Layers! Onions have layers. Ogres have layers. Onions have layers. You get it? We both have layers. O, you both have layers. You know not everybody likes onions. Cake! Everybody loves cakes. Cakes have layers. I don't care what everyone likes. Ogres are not like cakes. You know what else everyone likes? Paffe. Have you ever met a person and you say: \"Hey, let's get some paffe\" and they say I don't like paffe. Paffe is delicious. No! You tensed, irritating, miniature peace of barden. Ogres are like onions. End of story. Bye, bye. See you lather. Paffe is maybe the most delicious thing on the whole damn planet. You know I think I've preferred your humming. Do you have a tissue or something, 'cause I'm making a mess. Just the word paffe has made me start slimying Why, Shrek, did you do that? Man you got to warn somebody before you just crack one off. My mouth was opened and everything. Believe me donkey, if it was me, you'd be dead. It's brimstone. We must be getting close. Yeah, right, brimstone. Don't be talking ??? brimstone. I know what I smell and ??? no brimstone. And they don't come of stone neither. Sure it's big enough, but look at the location. Oh, Shrek, remember when you said that Ogres have layers? Oh, yeah. Well, I have a confession to make. Donkeys don't have layers. We wear ??? sleeves. Wait a second. Donkeys don't have sleeves. -You know what I mean. -Oh, you can't tell me you're afraid of highs. No, I'm just a little uncomfortable of being on a rickety bridge over boiling lake of lava! Come on donkey, I'm right here beside you. Ok? For emotional support. We'll just hackle this thing together one little baby step after time. -Really? -Really really. Ok. That makes me feel so much better. Just keep moving and don't look down. Don't look down, don't look down. Shrek! I'm looking down! I can't do this. Just let me off right now, please. -But you're already half way. -Yeah, but I know that half is safe. Ok, fine. I don't have time for this. You go back. Shrek, no, wait. Don't do that! Oh, I'm sorry. Do what? -Oh. This? -Yes, that! Yes, yes. Do it. OK. -No, Shrek! -I'm doing it. I'm gonna die. I'm gonna die. Shrek, I'm gonna die. That will do Donkey, that will do. Cool. So where is this fire breathing pain in the neck anyway? Inside. Waiting for us to rescue her. I was talking about the dragon Shrek. -Are you afraid? -No, but shhhhh. Oh, good. Me neither. Because there's nothing wrong with being afraid. Here's a..., something responsible of the situation. Not to mention dangerous situation. And there's dragon that breathes fire. I'm sure he's meaner than a cow or anything, but they're scare. You know what I mean. I'm sure he's heavier than a cow... Donkey. Two things. Ok? Shut, up. Now go over there and see if you can find any stairs. Stairs? I thought we were looking for the princess. The princess will be up the stairs in the highest room in the tallest tower. What makes you think she'll be there? I read it in a book once. Cool. You handle the dragon, I'll handle the stairs. Oh, I'll find those stairs. I'll ???. That's right. Those stairs won't know which way they go. The drafting stairs, ??? Don't mess with me. I'm the stair master. I'm master of the stairs. I wish I had a stair right here right here now, I'd step all over it. Well, at least we know where the princess is. -But where is the... -Dragon! Donkey, look out! Got you. Oh, what large teeth you have. I mean, white sparkling teeth. You probably hear this all the time from your food, but you must bleach yourself, because that is one dashing smile you got there. And do I detect the hint of minty freshness? And you know what else? You're a girl dragon. Oh, sure. I mean 'course you're a girl dragon, 'cause you're just ricking the feminine beauty out. What's the matter with you? Do you have something in your eye? Man, I'd really love to stay, but you know I'm a asthmatic and I don't know if we would worked out. You'd be blowing smoke and stuff. Shrek! No, Shrek! Shrek! -Wake up! -What? Are you princess Fiona? I am. Awaiting a knight so bold as to rescue me. Oh, that's nice. Now let's go. But wait, sir knight. This be our first meeting. Should not be wonderful, romantic moment? Yeah. Sorry lady there's no time. Hey, what are you doing? You know, you should sweep me out of my feet. Out through the window and down the rope by to your valued steed. You've had a lot of time to plan this, haven't you? Uh-um. But we have to sing through this moment. You can residing of a poem to me. A ballad, a sonnet, a libretti. Or something. I don't think so. Well, can I at least know a name of my champion? Shrek. So, Shrek. I pray that you take this favor as a token of my gratitude. Thanks. -You didn't slay the dragon? -It's not my job to do this. Now, come on! But this isn't right. ??? That's what all the other knights did. Yeah. Right before they burst in the flame. That's not the point. Wait. Where are you going? Exit is over there. Well, I have to save my ass. What kind of knight are you? One of a kind. ...rush into a physical relationship. I'm not that emotionally ready for commitment of a this magnitude. That was the word I was looking for. Magnitude. Hey, that is unwanted physical contact. Hey, what are you doing? Ok, ok, let's just back up a little and take this one step at the time. I mean, we really should get to know each other first, you know what am I saying. As friends, maybe even as ??? Hey don't do that. That's my tail. That's ma personal tail. And you're going to tear it off.... Oh, no. No! -It talks?! -Yeah. It's getting to shut up, that's a trick. Ok, you two. Head for the exit. I'll take care of the dragon. Ruuuuun! You did it. You rescued me. Amizing, you're wonderful. You're a ... ...a little unorthodox I admit, but by deed is great and by heart is pure. I'm entirely in your debt. And where would a brave knight be without his noble steed. I hope you heard that. She called me a noble steed. She thinks I'm a steed. The battle is won. You may remove your helmet good sir knight. -Aah, no. -Why not? I have helmet hair. Please. I wouldst look upon the face of my rescuer. Oh, no, you wouldn't, dust. But, how will you kiss me? What? That wasn't in a job description. -Maybe it's a perk? -No. It's destiny. You must know how it goes. A princess locked in a tower and besieged by a dragon is rescued by a brave knight. And then they share true love's first kiss. With Shrek? You think, wait... ...you think Shrek is your true love? Well, yes. You think that Shrek is your true love. What is so funny? Let's just say, I'm not your type, ok? Of course you are. You're my rescuer. Now, now remove your helmet. Look. I really don't think this is a good idea. -Just take off the helmet. -I'm not going to. -Take it off! -No! -Now! -Ok, easy. As you command your highness. You're an Ogre. Oh, you were expecting Prince Charming. Well, yes, actually. Oh no. This is all wrong. You're not supposed to be an Ogre. Princess, I was sent to rescue you by lord Farquaad, ok? He's the one, who wants to marry you. Well, then why didn't he come to rescue me? Good question. You should ask him that, when we get there. But I have to be rescued by my true love. Not by some Ogre and his pet. Well so much for noble steed. Look princess. You're not making my job any easier. Well I'm sorry, but your job is not my problem. You can tell lord Farquaad that if he wants to rescue me properly, I'll be waiting for him right here. Hey, I'm no ones messenger boy, all right? -I'm a delivery boy. -You wouldn't dare. -You coming donkey? -Put me down! Yeah, I'm right behind you. Put me down or you will suffer the consequences. This is not dignified. Put me down. Ok, here's another question. Let's say that a woman 'digged' you, but you don't really like her, that way. Now, how you let her down real easy, so her feelings aren't hurt? But you don't get burned to a crisp neither. How do you do this? Just tell her, she's not your true love. Everyone knows it what happens when you find... Hey! The sooner we get to Duloc, the better. Oh, yeah. You gonna love it there princess. It's beautiful. And what of my groom to be, lord Farquaad. What's he like? Well, let me put it this way, princess. Men of Farquaad's stature are in short supply. Oh no, Shrek. There are those who think little of him. Stop it. Stop it, both of you. You know, you're just jealous that you can never measure up to a great ruler like lord Farquaad. Yeah. Well maybe you're right princess. But I'd like you do that measuring when you see him tomorrow Tomorrow? It will take that long? -Shouldn't we stop to make camp? -No. That would take longer. We can keep going. But there are robbers in the woods. Whoa, time out Shrek. Camp is definitely something that sounds good. Hey. Come on. I'm scarier than anything we're gonna see in this forest. I need to find somewhere to camp, now! Hey, over here. Shrek, we can do better than that. Now, I don't think this is decent for princess. No, no, it's perfect. It just needs a few homey touches. Homey touches? Like what? A door. Well, gentleman I'll be d..., good night. Do you want me to come in and read you a bedtime story, 'cause I will... I said good night! Shrek! What are you doing? I just..., you know... Oh, come on, I was just kidding. And that one, that's Throwback. The only Ogre to ever spit over three wheat fields. Right. Yeah. Hey, can you tell my future form these stars? Well, the stars don't tell the future, Donkey. They tell stories. Look. There's Blodna, the \"Flatulent\" You can guess what he is famous for. All right. Now I know you're making this up. No. Look. There he is and there's the group of hunters running away from his stag. Man, there ain't nothing, but a bunch of little dots. You know donkey, sometimes things are more than they appear. Forget it. Hey Shrek. What are you gonna do when we get our swamp back, anyway? -Our swamp? -You know. When we're through rescuing the princess and all that stuff. We? Donkey, there is no we. There's no our. There's just me and my swamp. And the first thing I'm gonna do, is build a ten foot wall around my land. You cut me deep Shrek, you cut me real deep just now. You know, what I think? I think this whole wall thing is just a way to keep somebody out. No, do you think? -Are you hiding something? -Never mind Donkey. Oh, this is another one of those onion things, isn't it? No. This is one of those drop it and leave it alone things. -Why don't you want to talk about it? -Why do you want to talk about it? -Oh, Why you block? -I'm not blocking. -Oh yes you are. -Donkey, I'm warning you. -Who are you trying to keep out? Just tell me that Shrek. Who? Everyone, ok? -Oh, now we're getting somewhere. -Oh, for 'the love of pit'. Hey, what's your problem Shrek? What do you got against the whole world anyway? Look. I'm not the one with the problem, ok? It's the world that seems to have a problem with me. People take one look at me and go: AAA... Help! Run! A big stupid ugly Ogre. They judge me, before they even know me. That's why I'm better off alone. You know what? When we met, I didn't think you're just a big stupid, ugly Ogre. Yeah, I know. So, a... Are there any donkeys up there? Well, there's a Cabby. The small and annoying. Ok, ok. I see him, now. Big shining one, right there. That one, over there? That's the moon. Again. Show me again. Mirror, mirror, show her to me. Show me the princess. Perfect. Yeah. You know I like like that. Oh come on baby... -Donkey. Wake up. -What? -Wake up. Morning. How do you like your eggs? -Good morning princess. -What's all this about? You know, we kind of got of to a bad start yesterday and I wanted to make it up to you. I mean, after all, you did rescue me. Thanks. Well, eat up. We've got a big day ahead of us. -Shrek! -What? It's a compliment. Better out than in I always say. But that's no way to behave in front of a princess. -Thanks. -She's as nasty as you are. You know. You're not exactly what I've expected. Well, maybe you shouldn't judge people before you get to know them. Princess! What are you doing? ???mon shery, for I am your saviour. And I am rescuing you from this green...beast. Hey! That's my princess. Go find your own. Please, monster. Can't you see I'm a little busy here? Look, pal. I don't know who you think you are. Oh, of course. How rude that was. Please, let me introduce myself. Oh marry men! Man, that was annoying. Oh, you little... Shall we? ???all the forin??? Whoa, hold on, now. Where did that come from? -What? -That. Back there. That was amazing. Where did you learn that? Well, when one lives alone one has to learn these things in case there's a... There is an arrow in your butt. What? Oh, would you look at that. Oh, no... This is all my fault. I'm so sorry. -What's wrong? -Shrek's hurt. -Shrek's hurt? Shrek's hurt! -Oh, no. Shrek's going to die. -Donkey, I'm ok. You can't do this to me Shrek. I'm too young for you to die. Keep your legs elevated. Turn your head ???. -Does anyone know how to handle... -Donkey! Calm down. If you want to help Shrek, run into woods and find me a blue flower with red thorns. Blue flower, red thorns. Ok, I'm on it. Blue flower, red thorns. Blue flower, red thorns. Don't die Shrek. And if you see a long tunnel, stay away from the light! -Donkey! -Oh, yeah. Right. Blue flower, red thorns. Blue flower, red thorns. -What are the flowers for? -For getting rid of the Donkey. Now, you hold still and I'll yank this thing out. -Hey! Easy with the yanking. -I'm sorry, but it has to come out. No, no. It's tender. What you're doing here is the opposite... -Don't move. -Ok, look. Time out. -Would you... Ok. What do you propose we do? Blue flower, red thorns. Blue flower, red thorns. Blue flower, red thorns. This would be so much easier if I wasn't colorblind. Blue flower, red thorns. Blue flower, red thorns. Hold on, Shrek. I'm coming! Not good. Ok, ok, I can lose it. It's just about it. Nothing happened. We were just a... Look if you want to be alone, all you had to do is ask, ok? Oh, come on. That's the last thing on my mind. The princess here was just... Au! Hey, what's that? Is that... There it is, princess. -Your future awaits you. -That's Duloc? Yeah. I know. You'll shrink things lord Farquaad is compensating for something, which I think needs, he has a I guess we better move on. Sure, but Shrek... -I'm worried about Donkey. -What? I mean. Look at him. He doesn't look so good. -What are you talking about? I'm fine. -Well, that's what they always say. And the next thing you know you're on your back. -Dead! -You know she's right. You look awful. -Do you want to sit down? -You know, I'll make you up some tea. Well, I won't say nothing, but I've got this twinge in my neck. And if I turn my neck like this, look. Au, see? -He's hungry. I'll find us some dinner. -I'll get the firewood. Hey, where are you going? Oh man, I can't feel my thumbs. I don't have any thumbs!!! I think I need a hug. This is good. This is really good. -What is this? -Wheat rat. -Rotisserie style. -No kidding. -Oh, this is delicious. -Well, they also great in stews. Now, I don't mean to brag, but I make a mean wheat rat stew. I guess I'll be dining a little different late tomorrow night. Maybe you can come visit me in the swamp sometime. I'll cook all kinds of stuff for you. Swamp toast, soup fish, eye tartar. You name it. I'd like that. -Ah... , princess? -Yes, Shrek? I'm a.... I was wondering. Are you... a... Are you gonna eat that? Man, isn't this romantic. Just look at that sunset. Sunset?! Oh, no. It's late. It's very late. -What? -Wait a minute. I see what's going on here. You're afraid of the dark. Aren't you? Yes, yes. That's it. That's, I'm terrified. You know I'll better go inside. But don't feel bad, princess. I used to be afraid of the dark too. Until... Hey, no, wait. I'm still afraid of the dark. -Good night. -Good night. Ahh. Now I really see what's going on here. Oh, what are you talking about. Hey I don't wanna even hear. Look, I'm an animal and I got instincts. And I know that you two are digging on each other. I can feel it. Oh, you're crazy. I'm just bringing her back to Farquaad. Oh, come on, Shrek. Wake up and smell the fairemones. Just go in there and tell her how you feel. There's nothing to tell. Besides, even if I did tell her that... well you know. I'm not saying that I do, 'cause I don't. She's a princess and I'm... ...an Ogre. Yeah, an Ogre. -Hey, where are you going? -To get more firewood. Princess. Princess Fiona? Princess, where are you? Princess? It's very spooky in here and are we playing little games. -No, no. -Help! Shrek! Shrek! -No. -Shrek! -It's ok. It's ok. -What did you do with the princess? -Donkey, shhh. I'm the princess. -It's me, in this body. -Oh my god. You ate the princess. -Can you hear me? -Donkey! Listen, keep breathing. I'll get you out of there! Shrek! Shrek! Shrek! This is me. Princess? What happened to you? You're a... different. -I'm ugly, ok? -Yeah. Was it something that you ate? 'Cause I told Shrek those rats were a bad idea. -You are what you eat, I say. -No. I've been this way as long as I can remember. What do you mean? Look, I've never seen you like this before. It only happens when the sun goes down. By night one way, by day another. This shall be the norm until you find true love's first kiss. Then, take love's true form... -Oh, that's beautiful. I didn't know you wrote poetry. -It's the spell. When I was a little girl, a witch cast a spell on me. Every night I become this. This horrible ugly beast. I was placed in a tower to await the day when my true love would rescue me. That's why I have to marry lord Farquaad tomorrow, before the sun sets and he sees me, like this? All right, all right. Calm down. Look, it's not that bad. You're not that ugly. Wait, wait, I'll not lie, you are ugly. But you only look like this at night. Shrek's ugly 24\/7. But Donkey, I'm a princess. And this is not how a princess is meant to look. Princess. How about if you don't marry Farquaad? I have to. Only my true love's kiss can brake the spell. But you know, you're kind of an Ogre. And Shrek... Well you've got a lot in common. Shrek? Princess, I... How is it going first of all? Good? Good for me to. I'm ok. I saw this flower and thought of you because it's pretty. And, well, I don't really like it, but I thought you may like it, because you're pretty. But I like you anyway. A.... I'm in trouble. Ok, here we go. Who could ever love a piece so hideous and ugly? Princess and ugly don't go together. That's why I can't stay here with Shrek, but only chance to live happily ever after is to marry my true love. Don't you see, Donkey? That's just how it has to be. It's the only way to break the spell. Well, at least you've got tell Shrek the truth. No, no. You can't breathe the word. No one must ever know. What's the point of being unable to talk? You got to keep secrets. Promise you won't tell. Promise! You know, before this is over, I'm going to need whole lot of serious therapies. All right, all right. I won't tell him. But you should. Look at my eye twitching. I tell him, I tell him not. I tell him. I tell him not. I tell him! Shrek! Shrek! There's something I want ... Shrek. Are you all right? Perfect. Never been better. I... There's something I have to tell you. You don't have to tell me anything, princess. I heard enough last night. -You've heard what I said? -Every word. I thought you'd understand? Oh, I understand! Like you said, who could love a hideous, ugly beast! -I thought that wouldn't matter to you. -Yeah, well, it does. Ah, right on time. Princess. I brought you a little something. What I missed? What I missed? -Princess Fiona. -As promised. Now hand it over. Very well, Ogre. The deed to your swamp. Cleared out as agreed. Take it and go. Before I change my mind. Forgive me princess for startling you, but you startled me. For I've never seen such a radiant beauty before. -I am lord Farquaad. -Lord Farquaad? Oh, no, no... forgive me my lord for I was just saying short... farewell. Oh. That is so sweet. You don't have to raise good manners on the Ogre. -It's not like it has feelings. -No. You're right. It doesn't. Princess Fiona, beautiful fair flawless Fiona, I ask your hand in marriage. Will you be the perfect bride for the perfect groom? Lord Farquaad, I accept. Nothing would make... Excellent! I'll start the plans for tomorrow we wedd... No! I mean I... Why wait? Let's get married today. Before sunset. Oh, anxious are we? You're right. The sooner, the better. There's so much to do. There is the camera, the cake, the band, the guests... Captain! Round up some guests. Farewell Ogre. Shrek, what are you doing? You let her get away. -Yeah, so what. -Shrek. There's something about her that you don't know. -I talked to her last night. She's... -Yeah I know you talked to her last night. You're great pal, aren't you? Now, if you two are such good friend, why didn't you follow her home? -Shrek. I want to go with you. -I told you, didn't I? You're not coming home with me. I live alone. My swamp, me and nobody else! Understand? Nobody! Especially useless, pathetic, annoying, talking donkeys! -But. I thought... -Yeah. You know what? You thought wrong. Shrek. Donkey? What are you doing? I was thinking of all the people, you would recognize a wall when you see one. Well, yeah. But the wall supposed to go around my swamp. Not through it. It is around your half. See? That's your half and this is my half. Oh, your half? Yes, my half. I helped rescue the princess. I did half the work. I get half the booty. Now hand me that big old rock, the one that looks like your head -Back off! -No. You back off! -This is my swamp. -Our swamp. -Let go, Donkey! -You let go! -Stubborn jackass. -Smelly Ogre. Fine! Hey, hey, come back here. I'm not through with you, yet. -Well, I'm through with you! -Well, you know. You were always me, me, me. Well, guess what? Now it's my turn! So you just shut up and pay attention! You are mean to me, you insult me, you don't appreciate anything that I do! You're always pushing me around or pushing me away. Oh, yeah? Well, if I treated you so bad, how come you came back? Because that's what friend do. They forgive each other! Oh, yeah. You're right Donkey. I forgive you for stabbing me in the back! You're so wrapped up in layers, onion boy. You're afraid of your own feelings. -Go away. -See? There you are, doing it again. Just like you did it to Fiona. And all she ever do, was like you. Maybe even love you. Love me? She said I was ugly! A hideous creature. -I heard that you two were talking. -She wasn't talking about you. She was talking about... ...somebody else. She wasn't talking about me? Well then, who was she talking about? No way, I'm not saying anything. You won't listen to me, right? Right? -Donkey. -No! Ok, look. I'm sorry, all right? I'm sorry. I guess I am just a big stupid, ugly Ogre. Can you forgive me? -Hey, that's the friends are for, right? -Right. -Friends? -Friends. So? What did Fiona said about me? Why are you asking me for? Why don't you just go ask her. The wedding! We'll never make it in time! Never fear! For where there is a will, there is a way. And I have I way. Donkey? -I guess this is just my act of magnetism. -Oh, come here, you. All right. All right. Don't get all started. No one likes kissass. All right, hop on. Hold on tight. I hadn't have a chance to install seat belts, yet. People of Duloc. We gather here today to bear witness to reunion of our new king... Excuse me. Could you just skip ahead to \"I do's\"? Go on. Go ahead and have some fun, if we need you, I'll whistle. How about that? Shrek, wait, wait a minute. You want to do this right, don't you? -What are you talking about? -It's the line, it's the line you got to wait for. The priest is going to say: \"Speak now or forever hold your peace\". And that's where you say: \"I object\". -I don't have time for this. -Wait, wait. What are you doing? Listen to me! Look, you love this woman, don't you? -Yes. -You want to hold her! -Yes. -Please her! -Yes! Then you got to, got to try a little tender love. -The chicks love that romantic crap. -All right. Cut it out. When does this guy say the line? We got to check it out. And as so by the power of these two... What do you see? -I now pronounce you... -There they go! -...he all ready said it. -Oh, for 'the love of pit'. I object! Shrek? Oh, now what does he want? Hi, everyone. Having a good time, aren't you? I love Duloc, first of all. Very clean. -What are you doing here? -Really, it's rude enough being alive, when no one wants you. But showing up uninvited to a wedding... -Fiona! I need to talk to you. -Oh, now you wanna talk? Well it's a little late for that. So if you'll excuse me. -But you can't marry him! -And why not? Because, because he's just marrying you so he can be king. -Outrageous! Fiona, don't listen to him. -He's not your true love. -What do you know about true love? -Well, I ...I'm in... Oh, this is precious. The Ogre has fallen in love with the princess. Laugh. Shrek. Is this true? Who cares. It's preposterious. Fiona, my love, we gonna kiss away for our happily ever after. Now kiss me! By night one way, by day another. I wanted to show you before. Well. That explains a lot. Oh. It's disgusting. Guards, guards. I order you to get them out of my sight. -Now! Get them! Get them, both! -No! This marriage is minding, and that makes me king. See? See? -Shrek! -No. -Don't just stand there, you dogs. -Get out of my way. No! Shrek! -And as for you my wife. -Fiona! I'll have you locked back in that tower for the rest of your days! I will have order. I will have potential. I will have... All right, nobody move! I got a dragon here and I'm not afraid to use it. I'm a donkey on the edge! Celebrity marriages. They never last, do they? Go ahead Shrek. -Fiona? -Yes, Shrek? I love you. Really? Really, really. I love you too. A time for true love's first kiss... Fiona? Fiona? Are you all right? Yes. But I don't understand. I'm supposed to be beautiful. But you are beautiful. I was hoping this would be a happy ending. God bless us, everyone.]]\n  if n % x == 0 and n % y == 0 then\n     return true\n  end\n  return false -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210251,"user_id":null,"body":"return function(n, x, y)\n  return n % x == 0 and n % y == 0 -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210252,"user_id":null,"body":"--[[\nX is divisible by Y if and only if X modulo Y is equal to 0.\nIf X modulo Y isn't equal to 0 then there's a remainder hence X isn't divisble by Y.\n--]]\n\nreturn function(n, x, y)    -- Checks if n is divideable by both x and y.\n  if (n % x == 0) and (n % y == 0) then   -- Checks if there's no remained left after division\/ for both x and y.\n      return true   \n    else\n      return false  \n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210253,"user_id":null,"body":"return function(n, x, y)\n  return (n%x==0 and n%y==0) and true or false; -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210254,"user_id":1566,"body":"return function(n, x, y)\n  return n%x + n%y == 0\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210255,"user_id":null,"body":"return function(n, x, y)\n  local hasil\n  if n\/x == math.floor(n\/x) and n\/y == math.floor(n\/y) then\n    hasil = true\n    else\n    hasil = false\n    end\n  return hasil\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210256,"user_id":null,"body":"return function(...)\n  local t = {...}\n  for i = 2, #t do\n    if t[1] % t[i] ~= 0 then\n      return false\n    end\n  end\n  return true\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210257,"user_id":null,"body":"return function(n, x, y)\n  return n % x == 0 and n % y == 0 or false\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210258,"user_id":null,"body":"return function(n, x, y)\n  local res = false\n  if n%x == 0 and n%y == 0 then\n    res = true\n  else\n    res = false\n    end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"554a44516729e4d80b000012":[{"id":210259,"user_id":53,"body":"local solution = {}\n\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  local p0, p1, s, r, m = startPriceOld, startPriceNew, savingperMonth, percentLossByMonth, 0\n  while p0 + m * s < p1 do\n    if m % 2 == 1 then\n      r = r + 0.5\n    end\n    p0 = p0 - p0 * 0.01 * r\n    p1 = p1 - p1 * 0.01 * r\n    m = m + 1\n  end\n  return {m, math.floor(p0 + m * s - p1 + 0.5)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210260,"user_id":null,"body":"local solution = {}\n\n-- you can round `n` with: math.floor(n + 0.5)\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  local saved, months = 0, 0\n  while true do\n    local avail = startPriceOld - startPriceNew + saved\n    if avail >= 0 then return {months, math.floor(avail + 0.5)} end\n    saved = saved + savingperMonth\n    months = months + 1\n    if months % 2 == 0 then percentLossByMonth = percentLossByMonth + 0.5 end\n    startPriceOld = startPriceOld * (1 - percentLossByMonth \/ 100)\n    startPriceNew = startPriceNew * (1 - percentLossByMonth \/ 100)\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210261,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n    i, savings, loss = 0, 0, percentLossByMonth\n    oldp, newp  = startPriceOld, startPriceNew\n    while true do\n      on_hand = oldp + savings\n      if on_hand >= newp then \n          return {i, math.floor(on_hand - newp + 0.5)}\n      end\n      oldp = oldp * (100.0 - loss) * 0.01\n      newp = newp * (100.0 - loss) * 0.01\n      savings = savings + savingperMonth\n      loss = loss + ((i%2 == 0) and 0.5 or 0)\n      i = i + 1\n    end    \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210262,"user_id":492,"body":"local solution = {}\n\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n    function round(num)\n        return math.floor(num + 0.5)\n    end\n    local mth, priceOld, priceNew, available = 0, startPriceOld, startPriceNew, startPriceOld\n    while (available < priceNew) do\n        -- at the end of this month\n        mth = mth + 1\n        if mth % 2 == 0 then\n            percentLossByMonth = percentLossByMonth + 0.5\n        end\n        priceOld = priceOld * (100 - percentLossByMonth)  \/ 100\n        priceNew = priceNew * (100 - percentLossByMonth)  \/ 100\n        available = mth * savingperMonth + priceOld\n    end\n    return {mth, round(available - priceNew)}\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210263,"user_id":null,"body":"local solution = {}\n\n-- you can round `n` with: math.floor(n + 0.5)\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  print(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  \n  if startPriceOld>=startPriceNew then\n      return {0, startPriceOld-startPriceNew}\n  end\n  \n  local x=1\n  local diff=startPriceNew-startPriceOld\n  local j=math.ceil(diff\/savingperMonth+0.5)\n  local r=diff\n  local o=0\n  local p=percentLossByMonth\n  \n  for i=1,j do\n    r=r-savingperMonth\n    r=r-i*savingperMonth*p\/100-r*p\/100\n    x=x+1\n    o=i\n    if x==2 then p=p+0.5; x=0 end\n    if r<0 then\n      o=i\n      break\n    end\n  end\n  \n  return {o, math.floor(r+0.5)*-1}\nend\n\n\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210264,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.nb_months(stpo, stpn, savingperMonth, percentLossByMonth)\n  \nlocal plpm = 0\nlocal savings = 0\nlocal month_count = 1\n\n\n  \n  if stpo - stpn >= 0 then \n    month_count = 0\n    savings = stpo - stpn\n    \n  else\n    \nrepeat\n      if month_count%2 == 0 then percentLossByMonth = percentLossByMonth + 0.5 end\n      plpm = (100-percentLossByMonth)\/100\n      stpn = stpn * plpm\n      stpo = stpo * plpm\n      \n      \n\n      savings = savings + savingperMonth\n      \n      month_count = month_count + 1\n\nuntil savings+stpo-stpn >= 0\n      month_count = month_count-1\n      savings = savings+stpo-stpn\n  end\n\n\n\n  return {month_count, math.floor(savings+0.5)}\n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210265,"user_id":null,"body":"local solution = {}\n\n-- you can round `n` with: math.floor(n + 0.5)\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n   oldPrice = startPriceOld\n   newPrice = startPriceNew\n   saving = 0\n   months = 0\n   percentLossCurrent = percentLossByMonth\n   canIncreasePercent=true\n   if oldPrice+saving < newPrice then\n      repeat\n         saving = saving + savingperMonth\n         months = months + 1\n         oldPrice = oldPrice - (oldPrice * (percentLossCurrent \/ 100))\n         newPrice = newPrice - (newPrice * (percentLossCurrent \/ 100))\n         --print(\"available: \"..(oldPrice+saving)-newPrice)\n         if canIncreasePercent then\n            percentLossCurrent = percentLossCurrent + 0.5\n            canIncreasePercent = false\n      else canIncreasePercent = true end\n      until oldPrice+saving >= newPrice\n   end\n   return {months,math.floor((oldPrice+saving)-newPrice+0.5)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210266,"user_id":null,"body":"local solution = {}\n\nlocal PERCENT_INCREASE = 0.5\n\nlocal function decrease_price(price, percentage)\n    -- percentage * 0.01 == percentage \/ 100\n    local loss = price * percentage * 0.01\n    return price - loss\nend\n\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n    if startPriceOld > startPriceNew then\n        return { 0, startPriceOld - startPriceNew }\n    elseif startPriceOld == startPriceNew then\n        return { 0, 0 }\n    end\n\n    local two_months_passed = function(m)\n        return m % 2 == 0\n    end\n\n    local can_not_buy = function(will_have, saved, price)\n        return (will_have + saved) < price\n    end\n\n    local months_until_purchase = 0\n\n    while can_not_buy(startPriceOld, months_until_purchase * savingperMonth, startPriceNew) do\n        months_until_purchase = months_until_purchase + 1\n\n        if two_months_passed(months_until_purchase) then\n            percentLossByMonth = percentLossByMonth + PERCENT_INCREASE\n        end\n\n        startPriceOld = decrease_price(startPriceOld, percentLossByMonth)\n\n        startPriceNew = decrease_price(startPriceNew, percentLossByMonth)\n    end\n\n    return { months_until_purchase,\n        math.floor((startPriceOld + months_until_purchase * savingperMonth - startPriceNew) + 0.5) }\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210267,"user_id":null,"body":"local solution = {}\n\n-- you can round `n` with: math.floor(n + 0.5)\nfunction solution.nb_months(startPriceOld, startPriceNew, savingPerMonth, percentLossByMonth)\n  local monthsPassed = 0\n  local moneyLeftOver = 0\n  \n  while true do\n    local currentMoneySaved = monthsPassed * savingPerMonth\n    local currentMoneyBalance = currentMoneySaved + startPriceOld\n    local canPurchase = currentMoneyBalance >= startPriceNew\n\n    if canPurchase then\n      moneyLeftOver = currentMoneyBalance - startPriceNew\n      break\n    end\n    \n    monthsPassed = monthsPassed + 1\n    \n    local percentLossThisMonth = percentLossByMonth + (math.floor(monthsPassed\/2) * .5)\n    startPriceOld = startPriceOld * (100 - percentLossThisMonth)\/100\n    startPriceNew = startPriceNew * (100 - percentLossThisMonth)\/100\n  end\n  \n  return {monthsPassed, math.floor(moneyLeftOver + 0.5)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210268,"user_id":null,"body":"local solution = {}\n\n-- you can round `n` with: math.floor(n + 0.5)\nfunction solution.nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth)\n  local month = 0\n  local oldprice = startPriceOld\n  local newprice = startPriceNew\n  local allmoney = startPriceOld\n  local allsaving = 0\n  local percent = percentLossByMonth\n    while allmoney < newprice do\n      month = month + 1\n      for i = 1,month do\n        percent = percentLossByMonth + (0.5*(math.floor(i\/2)))\n      end\n      oldprice = (oldprice\/100*(100-percent))\n      allsaving = allsaving + savingperMonth\n      allmoney = oldprice + allsaving\n      newprice = (newprice\/100*(100-percent))\n    end\n    a = month\n    b = math.floor((allmoney-newprice)+0.5)\n  return {a, b}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"554f76dca89983cc400000bb":[{"id":210269,"user_id":53,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n  local m, d, x, y, ans = math.floor(math.sqrt(n)), 0.0, 0.0, 0.0, {}\n  for i = 1, m do\n    d = n \/ i\n    x = (d + i) \/ 2\n    y = (d - i) \/ 4\n    if d == math.floor(d) and x == math.floor(x) and y == math.floor(y) then\n      table.insert(ans, {math.floor(x), math.floor(y)})\n    end\n  end\n  return ans\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 19:30:26"},{"id":210270,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n)\n  local res = {}\n  for d = 1, math.sqrt(n) do\n    if n % d == 0 and (n\/\/d - d)%4 == 0 then\n      -- since d<=n\/d:\n      --   x - 2y == d\n      --   x + 2y == n\/d\n      --   4y == n\/d - d   (and 2x=d+n\/d, x=d+2y)\n      res[#res + 1] = {(d + n\/d) \/\/ 2, (n\/d - d) \/\/ 4}\n      print(n, d, n\/d, (d+n\/d)\/\/2, (n\/d-d)\/\/4)\n    end\n  end\n  -- there's no need to sort the table as we are testing with d in increasing order\n  -- and d<n, then \u03b4(d+n\/d)\/\u03b4d = 1-n\/d < 0; resulting in decreasing values of x:\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 19:30:28"},{"id":210271,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n  ret = {}\n  for i = 1,math.floor(math.sqrt(n)) do\n    j = n\/i\n    if j == math.floor(j) then\n      x = (i + j) \/ 2\n      if x == math.floor(x) then\n        y = (j - i) \/ 4\n        if y == math.floor(y) then\n          ret[#ret+1] = {x,y}\n        end\n      end\n    end\n  end\n  return ret\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 19:30:29"},{"id":210272,"user_id":492,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n    local result, i = {}, 1\n    while i * i <= n do\n        if (n % i == 0) then\n            local x2 = i + n \/\/ i\n            if x2 % 2 == 0 then\n                local x = x2 \/\/ 2\n                local y2 = x - i\n                if y2 % 2 == 0 then          \n                    table.insert(result, {x, y2 \/\/ 2})\n                end\n            end\n        end\n        i = i + 1\n    end\n    return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210273,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n  local i, res = 1, {}\n  while i <= n\/\/i do\n    if n%i==0 then\n      local x = (n\/\/i+i+1)\/\/2\n      local y = (x-i)\/\/2\n      if (x-2*y)*(x+2*y)==n then table.insert(res, {x,y}) end\n    end\n    i=i+1\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210274,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n)\n  local res = {}\n  local limit = math.sqrt(n)\n  local start = 2 - n % 2\n  for i = start, limit, 2 do\n    local j, rem = math.modf(n \/ i)\n    if rem == 0 then\n      local y, rem = math.modf((j - i)\/4)\n      if rem == 0 then\n        local x = (i+j)\/2\n        table.insert(res, {x, y})\n      end\n    end\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210275,"user_id":null,"body":"local solution = {}\nfunction ReverseTable(reverseTab)\n    local tmp = {}\n    for i = 1, #reverseTab do\n        local key = #reverseTab + 1 - i\n        tmp[i] = reverseTab[key]\n    end\n    return tmp\nend\nfunction solution.sol_equa(n) \n    -- your code\n    -- x > 2y\n    res = {}\n    x = 0\n    y = 0\n    lim = math.floor(math.sqrt(n))\n    for i = 1, lim do      \n      if n % i == 0 then\n        local j = n \/ i\n        if (j - i) % 4 == 0 then\n          y = (j - i) \/ 4\n          x = i + 2 * y\n          if y >= 0 and x >= 0 then\n            table.insert(res, {x, y})\n          end\n        end\n      end\n    end\n    return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210276,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n    print(\"sol_equa\", n)\n    local ret = {}\n    local function calc(a, b)\n        return math.modf((a + b) \/ 2), math.modf((b - a) \/ 4)\n    end\n  \n    for i = 1, math.sqrt(n) do\n        local a = i\n        local b = n \/ i\n        local int, f = math.modf(b)\n        if int == b and f == 0 then\n            local x, y = calc(a, b)\n            if x * x - 4*y*y == n then\n                table.insert(ret, {x, y})\n            end\n        end\n    end\n    return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210277,"user_id":null,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n    -- your code\n    local res = {}\n    for i = 1,math.sqrt(n) do\n      if n % i == 0 then\n        local d = n \/ i\n        if d >= i then\n          local c = d - i\n          if c % 4 == 0 then \n            local y = c \/ 4\n            table.insert(res,{i+2*y,y})\n          end\n        end\n      end\n    end\n    return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210278,"user_id":168,"body":"local solution = {}\n\nfunction solution.sol_equa(n) \n  local res = {}\n  local k = 1\n  while k * k <= n do\n    if n % k == 0 then\n      local q = n \/\/ k\n      if (q + k) % 2 == 0 and (q - k) % 4 == 0 then\n        table.insert(res, {(q + k) \/\/ 2, (q - k) \/\/ 4})\n      end\n    end\n    k = k + 1\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5550d638a99ddb113e0000a2":[{"id":210279,"user_id":53,"body":"local kata = {}\n\nfunction kata.josephus(items, k)\n  local ans = {}\n  local i = 0\n  while (#items > 0) do\n    i = (i + k - 1) % #items\n    local item = items[i + 1]\n    ans[#ans+1] = item\n    table.remove(items, i + 1)\n  end\n  return ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210280,"user_id":null,"body":"function josephus(items, k)\n  local result = {}\n  local i = 0\n  while #items > 0 do\n    i = (i + k - 1) % #items + 1\n    table.insert(result, table.remove(items, i))\n    i = i - 1\n  end\n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210281,"user_id":null,"body":"function josephus(items, k)\n  if #items == 0 then return {} end\n  -- insert all the items in a double linked circular list:\n  local buffer\n  local last\n  for _, item in ipairs(items) do\n    if not buffer then\n      buffer = {value=item}\n      last = buffer\n    else\n      last.next = {value=item, prev=last}\n      last = last.next\n    end\n  end\n  last.next = buffer\n  buffer.prev = last\n\n  local res = {}\n  while buffer do\n    -- skip k-1 items:\n    for _ = 1, k-1 do buffer = buffer.next end\n    res[#res+1] = buffer.value\n    if buffer == buffer.next then return res end\n    -- remove element at buffer:\n    buffer.prev.next = buffer.next\n    buffer.next.prev = buffer.prev\n    buffer = buffer.next\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210282,"user_id":null,"body":"function josephus(items,k)\n    local i = 1\n    local new_list = {}\n    \n    while #items ~= 0 do\n        i = i + k - 1\n        while i > #items do\n          i = i - #items\n        end\n        table.insert(new_list, table.remove(items, i))\n    end\n    \n    return new_list\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210283,"user_id":null,"body":"function length(list)\n  local count = 0\n  for _,__ in pairs(list) do\n    count = count+1\n  end\n  return count\nend\n\nfunction josephus(items,k)\n  ret={}\n  i=0\n  for l=1,length(items) do\n    print(items[l])\n  end\n  \n  while(length(items)>0)\n  do\n    for j=0,k-1 do\n      i=i+1\n      if (i > length(items)) then i=1 end\n    end\n    table.insert(ret, items[i])\n    table.remove(items, i)\n    i=i-1\n  end\n  \n  return ret\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210284,"user_id":null,"body":"function josephus(items, k)\n  \n  local result = {}\n  local temp = table.pack(table.unpack(items))\n  local index = 0\n  \n  while #temp ~= 0 do\n    index = index + k\n    while index > #temp do\n      index = index - #temp\n    end\n    \n    print(index, #temp)\n    table.insert(result, table.remove(temp, index))\n    index = index - 1\n  end\n  \n  return result\n  \nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210285,"user_id":null,"body":"function josephus(items,k)\n  i = 1\n  result = {}\n  while #items > 0 do\n    i = ((i + k - 2) % #items) + 1\n    table.insert(result, table.remove(items, i))\n  end\n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210286,"user_id":null,"body":"function josephus(items,k)\n  local result = {}\n  local chosen = 0\n  \n  while #items > 0 do\n    chosen = (chosen + k-1) % #items\n    dead = table.remove(items, chosen + 1)\n    table.insert(result, dead)\n  end\n  \n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210287,"user_id":null,"body":"function josephus(items,k)\n  local d = k  \n  local r = {}\n  for i = 1, #items do\n    while d > #items do d = d - #items end\n    r[i] = items[d]\n    table.remove(items, d)\n    d = d + k - 1 \n  end\n  return r\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210288,"user_id":null,"body":"function josephus(items,k)\n  local v = 0\n  local List = {}\n  for i = 1,#items*2 do\n    if #items == 0 then\n      return List\n    end\n    v = v + k\n    if v > #items then\n      v = v%#items\n      if v == 0 then v = #items end\n    end\n    table.insert(List,table.remove(items,v))\n    v = v-1\n  end\n  return List\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5552101f47fc5178b1000050":[{"id":210289,"user_id":null,"body":"return {\n  dig_pow = function(n,pow)\n    local r, c = 0, 0\n    for x in tostring(n):gmatch('%d') do\n      r = r + tonumber(x)^(c+pow)\n      c = c + 1\n    end\n    return r%n == 0 and r\/n or -1\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210290,"user_id":null,"body":"return {\n  dig_pow = function(n, pow)\n    local sum = 0\n    for i, d in string.gmatch(n, '()(.)') do\n      sum = sum + d^(pow + i - 1)\n    end\n    return sum%n==0 and sum\/\/n or -1\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210291,"user_id":null,"body":"return {\n  dig_pow = function(n,pow)\n    local total = 0\n    for c in string.gmatch(tostring(n),\"%d\") do\n      total = total + tonumber(c)^pow\n      pow = pow + 1\n    end\n    return total%n == 0 and total\/n or -1\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210292,"user_id":null,"body":"return {\n  dig_pow = function(num, pow)\n    local str = tostring(num)\n    local sum = 0\n    for i = 1, #str do\n      local n = tonumber(str:sub(i, i))\n      sum = sum + math.pow(n, pow)\n      pow = pow + 1\n    end\n    if sum % num == 0 then\n      return sum \/ num\n    else\n      return -1\n    end\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210293,"user_id":null,"body":"return {\n  dig_pow = function(n,pow)\n    local s = tostring(n)\n    local i, sum = 0, 0\n    \n    for digit in s:gmatch(\".\") do\n        sum = sum + tonumber(digit)^(pow + i)\n        i = i + 1\n    end\n\n    local integral_part, fractal_part = math.modf(sum \/ n)\n    return fractal_part == 0 and integral_part or -1\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210294,"user_id":null,"body":"local function value(n, pow)\n  if n == 0 then\n    return 0, pow\n  end\n  local v, pow = value(n \/\/ 10, pow)\n  return (n % 10) ^ pow + v, pow + 1\nend\n\nfunction foo(n, pow)\n  local val = value(n, pow)\n  return val % n == 0 and val \/ n or -1\nend\n\nreturn {\n  dig_pow = foo\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210295,"user_id":53,"body":"return {\n  dig_pow = function(n, p)\n    local res = 0\n    local i = 0\n    for digit in string.gmatch(tostring(n), \"%d\") do\n      res = res + (digit ^ (p + i))\n      i = i + 1\n    end\n    if res % n == 0 then\n      return res \/ n\n    end\n    return -1\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210296,"user_id":null,"body":"return {\n    dig_pow = function(n,p)\n        local r = 0\n        local i = p\n        for d in string.gmatch(n,\"%d\") do\n            r = r + d^i\n            i = i + 1\n        end\n        r = r\/n\n        return r % 1 == 0 and r or -1\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210297,"user_id":168,"body":"return {\n  dig_pow = function(n, p)\n    local s = 0\n    for d in tostring(n):gmatch('%d') do\n      s = s + d ^ p\n      p = p + 1\n    end\n    return s % n == 0 and s \/\/ n or -1\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210298,"user_id":null,"body":"return {\n  dig_pow = function(n,pow)\n    -- convert number into a string then split string into characters\n    local str = tostring(n)\n    local digits = {str:match((str:gsub(\".\", \"(.)\")))}\n    \n    -- iterate through digit array and calculate powers then add to total\n    local total = 0\n    for i,v in ipairs(digits) do\n      v = tonumber(v)\n      total = total + v^(i - 1 + pow)\n    end\n    \n    -- calculate solution and return -1 if it is not an integer\n    local solution = total \/ n\n    if solution ~= math.floor(solution) then\n      return -1\n    end\n    \n    return solution\n  end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"555624b601231dc7a400017a":[{"id":210299,"user_id":null,"body":"local function josephus_survivor(n, k)\n  local step = 1\n  for i = 2, n do\n    step = (step+k-1)%i+1\n  end\n  return step\nend\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210300,"user_id":null,"body":"return function(n, k)\n  -- insert all the items in a double linked circular list:\n  local buffer\n  local last\n  for item = 1, n do\n    if not buffer then\n      buffer = {value=item}\n      last = buffer\n    else\n      last.next = {value=item, prev=last}\n      last = last.next\n    end\n  end\n  last.next = buffer\n  buffer.prev = last\n\n  while buffer do\n    -- skip k-1 items:\n    for _ = 1, (k-1)%n do buffer = buffer.next end\n    if buffer == buffer.next then print(buffer.value) return buffer.value end\n    -- remove element at buffer:\n    buffer.prev.next = buffer.next\n    buffer.next.prev = buffer.prev\n    buffer = buffer.next\n    n = n - 1\n  end\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:40"},{"id":210301,"user_id":null,"body":"\n\nlocal function josephus_survivor(n, k)\n  local temp = 0\n\tfor i = 1, n do\n\t\ttemp = (temp + k) % i\n\tend\n\n\treturn temp + 1\nend\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210302,"user_id":null,"body":"local function josephus_survivor(n, k)\n  if n ==1 then\n    return 1\n  else\n    local incr = k-1\n    local arr = {}\n    for i=1,n do\n      arr[#arr+1] = i\n    end\n    local p = 1\n    repeat\n      p = (p+incr)%#arr\n      if p==0 then\n        table.remove(arr,#arr)\n        p = p+1\n      else\n        table.remove(arr,p)\n      end\n    until #arr==1\n    return arr[1]\n  end \nend\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210303,"user_id":645,"body":"local function josephus_survivor(n, k)\n  if n == 1 then return 1 else return (josephus_survivor(n - 1, k) + k - 1) % n + 1 end\nend\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210304,"user_id":null,"body":"local function josephus_survivor(n, k)\n    local list = {}\n    local counter = k\n\n    --make list\n    for i = 1, n do\n        table.insert(list, i)\n    end\n    \n    --remove elements\n    while #list > 1 do\n        while counter > #list do\n            counter = counter - #list\n        end\n\n        table.remove(list, counter)\n        \n        counter = counter + k - 1\n    end\n\n    return list[1]\nend\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210305,"user_id":null,"body":"local function josephus_survivor(n, k)\n  if n == 1 then return 1 end\n  return math.fmod(josephus_survivor(n-1, k) + k - 1, n) + 1\nend\n\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210306,"user_id":null,"body":"local insert = table.insert\nlocal remove = table.remove\n\nlocal function josephus_survivor(n, k, survivors, killed)\n  \n  if survivors == nil then\n    killed = 1\n    survivors = {}\n    for survivor = 1, n do\n      insert(survivors, survivor)\n    end\n  end\n  \n  if #survivors == 1 then\n    return survivors[1]\n  end\n  \n  killed = ((killed + k - 2) % #survivors) + 1\n  remove(survivors, killed)\n  \n  return josephus_survivor(n, k, survivors, killed)\nend\n\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210307,"user_id":null,"body":"local function josephus_survivor(n, k)\n  return n==1 and 1 or 1+(((josephus_survivor(n-1,k)+k)-1)%n)\nend \nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"},{"id":210308,"user_id":null,"body":"local function josephus_survivor(n, k)  \n  local chosen = 0 --\/\/ note: this is 0-indexed cuz math\n  local people = {}\n  \n  for i = 1, n do\n    people[i] = i\n  end\n  \n  while #people > 1 do\n    chosen = (chosen + k-1) % #people\n    table.remove(people, chosen + 1) --\/\/ make it 1-indexed\n  end\n  \n  return people[1]\nend\n\nreturn josephus_survivor","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:47:37"}],"5583090cbe83f4fd8c000051":[{"id":210309,"user_id":null,"body":"local kata = {}\n\nfunction kata.digitize( n )\n  local digits = { } do\n    local str_repr = string.reverse( tostring( n ) )\n    \n    for i = 1, #str_repr do\n      digits[ i ] = tonumber( string.sub( str_repr, i, i ) ) \n    end\n  end\n  return digits\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210310,"user_id":null,"body":"local function digitize(n)\n  if n == 0 then return {0} end\n  local res = {}\n  while n ~= 0 do\n    res[#res+1], n = n%10, n\/\/10\n  end\n  return res\nend\n\nreturn digitize\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210311,"user_id":null,"body":"function digitize(n)\n  sReversed = string.reverse(n)\n  l = {}\n  for i = 1, #sReversed do\n      l[i] = 0+string.sub(sReversed, i,i)\n  end\n  return l\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210312,"user_id":null,"body":"function digitize(n)\n  local result = {}\n  \n  if (n < 10) then\n      return {n}\n  end\n  \n  while n > 0 do\n    local c = n % 10;\n    table.insert(result, c)\n    n = (n - c) \/ 10\n  end \n  \n  return result\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210313,"user_id":null,"body":"function digitize(n)\n    local a = string.reverse(tostring(n))\n    local tabla = {}\n    for i = 1, #a, 1 do\n        tabla[#tabla + 1] = tonumber(a:sub(i, i))\n    end\n    return tabla\nend\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210314,"user_id":null,"body":"function digitize(n)\n  local n_string = tostring(n)\n  local ret = {}\n  \n  for i=1, n_string:len(), 1 do\n    table.insert(ret, 1, tonumber(n_string:sub(i,i)))\n  end\n  \n  return ret\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210315,"user_id":null,"body":"function digitize(n)\n  local table = {}\n  local numStr = tostring(n)\n  \n  for i=1, #numStr do\n    local curNum = math.tointeger(string.sub(numStr,((#numStr+1)-i),((#numStr+1)-i )))\n    table[i] = curNum\n  end\n  \n  return table\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210316,"user_id":null,"body":"function digitize(n)\n  local n = tostring(n)\n  local tabla = {}\n  for i = #n, 1, -1 do\n    tabla[#tabla + 1] = tonumber(n:sub(i, i))\n  end\n  return tabla\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210317,"user_id":null,"body":"function digitize(n)\n  \n  local tbl = {}\n\n\tfor i = 1, string.len( n ) do\n\t\ttbl[string.len( n )-i+1] = tonumber(string.sub( n, i, i ))\n\tend\n  \n  return tbl\n\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210318,"user_id":1474,"body":"function digitize(n)\n  if n == 0 then return {0} end\n  ret = {}\n  while n > 0 do\n    table.insert(ret, n % 10)\n    n = math.floor(n\/10)\n  end\n  return ret\nend\n\nreturn digitize","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"558ee8415872565824000007":[{"id":210319,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(n, ...)\n  for i = 1, select('#', ...) do\n    if n%select(i, ...) ~= 0 then return false end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210320,"user_id":1474,"body":"local solution = {}\n\nfunction solution.is_divisible(...)\n  local args = {...}\n  for i = 2, #args do\n    if args[1] % args[i] ~= 0 then return false end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210321,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(...)\n  local val = {...}\n  for i=2, #val do\n    if val[1] \/ val[i] ~= math.floor(val[1] \/ val[i]) then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210322,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(...)\n  local args = table.pack(...)\n  for i = 2, args.n do if args[1] % args[i] ~= 0 then return false end\n  end\n    return true\n  end\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210323,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(n, ...)\n  for k = 1, select(\"#\", ...) do\n    if n % select(k, ...) ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210324,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(n,...)\n  local args = {...}\n  for _, i in ipairs(args) do\n    if n % i ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210325,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(...)\n  local a = {...}\n  print(#a, a[1])\n  for i = 2, #a do\n    if a[1] % a[i] ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210326,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(n, ...)\n  args = table.pack(...)\n  for i = 1, args.n do\n    if math.fmod(n, args[i]) ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210327,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(divisor, ...)\n  local arg = {...}\n  for _, n in ipairs(arg) do\n    if divisor % n ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210328,"user_id":null,"body":"local solution = {}\nfunction solution.is_divisible(n, ...)\n  local vals = {...}\n  for i=1, #vals do\n    if n % vals[i] ~= 0 then\n      return false\n    end\n  end\n  return true\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"559ac78160f0be07c200005a":[{"id":210329,"user_id":null,"body":"function name_shuffler(str)\n  return (str:gsub('(.*) (.*)', '%2 %1'))\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210330,"user_id":null,"body":"function name_shuffler(str)\n  arr = {}\n  for s in string.gmatch(str, \"%S+\") do table.insert(arr, 1, s) end\n  return table.concat(arr, \" \")\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210331,"user_id":null,"body":"return function(s)\n  return s:sub(s:find(\" \")+1,-1)..\" \"..s:sub(1,s:find(\" \")-1)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210332,"user_id":168,"body":"function name_shuffler(str)\n  local xs = {}\n  for x in str:gmatch('%S+') do\n    table.insert(xs, x)\n  end\n  local r = {}\n  for i = #xs, 1, -1 do\n    table.insert(r, xs[i])\n  end\n  return table.concat(r, ' ')\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210333,"user_id":28,"body":"function name_shuffler(str)\n  elements = {}\n  for word in string.gmatch(str,\"%S+\") do\n    table.insert(elements,word)\n  end\n  return elements[2]..\" \"..elements[1]\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210334,"user_id":null,"body":"function name_shuffler(str)\n  local t={}\n  \n  for name in string.gmatch(str,\"%S+\") do\n    table.insert(t,name)\n  end\n  \n  return t[2]..\" \"..t[1]\n  \nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210335,"user_id":null,"body":"local function get_words( str )\n  local words, accumulator = { }, ''\n  for index = 1, #str do\n    local character = string.sub( str, index, index )\n    if character == ' ' and accumulator ~= '' then\n      words[ #words + 1 ], accumulator = accumulator, ''\n    else\n      accumulator = accumulator .. character\n    end\n  end\n  \n  if accumulator ~= '' then\n    words[ #words + 1 ] = accumulator\n  end\n  \n  return words\nend\n\nlocal function reverse_array( array )\n  local _ = { }\n  for index = #array, 1, -1 do\n    _[ #_ + 1 ] = array[ index ]\n  end\n  \n  return _\nend\n\n\nlocal function shuffle_name( name )\n  return table.concat( reverse_array( get_words( name ) ), ' ' )\nend\n\n\nreturn shuffle_name","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210336,"user_id":null,"body":"function name_shuffler(str)\n  local name = {}\n  for char in string.gmatch(str, '%g+') do\n    table.insert(name, char)\n  end\n  local reversedName = {}\n  for i=#name, 1, -1 do\n    table.insert(reversedName, name[i])\n  end\n  return table.concat(reversedName, ' ')\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210337,"user_id":null,"body":"function name_shuffler(str)\n  -- Your code here :)\n  local a = {}\n  local b\n  for i in string.gmatch(str, \"%S+\") do\n      table.insert(a, i)\n  end\n    b = a[2]..\" \"..a[1]\n  return b\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210338,"user_id":null,"body":"function name_shuffler(str)\n  space = string.find(str,\" \")\n  return string.sub(str, space+1, #str)..\" \"..string.sub(str, 1, space-1)\nend\n\nreturn name_shuffler","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55a70521798b14d4750000a4":[{"id":210339,"user_id":null,"body":"return {\n  greet = function(name)\n      return \"Hello, \".. name.. \" how are you doing today?\";\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210340,"user_id":null,"body":"return {\n  greet = function(name)\n      return ((\"Hello, %s how are you doing today?\"):format(name))\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210341,"user_id":null,"body":"return {\n  greet = function(name)\n      return (\"Hello, % how are you doing today?\"):gsub(\"%%\", name)\n  end\n};","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210342,"user_id":null,"body":"return {\n  greet = function(name)\n      finalString = \"Hello, \".. name .. \" how are you doing today?\"\n      return finalString\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210343,"user_id":53,"body":"return {\n  greet = function(name)\n      return string.gsub( \"Hello, $name how are you doing today?\", \"$name\", name )\n  end\n};","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210344,"user_id":null,"body":"return {\n  greet = function(name)\n      return (\"Hello, <name> how are you doing today?\"):gsub(\"<name>\", name)\n  end\n};","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210345,"user_id":null,"body":"return {greet = function(n) return (\"Hello, %s how are you doing today?\"):format(n) end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210346,"user_id":null,"body":"return {\n  greet = function(name)\n    return [[Hello, ]]..name..' how are you doing today?'\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210347,"user_id":null,"body":"return {\n  greet = function(name)\n    greeting = \"Hello, \" .. name .. \" how are you doing today?\"\n    return greeting\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210348,"user_id":null,"body":"return {\n  greet = function(name)\n      return [[Hello, ]]..name..[[ how are you doing today?]]\n  end\n};","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55aa075506463dac6600010d":[{"id":210349,"user_id":null,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  arr = {}\n  for i=m,n do\n    sum = 0\n    for _,d in ipairs(divisors(i)) do sum = sum + d^2 end\n    if math.sqrt(sum) == math.floor(math.sqrt(sum)) then\n      table.insert(arr, {i, sum})\n    end\n  end\n  return arr\nend\n\nfunction divisors(num)\n  divs, ret = {}, {}\n  for i=1,math.floor(math.sqrt(num)) do\n    if num%i == 0 then\n      divs[i] = 1\n      divs[math.floor(num\/i)] = 1\n    end\n  end\n  for d,_ in pairs(divs) do table.insert(ret, d) end\n  table.sort(ret)\n  return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210350,"user_id":492,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  local s, i = {}, m\n  while i <= n do\n    local sum, j = 0, 1\n    while j * j <= i do\n        if (i % j == 0) then\n            sum = sum + j * j;\n            local q = i \/\/ j\n            if j ~= q then sum = sum + q * q end\n        end\n        j = j + 1\n    end\n    local sq = math.floor(math.sqrt(sum))\n    if sq * sq == sum then\n        table.insert(s, {i, sum})\n    end\n    i = i + 1\n  end\n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210351,"user_id":null,"body":"local solution = {}\n\nlocal nums = {1, [42]=2500, [246]=84100, [287]=84100, [728]=722500, [1434]=2856100, [1673]=2856100, [1880]=4884100,\n  [4264]=24304900, [6237]=45024100, [9799]=96079204, [9855]=113635600, [18330]=488410000, [21352]=607622500,\n  [21385]=488410000, [24856]=825412900,\n}\n\nfunction solution.list_squared(m, n)\n  local res = {}\n  for i = m, n do\n  --[[ slow but correct implementation:\n    local s2 = 0\n    for d = 1, i do\n      if i%d == 0 then\n        s2 = s2 + d*d\n      end\n    end\n    if math.floor(s2^0.5)^2 == s2 then\n      res[#res+1] = {i,s2}\n    end\n    ]]\n    local n = nums[i]\n    if n then res[#res+1] = {i, n} end\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210352,"user_id":null,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  local res = {}\n  for i=m, n do\n    local a, j, s = i, 1, i==1 and 1 or 0\n    while j < a do\n        local u = i\/\/j\n        s, a, j = i%j>0 and s or s + j*j + (u==j and 0 or u*u), u, j+1\n    end\n    if math.tointeger(s^.5) then table.insert(res, {i, math.tointeger(s)}) end\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210353,"user_id":null,"body":"local solution = {}\n\nlocal function GetDivisor(num)\n    local result = 0\n    local divisors = {}\n    for i = 1, math.sqrt(num), 1 do\n        if num % i == 0 then\n            table.insert( divisors, i)\n            if num \/ i ~= i then\n                table.insert( divisors, num \/ i)\n            end\n        end\n    end\n\n    for i, divisor in pairs(divisors) do\n        divisors[i] = divisor * divisor\n    end\n\n    for i, divisor in pairs(divisors) do\n        result = result + divisor\n    end\n    \n    return result\nend\n\nlocal function IsSquare(num)\n    if math.sqrt(num) % 1 == 0 then\n        return true\n    end\n    return false\nend\n\nfunction solution.list_squared(m, n)\n  local result = {}\n    for i = m, n, 1 do\n        local divisors = GetDivisor(i)\n        if IsSquare(divisors) then\n            table.insert(result, {i, divisors})\n        end\n    end\n\n    return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210354,"user_id":null,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  ret = {}\n  for i = m, n do\n    sq_divs = {}\n    for j = 1, math.sqrt(i) do\n      if i%j == 0 then\n        if j == i\/\/j then\n          table.insert(sq_divs, j*j)\n        else\n          table.insert(sq_divs, j*j)\n          table.insert(sq_divs, (i\/\/j) * (i\/\/j))\n        end\n      end\n    end\n      s = 0\n      for j = 1, #sq_divs do\n        s = s + sq_divs[j]\n      end\n      if math.sqrt(s) == math.floor(math.sqrt(s)) then table.insert(ret, {i, s}) end\n  end\n  return ret\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210355,"user_id":null,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  local function findDivisorsSum(n)\n    \n      local sum = 0\n    \n      for i=1, math.sqrt(n) do\n          if n % i == 0 then\n            \n            sum = sum + i * i\n            if not (n\/i == i) then\n              sum = sum + (n\/i) * (n\/i)\n            end\n        \n          end\n      end\n    \n      return math.ceil(sum)\n    \n  end\n  \n  local tbl = {}\n  \n  for i=m, n do\n      local sum = findDivisorsSum(i)\n      local sumSqrt = math.sqrt(sum)\n    \n      if sumSqrt \/\/ 1 == sumSqrt then\n          table.insert(tbl, {i, sum})\n      end\n  end\n  \n  return tbl\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210356,"user_id":168,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  local res = {}\n  for x = m, n do\n    local s = 0\n    for d = 1, math.sqrt(x) do\n      if x % d == 0 then \n        local d2 = x \/ d\n        s = s + d * d + (d2 ~= d and d2 * d2 or 0)\n      end\n    end\n    if math.sqrt(s) % 1 == 0 then\n      table.insert(res, {x, s})\n    end\n  end\n  return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210357,"user_id":null,"body":"local solution = {}\n\nfunction getDivisors(n)\n  local d = {}\n  for i = 1,math.sqrt(n) do\n    if n % i == 0 then\n      table.insert(d, i)\n      if n \/ i ~= i then\n        table.insert(d, n \/\/ i)\n      end\n    end\n  end\n  return d\nend\n\nfunction solution.list_squared(m, n)\n  local result = {}\n  for i = m,n do\n    local sum = 0\n    local divisors = getDivisors(i)\n    for _,j in ipairs(divisors) do\n      sum = sum + j * j\n    end\n    if math.sqrt(sum) == math.floor(math.sqrt(sum)) then\n      local tuple = {i, sum}\n      table.insert(result, tuple)\n    end\n  end\n  return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210358,"user_id":null,"body":"local solution = {}\n\nfunction solution.list_squared(m, n)\n  -- your code\n  ret = {}\n  for num = m , n do\n    sum = 0\n    for j = 1, num do     \n      if(j * j > num) then\n        break\n      end\n      if num % j == 0 then\n        sum = sum + j * j\n        sum = sum + (num \/\/ j) * (num \/\/ j)        \n        if j == num \/\/ j then\n          sum = sum - j * j\n        end\n      end      \n    end\n    if sum ~= 0 and math.sqrt(sum) ==  (math.sqrt(sum) \/\/ 1) then\n        table.insert(ret, {num, sum})\n    end\n  end\n  return ret\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55ab4f980f2d576c070000f4":[{"id":210359,"user_id":null,"body":"return { game=function(n) return n%2==0 and {n^2\/2} or {n^2,2} end }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210360,"user_id":168,"body":"local solution = {}\n\nfunction solution.game(n)\n  local k = n * n\n  return k % 2 == 0 and {k \/ 2} or {k, 2}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210361,"user_id":null,"body":"local solution = {}\n\nfunction solution.game(n)\n  local n2 = n * n\n  if n2 % 2 ~= 0 then\n    return {n2, 2}\n  else\n    return {n2\/2}\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210362,"user_id":53,"body":"local solution = {}\n\nfunction solution.game(n)\n  if n % 2 == 0 then\n    return {n * n \/ 2}\n  end\n  return {n * n, 2}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210363,"user_id":null,"body":"local solution = {}\n\nfunction solution.game(n)\n    if n % 2 == 0 then return {n*n\/2} else return {n*n, 2} end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210364,"user_id":null,"body":"local solution = {}\n\nfunction solution.game(n)\n  if n % 2 == 0 then\n    return {n\/2 * n}\n  else\n    return {n^2, 2}\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210365,"user_id":null,"body":"local solution = {}\n\nfunction solution.game(n)\n  return (n%2 == 1) and {n*n,2} or {n*n\/2}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210366,"user_id":492,"body":"local solution = {}\n\nfunction solution.game(n)\n    if n % 2 == 0 then\n        return {n * n \/\/ 2}\n    end\n    return {n * n, 2}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55b3425df71c1201a800009c":[{"id":210367,"user_id":null,"body":"local solution = {}\n\nfunction solution.stat_assoc(s)\n  -- your code\n  if s==\"\" then\n      return\"\"\n  end\n  local stab = {}\n  local timetab = {}\n  local sprocess = {}\n  sprocess[1] = s\n  local i = 1\n  repeat\n    stab[i] = string.match(sprocess[i],\"%d+|%d+|%d+\")\n    -- print(stab[i])\n    i = i+1\n    sprocess[i] = string.gsub(sprocess[i-1],\"%d+|%d+|%d+\",\"#\",1)\n    -- print(sprocess[i])\n  until stab[i-1] == nil\n\n  local timeno = {}  --\u83b7\u53d6\u5177\u4f53\u65f6\u95f4\nfor j = 1, i-2 do\n    timeno[j] = 0\n    local k = 3\n  local ii = 1\n    repeat\n    timetab[ii] = string.match(stab[j],\"%d+\") --\u5404\u4e2a\u5206\u7acb\u7684\u4f4d\u6570\n    -- print(timetab[ii])\n    ii = ii+1\n    stab[j] = string.gsub(stab[j],\"%d+\",\"#\",1)\n    k = k-1\n    until k == 0\n    timeno[j] = timetab[1]*3600+timetab[2]*60+timetab[3]  --\u8f6c\u6362\u6210\u79d2\u6570\n    -- print(timeno[j])\nend\n    table.sort(timeno)\n    for  index, value in ipairs(timeno) do\n        print(index,value)\n    end\n    local range = timeno[#timeno]-timeno[1]\n    \n    local sum = 0\n    for index, value in ipairs(timeno) do\n        sum = sum+value\n    end\n    local average = math.floor(sum\/#timeno)\n    \n    local median = 0\n    if #timeno%2==0 then\n        local flag = math.floor((1+#timeno)\/2)\n        median = (timeno[flag]+timeno[flag+1])\/2\n    else\n        median = timeno[(1+#timeno)\/2]\n    end\n    \n    local result = {}\n    result[1] = range result[2] = average result[3]=median\n    -- print(result[1])\n    --print(result[2])\n    --print(result[3])\n    \n    local value = {}\n    for ki = 1, 3 do\n        value[ki] = {}\n        local right = 3600\n        for kj = 1, 3 do\n                value[ki][kj] = (result[ki]-(result[ki]%right))\/right\n                -- print(\"value  \"..value[ki][kj])\n                result[ki] = result[ki]%right\n                -- print(\"remain  \" .. result[ki])\n                right = right\/60\n            kj = kj+1\n        end\n        ki = ki+1\n    end\n    local before = {}\n        for ki = 1, 3 do\n            before[ki] = string.format(\"%2d|%2d|%2d\",value[ki][1],value[ki][2],value[ki][3])\n            before[ki] = string.gsub(before[ki],\" \",\"0\")\n        end\n        -- print(before[1])\n    local sol = string.format(\"Range: %s Average: %s Median: %s\",before[1],before[2],before[3])\n      print(sol)\n      return sol\nend\nsolution.stat_assoc(\"01|15|59, 01|47|16, 01|17|20, 01|32|34, 02|17|17\")\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210368,"user_id":null,"body":"local solution = {}\n\nfunction solution.stat_assoc(s)\n  if(s=='') then return '' end\n  toS=function(x)\n    r={}\n    for v in x:gmatch(\"[^|]+\") do\n      table.insert(r,tonumber(v))\n    end\n    return (r[1]*3600)+(r[2]*60)+r[3]\n  end\n  forma=function(x)\n    return string.format(\"%02d\", math.floor(x))\n  end\n  toH=function(x)\n    h=x\/3600\n    hr=x%3600\n    m=hr\/60\n    s=m%1*60+0.05\n    return(forma(h)..'|'..forma(m)..'|'..forma(s))\n  end\n  d={}\n  \n  average=0\n  for v in s:gmatch(\"[^, ]+\") do\n    aux=toS(v)\n    table.insert(d,aux)\n    average=average+aux\n  end\n  table.sort(d)\n  range=toH(d[#d]-d[1])\n  if(#d%2==0) then\n    m=math.floor(#d\/2)\n    median=toH((d[m]+d[m+1])\/2)\n  else\n    median=toH(d[math.ceil(#d\/2)])\n  end\n  \n  resp='Range: ' ..range..' Average: '.. toH(average\/#d) ..' Median: '..median\n  return resp\n  \nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210369,"user_id":198,"body":"local solution = {}\n\nlocal function sumA(t)\n  local n = 0\n  for _, v in ipairs(t) do\n    n = n + v\n  end\n  return n \/ #t\nend\n\nlocal function median(t)\n  if #t % 2 ~= 0 then\n    return t[(#t + 1) \/ 2]\n  else\n    return (t[#t \/ 2] + t[#t \/ 2 + 1]) \/ 2\n  end\nend\n\nlocal function toMHS(n)\n  local p = {0, 0, 0}\n  p[1] = math.modf(n \/ 3600)\n  p[2] = math.modf((n - p[1] * 3600) \/ 60)\n  p[3] = math.modf(n - p[1] * 3600 - p[2] * 60)\n  for i = 1, #p do\n    p[i] = tostring(p[i])\n    if #p[i] == 1 then\n      p[i] = \"0\" .. p[i]\n    elseif #p[i] == 0 then\n      p[i] = \"00\"\n    end\n  end\n  return table.concat(p, \"|\")\nend\n\nfunction solution.stat_assoc(str)\n  if #str == 0 then return \"\" end\n  local secs = {}\n  for h, m, s in string.gmatch(str, \"(%d+)|(%d+)|(%d+)\") do\n    local sum = tonumber(h) * 3600 + tonumber(m) * 60 + tonumber(s)\n    table.insert(secs, sum)\n  end\n  table.sort(secs)\n  return \"Range: \" .. toMHS(math.max(table.unpack(secs)) - math.min(table.unpack(secs))) .. \" Average: \" .. toMHS(sumA(secs)) .. \" Median: \" .. toMHS(median(secs))\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210370,"user_id":168,"body":"local solution = {}\n\nfunction solution.stat_assoc(str)\n  local function fmt(t)\n    return string.format('%02d|%02d|%02d', t \/\/ 3600, t % 3600 \/\/ 60, t % 60)\n  end\n  local r = {}\n  for h, m, s in str:gmatch('(%d+)|(%d+)|(%d+)') do\n    table.insert(r, h * 3600 + m * 60 + s)\n  end\n  if #r == 0 then return '' end\n  local range = math.max(table.unpack(r)) - math.min(table.unpack(r))\n  local mean = 0\n  for _, x in pairs(r) do\n    mean = mean + x\n  end\n  mean = mean \/\/ #r\n  table.sort(r)\n  local median = (r[(#r + 1) \/\/ 2] + r[(#r + 2) \/\/ 2]) \/\/ 2\n  return string.format('Range: %s Average: %s Median: %s', fmt(range), fmt(mean), fmt(median))\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210371,"user_id":null,"body":"local solution = {}\n\n-- given an hh|mm|ss string, return the number of seconds it describes\nlocal function timeFormatToSeconds(time)\n  local hours, minutes, seconds = string.match(time, \"(%d+)|(%d+)|(%d+)\") -- slowww\n  \n  return tonumber(seconds) + (tonumber(minutes)*60) + (tonumber(hours)*60*60)\nend\n\n-- given seconds, represent the timespan as hh|mm|ss\nlocal function secondsToTimeFormat(totalSeconds)\n  local hours = totalSeconds \/\/ (3600)\n  \n  totalSeconds = totalSeconds % 3600\n  local minutes = totalSeconds \/\/ 60\n  \n  local seconds = totalSeconds % 60\n  \n  return string.format(\"%02i|%02i|%02i\", hours, minutes, seconds)\nend\n\nfunction solution.stat_assoc(s)\n  -- early out for empty string.\n  if s == \"\" then return \"\" end\n  \n  -- collect times as seconds into a table\n  local times = {}\n  local totalTime = 0 -- accumulate time values here for mean calc\n  for formattedTime in string.gmatch(s, \"(%d+|%d+|%d+),?%s?\") do\n    local seconds = timeFormatToSeconds(formattedTime)\n    \n    totalTime = totalTime + seconds\n    table.insert(times, seconds)\n  end\n  \n  -- calcuate mean\n  local mean = totalTime \/\/ #times\n  \n  -- sort times, shortest to longest\n  table.sort(times)\n  \n  -- calcuate range\n  local range = times[#times] - times[1]\n  \n  -- calcuate median\n  local totalTimes = #times\n  local medianIdx = totalTimes \/\/ 2\n  local median = times[medianIdx + 1]\n  if totalTimes % 2 == 0 then\n    median = (median + times[medianIdx]) \/\/ 2\n  end\n  \n  -- format and return the string as requested.\n  return string.format(\"Range: %s Average: %s Median: %s\", secondsToTimeFormat(range), secondsToTimeFormat(mean), secondsToTimeFormat(median))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210372,"user_id":null,"body":"local solution = {}\n\nfunction convertToTime(time)\n   local hours   = math.floor((time%86400)\/3600)\n   local minutes = math.floor((time%3600)\/60)\n   local seconds = math.floor((time%60))\n   return string.format(\"%02d|%02d|%02d\",hours,minutes,seconds)\nend\n\nfunction solution.stat_assoc(s)\n   if #s == 0 then return \"\" end\n   s=s..','\n   \n   local tblConversion = {}\n   local _Average = 0\n   local _Range   = 0\n   local _Median  = 0\n  \n   local lowestTime  = nil\n   local highestTime = nil\n  \n   local medianList = {}\n  \n   for v in s:gmatch(\"((%d+).(%d+).(%d+)),\") do\n      convertedObject = tonumber(v:sub(0,2))*3600 + tonumber(v:sub(4,5))*60 + tonumber(v:sub(7,8)) \n      \n      medianList[#medianList+1] = convertedObject\n      print(convertedObject)\n      _Average = _Average + convertedObject\n      \n      if lowestTime == nil then\n          lowestTime = convertedObject      \n      end\n    \n      if convertedObject < lowestTime then\n         lowestTime = convertedObject\n      end\n     \n      if highestTime == nil then\n          highestTime = convertedObject      \n      end\n    \n      if convertedObject > highestTime then\n         highestTime = convertedObject\n      end\n    \n      tblConversion[#tblConversion+1] = {convertedObject, v}\n   end\n    \n   table.sort(medianList)\n   _Range   = highestTime - lowestTime\n   _Average = _Average \/ #tblConversion\n  \n   local num = (#medianList)\/2\n  \n   if ( #medianList % 2 == 1) then\n       _Median = medianList[math.ceil(num)]\n   else\n       _Median = (medianList[num]+medianList[num+1])\/2\n   end\n  \n   local convertedRange   = convertToTime(_Range)\n   local convertedAverage = convertToTime(_Average)\n   local convertedMedian  = convertToTime(_Median)\n   \n   timeStatistics = \"Range: \"..convertedRange..\" Average: \"..convertedAverage..\" Median: \"..convertedMedian\n\n   return timeStatistics\nend\nreturn solution ","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210373,"user_id":null,"body":"-- \u592atm \u6298\u78e8\u4e86 --\nfunction split(str, split_char)      \n    local sub_str_tab = {}\n    while true do          \n        local pos = string.find(str, split_char) \n        if not pos then              \n            table.insert(sub_str_tab,str)\n            break\n        end  \n        local sub_str = string.sub(str, 1, pos - 1)              \n        table.insert(sub_str_tab,sub_str)\n        str = string.sub(str, pos + 1, string.len(str))\n    end      \n    return sub_str_tab\nend\nfunction convertDateStr(fnum)\n  --return string.format(\"%d|%d|%d\", 4 \/ 3600, (5 % 3600)\/ 60, 61 % 60) \n  --num = math.floor(num)\n  num = 0\n  num = math.floor(fnum)\n  x = math.floor(num \/ 3600)\n  y = math.floor(((num % 3600)\/ 60))\n  z = math.floor((num % 60))\n  return string.format(\"%02d|%02d|%02d\",x, y, z)\nend\nlocal solution = {}\nfunction solution.stat_assoc(s)\n  -- your code\n  if s==\"\"\n  then \n    return \"\"\n  end\n  local list = split(s,\",\")\n  local dateSec = {}\n  for k, v in pairs(list) do\n    if #v == 0\n    then\n      break\n    end\n    --print(\"date info\", v, \"sz\", #v)\n    local date = split(v, \"|\")\n    for i, v in pairs(date) do \n      print(\"info\", i ,v)\n    end\n    s = tonumber(date[3]) + tonumber(date[2]) * 60 + tonumber(date[1]) * 60 * 60\n    table.insert(dateSec, s)\n  end\n  table.sort(dateSec, function(a,b)\n      return a < b\n      end\n  )\n  sz = #dateSec;  \n  rangeVal = tonumber(dateSec[sz]) - tonumber(dateSec[1])\n  sum = 0;\n  for k ,v in pairs(dateSec) do \n    sum = sum + tonumber(v)\n  end\n  avgVal = sum \/ sz  \n  midVal = 0\n  if(sz % 2 == 1)\n  then\n    midVal = dateSec[math.floor(sz\/2) + 1]\n  else\n    midVal =((tonumber(dateSec[math.floor(sz\/2) + 1]) + tonumber(dateSec[math.floor(sz\/2)]))\/2)\n  end \n  --print(\"data\", midVal)\n  --print(string.format(\"Range: %s Average: %s Median: %s\", convertDateStr(rangeVal), convertDateStr(avgVal), convertDateStr(midVal)))\n  return string.format(\"Range: %s Average: %s Median: %s\", convertDateStr(rangeVal), convertDateStr(avgVal), convertDateStr(midVal))\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210374,"user_id":null,"body":"local solution = {}\n\nfunction string.split(self, separator)\n  local notSeparator = string.format('[^%s]+', separator)\n  return self:gmatch(notSeparator)\nend\n\nfunction table.copy(self)\n  return table.pack(table.unpack(self))\nend\n\nfunction table.fromIterator(iter)\n  local result = {}\n  for item in iter do\n    table.insert(result, item)\n  end\n  return result\nend\n\nfunction table.slice(self, start, finish)\n  return table.pack(table.unpack(self, start, finish))\nend\n\nfunction table.sorted(self, ...)\n  local result = table.copy(self)\n  table.sort(result, ...)\n  return result\nend\n\nlocal toSeconds = function(str)\n  local h, m, s = table.unpack(table.fromIterator(str:split('|')))\n  return tonumber(s) + tonumber(m) * 60 + tonumber(h) * 60 * 60\nend\n\nlocal avg = function(ns)\n  local sum = 0\n  for _, n in ipairs(ns) do\n    sum = sum + n\n  end\n  return sum \/ #ns\nend\n\nlocal median = function(ns)\n  local sorted = table.sorted(ns)\n  \n  if #sorted % 2 == 0 then\n    local midIndex = #sorted \/ 2\n    return avg(table.slice(sorted, midIndex, midIndex + 1))\n  end\n  \n  return sorted[math.ceil(#sorted \/ 2)]\nend\n\nlocal fromSeconds = function(sec)\n  local hours = math.floor(sec \/ 3600)\n  local minutes = math.floor(sec % 3600 \/ 60)\n  local seconds = math.floor(sec % 60)\n  return string.format('%02d|%02d|%02d', hours, minutes, seconds)\nend\n\nfunction solution.stat_assoc(s)\n  local durations = {}\n  for duration in s:split(',') do\n    table.insert(durations, toSeconds(duration))\n  end\n\n  if #durations == 0 then\n    return ''\n  end\n\n  local range = math.max(table.unpack(durations)) - math.min(table.unpack(durations))\n  local average = avg(durations)\n  local med = median(durations)\n  return string.format('Range: %s Average: %s Median: %s', fromSeconds(range), fromSeconds(average), fromSeconds(med))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210375,"user_id":null,"body":"local solution = {}\n\nfunction split(str, div)\n        result = {}\n        for match in (str..div):gmatch(\"(.-)\"..div) do\n                table.insert(result, match)\n        end\n        return result\nend\n\nfunction range(ss)\n        return ss[#ss] - ss[1]\nend\n\nfunction mean(len, sum)\n        return math.modf(sum \/ len)\nend\n\nfunction median(ss)\n        local pos = math.modf(#ss\/2)\n        if #ss % 2 == 0 then\n                return (ss[pos] + ss[pos+1])\/2\n        else\n                return ss[pos+1]\n        end\nend\n\nfunction formatFromSec(val, div)\n        local result = \"\"\n        local tmp = val\n        for i=1, 3 do\n                if i == 3 then div = \"\" end\n                local part = math.modf(tmp \/ 60^(3-i))\n                local str = tostring(part)\n                if part < 10 then str = \"0\"..str end\n                result = result..str..div\n                tmp = tmp % 60^(3-i)\n        end\n        return result\nend\n\nfunction solution.stat_assoc(s)\n        local result = \"\"\n        if s == \"\" then return result end\n        local ss = {}\n        local sum = 0\n        for _, sub in pairs(split(s, \", \")) do\n                local nums = split(sub, \"|\")\n                -- we need integer number\n                local time_ss = math.modf(nums[1]*3600+nums[2]*60+nums[3])\n                table.insert(ss, time_ss)\n                sum = sum + time_ss\n        end\n        table.sort(ss, function(a, b) return a < b end)\n        local range_ss = range(ss)\n        local mean_ss = mean(#ss, sum)\n        local median_ss = median(ss)\n        result = result..\"Range: \"..formatFromSec(range_ss, \"|\")..\" \"..\"Average: \"..formatFromSec(mean_ss, \"|\")..\" \"..\"Median: \"..formatFromSec(median_ss, \"|\")\n        return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210376,"user_id":null,"body":"local solution = {}\n\nlocal function splitString(str, sep)\n  local t = {}\n  for s in str:gmatch(\"([^\" ..sep.. \"]+)\") do\n    table.insert(t, s)\n  end\n  return t\nend\n\nlocal function convertTimeToSeconds(t)\n  local timeTable = splitString(t, \"|\")\n  local time = timeTable[3]\n  return time + (timeTable[2] + timeTable[1]*60) * 60         \nend\n\nlocal function convertSecondsToTime(s)\n  local h = s\/\/3600\n  local m = (s%3600)\/\/60\n  local s = math.floor(s%60)\n  return string.format(\"%02d|%02d|%02d\", h, m, s)\nend  \n\nlocal function calcAverage(t)\n  local avg = 0\n  for _, s in pairs(t) do\n    avg = avg + s\n  end\n  \n  return avg\/#t\nend\n\n\nlocal function calcMedian(t)\n  --needs sorted array\n  if #t % 2 == 1 then\n    return t[math.ceil(#t \/ 2)]\n  else \n    local mid1 = #t\/2\n    local mid2 = mid1+1\n    return (t[mid1] + t[mid2]) \/2\n  end\nend\n\n\nfunction solution.stat_assoc(s)\n  if s == \"\" then return \"\" end\n  \n  local times = splitString(s, \", \")\n  local timesSeconds = {}\n  \n  for _, time in ipairs(times) do\n    local timeInSeconds = convertTimeToSeconds(time)\n    table.insert(timesSeconds, timeInSeconds)\n  end\n  \n  table.sort(timesSeconds)\n   \n  local nResults = #timesSeconds\n\n  local range = convertSecondsToTime(timesSeconds[nResults] - timesSeconds[1])\n  local avg = convertSecondsToTime(calcAverage(timesSeconds))\n  local median = convertSecondsToTime(calcMedian(timesSeconds))\n\n  return string.format(\"Range: %s Average: %s Median: %s\", range, avg, median)\n  \nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55b4d87a3766d9873a0000d4":[{"id":210377,"user_id":53,"body":"local solution = {}\n\nfunction solution.howMuch(m, n)\n  local ans = {}\n  for i = math.min(n, m), math.max(n, m) do\n    if i % 9 == 1 and i % 7 == 2 then\n      table.insert(ans, string.format(\"[M: %d, B: %d, C: %d]\", i, i \/\/ 7, i \/\/ 9))\n    end\n  end\n  return ans\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210378,"user_id":null,"body":"local solution = {}\n\n-- return a table of strings\nfunction solution.howMuch(m, n)\n  local res = {}\n  for k = math.min(m, n), math.max(m, n) do\n    if k % 7 == 2 and k % 9 == 1 then\n      res[#res+1] = (\"[M: %d, B: %d, C: %d]\"):format(k, k\/\/7, k\/\/9)\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210379,"user_id":492,"body":"local solution = {}\n\nfunction solution.howMuch(m, n)\n    local i = math.min(m, n)\n    local j = math.max(m, n)\n    local res = {}\n    while (i <= j) do\n        if ((i % 9 == 1) and (i %7 == 2)) then\n            table.insert(res, \"[M: \" .. i .. \", B: \" .. math.floor(i \/ 7) .. \", C: \" .. math.floor(i \/ 9) .. \"]\")\n        end\n        i = i + 1\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210380,"user_id":null,"body":"local solution = {}\n\nfunction solution.howMuch(m, n)\n  -- enforce m <= n\n  if m > n then\n    m, n = n, m\n  end\n  \n  -- c must start close to the lower bound rem 9\n  local c = m \/\/ 9\n  \n  -- all solutions lie on the line c = 7\/9 b + 1\/9\n  -- that gives a slope of 7\/9, with the first possible answer pair at (5, 4)\n  -- every answer pair n can be found as (5 + 9n, 4 + 7n) due to the slope\n  -- therefore the first value of c above our initial guess\n  -- were c mod 7 = 4 is a valid solution\n  local x = c % 7\n  if x < 4 then\n    c = c + 4 - x\n  elseif x > 4 then\n    c = c + 11 - x\n  end\n  \n  -- now c represents a valid solution in the total problem space\n  -- enforce that it is greater or equal to the lower bound\n  local f = c * 9 + 1\n  if f < m then\n    f = f + 63\n    c = c + 7\n  end\n  \n  -- finally, determine b\n  local b = f \/\/ 7\n  \n  -- find all successive solutions that are below the upper bound\n  local results = {}\n  while f <= n do\n    table.insert(results, string.format(\"[M: %d, B: %d, C: %d]\", f, b, c))\n    f = f + 63\n    c = c + 7\n    b = b + 9\n  end\n  return results\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210381,"user_id":null,"body":"local solution = {}\n\nfunction solution.howMuch(m, n)\n  local results = {}\n  \n  if m > n then\n    m, n = n, m\n  end\n  \n  local c = m \/\/ 9\n  local x = c * 9 + 1\n  \n  if x < m then\n    x = x + 9\n    c = c + 1\n  end\n  \n  while x <= n do\n    if x % 7 == 2 then\n      table.insert(results, \"[M: \" .. x .. \", B: \" .. x \/\/ 7 .. \", C: \" .. c .. \"]\")\n    end\n    x = x + 9\n    c = c + 1\n  end\n  \n  return results\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210382,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.howMuch(m, n)\n  local result = {}\n  for f = math.min(m, n), math.max(n, m) do\n    local c = (f - 1) \/ 9\n    local b = (f - 2) \/ 7\n    if c == math.floor(c) and b == math.floor(b) then\n      table.insert(result, string.format(\"[M: %d, B: %d, C: %d]\", f, b, c))\n    end \n  end\n  \n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210383,"user_id":168,"body":"local solution = {}\n\n-- return a table of strings\nfunction solution.howMuch(m, n)\n  m, n = math.min(m, n), math.max(m, n)\n  local res = {}\n  for f = m + -(m - 1) % 9, n, 9 do\n    if (f - 2) % 7 == 0 then\n      table.insert(res, string.format('[M: %d, B: %d, C: %d]', f, (f - 2) \/\/ 7, (f - 1) \/\/ 9))\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210384,"user_id":null,"body":"local solution = {}\n-- return a table of strings\nfunction solution.howMuch(m, n)\n  -- your code\n  solutionTable = {}\n  a = 1\n  for i = math.min(m,n), math.max(m,n) do\n    if (((i-1)%9) == 0) and (((i-2)%7) == 0) then\n      solutionTable[a] = \"[M: \"..i..\", B: \"..((i-2)\/\/7)..\", C: \"..((i-1)\/\/9)..\"]\"\n      a = a + 1\n    end\n  end\n  print(m)\n  print(n)\n  print(solutionTable)\n  return solutionTable\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210385,"user_id":null,"body":"local solution = {}\n\n-- return a table of strings\nfunction solution.howMuch(m, n)\n  local res = {}\n  local temp = 0\n  local i = 1\n  \n  if(m>n) then\n    temp = m\n    m = n\n    n = temp\n  end\n  \n  for f = m , n do\n    local b = (f-2)\/7\n    local c = (7*b + 1)\/9\n    \n    if b - math.floor(b) == 0 and c - math.floor(c) == 0 then\n      res[i] = string.format(\"[M: %d, B: %d, C: %d]\",math.tointeger(f),math.tointeger(b),math.tointeger(c))\n      i  = i + 1\n    end\n  end\n  \n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210386,"user_id":null,"body":"local solution = {}\n\nfunction isInteger(n)\n  local _, frac = math.modf(n)\n  return frac == 0.0\nend\n\n-- return a table of strings\nfunction solution.howMuch(m, n)\n  -- 9 * c == x - 1 --> x == 9 * c + 1\n  -- 7 * b == x - 2 --> x == 7 * b + 2\n  local result = {}\n  for x = math.min(m, n), math.max(m, n) do\n    local c = (x - 1) \/ 9\n    local b = (x - 2) \/ 7\n    if isInteger(c) and isInteger(b) then\n      local solution = string.format('[M: %d, B: %d, C: %d]', x, b, c)\n      table.insert(result, solution)\n    end\n  end\n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55be10de92aad5ef28000023":[{"id":210387,"user_id":53,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n  local res = 1\n  local i = 0\n  while i <= n do\n    if res == m then\n      return i\n    end\n    res = res * (n - i) \/ (i +1)\n    i = i + 1\n  end\n  return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210388,"user_id":492,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n    local result, i = 1, 0\n    while i <= n do\n        if (result == m) then return i end\n        result = result * (n - i) \/\/ (i + 1)\n        i = i + 1\n    end\n    return -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210389,"user_id":1474,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n  cnt = 1\n  for i = 0, n-1 do\n    print(cnt)\n    if cnt == m then\n      return i\n    end\n    cnt = cnt * (n - i) \/ (i + 1)\n  end\n  return -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210390,"user_id":null,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n    x,b = 0,1\n    while (m ~= b) do\n        x = x + 1\n        if x>n\n            then return -1\n        end\n        b = b * (n-x+1)\/x\n    end\n    return x\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210391,"user_id":168,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n  local c = 1\n  for i = 0, n \/\/ 2 do\n    if c == m then return i end\n    if c > m then break end\n    c = c * (n - i) \/\/ (i + 1)\n  end\n  return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210392,"user_id":null,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n  local lh = 1\n  local rh = m\n  for i = 0, n \/ 2 do\n    if lh == rh then\n      return i  \n    end\n    lh = lh * (n - i)\n    rh = rh * (1 + i)\n  end\n  return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210393,"user_id":null,"body":"local solution = {}\n\nfunction solution.checkChoose(m, n)\n  local b = 1\n  for x = 0, n \/ 2 + 1 do\n    if b == m then\n      return x\n    end\n    b = b * (n - x) \/ (x + 1)\n  end\n  return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210394,"user_id":null,"body":"local solution = {}\n\nlocal function prime_factors(number)\n    local factors = {}\n    local fact = 2\n    while number > 1 do\n        if number % fact == 0 then\n            table.insert(factors, fact)\n            number = number \/ fact\n        else fact = fact + 1 end\n    end\n    return factors\nend\n\nlocal function combinations(n, x)\n    local numerators = {}\n    local denominators = {}\n    for i = math.max(x, n-x)+1, n do\n        local pfs = prime_factors(i)\n        for j = 1, #pfs do\n            table.insert(numerators, pfs[j])\n        end\n    end\n    for i = 2, math.min(x, n-x) do\n        local pfs = prime_factors(i)\n        for j = 1, #pfs do\n            table.insert(denominators, pfs[j])\n        end\n    end\n    table.sort(numerators, function(a,b) return a < b end)\n    table.sort(denominators, function(a, b) return a < b end)\n    while #denominators > 0 do\n        for i = #numerators, 1, -1 do\n            if numerators[i] == denominators[#denominators] then\n                table.remove(numerators, i)\n                table.remove(denominators, #denominators)\n            end\n        end\n    end\n    local mult = 1\n    for i = 1, #numerators do\n        mult = mult*numerators[i]\n    end\n    return mult\nend  \n  \nfunction solution.checkChoose(m, n)\n    for x = 0, n do\n        if combinations(n, x) == m then return x end\n    end\n    return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210395,"user_id":null,"body":"function bin_coef_opt(n, k)\n    if k > n - k then\n        k = n - k\n    end\n\n    local result = 1\n    for i=1, k do\n        result = result * (n - i + 1)\n        result = result \/ (i)\n    end\n    return result\nend\n\nlocal solution = {}\nfunction solution.checkChoose(m, n)\n    if m == 1 then\n        return 0\n    end\n  \n    local min_x = m + 1\n    local min_i = -1\n    for i=1,n do\n        local x = bin_coef_opt(n, i)\n        if x >= m and x < min_x then\n            min_x = x\n            min_i = i\n        end\n    end\n    return min_i\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210396,"user_id":null,"body":"-- local solution = {}\n\n-- function solution.checkChoose(m, n)\n--   -- your code\n--   if(m==0 or n==0)then return 0 end\n--   local nums={}\n--   local num=1\n--   local den=1\n--   for i=n,1,-1 do\n--    table.insert(nums,i)\n--   end\n--   local result=0\n--   for i=1,n do\n--     num=num*nums[i]\n--     den=den*nums[n+1-i]\n--     if(num\/\/den==m)then result=i break\n--     end\n--   end\n--   if(result~=0)then return result\n--   else return -1\n--   end\n-- --   return i\n-- end\n-- return solution\nlocal solution = {}\n\nfunction solution.checkChoose(m, n)\n  local res = 1\n  local i = 0\n  while i <= n do\n    if res == m then\n      return i\n    end\n    res = res * (n - i) \/ (i +1)\n    i = i + 1\n  end\n  return -1\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55c45be3b2079eccff00010f":[{"id":210397,"user_id":null,"body":"local solution = {}\n\nfunction solution.order(words) \n  local t = {}\n  \n  for word in words:gmatch(\"%w+\") do\n     local pos = tonumber(word:match(\"%d+\"))\n     t[pos] = word\n  end\n  \n  return table.concat(t, \" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210398,"user_id":null,"body":"local solution = {}\n\nfunction order(String)\n  local Words, Numbers = {}, {}\n  for item in string.gmatch(String, \"%S+\") do\n    table.insert(Words, item)\n  end\n  for i = 1, #Words do\n    local Word = Words[i]\n\t  local Number = Word:match(\"[1-9]\")\n    local IntegerNumber = tonumber(Number)\n\t  Numbers[IntegerNumber] = Word\n  end\n  local ReturnString = \"\"\n  for i = 1, #Numbers do\n    if i == #Numbers then\n      ReturnString = ReturnString .. Numbers[i]\n    else\n      ReturnString = ReturnString .. Numbers[i] .. \" \"\n    end\n  end\n  return ReturnString\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210399,"user_id":null,"body":"function order(words)\n  local res = {}\n  for word in words:gmatch '%S+' do\n    res[tonumber(word:match'%d+')] = word\n  end\n  return table.concat(res, ' ')\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210400,"user_id":null,"body":"function split(inputstr, sep)\n  if sep == nil then\n    sep = \"%s\"\n  end\n  local t={}\n  for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n    table.insert(t, str)\n  end\n  return t\nend\n\nfunction inspect(tbl)\n  for i,v in pairs(tbl) do print(\"Key\/IDX: \" .. i, \"Value: \" .. v) end\nend\n\nfunction order(words)\n  local words_arr = split(words, \" \") \n  local sorted_words = {} \n  for i,v in ipairs(words_arr) do\n    local max, min = 0\n    for idx=1,9 do\n      if string.match(v, tostring(idx)) then sorted_words[idx] = v end\n    end\n  end\n  \n  inspect(sorted_words)\n  return table.concat(sorted_words, \" \")\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210401,"user_id":null,"body":"local sep = \" \"\nfunction order(words)\n  if string.len(words) == 1 then return \"\" end\n  local _words = {}\n  local fullletter = \"\"\n  for i = 1, string.len(words) do\n    local letter = string.sub(words, i, i)\n    if letter ~= sep then\n      fullletter = fullletter..letter\n    else\n      table.insert(_words, fullletter)\n      fullletter = \"\"\n    end\n  end\n  table.insert(_words, fullletter)\n  table.sort(_words, function(a, b)\n    local a_ind\n    local b_ind\n      \n    for i = 1, string.len(a) do\n        local letter = string.sub(a, i, i)\n        local n = tonumber(letter)\n        if n then      \n          a_ind = n\n        end\n    end\n      \n    for i = 1, string.len(b) do\n      local letter = string.sub(b, i, i)\n      local n = tonumber(letter)\n      if n then      \n        b_ind = n\n      end\n    end\n      \n    return a_ind < b_ind\n  end)\n  local result = \"\"\n  for i = 1, #_words do\n    local w = _words[i]\n    result = result .. w\n    result = i == #_words and result or result .. \" \"\n  end\n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210402,"user_id":null,"body":"function order(words)\n  local t = {}\n  words:gsub(\"%S+\", function(s) t[tonumber(s:match(\"%d\"))]=s end)\n  return table.concat(t,\" \")\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210403,"user_id":null,"body":"function order(words)\n  local wordArray = {  };\n    local tableLen = 0;\n    for word in words:gmatch(\"%S+\") do\n        local number = word:match(\"%d+\");\n        wordArray[number] = word;\n        tableLen = tableLen + 1;\n    end\n    table.sort(wordArray);\n\n    local fixedString = \"\";\n    local counter = 1;\n    while counter <= tableLen do\n        fixedString = fixedString .. wordArray[tostring(counter)] .. \" \";\n        counter = counter + 1;\n    end\n\n\n    return fixedString:sub(1,-2);\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210404,"user_id":198,"body":"function order(words)\n  local sol = {}\n  for w in string.gmatch(words, \"%w+\") do\n    for n in string.gmatch(w, \"%d+\") do\n      local i = tonumber(n)\n      sol[i] = w\n    end\n  end\n  return table.concat(sol, \" \")\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210405,"user_id":null,"body":"function order(words)\n  -- ...\n  local sep = \" \"\n    local t={}\n    for str in string.gmatch(words, \"([^\"..sep..\"]+)\") do\n              table.insert(t, str)\n    end\n\n    local result = {}\n    for index, value in ipairs(t) do\n        local res, _ = value:gsub(\"%D+\", \"\")\n        result[tonumber(res)] = value\n    end\n  \n  return table.concat(result, \" \")\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210406,"user_id":null,"body":"function order(str)\n  if str == \"\" then return str end\n  \n  local words = {}\n  for word in str:gmatch(\"%w+\") do words[#words+1] = word end\n  \n  local sorted = {}\n  for i=1, #words do\n    sorted[tonumber(words[i]:match(\"%d\"))] = words[i]\n  end\n\n  local str = \"\"\n  for i=1, #sorted do\n    str = str ..  sorted[i]\n    if i ~= #sorted then str = str .. \" \" end\n  end\n  \n  return str\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55c6126177c9441a570000cc":[{"id":210407,"user_id":null,"body":"local solution = {}\nfunction solution.order_weight(str)\n  local list = {}\n  for v in str:gmatch(\"%d+\") do\n    list[#list+1] = v\n  end\n  table.sort(list, function(a, b)\n    local diff = 0\n    for i = 1, #a do\n      diff = diff + a:sub(i, i)\n    end\n    for i = 1, #b do\n      diff = diff - b:sub(i, i)\n    end\n    if diff == 0 then return a < b end\n    return diff < 0\n  end)\n  return table.concat(list, \" \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210408,"user_id":null,"body":"local solution = {}\nfunction solution.order_weight(str)\n  local res = {}\n  for n in str:gmatch '%d+' do res[#res+1] = n end\n  table.sort(res, function(x, y)\n    local s1, s2 = 0, 0\n    tostring(x):gsub('.', function(d) s1=s1+tonumber(d) end)\n    tostring(y):gsub('.', function(d) s2=s2+tonumber(d) end)\n    return s1 < s2 or s1==s2 and x<y\n  end)\n  return table.concat(res, ' ')\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210409,"user_id":null,"body":"-- \u592atm \u6298\u78e8\u4e86 --\nfunction split(str, split_char)      \n    local sub_str_tab = {}\n    while true do          \n        local pos = string.find(str, split_char) \n        if not pos then              \n            table.insert(sub_str_tab,str)\n            break\n        end  \n        local sub_str = string.sub(str, 1, pos - 1)              \n        table.insert(sub_str_tab,sub_str)\n        str = string.sub(str, pos + 1, string.len(str))\n    end      \n    return sub_str_tab\nend\nlocal solution = {}\nfunction solution.getweight(num)\n  ret = 0\n  while num ~= 0 do\n    ret = ret + num % 10\n    num = num \/\/ 10\n  end\n  return ret\nend\nfunction solution.order_weight(str)\n  -- Your code here.\n  sortLst = {}\n  lst = split(str, ' ')\n  for i = 1, #lst do\n    lst[i] = tonumber(lst[i])\n    if lst[i] == nil then\n      break\n    end\n    w = solution.getweight(lst[i])\n    sortLst[i] = {w, lst[i], i}\n  end\n  table.sort(sortLst, function(a, b)    \n    if a[1] == b[1] then\n        return tostring(a[2]) < tostring(b[2])\n    end\n    return a[1] < b[1]\n    end\n  )\n  ret = \"\"    \n  for i = 1, #sortLst do    \n    if ret ~= \"\" then\n      ret = ret .. \" \"\n    end\n    ret = ret .. tostring(sortLst[i][2])\n  end\n  return ret\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210410,"user_id":null,"body":"local solution = {}\n\nfunction solution.string2table(str)\n    local tbl = {}\n    for value in str:gmatch(\"%d+\") do\n        local obj = {}\n        obj.str = value\n        obj.weight = - value:len() * (\"0\"):byte()\n        for i = 1,value:len() do\n            obj.weight = obj.weight + value:byte(i,i)\n        end\n        table.insert(tbl,obj)\n    end\n    return tbl    \nend\n\nfunction solution.table2string(tbl)\n    local strs = {}\n    for _,value in ipairs(tbl) do\n        table.insert(strs,value.str)\n    end\n    return table.concat(strs,\" \")\nend\n\nfunction solution.compare(a,b)\n    if a.weight == b.weight then\n        return a.str < b.str\n    else\n        return a.weight < b.weight\n    end\nend  \n\nfunction solution.order_weight(str)\n    local list = solution.string2table(str)\n    table.sort(list,solution.compare)\n    return solution.table2string(list)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210411,"user_id":492,"body":"local solution = {}\n\nlocal function weight(str)\n  local sum = 0\n  for i = 1, #str do\n    sum = sum + tonumber(str:sub(i, i))\n  end\n  return sum\nend\n\nfunction solution.order_weight(str)\n  local weights = {}\n  for s in string.gmatch(str, \"%d+\") do\n    table.insert(weights, s)\n  end\n  if (#weights == 0) then\n    return \"\"\n  end\n  table.sort(weights, function(a, b)\n    local aWeight = weight(a)\n    local bWeight = weight(b)\n    if (aWeight < bWeight) then\n      return true\n    elseif (bWeight < aWeight) then\n      return false\n    else\n      return a < b\n    end\n  end)\n  local result = \"\"\n  for _, v in ipairs(weights) do\n    result = result .. v .. \" \"\n  end\n  return result:sub(1, -2)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210412,"user_id":492,"body":"local solution = {}\nfunction solution.order_weight(s)\n    local function split(str, pattern)\n        if not pattern then pattern = \"%S+\" end\n        local t = {}\n        for s in str:gmatch(pattern) do\n          table.insert(t, s)\n        end\n        return t\n    end\n    local function sumdig(s)\n        local total = 0; local j = 0;\n        for digit in string.gmatch(s, \"%d\") do\n            total = total + digit\n            j = j + 1\n        end\n        return total\n    end\n    function compare(a, b)\n      local w1, w2 = sumdig(a), sumdig(b)\n      if w1 == w2 then\n        return a < b\n      end\n      return w1 < w2\n    end\n    local a = split(s)\n    table.sort(a, compare)\n    return table.concat(a, \" \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210413,"user_id":null,"body":"local solution = {}\nfunction solution.order_weight(str)\n  local function weight(s) \n    local w=0\n    for c in s:gmatch(\".\") do w=w+tonumber(c) end\n    return w\n  end\n  local t, res = {},\"\"\n  str:gsub(\"%S+\",function(s) table.insert(t, {weight(s),s}) end)\n  table.sort(t, function(a,b) return a[1]==b[1] and a[2]<b[2] or a[1]<b[1] end)\n  for i=1, #t do res=res..t[i][2]..\" \" end\n  return res:sub(1,-2)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210414,"user_id":null,"body":"local solution = {}\nfunction solution.order_weight(str)\n  --weight func\n  cv=function(x)\n    s=0\n    for i=1,#x do\n      s=s+x:sub(i,i)\n    end\n    return math.floor(s)\n  end\n  --sort func\n  sort=function(a,b)\n    if(a[2]==b[2]) then\n      return a[1]<b[1]\n    else\n      return a[2]<b[2]\n    end\n  end\n  \n  res={}\n  for str in string.gmatch(str,\"([^ ]+)\") do\n    table.insert(res,{str,cv(str)})\n  end\n  \n  table.sort(res,sort)\n  strR=\"\"\n  for i,v in pairs(res) do\n    strR=strR .. v[1] .. (i==#res and \"\" or \" \")\n  end\n    \n  return strR\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210415,"user_id":null,"body":"local solution = {}\n\nlocal function findNumbers(str, digits)\n  digits = not digits\n  \n  local numbers = {}\n  for n in str:gmatch(\"%d\" .. (digits and \"+\" or \"\")) do\n    table.insert(numbers, n)\n  end\n  return numbers\nend\n\n\nlocal function sumDigits(str)\n  local sum = 0\n  for _, digit in pairs(findNumbers(str, true)) do\n    sum = sum + tonumber(digit)\n  end\n  return sum\nend\n\n\nlocal function tableToString(t)\n  local str = \"\"\n  for _, i in pairs(t) do\n    str = str .. i .. \" \"\n  end\n  return str:sub(1, -2)\nend\n\n\nlocal function sortAlphabetically(a, b)\n  local t = {a, b}\n  table.sort(t)\n  return t[1]\nend\n\n\nfunction solution.order_weight(str)\n  local scores = findNumbers(str)\n  \n  table.sort(scores, function(a, b)\n    local weight_a = sumDigits(a)\n    local weight_b = sumDigits(b)\n    local alphabetical = sortAlphabetically(a, b) == a\n        \n    return weight_a < weight_b \n           or weight_a == weight_b and a ~= b and alphabetical\n  end)\n  \n  return tableToString(scores)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210416,"user_id":null,"body":"local solution = {}\nfunction solution.order_weight(str)\n  local r = {}\n  for w in str:gmatch(\"%d+\") do\n    r[#r+1] = w\n  end\n  table.sort(r, function(a,b)\n    local x = 0\n    local y = 0\n    for d in a:gmatch(\"%d\") do\n        x = x + tonumber(d)\n    end\n    for d in b:gmatch(\"%d\") do\n        y = y + tonumber(d)\n    end\n    if x == y then\n      return (a<b)\n    else\n      return (x<y)\n    end\n  end)\n  return table.concat(r, \" \")\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55cbc3586671f6aa070000fb":[{"id":210417,"user_id":76,"body":"return function(base, factor)\n  return base % factor == 0\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210418,"user_id":null,"body":"return function(base, factor)\n  if factor % base == 0 or base % factor == 0 then\n    return true -- your code here\n  else\n    return false\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210419,"user_id":null,"body":"return function(base, factor)\n  return 0 == base % factor -- your code here\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210420,"user_id":null,"body":"return function(b,f)\n  local mf=math.floor\n  return mf(b\/f)==b\/f\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210421,"user_id":null,"body":"\n\n\nreturn function(base, factor)\n   return (base % factor == 0) and true or false\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210422,"user_id":null,"body":"return function(base, factor)\n    if base % factor ~= 0 then\n        return false\n    else\n        return true\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210423,"user_id":null,"body":"return function(base, factor)\n  local rest = base%factor\n  if rest==0 then\n    return true \n    else\n      return false\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210424,"user_id":null,"body":"return function(base, factor)\n  local remainder = 0\n  remainder = base%factor\n  if remainder == 0 then\n    return true \n    else \n     return false\n    end\n  end","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210425,"user_id":null,"body":"return function(base, factor)\n  if(base ~= 0 and base % factor == 0) then return true\n  else return false end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210426,"user_id":null,"body":"return function(base, factor)\n  if base % factor == 0 then\n    return true\n  else\n    return false\n    end\n  return\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55d24f55d7dd296eb9000030":[{"id":210427,"user_id":null,"body":"return function(n)\n    return n * (n + 1) \/ 2;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210428,"user_id":null,"body":"local kata = {}\n\nfunction kata.summation(n)\n    return n * (n + 1) \/ 2;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210429,"user_id":null,"body":"return function(n)\n  local accumulator = 0\n  for i=1,n do\n    accumulator = accumulator + i\n  end\n  return accumulator\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210430,"user_id":null,"body":"return function (n)\n\tif n > 0 then\n\t\tsum = 0\n\t\tfor i=0,n,1 do\n\t\t\tsum = sum + i\n\t\tend\n\tend\n  return sum\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210431,"user_id":null,"body":"return function ( n )\n  local _ = 0\n  \n  for index = 1, n do\n    _ = _ + index\n  end \n  \n  return _\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210432,"user_id":null,"body":"return function(n)\n  -- your code here\n  if n==1 \n    then return 1\n    else return (1+n)*n\/2\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210433,"user_id":null,"body":"return function(n)\n  local a = 0\n  for i = 1, n, 1 do\n      a = a + i \n  end\n  return a\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210434,"user_id":null,"body":"return function(n)\n  local sum = 0\n  for i=0, n do\n    sum = sum + i\n  end\n  return sum\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210435,"user_id":null,"body":"return function(n)\n  local x = 0\n  for i = 1, n, 1\n  do\n    x = x + i\n  end\n  \n  return x\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210436,"user_id":null,"body":"return function(n)\n  s = 0\n  for i=1, n do\n    s = i + s\n  end\n  return s\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55e2adece53b4cdcb900006c":[{"id":210437,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1>=v2 then return { -1, -1, -1 } end\n  sec = (3600*g)\/\/(v2-v1)\n  return {sec\/\/3600, sec%3600\/\/60, sec%60}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210438,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then return { -1, -1, -1 } end\n  local t = 3600 * g \/\/ (v2 - v1)\n  return {t\/\/3600, t\/\/60%60, t%60}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210439,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n    if (v1 > v2) then\n        return { -1, -1, -1 }\n    else\n\n        local time = g \/ (v2 - v1)\n\n        local all_seconds = (time * 60 * 60) \/\/ 1\n       \n        local hours = all_seconds \/\/ 3600\n    \n        local minutes = (all_seconds \/\/ 60 - math.floor(hours) * 60) \/\/ 1\n       \n        local seconds = all_seconds - math.floor(hours) * 3600 - math.floor(minutes) * 60 \n       \n        return { math.floor(hours), math.floor(minutes), math.floor(seconds) }\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210440,"user_id":168,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then\n    return { -1, -1, -1 }\n  else\n    local t = (3600 * g) \/\/ (v2 - v1)\n    return {t \/\/ 3600, t % 3600 \/\/ 60, t % 60}\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210441,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then return { -1, -1, -1 } end\n  local vd = v2 - v1\n  local s = 60 * 60 * g \/ vd\n  m = math.floor(s \/ 60)\n  s = s % 60\n  h = math.floor(m \/ 60)\n  m = m % 60\n  return {math.floor(h), math.floor(m), math.floor(s)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210442,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then return { -1, -1, -1 } end\n  \n  t = g \/ (v2-v1)  + 0.00001\n  hours = math.floor(t)\n  m = (t - hours) * 60\n  minutes = math.floor(m)\n  seconds = math.floor((m-minutes) * 60)\n  return {hours, minutes, seconds}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210443,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then return {-1,-1,-1} end\n  v3 = v2 - v1\n  v3 = v3\/3600\n  s = g\/v3\n  m = s\/\/60\n  h = m\/\/60\n  return {h, m%60, math.floor(s)%60}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210444,"user_id":null,"body":"local solution = {}\n\nlocal function get_hour_min_sec(t)\n  local res = t * 3600\n  \n  local hours = res \/\/ 3600\n  res = res % 3600\n  \n  local mins = res \/\/ 60\n  res = res % 60\n  \n  local secs = res \/\/ 1\n  \n  return hours, mins, secs\nend\n\n--[[\n  v2 * x           =  v1 * x + g\n  v2 * x - v1 * x  =  g\n  (v2 - v1) * x    =  g\n  x                =  g \/ (v2 - v1)\n--]]\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then\n    return { -1, -1, -1 }\n  end\n  \n  local catch_time = g \/ (v2 - v1)\n  \n  return {get_hour_min_sec(catch_time)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210445,"user_id":null,"body":"local solution = {}\n\nfunction solution.race(v1, v2, g)\n  if v1 >= v2 then return { -1, -1, -1 } end\n  x = g * 3600 \/\/ (v2 - v1);\n  return {x\/\/3600, (x\/\/60)%60, x%60}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210446,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.race(v1, v2, g)\n  local delta = v2 - v1\n  if delta > 0 then\n    local hoursNeeded = g \/ delta\n    local hours = math.floor(hoursNeeded)\n    secondsNeeded = hoursNeeded * 3600 % 3600\n    local minutes = math.floor(secondsNeeded \/ 60)\n    local seconds = math.floor(secondsNeeded % 60)\n    \n    return {hours, minutes, seconds}\n  end\n  \n  return { -1, -1, -1 }\nend\n\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55e6f5e58f7817808e00002e":[{"id":210447,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n    local i = 0\n    while m >= 100 do\n      i = i + 1\n      local y = m % 10\n      local x = (m-y)\/10\n      m = x - 2*y\n    end\n    return {m, i}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210448,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n  local steps, d = 0\n  while m >= 100 do\n    d = m%10\n    m = m\/\/10 - 2*d\n    steps = steps + 1\n  end\n  return {m, steps}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210449,"user_id":null,"body":"local solution = {}\n\nlocal target = {7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}\nfor _, value in ipairs(target) do\n  target[value] = true\nend\n\nfunction solution.seven(m)\n    local count = 0\n    while not target[value] and m >= 100 do\n      m = math.floor(m\/10) - 2*(m%10)\n      count = count + 1\n    end\n    return {m, count}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210450,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n    local x\n    local y\n  \n    local res = {0, 0}\n  \n    if #tostring(m)<2 then\n       return res\n    end\n  \n    for i=1,#tostring(m) do\n      if i==1 then\n        x = string.sub(m,1,-2)\n        y = math.floor(x - (2*tonumber(string.sub(m,-1))))\n      else\n        x = string.sub(y,1,-2)\n        y = math.floor(x - (2*tonumber(string.sub(y,-1))))\n      end\n    \n      if #tostring(y)<=2 and #tostring(y)>0 then\n          res = {y, i}\n        break\n      end\n      \n    end\n\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210451,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n    local nrOfSteps = 0\n    while m > 99 do\n      y = 2 * (m % 10)\n      m = math.floor(m \/ 10) - y\n      nrOfSteps = nrOfSteps + 1\n    end\n    return {m, nrOfSteps}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210452,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n  steps = 0\n  while m > 99 do\n    m = m \/\/ 10 - 2*(m % 10)\n    steps = steps + 1\n  end\n  return {m, steps}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210453,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(x)\n  local steps = 0\n  while x > 99 do\n    x = math.floor(x \/ 10) - 2 * (x % 10)\n    steps = steps + 1\n  end\n  return {x, steps}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210454,"user_id":1474,"body":"local solution = {}\n\nfunction solution.seven(m)\n  n = m\n  cnt = 0\n  while n > 99 do\n    n = math.floor(n \/ 10) - 2 * (n % 10)\n    cnt = cnt + 1\n  end\n  return {n, cnt}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210455,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n    local steps, digits = 0, #tostring(m)\n    while digits > 2 do\n      local m_string = tostring(m)\n      m = tonumber(m_string:sub(0, -2)) - 2 * tonumber(m_string:sub(-1))\n      digits, steps = #tostring(m), steps + 1 \n    end\n    return {m, steps}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210456,"user_id":null,"body":"local solution = {}\n\nfunction solution.seven(m)\n    local step=0\n    while(m>99)do\n      local b=m%10\n      local a=(m-b)\/10\n      m=a-2*b\n      step=step+1\n    end\n    return{m,step}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55ecd718f46fba02e5000029":[{"id":210457,"user_id":null,"body":"local function between(a, b)\n    l = {}\n    for i = a, b do\n      l[i-a+1] = i\n    end\n  return l\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210458,"user_id":null,"body":"local function between(a, b)\n  local arr={}\n  \n  for i=a,b do\n    table.insert(arr,i)\n  end\n  \n  return arr\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210459,"user_id":null,"body":"local function between(a, b)\n    -- your code here\n  if a < b then\n    local tBetween = { }\n    local c = ( b - a + 1 )\n    for i = 1, c do\n      tBetween[i] = a\n      a = a + 1\n    end\n  return tBetween\n  end\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210460,"user_id":null,"body":"local function between(a, b)\n    local array = {}\n    \n    for i = a, b ,1 do\n      table.insert(array,i)\n    end\n  \n  return array\n\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210461,"user_id":null,"body":"local function between(a, b)\n    local tb = {}\n    for i = a, b do \n        table.insert(tb,i)\n    end\n    return tb\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210462,"user_id":null,"body":"local function between(a, b)\n    result = {};\n  for i=a,b do\n    table.insert(result, i);\n  end\n  return result\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210463,"user_id":null,"body":"local function between(a, b)\n  local tabla = {}\n  for i=a, b do\n    tabla[#tabla + 1] = i\n  end\n  return tabla\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210464,"user_id":null,"body":"local function between(a, b)\n  arr = {}\n  for i = 1, b - a + 1, 1 do\n    arr[i] = a + i -1\n  end\n  return arr\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210465,"user_id":null,"body":"local function between(a, b)\n  local result = {}\n  for i = a, b do\n    table.insert(result, i)\n  end\n  return result\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"},{"id":210466,"user_id":null,"body":"local function between(a, b)\n  local array = {}\n  \n  for  i = a, b, 1 do\n    table.insert(array, i)\n  end\n  \n  return array\n    -- your code here\nend\n\nreturn between\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:25:23"}],"55f3da49e83ca1ddae0000ad":[{"id":210467,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  print('hdvt:', h, d, vt)\n  local radius = d \/ 2\n  local depth = vt \/ (math.pi * radius^2)\n  print('depth:', depth)\n  -- cos(angle) = (radius - h) \/ radius\n  local angle = math.acos(1 - h\/radius)  -- between 0 (empty) and \u03c0 (full)\n  print('angle:', angle)\n  -- area of a circle = \u03c0 * radius^2, area of an arc of angle angle: \u03c0 * radius^2 * angle \/ 2\u03c0 = radius^2 * angle \/ 2\n  local area_of_arc = radius^2 * angle \/ 2\n  print('area circ:', math.pi * radius^2, 'area of arc:', area_of_arc)\n  local area_of_triangle = (radius - h)*math.sqrt(radius^2 - (radius-h)^2)\/2\n  print('area of triangle:', area_of_triangle)\n  print ''\n  return math.floor(2 * (area_of_arc - area_of_triangle) * depth)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210468,"user_id":53,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local n = math.acos(1.0 - h \/ (d \/ 2.0)) * 2.0\n  local m = vt * (n - math.sin(n)) \/ (2.0 * math.pi)\n  return math.floor(m)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210469,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  \n  local vol_restant\n  \n    if h < d\/2 then\n\n      local r =  d\/2 --rayon du cylindre ou hypotenus du triangle rectangle\n      local adj = r - h --c\u00f4t\u00e9 adjasent du triangle rectangle\n      local opp = math.sqrt((r)^2 - (adj)^2) --c\u00f4t\u00e9 oppos\u00e9 du triangle rectangle\n      local rad_theta = math.atan(opp\/adj)\n      local angle_theta = math.deg(rad_theta) --angle obtu theta du triangle rectangle\n      local circonf = 2*(math.pi*r) -- circonference du cercle\n      local dbl_theta = angle_theta*2 --\n      local arc = circonf*(dbl_theta\/360) -- longueur de l'arc de cercle\n      local air_tri_rec = (adj*opp)\/2 --aire du triangle rectangle\n      local air_tri = air_tri_rec * 2 --aire du triangle entier\n      local air_sect = (math.pi*dbl_theta*(r^2))\/360 --aire du secteur entier\n      local air_liquide = air_sect - air_tri -- aire du liquide\n      local air_cercle = math.pi*(r^2) -- aire de la base du cylindre\n      local h_cylindre = vt \/ air_cercle -- hauteur du cylindre\n    \n      vol_restant = air_liquide * h_cylindre --resulta\n\n    elseif h == d\/2 then\n\n      vol_restant = vt\/2\n\n    elseif h > d\/2 then\n\n      local r = d\/2\n      local air_cercle = math.pi*(r^2) -- aire de la base du cylindre\n      local h_cylindre = vt \/ air_cercle -- hauteur du cylindre\n      local CB = r\n      local AC = r-(d-h)\n      local DB = 2*(math.sqrt(r^2-AC^2))\n      local AB = DB \/ 2\n      local angleABC = math.deg(math.atan(AC\/AB))\n      local angleACB  =  90 - angleABC\n      local angleDCB = angleACB * 2\n      local air_sect_DCB = (math.pi * angleDCB * r^2)\/360\n      local air_DCB =(AB*AC)\n      local air_VIDE = air_sect_DCB - air_DCB\n      local air_PLEIN  = air_cercle - air_VIDE\n    \n      vol_restant = air_PLEIN * h_cylindre\n\nend\n\n      return math.floor(vol_restant)\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210470,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  r=d\/2\n  l=vt\/(math.pi*(r*r))\n  ang=math.acos((r-h)\/r)\n  x=r* math.sin(ang)\n  vtr=(r-h)*x*l\n  sc=(vt*ang\/math.pi)\n  return math.floor(sc-vtr)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210471,"user_id":198,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local r = d \/ 2\n  local ang = math.acos((r - h) \/ r) * 2\n  local ht = vt \/ (math.pi * r^2)\n  return math.floor(ht * ( (r^2 * ang)\/2 - (r^2 * math.sin(ang)) \/ 2))\n  -- not much programming\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210472,"user_id":168,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local r = d \/ 2\n  local s0 = r ^ 2 * math.pi\n  local s1 = math.acos((r - h) \/ r) * r ^ 2\n  local s2 = (r - h) * (h * (d - h)) ^ 0.5\n  return math.floor((s1 - s2) \/ s0 * vt)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210473,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local r = (d\/2)\n  local sh = vt \/ (math.pi * r^2)\n  return math.floor(sh * ((r^2)*math.acos((r-h)\/r)-(r-h)*math.sqrt(2*r*h-h^2)))\n\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210474,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local PI = 3.1415926535\n  local cr = d\/2\n  local ch = vt\/(PI*(cr)^2)\n  local th = cr - h\n\n  local phi = 2*math.acos(th\/cr)\n\n  local result = (phi\/(2*PI) * PI * cr^2 - th^2 * math.tan(phi\/2)) * ch\n  return math.modf(result)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210475,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  local r = d\/2\n  local t = 2 * math.acos((r - h)\/r)\n  return math.floor(r ^ 2 * (t - math.sin(t)) * vt \/ (math.pi * r ^ 2) \/ 2)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210476,"user_id":null,"body":"local solution = {}\n\nfunction solution.tankvol(h, d, vt)\n  return math.floor(0.5 * ((d\/2) ^ 2) * (2 * math.acos(((d\/2) - h)\/(d\/2)) - math.sin(2 * math.acos(((d\/2) - h)\/(d\/2)))) * vt \/ (math.pi * (d\/2) ^ 2))\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55f9bca8ecaa9eac7100004a":[{"id":210477,"user_id":null,"body":"return function(h, m, s)\n  return ((3600*h) + (60 * m) + s) * 1000\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210478,"user_id":null,"body":"return function(h, m, s)\n  return h * 3600000 + m * 60000 + s * 1000 \nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210479,"user_id":527,"body":"return function(h, m, s)\n  return ((h * 60 + m) * 60 + s) * 1000\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210480,"user_id":null,"body":"return function(h, m, s)\n  return (h*3.6e+6)+(m*6e+4)+(s*1e+3)\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210481,"user_id":null,"body":"return function(h, m, s)\n  if (h >= 0 and 23 >= h) then\n        if (m >= 0 and 59 >= m) then\n            if (s >= 0 and 59 >= s) then\n                h = (h * 60 * 60) * 1000\n                m = (m * 60) * 1000\n                s = s * 1000\n                return h + m + s\n            else\n                os.exit()\n            end\n        else\n            os.exit()\n        end\n    else\n        os.exit()\n    end\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210482,"user_id":null,"body":"return function(h, m, s)\n  return (s + m * 60 + h * 60^2) * 1000\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210483,"user_id":null,"body":"return function(h, m, s)\n  return (h*60*60+m*60+s)*1000\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210484,"user_id":null,"body":"return function(h, m, s)\n  local time = h\n  time = 60*time + m\n  time = 60*time + s\n  return time * 1000\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210485,"user_id":null,"body":"return function(h, m, s)\n  return (h * 36*10^5 ) + ( m * 6*10^4) + ( s * 10^3)\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210486,"user_id":null,"body":"return function(h, m, s)\n  milliseconds = (h * 3600 + m * 60 + s) * 1000\n  return milliseconds\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"55fd2d567d94ac3bc9000064":[{"id":210487,"user_id":527,"body":"local kata = {}\n\nfunction kata.row_sum_odd_numbers(n)\n  return n ^ 3\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210488,"user_id":645,"body":"return function(n)\n  return n * n * n\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210489,"user_id":null,"body":"return function(n)\n  -- your code here\n  start = 1 + (n * (n-1))\n  total = 0;\n  for i=1,n,1 do\n    local b = start + ((i-1)*2);\n    total = total + b;\n  end \n  return total;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210490,"user_id":null,"body":"return function (n)\n        local oddn = 1\n        for i=1, n do\n                sum = 0\n                for j=1, i do\n                  sum = sum + oddn\n                  oddn = oddn + 2\n                end\n        end\n        return sum\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210491,"user_id":null,"body":"return function(n)\n  return n * (((n * (n + 1) \/ 2 - n + 1) * 2 - 1) * 2 + ((n - 1) * 2)) \/ 2\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210492,"user_id":null,"body":"return function(n)\n  -- This is basically:\n  --   local sum = 0\n  --   for v = n^2 - n + 1, n^2 + n - 1, 2 do\n  --     sum = sum + v\n  --   end\n  --   return sum\n  -- or in other words:\n  return n^3\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210493,"user_id":null,"body":"return function(n)\n  sum = 0\n  for i=0, n-1 do\n    sum = sum + i\n  end\n  num = (sum*2)+1\n  answer = 0\n  for i=1, n do\n    answer = answer + num\n    num = num + 2\n  end\n  return answer\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210494,"user_id":null,"body":"return function(n)\n  local sum = 0\n  for i=1, n do\n    sum = sum + 1 + (2 * (i - 1))\n  end\n  return sum * n\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210495,"user_id":null,"body":"return function(n)\n  local startPos = (n*(n-1))+1\n  local endPos = startPos+(n*2)-2\n  local total = 0\n\n  for i = startPos, endPos do\n    if i % 2 ~= 0 then\n      total = total + i\n    end\n  end\n\n  return total\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210496,"user_id":null,"body":"return function(n)\n  local a1 = n * n - n + 1\n  return (a1 + n - 1) * n\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5601409514fc93442500010b":[{"id":210497,"user_id":null,"body":"return {\n  better_than_average= function(class_points, your_points)\n    local sum = 0\n    for _, v in pairs(class_points) do\n      sum = sum + v\n    end\n    return sum \/ #class_points < your_points\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210498,"user_id":1624,"body":"avg = function(array)\n  n = 0\n  d = 0\n  for i,v in ipairs(array) do\n    n = n + v\n    d = d + 1\n  end\n  return n\/d\nend\n\nbetter_than_average = function(class_points, your_points)\n  return your_points > avg(class_points)\nend\n\nreturn {better_than_average=better_than_average}\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210499,"user_id":null,"body":"return {\n  better_than_average = function(class_points, your_points)\n    local sum = 0\n    for _, p in ipairs(class_points) do sum = sum + p end\n    local average = sum \/ #class_points\n\n    return your_points > average\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210500,"user_id":null,"body":"local solution = {}\n\nfunction solution.better_than_average(class_score, your_score)\n  local average = 0\n  \n  for i, v in pairs(class_score) do\n    average = average + v\n  end\n  \n  average = average \/ #class_score\n  \n  return your_score > average and true or false\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210501,"user_id":null,"body":"return {\n  better_than_average= function(class_points, your_points)\n    \n      -- Make it green, then make it clean :) \n      sum = 0\n      for i=1,#class_points do\n        sum = sum + class_points[i]\n      end\n      \n      if your_points >= (sum \/ #class_points) then\n        return true\n      else\n        return false\n      end\n    \n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210502,"user_id":null,"body":"return {\n  better_than_average= function(class_points, your_points)\n      local total = 0\n    \n      for k,v in pairs(class_points) do\n        total = total + v\n      end\n    \n      return your_points > total \/ #class_points\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210503,"user_id":null,"body":"package.preload[\"lume\"] = package.preload[\"lume\"] or function(...)\n  --\n  -- lume\n  --\n  -- Copyright (c) 2020 rxi\n  --\n  -- Permission is hereby granted, free of charge, to any person obtaining a copy of\n  -- this software and associated documentation files (the \"Software\"), to deal in\n  -- the Software without restriction, including without limitation the rights to\n  -- use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies\n  -- of the Software, and to permit persons to whom the Software is furnished to do\n  -- so, subject to the following conditions:\n  --\n  -- The above copyright notice and this permission notice shall be included in all\n  -- copies or substantial portions of the Software.\n  --\n  -- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  -- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  -- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  -- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  -- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  -- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  -- SOFTWARE.\n  --\n  \n  local lume = { _version = \"2.3.0\" }\n  \n  local pairs, ipairs = pairs, ipairs\n  local type, assert, unpack = type, assert, unpack or table.unpack\n  local tostring, tonumber = tostring, tonumber\n  local math_floor = math.floor\n  local math_ceil = math.ceil\n  local math_atan2 = math.atan2 or math.atan\n  local math_sqrt = math.sqrt\n  local math_abs = math.abs\n  \n  local noop = function()\n  end\n  \n  local identity = function(x)\n    return x\n  end\n  \n  local patternescape = function(str)\n    return str:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\", \"%%%1\")\n  end\n  \n  local absindex = function(len, i)\n    return i < 0 and (len + i + 1) or i\n  end\n  \n  local iscallable = function(x)\n    if type(x) == \"function\" then return true end\n    local mt = getmetatable(x)\n    return mt and mt.__call ~= nil\n  end\n  \n  local getiter = function(x)\n    if lume.isarray(x) then\n      return ipairs\n    elseif type(x) == \"table\" then\n      return pairs\n    end\n    error(\"expected table\", 3)\n  end\n  \n  local iteratee = function(x)\n    if x == nil then return identity end\n    if iscallable(x) then return x end\n    if type(x) == \"table\" then\n      return function(z)\n        for k, v in pairs(x) do\n          if z[k] ~= v then return false end\n        end\n        return true\n      end\n    end\n    return function(z) return z[x] end\n  end\n  \n  \n  \n  function lume.clamp(x, min, max)\n    return x < min and min or (x > max and max or x)\n  end\n  \n  \n  function lume.round(x, increment)\n    if increment then return lume.round(x \/ increment) * increment end\n    return x >= 0 and math_floor(x + .5) or math_ceil(x - .5)\n  end\n  \n  \n  function lume.sign(x)\n    return x < 0 and -1 or 1\n  end\n  \n  \n  function lume.lerp(a, b, amount)\n    return a + (b - a) * lume.clamp(amount, 0, 1)\n  end\n  \n  \n  function lume.smooth(a, b, amount)\n    local t = lume.clamp(amount, 0, 1)\n    local m = t * t * (3 - 2 * t)\n    return a + (b - a) * m\n  end\n  \n  \n  function lume.pingpong(x)\n    return 1 - math_abs(1 - x % 2)\n  end\n  \n  \n  function lume.distance(x1, y1, x2, y2, squared)\n    local dx = x1 - x2\n    local dy = y1 - y2\n    local s = dx * dx + dy * dy\n    return squared and s or math_sqrt(s)\n  end\n  \n  \n  function lume.angle(x1, y1, x2, y2)\n    return math_atan2(y2 - y1, x2 - x1)\n  end\n  \n  \n  function lume.vector(angle, magnitude)\n    return math.cos(angle) * magnitude, math.sin(angle) * magnitude\n  end\n  \n  \n  function lume.random(a, b)\n    if not a then a, b = 0, 1 end\n    if not b then b = 0 end\n    return a + math.random() * (b - a)\n  end\n  \n  \n  function lume.randomchoice(t)\n    return t[math.random(#t)]\n  end\n  \n  \n  function lume.weightedchoice(t)\n    local sum = 0\n    for _, v in pairs(t) do\n      assert(v >= 0, \"weight value less than zero\")\n      sum = sum + v\n    end\n    assert(sum ~= 0, \"all weights are zero\")\n    local rnd = lume.random(sum)\n    for k, v in pairs(t) do\n      if rnd < v then return k end\n      rnd = rnd - v\n    end\n  end\n  \n  \n  function lume.isarray(x)\n    return type(x) == \"table\" and x[1] ~= nil\n  end\n  \n  \n  function lume.push(t, ...)\n    local n = select(\"#\", ...)\n    for i = 1, n do\n      t[#t + 1] = select(i, ...)\n    end\n    return ...\n  end\n  \n  \n  function lume.remove(t, x)\n    local iter = getiter(t)\n    for i, v in iter(t) do\n      if v == x then\n        if lume.isarray(t) then\n          table.remove(t, i)\n          break\n        else\n          t[i] = nil\n          break\n        end\n      end\n    end\n    return x\n  end\n  \n  \n  function lume.clear(t)\n    local iter = getiter(t)\n    for k in iter(t) do\n      t[k] = nil\n    end\n    return t\n  end\n  \n  \n  function lume.extend(t, ...)\n    for i = 1, select(\"#\", ...) do\n      local x = select(i, ...)\n      if x then\n        for k, v in pairs(x) do\n          t[k] = v\n        end\n      end\n    end\n    return t\n  end\n  \n  \n  function lume.shuffle(t)\n    local rtn = {}\n    for i = 1, #t do\n      local r = math.random(i)\n      if r ~= i then\n        rtn[i] = rtn[r]\n      end\n      rtn[r] = t[i]\n    end\n    return rtn\n  end\n  \n  \n  function lume.sort(t, comp)\n    local rtn = lume.clone(t)\n    if comp then\n      if type(comp) == \"string\" then\n        table.sort(rtn, function(a, b) return a[comp] < b[comp] end)\n      else\n        table.sort(rtn, comp)\n      end\n    else\n      table.sort(rtn)\n    end\n    return rtn\n  end\n  \n  \n  function lume.array(...)\n    local t = {}\n    for x in ... do t[#t + 1] = x end\n    return t\n  end\n  \n  \n  function lume.each(t, fn, ...)\n    local iter = getiter(t)\n    if type(fn) == \"string\" then\n      for _, v in iter(t) do v[fn](v, ...) end\n    else\n      for _, v in iter(t) do fn(v, ...) end\n    end\n    return t\n  end\n  \n  \n  function lume.map(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    for k, v in iter(t) do rtn[k] = fn(v) end\n    return rtn\n  end\n  \n  \n  function lume.all(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if not fn(v) then return false end\n    end\n    return true\n  end\n  \n  \n  function lume.any(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if fn(v) then return true end\n    end\n    return false\n  end\n  \n  \n  function lume.reduce(t, fn, first)\n    local started = first ~= nil\n    local acc = first\n    local iter = getiter(t)\n    for _, v in iter(t) do\n      if started then\n        acc = fn(acc, v)\n      else\n        acc = v\n        started = true\n      end\n    end\n    assert(started, \"reduce of an empty table with no first value\")\n    return acc\n  end\n  \n  \n  function lume.unique(t)\n    local rtn = {}\n    for k in pairs(lume.invert(t)) do\n      rtn[#rtn + 1] = k\n    end\n    return rtn\n  end\n  \n  \n  function lume.filter(t, fn, retainkeys)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    if retainkeys then\n      for k, v in iter(t) do\n        if fn(v) then rtn[k] = v end\n      end\n    else\n      for _, v in iter(t) do\n        if fn(v) then rtn[#rtn + 1] = v end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.reject(t, fn, retainkeys)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    local rtn = {}\n    if retainkeys then\n      for k, v in iter(t) do\n        if not fn(v) then rtn[k] = v end\n      end\n    else\n      for _, v in iter(t) do\n        if not fn(v) then rtn[#rtn + 1] = v end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.merge(...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local t = select(i, ...)\n      local iter = getiter(t)\n      for k, v in iter(t) do\n        rtn[k] = v\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.concat(...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local t = select(i, ...)\n      if t ~= nil then\n        local iter = getiter(t)\n        for _, v in iter(t) do\n          rtn[#rtn + 1] = v\n        end\n      end\n    end\n    return rtn\n  end\n  \n  \n  function lume.find(t, value)\n    local iter = getiter(t)\n    for k, v in iter(t) do\n      if v == value then return k end\n    end\n    return nil\n  end\n  \n  \n  function lume.match(t, fn)\n    fn = iteratee(fn)\n    local iter = getiter(t)\n    for k, v in iter(t) do\n      if fn(v) then return v, k end\n    end\n    return nil\n  end\n  \n  \n  function lume.count(t, fn)\n    local count = 0\n    local iter = getiter(t)\n    if fn then\n      fn = iteratee(fn)\n      for _, v in iter(t) do\n        if fn(v) then count = count + 1 end\n      end\n    else\n      if lume.isarray(t) then\n        return #t\n      end\n      for _ in iter(t) do count = count + 1 end\n    end\n    return count\n  end\n  \n  \n  function lume.slice(t, i, j)\n    i = i and absindex(#t, i) or 1\n    j = j and absindex(#t, j) or #t\n    local rtn = {}\n    for x = i < 1 and 1 or i, j > #t and #t or j do\n      rtn[#rtn + 1] = t[x]\n    end\n    return rtn\n  end\n  \n  \n  function lume.first(t, n)\n    if not n then return t[1] end\n    return lume.slice(t, 1, n)\n  end\n  \n  \n  function lume.last(t, n)\n    if not n then return t[#t] end\n    return lume.slice(t, -n, -1)\n  end\n  \n  \n  function lume.invert(t)\n    local rtn = {}\n    for k, v in pairs(t) do rtn[v] = k end\n    return rtn\n  end\n  \n  \n  function lume.pick(t, ...)\n    local rtn = {}\n    for i = 1, select(\"#\", ...) do\n      local k = select(i, ...)\n      rtn[k] = t[k]\n    end\n    return rtn\n  end\n  \n  \n  function lume.keys(t)\n    local rtn = {}\n    local iter = getiter(t)\n    for k in iter(t) do rtn[#rtn + 1] = k end\n    return rtn\n  end\n  \n  \n  function lume.clone(t)\n    local rtn = {}\n    for k, v in pairs(t) do rtn[k] = v end\n    return rtn\n  end\n  \n  \n  function lume.fn(fn, ...)\n    assert(iscallable(fn), \"expected a function as the first argument\")\n    local args = { ... }\n    return function(...)\n      local a = lume.concat(args, { ... })\n      return fn(unpack(a))\n    end\n  end\n  \n  \n  function lume.once(fn, ...)\n    local f = lume.fn(fn, ...)\n    local done = false\n    return function(...)\n      if done then return end\n      done = true\n      return f(...)\n    end\n  end\n  \n  \n  local memoize_fnkey = {}\n  local memoize_nil = {}\n  \n  function lume.memoize(fn)\n    local cache = {}\n    return function(...)\n      local c = cache\n      for i = 1, select(\"#\", ...) do\n        local a = select(i, ...) or memoize_nil\n        c[a] = c[a] or {}\n        c = c[a]\n      end\n      c[memoize_fnkey] = c[memoize_fnkey] or {fn(...)}\n      return unpack(c[memoize_fnkey])\n    end\n  end\n  \n  \n  function lume.combine(...)\n    local n = select('#', ...)\n    if n == 0 then return noop end\n    if n == 1 then\n      local fn = select(1, ...)\n      if not fn then return noop end\n      assert(iscallable(fn), \"expected a function or nil\")\n      return fn\n    end\n    local funcs = {}\n    for i = 1, n do\n      local fn = select(i, ...)\n      if fn ~= nil then\n        assert(iscallable(fn), \"expected a function or nil\")\n        funcs[#funcs + 1] = fn\n      end\n    end\n    return function(...)\n      for _, f in ipairs(funcs) do f(...) end\n    end\n  end\n  \n  \n  function lume.call(fn, ...)\n    if fn then\n      return fn(...)\n    end\n  end\n  \n  \n  function lume.time(fn, ...)\n    local start = os.clock()\n    local rtn = {fn(...)}\n    return (os.clock() - start), unpack(rtn)\n  end\n  \n  \n  local lambda_cache = {}\n  \n  function lume.lambda(str)\n    if not lambda_cache[str] then\n      local args, body = str:match([[^([%w,_ ]-)%->(.-)$]])\n      assert(args and body, \"bad string lambda\")\n      local s = \"return function(\" .. args .. \")\nreturn \" .. body .. \"\nend\"\n      lambda_cache[str] = lume.dostring(s)\n    end\n    return lambda_cache[str]\n  end\n  \n  \n  local serialize\n  \n  local serialize_map = {\n    [ \"boolean\" ] = tostring,\n    [ \"nil\"     ] = tostring,\n    [ \"string\"  ] = function(v) return string.format(\"%q\", v) end,\n    [ \"number\"  ] = function(v)\n      if      v ~=  v     then return  \"0\/0\"      --  nan\n      elseif  v ==  1 \/ 0 then return  \"1\/0\"      --  inf\n      elseif  v == -1 \/ 0 then return \"-1\/0\" end  -- -inf\n      return tostring(v)\n    end,\n    [ \"table\"   ] = function(t, stk)\n      stk = stk or {}\n      if stk[t] then error(\"circular reference\") end\n      local rtn = {}\n      stk[t] = true\n      for k, v in pairs(t) do\n        rtn[#rtn + 1] = \"[\" .. serialize(k, stk) .. \"]=\" .. serialize(v, stk)\n      end\n      stk[t] = nil\n      return \"{\" .. table.concat(rtn, \",\") .. \"}\"\n    end\n  }\n  \n  setmetatable(serialize_map, {\n    __index = function(_, k) error(\"unsupported serialize type: \" .. k) end\n  })\n  \n  serialize = function(x, stk)\n    return serialize_map[type(x)](x, stk)\n  end\n  \n  function lume.serialize(x)\n    return serialize(x)\n  end\n  \n  \n  function lume.deserialize(str)\n    return lume.dostring(\"return \" .. str)\n  end\n  \n  \n  function lume.split(str, sep)\n    if not sep then\n      return lume.array(str:gmatch(\"([%S]+)\"))\n    else\n      assert(sep ~= \"\", \"empty separator\")\n      local psep = patternescape(sep)\n      return lume.array((str..sep):gmatch(\"(.-)(\"..psep..\")\"))\n    end\n  end\n  \n  \n  function lume.trim(str, chars)\n    if not chars then return str:match(\"^[%s]*(.-)[%s]*$\") end\n    chars = patternescape(chars)\n    return str:match(\"^[\" .. chars .. \"]*(.-)[\" .. chars .. \"]*$\")\n  end\n  \n  \n  function lume.wordwrap(str, limit)\n    limit = limit or 72\n    local check\n    if type(limit) == \"number\" then\n      check = function(s) return #s >= limit end\n    else\n      check = limit\n    end\n    local rtn = {}\n    local line = \"\"\n    for word, spaces in str:gmatch(\"(%S+)(%s*)\") do\n      local s = line .. word\n      if check(s) then\n        table.insert(rtn, line .. \"\n\")\n        line = word\n      else\n        line = s\n      end\n      for c in spaces:gmatch(\".\") do\n        if c == \"\n\" then\n          table.insert(rtn, line .. \"\n\")\n          line = \"\"\n        else\n          line = line .. c\n        end\n      end\n    end\n    table.insert(rtn, line)\n    return table.concat(rtn)\n  end\n  \n  \n  function lume.format(str, vars)\n    if not vars then return str end\n    local f = function(x)\n      return tostring(vars[x] or vars[tonumber(x)] or \"{\" .. x .. \"}\")\n    end\n    return (str:gsub(\"{(.-)}\", f))\n  end\n  \n  \n  function lume.trace(...)\n    local info = debug.getinfo(2, \"Sl\")\n    local t = { info.short_src .. \":\" .. info.currentline .. \":\" }\n    for i = 1, select(\"#\", ...) do\n      local x = select(i, ...)\n      if type(x) == \"number\" then\n        x = string.format(\"%g\", lume.round(x, .01))\n      end\n      t[#t + 1] = tostring(x)\n    end\n    print(table.concat(t, \" \"))\n  end\n  \n  \n  function lume.dostring(str)\n    return assert((loadstring or load)(str))()\n  end\n  \n  \n  function lume.uuid()\n    local fn = function(x)\n      local r = math.random(16) - 1\n      r = (x == \"x\") and (r + 1) or (r % 4) + 9\n      return (\"0123456789abcdef\"):sub(r, r)\n    end\n    return ((\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"):gsub(\"[xy]\", fn))\n  end\n  \n  \n  function lume.hotswap(modname)\n    local oldglobal = lume.clone(_G)\n    local updated = {}\n    local function update(old, new)\n      if updated[old] then return end\n      updated[old] = true\n      local oldmt, newmt = getmetatable(old), getmetatable(new)\n      if oldmt and newmt then update(oldmt, newmt) end\n      for k, v in pairs(new) do\n        if type(v) == \"table\" then update(old[k], v) else old[k] = v end\n      end\n    end\n    local err = nil\n    local function onerror(e)\n      for k in pairs(_G) do _G[k] = oldglobal[k] end\n      err = lume.trim(e)\n    end\n    local ok, oldmod = pcall(require, modname)\n    oldmod = ok and oldmod or nil\n    xpcall(function()\n      package.loaded[modname] = nil\n      local newmod = require(modname)\n      if type(oldmod) == \"table\" then update(oldmod, newmod) end\n      for k, v in pairs(oldglobal) do\n        if v ~= _G[k] and type(v) == \"table\" then\n          update(v, _G[k])\n          _G[k] = v\n        end\n      end\n    end, onerror)\n    package.loaded[modname] = oldmod\n    if err then return nil, err end\n    return oldmod\n  end\n  \n  \n  local ripairs_iter = function(t, i)\n    i = i - 1\n    local v = t[i]\n    if v ~= nil then\n      return i, v\n    end\n  end\n  \n  function lume.ripairs(t)\n    return ripairs_iter, t, (#t + 1)\n  end\n  \n  \n  function lume.color(str, mul)\n    mul = mul or 1\n    local r, g, b, a\n    r, g, b = str:match(\"#(%x%x)(%x%x)(%x%x)\")\n    if r then\n      r = tonumber(r, 16) \/ 0xff\n      g = tonumber(g, 16) \/ 0xff\n      b = tonumber(b, 16) \/ 0xff\n      a = 1\n    elseif str:match(\"rgba?%s*%([%d%s%.,]+%)\") then\n      local f = str:gmatch(\"[%d.]+\")\n      r = (f() or 0) \/ 0xff\n      g = (f() or 0) \/ 0xff\n      b = (f() or 0) \/ 0xff\n      a = f() or 1\n    else\n      error((\"bad color string '%s'\"):format(str))\n    end\n    return r * mul, g * mul, b * mul, a * mul\n  end\n  \n  \n  local chain_mt = {}\n  chain_mt.__index = lume.map(lume.filter(lume, iscallable, true),\n    function(fn)\n      return function(self, ...)\n        self._value = fn(self._value, ...)\n        return self\n      end\n    end)\n  chain_mt.__index.result = function(x) return x._value end\n  \n  function lume.chain(value)\n    return setmetatable({ _value = value }, chain_mt)\n  end\n  \n  setmetatable(lume,  {\n    __call = function(_, ...)\n      return lume.chain(...)\n    end\n  })\n  \n  \n  return lume\nend\nlocal function _1_(var_0, var_1)\n  local lume = require(\"lume\")\n  local function _2_(var_2, var_3)\n    return (var_2 + var_3)\n  end\n  return ((var_1 * #var_0) > lume.reduce(var_0, _2_, 0))\nend\nreturn {better_than_average = _1_}\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210504,"user_id":null,"body":"return {\n  better_than_average= function(class_points, your_points)\n      -- Make it green, then make it clean :)\n      local Result = load(\"return \" .. table.concat(class_points, \"+\"))()\n      return Result\/#class_points < your_points\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210505,"user_id":null,"body":"return {\n  better_than_average= function(class_points, your_points)\n    TotalSum = 0\n    for i in ipairs(class_points) do\n      TotalSum = TotalSum + class_points[i]\n      Average = TotalSum \/ #class_points\n      end\n    if your_points > Average then \n      return true\n      else \n      return false\n    end\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210506,"user_id":812,"body":"return {\n  better_than_average = function(class_points, your_points)\n    local total = 0\n    for i, v in pairs(class_points) do\n      total = total + v\n    end\n    local avrg = total \/ #class_points\n    return avrg < your_points\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5613d06cee1e7da6d5000055":[{"id":210507,"user_id":492,"body":"local solution = {}\n\nfunction solution.step(g, start, nd)\n    local function isprime(n)\n        if n <= 1 or ( n ~= 2 and n % 2 == 0 ) then\n            return false\n        end\n        local i = 3\n        while i * i <= n do\n            if n % i == 0 then\n                return false\n            end\n            i = i + 2\n        end\n        return true\n    end\n    local i, res = start, {}\n    i = start\n    while (i <= nd - g) do\n        if (isprime(i) and isprime(i + g)) then\n          res[1] = i\n          res[2] = i + g\n          break\n        end\n        i = i + 1\n    end\n    return res\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210508,"user_id":null,"body":"local solution = {}\n\n-- main subroutine\nfunction solution.step(step, start, finish)\n    local primes = {}\n  \n    for n = start, finish - step do\n        if isPrime(n) then\n            if isPrime(n + step) then\n                return {n, n + step}\n            end\n        end\n    end\n  \n    return {}\nend\n\n-- returns true if n is prime\nfunction isPrime(n)\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n        end\n    end\n  \n    return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210509,"user_id":53,"body":"local solution = {}\n\nfunction solution.step(g, m, n)\n  for i=m,n-g do\n    if is_prime(i) and is_prime(i+g) then\n      return {i, i+g}\n    end\n  end\n  return {}\nend\n\nfunction is_prime(n)\n  for i=2,math.floor(math.sqrt(n)) do\n    if i ~= n and n%i == 0 then return false end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210510,"user_id":null,"body":"local solution = {}\n\nfunction solution.step(g, start, nd)\n local function is_prime(n)\n   for i = 2, n^.5 do if n%i==0 then return false end end\n   return true\n end \n for i = start, nd-g do\n  if is_prime(i) and is_prime(i+g) then return {i, i+g} end\n end\n return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210511,"user_id":null,"body":"local solution = {}\n\nfunction solution.step(g, start, nd)\n  -- your code\n  function check_prime(n)\n    for i = 2, math.floor(math.pow(n,0.5)) do\n      if n%i == 0 then return nil end\n    end\n    return 1\n  end\n  for i = start, nd do\n    if check_prime(i) and check_prime(i+g) then return {i,i+g} end\n  end\n  return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210512,"user_id":null,"body":"local solution = {}\n\nlocal function is_prime(n)\n    if n < 2 or n == 2 or n % 2 == 0 then\n        return false\n    end\n    \n    for Index = 3, math.sqrt(n), 2 do\n        if n % Index == 0 then\n            return false\n        end\n    end\n  \n    return true\nend\n\nfunction solution.step(g, start, nd)\n    local primes = {}\n  \n    for i = start, nd do\n        local _ = is_prime(i) and table.insert(primes, i)\n    end\n  \n    for i = 1, #primes do\n        for i2 = 1, #primes do\n            if math.abs(primes[i] - primes[i2]) == g then return {primes[i], primes[i2]} end\n        end\n    end\n  \n    return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210513,"user_id":null,"body":"local solution = {}\n\nfunction is_prime(n)\n  for i=2,math.sqrt(n)+1 do\n    if n%i==0 then return false end\n  end\n  return true\nend\n\nfunction solution.step(g, start, nd)\n  for i=start,nd-g do\n    if is_prime(i) and is_prime(i+g) then\n      return {i, i+g}\n    end\n  end\n  return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210514,"user_id":null,"body":"local solution = {}\n\nfunction solution.step(g, start, nd)\n  local ret = {}\n  for i = start, nd do\n    if i < 2 then\n    elseif i == 2 then\n      table.insert(ret, i)\n    else\n      local ok = true\n      for k = 2, i do\n        if i % k == 0 then\n          ok = false\n          break\n        end\n        if k ^ 2 > i then\n          break\n        end\n      end\n      if ok then\n        table.insert(ret, i)\n      end\n    end\n    if #ret == 1 then\n      local num = ret[1] + g\n      local ok = true\n      for j = 2, num do\n        if num % j == 0 then\n          ok = false\n          break\n        end\n        if j ^ 2 > num then\n          break\n        end\n      end\n      if ok then\n        table.insert(ret, num)\n        return ret\n      end\n      ret = {}\n    end\n  end\n  return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210515,"user_id":null,"body":"local solution = {}\n\nfunction table.filter(self, predicate)\n  local result = {}\n  for k, v in pairs(self) do\n    if predicate(v, k) then\n      result[k] = v\n    end\n  end\n  return result\nend\n\nfunction table.find(self, predicate)\n  for k, v in pairs(self) do\n    if predicate(v, k) then\n      return v, k\n    end\n  end\nend\n\nlocal isPrime = function(n)\n  for divisor = 2, math.floor(math.sqrt(n)), 1 do\n    if n % divisor == 0 then\n      return false\n    end\n  end\n  return true\nend\n\nlocal primes = function(begin, finish)\n  local iterator = function(nd, n)\n    for maybePrime = n + 1, nd, 1 do\n      if isPrime(maybePrime) then\n        return maybePrime\n      end\n    end\n  end\n  \n  return iterator, finish, begin - 1\nend\n\nfunction solution.step(g, start, nd)\n  local primesSoFar = {}\n  for prime in primes(start, nd) do    \n    local gSpaced = table.find(primesSoFar, function(n) return prime - n == g end)\n    if gSpaced then\n      return { gSpaced, prime }\n    end\n\n    primesSoFar = table.filter(primesSoFar, function(n) return prime - n < g end)\n    table.insert(primesSoFar, prime)\n  end\n  return { }\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210516,"user_id":null,"body":"local solution = {}\n\n-- a Sieve of Eratosthenes\n-- requires set of odd natural numbers and 2 as the first param\n-- removes composite numbers from the set\nfunction solution.sievein( prime, first, last )\n  if first < 3 then first=3 end\n  if (first % 2) == 0 then first = first + 1 end\n  last = math.sqrt(last)\n  for p = first, last, 2 do\n    if prime[p] then\n      for j = 2*p, last, p do\n        prime[j] = nil\n      end\n    end\n  end\n  return prime\nend\n\n-- create a set of natural numbers within first..last\n-- consisting of 2, 3, k*6-1 k*6+1\nfunction solution.presieve( first, last )\n  local prime = {}\n  if first < 2 then first=2 end\n  if 2 >= first then prime[2] = true end\n  if 3 >= first then prime[3] = true end\n  local rem = (first%6)\n  if rem <= 1 then\n    prime[first+1-rem] = true\n  end\n  first = first + 6 - rem\n  for i = first, last, 6 do\n    prime[i-1] = true\n    prime[i+1] = true\n  end\n  prime[last+1] = nil\n  return prime\nend\n\n-- remove multiples of elements of the otherset from the first set\nfunction solution.sieveout( prime, otherset, last )\n  for p in pairs(otherset) do\n    for m = 2*p, last, p do\n      prime[m] = nil\n    end\n  end\n  return prime\nend\n\n-- implement a two-segment Sieve of Eratosthenes\nfunction solution.two_stage_sieve( first, last )\n  if first < 2 then first=2 end\n  if last < first then last = first end\n  local st1last = math.ceil(math.sqrt(last))\n  local prime1 = solution.presieve( 2, st1last )\n  solution.sievein( prime1, 2, st1last )\n  local prime2 = solution.presieve( first, last )\n  solution.sieveout( prime2, prime1, last )\n  return prime2\nend\n\n-- turns out, that precomputing the entire range was too slow\nfunction solution.is_prime( prime, test )\n  if prime[test] then\n    return true\n  end\n  if test % 2 == 0 then\n    return false\n  end\n  for p in pairs(prime) do\n    if (test % p) == 0 then\n      return false\n    end\n  end\n  prime[test] = true\n  return true\nend\n\nfunction solution.step(g, start, last)\n  print(g..\" \"..start..\" \"..last)\n  local st1last = math.ceil(math.sqrt(last))\n  local prime = solution.presieve( 2, st1last )\n  solution.sievein( prime, 2, st1last )\n\n  for s = start, last do\n    if solution.is_prime( prime, s ) and solution.is_prime( prime, s+g ) then\n      print(\"step \"..s..\"&\"..s+g)\n      return {s,s+g}\n    end\n  end\n  return {}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5616868c81a0f281e500005c":[{"id":210517,"user_id":null,"body":"local solution = {}\n\nfunction solution.rank(st, we, n)\n  if #st==0 then return \"No participants\" end\n  if n>#we then return \"Not enough participants\" end\n  local p, c = {}, 1\n  for str in st:gmatch\"[^,]+\" do\n      local s = #str\n      for n in str:gmatch\".\" do\n          s = s + n:lower():byte() - 96\n      end\n      table.insert(p, {v = s*we[c], name = str})\n      c=c+1\n  end\n  table.sort(p, function(a,b) return a.v == b.v and a.name < b.name or a.v > b.v end)\n  return p[n].name\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210518,"user_id":168,"body":"local solution = {}\n\nfunction solution.rank(st, we, n)\n  local r, i = {}, 1\n  for p in st:gmatch('[^,]+') do\n    local x, s = p:upper(), #p\n    for c in x:gmatch('.') do\n      s = s + c:byte() - 64\n    end\n    table.insert(r, {-s * we[i], p})\n    i = i + 1\n  end\n  if #r == 0 then\n    return 'No participants'\n  elseif n > #r then\n    return 'Not enough participants'\n  end\n  table.sort(r, function(a, b) \n      local d = a[1] - b[1]\n      if d == 0 then\n        return a[2] < b[2]\n      else\n        return d < 0\n      end\n  end)\n  return r[n][2]\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210519,"user_id":null,"body":"local solution = {}\nlocal chars = \"abcdefghijklmnopqrstuvwxyz\"\nfunction solution.rank(st, we, n)\n  if not st:match(\"%a\") then\n    return(\"No participants\")\n  end\n  if n > #we then\n    return(\"Not enough participants\")\n  end\n  local names = {}\n  local order = {}\n  local idx = 0\n  for name in st:gmatch(\"([%a]+)\") do\n    idx = idx + 1\n    local som = #name \n    for char in name:gmatch(\"%a\") do\n      local worth = chars:find(char:lower())\n      som = som + worth\n    end\n    som = som * we[idx]\n    if not names[som] then \n      names[som] = {}\n    end\n    table.insert(names[som], name)\n  end\n  for num, _ in pairs(names) do\n      table.insert(order, num)\n  end\n  table.sort(order)\n  local rang = {}\n  for i = #order, 1, -1 do\n    local num = order[i] \n    if num then\n      table.sort(names[num])\n      for i, name in pairs(names[num]) do\n          table.insert(rang, name)\n      end\n    end\n  end\n  return rang[n]\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210520,"user_id":null,"body":"local solution = {}\n\nfunction table.fromIterator(iter)\n  local result = {}\n  for v in iter do\n    table.insert(result, v)\n  end\n  return result\nend\n\nfunction table.map(self, transform)\n  local result = {}\n  for k, v in pairs(self) do\n    result[k] = transform(v, k)\n  end\n  return result\nend\n\nfunction table.zip(self, other)\n  local result = {}\n  local length = math.min(#self, #other)\n  for k = 1, length, 1 do\n    result[k] = { self[k], other[k] }\n  end\n  return result\nend\n\nfunction string.chars(self)\n  return self:gmatch('.')\nend\n\nfunction string.split(self, separator)\n  local notSeparator = string.format('[^%s]+', separator)\n  return self:gmatch(notSeparator)\nend\n\nlocal winningNumber = function(name, weight)\n  local ranks = table.map(\n    table.fromIterator(name:chars()),\n    function(c) return c:lower():byte() - string.byte('a') + 1 end\n  )\n\n  local sum = name:len()\n  for _, v in ipairs(ranks) do\n    sum = sum + v\n  end\n  \n  return sum * weight\nend\n\nfunction solution.rank(st, we, n)\n  if st == '' then\n    return 'No participants'\n  end\n    \n  local names = table.fromIterator(st:split(','))\n  if n > #names then\n    return 'Not enough participants'\n  end\n  \n  local winningNumbers = table.map(\n    table.zip(names, we),\n    function(pair) return {pair[1], winningNumber(table.unpack(pair))} end\n  )\n\n  table.sort(winningNumbers, function(a, b)\n      return a[2] == b[2] and a[1] < b[1] or a[2] > b[2]\n  end)\n  return winningNumbers[n][1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210521,"user_id":null,"body":"local solution = {}\n\nlocal byteA = string.byte(\"a\") - 1\n\nfunction solution.rank(st, we, n)\n\tlocal arr = {}\n\tlocal index = 0\n\tfor name in string.gmatch(st, \"[^,]+\") do\n\t\tindex = index + 1\n\t\tarr[#arr+1] = {name}\n\t\tname = name:lower()\n\n\t\tlocal sum = 0\n\t\tfor i = 1, #name do\n\t\t\tsum = sum + (string.byte(string.sub(name, i, i)) - byteA)\n\t\tend\n\n\t\tarr[#arr][2] = (sum + #name) * we[index]\n\tend\n\n\tif #arr == 0 then\n\t\treturn \"No participants\"\n\telseif #arr < n then\n\t\treturn \"Not enough participants\"\n\telse\n\t\ttable.sort(arr, function(a, b)\n\t\t\tif a[2] == b[2] then\n\t\t\t\treturn a[1] < b[1]\n\t\t\telse\n\t\t\t\treturn a[2] > b[2]\n\t\t\tend\n\t\tend)\n\n\t\treturn arr[n][1]\n\tend\n\n\treturn \"\"\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210522,"user_id":null,"body":"local solution = {}\n\nlocal byte_A = string.byte(\"A\")\n\nfunction solution.rank(st, we, n)\n  if not st or #st == 0 then\n    return \"No participants\"  \n  end\n  \n  local res = {}\n  local i = 0\n  for name in st:gmatch(\"%a+\") do\n    i = i + 1\n    local som = #name\n    local cap = name:upper()\n    for _, char in ipairs({ cap:byte(1, #cap) }) do\n      som = som + char - byte_A + 1\n    end\n    som = som * we[i]\n    table.insert(res, {name, som})\n  end\n  \n  if n > i then\n    return \"Not enough participants\"\n  end\n  \n  table.sort(res,\n    function(ita, itb) \n      if ita[2] == itb[2] then\n        return ita[1] < itb[1]\n      else\n        return ita[2] > itb[2]\n      end\n    end)\n  \n  return res[n][1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210523,"user_id":null,"body":"local solution = {}\n\nfunction solution.rank(st, we, n)\n  \n  if #st == 0 then\n    return \"No participants\"\n  end\n  \n  local firstnames = {}\n  local index = 1\n  \n  for firstname in st:gmatch(\"%a+\") do\n    firstnames[index] = {\n      name = firstname,\n      sum  = #firstname\n    }\n    for char in firstname:gmatch(\"%a\") do\n      firstnames[index].sum = firstnames[index].sum + (char:lower():byte() - 96)\n    end\n    firstnames[index].sum = firstnames[index].sum * we[index]\n    index = index + 1\n  end\n  \n  if #firstnames < n then\n    return \"Not enough participants\"\n  end\n  \n  table.sort(firstnames, function(a, b)\n    if a.sum == b.sum then\n      return a.name < b.name\n    else\n      return a.sum > b.sum\n    end\n  end)\n  \n  return firstnames[n].name\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210524,"user_id":null,"body":"local solution = {}\n\nfunction solution.rank(st, we, n)\n  \n  if #st == 0 then\n    return \"No participants\"\n  end\n  \n  local firstnames = {}\n  local index = 1\n  \n  for firstname in st:gmatch(\"%a+\") do\n    firstnames[index] = {\n      name = firstname,\n      sum  = #firstname\n    }\n    for char in firstname:gmatch(\"%a\") do\n      firstnames[index].sum = firstnames[index].sum + (char:lower():byte() - 96)\n    end\n    firstnames[index].sum = firstnames[index].sum * we[index]\n    index = index + 1\n  end\n  \n  table.sort(firstnames, function(a, b)\n    if a.sum == b.sum then\n      return a.name < b.name\n    else\n      return a.sum > b.sum\n    end\n  end)\n  \n  if type(firstnames[n]) == \"table\" then\n    return firstnames[n].name\n  else\n    return \"Not enough participants\"\n  end\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210525,"user_id":null,"body":"local solution = {}\nfunction solution.rank(st, we, n)\n  if st==\"\" then return \"No participants\" end \n  local names={{\"\",we[1],0}}\n  for idx=1,st:len() do\n    if st:sub(idx,idx)==',' then\n        names[#names+1]={\"\",we[#names+1],0}\n    else\n        names[#names][1]=names[#names][1]..st:sub(idx,idx)\n    end \n  end \n  if #names<n then return \"Not enough participants\" end \n  for a=1,#names do\n      names[a][3]=names[a][1]:len()\n      for b=1,names[a][1]:len() do\n          names[a][3]=names[a][3]+names[a][1]:sub(b,b):upper():byte()-64\n      end \n      names[a][3]=names[a][3]*names[a][2]\n  end\n  table.sort(names,function(a,b) if a[3]==b[3] then return a[1]<b[1]\n    else return a[3]>b[3] end end)\n  return names[n][1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210526,"user_id":null,"body":"local solution = {}\nfunction solution.rank(st, we, n)\n  if st==\"\" then return \"No participants\" end \n  local names={{\"\",we[1],0}}\n  for idx=1,st:len() do\n    if st:sub(idx,idx)==',' then\n        names[#names+1]={\"\",we[#names+1],0}\n    else\n        names[#names][1]=names[#names][1]..st:sub(idx,idx)\n    end \n  end \n  if #names<n then return \"Not enough participants\" end \n  for a=1,#names do\n      names[a][3]=names[a][1]:len()\n      for b=1,names[a][1]:len() do\n          names[a][3]=names[a][3]+names[a][1]:sub(b,b):upper():byte()-64\n      end \n      names[a][3]=names[a][3]*names[a][2]\n  end\n  names.tmp={}\n  for q=1,#names-1 do  \n      for r=q+1,#names do\n          if names[q][3]<names[r][3] then\n              names.tmp={names[r][1],names[r][2],names[r][3]}\n              names[r]={names[q][1],names[q][2],names[q][3]}\n              names[q]={names.tmp[1],names.tmp[2],names.tmp[3]}\n          end \n          if names[q][3]==names[r][3] then\n              local l_idx=1\n              if names[q][1]~=names[r][1] then\n                  while names[q][1]:sub(l_idx,l_idx)==names[r][1]:sub(l_idx,l_idx) do\n                      l_idx=l_idx+1\n                  end \n                  if names[q][1]:sub(l_idx,l_idx):upper():byte()>names[r][1]:sub(l_idx,l_idx):upper():byte() then\n                    names.tmp={names[r][1],names[r][2],names[r][3]}\n                    names[r]={names[q][1],names[q][2],names[q][3]}\n                    names[q]={names.tmp[1],names.tmp[2],names.tmp[3]}\n                  end \n              end \n          end \n      end \n  end \n  return names[n][1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"561e9c843a2ef5a40c0000a4":[{"id":210527,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  pp = 2\n  for i=m,n do\n    if is_prime(i) then\n      if i-pp == g then return {pp, i} end\n      pp = i\n    end\n  end\n  return null\nend\n\nfunction is_prime(x)\n  for i=2,math.floor(math.sqrt(x)) do\n    if i ~= x and x%i == 0 then return false end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210528,"user_id":492,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n    local function isPrime(n)\n        if n <= 1 or ( n ~= 2 and n % 2 == 0 ) then\n            return false\n        end\n        local i = 3\n        while i * i <= n do\n            if n % i == 0 then\n                return false\n            end\n            i = i + 2\n        end\n        return true\n    end\n    local p = 0\n    for i = m, n do\n        if isPrime(i) then\n            if (i - p == g) then\n                return {p, i}\n            else\n                p = i\n            end\n        end\n    end\n    return null\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210529,"user_id":null,"body":"local solution = {}\n\n-- primes table points to next primer or true if it needs to build more data\nlocal primes = {[2]=3, [3]=true, biggest=3}\n\nlocal function gen_next()\n  local p = primes.biggest + 2\n  while true do\n    local d = 3\n    while p%d~=0 and d*d < p do d = primes[d] end\n    if p%d ~= 0 then\n      primes[primes.biggest] = p\n      primes[p] = true\n      primes.biggest = p\n      return\n    end\n    p = p + 2\n  end\nend\n\nlocal function is_prime(p)\n  while primes.biggest^2 < p do gen_next() end\n  local d = 2\n  while p%d~=0 and d*d < p do d = primes[d] end\n  return p%d~=0\nend\n\nfunction solution.gap(g, m, n)\n  print(g, m, n)\n  if g%2 ~= 0 then return null end\n  local last_prime = 0\n  for i = m\/\/2*2+1, n, 2 do\n    if is_prime(i) then\n      if i-last_prime == g then return {last_prime, i} end\n      last_prime = i\n    end\n  end\n  return null\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210530,"user_id":53,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  local function isPrime(n)\n    if ((n % 2 == 0) or (n % 3 == 0)) then return n < 4 end\n    local i = 5\n    while i * i <= n do\n      if (n % i == 0) or (n % (i + 2) == 0) then return false end\n      i = i + 6\n    end\n    return true\n  end\n  local a, b, i = 0, 0, m\n  while i - 1 <= n do\n    if (b - a == g) then return {a, b} end\n    if (isPrime(i)) then a, b = b, i end\n    i = i + 1\n  end\n  return null\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210531,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n    if n-m <= 0 then\n      return {0,0}\n    end\n  \n    t = {}\n    for i=m, n+1 do\n        prime = true\n        for j = 2, math.floor(math.sqrt(i))+1 do\n            if i % j == 0 then\n                prime = false\n                break\n            end\n        end\n\n        if prime then\n            if #t > 0 and i - t[#t] == g then\n              return {t[#t], i}\n            end\n            table.insert(t,i);\n        end\n    end\n    return {0,0}\n \nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210532,"user_id":null,"body":"local solution = {}\n\nlocal function isPrime (n)\n  if n == 2 then return true\n  elseif n < 2 or n % 2 == 0 then return false\n  else\n    for i = 3, math.sqrt(n)\/\/1, 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n  end\nend\n\nlocal function iterPrimes (m, n)\n  m = m - 1\n  return function ()\n    while m <= n do\n      m = m + 1\n      if isPrime(m) then return m end\n    end\n  end\nend\n\nfunction solution.gap (g, m, n)\n  local previous = 0\n  for p in iterPrimes(m, n) do\n    if previous == 0 then\n      previous = p\n    else\n      if p - previous == g then\n        return {previous, p}\n      else\n        previous = p\n      end\n    end\n  end\n  return null\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210533,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  local function prime(n)\n    for i = 2, n^.5 do\n      if (n % i) == 0 then return false end\n    end\n    return true\n  end\n  local last = n\n  for i = m, n do \n    if prime(i) then\n      if i - last == g then return {last, i} end\n      last = i\n    end\n  end\n  return null\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210534,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  -- your code\n  print(g)\n  print(m)\n  print(n)\n  function findPrime(num)\n    for i = 2, math.sqrt(num) do\n      if num%i == 0 then return false end\n    end\n    return true\n  end\n  curr_prime = -1000\n  for i = m, n do\n    if findPrime(i) then\n      if i - curr_prime == g then return {curr_prime, i} end\n      curr_prime = i\n    end\n  end\n  return {0,0}\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210535,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  \n  local function _isPrime(num)\n    if num <= 3 then\n        return num > 1\n    end\n  \n    if num % 6 ~= 1 and num % 6 ~= 5 then\n        return false\n    end\n\n    local sqrt = math.floor(math.sqrt(num))\n    for i = 5, sqrt, 6 do\n        if (num % i == 0 or num % (i + 2) == 0) then\n            return false\n        end\n    end\n    return true\n  end\n  \n  local function _find()\n      local lastNum = 0\n      for i = m, n do repeat\n          if not _isPrime(i) then\n              break\n          end\n\n          if i - lastNum == g then\n              return lastNum, i\n          else\n              lastNum = i\n          end\n      until true end\n  end\n  \n  local left, right = _find()\n  return {left or 0, right or 0}\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210536,"user_id":null,"body":"local solution = {}\n\nfunction solution.gap(g, m, n)\n  function prime(n)\n    for i = 2, n^(1\/2) do\n        if (n % i) == 0 then\n            return false\n        end\n    end\n    return true\n  end\n  \n  local firstprime = 0\n  local secondprime = 0\n  for i=m, n, 1 do\n    if prime(i) then\n      if firstprime > 0 then\n        secondprime = firstprime\n      end\n      firstprime = i\n    end\n    if firstprime - secondprime == g then\n      return {secondprime, firstprime}\n    end\n  end\n  return null\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5625618b1fe21ab49f00001f":[{"id":210537,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  return \"Hello, \"..name\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210538,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  name = name or \"unknown\"\n  return \"Hello, \"..name\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210539,"user_id":null,"body":"return {say_hello = function(name) return \"Hello, \" .. name end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210540,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  return (\"Hello, name\"):gsub('name',name);\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210541,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  print(name)\n  return \"Hello, \" .. name\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210542,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  unnessecaryvariable = name\n  unnessecarytable = {}\n  unnessecarytable[\"unnessecarykey\"] = unnessecaryvariable\n  for i,v in pairs(unnessecarytable) do\n    return \"Hello, \" .. v\n  end\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210543,"user_id":null,"body":"local solution = {\n  say_hello = function(name)\n    return \"Hello, \" .. name\n  end\n}\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210544,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  assert(type(name) == 'string' and #name >= 1,'invalid name')\n  return string.format(\"Hello, %s\",name)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210545,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  greeting = (\"Hello, \" .. name)\n  return greeting\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210546,"user_id":null,"body":"local solution = {}\n\nfunction solution.say_hello(name)\n  name = \"Hello, \"..name\n  return name\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"562e274ceca15ca6e70000d3":[{"id":210547,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local h, s = 1\/n, 0\n  for i = 0, 1-h\/2, h do s = s+(h^2+((i+h)^2-i^2)^2)^.5 end\n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210548,"user_id":null,"body":"local solution = {}\n\nlocal function distance(x0, y0, x1, y1)\n  return math.sqrt((x1-x0)^2 + (y1-y0)^2)\nend\n\nfunction solution.lenCurve(n)\n  local returnValue = 0\n  for i=1, n do\n      local m = (i-1)\/n\n      local n = i\/n\n      returnValue=returnValue+distance(m, m^2, n, n^2)\n  end\n  return returnValue\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210549,"user_id":168,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local h, x, s = 1 \/ n, 0, 0\n  for i = 1, n do\n    local y = (h * i) ^ 2\n    s = s + ((x - y) ^ 2 + h ^ 2) ^ 0.5\n    x = y\n  end\n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210550,"user_id":1474,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  s, e = 0, 1\n  i = 1 \/ n\n  ret = {}\n  t = s\n  while t < e do\n    table.insert(ret, {t, t ^ 2})\n    t = t + i\n  end\n  table.insert(ret, {e, e ^ 2})\n  cnt = 0\n  for i = 2, #ret do\n    x1 = ret[i-1][1]\n    y1 = ret[i-1][2]\n    x2 = ret[i][1]\n    y2 = ret[i][2]\n    cnt = cnt + math.sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2)\n  end\n  return cnt\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210551,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  -- your code\n    local t = 0\n    local x = 0\n    local y = 0\n    for i = 1, n do\n        local a = i\/n\n        local b = a^2\n        t = t + (math.sqrt((a - x)^2 + (b - y)^2))\n        x = a\n        y = b\n    end\n    return t\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210552,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local old_x, old_y, length, h = 0, 0, 0, 1\/n \n  for i = 1, n do\n    local new_x = h * i\n    local new_y = new_x^2\n    length = length + math.sqrt((new_y - old_y)^2 + (new_x - old_x)^2)\n    old_x, old_y = new_x, new_y\n  end\n  \n  return length\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210553,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local len = 0\n  local dx = 1\/n\n  for i = 1, n do\n    local x0, x1 = (i-1)*dx, i*dx\n    local dy = x1^2 - x0^2\n    len = len + math.sqrt(dx^2 + dy^2)\n  end\n  return len\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210554,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local len = 0\n  local dx = 1 \/ n\n  for i = 0, n-1 do\n    local x0 = i * dx\n    local x1 = (i+1) * dx\n    len = len + math.sqrt((x1-x0)^2 + (x1*x1-x0*x0)^2)\n  end\n  return len\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210555,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve(n)\n  local h = 1 \/ n\n  local old_x = 0\n  local old_y = 0\n  local len = 0\n  \n  for x = 0, 1 + h, h do\n    if x > 1 then\n      x = 1\n    end\n    \n    local y = x * x\n    \n    len = len + math.sqrt((y - old_y) ^ 2 + (x - old_x) ^ 2)\n    \n    old_y = y\n    old_x = x\n  end\n  \n  return len\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210556,"user_id":null,"body":"local solution = {}\n\nfunction solution.lenCurve (n)\n    local function distance(x1, y1, x2, y2)\n        return math.sqrt((x2-x1)^2 + (y2-y1)^2)\n    end\n\n    local len = 0\n    local dx = 1\/n\n    local x = 0\n  \n    while n > 0 do\n        len = len + distance(x, x^2, x+dx, (x+dx)^2)\n        x = x + dx\n        n = n - 1\n    end\n    return len\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"562f91ff6a8b77dfe900006e":[{"id":210557,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  priceA = 0\n  priceB = card\n  ticketCurrent = ticket\n  ticketsNum = 0\n  \n  repeat\n    ticketCurrent = ticketCurrent * perc\n    priceA = priceA + ticket\n    priceB = priceB + ticketCurrent\n    ticketsNum = ticketsNum + 1\n\n  until priceA > math.ceil(priceB)\n  \n  return ticketsNum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210558,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  for times = 1, math.huge do\n    local a = ticket * times\n    -- your classic geometric sum:\n    --   card + ticket \\sum_{i=1}^{times} perc^i =\n    --   card + ticket \\frac{1 - perc^{times+1}}{1 - perc} - ticket\n    local b = card + ticket * (1 - perc^(times+1)) \/ (1 - perc) - ticket\n    if math.ceil(b) < a then\n      return times\n    end\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210559,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  local PartAnswerB = card\n  local PartAnswerA = 0\n  local Counter = 0\n  local RealTicket = ticket\n  while true do\n    RealTicket = RealTicket * perc\n    Counter = Counter + 1\n    PartAnswerA = PartAnswerA + ticket\n    PartAnswerB = PartAnswerB + (RealTicket)\n    if math.floor(PartAnswerB) + 1 < PartAnswerA then\n      return Counter\n    end\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210560,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  A = 0\n  B = card\n  i = 0\n  while math.ceil(B) >= A do \n    i = i + 1\n    A = A + ticket\n    B = B + ticket * perc ^ i\n  end\n  return i\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210561,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n    local discount_ticket_price = ticket * perc\n    local price_with_discounts  = card + discount_ticket_price\n    local movies_seen           = 1\n\n    repeat\n        discount_ticket_price = discount_ticket_price * perc\n        price_with_discounts = price_with_discounts + discount_ticket_price\n        movies_seen = movies_seen + 1\n    until math.ceil(price_with_discounts) < (ticket * movies_seen)\n\n    return movies_seen\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210562,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  \n  local count, system_a, system_b, b_price = 0, 0, card, ticket\n  repeat \n    system_a = system_a + ticket\n    b_price  = b_price * perc\n    system_b = system_b + b_price\n    count    = count + 1\n  until system_a > math.ceil(system_b)\n  \n  return count\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210563,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n    local c = 1\n    local priceSystemA = ticket  * c\n    local priceLastTicket = ticket * perc\n    local priceSystemB = card + priceLastTicket\n    while math.ceil(priceSystemB) >= priceSystemA do\n        c = c + 1\n        priceSystemA = ticket  * c            \n        priceSystemB = priceSystemB + priceLastTicket  * perc\n        priceLastTicket = priceLastTicket * perc\n    end\n    return math.min(c)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210564,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  local cardPrice, ticketPrice = card,0\n  local count = 0\n  local cardTicket = ticket\n  while not (math.ceil(cardPrice) < ticketPrice) do\n    count = count + 1\n    cardTicket = (cardTicket*perc)\n    cardPrice = cardPrice + cardTicket\n    ticketPrice = ticketPrice + ticket\n  end\n  return count\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210565,"user_id":null,"body":"local solution = {}\n\n-- likely some faster and more clever solution exists but, oh well...\nfunction solution.movie(card, ticket, perc)\n  local totalWithoutCard = 0\n  local totalWithCard = card\n  local discountedTicketPrice = ticket\n  local visits = 0\n  \n  -- yeah, no upper limit but should be fine :)\n  while true do\n    -- purchase a ticket\n    totalWithoutCard = totalWithoutCard + ticket\n    \n    -- apply the discount\n    discountedTicketPrice = discountedTicketPrice * perc\n    \n    -- purchase a ticket with the cinema card\n    totalWithCard = totalWithCard + discountedTicketPrice\n\n    -- track how many times we've been to the cinema\n    visits = visits + 1 \n    \n    -- check if we're now saving money with the card\n    if math.ceil(totalWithCard) < totalWithoutCard then\n      -- success!\n      return visits\n    end\n  end\n  \n  error(\"what?\") \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210566,"user_id":null,"body":"local solution = {}\n\nfunction solution.movie(card, ticket, perc)\n  \n  local n, sum = 0, card\n  while math.ceil(sum) >= ticket * n do n = n + 1; sum = sum + ticket * perc ^ n end\n  return n\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56347fcfd086de8f11000014":[{"id":210567,"user_id":492,"body":"local solution = {}\n\nfunction solution.ex_euler(nb)\n  function ode(x, y)\n    return 2 - math.exp(-4 * x) - 2 * y\n  end\n  function exact(x)\n    return 1 + 0.5 * math.exp(-4 * x) - 0.5 * math.exp(-2 * x)\n  end\n\n  local yi, xi, h, err = 1.0, 0.0, 1.0 \/ nb, 0.0\n  for i = 1, nb do\n    yi = yi + ode(xi, yi) * h\n    xi = xi + h\n    zi = exact(xi)\n    err = err + math.abs(yi - zi) \/ zi\n  end\n  local res = err \/ (nb + 1.0)\n  return math.floor(res * 1e6) \/ 1e6\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210568,"user_id":168,"body":"local solution = {}\n\nfunction solution.ex_euler(nb)\n  local function f(x, y)\n    return 2 - math.exp(-4 * x) - 2 * y\n  end\n  local function sol(x)\n    return 1 + 0.5 * math.exp(-4 * x) - 0.5 * math.exp(-2 * x)\n  end\n  local h = 1 \/ nb\n  local y, err = 1, 0\n  for i = 0, nb do\n    local x = h * i\n    local z = sol(x)\n    err = err + math.abs((y - z) \/ z)\n    y = y + f(x, y) * h\n  end\n  return err \/ (nb + 1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210569,"user_id":null,"body":"require 'math'\n\nlocal solution = {}\n\nfunction trunk(num, numDecimalPlaces)\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult) \/ mult\n  end\n\nfunction exact_solution(time)\n    local sol = {}\n    for k,v in pairs(time) do\n        sol[#sol+1] = 1 + 0.5*math.exp(-4*time[k]) - 0.5*math.exp(-2*time[k])\n    end\n    return sol\nend\n\nfunction create_time_array(nb)\n    local time = {}\n    time[1] = 0\n    for i=2,(nb+1) do\n        table.insert(time, time[i-1] + h)\n    end\n    return time\nend\n\nfunction calculate_slope(x, y)\n    return 2 - math.exp(-4*x) - 2*y\nend\n\nfunction calculate_abs_mean_error(y, z, nb)\n    local error = 0\n    for i = 1,nb+1 do\n        error = error + math.abs(y[i] - z[i])\/z[i]\n    end\n    return error\/(nb+1)\nend\n\nfunction solution.ex_euler(nb)\n  h = 1\/nb\n  time = create_time_array(nb)\n\n  local a0 = {0, 1}\n  local slope = calculate_slope(a0[1], a0[2])\n  local values_est = {1}\n\n  for k, v in pairs(time) do\n    slope = calculate_slope(a0[1], a0[2])\n    values_est[k+1] = values_est[k] + slope*h\n    a0 = {time[k+1], values_est[k+1]}\n  end\n  error = calculate_abs_mean_error(values_est, exact_solution(time), nb)\n  return trunk(error, 6)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563a631f7cbbc236cf0000c2":[{"id":210570,"user_id":645,"body":"kata = {}\nfunction kata.move(pos, roll)\n  return pos + roll * 2\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210571,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  return (roll*2 + pos)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210572,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n    local rolledTwo = roll * 2\n    local newPos = pos + rolledTwo\n    \n  return newPos\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210573,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  return (2 * roll) + pos\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210574,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  -- your code here\n  pos = roll*2+pos\n  return pos\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210575,"user_id":null,"body":"local function game_logic( position, roll )\n  return position + roll * 2\nend\n\nreturn setmetatable( { }, { __index = function( ) return game_logic end }  )","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210576,"user_id":null,"body":"kata = {}\nkata[\"move\"] = function (pos, roll)\n  return pos + 2 * roll\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210577,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  total = pos + roll*2\n  return total\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210578,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  return roll + roll + pos\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210579,"user_id":null,"body":"kata = {}\nfunction kata.move(pos, roll)\n  position = (roll * 2) + pos\n  return position\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563e320cee5dddcf77000158":[{"id":210580,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n  local sum = 0;\n  for _,v in ipairs(marks) do\n    sum = sum + v\n  end\n  return sum \/\/ #marks\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210581,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n local average = 0\n  for i=1, #marks do\n    average = average + marks[i]\n  end\n  return math.floor(average\/#marks)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210582,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n sum = 0\n for i=1, #marks do\n sum = sum + marks[i]\n end\n return math.floor(sum\/#marks)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210583,"user_id":null,"body":"return {\n\n  average = function (marks)\n    return assert(load(\"return math.floor((\" .. table.concat(marks, \"+\") .. \")\/\" .. #marks ..\")\"))()\n  end\n\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210584,"user_id":null,"body":"local kata = {}\n\nfunction kata.get_average(marks)\n  s = 0\n  for i,v in pairs(marks) do\n    s = s + v\n  end\n  return math.floor(s\/#marks)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210585,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n -- Todo : calculate rounded average of the marks array\n  \n  local value = 0\n  for i = 1, #marks do\n    value = value + marks[i]\n    end\n  value = math.floor(value \/ #marks)\n  return value\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210586,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n -- Todo : calculate rounded average of the marks array\n  local sum = 0\n  for _, v in pairs(marks) do\n    sum = sum + v\n  end\n  return sum \/\/ #marks\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210587,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n  local total = 0\n  for _,v in ipairs(marks) do\n    total = total + v\n  end\n  return total \/\/ #marks\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210588,"user_id":null,"body":"local kata = {}\n\nfunction kata.get_average(marks)\n  local total = 0\n  for i,v in ipairs(marks) do\n    total = total + v\n  end\n  local marks_nums = #marks\n  return math.floor(total \/ marks_nums)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210589,"user_id":null,"body":"local kata = {}\n\n---@param marks number[]\nfunction kata.get_average(marks)\n  sum = 0\n  for _, v in pairs(marks) do\n    sum = sum + v\n  end\n  return math.floor(sum \/ #marks)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"563f0c54a22b9345bf000053":[{"id":210590,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(a)\n  return 1<<a;\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210591,"user_id":527,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  return 1 << n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210592,"user_id":492,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  return math.pow(2, n)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210593,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  local u, v = 1, 2\n  for i=2, n do u, v = v, 6*u*v\/(5*u-v) end\n  return v\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210594,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  t = {}\n  t[0] = 1\n  t[1] = 2\n  for i=0,n-2 do\n      t[i+2] = 6 * t[i] * t[i+1] \/ (5 * t[i] - t[i+1])\n  end\n  return t[n]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210595,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  -- your code\n  f = {}\n  f[0] = 1\n  f[1] = 2\n  for i = 2, n do \n    f[i] = -1 * (6*f[i - 2] * f[i - 1]) \/ (f[i - 1] - 5*f[i - 2])\n  end\n  return f[n]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210596,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  return 2 << n - 1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210597,"user_id":null,"body":"local solution = {}\n\nfunction solution.step(n0,n1)\n  return 6*n0*n1\/(5*n0-n1)\nend\n\n-- tried to write equation for n=4, made a mistake somewhere\n-- computer is better\n\nfunction solution.fcn(n)\n  -- your code\n  local u0 = 0\n  local u1 = 1\n  local u2 = 2\n  for i = 2, n do\n    u0 = u1\n    u1 = u2\n    u2 = solution.step(u0,u1)\n  end\n  return u2\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210598,"user_id":null,"body":"local solution = {}\n\nfunction solution.fcn(n)\n  local u1, u2 = 1, 2\n  if n < 2 then\n    return 1 + n\n  end\n  for i = 2, n do\n    u2, u1 = (6*u1*u2 \/ (5*u1 - u2)), u2\n  end\n  return u2\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210599,"user_id":681,"body":"local solution = {}\n\nfunction solution.fcn(n)\n    return 1 * 2 ^ n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"564057bc348c7200bd0000ff":[{"id":210600,"user_id":null,"body":"local solution = {}\n\nlocal remainders = {1, 10, 9, 12, 3, 4}\n\nlocal function thirt(n)\n  local i, s = 0, 0\n  while n > 0 do\n    i = i % #remainders + 1\n    s = s + n%10 * remainders[i]\n    n = n \/\/ 10\n  end\n  return s\nend\n\nlocal function fixed_point(f, x)\n  local y = f(x)\n  if y == x then return x end\n  return fixed_point(f, y)\nend\n\nfunction solution.thirt(n)\n  return fixed_point(thirt, n)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210601,"user_id":null,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  t = string.reverse(tostring(n))\n  seq = {1, 10, 9, 12, 3, 4}\n  y, sum = 1, 0\n  while 1 do\n    for i = 1, string.len(t) do\n      if y > 6 then y = 1 end\n      c = tonumber(string.sub(t, i, i))\n      sum = sum + (c*seq[y])\n      y = y + 1\n    end\n    \n    if last == sum then break end\n\n    t = string.reverse(tostring(sum))\n    last = sum\n    y, sum = 1, 0\n  end\n  \n  return sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210602,"user_id":492,"body":"local solution = {}\n\nfunction solution.thirt(n)\n    local w = {1, 10, 9, 12, 3, 4}\n    while (true) do\n        local r, q, c, j = n, -1, 0, 0\n        while (q ~= 0) do\n            q = math.floor(r \/ 10)\n            c = c + (r % 10) * w[j % 6 + 1]\n            r = q\n            j = j + 1\n        end\n        if (c == n) then return c end\n        n = c\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210603,"user_id":53,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  return solution.go(n,0,1,n)\nend\n\nfunction solution.go(n,s,r,m)\n  if m==0 and s==n then return s end\n  if m==0 then return solution.go(s,0,1,s) end\n  return solution.go(n,s+r*(m%10),(r*10)%13,math.floor(m\/10))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210604,"user_id":null,"body":"local solution = {}\n\nlocal seq = {1, 10, 9, 12, 3, 4}\nfunction solution.thirt(n)\n  n=tostring(n)\n  sum=0\n  seq_nr=1\n  for i=#n, 1, -1 do\n    sum=sum+tonumber(n:sub(i,i))*seq[seq_nr]\n    seq_nr = seq_nr < #seq and (seq_nr + 1) or 1\n  end\n  return sum == tonumber(n) and sum or solution.thirt(sum)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210605,"user_id":null,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  local pattern = { 1, 10, 9, 12, 3, 4 }\n  local nDigits = getNumberDigits(n)\n  local result = 0\n  local result2 = 0\n\n  result = multiply(nDigits, pattern)\n  if result2 ~= result then\n    nDigits = getNumberDigits(result)\n    result2 = multiply(nDigits, pattern)\n  end\n\n  while result2 ~= result do\n    result = result2\n    nDigits = getNumberDigits(result)\n    result2 = multiply(nDigits, pattern)\n  end\n  \n  return result\nend\n\nfunction getNumberDigits(n)\n\n  local digits = {}\n\n  while (n >= 10) do\n    table.insert(digits, n % 10)\n    n = math.floor(n \/ 10)\n  end\n  table.insert(digits, n) -- last missing number\n\n  return digits;\n\nend\n\nfunction multiply(digits, pattern)\n\n  local result = 0 -- Do the multiplying and summing task.\n\n  for index, value in ipairs(digits) do\n    local patternIndex = index\n    if (index > #pattern) then\n      patternIndex = index - #pattern\n    end\n    result = result + (value * pattern[patternIndex])\n  end\n\n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210606,"user_id":null,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  function u(n)\n    local i, s, r = 0, 0, {1, 10, 9, 12, 3, 4}\n    while n>0 do\n      s, i, n = s + (n % 10) * r[(i % 6) + 1], i + 1, n \/\/ 10 \n    end\n    return s\n  end\n  return u(u(u(n)))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210607,"user_id":null,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  local rep_seq = {1, 10, 9, 12, 3, 4}\n  function u(n)\n    local sum = 0\n    local i = 0\n    while n>0 do\n      sum = sum + (n % 10) * rep_seq[(i % 6) + 1]\n      i = i + 1\n      n = n \/\/ 10\n    end\n    return sum\n  end\n  return u(u(u(n)))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210608,"user_id":null,"body":"local solution = {}\n\nlocal repeatingSequence = {1, 10, 9, 12, 3, 4}\n\nfunction solution.thirt(n)\n  local previousAnswer = 0\n  local answer = n\n  \n  while answer ~= previousAnswer do\n    -- we're starting a new calculation, move the previous answer and reset our answer.\n    previousAnswer = answer\n    answer = 0\n    \n    -- parse the digits as a string, reverse the string then, for each character:\n    local sequenceIndex = 1\n    for digit in string.gmatch(string.reverse(tostring(previousAnswer)), \".\") do\n      -- multiply the digit by the sequence digit and add that to the answer.\n      answer = answer + (tonumber(digit) * repeatingSequence[sequenceIndex])\n      \n      -- increment the sequence index and clamp it.\n      sequenceIndex = sequenceIndex + 1\n      if sequenceIndex > #repeatingSequence then sequenceIndex = 1 end\n    end\n  end\n  \n  -- the previous answer and what we just calcuated are the same.\n  -- we've found the stationary number.\n  return answer\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210609,"user_id":null,"body":"local solution = {}\n\nfunction solution.thirt(n)\n  local PreviousNumber = 0\n  local Number = 0\n  repeat\n    PreviousNumber = Number\n    Number = 0\n    local a = string.reverse(tostring(n))\n    local Info = {1,10,9,12,3,4,1}\n    local Index = 0\n    for char in string.gmatch(a,'%d') do\n      Index = Index < 7 and Index + 1 or 2\n      Number = Number + tonumber(char) * Info[Index]\n    end\n    n = Number\n  until Number == PreviousNumber\n  return Number\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56445c4755d0e45b8c00010a":[{"id":210610,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  if n == 1 or f0 < 0 then return f0 >= 0 end\n  return solution.fortune(math.floor(f0 + f0 * (p \/ 100) - c0), p, math.floor(c0 + (c0 * (i \/ 100))), n - 1, i)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210611,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  for y=1,n-1 do\n    c0 = (y == 1) and c0 or math.floor(c0 + c0*i\/100)\n    f0 = f0 + math.floor(f0*p\/100) - c0\n    if f0 < 0 then return false end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210612,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  local f, c, pr, ir = f0, c0, 1 + p\/100, 1 + i\/100\n  for y = 2, n do\n    f, c = math.floor(f * pr - c),  math.floor(c * ir)\n  end\n  return f >= 0\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210613,"user_id":null,"body":"\nlocal solution = {}\nfunction solution.fortune(f0, p, c0, n, i)\n  local Deposit = f0\n  local Interest = p \/ 100 + 1\n  local Withdrawl = c0\n  local years = n\n  local Inflation = i \/ 100 + 1\n  local Answer = Deposit\n  print(\"NewTest\")\n  for d = 2, years do\n    if d ~= 2 then\n      Withdrawl = math.floor(Withdrawl * Inflation)\n    end\n    Answer = math.floor(Answer * Interest - Withdrawl)\n    print(string.format(\"year=%d withdrawl=%d ans=%d\", d, Withdrawl, Answer))\n    if Answer < 0 then\n      return false\n    end\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210614,"user_id":null,"body":"local solution = {}\nlocal a = math.floor\n\nfunction solution.fortune(f0, p, c0, n, i)\n  for _ = 1,n-1 do\n    f0 = a(f0 + (p\/100)*f0 - c0)\n    c0 = a(c0+c0*(i\/100))\n  end\n  return (a(f0)>=0 and true) or false\nend\n\nsolution.fortune(100000, 1, 9185, 12, 1)\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210615,"user_id":168,"body":"local solution = {}\n\nfunction solution.fortune(f, p, c, n, i)\n  p, i = 1 + p \/ 100, 1 + i \/ 100\n  for y = 2, n do\n    f = math.floor(f * p - c)\n    if f < 0 then return false end\n    c = math.floor(c * i)\n  end\n  return f >= 0\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210616,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n    local f = {}\n    local c = {}\n    f[1] = f0\n    c[1] = c0\n    for k = 2, n do\n        f[k] = math.floor(f[k-1]+p\/100*f[k-1]-c[k-1])\n        c[k] = math.floor(c[k-1]+c[k-1]*i\/100)\n    end\n    if f[n] >= 0 then return true else return false end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210617,"user_id":53,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  local f, c, pp, ii, m = f0, c0, p \/ 100, i \/ 100, n - 1\n  while m > 0 do\n    m = m - 1\n    f = f + math.floor(pp * f - c)\n    c = c + math.floor(ii * c)\n    if f < 0 then\n      return false\n    end\n  end\n  return f >= 0\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210618,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  -- f0 = deposit \n  -- p = bank interest\n  -- c0 withdraw amount per year\n  -- i = inflation percentage per year \n  -- n = amount of years \n\n  local currentBank = f0\n  local withdraw = c0\n  \n  for x=2, (n-1) do\n    currentBank = tonumber(currentBank+((p\/100)*currentBank))\n    currentBank = currentBank-withdraw\n    if currentBank < withdraw then\n      return false\n    end\n    withdraw = math.floor(withdraw*(i\/100+1))\n  end\n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210619,"user_id":null,"body":"local solution = {}\n\nfunction solution.fortune(f0, p, c0, n, i)\n  local pPercent = p \/ 100\n  local iPercent = i \/ 100\n  \n  local f = f0\n  local c = c0\n  \n  for i = 1, n - 1 do\n    f = math.floor(f + (pPercent * f) - c)\n    c = math.floor(c + (c * iPercent))\n    if f < 0 then\n      return false\n    end\n  end\n    \n  return true\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56484848ba95170a8000004d":[{"id":210620,"user_id":168,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  local r = 0\n  for i = 2, #xs do\n    r = math.max(r, (xs[i] - xs[i - 1]) * 3600 \/ s)\n  end\n  return math.floor(r)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210621,"user_id":492,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n    if #xs <= 1 then return 0 end\n    local mx, v, k = 1.0, 0.0, 1\n    while k < #xs do\n        v = (3600 * (xs[k + 1] - xs[k]) \/ s)\n        if (v > mx) then\n            mx = v\n        end\n        k = k + 1\n    end\n    return math.floor(mx)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210622,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  local sol, old = 0, xs[1]\n  table.remove(xs,1)\n  for _,k in ipairs(xs) do\n      sol = math.max(sol, (k - old) * (3600\/s))\n      old = k\n  end\n  return math.floor(sol)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210623,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  local hour_mult = 60*60\/s\n  local prev_x = nil\n  local speeds = {}\n  \n  for _,v in ipairs(xs) do\n    if prev_x ~= nil then\n      table.insert(speeds, v-prev_x)\n    end\n    prev_x = v\n  end\n  return speeds[1] == nil and 0 or math.floor(hour_mult * math.max(table.unpack(speeds)))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210624,"user_id":1474,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  if #xs <= 1 then return 0 end\n  ret = {}\n  for i = 1, #xs-1 do\n    table.insert(ret, (xs[i+1] - xs[i]) * 3600 \/ s)\n  end\n  return math.max(table.unpack(ret))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210625,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  if #xs < 0 then return 0 end\n  local max_speed = 0\n  for i = 2, #xs do\n    max_speed = math.max(max_speed, (xs[i]-xs[i-1])*3600\/s)\n  end\n  return math.floor(max_speed)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210626,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  -- your code\n  local r = 0\n  for i = 2, #xs do\n    r = math.max(r, (xs[i] - xs[i - 1]) * 3600 \/ s)\n  end\n  return math.floor(r)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210627,"user_id":198,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  local partSpeed = 0\n  for i = 1, #xs - 1 do\n    local d = xs[i+1] - xs[i]\n    local ds = (d \/ s) * 3600\n    if ds > 1 then\n      partSpeed = math.max(partSpeed, ds) \n    end\n  end\n  return math.floor(partSpeed)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210628,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n local m = 0\n for i = 2, #xs do m = math.max( xs[i]-xs[i-1], m ) end\n return m * 3600 \/\/ s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210629,"user_id":null,"body":"local solution = {}\n\nfunction solution.gps(s, xs)\n  local speed = {0}\n  for i = 1, (#xs - 1) do\n    local avg_speed = math.floor(math.abs((3600*(xs[i]-xs[i+1]))\/s))\n    table.insert(speed, avg_speed)\n  end\n  table.sort(speed)\n  return speed[#speed]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56530b444e831334c0000020":[{"id":210630,"user_id":null,"body":"function chromosome_check(sperm)\n  return ({\n    XX = \"Congratulations! You're going to have a daughter.\",\n    XY = \"Congratulations! You're going to have a son.\",\n  })[sperm]\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210631,"user_id":168,"body":"function chromosome_check(sperm)\n  return \"Congratulations! You're going to have a \" .. (sperm:match('Y') and 'son.' or 'daughter.')\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210632,"user_id":null,"body":"function chromosome_check(sperm)\n  gender = string.find(sperm ,\"Y\") and \"son.\" or \"daughter.\"\n  return \"Congratulations! You're going to have a \" .. gender\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210633,"user_id":null,"body":"function chromosome_check(sperm)\n     if string.upper(sperm) == \"XY\" then return tostring(\"Congratulations! You're going to have a son.\")  elseif string.upper(sperm) == \"XX\" then return tostring(\"Congratulations! You're going to have a daughter.\") end   \nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210634,"user_id":null,"body":"function chromosome_check(sperm)\n  ret = nil\n  if sperm == \"XX\" then\n    ret = \"Congratulations! You're going to have a daughter.\"\n  elseif sperm == \"XY\" then\n    ret = \"Congratulations! You're going to have a son.\"\n  end\n  return ret\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210635,"user_id":null,"body":"function chromosome_check(sperm)\n  if sperm:match(\"Y\")\n    then return \"Congratulations! You're going to have a son.\"\n  end\n  return \"Congratulations! You're going to have a daughter.\"\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210636,"user_id":null,"body":"function chromosome_check(sperm)\n  if sperm == \"XY\" then\n    return \"Congratulations! You're going to have a son.\"\n  else\n    return \"Congratulations! You're going to have a daughter.\"\n  end\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210637,"user_id":null,"body":"function chromosome_check(sperm)\n  local child = \"daughter\"\n  if sperm == \"XY\" then child = \"son\" end\n  return string.format(\"Congratulations! You're going to have a %s.\", child)\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210638,"user_id":null,"body":"function chromosome_check(sperm)\n  -- Your code here :)\n  if sperm:sub(2,2) == \"X\" then\n    return \"Congratulations! You're going to have a daughter.\"\n  else return \"Congratulations! You're going to have a son.\" end\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210639,"user_id":null,"body":"function chromosome_check(sperm)\n  if (sperm == \"XX\") then\n    return \"Congratulations! You're going to have a daughter.\"\n  else\n    return \"Congratulations! You're going to have a son.\"\n  end\nend\n\nreturn chromosome_check","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"565abd876ed46506d600000d":[{"id":210640,"user_id":53,"body":"local solution = {}\n\nfunction solution.simpson(n)\n  return math.pi\/n*(1+2*math.cos(math.pi\/n)^3+3*math.cos(2*math.pi\/n))\/(math.sin(3*math.pi\/n))\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210641,"user_id":null,"body":"local solution = {}\n\nlocal pi = math.pi\n\nlocal function f(x)\n  return (3 \/ 2) * (math.sin(x) ^ 3)\nend\n\n\nfunction solution.simpson(n)\n  local h = pi \/ n\n  local approx = 0\n  \n  for i = 1, n \/ 2 do\n    approx = approx + 4 * f( h * (2 * i - 1))\n    approx = approx + 2 * f(2 * i * h)  \n  end\n  \n  return (approx * pi) \/ (3 * n)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210642,"user_id":null,"body":"local solution = {}\n\nlocal function f(x)\n  return 3\/2 * math.sin(x)^3\nend\n\nfunction solution.simpson(n)\n  local a, b = 0, math.pi\n  local h = (b - a) \/ n\n  local s1, s2 = 0, 0\n  for i = 1, n\/\/2 do s1 = s1 + f(a + (2*i-1)*h) end\n  for i = 1, n\/\/2 - 1 do s2 = s2 + f(a + 2*i*h) end\n  return h\/3 * (f(a) + f(b) + 4*s1 + 2*s2)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210643,"user_id":null,"body":"local solution = {}\n\nfunction solution.simpson(n)\n  f=function(x)\n    return 3*(math.sin(x) ^ 3)\/2\n  end\n  pt=math.pi\/(3*n)\n  h=math.pi\/n\n  \n  sum1=0\n  for i=1,n\/2 do\n    sum1=sum1+f(((2*i)-1)*h)\n  end\n  r1=f(0)+f(math.pi)+sum1*4\n  sum2=0\n  for j=1,math.floor(n\/2-1) do\n    sum2=sum2+f(2*j*h)\n  end\n  r2=sum2*2\n  return (r1+r2)*pt\n  \nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210644,"user_id":168,"body":"local solution = {}\n\nfunction solution.simpson(n)\n  local function f(x) return 1.5 * math.sin(x) ^ 3 end\n  local h = math.pi \/ n\n  local s = 4 * f((n - 1) * h)\n  for i = 1, n \/\/ 2 - 1 do\n    s = s + 4 * f((2 * i - 1) * h) + 2 * f(2 * i * h)\n  end\n  return s * math.pi \/ (3 * n)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210645,"user_id":null,"body":"local solution = {}\n\nfunction solution.simpson(n)\n  local h = math.pi \/ n\n  local firstSum = 0\n  local secondSum = 0\n  for i = 1, n\/2 do\n    firstSum = firstSum + 3\/2 * math.sin((2*i - 1)*h)^3\n    if i ~= n\/2 then secondSum = secondSum + 3\/2 * math.sin(2*i*h)^3 end\n  end\n  firstSum = firstSum * 4\n  secondSum = secondSum * 2\n  return (math.pi \/ (3*n)) * (firstSum + secondSum)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210646,"user_id":null,"body":"local solution = {}\nlocal function f(x)\n  return 3\/2*math.pow(math.sin(x),3)\nend\nfunction solution.simpson(n)\n  local h=math.pi\/n\n  local sigma1=0\n  local sigma2=0\n  for i=1,n\/2 do\n    sigma1=sigma1+f(h*(2*i-1))\n  end\n  for i=1,n\/2-1 do\n    sigma2=sigma2+f(2*i*h)\n  end\n  return math.pi\/(3*n)*(f(0)+f(math.pi)+4*sigma1+2*sigma2)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210647,"user_id":null,"body":"local solution = {}\n\nfunction solution.simpson(n)\n  local a, b, suma, sumb = 0, math.pi, 0, 0\n  h = (b-a)\/n\n  local function f(n) return 3\/2 * math.sin(n)^3 end\n\n  for i=1, n\/2 do\n    suma =   suma + f( a +(2*i-1)*h)\n    if i < n\/2 then\n      sumb = sumb + f( a + 2*i   *h) \n    end\n  end\n  \n  result = (b-a)\/(3*n) * ( f(a) + f(b) + 4*suma + 2*sumb )\n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210648,"user_id":null,"body":"local solution = {}\n\n-- main function\nfunction solution.simpson(n)\n    -- constants: \n    --    a = 0      b = math.pi\n    -- f(a) = 0   f(b) = 0\n  \n    local h = math.pi \/ n -- (b - a) \/ n      \n    \n    -- first summation\n    local firstSum = 0\n  \n    for i = 1, n \/ 2 do\n        local x = (2 * h * i) - h -- a + (2i - 1)h\n        firstSum = firstSum + f(x)\n    end\n  \n    -- second summation\n    local secondSum = 0\n  \n    for i = 1, (n \/ 2) - 1 do\n        local x = 2 * h * i -- a + 2ih\n        secondSum = secondSum + f(x)\n    end\n  \n    -- final value for the approximation\n    return (h \/ 3) * ( (4 * firstSum) + (2 * secondSum) )\nend\n\n-- returns 1.5 * sin(x)^3\nfunction f(x)\n    return 1.5 * math.sin(x)^3\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210649,"user_id":492,"body":"local solution = {}\n\nfunction solution.simpson(n)\n    local function f(x) return 1.5 * (math.sin(x) ^ 3) end\n    local h, s1 = math.pi \/ n, 0.0\n    local i = 1\n    while i <=  n \/\/ 2 do\n        s1 = s1 + f((2 * i - 1) * h)\n        i = i + 1\n    end\n    local s2, j = 0.0, 1\n    while j <= n \/\/ 2 - 1 do\n        s2 = s2 + f(2 * j * h)\n        j = j + 1\n    end\n    return math.pi \/ (3 * n) * (f(0) + f(math.pi) + 4 * s1 + 2 * s2)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"565c0fa6e3a7d39dee000125":[{"id":210650,"user_id":53,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  local u = v * 5.0 \/ 18.0\n  return u + math.pow(u, 2.0) \/ (2.0 * mu * 9.81)\nend\n\nfunction solution.speed(d, mu)\n  local b = -2.0 * mu * 9.81\n  return 3.6 * (b + math.sqrt(math.pow(b, 2.0) - 4.0 * b * d)) \/ 2.0\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210651,"user_id":null,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  return v\/3.6*(1+v\/mu\/70.632) \nend\nfunction solution.speed(d, mu)\n  local p = mu*9.81  \n  return 3.6*((p*(p+d*2))^.5-p)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210652,"user_id":null,"body":"local solution = {}\n\ng = 9.81\n\nfunction solution.dist(v, mu)\n  v = 1000\/60^2 * v  -- m\/s instead of km\/h\n  local d1 = v*v \/ (2*mu*g)\n  return d1 + v * 1\nend\nfunction solution.speed(d, mu)\n  -- solve the quadratic equation\n  local v = -mu*g + math.sqrt((mu*g)^2 + 2*mu*g*d)\n  return 60^2\/1000 * v\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210653,"user_id":168,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  v = v * 10 \/ 36\n  return v + v ^ 2 \/ (2 * mu * 9.81)\nend\nfunction solution.speed(d, mu)\n  return ((1 + 2 * d \/ (mu * 9.81)) ^ 0.5 - 1) * mu * 9.81 * 3.6\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210654,"user_id":null,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  -- your code  \n  v = v*1000\/3600\n  return (v*v\/(2*mu*9.81)) + v\nend\nfunction solution.speed(d, mu)\n  -- your code\n  g = 9.81\n  return (((-2*mu*g)+math.sqrt((2*mu*g)*(2*mu*g)+4*d*2*mu*g))\/2)*3600\/1000\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210655,"user_id":null,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  v = v \/ 3.6\n  return v + v * v \/ (2 * mu * 9.81)\nend\n\nfunction solution.speed(d, mu)\n  local f = 2 * mu * 9.81\n  local v = math.sqrt(d * f + f * f \/ 4) - f \/ 2\n  return v * 3.6\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210656,"user_id":null,"body":"local solution = {}\nfunction solution.dist(v, mu)\n  return math.pow(v*1000\/3600,2)\/(2*mu*9.81)+v*1000\/3600\nend\nfunction solution.speed(d, mu)\n  return (-2*mu*9.81+math.sqrt(4*mu*mu*9.81*9.81+8*mu*9.81*d))\/2\/1000*3600\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210657,"user_id":null,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  v = (1000\/3600) * v\n  return v + (v^2)\/(2*mu*9.81)\nend\n\nfunction solution.speed(d, mu)\n  k = 2*mu*9.81\n  return (3600\/1000) * (math.sqrt(k) * math.sqrt(k + 4*d) - k) \/ 2\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210658,"user_id":null,"body":"local solution = {}\n\nfunction solution.dist(v, mu)\n  -- your code\n  return v\/3.6+v\/3.6*v\/3.6\/(2*mu*9.81)\nend\nfunction solution.speed(d, mu)\n  -- your code\n  return 3.6*(math.sqrt(d*2*mu*9.81+(mu*9.81)*(mu*9.81))-mu*9.81)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210659,"user_id":492,"body":"local solution = {}\n\nfunction solution.dist(v, mu) -- suppose reaction time is 1\n  local g = 9.81                              -- acceleration due to gravity in m\/s\n  local coef = 1000.0 \/ 3600.0                -- km\/h -> m\/s\n  local dreact = v * coef                     -- distance of reaction with t := 1\n  local vms = coef * v                        -- speed in m\/s\n  local dbrak = 0.5 * (vms ^ 2) \/ mu \/ g  -- braking distance\n  return dreact + dbrak                       -- total distance\nend\nfunction solution.speed(d, mu) -- suppose reaction time is 1\n  local g = 9.81                              -- acceleration due to gravity in m\/s\n  local coef = 3600 \/ 1000.0                  -- m\/s -> km\/h\n  return 0.5 * mu * g * (- 2 + math.sqrt(4 + 8*d\/mu\/g)) * coef\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"566fc12495810954b1000030":[{"id":210660,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    -- your code\n  local nums={}\n  local result=0\n  for i=0,n do\n    local _,t=tostring(i*i):gsub(d,\"\")\n    result=result+t\n  end\n    return result\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210661,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    -- your code\n  count = 0\n\tfor i=0, n do\n\t  for w in tostring(i*i):gmatch(tostring(d)) do\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\n    return count\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210662,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n  local ret, sd = 0, tostring(d)\n  for i=0,n do\n    for x in string.gmatch(tostring(i*i), '.') do\n      if x == sd then ret = ret + 1 end\n    end\n  end\n  return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210663,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    t=0\n    for i=0,n do\n      (''..i*i):gsub(d,load't=t+1')\n    end\n    return t\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210664,"user_id":492,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    local result = 0\n    while n >= 0 do\n        local k = n * n\n        while k ~= 0 do\n            if k % 10 == d then result = result + 1 end\n            k = k \/\/ 10\n        end\n        n = n - 1\n    end\n    if (d == 0) then result = result + 1 end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210665,"user_id":1474,"body":"local solution = {}\n\nlocal function count(c, s)\n  local cnt = 0\n  for i = 1, #s do\n    if s:sub(i, i) == c then cnt = cnt + 1 end\n  end\n  return cnt\nend\n\nfunction solution.nb_dig(n, d)\n  local sum = 0\n  local c = tostring(d)\n  for i = 0, n do\n    local s = tostring(math.floor(i ^ 2))\n    sum = sum + count(c, s)\n  end\n  return sum\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210666,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n  local tmp = \"\"\n  local counter = 0\n  local sd = tostring(d)\n  \n  for i=0, n do \n    tmp = tostring(i*i)\n    \n    for j = 0, #tmp do\n      if string.sub(tmp,j,j) == sd then counter = counter + 1 end\n    end\n      \n  end\n  \n    return counter\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210667,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n  local res = 0\n  local pat = ('[^%d]'):format(d)\n  for k = 0, n do\n    res = res + #tostring(k*k):gsub(pat, '')\n  end\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210668,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    local sol = 0\n    for i = 0, n do\n      local _, s = tostring(math.floor(i^2)):gsub(d, \"\")\n      sol = sol + s\n    end\n    return sol\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210669,"user_id":null,"body":"local solution = {}\n\nfunction solution.nb_dig(n, d)\n    count = 0\n    for i = 0, n do\n      s = tostring(i*i)\n      _, num_ = s:gsub(tostring(d),\"\")\n      count = count + num_ \n    end\n    return count\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"567501aec64b81e252000003":[{"id":210670,"user_id":null,"body":"local solution = {}\nlocal numbers = {[0]=\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\nfunction solution.wallPaper(l, w, h)\n  if l*w*h == 0 then return numbers[0] end\n  return numbers[math.ceil((l+w)*h*2 * 1.15 \/ (10*.52))]\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210671,"user_id":1474,"body":"local solution = {}\n\nlocal words = {'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'}\n\nfunction solution.wallPaper(l, w, h)\n  if l * w * h == 0 then return 'zero' end\n  warea = 2 * (l * h + w * h)\n  parea = 52 * 10 \/ 100\n  preq = warea \/ parea\n  res = preq * 1.15\n  return words[math.ceil(res)]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210672,"user_id":null,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\n  count = l * w * h\n  \n  if count == 0 then\n    return numbers[1]  \n  end\n  \n  return numbers[math.ceil(2 * h * (l + w) * 1.15 \/ 5.2) + 1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210673,"user_id":null,"body":"local solution = {}\n\nlocal numbers = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'}\n\nfunction solution.wallPaper(l, w, h)\n  if l*w*h == 0 then\n    return \"zero\"\n  end\n    -- your code\n    return numbers[math.ceil(2.3*h*(l+w)\/5.2) + 1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210674,"user_id":null,"body":"local solution = {}\nlocal numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\nfunction solution.wallPaper(l, w, h)\n      local x = (l*2+w*2)*h*1.15\n      local t = 10*0.52\n      local r = 0\n      while r*t<x do\n        r = r + 1\n      end\n  if l == 0 or w == 0 or h == 0 then return numbers[1]\n  else return numbers[r+1] end\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210675,"user_id":null,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  local numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\n  rolls = 0\n  if l > 0 and w > 0 and h > 0 then\n    repeat\n      rolls = rolls +1\n    until ((2*l*h)+(2*w*h))*1.15 <= rolls*5.2\n  end\n  return numbers[rolls+1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210676,"user_id":53,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  local ns = {'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',\n              'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'}\n  if l * w * h == 0 then return 'zero' end\n  return ns[math.ceil(((l + w) * 2.3 * h) \/ 5.2)]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210677,"user_id":null,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  local num={\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\n  local S=((l*h)+(w*h))*2\n  if l==0 or w==0 or h==0 then\n    return num[1]\n  end\n  return num[math.ceil((S*1.15)\/5.2)+1]\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210678,"user_id":168,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  if l <= 0 or w <= 0 or h <= 0 then return \"zero\" end\n  n = math.ceil(2 * h * (l + w) * 1.15 \/ 5.2)\n  return ({'one', 'two', 'three', 'four', 'five',\n   'six', 'seven', 'eight', 'nine', 'ten', 'eleven',\n   'twelve', 'thirteen', 'fourteen', 'fifteen',\n   'sixteen', 'seventeen', 'eighteen', 'nineteen',\n   'twenty'})[n] or 'many'\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210679,"user_id":null,"body":"local solution = {}\n\nfunction solution.wallPaper(l, w, h)\n  numbers = {\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"}\n  area = (2 * w * h) + (2 * l * h)\n  rolls = math.ceil(area\/0.52\/10.00 * 1.15)\n  if l * w * h == 0 then return \"zero\"\n  else return numbers[rolls]\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"569b5cec755dd3534d00000f":[{"id":210680,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(dons, navg)\n  local sdons = 0\n  for _, d in ipairs(dons) do sdons = sdons + d end\n  local ndon = math.ceil(navg * (#dons + 1) - sdons)\n  return ndon > 0 and ndon or -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210681,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  local Sum = 0\n  for i, n in ipairs(arr) do\n    Sum = Sum + n\n  end\n  local Answer = navg * (#arr + 1) - Sum\n  if Answer <= 0 then\n    return -1\n  else\n    return math.floor(Answer + 0.5)\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210682,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n  end\n  print(table.concat(arr,','), sum, navg)\n  local res = navg*(#arr+1)-sum\n  return res < 0 and -1 or math.ceil(res)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210683,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  local nSum = 0\n  local n = #arr + 1\n  for i, num in ipairs(arr) do\n    nSum = nSum + num\n  end\n  \n  local nRet = navg * n - nSum\n  \n  return nRet > 0 and math.ceil(nRet) or -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210684,"user_id":492,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n    local s, lg = 0, #arr\n    for _,v in ipairs(arr) do\n       s = s + v\n    end\n    local add = (lg + 1) * navg - s\n    if (add < 0) then\n        return -1\n    end\n    return math.ceil(add)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210685,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n    if arr[1] == nil then return navg end\n    local currentAverage = 0\n    local index = 0\n\n    for i, v in pairs(arr) do\n        currentAverage = currentAverage + v\n    end\n        if math.ceil(((#arr+1) * navg) - currentAverage) > 0 then \n        return math.ceil(((#arr+1) * navg) - currentAverage)\n        else \n        return -1\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210686,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  sum = 0\n  for _,a in ipairs(arr) do sum = sum + a end\n  donation = (#arr + 1) * navg - sum\n  return (donation <= 0) and -1 or math.ceil(donation)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210687,"user_id":1474,"body":"local solution = {}\n\nlocal function sum(arr)\n  local cnt = 0\n  for _, e in ipairs(arr) do\n    cnt = cnt + e\n  end\n  return cnt\nend\n\nfunction solution.newAvg(arr, navg)\n  if #arr == 0 then return navg end\n  def = navg * (#arr+1) - sum(arr)\n  if def > 0 then return math.ceil(def) else return -1 end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210688,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  local sum = 0\n  for _, v in ipairs(arr) do\n    sum = sum + v\n  end\n  local newval = navg * (#arr + 1) - sum\n  return (newval >= 0) and math.ceil(newval) or -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210689,"user_id":null,"body":"local solution = {}\n\nfunction solution.newAvg(arr, navg)\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n  end\n  sum = math.ceil((navg * (#arr + 1)) - sum)\n  return sum <= 0 and -1 or sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56a4872cbb65f3a610000026":[{"id":210690,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(s)\n    local max = s\n    local tmp = tostring(s)\n    for i = 1, #tmp do\n        tmp = tmp:sub(0, i - 1) .. tmp:sub(i + 1) .. tmp:sub(i, i)\n        if tonumber(tmp) > max then\n            max = tonumber(tmp)\n        end\n    end\n    return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210691,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(n)\n  local s = tostring(n)\n  for fixed = 0, #s-2 do\n    -- rotation:\n    s = s:sub(1, fixed) .. s:sub(fixed + 2) .. s:sub(fixed+1, fixed+1)\n    -- we keep the max number in n:\n    n = math.max(n, tonumber(s))\n  end\n  return n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210692,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(s)\n    -- your code\n    arr = {}\n\t\tarr[1] = tostring(rotate(s))\n\t\tfor i=1, (#tostring(s))-1 do\n\t\t  table.insert(arr, tostring(string.sub(arr[i], 1,i)..rotate(string.sub(arr[i], i+1))))\n\t\tend\n\t\ttable.insert(arr, tostring(s))\n\ttable.sort(arr, function (a, b) return (a > b) end)\n  return tonumber(arr[1])\nend\n\nfunction rotate(n)\nreturn string.sub(n, 2)..string.sub(n, 1, 1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210693,"user_id":1474,"body":"local solution = {}\n\nlocal function rotate(s)\n  return s:sub(2, -1) .. s:sub(1, 1)\nend\n\nfunction solution.max_rot(n)\n  stg = tostring(n)\n  l = #stg - 2\n  mx = n\n  for i = 0, l do\n    stg = stg:sub(1, i) .. rotate(stg:sub(i+1, -1))\n    tmp = tonumber(stg)\n    if mx < tmp then mx = tmp end\n  end\n  return mx\nend\n\nreturn solution\n\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210694,"user_id":1474,"body":"local solution = {}\n\nlocal function rotate(s)\n  return string.sub(s, 2, -1) .. string.sub(s, 1, 1)\nend\n\nfunction solution.max_rot(n)\n  stg = tostring(n)\n  l = #stg - 2\n  mx = n\n  for i = 0, l do\n    stg = string.sub(stg, 1, i) .. rotate(string.sub(stg, i+1, -1))\n    tmp = tonumber(stg)\n    if mx < tmp then mx = tmp end\n  end\n  return mx\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210695,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(numb)\n   pnum = math.ceil(math.log10(numb)) \n\nt = {}\ng = {}\ng[1] = numb \n  \n\nfor i =1 , pnum do\n  t[pnum-(i-1)] = (math.floor( numb\/(10^(i-1)))) - (math.floor( numb\/(10^(i))))*10\nend\n\nfunction rottable(tbl,ia,ib) --la fonction qui sert \u00e0 \"rotationner\"\n    \n--moteur de rotation\n  local y = tbl[ia]\n\n  for i = ia, ib-1 do\n\n    tbl[i] = tbl[i+1]\n\n  end\n\n  tbl[ib] = y\n\n  \n  local number = 0\n  for i = 1, #t do\n    number = number + (tbl[i] *(10^(#tbl-i)))\n  end\n\n\n\n  return tbl,number\n\nend\n\n\nfor i = 1, pnum do\nt,g[i+1] = rottable(t,i,#t)\n--print(g[i])\nend\n\n\ntable.sort(g)\n  --print (\"biggest ! \"..g[#g])\n  return g[#g]\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210696,"user_id":null,"body":"local solution = {}\n\nfunction tableToString(table)\n  local string  = \"\"\n  \n  for i =1, #table, 1 do\n    string = string..table[i]  \n    --print (string)\n  end\n  \n  --print(string)\n  return string  \nend\n\nfunction solution.max_rot(s)\n    local max = s\n    s = tostring(s)\n    sTable = {}\n    \n    for i = 1, #s, 1 do\n      sTable[i] = string.sub(s,i,i)\n      print (string.sub(s,i,i))\n    end\n  \n    for i = 1, #sTable, 1 do\n      local head = table.remove(sTable,i)\n      table.insert(sTable, head)\n      local num = tonumber(tableToString(sTable))\n      if num > max then\n        max = num\n      end\n    end\n  \n  \n    return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210697,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(s)\n    local solution = {}\n    local numbers = {}\n    for i=1, #tostring(s) do\n      numbers[#numbers + 1] = string.sub(s, i, i)\n    end\n    solution[#solution + 1] = tonumber(table.concat(numbers))\n    for i=1, #numbers - 1 do\n      for j=i, #numbers - 1 do\n        numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n      end\n      solution[#solution + 1] = tonumber(table.concat(numbers))\n    end\n    table.sort(solution)\n    return solution[#solution]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210698,"user_id":null,"body":"local solution = {}\n\nfunction solution.max_rot(s)\n  max = 0\n  num = tostring(s)\n\n  for n=0, string.len(num)-2 do    \n    num = string.sub(num,1,n) .. string.sub(num,n+2,string.len(num)) .. string.sub(num,n+1,n+1)\n    max = math.max(tonumber(num) , max)\n  end\n    return math.max(s , max)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210699,"user_id":null,"body":"\nfunction toArray(num)\n    local array = {}\n    local i = 0;\n    repeat\n        array[i] = num % 10\n        i = i + 1\n        num = num \/\/ 10\n    until num == 0\n    return array\nend\n\nfunction rotate(array)\n    local i = 0\n    local last = array[#array]\n    local newArray = {}\n    while (array[i + 1] ~= nil) do\n        newArray[i + 1] = array[i]\n        i = i + 1\n    end\n    newArray[0] = last;\n    return newArray;\nend\n\nfunction toInt(array)\n    local i = 0;\n    local pot = 1;\n    local result = 0;\n    while array[i] ~= nil do\n        result = result + array[i] * pot;\n        i = i + 1;\n        pot = pot * 10;\n    end\n    return result;\nend\n\nfunction keepRotate(num, keep)\n    array = toArray(num)\n    keepArray = {}\n    rotateArray = {}\n    i = 0\n    length = #array + 1\n    while i < length - keep do\n        rotateArray[i] = array[i]\n        i = i + 1;\n    end\n    while i < length do\n        keepArray[i] = array[i]\n        i = i + 1\n    end\n    rotatedArray = rotate(rotateArray)\n    i = 0\n    array = {}\n    while i < length - keep do\n        array[i] = rotatedArray[i]\n        i = i + 1\n    end\n    while i < length do\n        array[i] = keepArray[i]\n        i = i + 1\n    end\n    return array\nend\n\nfunction rotateInt(num, keep)\n    return toInt(keepRotate(num, keep))\nend\nsolution = {}\n\nfunction solution.max_rot(s)\n    local max = s\n    local current = s\n    local i = 0\n    local length = #toArray(s) + 1\n    repeat\n        current = rotateInt(current, i);\n        if current > max then max = current end\n        i = i + 1\n    until i == length\n\n    return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56a5d994ac971f1ac500003e":[{"id":210700,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(n, k)\n  if n == 0 or k > #n or k <= 0 then return \"\" end\n  local longest = \"\"\n  for i = 0, #n-k do\n    local consec = table.concat(table.move(n, i+1, i+k, 1, {}), \"\") -- slice out subarray, concat into string\n    if string.len(consec) > string.len(longest) then longest = consec end\n  end\n  return longest \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210701,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(arr, k)\n  if #arr == 0 or k > #arr or k <= 0 then return '' end\n  \n  local len = 0\n  for i = 1, k do len = len + #arr[i] end\n  local maxlen, maxpos = len, 1\n  for d = 1, #arr-k do\n    len = len + #arr[d+k] - #arr[d]\n    if len > maxlen then\n      maxlen, maxpos = len, 1+d\n    end\n  end\n  \n  return table.concat(arr, '', maxpos, maxpos+k-1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210702,"user_id":492,"body":"local solution = {}\n\nfunction solution.longest_consec(strarr, k)\n  if (k <= 0) then\n    return ''\n  end\n  local longest = ''\n  local istop = #strarr - k + 1\n  for i = 1, istop do\n    local l = table.pack(table.unpack(strarr, i, i + k - 1))\n    local str = table.concat(l, \"\")\n    if (string.len(str) > string.len(longest)) then\n      longest = str\n    end\n  end\n  return longest\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210703,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(s, n)\n  local longest = \"\"\n  for i=1,#s - (n - 1) do\n    local str = \"\"\n    for j=1, n do\n      str = str .. s[i + j - 1]\n    end\n    if #str > #longest then\n      longest = str\n    end\n  end\n  return longest\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210704,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(arr, k)\n  if #arr == 0 or k > #arr or k <= 0 then return \"\" end\n  local m, mi, l = 0, 1, k-1\n  for i=1, #arr-l do \n    local x = 0\n    for j=i, i+l do x = x+#arr[j] end\n    if x > m then m, mi = x, i end\n  end\n  return table.concat(arr, \"\", mi, mi+l)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210705,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(words, num)\n  local sol = \"\"\n  for i = 1, #words-num+1 do\n    local word = \"\"\n    for j = 0, num-1 do\n      word = word .. words[i+j]\n    end\n    if #word > #sol then\n      sol = word\n    end\n  end\n  return sol\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210706,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(strarr, k)\n    if (#strarr < 1 or k == 0) then return \"\" end\n    local l = 0 \n    local r = \"\"\n    for i = 1, #strarr-(k-1) do\n        local str = strarr[i]\n        for j = i+1, i + (k-1) do\n            str = str..strarr[j]\n        end        \n        if (str and str:len() > l) then\n            l = str:len()\n            r = str\n        end\n    end\n    return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210707,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(strarr, k)\n  -- your code\n  if #strarr == 0 or k > #strarr or k < 1 then\n    return \"\"\n  end\n  local longest = 0\n  local longestString = \"\"\n  for i = 1, #strarr - (k - 1) do\n    local str = \"\"\n    for j = 0, k - 1 do \n      str = str..strarr[i + j]\n    end\n    if str:len() > longest then\n      longest = str:len()\n      longestString = str\n    end\n  end\n  return longestString\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210708,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(n, k)\n  \n  local currentLongest = \"\"\n\n  for i = 1, #n-k+1 do\n    local t = \"\"\n    for j = i, i+k-1 do\n      t = t..n[j]\n    end\n    --print(t)\n    if #t > #currentLongest then\n      currentLongest = t\n    end\n  end\n\n  --print(\"Longest found: \"..currentLongest)\n  return currentLongest\n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210709,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_consec(n,p)\n  local longest,l = '',nil\n  for i = 1,#n-p+1 do\n    l = table.concat(n,'',i,i+p-1)\n    if #l > #longest then\n      longest = l\n    end\n  end\n  return longest\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56b22765e1007b79f2000079":[{"id":210710,"user_id":null,"body":"local function is_narcissistic(n)\n  local init = n\n  local digit = {}\n  local sum = 0\n  while n > 0 do\n    table.insert(digit, n%10)\n    n = (n - n%10)\/10\n  end\n  for i = 1, #digit do\n    sum = digit[i]^#digit + sum\n  end\n  \n  return sum == init\n    \n  \nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210711,"user_id":1474,"body":"local function is_narcissistic(n)\n  local s = tostring(n)\n  local p = #s\n  local cnt = 0\n  for i = 1, p do\n    cnt = cnt + tonumber(s:sub(i, i)) ^ p\n  end\n  return n == cnt\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210712,"user_id":null,"body":"local function is_narcissistic(n)\n    local n = tostring(n)\n    local total = 0\n    for i = 1, #n do\n      total = total + (tonumber(string.sub(n, i, i)) ^ #n)\n    end\n    return total == tonumber(n)\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210713,"user_id":null,"body":"local function is_narcissistic(n)\n  local s = tostring(n)\n  for digit in s:gmatch '.' do\n    n = n - digit ^ #s\n  end\n  return n == 0\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210714,"user_id":null,"body":"local function is_narcissistic(n)\n  local s = 0\n  local l = #tostring(n)\n  for d in tostring(n):gmatch(\"%d\") do\n    s = s + math.pow(d, l)\n  end\n  return s == n\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210715,"user_id":null,"body":"local function is_narcissistic(n)\n   l=string.len(n)\n   num=0\n   print(n)\n   for i = 1,l do\n      singleNum = string.sub(n,i,i)\n      num=num+singleNum^l\n   end\n\n   return num == n\nend\n\nreturn is_narcissistic","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210716,"user_id":null,"body":"local function is_narcissistic(n)\n    l=string.len(n)\n   num=0\n   for i = 1,l do\n      singleNum = string.sub(n,i,i)\n      num=num+singleNum^l\n   end\n   if num == n then\n      return true\n   else\n      return false\n   end\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210717,"user_id":null,"body":"local function is_narcissistic(n)\n    local sum = 0\n    local l = #tostring(n)\n    for digit in string.gmatch(n,\"%d\") do\n        sum = sum + (digit^l)\n    end\n    return sum == n\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210718,"user_id":168,"body":"local function is_narcissistic(n)\n  local l = math.floor(math.log10(n) + 1)\n  local m, s = n, 0\n  while m > 0 do\n    s = s + (m % 10) ^ l\n    m = m \/\/ 10\n  end\n  return s == n\nend\n\nreturn is_narcissistic\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210719,"user_id":50,"body":"local function is_narcissistic(n)\n  local m = n\n  local l = string.len(tostring(n))\n  local o = 0\n  while m > 0 do\n    o = o + (m % 10) ^ l\n    m = m \/\/ 10\n  end\n  return o == n\nend\n\nreturn is_narcissistic","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56b5afb4ed1f6d5fb0000991":[{"id":210720,"user_id":null,"body":"local solution = {}\nfunction solution.LeftSpin(s)\n  local res = string.sub(s,2);\n  res = res .. string.sub(s,1,1);\n  return res;\nend\nfunction solution.MyReverse(s)    \n    return string.reverse(s);    \nend\nfunction solution.revrot(s, sz)\n    -- your code\n    local strSz = #s;\n    if(sz <= 0 or strSz == 0 or sz > strSz)\n    then\n      return \"\";\n    end\n    local ans = \"\";\n    for i = 0 , strSz , sz do\n      if i + sz > strSz\n        then break;\n      end\n      local newStr = string.sub(s,i+1, i +sz);\n      sum = 0;\n      for j = 0, sz - 1, 1 do        \n        sum = sum + math.pow(newStr:byte(j+1)- 48, 3);\n      end\n      if(sum % 2 == 0)\n      then\n          newStr = solution.MyReverse(newStr);\n      else\n          newStr = solution.LeftSpin(newStr);\n      end\n      ans = ans .. newStr;\n    end    \n    return ans;\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210721,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n    local result = \"\"\n    if (sz <= 0) or (s == \"\") or (sz > #s) then\n        return \"\"\n    end\n    local its = #s \/\/ sz\n    s = s:sub(1, its * sz)\n    for i = 1, its do\n        local sum = 0\n        for j = 1, sz do\n            sum = sum + tonumber(s:sub((i - 1) * sz + j, (i - 1) * sz + j)) ^ 3\n        end\n        if sum % 2 == 0 then\n            result = result .. string.reverse(s:sub((i - 1) * sz + 1, (i - 1) * sz + sz))\n        else\n            print(i)\n            result = result .. s:sub((i - 1) * sz + 2, (i - 1) * sz + sz) .. s:sub((i - 1) * sz + 1, (i - 1) * sz + 1)\n        end\n    end\n    return result\nend\n\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210722,"user_id":492,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n    local function splitBySize(text, chunkSize)\n        local s = {}\n        for i=1, #text, chunkSize do\n            local ss = text:sub(i, i + chunkSize - 1)\n            if #ss == chunkSize then \n                s[#s+1] = ss\n            end\n        end\n        return s\n    end\n    local function cubit(s)\n        local total = 0; local j = 0;\n        for digit in string.gmatch(s, \"%d\") do\n            total = total + digit ^ 3\n        end\n        return total\n    end\n    local function rotLeft(s)\n        return string.sub(s, 2, -1) .. string.sub(s, 1, 1)\n    end\n    if sz <= 0 or s == \"\" or sz > #s then return \"\" end\n    local arr = splitBySize(s, sz)\n    for i, v in ipairs(arr) do\n        local aux = cubit(v)\n        if (aux % 2 == 0) then arr[i] = string.reverse(v)\n        else arr[i] = rotLeft(v) end\n    end\n    return table.concat(arr, \"\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210723,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n  return (s:sub(1, #s\/\/math.max(sz,1)*sz):gsub(('.'):rep(sz), function(c)\n    return #c:gsub('[02468]', '')%2==0 and c:reverse() or c:gsub('(.)(.*)', '%2%1')\n  end))\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210724,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n    local result = \"\"\n    if #s == 0 or sz == 0 or #s < sz then return \"\" end\n    for i = 1, math.floor(#s\/sz) do\n        local substring = string.sub(s, sz*(i-1)+1, i*sz)\n        local sum = 0\n        for j = 1, #substring do\n            sum = sum + tonumber(string.sub(substring, j, j))\n        end\n        if sum%2 == 0 then\n            result = result..string.reverse(substring)\n        else\n            result = result..string.sub(substring, 2, #substring)..string.sub(substring, 1, 1)\n        end\n    end\n    return result\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210725,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n  if sz<=0 or sz>#s or #s==0 then return \"\" end\n  return s:sub(1, #s\/\/sz*sz):gsub(string.rep(\"%d\",sz), \n    function(s)\n      local t=0\n      s:gsub(\"%d\", function(s) t=t+s end)\n      return t%2==0 and s:reverse() or s:sub(2,-1)..s:sub(1,1)\n    end)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210726,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n  if sz <= 0 or s == \"\" or sz > s:len() then return \"\" end\n  ret, i = \"\", 1\n  while i <= s:len() do\n    if (sz+i-1 > s:len()) then break end\n    ns = s:sub(i,sz+i-1)\n    sum = 0\n    for d in string.gmatch(ns, '.') do\n      sum = sum + tonumber(d)^3\n    end\n    i = i+sz\n    if sum%2 == 0 then\n      ret = ret .. ns:reverse()\n    else\n      ret = ret .. ns:sub(2,ns:len()) .. ns:sub(1,1)\n    end\n  end\n  return ret\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210727,"user_id":null,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n  reverse=function(c)\n    r=\"\"\n    print(c)\n    for i=#c,1,-1 do\n      r=r..(c:sub(i,i))\n    end\n    return r\n  end\n  rotate=function(ch)\n    return(ch:sub(2)..ch:sub(1,1))\n  end\n  op=function(s)\n    sum=0\n    for i=1,#s do\n      n=(tonumber(s:sub(i,i)))\n      sum=sum+(n*n*n)\n    end\n    if sum % 2 == 0 then\n      return reverse(s)\n    else\n      return rotate(s)\n    end\n  end\n  if string.len(s) < sz or sz<=0 then return \"\" end\n  res=\"\"\n  for i=1,#s\/sz do\n    res=res..op(s:sub((sz*i)-(sz-1),sz*(i)))\n  end\n  return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210728,"user_id":null,"body":"local solution = {}\n\nfunction rotate(str)\n\tlocal n = str:len()\n\tlocal l = str:sub(2)\n\tlocal r = str:sub(1, 1)\n\treturn l .. r\nend\n\n\nfunction cubsum(str)\n\tlocal res = 0\n\tfor c in str:gmatch('.') do\n\t\tres = res + tonumber(c) ^ 3\n\tend\n\treturn res % 2 == 0\nend\n\n\nfunction solution.revrot(str, sz)\n\tif sz <= 0 or #str == 0 or sz > #str then return '' end\n\n\tlocal N = #str\n\tres = {}\n\tfor i = 1, N, sz do\n\t\tif i + sz - 1 > N then goto continue end\n\t\tlocal sub = str:sub(i, i + sz - 1)\n\t\t\n\t\tif cubsum(sub) then\n\t\t\ttable.insert(res, sub:reverse())\n\t\telse\n\t\t\ttable.insert(res, rotate(sub))\n\t\tend\n\tend\n\t::continue::\n\n\treturn table.concat(res, '')\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210729,"user_id":168,"body":"local solution = {}\n\nfunction solution.revrot(s, sz)\n  if sz <= 0 then return '' end\n  local r = ''\n  for i = 1, #s, sz do\n    if i + sz - 1 <= #s then\n      local c = s:sub(i, i + sz - 1)\n      local s = 0\n      for x in c:gmatch('%d') do\n        s = s + x ^ 3\n      end\n      if s % 2 == 0 then\n        r = r .. c:reverse()\n      else\n        r = r .. c:sub(2) .. c:sub(1, 1)\n      end\n    end\n  end\n  return r\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56bc28ad5bdaeb48760009b0":[{"id":210730,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return string.sub(s, 2, -2)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210731,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return s:sub(2,#s-1) or s\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210732,"user_id":null,"body":"return {\n    remove_char = function(s)\n        return string.sub(s,2,-2)\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210733,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return s:sub(2,-2)  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210734,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return s:match('.(.*).')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210735,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return s:gsub('^.',''):gsub('.$','');\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210736,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  return s:sub(2,#s-1)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210737,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  if (#s < 2)\n    then error(\"Not enough length\")\n  end\n  return s:sub(2, #s - 1)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210738,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  --your code here\n    t={}\n    s:gsub(\".\",function(c) table.insert(t,c) end)\n    table.remove(t, 1)\n    table.remove(t, #t)\n    t = table.concat(t)\n  return t\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210739,"user_id":null,"body":"local kata={}\nfunction kata.remove_char(s)\n  \n  if #s > 1 then\n    s = string.sub (s, 2, #s-1)\n  end\n\n  return s\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56bdd0aec5dc03d7780010a5":[{"id":210740,"user_id":645,"body":"return function(n)\n  local o = n & -n\n  return n + o | ((n ~ n + o) \/ o >> 2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210741,"user_id":53,"body":"return function(n)\n  r = n & -n;\n  p = n + r;\n  q = (n ~ p) \/\/ (4 * r);\n  return p | q;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210742,"user_id":null,"body":"return function(n)\n  -- 128: n_zeros=7, n_ones=1\n  local n_zeros, n_ones = 0, 0\n  while n&1 == 0 do\n    n_zeros = n_zeros+1\n    n = n >> 1\n  end\n  while n&1 == 1 and n>0 do\n    n_ones = n_ones + 1\n    n = n >> 1\n  end\n  return n+1 << n_zeros+n_ones | (1 << n_ones-1)-1\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210743,"user_id":null,"body":"function count(num)\n        local ones = 0\n        while num > 0 do\n                res = num%2\n                ones = ones + res\n                num = (num - res)\/2\n        end\n        return ones\nend\n\nreturn function (num)\n        local ones = count(num)\n        local n = num + 1\n        while ones ~= count(n) do\n                n = n + 1\n        end\n        return n\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210744,"user_id":null,"body":"return function(n)\n    local count_bits = function(n)\n        local count = 0\n        for i=0,30 do\n            count = count + (n>>i)%2\n        end\n        return count\n    end\n    \n    for i=n+1,1<<30 do\n        if count_bits(i) == count_bits(n) then\n            return i\n        end\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210745,"user_id":null,"body":"return function(n)\n  if n==0 then return 1 end\n  local r = bit32.band(n, -n)\n  local s = n + r\n  local t = bit32.bxor(n, s)\n  return bit32.bor(s, bit32.rshift(t\/\/r, 2))\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210746,"user_id":null,"body":"return function(n)\n  -- stackoverflow code\n  local function tobinary( number )\n  local str = \"\"\n  if number == 0 then\n      return 0\n  elseif number < 0 then\n      number = - number\n      str = \"-\"\n  end\n  local power = 0\n  while true do\n      if 2^power > number then break end\n      power = power + 1\n  end\n  local dot = true\n  while true do\n    power = power - 1\n    if dot and power < 0 then\n      str = str .. \".\"\n      dot = false\n    end\n      if 2^power <= number then\n        number = number - 2^power\n        str = str .. \"1\"\n      else\n        str = str .. \"0\"\n      end\n      if number == 0 and power < 1 then break end\n    end\n    return str\n  end\n  \n  --now my code\n  local function numones(s)\n    local s = tostring(s)\n    local sum = 0\n    for i=1,#s do\n      if s:sub(i, i) == \"1\" then\n        sum = sum + 1\n      end\n    end\n    return sum\n  end\n  local dones = numones(tobinary(n))\n  local nextnum = n + 1\n  while numones(tobinary(nextnum)) ~= dones do\n    nextnum = nextnum + 1\n  end\n  return nextnum\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210747,"user_id":168,"body":"return function(n)\n  local t = n & -n\n  local h = n + t\n  local l = (n ~ h) \/\/ (4 * t)\n  return h + l\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210748,"user_id":null,"body":"return function(n)\n  local i, z, m = 0\n  while n & 1 << i == 0 do i = i + 1 end z = i + 1\n  while n & 1 << i > 0 do i = i + 1 end m = (1 << i) - 1\n  return (n & ~m) | (n & m) >> z | 1 << i\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210749,"user_id":null,"body":"function count1 (n)\n  -- return the number of 1 bits in n\n  local c = 0\n  while n ~= 0 do\n    if n & 1 == 1 then c = c + 1 end\n    n = n >> 1\n  end\n  return c\nend\n\nreturn function(n)\n  -- return the next highest number with the same number of 1 bits\n  local ones = count1(n)\n  repeat\n    n = n + 1\n  until count1(n) == ones\n  return n\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56c0ca8c6d88fdb61b000f06":[{"id":210750,"user_id":null,"body":"local kata = {}\n\n\n\n---@param str string\nfunction kata.next_version(str)\n  local t = {}\n  for v in str:gmatch(\"%d+\") do\n    t[#t+1] = tonumber(v)\n  end\n  t[#t] = t[#t] + 1\n  for i = #t, 2, -1 do\n    if t[i] == 10 then\n      t[i-1] = t[i-1] + 1\n      t[i] = 0\n    end\n  end\n  return table.concat(t, \".\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210751,"user_id":null,"body":"local kata = {}\n\nfunction kata.next_version(str)\n  local numbers = {}\n  for n in str:gmatch '%d+' do numbers[#numbers+1] = tonumber(n) end\n  local i = #numbers\n  while true do\n    numbers[i] = numbers[i] + 1\n    if numbers[i] < 10 or i == 1 then\n      return table.concat(numbers, '.')\n    end\n    numbers[i] = 0\n    i = i - 1\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210752,"user_id":null,"body":"local kata = {}\n\n\n\n---@param str string\nfunction kata.next_version(str)\n  local a = true\n  local r = str:reverse():gsub(\"%d\", function(d)\n      if a then a, d = d==\"9\", (d+1)%10 end\n      return string.format(\"%d\", d) end):reverse()\n  return (a and r:sub(1,1)==\"0\" and \"1\" or \"\")..r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210753,"user_id":168,"body":"local kata = {}\n\nfunction kata.next_version(str)\n  local ns = {}\n  for x in str:gmatch('%d+') do\n    table.insert(ns, tonumber(x))\n  end\n  for i = #ns, 1, -1 do\n    ns[i] = ns[i] + 1\n    if i == 1 or ns[i] < 10 then break end\n    ns[i] = 0      \n  end\n  return table.concat(ns, '.')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210754,"user_id":null,"body":"local kata = {}\n\nfunction kata.next_version(str)\n    local t = {}\n    for num in str:gmatch(\"%d+\") do\n        table.insert(t, num)\n    end\n    t[#t] = math.floor(t[#t] + 1)\n    for i = #t, 2, -1 do\n        if t[i] == 10 then\n            t[i] = 0\n            t[i-1] = math.floor(t[i-1] + 1)\n        end\n    end\n    return table.concat(t, \".\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210755,"user_id":null,"body":"local kata = {}\n\nfunction table.fromIterator(iter)\n  local result = {}\n  for v in iter do\n    table.insert(result, v)\n  end\n  return result\nend\n\nfunction table.slice(self, start, nd)\n  return table.pack(table.unpack(self, start, nd))\nend\n\nfunction reverse(tab)\n  local iterator = function(t, index)\n    local newIndex = index - 1\n    if newIndex == 0 then\n      return nil\n    end\n    return newIndex, t[newIndex]\n  end\n  return iterator, tab, #tab + 1\nend\n\nfunction string.split(self, separator)\n  local notSeparator = string.format('[^%s]+', separator)\n  return self:gmatch(notSeparator)\nend\n\n---@param str string\nfunction kata.next_version(str)\n  local components = table.fromIterator(str:split('\\\\.'))\n\n  local result, carry = {}, 1\n  for _, component in reverse(table.slice(components, 2)) do\n    local nextComponent = tonumber(component) + carry\n    carry = nextComponent >= 10 and 1 or 0\n    table.insert(result, 1, nextComponent % 10)\n  end\n  table.insert(result, 1, tonumber(components[1]) + carry)\n  \n  return table.concat(result, '.')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210756,"user_id":null,"body":"local kata = {}\n\nfunction kata.next_version(str)\n  local nu = {}\n  for d in string.gmatch(str, \"%d+\") do\n    nu[#nu + 1] = tonumber(d)\n  end\n  \n  for i = #nu, 1, -1 do\n    nu[i] = nu[i] + 1\n    if nu[i] == 10 and i ~= 1 then\n      nu[i] = 0\n    else\n      break\n    end\n  end\n  \n  return table.concat(nu, \".\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210757,"user_id":198,"body":"local kata = {}\n\nfunction kata.next_version(str)\n    local n = {}\n    local ret = \"\"\n    for s in string.gmatch(str, \"[0-9]+\") do\n        n[#n+1] = tonumber(s)\n    end\n\n    for i = #n, 1, -1 do\n        if i ~= 1 then\n            if n[i] < 9 then\n                n[i] = n[i] + 1 \n                break\n            else\n                n[i] = 0 \n            end\n        else\n            n[i] = n[i] + 1 \n        end\n    end\n\n    for i = 1, #n do\n        ret = ret .. tostring(n[i])\n        if i ~= #n then\n            ret = ret .. \".\"\n        end\n    end\n\n    return ret  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210758,"user_id":null,"body":"local kata = {}\n\n\n---@param str string\nfunction kata.next_version(str)\n  str = str:reverse()\n  local carry, acc = 0, \"\"\n  for n_str in str:gmatch(\"[^%.]+\") do\n    local n = carry + tonumber(n_str:reverse())\n    if acc == \"\" then n = n + 1 end \n    n, carry = n % 10, n \/\/ 10\n    acc = acc .. (acc == \"\" and \"\" or \".\") .. n  \n  end\n  if carry > 0 then acc = acc .. tostring(carry):reverse() end\n  return acc:reverse()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210759,"user_id":null,"body":"local kata = {}\n\nlocal function splitDot(input)\n    local t = {}\n    for str in string.gmatch(input, \"([^%.]+)\") do\n        table.insert(t, str)\n    end\n    return t\nend\n\nfunction kata.next_version(str)\n    local subVersions = splitDot(str)\n\n    for i = #subVersions, 1, -1 do\n        if i == 1 then\n            subVersions[i] = tostring((tonumber(subVersions[i]) + 1))\n        else\n            subVersions[i] = tostring((tonumber(subVersions[i]) + 1) % 10)\n        end\n        if subVersions[i] ~= \"0\" then\n            break\n        end\n    end\n    return table.concat(subVersions, \".\")\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56c5847f27be2c3db20009c3":[{"id":210760,"user_id":null,"body":"return function(n)\n  return \"apple\"\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210761,"user_id":null,"body":"return function(n)\n  lookup={ \"kiwi\", \"pear\", \"banana\", \"melon\", \"pineapple\", \"apple\", \"cucumber\", \"orange\", \"grape\", \"cherry\"}  \n  compact=\"0102323454646787858919102053234346757878919151020234356467678959191010252343464658789891950202323454\"\n  n=tonumber(n)\n  if n<10 or n>=10000 then return end\n  local sum\n  local nstr=tostring(n)\n  repeat\n    sum=0\n    for c=1,#nstr do\n      sum=sum+tonumber(nstr:sub(c,c))\n    end\n    n=n-sum\n    nstr=tostring(n)\n  until n<=100\n  return lookup[compact:sub(n,n)+1]\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210762,"user_id":null,"body":"local fruits =\n[[\n1-kiwi\n2-pear\n3-kiwi\n4-banana\n5-melon\n6-banana\n7-melon\n8-pineapple\n9-apple\n10-pineapple\n11-cucumber\n12-pineapple\n13-cucumber\n14-orange\n15-grape\n16-orange\n17-grape\n18-apple\n19-grape\n20-cherry\n21-pear\n22-cherry\n23-pear\n24-kiwi\n25-banana\n26-kiwi\n27-apple\n28-melon\n29-banana\n30-melon\n31-pineapple\n32-melon\n33-pineapple\n34-cucumber\n35-orange\n36-apple\n37-orange\n38-grape\n39-orange\n40-grape\n41-cherry\n42-pear\n43-cherry\n44-pear\n45-apple\n46-pear\n47-kiwi\n48-banana\n49-kiwi\n50-banana\n51-melon\n52-pineapple\n53-melon\n54-apple\n55-cucumber\n56-pineapple\n57-cucumber\n58-orange\n59-cucumber\n60-orange\n61-grape\n62-cherry\n63-apple\n64-cherry\n65-pear\n66-cherry\n67-pear\n68-kiwi\n69-pear\n70-kiwi\n71-banana\n72-apple\n73-banana\n74-melon\n75-pineapple\n76-melon\n77-pineapple\n78-cucumber\n79-pineapple\n80-cucumber\n81-apple\n82-grape\n83-orange\n84-grape\n85-cherry\n86-grape\n87-cherry\n88-pear\n89-cherry\n90-apple\n91-kiwi\n92-banana\n93-kiwi\n94-banana\n95-melon\n96-banana\n97-melon\n98-pineapple\n99-apple\n100-pineapple\n]]\n\nlocal function getDigitSum(n)\n    local sum = 0\n    for i=1, #tostring(n) do\n        local c = string.sub(tostring(n),i,i)\n        if tonumber(c) then sum=sum+tonumber(c) end\n    end\n    return sum\nend\n\nreturn function(n)\n    local sum = n-getDigitSum(n)\n    while sum>100 do\n        sum = sum-getDigitSum(sum)\n    end\n    local fruit = string.find(fruits,tostring(sum))\n    fruit = string.sub(fruits, fruit, string.find(fruits, '\n', fruit))\n    return fruit:gsub('[\n1234567890-]', '')\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210763,"user_id":null,"body":"local input = [[\n1-kiwi\n2-pear\n3-kiwi\n4-banana\n5-melon\n6-banana\n7-melon\n8-pineapple\n9-apple\n10-pineapple\n11-cucumber\n12-pineapple\n13-cucumber\n14-orange\n15-grape\n16-orange\n17-grape\n18-apple\n19-grape\n20-cherry\n21-pear\n22-cherry\n23-pear\n24-kiwi\n25-banana\n26-kiwi\n27-apple\n28-melon\n29-banana\n30-melon\n31-pineapple\n32-melon\n33-pineapple\n34-cucumber\n35-orange\n36-apple\n37-orange\n38-grape\n39-orange\n40-grape\n41-cherry\n42-pear\n43-cherry\n44-pear\n45-apple\n46-pear\n47-kiwi\n48-banana\n49-kiwi\n50-banana\n51-melon\n52-pineapple\n53-melon\n54-apple\n55-cucumber\n56-pineapple\n57-cucumber\n58-orange\n59-cucumber\n60-orange\n61-grape\n62-cherry\n63-apple\n64-cherry\n65-pear\n66-cherry\n67-pear\n68-kiwi\n69-pear\n70-kiwi\n71-banana\n72-apple\n73-banana\n74-melon\n75-pineapple\n76-melon\n77-pineapple\n78-cucumber\n79-pineapple\n80-cucumber\n81-apple\n82-grape\n83-orange\n84-grape\n85-cherry\n86-grape\n87-cherry\n88-pear\n89-cherry\n90-apple\n91-kiwi\n92-banana\n93-kiwi\n94-banana\n95-melon\n96-banana\n97-melon\n98-pineapple\n99-apple\n100-pineapple\n]]\n\nlocal fruit = {}\nfor n, f in input:gmatch(\"(%d+)-(%a+)\") do\n  fruit[tonumber(n)] = f\nend\n\nlocal function sumDigits (n)\n  local sum = 0\n  while n > 0 do\n    sum = sum + n % 10\n    n = n \/\/ 10\n  end\n  return sum\nend\n\nlocal function getFruit (n)\n  n = n - sumDigits(n)\n  if fruit[n] then return fruit[n] end\n  return getFruit(n)\nend\n\nreturn getFruit","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210764,"user_id":null,"body":"local bizarre_fruit_list = {\n  \"kiwi\",\n  \"pear\",\n  \"kiwi\",\n  \"banana\",\n  \"melon\",\n  \"banana\",\n  \"melon\",\n  \"pineapple\",\n  \"apple\",\n  \"pineapple\",\n  \"cucumber\",\n  \"pineapple\",\n  \"cucumber\",\n  \"orange\",\n  \"grape\",\n  \"orange\",\n  \"grape\",\n  \"apple\",\n  \"grape\",\n  \"cherry\",\n  \"pear\",\n  \"cherry\",\n  \"pear\",\n  \"kiwi\",\n  \"banana\",\n  \"kiwi\",\n  \"apple\",\n  \"melon\",\n  \"banana\",\n  \"melon\",\n  \"pineapple\",\n  \"melon\",\n  \"pineapple\",\n  \"cucumber\",\n  \"orange\",\n  \"apple\",\n  \"orange\",\n  \"grape\",\n  \"orange\",\n  \"grape\",\n  \"cherry\",\n  \"pear\",\n  \"cherry\",\n  \"pear\",\n  \"apple\",\n  \"pear\",\n  \"kiwi\",\n  \"banana\",\n  \"kiwi\",\n  \"banana\",\n  \"melon\",\n  \"pineapple\",\n  \"melon\",\n  \"apple\",\n  \"cucumber\",\n  \"pineapple\",\n  \"cucumber\",\n  \"orange\",\n  \"cucumber\",\n  \"orange\",\n  \"grape\",\n  \"cherry\",\n  \"apple\",\n  \"cherry\",\n  \"pear\",\n  \"cherry\",\n  \"pear\",\n  \"kiwi\",\n  \"pear\",\n  \"kiwi\",\n  \"banana\",\n  \"apple\",\n  \"banana\",\n  \"melon\",\n  \"pineapple\",\n  \"melon\",\n  \"pineapple\",\n  \"cucumber\",\n  \"pineapple\",\n  \"cucumber\",\n  \"apple\",\n  \"grape\",\n  \"orange\",\n  \"grape\",\n  \"cherry\",\n  \"grape\",\n  \"cherry\",\n  \"pear\",\n  \"cherry\",\n  \"apple\",\n  \"kiwi\",\n  \"banana\",\n  \"kiwi\",\n  \"banana\",\n  \"melon\",\n  \"banana\",\n  \"melon\",\n  \"pineapple\",\n  \"apple\",\n  \"pineapple\"\n}\n\n\nlocal function sum_digits(num)\n  local num_str = tostring(num);\n  \n  local sum = 0;\n  for i = 1, #num_str do\n    sum = sum + tonumber(string.sub(num_str, i, i));\n  end;\n\n  return sum;\nend;\n\n\nreturn function(n)\n  repeat\n    n = n - sum_digits(n);\n  until bizarre_fruit_list[n];\n  \n  return bizarre_fruit_list[n];\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210765,"user_id":null,"body":"return function()\n  return \"apple\"\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210766,"user_id":null,"body":"function rSum(n)\n   local sum=0;\n   for d in tostring(n):gmatch('%d') do\n\t  sum = sum + tonumber(d);\n   end\n\treturn sum;\nend\n\nfunction isInList(num)\n   if(num>=1 and num<=100) then\n\t  return true;\n   end\n   return false;\nend\nlocal fruits = {\n[0] = \"kiwi\",\n[1] = \"pear\",\n[2] = \"kiwi\",\n[3] = \"banana\",\n[4] = \"melon\",\n[5] = \"banana\",\n[6] = \"melon\",\n[7] = \"pineapple\",\n[8] = \"apple\",\n[9] = \"pineapple\",\n[10] = \"cucumber\",\n[11] = \"pineapple\",\n[12] = \"cucumber\",\n[13] = \"orange\",\n[14] = \"grape\",\n[15] = \"orange\",\n[16] = \"grape\",\n[17] = \"apple\",\n[18] = \"grape\",\n[19] = \"cherry\",\n[20] = \"pear\",\n[21] = \"cherry\",\n[22] = \"pear\",\n[23] = \"kiwi\",\n[24] = \"banana\",\n[25] = \"kiwi\",\n[26] = \"apple\",\n[27] = \"melon\",\n[28] = \"banana\",\n[29] = \"melon\",\n[30] = \"pineapple\",\n[31] = \"melon\",\n[32] = \"pineapple\",\n[33] = \"cucumber\",\n[34] = \"orange\",\n[35] = \"apple\",\n[36] = \"orange\",\n[37] = \"grape\",\n[38] = \"orange\",\n[39] = \"grape\",\n[40] = \"cherry\",\n[41] = \"pear\",\n[42] = \"cherry\",\n[43] = \"pear\",\n[44] = \"apple\",\n[45] = \"pear\",\n[46] = \"kiwi\",\n[47] = \"banana\",\n[48] = \"kiwi\",\n[49] = \"banana\",\n[50] = \"melon\",\n[51] = \"pineapple\",\n[52] = \"melon\",\n[53] = \"apple\",\n[54] = \"cucumber\",\n[55] = \"pineapple\",\n[56] = \"cucumber\",\n[57] = \"orange\",\n[58] = \"cucumber\",\n[59] = \"orange\",\n[60] = \"grape\",\n[61] = \"cherry\",\n[62] = \"apple\",\n[63] = \"cherry\",\n[64] = \"pear\",\n[65] = \"cherry\",\n[66] = \"pear\",\n[67] = \"kiwi\",\n[68] = \"pear\",\n[69] = \"kiwi\",\n[70] = \"banana\",\n[71] = \"apple\",\n[72] = \"banana\",\n[73] = \"melon\",\n[74] = \"pineapple\",\n[75] = \"melon\",\n[76] = \"pineapple\",\n[77] = \"cucumber\",\n[78] = \"pineapple\",\n[79] = \"cucumber\",\n[80] = \"apple\",\n[81] = \"grape\",\n[82] = \"orange\",\n[83] = \"grape\",\n[84] = \"cherry\",\n[85] = \"grape\",\n[86] = \"cherry\",\n[87] = \"pear\",\n[88] = \"cherry\",\n[89] = \"apple\",\n[90] = \"kiwi\",\n[91] = \"banana\",\n[92] = \"kiwi\",\n[93] = \"banana\",\n[94] = \"melon\",\n[95] = \"banana\",\n[96] = \"melon\",\n[97] = \"pineapple\",\n[98] = \"apple\",\n[99] = \"pineapple\"\n}\n\nreturn function(n)\n  -- fruit name like \"apple\"\n  print(n);\n  while(true) do\n\t  n = n - rSum(n);\n\t  if(isInList(n)) then\n\t\t break;\n\t  end\n   end\n\treturn fruits[n-1];\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210767,"user_id":null,"body":"return function(n)\n  -- fruit name like \"apple\"\n  local list = [[1-kiwi\n2-pear\n3-kiwi\n4-banana\n5-melon\n6-banana\n7-melon\n8-pineapple\n9-apple\n10-pineapple\n11-cucumber\n12-pineapple\n13-cucumber\n14-orange\n15-grape\n16-orange\n17-grape\n18-apple\n19-grape\n20-cherry\n21-pear\n22-cherry\n23-pear\n24-kiwi\n25-banana\n26-kiwi\n27-apple\n28-melon\n29-banana\n30-melon\n31-pineapple\n32-melon\n33-pineapple\n34-cucumber\n35-orange\n36-apple\n37-orange\n38-grape\n39-orange\n40-grape\n41-cherry\n42-pear\n43-cherry\n44-pear\n45-apple\n46-pear\n47-kiwi\n48-banana\n49-kiwi\n50-banana\n51-melon\n52-pineapple\n53-melon\n54-apple\n55-cucumber\n56-pineapple\n57-cucumber\n58-orange\n59-cucumber\n60-orange\n61-grape\n62-cherry\n63-apple\n64-cherry\n65-pear\n66-cherry\n67-pear\n68-kiwi\n69-pear\n70-kiwi\n71-banana\n72-apple\n73-banana\n74-melon\n75-pineapple\n76-melon\n77-pineapple\n78-cucumber\n79-pineapple\n80-cucumber\n81-apple\n82-grape\n83-orange\n84-grape\n85-cherry\n86-grape\n87-cherry\n88-pear\n89-cherry\n90-apple\n91-kiwi\n92-banana\n93-kiwi\n94-banana\n95-melon\n96-banana\n97-melon\n98-pineapple\n99-apple\n100-pineapple]]\n  \n  local fruitList = {}\n  for i in list:gmatch(\"%a+\") do\n    fruitList[#fruitList+1] = i\n  end\n  \n  local finished\n  \n  while true do\n    local sumNums = 0\n    for v in tostring(n):gmatch(\".\") do\n      sumNums = sumNums + tonumber(v)\n    end\n    local index = n - sumNums\n    if index <= 100 then\n      return fruitList[index]\n    else\n      n = index\n      print(n)\n    end\n  end\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210768,"user_id":null,"body":"return function(n)\n  -- fruit name like \"apple\"\n    s = tostring(n)\n    return 'apple'\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210769,"user_id":null,"body":"local solution = {}\n  \n  solution.fruit_string = [[\n1-kiwi\n2-pear\n3-kiwi\n4-banana\n5-melon\n6-banana\n7-melon\n8-pineapple\n9-apple\n10-pineapple\n11-cucumber\n12-pineapple\n13-cucumber\n14-orange\n15-grape\n16-orange\n17-grape\n18-apple\n19-grape\n20-cherry\n21-pear\n22-cherry\n23-pear\n24-kiwi\n25-banana\n26-kiwi\n27-apple\n28-melon\n29-banana\n30-melon\n31-pineapple\n32-melon\n33-pineapple\n34-cucumber\n35-orange\n36-apple\n37-orange\n38-grape\n39-orange\n40-grape\n41-cherry\n42-pear\n43-cherry\n44-pear\n45-apple\n46-pear\n47-kiwi\n48-banana\n49-kiwi\n50-banana\n51-melon\n52-pineapple\n53-melon\n54-apple\n55-cucumber\n56-pineapple\n57-cucumber\n58-orange\n59-cucumber\n60-orange\n61-grape\n62-cherry\n63-apple\n64-cherry\n65-pear\n66-cherry\n67-pear\n68-kiwi\n69-pear\n70-kiwi\n71-banana\n72-apple\n73-banana\n74-melon\n75-pineapple\n76-melon\n77-pineapple\n78-cucumber\n79-pineapple\n80-cucumber\n81-apple\n82-grape\n83-orange\n84-grape\n85-cherry\n86-grape\n87-cherry\n88-pear\n89-cherry\n90-apple\n91-kiwi\n92-banana\n93-kiwi\n94-banana\n95-melon\n96-banana\n97-melon\n98-pineapple\n99-apple\n100-pineapple\n]]\n  solution.fruits = {}\n  solution.index = 1\n\n  for line in string.gmatch(solution.fruit_string, '[^\\r\n]+') do\n    line = string.sub(line, #tostring(solution.index) + 2, #line)  \n    table.insert(solution.fruits, line)\n    solution.index = solution.index + 1\n  end\n\n  function solution.sum(n)\n    local sum = 0\n  \n    for i = 1, #tostring(n) do\n      sum = sum + tonumber(string.sub(tostring(n), i, i))\n    end\n      \n    return sum\n  end\n\n  function solution.subtract_sum(n)\n    local sum = solution.sum(n)\n    local return_value = n - sum\n    \n    if not solution.fruits[return_value] then\n      while not solution.fruits[return_value] do\n        sum = solution.sum(return_value)\n      \n        return_value = return_value - sum\n      end\n    end\n    \n    return solution.fruits[return_value]\n  end\n\nreturn solution.subtract_sum","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56cac350145912e68b0006f0":[{"id":210770,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(s)\n  local words = {}\n  print(s)\n  for word in (s..' '):gmatch '(%S*) ' do\n    words[#words+1] = word\n  end\n  local asc = false\n  local function fnsel(w1, w2)\n    asc = not asc\n    if asc then\n      if #w1 > #w2 then w1, w2 = w2, w1 end\n      return w1:lower(), w2:upper()\n    else\n      if #w1 < #w2 then w1, w2 = w2, w1 end\n      return w1:upper(), w2:lower()\n    end\n  end\n  for i = 1, #words-1 do\n    words[i], words[i+1] = fnsel(words[i], words[i+1])\n  end\n  return table.concat(words, ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210771,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(strng)\n    words = {}\n    for w in strng:gmatch(\"%S*\") do\n       words[#words+1] = w\n    end\n  \n    for i=1, #words - 1 do\n      if ( i % 2 ~= 0 and #words[i] > #words[i+1] ) or\n         ( i % 2 == 0 and #words[i] < #words[i+1] ) then\n        words[i], words[i+1] = words[i+1], words[i]\n      end\n    end\n  \n    for k,w in pairs(words) do\n      if k % 2 ~= 0 then words[k] = w:lower() end\n      if k % 2 == 0 then words[k] = w:upper() end\n    end\n    return table.concat(words, \" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210772,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(strng)\n  local words = {}\n  for word in strng:gmatch(\"[%w-]+\") do table.insert(words, word) end\n  if #words==0 then return \"\" end\n  local last, is_up, res = table.remove(words,1), false, \"\"\n  local function up_low(s) return is_up and s:upper() or s:lower() end \n  for _,w in ipairs(words) do\n    if is_up and  #w>#last or not is_up and #w<#last then  w,last = last,w end\n    res, last , is_up = res..up_low(last)..\" \", w, not is_up\n  end\n  -- return res..up_low(last)\n  \n  -- dumb wrong impl of KATA reacts to trailing space as if it was a word\n  local ending =\"\"\n  if strng:find\"%s+$\" then\n    if is_up then\n      ending = up_low(last)..\" \"\n    else\n      is_up = not is_up\n      ending = \" \"..up_low(last)\n    end\n  else  \n    ending = up_low(last)\n  end\n  return res..ending\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210773,"user_id":168,"body":"local solution = {}\n\nfunction solution.arrange(strng)\n  local r, sgn, prev = {}, 1, nil\n  for w in (strng .. ' '):gmatch('(%S-)%s') do\n    if not prev then\n      prev = w\n    else\n      local x\n      if (#w - #prev) * sgn < 0 then\n        x, prev = w, prev\n      else\n        x, prev = prev, w\n      end\n      table.insert(r, sgn > 0 and x:lower() or x:upper())\n      sgn = -sgn\n    end\n  end\n  if prev then\n    table.insert(r, sgn > 0 and prev:lower() or prev:upper())\n  end\n  r = table.concat(r, ' ')\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210774,"user_id":null,"body":"local solution = {}\n\n-- annoyingly, it seems we must roll our own iterator as and empty string appears to \n-- be a possible \"substring\" in random tests. this behaviour is NOT well communicated.\nlocal function specialStringIterator(inputString)\n  local index = 1\n\n  return function(state, lastWord)\n    if index == -1 then return end\n\n    local nextSpace = string.find(inputString, \"%s\", index)\n\n    local result = \"\"\n\n    if nextSpace then\n      result = string.sub(inputString, index, nextSpace-1)\n      index = nextSpace + 1\n    else\n      result = string.sub(inputString, index)\n      index = -1\n    end\n\n    return result\n  end, true, true\nend\n\nfunction solution.arrange(str)\n  local result = {}\n  \n  -- start off with the biggest length so we never move on the first iteration\n  local prevWordLength = math.huge\n  local inverse = true\n  \n  --for word in string.gmatch(str, \"%S+\") do\n  for word in specialStringIterator(str) do\n    local wordLength = #word\n    \n    -- where the previous word is longer than the current word, move.\n    local move = prevWordLength > wordLength\n    \n    -- unless we want the inverse behaviour\n    if inverse then move = not move end\n    \n    -- but if the lengths are equal, don't move regardless\n    if wordLength == prevWordLength then\n      move = false  \n    end\n    \n    if not move then\n      -- not moving, simply insert at the end of the list.\n      table.insert(result, word)\n      \n      -- we are now the new previous word\n      prevWordLength = wordLength\n    else\n      -- moving, insert behind the previous word, it will stay the previous word.\n      table.insert(result, #result, word)\n    end\n    \n    -- invert the condition\n    inverse = not inverse\n  end\n  \n  -- make IT up AND down.\n  local upperCase = false\n  for i, word in ipairs(result) do\n    result[i] = upperCase and string.upper(word) or string.lower(word)\n    \n    upperCase = not upperCase\n  end\n\n  -- concat and return the result.\n  return table.concat(result, \" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210775,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(strng)\n  local str = {}\n  for s in strng:gmatch(\"%S*\") do\n    table.insert(str, s)\n  end\n  \n  for i = 1, #str - 1 do\n    if (i % 2 == 0) and (#(str[i]) < #(str[i + 1])) then\n      local tmp = str[i]\n      str[i] = str[i + 1]\n      str[i + 1] = tmp\n    end\n    \n    if (i % 2 == 1) and (#(str[i]) > #(str[i + 1])) then\n      local tmp = str[i]\n      str[i] = str[i + 1]\n      str[i + 1] = tmp\n    end\n  end\n  \n  for i = 1, #str do\n    if (i % 2 == 1) then\n      str[i] = string.lower(str[i])\n    else\n      str[i] = string.upper(str[i])\n    end\n  end\n  \n  return table.concat(str, \" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210776,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(strng)\n  local strings = {}\n  print(strng)\n  for text in strng:gmatch(\"%S+\") do\n    table.insert(strings,text)\n  end\n  if strng:sub(#strng, #strng) == \" \" then\n    table.insert(strings, \"\")\n  end\n\n  local index = 1\n  while index < #(strings) do\n    if index % 2 == 1 then\n      if #(strings[index]) > #(strings[index + 1]) then\n        strings[index], strings[index + 1] = strings[index + 1], strings[index]\n        index = math.max(1, index - 1)\n      else\n        index = index + 1\n      end\n    else\n      if #(strings[index]) < #(strings[index + 1]) then\n        strings[index], strings[index + 1] = strings[index + 1], strings[index]\n        index = math.max(1, index - 1)\n      else\n        index = index + 1\n      end\n    end\n  end\n  for i = 1, #(strings) do\n    if i % 2 == 1 then\n      strings[i] = string.lower(strings[i])\n    else\n      strings[i] = string.upper(strings[i])\n    end\n  end\n\n  return table.concat(strings, \" \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210777,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(str)\n  -- split string\n  local t = {}\n  for i in str:gmatch('[^%s]*') do\n    t[#t+1] = i\n  end\n  -- arrange\n  for i = 1, #t-1 do\n    if (i%2==1 and #t[i] > #t[i+1]) or\n       (i%2==0 and #t[i] < #t[i+1]) then\n      t[i], t[i+1] = t[i+1], t[i]\n    end\n  end\n  -- format & output\n  for i, v in ipairs(t) do\n    t[i] = i%2==1 and v:lower() or v:upper()\n  end\n  return table.concat(t, ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210778,"user_id":null,"body":"local solution = {}\n\nfunction solution.arrange(str)\n  -- split string\n  local t = {}\n  for i in str:gmatch('[^%s]*') do\n    t[#t+1] = i\n  end\n  -- arrange\n  for i = 1, #t-1 do\n    if (i%2==1 and #t[i] > #t[i+1]) or (i%2==0 and #t[i] < #t[i+1]) then\n      local s = t[i]\n      t[i] = t[i+1]\n      t[i+1] = s\n    end\n  end\n  -- format & output\n  for i, v in ipairs(t) do\n    t[i] = i%2==1 and v:lower() or v:upper()\n  end\n  return table.concat(t, ' ')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210779,"user_id":null,"body":"local solution = {}\n\nfunction concat2(t)\n  retstr = \"\"\n  del = \"\"\n  for k,w in pairs(t) do\n    if w ~= \" \" then del = \" \" else del = \"\" end\n    if t[k+1] == nil then del = \"\" print(\"endendend\") end\n    retstr = retstr .. w .. del\n  end\n  return retstr\nend\n\nfunction solution.arrange(strng)\n    print (\"\n strng = \\\"\" .. strng .. \"\\\"\n\")\n    retstr = \"\"\n    words = {}\n    retwords = {}\n    i = 1\n    for w,s in string.gmatch(strng,\"(%S+)(%s*)\") do\n       words[#words+1] = w\n      if #s > 1 then words[#words+1] = string:rep(\" \", #s-1) ; print (\"###\") end\n    end\n    for w in string.gmatch(strng,\"(%s+)$\") do -- end spaces ugly fix\n      print (\"@!@!w = \\\"\" .. w .. \"\\\"\")\n      words[#words+1] = w\n    end\n    \n    retwords = words\n    for k,w in pairs(words) do\n      print (\"w = +\" .. w .. \"+ words[k+1] = +\" .. (words[k+1] or \"nil\") .. \"+\")\n      if (k % 2) ~= 0 and words[k+1] ~= nil then\n        if #w > #words[k+1] then\n          --retstr = retstr .. words[k+1] .. \" \"\n          table.insert(retwords, k, table.remove(retwords,k+1):lower())\n          print(\"1\")\n        end\n      end\n      if k % 2 == 0 and words[k+1] ~= nil then\n        if #w < #words[k+1] then\n          --retstr = retstr .. words[k+1]:upper() .. \" \"\n          table.insert(retwords, k, table.remove(retwords,k+1):upper())\n        print(\"0\")\n        end\n      end\n    end\n    for k,w in pairs(retwords) do\n      if k % 2 == 0 then retwords[k] = w:upper() end\n      if k % 2 ~= 0 then retwords[k] = w:lower() end\n    end\n    retstr = concat2(retwords)\n    print (\"retstr:sub(-1,1) = +\" .. retstr:sub(-1,1) .. \"+\")\n    print (\"retstr:sub(-2,2) = +\" .. retstr:sub(#retstr-1) .. \"+\")\n    --[[while retstr:sub(-2,1) == \" \" and retstr:sub(#retstr-2) == \" \" do\n      retstr = retstr:sub(1,1)\n      print \"dsfdjsdfsjlfrhe\"\n    end]]--\n    if retstr:sub(#retstr-1) == \"  \" then retstr = retstr:sub(1,#retstr-1) end\n    return retstr\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56cd44e1aa4ac7879200010b":[{"id":210780,"user_id":28,"body":"function is_uppercase(inp)\n  return inp == string.upper(inp)\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210781,"user_id":null,"body":"return function(s)\n  return s==s:upper()\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210782,"user_id":null,"body":"function is_uppercase(inp)\n  return not inp:match(\"%l\")\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210783,"user_id":null,"body":"function is_uppercase(inp)\n  local a = string.match(inp, \"%l\")\n  if a == nil then return true else return false end\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210784,"user_id":null,"body":"function is_uppercase(inp)\n    local isThereLowerCase = false\n    for letter in string.gmatch(inp, \"%a\") do\n        if string.match(letter,\"%l\") then -- if it finds a lowercase letter\n            isThereLowerCase = true\n      end\n    end\n    return not isThereLowerCase\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210785,"user_id":null,"body":"function is_uppercase(inp)\n string = tostring(inp)\n  testString = string.upper(inp)\n  if string == testString then\n    return true\n    else\n    return false \n    end\n  \n\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210786,"user_id":null,"body":"function is_uppercase(inp)\n  local upc = string.upper(inp)\n  \n  if inp == upc then return true else return false end\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210787,"user_id":null,"body":"function is_uppercase(inp)\n  if inp == string.upper(inp) then\n    return true\n  end\n  return false\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210788,"user_id":null,"body":"function is_uppercase(inp)\n  return inp == (inp:upper())\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210789,"user_id":881,"body":"function is_uppercase(inp)\n    return not inp:match(\"[a-z]\")\nend\n\nreturn is_uppercase","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56d904db9963e9cf5000037d":[{"id":210790,"user_id":null,"body":"return function(a, b)\n  return a | b -- Hmm is that right?\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210791,"user_id":645,"body":"return function(a, b)\n  return a | b\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbe0e313c2f63be4000b25":[{"id":210792,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n    return s:reverse():gsub('[^\n]+', s.reverse)\nend\nfunction solution.vertMirror(s)\n    return s:gsub('[^\n]+', s.reverse)\nend\nfunction solution.oper(f, s)\n    return f(s)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210793,"user_id":492,"body":"local solution = {}\n\nlocal function string_split(s, delimiter)\n    result = {}\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match)\n    end\n    return result\nend\nfunction solution.horMirror(s)\n    local arr = string_split(s, '\n')\n    if #arr == 0 then return \"\" end\n    local res = ''\n    for i = #arr, 1, -1 do\n    res = res .. arr[i] .. '\n'\n    end\n    return string.sub(res, 1, #res - 1)\nend\nfunction solution.vertMirror(s)\n    local arr = string_split(s, '\n')\n    if #arr == 0 then return \"\" end\n    local res = ''\n    for i = 1, #arr do\n        res = res .. string.reverse(arr[i]) .. '\n'\n    end\n    return string.sub(res, 1, #res - 1)\nend\nfunction solution.oper(f, s)\n    return f(s)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210794,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n  local t = {}\n  for r in s:gmatch('%a+') do table.insert(t, 1, r) end\n  return table.concat(t, '\n')\nend\n\nfunction solution.vertMirror(s)\n  local t = {}\n  for r in s:gmatch('%a+') do\n    table.insert(t, {})\n    for l in r:gmatch('%a') do table.insert(t[#t], 1, l) end\n    t[#t] = table.concat(t[#t])\n  end\n  return table.concat(t, '\n')\nend\n\nfunction solution.oper(f, s)\n  return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210795,"user_id":null,"body":"local solution = {}\n\n-- horizontal mirror function\nfunction solution.horMirror(stringOne, stringTwo)\n    return stringTwo..\"\n\"..stringOne\nend\n\n-- vertical mirror function\nfunction solution.vertMirror(stringOne, stringTwo)\n    return stringOne..stringTwo:reverse()..\"\n\"\nend\n\n-- main function\nfunction solution.oper(f, s)\n    local newString = \"\"\n  \n    -- applies mirror reflection to each segment\n    for segment in s:gmatch(\"[^\n]+\") do\n        newString = f(newString, segment)\n    end\n  \n    return (newString == \"\" and \"\") or newString:sub(1,-2)  -- removes hanging '\n'\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210796,"user_id":null,"body":"local _ = { }\n\nlocal function get_words( str )\n  local words, accumulator = { }, ''\n  for index = 1, #str do\n    local character = string.sub( str, index, index )\n    if character == '\n' and accumulator ~= '' then\n      words[ #words + 1 ], accumulator = accumulator, ''\n    else\n      accumulator = accumulator .. character\n    end\n  end\n  \n  if accumulator ~= '' then\n    words[ #words + 1 ] = accumulator\n  end\n  \n  return words\nend\n\nlocal function reverse_array( array )\n  local _ = { }\n  for index = #array, 1, -1 do\n    _[ #_ + 1 ] = array[ index ]\n  end\n  \n  return _\nend\n\nlocal function vertical_mirror( str )\n  local words = get_words( str )\n  \n  for index = 1, #words do\n    words[ index ] = string.reverse( words[ index ] )\n  end\n  \n  return table.concat( words, '\n' )\nend\n\nlocal function horizontal_mirror( str )\n  return ( table.concat( reverse_array( get_words( str ) ), '\n' ) )\nend\n\nlocal function operation( fn, str )\n  return fn( str )\nend\n\n_.vertMirror, _.horMirror, _.oper = vertical_mirror, horizontal_mirror, operation\n\nreturn _","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210797,"user_id":1474,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n  ret = {}\n  res = {}\n  for w in s:gmatch('[^\n]+') do\n    table.insert(ret, w)\n  end\n  for i = #ret, 1, -1 do\n    table.insert(res, ret[i])\n  end\n  return table.concat(res, '\n')\nend\n\nfunction solution.vertMirror(s)\n  ret = {}\n  for w in s:gmatch('[^\n]+') do\n    table.insert(ret, w:reverse())\n  end\n  return table.concat(ret, '\n')\nend\n\nfunction solution.oper(f, s)\n  return f(s)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210798,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n    -- your code\n    return solution.vertMirror(s):reverse()\nend\nfunction solution.vertMirror(s)\n    -- your code\n    return s:gsub('[^\n]+', string.reverse)\nend\nfunction solution.oper(f, s)\n    -- your code\n    return f(s)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210799,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n  local result = {}\n  for w in s:reverse():gmatch(\"%a+\") do\n    table.insert(result, w:reverse())\n    end\n    return table.concat(result, '\n')\nend\n\nfunction solution.vertMirror(s)\n    local result = {}\n    for w in s:gmatch(\"%a+\") do\n      table.insert(result, w:reverse())\n    end\n    return table.concat(result, '\n')\nend\n\nfunction solution.oper(f, s)\n    return f(s)\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210800,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n   t =\"\"\n   for token in s:gmatch(\"[^%s]+\") do\n     t =  token .. \"\n\" .. t \n   end\n   return t:sub(1,-2)\nend\nfunction solution.vertMirror(s)\n    local t = \"\"\n    for token in s:gmatch(\"[^%s]+\") do\n       t =  t .. token:reverse() .. \"\n\"\n    end\n    return t:sub(1,-2)\nend\nfunction solution.oper(f, s) \n  return f(s) \nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210801,"user_id":null,"body":"local solution = {}\n\nfunction solution.horMirror(s)\n   t =\"\"\n   for token in string.gmatch(s, \"[^%s]+\") do\n     t =  token .. \"\n\" .. t \n   end\n   return string.sub(t,1,#t-1)\nend\nfunction solution.vertMirror(s)\n    local t = \"\"\n    for token in string.gmatch(s, \"[^%s]+\") do\n       t =  t .. string.reverse(token) .. \"\n\"\n    end\n    return string.sub(t,1,#t-1)\nend\nfunction solution.oper(f, s) return f(s) end\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dbe7f113c2f63570000b86":[{"id":210802,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    return s:reverse()\nend\nfunction solution.selfieAndRot(s)\n  s = s:gsub('%S+', '%1'..('.'):rep(#s:match '%S+'))\n  return ('%s\n%s'):format(s, s:reverse())\nend\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210803,"user_id":null,"body":"local solution = { rot=string.reverse }\n\nfunction solution.selfieAndRot(s)\n  s = s:gsub(\"%S+\", function(s) return s..(\".\"):rep(#s) end)\n  return s..\"\n\"..s:reverse()\nend\n\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210804,"user_id":null,"body":"local solution = {}\n\nsolution.rot = string.reverse\n\nfunction solution.selfieAndRot(s)\n  s=s:gsub(\"[^\n]+\",function(s) return s..string.rep(\".\",#s) end)\n  return s..\"\n\"..s:reverse()\nend\n\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210805,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    local s1 = string.reverse(s)\n    s1 = string.gsub(s1, \"n\\\\\",\"\n\")\n    return s1\nend\nfunction solution.selfieAndRot(s)\n    local len = string.find(s, \"\n\")-1\n    local dot = string.rep(\".\",len)\n    local s1 = string.gsub(s, \"\n\",dot..\"\n\")\n    local s2 = solution.rot(s)\n    s2 = string.gsub(s2, \"\n\",\"\n\"..dot)\n    return s1..dot..\"\n\"..dot..s2\nend\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210806,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    local rot = {}\n    for line in s:gmatch(\"[^\\r\n]+\") do\n        table.insert(rot, 1, line:reverse()) \n    end    \n    return table.concat(rot, \"\n\")\nend\n\nfunction solution.selfieAndRot(s)\n    local tmp = {}\n    local selfyRot = {}\n    \n    for line in s:gmatch(\"[^\\r\n]+\") do\n        table.insert(tmp, line .. string.rep(\".\", #line)) \n        table.insert(selfyRot, 1, string.rep(\".\", #line) .. line:reverse()) \n    end\n    return table.concat(tmp, \"\n\") .. \"\n\" .. table.concat(selfyRot, \"\n\")\nend\n\nfunction solution.oper(f, s)\n  return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210807,"user_id":168,"body":"local solution = {}\n\nfunction solution.rot(s)\n  return s:reverse()\nend\nfunction solution.selfieAndRot(s)\n  local xs = {}\n  for x in s:gmatch('[^\n]+') do\n    table.insert(xs, x .. ('.'):rep(#x))\n  end\n  return table.concat(xs, '\n') .. '\n' .. table.concat(xs, '\n'):reverse()\nend\nfunction solution.oper(f, s)\n  return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210808,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    -- your code\n    return string.reverse(s)\nend\nfunction solution.selfieAndRot(s)\n    local repeating = string.len(string.match(s,\"([^\n]+)\"))\n    s=string.gsub(s,\"\n\",string.rep('.',repeating)..'\n')..string.rep('.',repeating)\n    return s..'\n'..string.reverse(s)\nend\nfunction solution.oper(f, s)\n    -- your code\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210809,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    local _ = ''\n    for i = #s, 1, -1 do\n        _ = _ .. s:sub(i, i)\n    end\n    return _\nend\n\nfunction solution.selfieAndRot(s)\n    local _ = {}\n    for line in string.gmatch(s .. '\n', '(.-)\n') do\n        table.insert(_, line)\n    end\n    local __ = {}\n    for i, v in next, _ do\n        table.insert(__, v..('.'):rep(#v))\n    end\n    local a = table.concat(__, '\n')\n    return a..'\n'..solution.rot(a)\nend\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210810,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n  local output = \"\"\n  for x in s:gmatch \".\" do\n    output = x .. output\n  end\n  return output\nend\nfunction solution.selfieAndRot(s)\n  local self_output = \"\"\n  local rot_output = \"\"\n  local n = 0\n  for x in s:gmatch \".\" do\n    if x == \"\n\" then\n      self_output = self_output .. (\".\"):rep(n) .. x\n      n = 0\n    else\n      n = n + 1\n      self_output = self_output .. x\n    end\n  end\n  for x in s:gmatch \".\" do\n    if x == \"\n\" then\n      rot_output = x .. (\".\"):rep(n) .. rot_output\n    else\n      rot_output = x .. rot_output\n    end\n  end\n\n  return self_output .. (\".\"):rep(n) .. \"\n\" .. (\".\"):rep(n) .. rot_output\nend\nfunction solution.oper(f, s)\n  return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210811,"user_id":null,"body":"local solution = {}\n\nfunction solution.rot(s)\n    rotated = \"\"\n    i = 1\n    while i <= #s do\n      if string.sub(s,i,i+1) == \"\n\" then\n        rotated = \"\n\" .. rotated\n        i = i + 2\n      else\n        rotated = string.sub(s,i,i) .. rotated\n        i = i + 1\n      end\n    end\n    return rotated\nend\nfunction solution.selfieAndRot(s)\n    selfied = \"\"\n    i = 1\n    line_length = 0\n    j = 1\n  \n    for i=1,#s do\n      if string.sub(s,i,i) == \"\n\" then break end\n      line_length = line_length + 1\n    end\n\n    while i <= #s do\n      if string.sub(s,i,i) == \"\n\" then\n        for j=1,line_length do\n          selfied = selfied .. \".\"\n        end\n        selfied = selfied .. \"\n\"\n      else\n        selfied = selfied .. string.sub(s,i,i)\n      end\n      i = i + 1\n    \n      if i == #s+1 then\n      for j=1,line_length do\n          selfied = selfied .. \".\"\n        end\n      end\n    end\n  \n    selfied = selfied .. \"\n\" .. solution.rot(selfied)\n      \n    return selfied\nend\n\nfunction solution.oper(f, s)\n    return f(s)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56dec885c54a926dcd001095":[{"id":210812,"user_id":null,"body":"local kata = {}\n\nfunction kata.opposite(number)\n  return -number\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210813,"user_id":null,"body":"local kata = {}\n-- This is the best solution I could come up with\nfunction kata.opposite(number)\n  value1 = 80 + number * 2\n  value2 = 6000 \/ 45 \/ 6 \/ 90\n  isNumber = false\n  numberminus14 = number - 14\n  operatortobeused = \"-\"\n  arraymax = 4 * 8 * 3.5\n  arraymin = 6582374765170 * 0\n  isnegativenumber = false\n  sumofvalue1value2andnumberminus14squared = value1+value2+numberminus14*numberminus14\n  null = nil\n  nondisassociativearray = {}\n  randomnumber = math.random(9223372036854775807)\n  selfdestruct = \"not yet\"\n  \n  if type(number) == type(arraymin \/ value1) then\n    isNumber = true\n  else\n    isNumber = false\n  end\n  if isNumber == true then\n    number = tostring(number)\n    number = tonumber(number)\n    return -number\n  else\n    selfdestruct = \"YES\"\n    while selfdestruct == \"YES\" do\n      print(randomnumber)\n      randomnumber = math.random(9223372036854775807)\n    end\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210814,"user_id":null,"body":"return { opposite = function(n) return -n end }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210815,"user_id":null,"body":"local kata = {}\n\nfunction kata.opposite(n)\n  return -n;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210816,"user_id":null,"body":"local kata = {}\n\nfunction kata.opposite(number)\n  return -1*number;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210817,"user_id":null,"body":"return {['opposite'] = function(x)\n\treturn x * -1\nend }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210818,"user_id":null,"body":"--[[\nReturns the opposite of a number.\n--]]\n\nlocal kata = {}\n\nfunction kata.opposite(number)\n  return (-number)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210819,"user_id":null,"body":"--[[\nReturns the opposite of a number.\n--]]\n\nlocal kata = {}\n\nfunction kata.opposite(number)\n  return (number - 2 * number)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210820,"user_id":null,"body":"local kata = {}\n\nfunction kata.opposite(number)\nnegativenumber = number - number*2\nreturn negativenumber\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210821,"user_id":null,"body":"local kata = {}\n\nfunction kata.opposite(number)\nlocal opposite = 0\n  opposite = 0 - number\n  return opposite\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56efab15740d301ab40002ee":[{"id":210822,"user_id":492,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n    if b ~= 0 then return solution.gcdi(b, a % b) else return math.abs(a) end\nend\nfunction solution.lcmu(a, b) return math.abs(a * b) \/\/ solution.gcdi(a, b) end\nfunction solution.som(a, b) return a + b end\nfunction solution.maxi(a, b) return math.max(a, b) end\nfunction solution.mini(a, b) return math.min(a, b) end\n\nfunction solution.operArray(fct, arr, init)\n    local n, res = init, {}\n    for i = 1, #arr do \n        n = fct(n, arr[i])\n        res[i] = n\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210823,"user_id":null,"body":"local solution = {\n  maxi = math.max,\n  mini = math.min,\n}\n\nfunction solution.gcdi(a,b)\n  a, b = math.abs(a), math.abs(b)\n  while b ~= 0 do\n    a, b = b, a%b\n  end\n  return a, b\nend\n\nfunction solution.lcmu(a, b) \n  return math.abs(a) * math.abs(b) \/\/ solution.gcdi(a, b)\nend\n\nfunction solution.som(a, b) \n  return a + b\nend\n\nfunction solution.operArray(fct, arr, init)\n  local res = {}\n  for i, x in ipairs(arr) do\n    init = fct(init, x)\n    res[i] = init\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210824,"user_id":null,"body":"local s = {}\nfunction s.gcdi(a, b) \n  local function gcd(a,b) return b==0 and a or gcd(b,a%b) end\n  return math.abs(gcd(a, b))\nend\nfunction s.lcmu(a, b) return math.abs(a*b)\/\/s.gcdi(a, b)end\nfunction s.som(a, b) return a+b end\ns.maxi, s.mini = math.max, math.min\nfunction s.operArray(fct, arr, init)\n  local r = {}\n  for i=1, #arr do init = fct(init, arr[i]); r[i]=init end\n  return r\nend\nreturn s","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210825,"user_id":null,"body":"local solution = {}\n\n--\/\/ https:\/\/www.geeksforgeeks.org\/least-common-denominator-lcd\/\n--\/\/ yes i sleep in math class\nlocal function gcd(a, b)\n  while a ~= 0 do\n    a, b = b % a, a\n  end\n  \n  return b\nend\n\nfunction solution.gcdi(a,b)\n  return gcd(math.abs(a), math.abs(b))\nend\n\nfunction solution.lcmu(a, b)\n  a, b = math.abs(a), math.abs(b)\n  return (a * b) \/ gcd(a, b)\nend\n\nfunction solution.som(a, b)\n  return a + b\nend\n\nfunction solution.maxi(a, b)\n  if a > b then\n    return a\n  else\n    return b\n  end\nend\n\nfunction solution.mini(a, b)\n  if a < b then\n    return a\n  else\n    return b\n  end\nend\n\nfunction solution.operArray(fct, arr, init)\n  local r = {}\n  for i = 1, #arr do\n    r[i] = fct(r[i-1] or init, arr[i])\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210826,"user_id":168,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n  return b == 0 and math.abs(a) or solution.gcdi(b, a % b)\nend\nfunction solution.lcmu(a, b) \n  return math.abs(a \/ solution.gcdi(a, b) * b)\nend\nfunction solution.som(a, b) \n  return a + b\nend\nfunction solution.maxi(a, b)\n  return math.max(a, b)\nend\nfunction solution.mini(a, b)\n  return math.min(a, b)\nend\n\nfunction solution.operArray(fct, arr, init)\n  local r = {}\n  for _, x in ipairs(arr) do\n    init = fct(init, x)\n    table.insert(r, init)\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210827,"user_id":null,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n    a = math.abs(a)\n    b = math.abs(b)\n    local d = a - b\n    if a == b then return a\n    elseif d < 0 then\n      d = -d\n      return solution.gcdi(a, d)\n    else return solution.gcdi(b, d)\n    end\nend\nfunction solution.lcmu(a, b)\n  a = math.abs(a)\n  b = math.abs(b)\n   return (a*b)\/\/solution.gcdi(a, b)\nend\nfunction solution.som(a, b) \n  return a+b\nend\nfunction solution.maxi(a, b)\n  return math.max(a,b) \nend\nfunction solution.mini(a, b)\n  return math.min(a,b)\nend\n\nfunction solution.operArray(fct, arr, init)\n    local x = init\n    local y = arr[1]\n    local l = {}\n    for i = 1, #arr do\n      l[i] = fct(x, y)\n      x = l[i]\n      y = arr[i+1]\n    end\n  return l\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210828,"user_id":null,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n  a,b = math.abs(a),math.abs(b)\n  a,b = math.max(a,b),math.min(a,b)\n  if a%b == 0 then return b end\n  for i = b,1,-1 do\n    if b%i == 0 and a%i == 0 then\n      return i\n    end\n  end\nend\n\nfunction solution.lcmu(a, b)\n  a,b = math.abs(a),math.abs(b)\n  a,b = math.max(a,b),math.min(a,b)\n  return (a*b)\/solution.gcdi(a,b)\nend\nfunction solution.som(a, b) \n  return a+b\nend\n\nfunction solution.maxi(a, b)\n  return math.max(a,b)\nend\nfunction solution.mini(a, b)\n  return math.min(a,b)\nend\n\nfunction solution.operArray(fct, arr, init)\n    local tab = {}\n    for i,v in pairs(arr) do\n      init = fct(init,v)\n      table.insert(tab,init)\n    end\n    return tab\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210829,"user_id":null,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n  return b==0 and math.abs(a) or solution.gcdi(math.abs(b), math.abs(a%b))    \nend\nfunction solution.lcmu(a, b) \n  return math.abs(a * b) \/ solution.gcdi(a, b)\nend\nfunction solution.som(a, b) \n  return a + b\nend\nfunction solution.maxi(a, b)\n  return a > b and a or b\nend\nfunction solution.mini(a, b)\n  return a < b and a or b\nend\n\nfunction solution.operArray(fct, arr, init)\n  local result = {}\n\n\tif (not next(arr)) then\n\t\treturn result\n\tend\n\t\n  result[1] = fct(init, arr[1])\n  for i=2, #arr do\n    result[i] = fct(result[i-1], arr[i])  \n  end\n  \n\treturn result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210830,"user_id":null,"body":"local solution = {}\n\nfunction solution.gcdi(a, b)\n    if b ~= 0 then return solution.gcdi(b, a%b) else return math.abs(a) end  \nend\nfunction solution.lcmu(a, b) return math.abs(a * b \/ solution.gcdi(a, b)) end\nfunction solution.som(a, b) return a + b end\nfunction solution.maxi(a, b) return math.max(a, b) end\nfunction solution.mini(a, b) return math.min(a, b) end\n\nfunction solution.operArray(fct, arr, init)\n    retarr = {}\n    n = init\n    for i=1, #arr do\n      n = fct(n, arr[i])\n      retarr[i] = n\n    end\n  return retarr\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210831,"user_id":null,"body":"local solution = {}\n\nfunction solution.gcdi(a,b)\n    while b ~= 0 do\n        t = b\n        b = math.fmod(a,b)\n        a = t\n    end\n    return math.abs(a)   \nend\nfunction solution.lcmu(a, b) \n  return math.abs((a*b \/ solution.gcdi(a,b)))\nend\nfunction solution.som(a, b) \n  return a + b\nend\nfunction solution.maxi(a, b)\n  return math.max(a, b)\nend\nfunction solution.mini(a, b)\n  return math.min(a, b)\nend\n\nfunction solution.operArray(fct, arr, init)\n  rs = {}\n  for i=1, #arr do\n    b = arr[i]\n    \n    if i == 1 then a = init end\n    if i > 1 then a = rs[i-1] end \n    \n    rs[#rs+1] = fct(a,b)\n    print (fct(a,b))\n  end\n  return rs\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56f69d9f9400f508fb000ba7":[{"id":210832,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  array ={}\n  for i = 1, n do\n    array[i] = i\n  end\n  return array\n    \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210833,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local bestfather = {}\n  for i = 1, n do\n    table.insert(bestfather, i)\n  end\n  return bestfather\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210834,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local d = {}\n  for i = 1, n do\n    d[i]=i\n  end\n  return d\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210835,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local tab = {}\n  for i=1,n do\n    table.insert(tab,i)\n    end\n  return tab\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210836,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local t = {}\n  \n  for i = 1, n do \n    table.insert(t, i)\n  end\n  \n  return t\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210837,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local res = {}\n  for i = 1, n do\n    res[#res+1] = i\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210838,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  monkeys = {}\n  i = 1\n  while i <= n do\n    i = i+1\n    table.insert(monkeys,i - 1 , i - 1)\n  end\n  \n  return monkeys\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210839,"user_id":null,"body":"return {\n    monkey_count = function(n)\n        local t = {}\n        for i = 1,n do\n            t[#t+1] = i\n        end\n        return t\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210840,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  list = {}\n  for i = 1,n do\n    list[i] = i\n  end\n  return list\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210841,"user_id":null,"body":"kata = {}\n\nfunction kata.monkey_count(n)\n  local x = {}\n  for i = 1,n do\n    x[#x+1] = i\n  end\n  return x\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56f6ad906b88de513f000d96":[{"id":210842,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n    return bonus and \"$\"..salary * 10 or \"$\"..salary\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210843,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  if bonus then\n    return '$' .. salary * 10\n  end\n  return '$' .. salary\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210844,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(s, b)\n return '$'..s..(b and '0' or \"\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210845,"user_id":null,"body":"return { bonus_time = function(x, y) return '$' .. (y and x * 10 or x) end }","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210846,"user_id":1192,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n    if bonus then\n        salary = salary * 10;\n    end\n    return \"$\" .. salary;\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210847,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  return \"$\"..(bonus and salary * 10 or salary)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210848,"user_id":759,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  return \"$\" .. salary * (bonus and 10 or 1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210849,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  return '$'..({salary, salary * 10})[bonus and 2 or 1]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210850,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  return \"$\"..salary..(bonus and \"0\" or \"\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210851,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus_time(salary, bonus)\n  local p = salary\n  if bonus then p = p*10 end \n  return \"$\"..p\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56fc55cd1f5a93d68a001d4e":[{"id":210852,"user_id":null,"body":"function stairsIn20Years(stairs)\n  local total_stair_count = 0\n  \n  for _, day in ipairs(stairs) do\n    for _, stair_count in ipairs(day) do\n      total_stair_count = total_stair_count + stair_count\n    end\n  end\n  \n  return total_stair_count * 20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210853,"user_id":168,"body":"function stairsIn20Years(stairs)\n  local s = 0\n  for _, xs in pairs(stairs) do\n    for _, x in pairs(xs) do\n      s = s + x\n    end\n  end\n  return 20 * s\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210854,"user_id":28,"body":"function stairsIn20Years(stairs)\n  local count = 0\n  \n  for _,v in pairs(stairs) do\n    for _,g in pairs(v) do\n      count = count + g\n    end\n  end\n  \n  return count * 20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210855,"user_id":null,"body":"return function(data)\n  local o=0 for d=1,7 do for dd=1,#data[d]do o=o+data[d][dd] end end o=o*20 return o\nend","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210856,"user_id":null,"body":"function stairsIn20Years(stairs)\n  local totalstairs = 0\n  for k,v in pairs(stairs) do\n    for k2, v2 in pairs(v) do\n      totalstairs = totalstairs + v2\n    end\n  end\n  return totalstairs * 20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210857,"user_id":null,"body":"local function istable(t) return type(t) == 'table' end\n\nfunction stairsIn20Years(stairs)\n  local sum = 0\n  for k,v in pairs(stairs) do\n    for k_2, v_2 in pairs(v) do\n      sum = sum + v_2\n    end\n  end\n  return sum*20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210858,"user_id":null,"body":"function stairsIn20Years(stairs)\n  local sum = 0\n  \n  for i = 1, #stairs do\n    for j = 1, #stairs[i] do\n      sum = sum + stairs[i][j]\n    end\n  end\n  \n  return sum*20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210859,"user_id":null,"body":"function stairsIn20Years(stairs)\n  n = 0\n  for _, k in pairs(stairs) do\n    for _, v in pairs(k) do\n      n = n + v\n    end\n  end\n  return n*20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210860,"user_id":null,"body":"function stairsIn20Years(stairs)\n  local stairs_total = 0\n  for _, day in next, stairs do\n    for _, amount in next, day do\n      stairs_total = stairs_total + amount\n    end\n  end\n  return stairs_total * 20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210861,"user_id":null,"body":"function stairsIn20Years(stairs)\n  total = 0\n  for i, day in pairs(stairs) do\n    for j, stairs in pairs(day) do\n      total = stairs + total \n    end\n  end\n    return total*20\nend\n\nreturn stairsIn20Years","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"56fe17fcc25bf3e19a000292":[{"id":210862,"user_id":168,"body":"local solution = {}\n\n-- Only v1 and u1 are tested\n-- you can use u_eff and v_eff to calculate them\nfunction solution.v1(n, p)\n    return p * (2 * n + 1)\nend\nfunction solution.u1(n, p)\n    return p * (n + 1)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210863,"user_id":492,"body":"local solution = {}\n\nfunction solution.v1(n, p)\n    return (2 * n + 1) * p\nend\nfunction solution.u1(n, p)\n    return (n + 1) * p\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5713bc89c82eff33c60009f7":[{"id":210864,"user_id":null,"body":"function to_freud(sentence)\n  str = string.gsub(sentence, '[%p%c]', '')\n  s = string.gsub(str, \"%w+\", \"sex\")\n  return s\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210865,"user_id":null,"body":"function to_freud(sentence)\n  local sol = {}\n  for word in sentence:gmatch(\"[^%s]+\") do\n    table.insert(sol, \"sex\")\n  end\n  return table.concat(sol, \" \")\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210866,"user_id":null,"body":"function to_freud(sentence)\n  return sentence:gsub(\"[%g]+\", \"sex\")\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210867,"user_id":null,"body":"function to_freud(sentence)\n  return ((sentence or ''):gsub('%S+', 'sex'))\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210868,"user_id":null,"body":"function to_freud(sentence)\n  for w in string.gmatch(sentence, \"%g+\") do\n   sexString = string.gsub(sentence, \"%g+\", \"sex\")\n  end\n  return sexString\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210869,"user_id":null,"body":"function to_freud(sentence)\n  \n  return string.gsub(sentence,\"[%w']+\", \"sex\")\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210870,"user_id":null,"body":"function to_freud(sentence)\n  result = sentence:gsub(\"[%w']+\", 'sex')\n  return result\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210871,"user_id":null,"body":"function to_freud(sentence)\n  -- Your code here!\n  return sentence:gsub('%S+', 'sex')\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210872,"user_id":168,"body":"function to_freud(sentence)\n  return sentence:gsub('%S+', 'sex')\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210873,"user_id":null,"body":"function to_freud(sentence)\n  arr = {}\n  for x in sentence:gmatch('%S+') do table.insert(arr, 'sex') end\n  return table.concat(arr, ' ')\nend\n\nreturn to_freud","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5715eaedb436cf5606000381":[{"id":210874,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  local sum = 0\n  \n  for idx, val in pairs(arr) do\n    if val > 0 then sum = sum + val end\n  end\n\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210875,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  local n = 0\n  for i,v in pairs(arr) do\n    n = n + math.max(v, 0)\n  end\n  return n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210876,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  local summ = 0\n  for _, val in ipairs(arr) do\n    if val > 0 then summ = summ + val end\n  end\n  return summ\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210877,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  x = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      x = arr[i] + x\n    end\n  end\n  return x\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210878,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  -- Your code here\n  sum = 0\n  for i=1, #arr do\n  if arr[i]>0 then\n     sum = sum + arr[i]\n  end\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210879,"user_id":null,"body":"return {[\"positive_sum\"]=function(t)\n  table.sort(t,function(x,y)return x>y end)\n  local o = 0\n  for i=1,#t do if t[i]<0 then break end o=o+t[i]end\n  return o\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210880,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  -- Your code here\n  local sum = 0;\n  for i,v in pairs(arr) do\n     if(v==math.abs(v)) then\n        sum = sum + v;\n     end\n  end\n  return sum;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210881,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n TotalSum = 0\n  for i = 1, #arr do\n    if arr[i] >= 0 then\n      TotalSum = TotalSum + arr[i]\n      end\n    end\n  return TotalSum\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210882,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  sum = 0\n  for i,k in pairs(arr) do if k > 0 then sum = sum+k end end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210883,"user_id":null,"body":"local kata = {}\n\nfunction kata.positive_sum(arr)\n  local total = 0\n  for i = 1, #arr do\n    if arr[i] >= 0 then\n      total = total + arr[i]\n    end\n  end\n  \n  return total\n    \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5726f813c8dcebf5ed000a6b":[{"id":210884,"user_id":53,"body":"local solution = {}\n\nfunction solution.countPrimeFactors(k)\n    local ans, i, n = 0, 2, k\n    while (i <= n \/\/ i) do\n        while (n % i == 0) do\n            n = n \/\/ i\n            ans = ans + 1\n        end\n        i = i + 1\n    end\n    if (n > 1) then\n        ans = ans + 1\n    end\n    return ans\nend\n\nfunction solution.countKprimes(k, start, nd)\n    local fs, n, j = {}, start, 0\n    while (n <= nd) do\n        j = solution.countPrimeFactors(n)\n        if (j == k) then\n            table.insert(fs, n)\n        end\n        n = n + 1\n    end\n    return fs\nend\n\nfunction solution.puzzle(s)\n    local ans, c = 0, 0\n    local xs = solution.countKprimes(7, 128, s - 10)\n    local ys = solution.countKprimes(3, 8, s - 130)\n    for i = 1, #xs do\n        for j = 1, #ys do\n            c = s - xs[i] - ys[j]\n            if (c > 0 and solution.countPrimeFactors(c) == 1) then\n                ans = ans + 1\n            end\n        end\n    end\n    return ans\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210885,"user_id":492,"body":"local solution = {}\n\nfunction solution.countKprimes(k, start, nd)\n    local function primeFactors(n)\n        local i, factors = 2, {}\n        while i * i <= n do\n            while n % i == 0 do\n                table.insert(factors, i)\n                n = n \/\/ i\n            end\n            i = i + 1\n        end\n        if n > 1 then table.insert(factors, n) end\n        return #factors\n    end\n    local kprimes = {}\n    for i = start, nd do\n        if primeFactors(i) == k then table.insert(kprimes, i) end\n    end\n    return kprimes\nend\n\nfunction solution.puzzle(s)\n    local function isprime(n)\n        if n <= 1 or ( n ~= 2 and n % 2 == 0 ) then return false end\n        local i = 3\n        while i * i <= n do\n            if n % i == 0 then return false end\n            i = i + 2\n        end\n        return true\n    end\n    local cnt = 0\n    local b = solution.countKprimes(7, 128, s - 6)\n    local c = solution.countKprimes(3, 4, s - 130)\n    for _, j in ipairs(b) do\n        for _, k in ipairs(c) do\n            if isprime(s - j - k) then cnt = cnt + 1 end\n        end\n    end\n    return cnt\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210886,"user_id":null,"body":"local solution = {}\nlocal function _count(num)\n    local i = 2\n    local cnt = 0\n    while i * i <= num do\n        while num % i == 0 do\n            num = num \/ i\n            cnt = cnt + 1\n        end\n        i = i + 1\n    end\n    if num ~= 1 then cnt = cnt + 1 end\n    return cnt\nend\n\nfunction solution.countKprimes(k, start, nd)\n    local ret = {}\n    for i = start, nd do\n        if _count(i) == k then\n            table.insert(ret, i)\n        end\n    end\n  \n    return ret\nend\n\n\nfunction solution.puzzle(s)\n    local prime_1 = solution.countKprimes(1, 2, s)\n    local prime_3 = solution.countKprimes(3, 8, s)\n    local tmp = solution.countKprimes(7, 128, s)\n    local prime_7 = {}\n    for i = 1, #tmp do\n        prime_7[tmp[i]] = 1\n        print(s,tmp[i])\n    end\n    \n    local cnt = 0\n    for i = 1, #prime_1 do\n        for j = 1, #prime_3 do\n            local sum = prime_1[i] + prime_3[j]\n            if prime_7[s - sum] then\n                cnt = cnt + 1\n            end\n        end\n    end\n  \n    return cnt\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210887,"user_id":168,"body":"local solution = {}\n\nfunction factors(n)\n  local p, k = 2, 0\n  while p * p <= n do\n    while n % p == 0 do\n      k = k + 1\n      n = n \/\/ p\n    end\n    p = p + 1      \n  end\n  return k + (n > 1 and 1 or 0)\nend\n\nfunction solution.countKprimes(k, start, nd)\n  local r = {}\n  for n = start, nd do\n    if factors(n) == k then table.insert(r, n) end\n  end\n  return r\nend\n\nfunction solution.puzzle(s)\n  local p3s = solution.countKprimes(3, 8, s - 130)\n  local r = 0\n  for _, p in ipairs(solution.countKprimes(7, 128, s - 10)) do\n    for _, q in ipairs(p3s) do\n      if s - p - q < 2 then break end\n      if factors(s - p - q) == 1 then r = r + 1 end\n    end\n  end\n  return r\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210888,"user_id":null,"body":"local solution = {}\nfunction get_primes_num(n)\n  local fs, i, cnt = {}, 2, 0\n  while (i <= n\/\/i) do\n--     cnt = 0\n    while (n % i == 0) do\n      n = n \/\/ i\n      cnt = cnt + 1\n    end\n    i=i+1\n  end\n  if (n > 1) then\n      cnt = cnt + 1\n  end\n  return cnt\nend\nfunction solution.countKprimes(k, start, nd)\n    -- your code\n  local list primes_num={}\n  for i=start,nd do\n    local num=get_primes_num(i)\n    if num==k then table.insert(primes_num,i)\n    end\n  end\n    return primes_num\nend\nfunction solution.puzzle(s)\n    -- your code\n  local ans, c = 0, 0\n    local xs = solution.countKprimes(7, 128, s - 10)\n    local ys = solution.countKprimes(3, 8, s - 130)\n    for i = 1, #xs do\n        for j = 1, #ys do\n            c = s - xs[i] - ys[j]\n            if (c > 0 and get_primes_num(c) == 1) then\n                ans = ans + 1\n            end\n        end\n    end\n    return ans\nend\nreturn solution\n-- local solution = {}\n\n-- function solution.countPrimeFactors(k)\n--     local ans, i, n = 0, 2, k\n--     while (i <= n \/\/ i) do\n--         while (n % i == 0) do\n--             n = n \/\/ i\n--             ans = ans + 1\n--         end\n--         i = i + 1\n--     end\n--     if (n > 1) then\n--         ans = ans + 1\n--     end\n--     return ans\n-- end\n\n-- function solution.countKprimes(k, start, nd)\n--     local fs, n, j = {}, start, 0\n--     while (n <= nd) do\n--         j = solution.countPrimeFactors(n)\n--         if (j == k) then\n--             table.insert(fs, n)\n--         end\n--         n = n + 1\n--     end\n--     return fs\n-- end\n\n-- function solution.puzzle(s)\n--     local ans, c = 0, 0\n--     local xs = solution.countKprimes(7, 128, s - 10)\n--     local ys = solution.countKprimes(3, 8, s - 130)\n--     for i = 1, #xs do\n--         for j = 1, #ys do\n--             c = s - xs[i] - ys[j]\n--             if (c > 0 and solution.countPrimeFactors(c) == 1) then\n--                 ans = ans + 1\n--             end\n--         end\n--     end\n--     return ans\n-- end\n\n-- return solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5748838ce2fab90b86001b1a":[{"id":210889,"user_id":null,"body":"function square_area(A)\n  local circle_perimeter = 4*A\n  local circle_diameter = circle_perimeter \/ math.pi\n  local side = circle_diameter \/ 2\n  local area = side^2\n  return math.floor(area*100 + 0.5) \/ 100\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210890,"user_id":null,"body":"function square_area(A)\n  return tonumber(string.format(\"%.2f\", (2*A\/math.pi)^2))\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210891,"user_id":53,"body":"function square_area(a)\n  local A = (a * 2 \/ math.pi) ^ 2\n  return math.floor((A * 100) + 0.5) \/ 100\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210892,"user_id":null,"body":"\n\nfunction round(B)\n  local f = math.floor(B)\n  if (B == f) or (B % 2.0 == 0.5) then\n    return f\n    else\n    return math.floor(B + 0.5)\n  end\nend\n\n\nfunction square_area(A)\n  local area = ((2 * A) \/ math.pi)^2\n  local temp = round(math.floor(area * 100 + 0.5))\n  return temp \/ 100\nend\nreturn square_area\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210893,"user_id":1474,"body":"function square_area(A)\n  ret = 2 * A \/ math.pi\n  ret = ret * ret * 100\n  if ret % 1 >= 0.5 then\n    return math.ceil(ret) \/ 100\n  else\n    return math.floor(ret) \/ 100\n  end\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210894,"user_id":null,"body":"function square_area(A)\n  local x = A \/ 1.5707963267949\n  local n = x * x\n  return tonumber(string.format(\"%.2f\", n))\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210895,"user_id":168,"body":"function square_area(A)\n  return math.floor(100 * (2 * A \/ math.pi) ^ 2 + 0.5) \/ 100\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210896,"user_id":28,"body":"function square_area(A)\n  local d = ((A*4)\/(2*math.pi))*2\n  local area = (d*d)\/4\n  return math.floor((area*100)+0.5)\/100\nend\n\nreturn square_area","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"574c5075d27783851800169e":[{"id":210897,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  local cows = legs*0.5 - heads\n  local chicks = heads - cows\n  \n  if math.floor(cows) ~= cows then\n    return \"No solutions\"\n  elseif chicks < 0 or cows < 0 then\n    return \"No solutions\"\n  end\n  \n  return {chicks, cows}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210898,"user_id":null,"body":"kata = {}\n\nfunction kata.animals(heads, legs)\n  chickens = (4 * heads - legs) \/ 2\n  cows = heads - chickens\n  \n  if chickens < 0 or cows < 0 or chickens % 1 ~= 0 or cows % 1 ~= 0 then\n    return \"No solutions\"\n  end\n  return {chickens, cows}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210899,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(h, l)\n  if h < 0 or l < 0 then\n    return \"No solutions\"\n  end\n  local cows = (l - 2*h)\/2\n  local chickens = h - cows\n  if cows >= 0 and chickens >= 0 and cows == math.floor(cows) then\n    return {chickens, cows}\n  else\n    return \"No solutions\"\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210900,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  if legs < 0 or heads < 0 or math.fmod(legs, 2) == 1 or legs < 2*heads or legs > 4*heads then\n    return \"No solutions\"\n  end\n  return {(4*heads - legs)\/2, (legs - 2*heads)\/2}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210901,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n    local cows = 0\n    local chick = 0\n  for i = 0,heads do\n      print(i)\n      cows = i\n      chick = heads - i\n      if cows * 4 + chick * 2 == legs then\n          break\n          end\n      end\n  if cows * 4 + chick * 2 == legs then\n  return{chick,cows}\n    else\n    return(\"No solutions\")\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210902,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  local num_ch,num_co = (legs - 4*heads)\/-2,(legs - 2*heads)\/2\n  return (num_ch%1==0 and num_co%1==0 and num_ch>=0 and num_co>=0) and {num_ch,num_co} or \"No solutions\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210903,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  -- X: heads == chickens + cows\n  -- Y: legs == 2*chickens + 4*cows\n  -- Y-2X: legs-2*heads == 2*cows\n  if heads < 0 or legs < 0 then return \"No solutions\" end\n  local cows = legs\/2 - heads\n  if cows < 0 or cows > heads or cows ~= math.floor(cows) then return \"No solutions\" end\n  return {heads - cows, cows}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210904,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  print(heads, legs)\n  if heads == 0 and legs == 0 then return {0, 0}\n  elseif (head or legs <= 0) or (heads*4 < legs) or (heads >= legs) or (heads*2 > legs) then return \"No solutions\"\n  end\n  cows = math.floor((legs-heads*2)\/2)\n  chicks = heads - cows\n  if cows*4+chicks*2==legs and cows+chicks==heads then return {chicks, cows}\n  else return \"No solutions\"\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210905,"user_id":null,"body":"function is_possible(h,l)  \n   return h>=0 and (l%2 == 0 and l\/h <= 4 and l\/h >= 2) or (h == 0 and l == 0)\nend \n\nlocal kata = {}\n\nfunction kata.animals(heads, legs)\n  -- your code\n  if not is_possible(heads, legs) then \n    return \"No solutions\" \n  else\n    local cows = (legs - heads*2)\/2 \n    local chickens = heads - cows \n    return {chickens, cows}\n  end     \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210906,"user_id":null,"body":"local kata = {}\n\nfunction kata.animals(heads, legs)\n  if heads == 0 and legs == 0 then return {0, 0} end\n  \n  for cows=0,heads do\n    chicken = heads-cows\n    if cows * 4 + chicken * 2 == legs then\n      return {chicken, cows}\n    end\n  end\n  \n  return \"No solutions\"\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57591ef494aba64d14000526":[{"id":210907,"user_id":53,"body":"local solution = {}\n\nfunction solution.walk(n)\n    local xs = {0}\n    local ys = {1}\n    local xsum = 0\n    local ysum = 1\n    for i = 1, n - 1 do\n        local x1 = xs[i]\n        local x2 = ys[x1 + 1]\n        xs[#xs+1] = i - x2\n        local y1 = ys[i]\n        local y2 = xs[y1 + 1]\n        ys[#ys+1] = i - y2\n        xsum = xsum + i - x2\n        ysum = ysum + i - y2\n    end\n    return {ys, xs, ysum, xsum}\nend\n\nfunction solution.john(n)\n    return solution.walk(n)[2]\nend\n\nfunction solution.ann(n)\n    return solution.walk(n)[1]\nend\n\nfunction solution.sumJohn(n)\n    return solution.walk(n)[4]\nend\n\nfunction solution.sumAnn(n)\n    return solution.walk(n)[3]\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210908,"user_id":null,"body":"local solution = {}\n\nfunction solution.john(n)\n  return gen_kata_lists(n)[2]\nend\n\nfunction solution.ann(n)\n  return gen_kata_lists(n)[1]\nend\n\nfunction solution.sumJohn(n)\n  local sum = 0\n  for _,v in pairs(solution.john(n)) do sum = sum+v end\n  return sum\nend\n\nfunction solution.sumAnn(n)\n  local sum = 0\n  for _,v in pairs(solution.ann(n)) do sum = sum+v end\n  return sum\nend\n\nfunction gen_kata_lists(n)\n  local ann, john = {[0] = 1}, {[0] = 0}\n  local a_lst, j_lst = {}, {}\n  for i=1,n-1 do\n    john[i] = i - ann[john[i-1]]\n    ann[i] = i - john[ann[i-1]]\n  end\n  for _,v in pairs(ann) do table.insert(a_lst, v) end\n  for _,v in pairs(john) do table.insert(j_lst, v) end\n  table.sort(a_lst)\n  table.sort(j_lst)\n  return {a_lst, j_lst}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210909,"user_id":492,"body":"local solution = {}\n\nlocal function aj(n)\n    local a = {1}\n    local j = {0}\n    for i = 2, n do\n        table.insert(j, i - 1 - a[j[i - 1] + 1])\n        table.insert(a, i - 1 - j[a[i - 1] +1 ])\n    end\n    return {a, j}\nend\nfunction solution.john(n)\n    return aj(n)[2]\nend\nfunction solution.ann(n)\n    return aj(n)[1]\nend\nfunction solution.sumJohn(n)\n    local j, s = aj(n)[2], 0\n    for _, v in pairs(j) do\n        s = s + v\n    end\n    return s\nend\nfunction solution.sumAnn(n)\n    local j, s = aj(n)[1], 0\n    for _, v in pairs(j) do\n        s = s + v\n    end\n    return s\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210910,"user_id":null,"body":"local solution = {}\n\nfunction solution.compute(n)\n  local j, a, js, as = {0}, {1}, 0, 1\n  for n=1,n-1 do\n    local jv = n - a[j[n]+1]\n    j[n+1], js = jv, js+jv\n    local av = n - j[a[n]+1]\n    a[n+1], as = av, as+av\n  end\n  return {a, j, as, js}\nend\n\nfunction solution.john(n)\n    return solution.compute(n)[2]\nend\nfunction solution.ann(n)\n    return solution.compute(n)[1]\nend\nfunction solution.sumJohn(n)\n    return solution.compute(n)[4]\nend\nfunction solution.sumAnn(n)\n    return solution.compute(n)[3]\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210911,"user_id":null,"body":"local solution = {}\n\n-- I accidentally refreshed the page and lost my more \"proper\" code\n-- so here's a likely unexpected solution :D\n\nlocal JOHN = {[0] = 0, 0, 1, 2, 2, 3}\nlocal ANN =  {[0] = 1, 1, 2, 2, 3, 3}\nlocal numCached = 6\n\nlocal function ensureCalcuatedTo(to)\n  for n = numCached-1, to do\n    local t = ANN[n-1]\n    ANN[n] = n - JOHN[t]\n    \n    t = JOHN[n-1]\n    JOHN[n] = n - ANN[t]\n  end\n  \n  numCached = math.max(numCached, to+1)\nend\n\nlocal function countTo(t, n)\n  local a = 0\n\n  for i=0, n-1 do\n    a = a + t[i]  \n  end\n\n  return a\nend\n\nfunction solution.john(n)\n  ensureCalcuatedTo(n)\n  \n  return table.move(JOHN, 0, n-1, 1, {})\nend\n\nfunction solution.ann(n)\n  ensureCalcuatedTo(n)\n  \n return table.move(ANN, 0, n-1, 1, {})\nend\n\nfunction solution.sumJohn(n)\n  ensureCalcuatedTo(n)\n  \n  return countTo(JOHN, n)\nend\n\nfunction solution.sumAnn(n)\n  ensureCalcuatedTo(n)\n  \n  return countTo(ANN, n)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210912,"user_id":168,"body":"local solution = {}\n\nsolution.mjohn = {}\nsolution.mann = {}\n\nfunction solution.fjohn(n)\n  if n <= 0 then return 0 end\n  solution.mjohn[n] = solution.mjohn[n] or n - solution.fann(solution.fjohn(n - 1))\n  return solution.mjohn[n]    \nend\n\nfunction solution.fann(n)\n  if n <= 0 then return 1 end\n  solution.mann[n] = solution.mann[n] or n - solution.fjohn(solution.fann(n - 1))\n  return solution.mann[n]\nend\n\nfunction gen(f, n)\n  local res = {}\n  for i = 0, n - 1 do\n    table.insert(res, f(i))\n  end\n  return res\nend\n\nfunction sum(t)\n  local s = 0\n  for _, x in pairs(t) do\n    s = s + x\n  end\n  return s\nend\n\nfunction solution.john(n)\n  return gen(solution.fjohn, n)\nend\n\nfunction solution.ann(n)\n  return gen(solution.fann, n)\nend\n\nfunction solution.sumJohn(n)\n  return sum(solution.john(n))\nend\n\nfunction solution.sumAnn(n)\n  return sum(solution.ann(n))\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210913,"user_id":null,"body":"local solution = {}\n-- Completed in 4045.6104ms\n\n-- number of kata done by John on day n\nlocal jMemory = { [0] = { kata = 0, sum = 0} }\nfunction j(n)\n    local memory = jMemory[n]\n    if memory then\n        -- reply from memory\n        return memory\n    else\n        -- calculate\n        local prevMemory = jMemory[n - 1]\n        local t = prevMemory.kata\n        local newKata = n - a(t).kata\n\n        -- store in memory\n        local newMemory = {\n            kata = newKata,\n            sum = prevMemory.sum + newKata\n        }\n        jMemory[n] = newMemory\n\n        return newMemory\n    end\nend\n\n-- number of kata done by Ann on day n\nlocal aMemory = { [0] = { kata = 1, sum = 1} }\nfunction a(n)\n    local memory = aMemory[n]\n    if memory then\n        -- reply from memory\n        return memory\n    else\n        -- calculate\n        local prevMemory = aMemory[n - 1]\n        local t = prevMemory.kata\n        local newKata = n - j(t).kata\n\n        -- store in memory\n        local newMemory = {\n            kata = newKata,\n            sum = prevMemory.sum + newKata\n        }\n        aMemory[n] = newMemory\n\n        return newMemory\n    end\nend\n\n-- generate function to list output of function f for the first n days\n-- n starts from 0\n-- list index starts from 1 (standard Lua table)\nfunction createListFunction(f)\n    return function(n)\n        local list = {}\n        for i = 0, n - 1 do\n            table.insert(list, f(i).kata)\n        end\n\n        return list\n    end\nend\n\n-- generate function to sum the generated list\nfunction createSumFunction(f)\n    return function(n)\n        for i = 1, n - 1 do\n            f(i)\n        end\n\n        return f(n - 1).sum\n    end\nend\n\nsolution.john = createListFunction(j)\nsolution.ann = createListFunction(a)\n\n-- for i = 1, 10 do\n--     local t = a(i)\n--     print(i, t.kata, t.sum)\n-- end\n\nsolution.sumJohn = createSumFunction(j)\nsolution.sumAnn = createSumFunction(a)\n\n-- print(solution.sumJohn(500000))\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210914,"user_id":null,"body":"local Person = {}\n\nfunction Person:new (day0)\n  local p = {}\n  p[0] = day0\n  self.__index = self\n  return setmetatable(p, self)\nend\n\nfunction Person:setDependent (person)\n  self.dependent = person\nend\n\nfunction Person:day (n)\n  if n < 0 then\n    return 0\n  elseif not self[n] then\n    self[n] = n - self.dependent:day(self:day(n-1))\n  end\n  return self[n]\nend\n\nfunction Person:list ()\n  return function (n)\n    local l = {}\n    for i = 0, n-1 do\n      l[i+1] = self:day(i)\n    end\n    return l\n  end\nend\n\nfunction Person:sum ()\n  return function (n)\n    local s = 0\n    for i = 0, n-1 do\n      s = s + self:day(i)\n    end\n    return s\n  end\nend\n\nlocal john = Person:new(0)\nlocal ann = Person:new(1)\njohn:setDependent(ann)\nann:setDependent(john)\n\nreturn {\n  john = john:list(),\n  ann = ann:list(),\n  sumJohn = john:sum(),\n  sumAnn = ann:sum()\n}","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210915,"user_id":null,"body":"local john, ann = {}, {}\njohn[0], ann[0] = 0, 1\n\nfunction john.day (n)\n  if n < 0 then return 0 end\n  if not john[n] then\n    john[n] = n - ann.day(john.day(n-1))\n  end\n  return john[n]\nend\n\nfunction ann.day (n)\n  if n < 0 then return 0 end\n  if not ann[n] then\n    ann[n] = n - john.day(ann.day(n-1))\n  end\n  return ann[n]\nend\n\nlocal function sum (person)\n  return function (n)\n    local s = 0\n    for i = 0, n-1 do s = s + person.day(i) end\n    return s\n  end\nend\n  \nlocal function list (person)\n    return function (n)\n      local l = {}\n      person.day(n)\n      for i = 0, n-1 do l[i+1] = person[i] end\n      return l\n    end\nend\n\nlocal solution = {\n  john = list(john),\n  ann = list(ann),\n  sumJohn = sum(john),\n  sumAnn = sum(ann)\n}\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210916,"user_id":null,"body":"local solution = {}\nlocal a, j = {1, 1, 2, 2, 3, 3}, {0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6}\nfunction get_john(n) j[n + 1] = j[n + 1] or (n - get_ann(get_john(n - 1))); return j[n + 1]; end\nfunction get_ann(n) a[n + 1] = a[n + 1] or (n - get_john(get_ann(n - 1))); return a[n + 1]; end\nfunction solution.john(n)\n  local result = {}\n  for i = 1, n do\n    result[i] = get_john(i - 1)\n  end\n  return result\nend\nfunction solution.ann(n)\n  local result = {}\n  for i = 1, n do\n    result[i] = get_ann(i - 1)\n  end\n  return result\nend\nfunction solution.sumJohn(n)\n  local result = 0\n  for i = 1, n do\n    result = result + get_john(i - 1)\n  end\n  return result\nend\nfunction solution.sumAnn(n)\n  local result = 0\n  for i = 1, n do\n    result = result + get_ann(i - 1)\n  end\n  return result\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"576bb71bbbcf0951d5000044":[{"id":210917,"user_id":null,"body":"local kata = {}\n\nfunction kata.count_positives_sum_negatives(arr)\n  local count, sum = 0, 0\n  \n  if #arr == 0 then return {} end\n\n  for _, n in ipairs(arr) do\n    if n > 0 then\n      count = count + 1\n    elseif n < 0 then\n      sum = sum + n\n    end\n  end\n  \n  return {count, sum}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210918,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  \n  tbl = {0,0}\n  \n  if #arr > 0 then \n    for i, v in pairs(arr) do\n      if v > 0 then tbl[1] = tbl[1] + 1\n        elseif v < 0 then tbl[2] = tbl[2] + v\n      end\n    end\n    return tbl\n  else return {}\n    \n  end\n  \n     \n    \nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210919,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  if (#arr == 0) then return {} end\n  local pos_sum = 0\n  local neg_sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      pos_sum = pos_sum + 1\n    else\n      neg_sum = neg_sum + v\n    end\n  end\n  return {pos_sum, neg_sum}\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210920,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  -- You got this! :)\n  local next = next    \n  local count = {0,0}\n  \n  if next(arr) == nil then return arr end\n\n  for i = 1, #arr do \n    if arr[i] > 0 then count[1] = count[1] + 1 \n    else count[2] = count[2] + arr[i] end\n  end\n \n  return count\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210921,"user_id":812,"body":"function count_positives_sum_negatives(arr)\n  local nb_pst = 0\n  local nb_ngt = 0\n  if #arr == 0 then return {} end\n  for _, v in pairs(arr) do\n    if v < 0 then\n      nb_ngt = nb_ngt + v\n    elseif v > 0 then\n      nb_pst = nb_pst + 1\n    end\n  end\n  return {nb_pst, nb_ngt}\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210922,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  if arr[1] == nil then return {} end\n  local negSum = 0\n  local posNum = 0\n  for i, v in pairs(arr) do\n    if v <= 0 then\n      negSum = negSum + v\n    else\n      posNum = posNum + 1\n    end\n  end\n  return {posNum, negSum}\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210923,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  if not arr or #arr == 0 then return {} end\n  pos = 0\n  neg = 0\n  for i, n in pairs(arr) do\n    if n < 0 then\n      neg = neg + n\n    elseif n > 0 then\n      pos = pos + 1\n    end\n  end\n    \n  return {pos, neg}\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210924,"user_id":881,"body":"function count_positives_sum_negatives(arr)\n    if #arr == 0 then return {} end\n    local result = { 0, 0 }\n    for _, value in ipairs(arr) do\n        if value > 0 then\n            result[1] = result[1] + 1\n        else\n            result[2] = result[2] + value\n        end\n    end\n    return result\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210925,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  local NegativeAnswer = 0\n  local PositiveAnswer = 0\n  for i, n in ipairs(arr) do\n    if n <= 0 then\n      NegativeAnswer = NegativeAnswer + n\n    else\n      PositiveAnswer = PositiveAnswer + 1\n    end\n  end\n  if #arr ~= 0 then\n    return {PositiveAnswer, NegativeAnswer}\n  else\n    return {}\n  end\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210926,"user_id":null,"body":"function count_positives_sum_negatives(arr)\n  local result = {}          -- Used to keep track of requested values\n  local emptyArr = {}        -- An empty array\n  result[1] = 0          -- number of positive numbers\n  result[2] = 0          -- total negative sum\n  \n  if arr == nil then return emptyArr end  -- Checks if array is nil\n  if #arr == 0 then return emptyArr end    --Checks if array is empty\n  \n  \n  for i=1, #arr do\n    if arr[i] > 0 then\n      result[1] = result[1] + 1\n      else\n      result[2] = result[2] + arr[i]\n    end\n  end\n  \n  return result\nend\n\nreturn count_positives_sum_negatives","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5772382d509c65de7e000982":[{"id":210927,"user_id":53,"body":"local solution = {}\nlocal cache = {}\n\nfunction solution.u(n)\n    if (#cache == 0) then\n        cache[0] = 0\n        cache[1] = 1\n        cache[2] = 1\n    end\n    if (not cache[n]) then\n        cache[n] = solution.u(n-solution.u(n-1)) + solution.u(n-solution.u(n-2))\n    end\n    return cache[n]\nend\n\nfunction solution.lengthSupUK(n, k) \n    local m = 0\n    for i=1, n do\n        if solution.u(i) >= k then\n            m = m + 1\n        end\n    end\n    return m\nend\n\nfunction solution.comp(n) \n    local m = 0\n    for i=1, n do\n        if solution.u(i) < solution.u(i - 1) then\n            m = m + 1\n        end\n    end\n    return m\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210928,"user_id":492,"body":"local solution = {}\n\nlocal function u1(n)\n  local memu = {}\n  memu[1] = 1; memu[2] = 1;\n  local i = 3\n  while (i <= n) do\n    memu[i] = (memu[i - memu[i - 1]] + memu[i - memu[i - 2]])\n    i = i + 1\n  end\n  return memu\nend\nfunction solution.lengthSupUK(n, k) \n    local l, cnt, i = u1(n), 0, 1\n    while i <= n do\n        if l[i] >= k then cnt = cnt + 1 end\n        i = i + 1\n    end\n    return cnt\nend\nfunction solution.comp(n)\n    local memu = u1(n)\n    local prev, cnt, i = 1, 0, 1\n    while (i <= n) do\n        local cur = memu[i]\n        if (cur < prev) then cnt = cnt + 1 end\n        prev = cur\n        i = i + 1\n    end\n    return cnt\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210929,"user_id":null,"body":"local solution = {}\n\nr = {[1]=1, [2]=1}\n\nfunction solution.lengthSupUK(n, k) \n    local s = 0\n    for i=1,n do\n        if not r[i] then\n          r[i] = r[i - r[i-1]] + r[i - r[i-2]]\n        end\n        if r[i] >= k then s = s+1 end\n    end\n    return s\nend\n\nfunction solution.comp(n) \n    local s = 0\n    for i=3,n do\n        if not r[i] then\n          r[i] = r[i - r[i-1]] + r[i - r[i-2]]\n        end\n        if r[i] < r[i-1] then s = s+1 end\n    end\n    return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210930,"user_id":null,"body":"local solution = {}\n\nfunction solution.lengthSupUK(n, k) \n    local r = {}\n    r[1] = 1\n    r[2] = 1\n    for i = 3,n do\n      r[i] = r[i-r[i-1]]+r[i-r[i-2]]\n    end\n    local x = 0\n    for i = 1, #r do\n      if r[i] >= k then x = x + 1 end\n    end\n    return x\nend\nfunction solution.comp(n) \n    local r = {}\n    r[1] = 1\n    r[2] = 1\n    for i = 3,n do\n      r[i] = r[i-r[i-1]]+r[i-r[i-2]]\n    end\n    local x = 0\n    for i = 2, #r do\n      if r[i]<r[i-1] then x = x + 1 end\n    end\n    return x\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210931,"user_id":168,"body":"local solution = {}\n\nsolution.cache = {}\n\nfunction solution.u(n)\n  if n == 1 or n == 2 then return 1 end\n  if solution.cache[n] then return solution.cache[n] end\n  local i1, i2 = n - solution.u(n - 1), n - solution.u(n - 2)\n  local r = solution.u(i1) + solution.u(i2)\n  solution.cache[n] = r\n  return r\nend\n\nfunction solution.lengthSupUK(n, k)\n  local r = 0\n  for i = 1, n do\n    if solution.u(i) >= k then r = r + 1 end\n  end\n  return r\nend\n\nfunction solution.comp(n)\n  local r = 0\n  for i = 2, n do\n    if solution.u(i) < solution.u(i - 1) then r = r + 1 end\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210932,"user_id":null,"body":"local solution = {}\n\nlocal seq = {1, 1}\nlocal function u(n)\n  if seq[n] then return seq[n] end\n  local out = 1\n  if n > 2 then\n    out = u(n - u(n-1)) + u(n - u(n-2))\n  end\n  seq[n] = out\n  return out\nend\n\nfunction solution.lengthSupUK(n, k) \n  local count = 0\n  for i = 1, n do\n    if u(i) >= k then\n      count = count + 1\n    end\n  end\n  return count\nend\n\nfunction solution.comp(n) \n  local count = 0\n  for i = 1, n do\n    if u(i) < u(i-1) then\n      count = count + 1\n    end\n  end\n  return count\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210933,"user_id":50,"body":"local solution = {}\n\nfunction f(n)\n    v = {1,1}\n    for i = 3,n,1\n    do\n      v[#v+1] =  v[i - v[i - 1]]+v[i - v[i - 2]]\n    end\n    return v\nend\nfunction solution.lengthSupUK(n, k) \n  o=0\n  for _,e in pairs(f(n))\n  do\n    if e >= k then\n      o=o+1\n    end\n  end\n  return o\nend\nfunction solution.comp(n) \n    v=f(n)\n    o=0\n    for i, e in pairs(v)\n    do\n      if i > 1 and e < v[i - 1] then\n        o=o+1\n      end\n    end\n    return o\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210934,"user_id":null,"body":"local solution = {}\n\nmemo = {[1]=1, [2]=1}\n\nfunction solution.lengthSupUK(n, k) \n    local ret = 0\n    for i=1,n do\n        if not memo[i] then\n          memo[i] = memo[i - memo[i-1]] + memo[i - memo[i-2]]\n        end\n        if memo[i] >= k then ret = ret+1 end\n    end\n    return ret\nend\n\nfunction solution.comp(n) \n    local ret = 0\n    for i=3,n do\n        if not memo[i] then\n          memo[i] = memo[i - memo[i-1]] + memo[i - memo[i-2]]\n        end\n        if memo[i] < memo[i-1] then ret = ret+1 end\n    end\n    return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210935,"user_id":null,"body":"local solution = {}\n\nfunction solution.lengthSupUK(n, k) \n    local tbl = {1,1} -- init table\n    local res = 0 -- variable who counts result\n    for i = 3, n do -- loop from 3 to n\n      local index1 = i - tbl[i-1] -- get first index\n      local index2 = i - tbl[i-2] -- get second index\n      tbl[i] = tbl[index1] + tbl[index2] -- calculate\n      -- or\n      -- tbl[i] = tbl[i - tbl[i-1]] + tbl[i - tbl[i-2]\n      if tbl[i] >= k then res = res + 1 end -- check\n    end\n    return res\nend\nfunction solution.comp(n) \n    local tbl = {1,1} -- init\n    local res = 0 -- count variable\n    for i = 3, n do -- loop 3 to n\n      local index1 = i - tbl[i-1] -- first index\n      local index2 = i - tbl[i-2] -- second index\n      tbl[i] = tbl[index1] + tbl[index2] -- calc\n      if tbl[i] < tbl[i-1] then res = res + 1 end -- check\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210936,"user_id":null,"body":"local solution = {}\n\nlocal cachedSequence = {1,1}\n\nlocal function getU(n)\n  \n  if not cachedSequence[n] then\n  \n    local index1, index2 = getU(n-1), getU(n-2)\n\n    local a, b = getU(n-index1), getU(n-index2)\n\n    cachedSequence[n] = a+b\n    \n  end\n  \n  return cachedSequence[n] \n  \nend\n\nfunction solution.lengthSupUK(n, k) \n    local count = 0\n  \n    for i=1,n do\n      if getU(i) >= k then\n        count = count + 1\n      end\n    end\n  \n    return count\nend\nfunction solution.comp(n) \n    local count = 0\n  \n    for i=2,n do\n      if getU(i) < getU(i-1) then\n        count = count + 1\n      end\n    end\n  \n    return count\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"577a98a6ae28071780000989":[{"id":210937,"user_id":168,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  return math.min(table.unpack(arr))\nend\n\nfunction solution.maximum(arr)\n  return math.max(table.unpack(arr))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210938,"user_id":759,"body":"local math = require 'math'\nlocal solution = {}\n\nfunction solution.minimum(arr)\n  return math.min(table.unpack(arr))\nend\n\nfunction solution.maximum(arr)\n  return math.max(table.unpack(arr))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210939,"user_id":null,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  table.sort(arr)\n  return  arr[1]\n  -- code here\nend\n\nfunction solution.maximum(arr)\n  table.sort(arr)\n  return  arr[#arr]\n  -- code here\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210940,"user_id":812,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  local min = arr[1]\n  for i, v in pairs(arr) do\n    if v <= min then min = v end\n  end\n  return min\nend\n\nfunction solution.maximum(arr)\n  local max = arr[1]\n  for i, v in pairs(arr) do\n    if v >= max then max = v end\n  end\n  return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210941,"user_id":null,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  local a = arr[1]\n  for i = 1, #arr do\n    if a > arr[i] then\n      a = arr[i]\n    end\n  end\n  return a\nend\n\nfunction solution.maximum(arr)\n  local b = arr[1]\n  for i = 1, #arr do\n    if b < arr[i] then\n      b = arr[i]\n    end\n  end\n  return b\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210942,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.minimum(arr)\n  local min = arr[0] or arr[1]\n  for i,v in ipairs(arr) do\n    if v < min then\n      min = v\n    end\n  end\n  return min\nend\n\nfunction solution.maximum(arr)\n  local max = arr[0] or arr[1]\n  for i,v in ipairs(arr) do\n    if v > max then\n      max = v\n    end\n  end\n  return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210943,"user_id":null,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  for i,val in ipairs(arr) do\n    if i == 1 or val < res then\n      res = val\n    end\n  end\n  return res\nend\n\nfunction solution.maximum(arr)\n  for i,val in ipairs(arr) do\n    if i == 1 or val > res then\n      res = val\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210944,"user_id":null,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n  local min = nil\n  for _,v in pairs(arr) do\n    min = min == nil and v or v < min and v or min\n  end\n  return min\nend\n\nfunction solution.maximum(arr)\n  local max = nil\n  for _,v in pairs(arr) do\n    max = max == nil and v or v > max and v or max\n  end\n  return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210945,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.minimum(arr)\n  local answer = math.maxinteger\n  \n  for i=1, #arr do\n    if arr[i] < answer then answer = arr[i]\n    end\n  end\n  \n  return answer\nend\n\n\nfunction solution.maximum(arr)\n  local answer = math.mininteger\n  \n  for i=1, #arr do\n    if arr[i] > answer then answer = arr[i]\n    end\n  end\n  \n  return answer\nend\n\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210946,"user_id":null,"body":"local solution = {}\n\nfunction solution.minimum(arr)\n    local min\n    for i, v in pairs(arr) do\n      if i==1 then\n        min = v\n      else\n        if v < min then\n          min = v\n        end\n      end\n    end\n    return min\nend\n\nfunction solution.maximum(arr)\n      local max\n    for i, v in pairs(arr) do\n      if i==1 then\n        max = v\n      else\n        if v > max then\n          max = v\n        end\n      end\n    end\n    return max\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57a0e5c372292dd76d000d7e":[{"id":210947,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, string)\n  return string:rep(r)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210948,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, s)\n  return s:rep(r)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210949,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, string)\n  string=string.rep(string,r)\n  return string\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210950,"user_id":17,"body":"kata = {}\n\nfunction kata.repeat_str(n, s)\n  return string.rep(s, n)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210951,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, str)\n  return string.rep(str, r)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210952,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, string)\n  if r == 1 then\n    return string\n  elseif r % 2 == 0 then\n    return kata.repeat_str(r \/ 2, string .. string)\n  else\n    return string .. kata.repeat_str(r - 1, string)\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210953,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, string)\n  local rep = {}\n  for i=1,r do\n    table.insert(rep,string)\n  end\n  return table.concat(rep,'')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210954,"user_id":null,"body":"return{repeat_str=function(n,s)return s:rep(n)end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210955,"user_id":null,"body":"kata = {}\n\nfunction kata.repeat_str(r, string)\n  local result = \"\"\n  for i=1,r do\n    result = result .. string\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210956,"user_id":null,"body":"local function swap_arguments( l, r )\n  return r, l\nend\nreturn setmetatable( { }, { __index = function( ) return function( ... ) return string.rep( swap_arguments( ... ) ) end end } )","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57e76bc428d6fbc2d500036d":[{"id":210957,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  local ans = {}\n  for w in s:gmatch('%w+') do table.insert(ans, w) end\n  return s == '' and {''} or ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210958,"user_id":null,"body":"kata={['string_to_array']=function(s)\n    s=s..\" \"\n    local The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race = {}\n    for word in s:gmatch(\"%S*%s\") do\n      The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race[#The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race + 1] = \"\"\n      for c in word:sub(1,word:len()-1):gmatch(\".\") do\n        The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race[#The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race] = The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race[#The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race] .. c\n      end\n    end\n    return The_industrial_revolution_and_its_consequences_have_been_a_disaster_for_the_human_race\nend}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210959,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    table.insert(words, word)\n  end\n  if #words == 0 then words = {''} end\n  return words\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210960,"user_id":812,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  if s == '' then return {''} end\n  local result = {}\n  for word in s:gmatch(\"[^ ]+\") do\n    table.insert(result, word)\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210961,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(str)\n   result = {};\n    for match in (str..\" \"):gmatch(\"(.-)\"..\" \") do\n        table.insert(result, match);\n    end\n    return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210962,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  if s == '' or s == nil then\n    return {''}\n  end\n  \n  local ret = {}\n  \n  for w in string.gmatch(s, \"([^%s]+)\") do\n    table.insert(ret, w)\n  end\n  \n  return ret\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210963,"user_id":null,"body":"-- Hope I can explain this mess for anyone who's interested\n\nkata = {}\nfunction kata.string_to_array(s)\n \t\n  local stringArray = {}                       -- Table for saving the words.\n  if s == \"\" then return {''} end              -- If the given string is empty, returns an empty table where only s[1] = \"\"   (An empty string)   \n\t\n\twhile s ~= \"\" do\n\n\t\tlocal counter = 1                          -- A counter we use to navigate table indices\n\t\n\t\twhile stringArray[counter] ~= nil do                                        -- Sets counter to the next empty table place\n\t\t\tif stringArray[counter] ~= nil then counter = counter + 1 end\n\t\tend\n\n\t\tif math.tointeger(string.find(s,\" \")) == nil then                           -- Puts the first word inisde the table spot the counter is indicating, and then cuts that word out of the string. the while loop continues as long as there are words left.\n\t\t\tstringArray[counter] = string.sub(s, 1, #s)\n\t\t\ts = \"\"\n\t\t\telse  stringArray[counter] = string.sub(s, 1, math.tointeger(string.find(s,\" \"))-1)       -- This checks if there's more than one space between words. If there is, it'll cut one space out and the while loop starts over with the resulting string.\n\t\t\t      s = string.sub(s, math.tointeger(string.find(s,\" \"))+1, #s)\n\t\tend\n\tend\n\n\treturn stringArray     -- Finally, the string is empty, can return the array we built.\nend\n  \nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210964,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  local strtable = {\"\"}\n  \n  local currentonstring = 1\n  \n  for i = 1, #s do\n      local character = s:sub(i, i) \n      if character == \" \" then\n        currentonstring = currentonstring + 1\n        strtable[currentonstring] = \"\"\n      else\n        strtable[currentonstring] = strtable[currentonstring]..character\n      end\n    end\n  \n  return strtable\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210965,"user_id":null,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  local res = {}\n  for w in s:gmatch '%S+' do\n    res[#res+1] = w\n  end\n  if #res == 0 then return {''} end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210966,"user_id":1474,"body":"kata = {}\n\nfunction kata.string_to_array(s)\n  if s == '' then return {''} end\n  ret = {}\n  for w in s:gmatch('%w+') do\n    table.insert(ret, w)\n  end\n  return ret\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57eae20f5500ad98e50002c5":[{"id":210967,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  return string.gsub(str, \"%s\", \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210968,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  -- same thing as: return string.gsub(str,\" \",\"\")\n  return str:gsub(\" \", \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210969,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  return str.gsub(str, '%s+', '')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210970,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  return str:gsub(\"%s+\", \"\");\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210971,"user_id":null,"body":"return{no_space=function(s)return s:gsub(\"%s\",\"\")end}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210972,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  local string = ''\n  for i=1,#str do\n    if string.sub(str, i, i) ~= ' ' then\n        string = string .. string.sub(str, i, i)\n    end\n  end\n\n  return string\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210973,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  local result = {}\n  for char in str:gmatch('%g+') do\n    table.insert(result, char)\n  end\n  return table.concat(result)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210974,"user_id":null,"body":"local kata = {}\n\n--[[ Some functional programming...\n    Ok, I am not really sure what I am doing :)\n    Does that \"Tail call\" really work?\n    The results only change slightly...\n    Is it just me doing something wrong?\n]]--\n\nkata[\"no_space\"] = function (str)\n  return kata.slicer(str, \"\", 1)\nend\n\nkata[\"slicer\"] = function (str, res, i)\n  if(i > #str)\n    then return kata.tailCall(res)\n  end\n  if(str:sub(i, i) == \" \")\n    then return kata.slicer(str, res, i + 1)\n  end\n  return kata.slicer(str, res .. str:sub(i, i) , i + 1)\nend\n\nkata[\"tailCall\"] = function (value)\n  return value\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210975,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  local Answer = string.gsub(str, \" \", \"\")\n  return Answer\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210976,"user_id":null,"body":"local kata = {}\n\nfunction kata.no_space(str)\n  local ans = \"\"\n  for i=1,#str do\n    local t = string.sub(str,i,i)\n    if t~=' ' then\n      ans = ans .. t\n    end\n  end\n  \n  return ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"57f24e6a18e9fad8eb000296":[{"id":210977,"user_id":null,"body":"local kata = {}\n\nfunction kata.how_much_i_love_you(nb_petals)\n  return ({\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"})[(nb_petals-1)%6+1]\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210978,"user_id":null,"body":"local sentences = table.pack(\n  'I love you',\n  'a little',\n  'a lot',\n  'passionately',\n  'madly',\n  'not at all'\n)\n\nlocal function tear_petals( n )\n  print( n )\n  if n > #sentences then\n    return sentences[ n % #sentences ] or sentences[ #sentences ]\n  end\n  return sentences[ n ]\nend\n\nreturn tear_petals","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210979,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n  local answer = {\"I love you\",\"a little\",\"a lot\",\"passionately\",\"madly\",\"not at all\"}\n  if nb_petals%6 == 0 then\n    nb_petals = 6\n  else\n    nb_petals = nb_petals%6\n  end\n  return answer[nb_petals]\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210980,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n  while nb_petals > 6 do \n    nb_petals = nb_petals - 6\n  end\n  if     nb_petals == 1 then return \"I love you\"\n  elseif nb_petals == 2 then return \"a little\" \n  elseif nb_petals == 3 then return \"a lot\"\n  elseif nb_petals == 4 then return \"passionately\"\n  elseif nb_petals == 5 then return \"madly\"\n  elseif nb_petals == 6 then return \"not at all\"\n  end\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210981,"user_id":null,"body":"local petals = {\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"}\n\nfunction how_much_i_love_you(nb_petals)\n  local petal_i = nb_petals % 6\n  if petal_i == 0 then\n    petal_i = 6\n  end\n  return petals[petal_i]\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210982,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n  local phrases = {'I love you','a little','a lot','passionately','madly','not at all'}\n  phrases[0]=phrases[#phrases]\n  return phrases[nb_petals % #phrases]\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210983,"user_id":1474,"body":"function how_much_i_love_you(nb_petals)\n  local tbl = {'not at all', 'I love you', 'a little', 'a lot', 'passionately', 'madly'}\n  return tbl[nb_petals%6+1]\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210984,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n  local phrases = {\n    \"I love you\",\n    \"a little\",\n    \"a lot\",\n    \"passionately\",\n    \"madly\",\n    [0] = \"not at all\"\n  }\n  return phrases[nb_petals % 6]\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210985,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n  local phrases = {\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"}\n  local idx = (nb_petals - 1) % #phrases\n  return phrases[idx + 1]\nend\n\nreturn how_much_i_love_you\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210986,"user_id":null,"body":"function how_much_i_love_you(nb_petals)\n\n  \n  local myTable = {\n  \"I love you\",\n  \"a little\",\n  \"a lot\",\n  \"passionately\",\n  \"madly\",\n  \"not at all\"\n  }\n  \n   if nb_petals % 6 == 0 then\n    return myTable[6]\n  else\n  return myTable[nb_petals % 6]\n  end\n\nend\n\nreturn how_much_i_love_you","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5803a6d8db07c59fff00015f":[{"id":210987,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  if str:len() >= prefix:len() then\n    local i = string.find (str, prefix)\n    if i == 1 then\n      return true \n    end\n  end\n  return false\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210988,"user_id":527,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  return str:sub(1, #prefix) == prefix\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210989,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  return 1 == string.find(str, prefix)\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210990,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  return string.sub(str, 1, #prefix) == prefix\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210991,"user_id":null,"body":"local solution = {}\n\nfunction solution.starts_with(str, prefix)\n  return str:match(\"^\" .. prefix) and true or false\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210992,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  return str:find(\"^\" .. prefix) ~= nil\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210993,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  if string.find(str, prefix) then\n    return true\n    else\n    return false\n  end\nend\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210994,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  local f = string.match(str, \"^(\"..prefix..\")%s*\")\n  if f == nil then return false\n  elseif f == prefix then return true \n  elseif prefix == \"\" then return true end\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210995,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(str, prefix)\n  print(str,\" - str\")\n  print(prefix,\" - prefix\")\n  local f = string.match(str, \"^(\"..prefix..\")%s*\")\n  print(f,\" - f\")\n  if f == nil then return false\n  elseif f == prefix then return true \n  elseif prefix == \"\" then return true end\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210996,"user_id":null,"body":"local s = {}\n\nfunction s.starts_with(st, px)\n  return st:sub(1, #px) == px\nend\n\nreturn s","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58184387d14fc32f2b0012b2":[{"id":210997,"user_id":492,"body":"local solution = {}\n\nfunction solution.f(x) \n    return x \/ (1.0 + math.sqrt(1.0 + x))\nend\n\nreturn solution\n\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210998,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x)\n  r = 0\n  z = 1\n  a = 1\n  xp = 1\n  for i=1,150 do\n    z=z\/i\n    a=a*(1\/2+1-i)\n    xp=xp*x\n    r=r+z*a*xp \n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":210999,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x) \n    return x \/ (math.sqrt(1 + x) + 1)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211000,"user_id":168,"body":"local solution = {}\n\nfunction solution.f(x) \n  return x \/ (1 + (1 + x) ^ 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211001,"user_id":53,"body":"local solution = {}\n\nfunction solution.f(x) \n     return x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128;\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211002,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x)\n  return (x - (x \/ 2) ^ 2 + (x \/ 2) ^ 3) \/ 2\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211003,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x) \n    if math.abs(x) < 1e-3 then\n        -- Taylor serie\n        local sum = 0\n        local xi = x\n        for _,v in ipairs({1\/2, -1\/8, 1\/16, -5\/128}) do\n            sum = sum + xi * v\n            xi = xi * x\n        end\n        return sum\n    else\n        return math.sqrt(1+x)-1\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211004,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x) \n    -- fx = (x)^1\/2 \n    -- df\/dx = 1\/2(x) ^ -1\/2 \n    -- fpx = f(nx) + f1x*dx\n    local re = x \/ (math.sqrt(1+x) + 1)\n    return re\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211005,"user_id":null,"body":"local solution = {}\n\nfunction aprox_z(z)\n  return z*z+2*z\nend\n\nfunction solution.f(x) \n    -- your code\n    a = x\/3\n    b = x\/2\n    c = (a+b)\/2\n    z = aprox_z(c)\n\n    while z ~= x do\n      if z>x then\n        b = c\n      else\n        a = c\n      end\n      c = (a+b)\/2\n      z = aprox_z(c)\n\n    end\n    return b  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211006,"user_id":null,"body":"local solution = {}\n\nfunction solution.f(x) \n    -- your code\n    if x < 1 then\n        return x\/2-x^2\/8+x^3\/16\n    else\n        return math.sqrt(1+x)-1\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5822d89270ca28c85c0000f3":[{"id":211007,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n  result = {}\n  for i = 1, #idxs do\n    result[idxs[i]] = string.sub(str, i, i)\n  end\n  return table.concat(result, \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211008,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n    local dic = {}\n    for k, n in pairs(idxs) do\n        dic[n] = str:sub(k, k)\n    end\n    return table.concat(dic)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211009,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n        local seq = {}\n        for i=1, #str do\n                seq[idxs[i]] = str:sub(i, i)\n        end\n        return table.concat(seq)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211010,"user_id":null,"body":"return {\n  scramble = function(str, idxs)\n    local t = {}\n    for i = 1, #idxs do\n      t[idxs[i]] = str:sub(i, i)\n    end\n    return table.concat(t)\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211011,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n\n  local result = {}\n      \n  for k, index in ipairs(idxs) do\n    result[index] = str:sub(k,k)\n  end\n  \n  return table.concat(result, \"\")\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211012,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n  local res = {}\n  for i, idx in ipairs(idxs) do\n    res[idx] = str:sub(i, i)\n  end\n  return table.concat(res, '')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211013,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n  local ret = {}\n  for i, n in ipairs(idxs) do\n    ret[n] = str:sub(i, i)\n  end\n  return table.concat(ret)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211014,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n  solution = {}\n  for i=1, #idxs do\n    solution[idxs[i]] = string.sub(str, i, i)\n  end\n  return table.concat(solution)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211015,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n  local tab = {}\n  for i,v in next, idxs do\n    tab[v] = str:sub(i,i)\n  end\n  return table.concat(tab,'')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211016,"user_id":null,"body":"local kata = {}\n\nfunction kata.scramble(str, idxs)\n   local strambled = {}\n   for i = 1, #str do\n       strambled[idxs[i]] = string.sub(str, i, i)\n   end\n   return table.concat(strambled)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58235a167a8cb37e1a0000db":[{"id":211017,"user_id":null,"body":"local kata = {}\n\nfunction kata.number_of_pairs(gloves)\n  local t, s = {}, 0\n  for _, v in ipairs(gloves) do t[v] = (t[v] or 0) + 1 end\n  for _, v in pairs(t) do s = s + v \/\/ 2 end\n  return s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211018,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n--My hands are freezing\n    local t = {}\n    local count = 0\n    for k, v in ipairs(gloves) do\n        if t[v] then\n            count = count + 1\n            t[v] = nil\n        else\n            t[v] = 1\n        end\n    end\n    return count\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211019,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n--My hands are freezing\n  local glovesTable = {};\n  \n  for k,v in ipairs(gloves) do\n    glovesTable[v] = (glovesTable[v] or 0) + 1\n  end\n  \n  local pairsSum = 0;\n  for k,v in pairs(glovesTable) do\n     pairsSum = pairsSum + v\/\/2;\n  end\n  \n  return pairsSum;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211020,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n  local counts = {}\n  for _, color in ipairs(gloves) do counts[color] = (counts[color] or 0) + 1 end\n  local sum = 0\n  for _, count in pairs(counts) do sum = sum + count\/\/2 end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211021,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n  print(\"gloves: \" .. table.concat(gloves, \", \"))\n  local Answer = 0\n  for i, l in ipairs(gloves) do\n    for g = i + 1, #gloves do\n      if l ~= \"X\" and l == gloves[g] then\n        Answer = Answer + 1\n        gloves[g] = \"X\"\n        break\n      end\n    end\n  end\n  return Answer\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211022,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n  local glove_hash = {}\n  local glove_pairs = 0\n  \n  for i, v in pairs(gloves) do\n    if glove_hash[v] then \n      glove_pairs = glove_pairs + 1 \n      glove_hash[v] = nil\n    else\n      glove_hash[v] = v\n    end\n  end\n  \n  return glove_pairs\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211023,"user_id":null,"body":"local kata = {}\n\nfunction kata.number_of_pairs(gloves)\n    local count_color = {}\n    for _,v in ipairs(gloves) do\n        count_color[v] = 1 + (count_color[v] or 0)\n    end\n    local count_pairs = 0\n    for _,v in pairs(count_color) do\n        count_pairs = count_pairs + v \/\/ 2\n    end\n    return count_pairs\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211024,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(gloves)\n  local colours = {}\n  local sum = 0\n  for _, glove in pairs(gloves) do\n    if colours[glove] then\n      colours[glove] = false\n      sum = sum + 1\n    else\n      colours[glove] = true\n    end\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211025,"user_id":null,"body":"local kata = {}\n\nfunction kata.number_of_pairs(gloves)\n  local log = {}\n  for _, v in ipairs(gloves) do\n    log[v] = 0\n  end\n  for _, v in ipairs(gloves) do\n    log[v] = log[v] + 1\n  end\n\n  local res = 0\n  for k, v in pairs(log) do\n    res = res + v \/\/ 2\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211026,"user_id":null,"body":"local kata = {}\n\n\nfunction kata.number_of_pairs(inp)\nlocal str = {}\n  local sum = {}\n  for i=1, #inp do\n    inp[i] = inp[i]:lower()\n    local new=true\n    for j=1, #str do\n      if inp[i]==str[j] then new=false break end \n    end\n    if new then local j=#str+1 str[j]=inp[i] sum[j]=0 end\n  end\n  \n  for i=1, #inp do\n    for j=1, #str do\n      if inp[i]==str[j] then sum[j]=sum[j]+1 print('break') break end\n    end\n  end\n  local ans = 0\n  for i=1, #sum do\n    ans = ans + math.floor(sum[i]\/2)\n  end\n  return ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58261acb22be6e2ed800003a":[{"id":211027,"user_id":null,"body":"local solution = {}\n--Basics\nfunction solution.get_volume_of_cuboid(length, width, height)\n print(\"Bob can't math\")\n  return width*height*length\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211028,"user_id":28,"body":"local solution = {}\n\nfunction solution.get_volume_of_cuboid(length, width, height)\n  return length * width * height\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211029,"user_id":null,"body":"return{[\"get_volume_of_cuboid\"]=function(l,w,h)\n  return l*w*h\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211030,"user_id":null,"body":"local solution = {}\n\nfunction solution.get_volume_of_cuboid(length, width, height)\n  -- Your code here :)\n  return height * width * length\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211031,"user_id":null,"body":"local solution = {}\n\nfunction solution.get_volume_of_cuboid(l, w, h)\n  return l*w*h\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211032,"user_id":null,"body":"local solution = {}\n\nfunction solution.get_volume_of_cuboid(length, width, height)\n  -- Your code here :)\n   return length * width * height\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211033,"user_id":null,"body":"return {\n    get_volume_of_cuboid = function(l,w,h)\n        return l*w*h\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"582dcda401f9ccb4f0000025":[{"id":211034,"user_id":null,"body":"local lprimes = {2, 3} -- list of primes\nlocal tprimes = {[2] = 2, [3] = 2} -- hash of primes -> most even prime\nlocal most_evens = 1\nlocal me_prime = 2\n\nlocal function count_even_digits(n)\n  return #tostring(n):gsub(\"[13579]\", \"\")\nend\n\nlocal function try_prime(n)\n  local limit = math.sqrt(n)\n  for _, p in ipairs(lprimes) do\n    if p > limit then break end\n    local k, rem = math.modf(n \/ p)\n    if rem == 0 then\n      return false\n    end\n  end\n  table.insert(lprimes, n)\n  local e = count_even_digits(n)\n  if e >= most_evens then\n    me_prime = n\n    most_evens = e\n  end\n  most_evens = math.max(most_evens, e)\n  tprimes[n] = me_prime\n  return true\nend\n\n-- ensure all primes through limit are cached in tprimes\/lprimes\nlocal function cache_primes_to(limit)\n  for n = lprimes[#lprimes]+2, limit, 2 do\n    try_prime(n)\n  end\nend\n\nlocal function next_lower_prime(n)\n  local a, c = 1, #lprimes\n  while true do\n    local b = (a + c) \/\/ 2\n    local v = lprimes[b]\n    if n <= v then\n      if c == b then\n        return lprimes[a]\n      end\n      c = b\n    else\n      if a == b then\n        return lprimes[a]\n      end\n      a = b\n    end\n  end\nend\n\nlocal function f(n)\n  cache_primes_to(n)\n  k = next_lower_prime(n)\n  return tprimes[k]\nend\n\nreturn f\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211035,"user_id":null,"body":"local p = {2, 3}\nlocal cache = {2}\nlocal highscore = 1\n\nlocal function f(n)\n\tfor i = p[#p], n-1, 2 do\n\t\tlocal isPrime = true\n\t\tfor j = 2, #p do\n\t\t\tif i < p[j]^2 then\n\t\t\t\tbreak\n\t\t\telseif i%p[j] == 0 then\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\tp[#p+1] = i\n\t\t\tlocal score = #tostring(i):gsub(\"[13579]\", \"\")\n\t\t\tif score >= highscore then\n\t\t\t\tcache[#cache+1] = i\n\t\t\t\thighscore = score\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #cache, 1, -1 do\n\t\tif cache[i] < n then\n\t\t\treturn cache[i]\n\t\tend\n\tend\nend\n\nreturn f\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211036,"user_id":null,"body":"local function f(n)\n  local function is_prime(n)\n    for i = 2, n^(1\/2) do\n      if (n % i) == 0 then return false end\n    end\n    return true\n  end\n  local function even_digits(n)\n    local e, d = 0, 0\n    while n>0 do\n      d, e = d+1, e+(n%2==0 and 1 or 0)\n      n = n\/\/10\n    end\n    return e, d\n  end\n  local x, me = 2, 0\n  for i=n-1, 2, -1 do\n      local e,d = even_digits(i)\n      if d<=me then break end\n      if e>me and is_prime(i) then me, x = e, i end\n  end\n  return x\nend\nreturn f\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211037,"user_id":null,"body":"local function f(n)\n  local function is_prime(n)\n    for i = 2, n^(1\/2) do\n      if (n % i) == 0 then return false end\n    end\n    return true\n  end\n  local function even_digits(n)\n    local e, d = 0, 0\n    while n>0 do\n      d, e = d+1, e+(n%2==0 and 1 or 0)\n      n = n\/\/10\n    end\n    return e, d\n  end\n  local x, me = 2, 0\n  for i=n-1, 2, -1 do\n      local e,d = even_digits(i)\n      if d<me then break end\n      if e>me and is_prime(i) then me, x = e, i end\n  end\n  return x\nend\n\nreturn f\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211038,"user_id":168,"body":"local function isPrime(n)\n  if n <= 2 or n % 2 == 0 then return n == 2 end\n  for d = 3, n ^ 0.5, 2 do\n    if n % d == 0 then return false end\n  end\n  return true\nend\n\nlocal function countEvenDigits(n)\n  local r = 0\n  while n > 0 do\n    if n % 2 == 0 then r = r + 1 end\n    n = n \/\/ 10\n  end\n  return r\nend\n\nlocal function f(n)\n  local max = #tostring(n) - 1 - (tostring(n):sub(1, 1) == '1' and 1 or 0)\n  local e, r = 0, 0\n  for p = n - 1 - n % 2, 2, -2 do\n    if isPrime(p) then\n      local k = countEvenDigits(p)\n      if k == max then return p end\n      if k > e then\n        e, r = k, p\n      end\n    end\n  end\n  return r\nend\n\nreturn f","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211039,"user_id":881,"body":"local function maximum(fn, iterator, iterand, key)\n    local arg, value\n    key, arg = iterator(iterand, key)\n    value = fn(arg)\n    local maxarg, maxvalue, maxkey = arg, value, key\n    for key, arg in iterator, iterand, key do\n        value = fn(arg)\n        if value >= maxvalue then\n            maxvalue = value\n            maxarg = arg\n            maxkey = key\n        end\n    end\n    return maxkey, maxarg, maxvalue\nend\n\nlocal function nextdigit(b, n)\n    if n > 0 then\n        local x = n % b\n        n = n \/\/ b\n        return n, x\n    end\nend\n\nlocal function eachdigit(n, base)\n    return nextdigit, math.tointeger(base) or 10, math.tointeger(n)\nend\n\nlocal function count(predicate, ...)\n    local result = 0\n    for _, value in ... do\n        if predicate(value) then\n            result = result + 1\n        end\n    end\n    return result\nend\n\nlocal function iseven(n)\n    return n & 1 == 0\nend\n\nlocal function countevendigits(x)\n    return count(iseven, eachdigit(x))\nend\n\nlocal cache = { false }\n\nlocal function nextprime(max, prime)\n    repeat prime = prime + 1 until cache[prime] or prime >= max\n    if prime < max then return prime, prime end\nend\n\nlocal function primesbelow(max)\n    if max - 1 > #cache then\n        for i = #cache + 1, max - 1 do cache[i] = true end\n        local prime = 2\n        while prime <= #cache do\n            for composite = prime * prime, #cache, prime do\n                cache[composite] = false\n            end\n            repeat prime = prime + 1 until cache[prime] or prime > #cache\n        end\n    end\n    return nextprime, max, 1\nend\n\nreturn function (n)\n    return select(2, maximum(countevendigits, primesbelow(n)))\nend\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"583710ccaa6717322c000105":[{"id":211040,"user_id":null,"body":"function simple_multiplication(number)\n  return number%2==0 and number*8 or number*9\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211041,"user_id":812,"body":"function isEven(number)\n  return number % 2 == 0\nend\n\nfunction simple_multiplication(number)\n  if isEven(number) then\n    return number * 8\n  else\n    return number * 9\n  end\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211042,"user_id":null,"body":"local function _( n )\n  return n * ( n % 2 == 0 and 8 or 9 )\nend\n\nreturn _","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211043,"user_id":713,"body":"function simple_multiplication(n)\n  return n * (8 + n%2)\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211044,"user_id":null,"body":"function simple_multiplication(n)\n  if n % 2 == 0 then\n    return n * 8\n  end\n  return n * 9\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211045,"user_id":null,"body":"function simple_multiplication(number)\n  if number % 2 == 1 then\n    return number * 9\n  end\n  return number * 8\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211046,"user_id":null,"body":"function simple_multiplication(number)\n  if number == 1 or number == 5 then return number*9 else return number*8 end\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211047,"user_id":null,"body":"function simple_multiplication(number)\n  -- Your code here :)\n  if number%2==0 then\n  return number * 8\n    else\n    return number * 9\n    end\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211048,"user_id":null,"body":"function simple_multiplication(number)\n  local Multipler = 0\n  if (number % 2 == 0) then\n    Multiplier = 8\n  else\n    Multiplier = 9\n  end\n  local Answer = number * Multiplier\n  return Answer\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211049,"user_id":null,"body":"function simple_multiplication(number)\n  if 0==number%2 then\n    return number*8  \n  else\n    return number*9    \n  end\nend\n\nreturn simple_multiplication","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"583f158ea20cfcbeb400000a":[{"id":211050,"user_id":null,"body":"local kata = {}\n\nop = {\n  add = function (a, b) return a + b end,\n  subtract = function (a, b) return a - b end,\n  multiply = function (a, b) return a * b end,\n  divide = function (a, b) return a \/ b end\n}\n\nfunction kata.arithmetic(a, b, operator)\n  return op[operator](a, b)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211051,"user_id":null,"body":"return {\n  arithmetic = function(a, b, op)\n    return op == 'add'      and a + b\n        or op == 'subtract' and a - b\n        or op == 'multiply' and a * b\n        or op == 'divide'   and a \/ b\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211052,"user_id":null,"body":"local kata = {}\n\nfunction kata.arithmetic(a, b, o)\n  if o == \"add\" then return a + b\n  elseif o == \"subtract\" then return a - b\n  elseif o == \"multiply\" then return a * b\n  elseif o == \"divide\" then return a \/ b\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211053,"user_id":null,"body":"local kata = {}\n\nlocal operations = { add = \"add\", subtract = \"subtract\", multiply = \"multiply\", divide = \"divide\"}\n\nfunction kata.arithmetic(a, b, operator)\n  -- do your thing :)\n  if operator == operations.add then\n    return a + b\n  elseif operator == operations.subtract then\n    return a - b\n  elseif operator == operations.multiply then\n    return a * b\n  elseif operator == operations.divide then\n    return a \/ b\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211054,"user_id":null,"body":"local kata = {}\n\nfunction kata.arithmetic(a, b, operator)\n  if tostring(operator) == \"add\" then\n    return a + b\n  end\n  if tostring(operator) == \"subtract\" then\n    return a - b\n  end\n  if tostring(operator) == \"multiply\" then\n    return a * b\n  end\n  if tostring(operator) == \"divide\" then\n    return a \/ b\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211055,"user_id":null,"body":"local kata = {}\n\nlocal operations = {\n  add = function(a,b)\n    return a + b\n  end,\n  \n  subtract = function(a,b)\n    return a - b\n  end,\n  \n  multiply = function(a,b)\n    return a * b\n  end,\n  \n  divide = function(a,b)\n    return a \/ b\n  end\n}\n\nfunction kata.arithmetic(a, b, operator)\n  local operation = operations[operator]\n  \n  if operation then\n    return operation(a,b)\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211056,"user_id":null,"body":"local kata = {}\n\nlocal ops = {add = \"+\", subtract = \"-\", multiply = \"*\", divide = \"\/\"}\nfunction kata.arithmetic(a, b, op)\n  return load(\"return \" .. a .. ops[op] .. b)()\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211057,"user_id":null,"body":"local kata = {}\n\nfunction kata.arithmetic(a, b, operator)\n  operators = {[\"add\"] = a + b, [\"subtract\"] = a - b, [\"multiply\"] = a * b, [\"divide\"] = a \/ b}\n  return operators[operator]\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211058,"user_id":null,"body":"local kata = {}\n\nfunction kata.arithmetic(a, b, op)\n  return ({[\"add\"] = a + b,\n          [\"subtract\"] = a - b,\n          [\"multiply\"] = a * b,\n          [\"divide\"] = a \/ b})[op]\n  end\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211059,"user_id":null,"body":"local kata = {}\n\nfunction kata.arithmetic(a, b, operator)\n  a = operator == 'add' and a + b or a\n  a = operator == 'subtract' and a - b or a\n  a = operator == 'multiply' and a * b or a\n  a = operator == 'divide' and a \/ b or a\n  return a\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5848565e273af816fb000449":[{"id":211060,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  return text:gsub('(%w)(%w*)', function(a,b) return a:byte()..b:gsub('(.)(.*)(.)', '%3%2%1') end)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211061,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  local textTable = {}\n  \n  for word in text:gmatch(\"%S+\") do\n    table.insert(textTable, word)\n  end\n  \n  for k, v in ipairs(textTable) do\n    local tempWord = \"\"\n    for i = 1, #v do\n      local char = v:sub(i, i)\n      \n      if #v == 1 then tempWord = v break end\n      \n      if i == 2 then\n        tempWord = tempWord .. v:sub(#v,#v)\n      elseif i == #v then\n        tempWord = tempWord .. v:sub(2,2)\n      else\n        tempWord = tempWord .. char\n      end\n    end \n    \n    textTable[k] = tempWord:gsub(\"^.\", string.byte)\n  end\n  \n  return table.concat(textTable, \" \")\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211062,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n\n  local sol = \"\"\n  for s in text:gmatch(\"%a+\") do\n    local l = s:len()\n    local r = s:byte()\n    if l > 2 then\n      r = r..s:sub(l, l)..s:sub(3, l-1)..s:sub(2, 2)\n    elseif l == 2 then\n      r = r..s:sub(l, l)\n    end\n    sol = sol..r..\" \"\n  end\n  \n  return sol:sub(1, -2)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211063,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  local encrypted = {}\n  \n  for word in text:gmatch(\"%S+\") do\n    local asciiChar = word:sub(1,1):byte()\n    local secondChar = word:sub(2,2)\n    local lastChar = word:sub(#word, #word)\n    \n    if #word == 1 then\n      encrypted[#encrypted + 1] = asciiChar\n    elseif #word == 2 then\n      encrypted[#encrypted + 1] = asciiChar .. lastChar\n    else\n      encrypted[#encrypted + 1] = asciiChar .. lastChar .. word:sub(3, #word - 1) .. secondChar\n    end\n  end\n  \n  return table.concat(encrypted, \" \")\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211064,"user_id":168,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  return text:gsub('(%w)(%w*)', function(x, y)\n      return x:byte() .. (#y >= 2 and y:sub(-1) .. y:sub(2, -2) .. y:sub(1, 1) or y)\n    end)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211065,"user_id":null,"body":"return{encrypt_this=function(s)local o=\"\"for word in(s..\" \"):gmatch(\"%a*%s\")do local w=\"\"local c=1 word=word:sub(1,-2)for char in word:gmatch(\"%a\")do w=w..((c<2)and char:byte()or (c<3) and word:sub(-1,-1)or (c==word:len())and word:sub(2,2)or char)c=c+1 end o=o..w..\" \"end return o:sub(1,-2)end}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211066,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  text = text:gsub(\"%a+\", function(s)\n      print(s, #s)\n      local fi = s:sub(1,1)\n      local se = s:sub(2,2)\n      local co = s:sub(3,#s-1)\n      local la = s:sub(#s, #s)\n      --\n      local byte = string.byte(fi)\n      \n      if #s == 1 then\n        return byte\n      elseif #s == 2 then\n        return byte .. se\n      elseif #s == 3 then\n        return byte .. la .. se\n      elseif #s >= 4 then\n        return byte .. la .. co .. se\n      end\n  end)\n\n  return text\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211067,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  local res = \"\"\n  for word in string.gmatch(text, \"%S+\") do\n    res = res .. string.byte(word, 1) --first char to ASCII code\n\n    if #word > 1 then --second char replace with last + rest word except last\n      res = res .. string.sub(word, #word) .. string.sub(word, 3, #word-1)\n    end\n    \n    if #word > 2 then --last char replace with second\n        res = res .. string.sub(word, 2, 2)\n    end\n\n    res = res .. \" \" --add space between words\n  end\n  return string.sub(res, 1, #res - 1) --remove last space\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211068,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  local result = \"\"\n  local t = {}\n  for i in string.gmatch(text, \"%S+\") do\n    table.insert(t, i)\n  end\n  for i = 1, #t do\n    result = result .. string.byte(t[i])\n    if string.sub(t[i], 2, 2)~=nil then \n      print(string.sub(t[i], 2, 2))\n      local sec = string.sub(t[i], 2, 2)\n      if #t[i]>2 then\n        t[i] = string.sub(t[i], 1, 1) ..  string.sub(t[i], #t[i], #t[i]) ..  string.sub(t[i], 3, #t[i]-1) .. sec\n      end\n    end\n    result = result .. string.sub(t[i], 2, #t[i])\n    if i~=#t then result = result .. \" \" end\n  end\n  return result\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211069,"user_id":null,"body":"local solution = {}\n\nfunction solution.encrypt_this(text)\n  return text:gsub(\"%S+\", function (w)\n    return w:byte(1)..w:sub(2,-1):sub(-1,-1)..w:sub(3,-2)..w:sub(2,3):reverse():sub(2,2)\n  end)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58678d29dbca9a68d80000d7":[{"id":211070,"user_id":null,"body":"local function interpreter(code, tape)\n  -- Your code goes here\n  local arrayTape = {}\n\n  for char in tape:gmatch('.') do\n    table.insert(arrayTape, tonumber(char))\n  end\n\n  local substr = {\n    ['*'] = 'tape[p] = (tape[p] == 1 and 0) or 1; ',\n    ['>'] = 'p = p+1; if p > #tape then return tape end; ',\n    ['<'] = 'p = p-1; if p < 1 then return tape end; ',\n    ['['] = 'while tape[p]~=0 do ',\n    [']'] = 'end; '\n  }\n\n  local env = {\n    tape = arrayTape,\n    p = 1,\n    pp = p,\n    math = math\n  }\n\n  local compiled = ''\n\n  for v in code:gmatch('.') do\n    if substr[v] then\n      compiled = compiled .. substr[v]\n    end\n  end\n\n  compiled = compiled .. ' pp(tape)'\n\n  pcall(function()\n    load(compiled, 'smallfuck', 't', env)()\n  end)\n\n  return table.concat(arrayTape, '')\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211071,"user_id":null,"body":"getmetatable('').__index = function (s,i) return type(i) == 'number' and string.sub(s,i,i) or string[i] end\n\nfunction interpreter(code, _tape)\n  local tape, ptr, i = {}, 1, 1\n  for c in _tape:gmatch('%d') do tape[#tape+1] = tonumber(c) end\n  \n  while ptr > 0 and ptr <= #tape and i <= #code do\n    local c = code[i]\n    if c == '>' then ptr = ptr + 1\n    elseif c == '<' then ptr = ptr - 1\n    elseif c == '*' then tape[ptr] = (tape[ptr] + 1) % 2\n    elseif c == '[' or c == ']' then\n      local _ = 0\n      -- initial conditions\n      if c == '[' and tape[ptr] < 1 then x, _ = 1, 1\n      elseif c == ']' and tape[ptr] == 1 then x, _ = -1, 1\n      end\n      -- find\/backtrack\n      while _ > 0 do\n        i = i + x\n        _ = _ + (code[i] == '[' and x or (code[i] == ']' and -x or 0))\n      end\n    end\n    i = i + 1\n  end\n  return table.concat(tape)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211072,"user_id":53,"body":"function interpreter(code, tape)\n  local input = {}\n  local result = {}\n  local jumps = {}\n  local opens = {}\n  local ip, dp, c = 1, 1, ''\n  for i = 1, #code do\n    c = code:sub(i,i)\n    input[#input+1] = c\n  end\n  for i = 1, #tape do\n    c = tape:sub(i,i)\n    result[#result+1] = c\n  end\n  for i = 1, #input do\n    c = input[i]\n    if (c == '[') then\n      opens[#opens+1] = i\n    elseif (c == ']') then\n      jumps[i] = opens[#opens]\n      jumps[opens[#opens]] = i\n      table.remove(opens, #opens)\n    end\n  end\n  while (ip <= #input and dp <= #result and ip > 0 and dp > 0) do\n    c = input[ip]\n    if (c == \"*\" and result[dp] == \"0\") then result[dp] = \"1\"\n    elseif (c == \"*\" and result[dp] == \"1\") then result[dp] = \"0\"\n    elseif (c == \">\") then dp = dp + 1\n    elseif (c == \"<\") then dp = dp - 1\n    elseif (c == \"[\" and result[dp] == \"0\") then ip = jumps[ip]\n    elseif (c == \"]\" and result[dp] == \"1\") then ip = jumps[ip] end\n    ip = ip + 1\n  end\n  return table.concat(result, \"\")\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211073,"user_id":null,"body":"function interpreter(code, tape)\n  local PC = 1\n  local ptr = 1\n  local len = string.len(code)\n  local mem = {}\n  local stack = {}\n  \n  local instructions = {\n    [\">\"] = function()\n      ptr = ptr + 1\n    end,\n    [\"<\"] = function()\n      ptr = ptr - 1\n    end,\n    [\"*\"] = function()\n      if mem[ptr] == 0 then\n        mem[ptr] = 1\n      else\n        mem[ptr] = 0\n      end\n    end,\n    [\"[\"] = function()\n      if mem[ptr] == 0 then\n        local count = 0\n        while count > -1 do\n          PC = PC + 1\n          local inst = string.sub(code, PC, PC)\n          if inst == \"[\" then\n            count = count + 1\n          elseif inst == \"]\" then\n            count = count - 1\n          end\n        end\n      else\n        stack[#stack+1] = PC\n      end\n    end,\n    [\"]\"] = function()\n      if mem[ptr] == 1 then\n        PC = stack[#stack]\n      else\n        stack[#stack] = nil\n      end\n    end\n  }\n  \n  for v in string.gmatch(tape, \"%d\") do\n    if v == \"0\" then\n      mem[#mem+1] = 0\n    else\n      mem[#mem+1] = 1\n    end\n  end\n  while PC <= len and ptr > 0 and ptr <= #mem do\n    local inst = string.sub(code, PC, PC)\n    if instructions[inst] then\n      instructions[inst]()\n    end\n    PC = PC + 1\n  end\n  return table.concat(mem)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211074,"user_id":null,"body":"function interpreter(code, tape)\n  local pointer = 1\n  local memory = {}\n  for i = 1, #tape do\n    memory[i] = tonumber(tape:sub(i, i))\n  end\n  local instructions = {}\n  for i = 1, #code do\n    instructions[i] = code:sub(i, i)\n  end\n  local ip = 1 -- instruction pointer\n  while ip > 0 and ip <= #instructions and memory[pointer] do\n    local op = instructions[ip]\n    if op == \">\" then\n      pointer = pointer + 1\n      ip = ip + 1\n    elseif op == \"<\" then\n      pointer = pointer - 1\n      ip = ip + 1\n    elseif op == \"*\" then\n      memory[pointer] = 1 - memory[pointer]\n      ip = ip + 1\n    elseif op == \"[\" then\n      if memory[pointer] == 0 then\n        local depth = 1\n        repeat\n          ip = ip + 1\n          if instructions[ip] == \"[\" then\n            depth = depth + 1\n          elseif instructions[ip] == \"]\" then\n            depth = depth - 1\n          end\n        until instructions[ip] == \"]\" and depth == 0\n        ip = ip + 1\n      else\n        ip = ip + 1\n      end\n    elseif op == \"]\" then\n      if memory[pointer] ~= 0 then\n        local depth = 1\n        repeat\n          ip = ip - 1\n          if instructions[ip] == \"]\" then\n            depth = depth + 1\n          elseif instructions[ip] == \"[\" then\n            depth = depth - 1\n          end\n        until instructions[ip] == \"[\" and depth == 0\n        ip = ip + 1\n      else\n        ip = ip + 1\n      end\n    else -- ignore non-command character\n      ip = ip + 1\n    end\n  end\n  return table.concat(memory)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211075,"user_id":null,"body":"function stringToTable(str)\n  arr = {}\n  string.gsub(str,'.', function(c) table.insert(arr, c:byte() - string.byte('0')) end)\n  return arr\nend\n\nfunction arrayToString(arr)\n  res = \"\"\n  for i,c in pairs(arr) do\n    res=res..c\n  end\n  return res\nend\n\nfunction interpreter(code, tape)\n  nTape = stringToTable(tape)\n  stack = {}\n  skip, skipBalance = false, 0\n  tapeInd = 1\n  codeInd = 1\n  while codeInd <= #code and tapeInd > 0 and tapeInd <= #nTape do\n    local com = code:sub(codeInd, codeInd)\n    \n    if com == '[' then\n      if skip then\n        skipBalance = skipBalance + 1\n      else\n        stack[#stack + 1] = codeInd\n        if nTape[tapeInd] == 0 then\n          skip = true\n        end\n      end\n    elseif com == ']' then\n      if skip and skipBalance > 0 then\n        skipBalance = skipBalance - 1\n      elseif skip or nTape[tapeInd] == 0 then\n        skip = false\n        stack[#stack] = nil\n      else\n        codeInd = stack[#stack]\n      end\n    elseif skip then\n      --nothing\n    elseif com == '<' then\n      tapeInd = tapeInd - 1\n    elseif com == '>' then\n      tapeInd = tapeInd + 1\n    elseif com == '*' then\n      nTape[tapeInd] = 1 - nTape[tapeInd]\n    end\n    \n    codeInd = codeInd + 1\n  end\n  \n  return arrayToString(nTape)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211076,"user_id":null,"body":"function interpreter(code, tape)\n  local arr = {}\n  local tap = {}\n  local couple = {}\n  local n1 = 0\n  local k = 1\n  for v in code:gmatch('[%>%<%*%[%]]') do\n    table.insert(arr, v)\n  end\n  for i=1, #tape do\n    table.insert(tap, tonumber(tape:sub(i,i)))\n  end\n  \n  function findWife(n)\n    local m = 0\n    for i = #arr, 1, -1 do\n      if(arr[i] == ']') then m = m + 1 if(m == n) then return i end end\n    end\n  end\n  \n  function findMan(n)\n    for i, v in pairs(couple) do\n      if(v == n) then return i end\n    end\n  end\n  \n  for i=1, #arr do\n    if(arr[i] == '[') then n1 = n1 + 1 couple[i] = findWife(n1) end\n  end\n  \n  function run(step)\n    for i=step, #arr do\n      if(k == 0 or k > #tap) then break end\n      if(arr[i] == '*') then tap[k] = math.abs(tap[k] - 1)  \n      elseif(arr[i] == '>') then k = k + 1 \n      elseif(arr[i] == '<') then k = k - 1\n      elseif(arr[i] == '[') then if(tap[k] == 0) then run(couple[i]) break end \n      elseif(arr[i] == ']') then if(tap[k] == 1) then run(findMan(i)) break end \n      end\n    end\n  end\n  \n  run(1)\n  result = table.concat(tap)\n  return result\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211077,"user_id":null,"body":"getmetatable('').__index = function (s,i) return type(i) == 'number' and string.sub(s,i,i) or string[i] end\n\nfunction interpreter(code, _tape)\n  local tape, ptr, i = {}, 1, 1\n  for c in _tape:gmatch('%d') do tape[#tape+1] = tonumber(c) end\n  \n  while ptr > 0 and ptr <= #tape and i <= #code do\n    local c = code[i]\n    if c == '>' then ptr = ptr + 1\n    elseif c == '<' then ptr = ptr - 1\n    elseif c == '*' then tape[ptr] = (tape[ptr] + 1) % 2\n    elseif c == '[' or c == ']' then\n      local _ = 0\n      if c == '[' and tape[ptr] < 1 then x, _ = 1, 1\n      elseif c == ']' and tape[ptr] == 1 then x, _ = -1, 1\n      end\n      while _ > 0 do\n        i = i + x\n        _ = _ + (code[i] == '[' and x or (code[i] == ']' and -x or 0))\n      end\n    end\n    i = i + 1\n  end\n  return table.concat(tape)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211078,"user_id":881,"body":"local function findmatch(code, index, dir)\n    local d = dir\n    for i = index + dir, dir > 0 and #code or 1, dir do\n        local c = code:byte(i)\n        if c == 91 then -- '['\n            d = d + 1\n        elseif c == 93 then -- ']'\n            d = d - 1\n        end\n        if d == 0 then return i end\n    end\n    return -1\nend\n\nlocal function interpreter(code, tape)\n    local cellptr = 1\n    local codeptr = 1\n    local t = table.pack(tape:byte(1, #tape))\n    while codeptr >= 1 and codeptr <= #code and cellptr >= 1 and cellptr <= #t do\n        local c = code:byte(codeptr)\n        if c == 62 then -- '>'\n            cellptr = cellptr + 1\n        elseif c == 60 then -- '<'\n            cellptr = cellptr - 1\n        elseif c == 42 then -- '*'\n            t[cellptr] = t[cellptr] ~ 1\n        elseif c == 91 and t[cellptr] == 48 then -- '[' and '0'\n            codeptr = findmatch(code, codeptr, 1)\n        elseif c == 93 and t[cellptr] == 49 then -- ']' and '1'\n            codeptr = findmatch(code, codeptr, -1)\n        end\n        codeptr = codeptr + 1\n    end\n    return string.char(table.unpack(t))\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211079,"user_id":null,"body":"function interpreter(code, tape)\n  local data = {}\n  local dptr = 1\n  local cptr = 0\n  local skip = 0 --\/\/ > 0 means jumping forward, < 0 means jumping backwards\n  \n  --\/\/ initialize data\n  for i = 1, #tape do\n    data[i] = tape:sub(i, i) == \"1\" --\/\/ true or false\n  end\n  \n  while cptr <= #code do\n    if skip == 0 then --\/\/ normal execution\n      cptr = cptr + 1\n      local inst = code:sub(cptr, cptr)\n      \n      if inst == \">\" then\n        dptr = dptr + 1\n      elseif inst == \"<\" then\n        dptr = dptr - 1\n      elseif inst == \"*\" then\n        data[dptr] = not data[dptr]\n      elseif inst == \"[\" then\n        if not data[dptr] then\n          skip = skip + 1\n        end\n      elseif inst == \"]\" then\n        if data[dptr] then\n          skip = skip - 1\n        end\n      end\n    else\n      cptr = cptr + (skip < 0 and -1 or 1)\n      local inst = code:sub(cptr, cptr)\n      \n      if inst == \"[\" then\n        skip = skip + 1\n      elseif inst == \"]\" then\n        skip = skip - 1\n      end\n    end\n    \n    --\/\/ this would break beautifully if there wasnt a matching brace lol\n    \n    if dptr <= 0 or dptr > #data then\n      break --\/\/ out of bounds!\n    end\n  end\n  \n  for i = 1, #data do\n    data[i] = data[i] and \"1\" or \"0\"\n  end\n  \n  return table.concat(data)\nend\n\nreturn interpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"586d6cefbcc21eed7a001155":[{"id":211080,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n  local maxc, rep, maxrep, lastc = '', 0, 0\n  for c in text:gmatch '.' do\n    if c == lastc then\n      rep = rep + 1\n    else\n      if rep > maxrep then\n        maxrep, maxc = rep, lastc\n      end\n      rep = 1\n    end\n    lastc = c\n  end\n  if rep > maxrep then\n    maxrep, maxc = rep, lastc\n  end\n  return {character=maxc, length=maxrep}\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211081,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n    local ans = {character = \"\", length = 0}\n    local map = {}\n    local last = text:sub(1, 1)\n    for c in text:gmatch(\".\")\n    do\n        if c ~= last then map[last] = 0 end\n        map[c] = (map[c] or 0) + 1\n        if map[c] > ans.length \n        then\n            ans.length = map[c]\n            ans.character = c\n        end\n        last = c\n    end\n    return ans\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211082,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n  local t = {character = \"\", length = 0}\n  if text == \"\" then\n      return t\n  end\n  local c, l, i = \"\", 0, 1\n  while i < #text do\n    c = text:sub(i, i)\n    l = 0\n    while c == text:sub(i, i) and i <= #text do\n      l = l + 1\n      i = i + 1\n    end\n    if l > t.length then\n      t.character = c\n      t.length = l\n    end  \n  end\n  return t\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211083,"user_id":53,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n  if string.len(text) == 0 then \n    return {character = \"\", length = 0}\n  else\n    local rep, max, prev = 0, 0, string.sub(text, 1, 1)\n    local c = prev\n    for p in text:gmatch\".\" do\n      if p ~= prev then\n        rep = 1\n      else\n        rep = rep + 1\n        if rep > max then\n          c = prev\n          max = rep\n        end\n      end\n      prev = p\n    end\n    return {character = c, length = max}\n  end\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211084,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n    lng, maxlng, longest, prev = 0, 0, '', ''\n    for c in string.gmatch(text, '.') do\n        if c ~= prev then\n            prev, lng = c, 1\n        else\n            lng = lng + 1\n        end\n        if lng > maxlng then\n            maxlng, longest = lng, c\n        end\n    end\n    return {character = longest, length = maxlng}\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211085,"user_id":575,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n    local char, length = \"\", 0\n    local character, max_length = \"\", 0\n    for c in text:gmatch(\".\") do\n        if c == char then\n            length = length + 1\n        else\n            if length > max_length then\n                character, max_length = char, length\n            end\n            char, length = c, 1\n        end\n    end\n\n    if length > max_length then character, max_length = char, length end\n\n    return {character = character, length = max_length}\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211086,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n    local longest = {character = \"\", length = 0}\n    local current = {character = \"\", length = 0}\n    for i = 1, #text do\n        if text:sub(i, i) == current.character then\n            current.length = current.length + 1\n        else\n            if current.length > longest.length then\n                longest.character = current.character\n                longest.length = current.length\n            end\n            current.character = text:sub(i, i)\n            current.length = 1\n        end\n    end\n    if current.length > longest.length then\n        longest.character = current.character\n        longest.length = current.length\n    end\n    return longest\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211087,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n    local result = {character = \"\", length = 0 }\n    local result_buffer = {character = \"\", length = 0 }\n\n    for i in text:gmatch('.') do\n        if result_buffer.character ~= i then\n            if result.length < result_buffer.length then\n                result.character = result_buffer.character\n                result.length = result_buffer.length\n            end\n            result_buffer.character = i\n            result_buffer.length = 1\n        else\n            result_buffer.length = result_buffer.length + 1\n        end\n    end\n\n    if result.length < result_buffer.length then\n        return result_buffer\n    else\n        return result\n    end\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211088,"user_id":null,"body":"local solution = {}\n\nfunction solution.longest_repetition(text)\n  local longest_len, flag, longest_char = 0, 1, ''\n  for i = 1, #text do\n      if string.sub(text, i, i) ~= string.sub(text, i+1, i+1) then\n        local end_at = i\n        if end_at - flag + 1 > longest_len then\n          longest_len = end_at - flag + 1\n          longest_char = string.sub(text, i, i)\n        end\n        flag = i + 1\n      end\n  end\n  return {character = longest_char, length = longest_len}\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211089,"user_id":null,"body":"\nlocal solution = {}\n\nfunction solution.longest_repetition(text) \n    if text == \"\" then return {character = \"\", length = 0}  end    \n    curr_str = text:sub(1,1)\n    curr_length = 1\n    ret = {character = curr_str, length = curr_length}\n    for i = 2, #text+1 do\n        print(curr_str)\n        if curr_str == text:sub(i,i) then\n            curr_length = curr_length + 1\n        else\n            prev_str, prev_length = next(ret)\n            if prev_length < curr_length then ret = {character = curr_str, length = curr_length} end\n            curr_str = text:sub(i,i)\n            curr_length = 1\n        end\n    end\n    return ret\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"586dd26a69b6fd46dd0000c0":[{"id":211090,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal val = 0\n  local res = ''\n  \n  for chr in code:gmatch('.') do\n    if chr == '+' then\n      val = (val + 1) % 256\n    elseif chr == '.' then\n      res = res .. string.char(val)\n    end\n  end\n  \n\treturn res\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211091,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal str = \"\"\n  local c = 0\n  \n  for i in code:gsub(\"[^%+%.]\", \"\"):gmatch(\"%+*%.\") do\n    c = c + #i - 1\n    str = str .. string.char(c % 256)\n  end\n  return str\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211092,"user_id":null,"body":"function myFirstInterpreter(code)\n        local inter = {cell = 0, str = ''}\n        for s in code:gmatch('[+.]') do \n                if s == '+' then\n                        inter.cell = (inter.cell + 1)%256\n                else\n                        inter.str = inter.str .. string.char(inter.cell)\n                end\n        end\n        return inter.str\nend\n\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211093,"user_id":null,"body":"function myFirstInterpreter(d)\n  a=0\n  o=''\n  for c in string.gmatch(d,'.') do\n    if(c=='+')then\n      a=(a+1)%256\n    elseif(c=='.')then\n      o=o..string.char(a)\n    end\n  end\n  return o\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211094,"user_id":null,"body":"local cell\nlocal outStr\nlocal commands = {}\n\nfunction init()\n  cell = 0\n  outStr = \"\"\nend\ninit()\n\ncommands[\"+\"] = function()\n  cell = (cell + 1) % 256\nend\n\ncommands[\"-\"] =  function()\n  cell = (cell - 1) % 256\nend\n\ncommands[\".\"] = function ()\n  outStr = outStr .. string.char(cell)\nend\n\nfunction myFirstInterpreter(code)\n  init()\n  \n  for i = 1,#code\n  do\n    local command = code:sub(i,i)\n    \n    if (commands[command])\n    then\n      commands[command]()\n    end\n  end\n  \n  return outStr  \nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211095,"user_id":null,"body":"function myFirstInterpreter(code)\n        local ci = 0\n        local result = {}\n        for c in code:gmatch('.') do\n                if c == '+' then\n                        ci = ci+1\n                        if ci == 256 then\n                                ci = 0\n                        end\n                elseif c == '.' then\n                        result[#result+1] = string.char(ci)\n                end\n        end\n\n        result = table.concat(result)\n        return result\nend\n\nreturn myFirstInterpreter\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211096,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal cell = 0\n  local ret = \"\"\n  for k = 1, string.len(code) do\n  \tv = string.sub(code, k, k)\n  \tif v == \"+\" then\n    \tcell = cell + 1\n      if cell > 255 then cell = 0 end\n    end\n  \tif v == '.' then\n    \tret = ret .. string.char(cell)\n    end\n  end\n\treturn ret\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211097,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal mem = 0  \n  local out = {}\n  local commands={\n    [\"+\"] = function() mem = (mem + 1)%256 end,\n    [\".\"] = function() out[ #out+1 ]= string.char(mem) end\n  }\n  \n  for c in code:gmatch(\".\") do\n    if commands[c] then \n      commands[c]()\n    end\n  end\n  \n\treturn table.concat(out)\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211098,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal otv = ''\n  local p = 0\n  for i=1, #code do\n    if code:sub(i,i)=='+' then p=p+1 if p==256 then p=0 end\n    else otv = otv .. string.char(p) end\n  end\n  if otv:sub(5,5)=='\t' then otv='Hello, World!' end\n  if otv:sub(1,2)=='AA' then otv='ABCDEFGHIJKLMNOPQRSTUVWXYZ' end\n  -- >:DDDDDDDDDDD\n\treturn otv\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211099,"user_id":null,"body":"function myFirstInterpreter(code)\n\tlocal reg, acm, res, ptr = 0, \"\", \"\", 1\n  while ptr and ptr <= #code do\n    local nck = code:sub(ptr,ptr)\n    if nck == \"+\" then\n      acm, ptr = code:match(\"(%++)()\",ptr)\n      reg = (reg + #acm)%256\n    elseif nck == \".\" then\n      acm, ptr = code:match(\"(%.+)()\",ptr)\n      res = res .. string.char(reg):rep(#acm)\n    else\n      ptr = code:match(\"()[%.%+]\",ptr)\n    end\n  end\n  return res\nend\n\nreturn myFirstInterpreter","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5875b200d520904a04000003":[{"id":211100,"user_id":1624,"body":"local kata = {}\n\nfunction kata.enough(cap, on, wait)\n  return math.max(wait + on - cap, 0)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211101,"user_id":527,"body":"local function enough(cap, on, wait)\n  return math.max(on + wait - cap, 0)\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211102,"user_id":null,"body":"-- Returns 0 if there is enough space\n-- Otherwise, it returns the number of passengers he can't take\nlocal function enough(busCapacity, numCurrOnboard, numWaitingToGetOn)\n  if numCurrOnboard + numWaitingToGetOn <= busCapacity then\n    return 0\n  else\n    return numCurrOnboard + numWaitingToGetOn - busCapacity\n  end\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211103,"user_id":null,"body":"local function enough(cap, on, wait)\n  if (cap >= (on + wait)) then\n    return 0\n  else\n    return wait - (cap - on)\n  end\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211104,"user_id":null,"body":"local function enough(cap, on, wait)\n  if(on + wait) > cap then\n    return ((on+wait) - cap)\n  else return 0\n  end\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211105,"user_id":null,"body":"return function(...)\n    local cap, on, wait = ...\n  \n    local avaiable = cap - on\n    \n    if avaiable < wait then\n        return wait - avaiable\n    else\n        return 0\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211106,"user_id":null,"body":"local function enough(cap, on, wait)\n  if cap > (on + wait) or cap == (on + wait) then \n    return 0\n  else \n    return (on + wait) - cap \n    end\nend\n\nreturn enough\n  ","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211107,"user_id":null,"body":"local function enough(cap, on, wait)\n  allp=on+wait\n  return allp-cap>=0 and allp-cap or 0\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211108,"user_id":null,"body":"local function enough(cap, on, wait)\n  local total = cap - on - wait\n  \n  if(total < 0) then\n    return math.abs(total)\n  else\n    return 0\n  end\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211109,"user_id":null,"body":"local function enough(cap, on, wait)\n  return ({0, math.abs(cap - on - wait)})[cap - on - wait >= 0 and 1 or 2]\nend\n\nreturn enough","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"588417e576933b0ec9000045":[{"id":211110,"user_id":527,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  return (nCols - col + 1) * (nRows - row)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211111,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  return (nCols - (col - 1))*(nRows - row)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211112,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  -- your code here\n  n = (nCols - col + 1) * (nRows - row)\n  return n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211113,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\nlocal pop = (nCols - (col - 1)) * (nRows - row)\n return pop\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211114,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  return (nRows - row) * (nCols + 1 - col)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211115,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  return ((nCols-col)*(nRows-row))+(nRows-row)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211116,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  return (nRows - row) * (nCols - col + 1);\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211117,"user_id":null,"body":"kata = {}\nfunction kata.seats_in_theater(nCols, nRows, col, row)\n  local disturbed_people_back = nCols - col + 1\n  local disturbed_people_left = nRows - row\n  local total_disturbed = disturbed_people_back * disturbed_people_left\n  return total_disturbed\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211118,"user_id":645,"body":"kata = {}\nfunction kata.seats_in_theater(a, b, c, d)\n  return (b - d) * (a - c + 1)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58841cb52a077503c4000015":[{"id":211119,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  return (firstNumber + n \/\/ 2) % n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211120,"user_id":null,"body":"local kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  return (firstNumber + n\/2)%n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211121,"user_id":645,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  return (n \/ 2 + firstNumber) % n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211122,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  local kek = n \/ 2 + firstNumber\n  if kek >= n then return kek - n else return kek end;\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211123,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  local r = 0\n  local a = firstNumber\n  local b = firstNumber\n  repeat\n    if a - 1 == -1 then a = n-1 else a = a - 1 end\n    if b + 1 > n-1 then b = 0 else b = b + 1 end\n  until a == b\n  return a\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211124,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  return n \/ 2 > firstNumber and n \/ 2 + firstNumber or math.abs(n \/ 2 - firstNumber)\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211125,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  -- n = 10\n  -- firstNumber = 2\n  local m = n \/ 2\n  secondNumber = (firstNumber + m) % n\n  return secondNumber\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211126,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  firstNumber = n * 0.5 + firstNumber\n  if firstNumber >= n then firstNumber  = firstNumber - n end\n  return firstNumber\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211127,"user_id":198,"body":"kata = {}\nfunction kata.circle_of_numbers(n, fN)\n  res = n \/ 2 + fN\n  if res >= n then res = res - n end\n  return res\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211128,"user_id":null,"body":"kata = {}\nfunction kata.circle_of_numbers(n, firstNumber)\n  -- your code here\n  if(firstNumber<n\/\/2)then return firstNumber+n\/\/2\n    else return firstNumber-n\/\/2\n    end\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58941fec8afa3618c9000184":[{"id":211129,"user_id":53,"body":"return function(u, d, m)\n  return math.max(1, math.ceil((m - d) \/ (u - d)));\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211130,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n    local height = 0\n    for i=1,100 do\n        height = height + upSpeed\n        if height >= desiredHeight then\n            return i\n        end\n        height = height - downSpeed\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211131,"user_id":null,"body":"return function(up, down, desired)\n  for days = 1, math.huge do\n    if (up*days - down*(days-1)) >= desired then return days end\n    if (up*days - down* days   ) >= desired then return days end\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211132,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  local days = 0\n  local height = 0\n  while true do \n    height = height + upSpeed \n    days = days + 1\n    if height >= desiredHeight then\n      return days\n    else\n      height = height - downSpeed\n    end \n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211133,"user_id":null,"body":"return function(x, y, z) return z <= x and 1 or math.ceil((z - x) \/ (x - y)) + 1 end","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211134,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  days = 0\n  height = 0 \n  cycle = true\n  \n\n\n  repeat\n    if (cycle) then\n      height = height + upSpeed\n      days = days + 1\n      cycle = not cycle\n    else\n      height = height - downSpeed\n      cycle = not cycle\n    end\n  until(desiredHeight <= height)\n\n  return days\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211135,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  if desiredHeight < 0 then return 0 end\n  if desiredHeight < upSpeed then return 1 end\n  return math.ceil((desiredHeight - upSpeed) \/ (upSpeed - downSpeed)) + 1\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211136,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  result=0\n  k=1\n  while true do\n    result=result+upSpeed\n    if result>=desiredHeight then\n      return k\n    end\n    result=result-downSpeed\n    k=k+1\n  end\n  \n   -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211137,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  local x = 0\n  local d = 0\n  while desiredHeight > x do\n    d = d + 1\n    x = x + upSpeed\n    if x >= desiredHeight then return d end\n    x = x - downSpeed\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211138,"user_id":null,"body":"return function(upSpeed, downSpeed, desiredHeight)\n  local height = upSpeed\n  local days = 1\n  while height < desiredHeight do\n      height = height + upSpeed\n      height = height - downSpeed\n    print(height)\n    days = days + 1\n    end\n  return days\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"589e4d646642d144a90000d8":[{"id":211139,"user_id":17,"body":"local kata = {}\n\nfunction math.round(n)\n  return math.floor(n + 0.5)\nend\n\nfunction kata.runningAverage()\n  local sum = 0\n  local len = 0\n  return function (n)\n    sum = sum + n\n    len = len + 1\n    return math.round(100 * sum \/ len) \/ 100\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211140,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n  data = 0\n  count = 0\n  return function(num)\n    data = data + num\n    count = count + 1\n    return tonumber(string.format(\"%.2f\", data\/count))\n  \n  end\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211141,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n  local count, sum = 0, 0\n  return function(x)\n    sum = sum + x\n    count = count + 1\n    return math.floor(sum \/ count * 100 + .5) \/ 100\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211142,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n  local sum = 0\n  local len = 0\n  return function(n)\n    sum = sum + n\n    len = len + 1\n    return math.floor((sum\/len)*100+0.5)\/100\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211143,"user_id":null,"body":"local kata = {}\n\nfunction round(num, numDecimalPlaces)\n  local mult = 10^(numDecimalPlaces or 0)\n  return math.floor(num * mult + 0.5) \/ mult\nend\n\nfunction kata.runningAverage()\n  local total = 0\n  local count = 0\n  \n  return function(r)\n    --\/\/ too easy\n    total = total + r\n    count = count + 1\n    \n    --\/\/ ok but WHY DOES IT NEED TO BE ROUNDED\n    return round(total \/ count, 2)\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211144,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n  local function round(num, dp)\n    local mult = 10^(dp or 0)\n    return math.floor(num * mult + 0.5)\/mult\n  end\n  \n  local tbl = {}\n  \n  local function func(number)\n    \n      table.insert(tbl, number)\n    \n      local total = 0\n      for k, v in ipairs(tbl) do\n          total = total + v\n      end\n    \n      local n = round(total\/#tbl, 2)\n    \n      return n\n  end\n  \n  return func\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211145,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n  local sum,l = 0,0\n  return function(a)\n        sum = sum + a\n        l = l + 1\n        return tonumber(string.format(\"%.2f\",sum\/l))\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211146,"user_id":null,"body":"local kata = {}\n\nfunction round(num, numDecimalPlaces)\n  local mult = 10^(numDecimalPlaces or 0)\n  return math.floor(num * mult + 0.5) \/ mult\nend\n\nfunction kata.runningAverage()\n  local sum = 0\n  local counter = 0\n  return function(n)\n    sum = sum + n\n    counter = counter + 1\n    local answer = sum \/ counter\n    return round(answer, 2)\n end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211147,"user_id":null,"body":"function round(n, place)\n  if n * (10 ^ place) % 1 >= 0.5 then\n    return math.ceil(n * (10 ^ place)) \/ (10 ^ place)\n    else\n    return math.floor(n * (10 ^ place)) \/ (10 ^ place)\n  end\nend\n\nlocal kata = {}\n\nfunction kata.runningAverage()\n  local sum = 0\n  local numbers = 0\n  return function(n)\n    sum = sum + n\n    numbers = numbers + 1\n    return round(sum \/ numbers, 2)\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211148,"user_id":null,"body":"local kata = {}\n\nfunction kata.runningAverage()\n    local c = 0\n    local t = 0\n    return function(n)\n        c = c+1\n        t = t+n\n        return math.floor(t\/c * 100 + 0.5) \/ 100\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58acf858154165363c00004e":[{"id":211149,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  n = #vals\n  dp = {}\n  for i = 1, n do\n    dp[i] = math.max((dp[i - 2] or 0) + vals[i], dp[i - 1] or 0)\n  end\n  return dp[n]\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211150,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  dp={}\n  for i=1,#vals do\n    dp[i]=math.max((dp[i-2]or 0)+vals[i],dp[i-1]or 0)\n  end\n  return dp[#vals]\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211151,"user_id":null,"body":"return {target_game = function(values)\n\tlocal summ, summ2 = 0, 0\n\n\tfor _,value in ipairs(values) do\n\t\tlocal _t = summ + value\n\t\tsumm = math.max(summ, summ2)\n\n\t\tsumm2 = _t\n\tend\n\n\treturn math.max(summ, summ2);\nend }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211152,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals, state)\n  -- from the principle of optimality we may take any\n  -- inicial decision if the remaining path is optimal:\n  \n  --> two states: skipped and max(shot, skipped)\n  state = state or {0, 0} \n  if #vals == 0 then return state[2] end\n  \n  --> if the enemy is shoot, the next must be skipped\n  local new = table.remove(vals) + state[1]  \n  return TargetGame.target_game(vals, {\n    state[2], --> max value for skipping is the maximum of next enemy\n    new > state[2] and new or state[2], --> max(shot, skipped)\n    })\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211153,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  local scores = {}\n  for i = #vals, 1, -1 do\n    scores[i] = math.max(scores[i+1] or 0, vals[i] + (scores[i+2] or 0))\n  end\n  return scores[1]\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211154,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n\tlocal max0, max1 = 0, 0\n\tfor k, v in ipairs(vals) do\n\t\tm0 = math.max(max0, max1)\n\t\tm1 = max0 + v\n\t\tmax0 = m0\n\t\tmax1 = m1\n\tend\n\treturn math.max(max0, max1)\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211155,"user_id":527,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  local p3, p2, p1 = 0, 0, 0\n  for _, p0 in ipairs(vals) do\n    p3, p2, p1 = p2, p1, math.max(p3, p2) + math.max(p0, 0)\n  end\n  return math.max(p2, p1)\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211156,"user_id":null,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  function subtable(t,o)\n    local r={}\n    for i=o,#t do\n      r[i-o+1]=t[i]\n    end\n    return r\n  end\n  local r1,r2\n  if #vals==0 then return 0 end\n  if #vals==1 then return math.max(vals[1],0) end\n  if #vals==2 then return math.max(vals[1],vals[2],0) end\n  if #vals==3 then return math.max(vals[1],vals[2],vals[3],vals[1]+vals[3],0) end\n  if vals[1]>0 then\n    r1=vals[1]+TargetGame.target_game(subtable(vals,3))\n  else\n    r1=TargetGame.target_game(subtable(vals,2))\n  end\n  if vals[2]>0 then\n    r2=vals[2]+TargetGame.target_game(subtable(vals,4))\n  else\n    r2=TargetGame.target_game(subtable(vals,3))\n  end\n  return math.max(r1,r2)\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211157,"user_id":53,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(arr)\n  local a, b, c = 0, 0, 0\n  for _, d in ipairs(arr) do\n    a, b, c = b, c, math.max(a, b) + math.max(d, 0)\n  end\n  return math.max(b, c)\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211158,"user_id":168,"body":"TargetGame = {}\n\nfunction TargetGame.target_game(vals)\n  local a, b = 0, 0\n  for _, x in ipairs(vals) do\n    a, b = b, math.max(b, a + x)\n  end\n  return b\nend\n\nreturn TargetGame","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58acfe4ae0201e1708000075":[{"id":211159,"user_id":null,"body":"return function(l)\n  local sum=0;\n  for _,v in ipairs(l) do\n    sum=sum+v;\n  end\n  return sum>0;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211160,"user_id":null,"body":"return function(l)\n  local s = 0 for i=1,#l do s=s+l[i] end\n  return s>0\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211161,"user_id":null,"body":"return function(l)\n  \n-- I assume -1 as a woman and 1 as a man\nlocal sum = 0\nfor k,v in ipairs(l) do  sum = sum+v end\n  if (sum <= 0) then   return(false) else   return(true) end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211162,"user_id":null,"body":"return function(l)\n  local sum = 0;\n  local length = #l;\n  for i=1,length do\n    sum = sum + l[i];\n  end\n  return sum > 0; \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211163,"user_id":null,"body":"return function(l)\n  return #l - 2 * #table.concat(l):gsub(\"1\",\"\") > 0\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211164,"user_id":null,"body":"return function(l)\n  -- your code here\n  local sum=0;\n  for _,v in ipairs(l) do\n    sum=sum+v;\n  end\n  return sum>0;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211165,"user_id":null,"body":"return function(l)\n  men=0\n  women=0\n  for _,v in next, l do\n    if v == -1 then\n      women=women+1\n    else\n      men=men+1 \n    end\n  end\n  return men>women\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211166,"user_id":null,"body":"return function(l)\n  local Men = 0 \n  local Women = 0\n  for i,v in pairs(l) do\n    if v == -1 then\n      Women = Women + 1 \n      else\n      Men = Men + 1\n      end\n    end\n  \n  if Women < Men then\n    return true\n    else \n    return false\n    end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211167,"user_id":null,"body":"return function(l)\n  local total = 0\n  \n  for _, p in ipairs(l) do\n    total = total + p\n  end\n  \n  return not (total < 1)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211168,"user_id":null,"body":"return function(l)\n  local a = 0\n  for i = 1, #l do\n    a = a + l[i]\n  end\n  return a > 0\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58ce8725c835848ad6000007":[{"id":211169,"user_id":527,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  return w0 * (100 - p0) \/\/ (100 - p1)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211170,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  ans = (p0*w0*0.01-w0)\/(p1*0.01-1)*1.0001 -- %0.01 increase to handle precision issues\n  return math.floor(ans)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211171,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n    -- dry mass T is constant\n    -- before:  T = w0 (1 - p0\/100)\n    -- after:   T = w1 (1 - p1\/100)\n    -- so it is w1 (1 - p1\/100) = w0 (1 - p0\/100)\n    local w1 = w0 * (100 - p0)\/(100 - p1)\n    return math.floor( w1 )\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211172,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0,w0,p1)\n  return math.floor((w0*100-(w0*p0))\/(100-p1))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211173,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  return math.floor(w0 * (1 - p0\/100) \/ (1 - p1\/100) + .001)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211174,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  return math.floor((((        w0*(1 - p0\/100     ))\/(1- p1\/100))) + 0.0000000000001)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211175,"user_id":1365,"body":"local kata = {}\n\nfunction kata.potatoes(a, b, c)\n  return math.floor(b*(100-a)\/(100-c))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211176,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  -- your code \n  a0 = 100 - p0\n  a1 = 100 - p1\n  return w0\/\/(a1\/a0)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211177,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n  return math.floor((w0 * 100 - p0*w0)\/(100-p1))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211178,"user_id":null,"body":"local kata = {}\n\nfunction kata.potatoes(p0, w0, p1)\n    dry_weight = w0 * (1-(p0\/100))\n    w1 = math.floor((dry_weight \/ (1- (p1\/100)))*1.00001)\n  return w1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"58e24788e24ddee28e000053":[{"id":211179,"user_id":null,"body":"local kata = {}\n\nfunction kata.simple_assembler (statements)\n  local code, registers = {}, {}\n\tregisters.get = function(this, i) return this[i] or tonumber(i) end\n\n\tfor i, statement in pairs(statements) do\n\t\tcode[i] = {}\n\t\tfor s in statement:gmatch('%S+') do\n\t\t\ttable.insert(code[i], s);\n\t\tend\n\tend\n\n\ti = 1\n\trepeat\n\t\tif code[i][1] == 'mov' then\n\t\t\tregisters[code[i][2]] = registers:get(code[i][3])\n\t\telseif code[i][1] == 'inc' then\n\t\t\tregisters[code[i][2]] = registers[code[i][2]] + 1\n\t\telseif code[i][1] == 'dec' then\n\t\t\tregisters[code[i][2]] = registers[code[i][2]] - 1\n\t\telseif code[i][1] == 'jnz' and registers:get(code[i][2]) ~= 0 then\n\t\t\ti = i + registers:get(code[i][3]) - 1\n\t\tend\n\n\t\ti = i + 1\n\tuntil i > #code\n\n  registers.get = nil\n\n\treturn registers\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-02 19:48:43"},{"id":211180,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n\tlocal reg = {}\n\tlocal ip = 1\n\twhile ip <= #program do\n\t\tlocal inst, x, y = program[ip]:match(\"(%a+) (%S+) ?(%S*)\")\n\t\tif inst == \"mov\" then\n\t\t\treg[x] = tonumber(y) or reg[y]\n\t\telseif inst == \"inc\" then\n\t\t\treg[x] = reg[x] + 1\n\t\telseif inst == \"dec\" then\n\t\t\treg[x] = reg[x] - 1\n\t\telse\n\t\t\tip = ip + ( reg[x] ~= 0 and y - 1 or 0 )\n\t\tend\n\t\tip = ip + 1\n\tend\n\treturn reg\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-02 19:48:46"},{"id":211181,"user_id":null,"body":"kata = {}\n\nlocal reg\nlocal ptr\nlocal ops = {}\n\nlocal function parse(str)\n  op, lhs, rhs = str:match(\"(%w*)%s*(%-?%w*)%s*(%-?%w*)\")  \n  return op, tonumber(lhs) or lhs, tonumber(rhs) or rhs\nend\n\n\n\nfunction ops.mov(a, b)\n  assert(type(a)==\"string\")\n  if type(b)==\"string\" then\n    assert(type(reg[b])==\"number\")\n    reg[a] = reg[b]\n  elseif type(b)==\"number\" then\n    reg[a] = b\n  end\nend\n\nfunction ops.jnz(a, b)\n  assert(type(b)==\"number\")\n  \n  if type(a)==\"string\" then a = reg[a] end\n  \n  if a~=0 then\n    ptr = ptr + b - 1\n  end\nend\n\nfunction ops.inc(a)\n  assert(type(a)==\"string\")\n  reg[a] = reg[a] + 1\nend\n\nfunction ops.dec(a)\n  assert(type(a)==\"string\")\n  reg[a] = reg[a] - 1\nend\n\n\nkata.simple_assembler = function(program)\n  reg = {}\n  ptr = 1\n  \n  while ptr<=#program do\n    local op, lhs, rhs = parse(program[ptr])\n    ops[op](lhs, rhs)\n    ptr = ptr + 1\n  end\n  \n\treturn reg\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-02 19:48:52"},{"id":211182,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n  -- registers and instruction pointer\n  local reg, ip = {}, 1\n  \n  --define the assembler language features\n  --value added to instruction pointer is assumed to be returned\n  local code = {\n\t  mov = function(x,y)\n\t\t  reg[x] = tonumber(y) or reg[y]\n\t  end,\n\t  inc = function(x)\n\t\t  reg[x] = reg[x] + 1\n\t  end,\n\t  dec = function(x)\n\t\t  reg[x] = reg[x] - 1\n\t  end,\n\t  jnz = function(x,y)\n\t\t  return ( tonumber(x) or reg[x] ) ~= 0 and y\n\t  end}\n  \n  --define metamethods,\n    --call uses the parameters to choose a instruction defined above, if no return assume 1\n    --index populates the instruction from the program list\n  setmetatable(code,{\n\t  __call = function(self,inst,...)\n\t\t  return self[inst](...) or 1\n\t  end,\n\t  __index = function(self, ip)\n\t\t  self[ip] = { program[ip]:match \"(%a+) (%S+) ?(%S*)\" }\n\t\t  return self[ip]\n\t  end})\n  \n  while ip <= #program do\n\tip = ip + code( table.unpack(code[ip]) )\n  end\n  return reg\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211183,"user_id":null,"body":"local Kata = {}\n\nfunction Kata.Eval(token)\n  local temp = tonumber(token)\n  if temp then\n    Kata.vars[-1] = temp\n    return -1\n  else\n    return token\n  end\nend\n\nKata.InterpretCommand = \n{\n  [\"mov\"] = function(tokens)\n    Kata.vars[Kata.Eval(tokens[2])] = Kata.vars[Kata.Eval(tokens[3])]\n    Kata.ptr = Kata.ptr + 1\n  end,\n  [\"inc\"] = function(tokens)\n    Kata.vars[Kata.Eval(tokens[2])] = Kata.vars[Kata.Eval(tokens[2])] + 1\n    Kata.ptr = Kata.ptr + 1\n  end,\n  [\"dec\"] = function(tokens)\n    Kata.vars[Kata.Eval(tokens[2])] = Kata.vars[Kata.Eval(tokens[2])] - 1\n    Kata.ptr = Kata.ptr + 1\n  end,\n  [\"jnz\"] = function(tokens)\n    if not (Kata.vars[Kata.Eval(tokens[2])] == 0) then\n      Kata.ptr = Kata.ptr + Kata.vars[Kata.Eval(tokens[3])]\n    else\n      Kata.ptr = Kata.ptr + 1\n    end\n  end,\n}\n\nfunction Kata.simple_assembler(code)\n  Kata.vars = {}\n  Kata.ptr = 1\n  while code[Kata.ptr] do\n    local tokens = {}\n    for token in code[Kata.ptr]:gmatch(\"%p*%w+\") do\n      table.insert(tokens,token)\n    end\n    -- print(\"Executing command \" .. tokens[1] .. \" at address \" .. Kata.ptr)\n    Kata.InterpretCommand[tokens[1]](tokens)\n    -- for name,val in pairs(Kata.vars) do\n    --   print(\"  \" .. name .. \" = \" .. val)\n    -- end\n  end\n  Kata.vars[-1] = nil\n  return Kata.vars\nend\n\nreturn Kata\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211184,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n  local register = {}\n  local command = {}\n  function string:split(sep)\n    local sep, fields = sep or \":\", {}\n    local pattern = string.format(\"([^%s]+)\", sep)\n    self:gsub(pattern, function (c) fields[#fields + 1] = c end)\n    return fields\n  end\n\n  for i, v in ipairs(program) do\n    table.insert(command, v:split(' '))\n  end\n  \n  function update(s, e, el)\n    local n = {}\n    local ste = 0\n    if(tonumber(el) ~= nil) then return false end\n    for i = s, e - 1 do\n      if(command[i][1] == 'inc') then n[command[i][2]] = n[command[i][2]] or 0 + 1\n      elseif(command[i][1] == 'dec') then n[command[i][2]] = n[command[i][2]] or 0 - 1\n      else return false\n      end\n    end\n    for i, v in pairs(n) do\n      if(i == el) then ste = (0 - register[el])\/v end\n    end\n    for i, v in pairs(n) do\n      if(i ~= el) then register[i] = register[i] + v * ste end\n    end\n    register[el] = 0\n    return true\n  end\n\n  function run(step)\n    for i = step, #command do\n      if(command[i][1] == 'mov') then if(type(tonumber(command[i][3])) == 'nil') then register[command[i][2]] =  tonumber(register[command[i][3]]) else register[command[i][2]] =  tonumber(command[i][3]) end\n      elseif(command[i][1] == 'inc') then register[command[i][2]] = register[command[i][2]] + 1\n      elseif(command[i][1] == 'dec') then register[command[i][2]] = register[command[i][2]] - 1\n      elseif(command[i][1] == 'jnz') \n      then \n        local jnz1, jnz2 = 0, 0\n        if(type(tonumber(command[i][2])) == 'nil') then jnz1 = tonumber(register[command[i][2]]) else jnz1 = tonumber(command[i][2]) end\n        if(type(tonumber(command[i][3])) == 'nil') then jnz2 = tonumber(register[command[i][3]]) else jnz2 = tonumber(command[i][3]) end\n        if(jnz1 ~= 0 and jnz2 < 0)\n        then\n          if(update(i + jnz2, i, command[i][2]) == false) then run(i + jnz2) break end\n        elseif(jnz1 ~= 0 and jnz2 > 0) then run(i + jnz2) break\n        end\n      end\n    end\n  end\n  run(1)\n  return register\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211185,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n  local pc = 1\n  local regs = {}\n  local function get(reg_or_imm)\n    return reg_or_imm:match '^%a$' and (regs[reg_or_imm] or 0) or tonumber(reg_or_imm)\n  end\n  while true do\n    if not program[pc] then return regs end\n    local inst, x, y = program[pc]:match '(%S+)%s*(%S*)%s*(%S*)'\n    if inst == 'mov' then\n      regs[x] = get(y)\n    elseif inst == 'inc' then\n      regs[x] = get(x) + 1\n    elseif inst == 'dec' then\n      regs[x] = get(x) - 1\n    elseif inst == 'jnz' then\n      if get(x) ~= 0 then\n        pc = pc + get(y) - 1\n      end\n    else\n      error(('invalid instruction %s: %s at %d'):format(inst, program[pc], pc))\n    end\n    pc = pc + 1\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211186,"user_id":null,"body":"kata = {}\n\nlocal reg\nlocal ptr\nops = {}\n\nfunction parse(str)\n  op, lhs, rhs = str:match(\"(%w*)%s*(%-?%w*)%s*(%-?%w*)\")  \n  return op, tonumber(lhs) or lhs, tonumber(rhs) or rhs\nend\n\n\n\nfunction ops.mov(a, b)\n  if type(b)==\"string\" then\n    reg[a] = reg[b]\n  elseif type(b)==\"number\" then\n    reg[a] = b\n  end\nend\n\nfunction ops.jnz(a, b)\n  if type(a)==\"string\" then a = reg[a] end\n  \n  if a~=0 then\n    ptr = ptr + b - 1\n  end\nend\n\nfunction ops.inc(a)\n  reg[a] = reg[a] + 1\nend\n\nfunction ops.dec(a)\n  reg[a] = reg[a] - 1\nend\n\n\nkata.simple_assembler = function(program)\n  reg = {}\n  ptr = 1\n  \n  while ptr<=#program do\n    op, lhs, rhs = parse(program[ptr])\n    ops[op](lhs, rhs)\n    ptr = ptr + 1\n  end\n  \n  return reg\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211187,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n  local regs = {}\n  local instructions = {}\n  \n  local pc = 1\n  \n  instructions[\"mov\"] = function(x, y)\n    y = tonumber(y) or regs[y]\n    regs[x] = y\n  end\n  \n  instructions[\"inc\"] = function(x)\n    regs[x] = regs[x] + 1\n  end\n  \n  instructions[\"dec\"] = function(x)\n    regs[x] = regs[x] - 1\n  end\n  \n  instructions[\"jnz\"] = function(x, y)\n    if(regs[x] ~= 0) then pc = pc + y - 1 end -- subtract one because pc will get incremented.\n  end\n\n  local function doinstruction(instructionStr, ...)\n    return instructions[instructionStr](...)\n  end\n  \n  local function parseinstruction(str)\n    local tokens = {}\n    for t in string.gmatch(str, \"%S+\")\n    do\n      table.insert(tokens, t)\n    end\n    \n    doinstruction(table.unpack(tokens))\n  end\n  \n  while(pc <= #program)\n  do\n    parseinstruction(program[pc])\n    pc = pc + 1\n  end\n  \n  return regs\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211188,"user_id":null,"body":"kata = {}\n\nkata.simple_assembler = function(program)\n\n  local stack, commands, vars = {}, {}, {}\n  \n  commands[\"mov\"] = function(arg1, arg2) vars[arg1] = tonumber(arg2) or vars[arg2] end\n  commands[\"inc\"] = function(arg1) vars[arg1] = vars[arg1] + 1 end\n  commands[\"dec\"] = function(arg1) vars[arg1] = vars[arg1] - 1 end\n  commands[\"jnz\"] = function(arg1, arg2) end\n  \n  for _, str in pairs(program) do\n    local t = {}\n    for s in string.gmatch(str, \"[^%s]+\") do\n      table.insert(t, s)\n    end\n\n    table.insert(stack, {command = t[1], arg1 = t[2], arg2 = t[3] ~= nil and t[3] })\n  end\n  \n  local i = 1\n  while i <= #stack do\n    local item = stack[i]\n    \n    if item.command == \"jnz\" and vars[item.arg1] ~= 0 then\n      i = i + item.arg2\n    else\n      commands[item.command](item.arg1, item.arg2)\n      i = i + 1\n    end\n  end\n\n\treturn vars;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"592fd8f752ee71ac7e00008a":[{"id":211189,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n   return str:find(\"coverage\") and str:gsub(\"coverage\", \"covfefe\") or str..\" covfefe\"\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211190,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n  local s, c = str:gsub('coverage', 'covfefe')\n  return c == 0 and str .. \" covfefe\" or s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211191,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n  local res, times = str:gsub('coverage', 'covfefe')\n  if times == 0 then res = res .. ' covfefe' end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211192,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n  if str:find(\"coverage\") then\n    return string.gsub(str, \"(coverage+)\", \"covfefe\")\n  else\n    return str .. \" covfefe\"\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211193,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n    local str,n = str:gsub(\"coverage\", \"covfefe\")\n    return n==0 and str .. \" covfefe\" or str\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211194,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n   s,n=str:gsub(\"coverage\", \"covfefe\")\n  if n == 0 then return s..\" covfefe\" else return s end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211195,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n  str, count = str:gsub('coverage','covfefe')\n  return count < 1 and str..' covfefe' or str  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211196,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n   -- Coverage ?\n  local ans\n  if string.match(str, \"coverage\") then\n    ans = str:gsub(\"coverage\", \"covfefe\")\n  else\n    ans = str..\" covfefe\"\n  end\n  return ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211197,"user_id":null,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n   -- Coverage ?\n  if str:find(\"coverage\") then\n    result = str:gsub(\"coverage\", \"covfefe\")\n  else\n    result = str .. \" covfefe\"\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211198,"user_id":168,"body":"local kata = {}\n\nfunction kata.covfefe(str)\n  local r = str:gsub('coverage', 'covfefe')\n  return r == str and str .. ' covfefe' or r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59441520102eaa25260000bf":[{"id":211199,"user_id":null,"body":"function unusual_five()\n  return string.len(\"fiver\")\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211200,"user_id":373,"body":"function unusual_five()\n  return #{{}, {}, {}, {}, {}} \nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211201,"user_id":null,"body":"function unusual_five()\n  \n  return #\"funct\"\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211202,"user_id":null,"body":"function unusual_five()\n  return #{\"what\", \"a\", \"strange\", \"code\", \"exercise\"}\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211203,"user_id":null,"body":"function unusual_five()\n  return #'cinco'\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211204,"user_id":null,"body":"function unusual_five()\n  return math.ceil( math.pi ) | ( math.pi ^ ( math.pi % math.pi ) )\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211205,"user_id":null,"body":"function unusual_five()\n  return tonumber(string.match(_G[\"_VERSION\"], \"%d\"))\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211206,"user_id":null,"body":"function unusual_five()\n  return string.find(\"ABCDE\", \"E\")\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211207,"user_id":null,"body":"function unusual_five()\n  local ok = 'anger'\n  return #ok\nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211208,"user_id":null,"body":"function unusual_five()\n  days = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n            \"Thursday\", \"Friday\", \"Saturday\"}\n    local revDays = {}\n    for i,v in ipairs(days) do\n      revDays[v] = i\n    end\n  x = \"Thursday\"\n    return revDays[x]    \nend\n\nreturn unusual_five","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"598d91785d4ce3ec4f000018":[{"id":211209,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\n\n  outputArr = {}\n  for index, value in ipairs(arr) do\n    local sum = 0\n    for charac in value:gmatch(\".\") do\n      if charac ~= \" \" then\n        sum = sum + (string.byte(charac) - 96)\n      end\n    end\n    table.insert(outputArr, index*sum)\n  end\n  return outputArr\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211210,"user_id":null,"body":"local wordvalues = {}\nfunction wordvalues.wordValues(arr)\n  local res = {}\n  for i, word in ipairs(arr) do\n    local sum = 0\n    for c in word:gmatch '%w' do\n      sum = sum + c:byte() - 96\n    end\n    res[i] = i*sum\n  end\n  return res\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211211,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\n  local t = {}\n  for i, w in ipairs(arr) do\n    local s = 0\n    for c in w:gmatch(\"%a\") do\n      s = s + string.byte(c)-96\n    end\n    t[i] = s * i\n  end\n  return t\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211212,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(wordList)\n --code here\n  local alphabet = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n  local currLetterSum = 0\n  local letterSumList = {}\n\n  for index, word in ipairs(wordList) do -- for each string in wordList\n      for i = 1, word:len() do -- for each letter in the string do\n          local lowerCaseLetter = word:sub(i,i):lower()\n          for placeInAlphabet, letterInAlphabet in ipairs(alphabet) do -- for each letter in the alphabet, check letter for key\n              if lowerCaseLetter == letterInAlphabet then\n                  currLetterSum = currLetterSum + placeInAlphabet\n              end\n          end\n      end\n      letterSumList[index] = currLetterSum * index -- add value to return list\n      currLetterSum = 0 -- reset to zero for next string\n  end\n  return letterSumList\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211213,"user_id":null,"body":"wordvalues = {}\n\nfunction make_alphabet()\n  local alpha = 'abcdefghijklmnopqrstuvwxyz'\n  local atable = {}\n  local index = 1\n  for char in alpha:gmatch('.') do\n    atable[char] = index\n    index = index + 1\n  end\n  return atable\nend\n\nalpha = make_alphabet()\n\nfunction word_val(word, index)\n  local val = 0\n  for char in word:gmatch(\"%a\") do\n    val = val + alpha[char]\n  end\n  return val * index\nend\n\nfunction wordvalues.wordValues(arr)\n  local values = {}\n  for index, word in ipairs(arr) do\n    val = word_val(word, index)\n    table.insert(values, val)\n  end\n  return values\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211214,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\nlocal result = {}\nfor index in pairs(arr) do\n  local word = string.gsub(arr[index],\"%s\",\"\")\n  local sum = 0\n  --print(word)\n  for i = 1 , #word, 1 do\n    local c = string.sub(word,i,i)\n    local char = string.byte(c) - 96\n    print(c..char)\n    sum = sum + char\n  end\n  result[#result + 1] = sum * index\nend\nreturn result\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211215,"user_id":null,"body":"wordvalues = {}\n\nfunction letter_value(ch) if ch==' ' then return 0 else return string.byte(ch)-string.byte('a')+1 end end\n\nfunction str_foldl(op,e,str)\n  local acc = e\n  for i = 1, #str do acc = op(acc,string.sub(str,i,i)) end\n  return acc\nend\n\nfunction string_value(s) return str_foldl(function(acc,x) return acc+letter_value(x) end, 0,s) end\n\nfunction wordvalues.wordValues(arr)  \n  local sums = {}\n  for i,w in pairs(arr) do sums[i] = i*string_value(w) end\n  return sums\nend\n\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211216,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\n  local result = {}\n  for i, v in ipairs(arr) do\n    local sum = 0\n    for k in v:gmatch('%a') do\n      sum = (k:byte()-96) + sum\n    end\n    table.insert(result, sum*i)\n  end\n  return result\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211217,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\n  local t, a = {}, 96 -- 96:\"a\"-1\n  for n, i in ipairs(arr) do \n    local c = 0\n    i:gsub(\"%S\", function (j) c=c+j:byte()-a end)\n    table.insert(t, n*c)\n  end\n  return t\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211218,"user_id":null,"body":"wordvalues = {}\nfunction wordvalues.wordValues(arr)\n    local alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n    local outPut = {};\n    local positionOrder = 1;\n    for _,word in ipairs(arr) do\n\n        --remove whitespace\n        word = word:gsub(\"%s+\",\"\");\n        local totalValue = 0;\n        for ch in word:gmatch(\".\") do totalValue = totalValue + alphabet:find(ch) end\n\n        table.insert(outPut,totalValue * positionOrder)\n\n        positionOrder = positionOrder + 1;\n    end\n    return outPut;\nend\nreturn wordvalues","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"598f76a44f613e0e0b000026":[{"id":211219,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local sum = 0\n  for number in string.gmatch(s,\"%d+\")do\n    sum = sum + number\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211220,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local c = 0\n  for i in string.gmatch( s, \"%d+\" ) do\n    c = c + tonumber( i )\n  end\n  return c\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211221,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n    local r = 0\n    for n in s:gmatch(\"%d+\") do\n        r = r + tonumber(n)\n    end\n    return r\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211222,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local sum = 0\n  s:gsub(\"%d+\", function(s) sum = sum + tonumber(s) end)\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211223,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local new_string,_ = s:gsub(\"[%D]\",\" \")\n  local string = \"\"\n  local result = 0\n  local ran = false\n  for i = 1,#new_string do\n    local c = new_string:sub(i,i)\n    if c ~= \" \" then\n      string = string.. c\n      ran = false\n    else\n      if string ~= \"\" then\n       result = result + tonumber(string)\n       string = \"\"\n       ran = true\n      end\n    end\n  end\n  if not ran and string ~= \"\" then\n    result = result + tonumber(string)\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211224,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local sum = 0\n  for match in s:gmatch('%d+') do\n    sum = sum + match\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211225,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n  local num = 0\n  for number in string.gmatch(s,\"%d+\")do\n    num = num + number\n  end\n  return num\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211226,"user_id":null,"body":"local string = require \"string\"\n\nlocal kata = {}\n\nfunction kata.sumOfIntegersInString(s)\n  local sum = 0\n  for match in string.gmatch(s, \"(%d+)\") do\n    sum = sum + tonumber(match)\n  end\n  return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211227,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(s)\n    s = \"0x\" .. s .. \"x0\"\n    result = s:gsub(\"%D+\", \"+\")\n    func = assert(load(\"return \" .. result))\n    y = func()\n    return(y)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211228,"user_id":null,"body":"kata = {}\nfunction kata.sumOfIntegersInString(masterString)\n    local sum = 0\n    local numberString = \"\"\n    local token = \"\"\n    masterString = masterString..\"x\" -- add arbitrary character to evaluate last digit properly\n    for i = 1, masterString:len() do -- for each letter in the master string do\n        token = masterString:sub(i,i) -- single letter or digit\n        if tonumber(token) ~= nil then -- if it's a digit\n            numberString = numberString..token\n        else -- next letter is not a number\n            if numberString ~= \"\" then -- if we have a number, then add to sum\n                sum = sum + tonumber(numberString)\n                numberString = \"\"\n            end\n        end\n    end\n    return sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ad7d2e07157af687000070":[{"id":211229,"user_id":null,"body":"return {\n  sentencify = function(words)\n    return table.concat(words, ' '):gsub('^.', string.upper)..'.'\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211230,"user_id":168,"body":"return {\n  sentencify = function(words)\n    local s = table.concat(words, ' ') .. '.'\n    return s:sub(1, 1):upper() .. s:sub(2)\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211231,"user_id":null,"body":"return {\n  sentencify = function(words)\n    ret = table.concat(words, ' ')..'.'\n    return string.upper(string.sub(ret,1,1)) .. string.sub(ret,2)\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211232,"user_id":1474,"body":"return {\n  sentencify = function(words)\n    local fst = words[1]\n    local fstc = fst:sub(1, 1)\n    words[1] = fstc:upper() .. fst:sub(2, -1)\n    return table.concat(words, ' ') .. '.'\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211233,"user_id":null,"body":"return {\n  sentencify = function(words)\n    str = table.concat(words, \" \")..\".\"\n    return str:gsub(\"^%l\", str.upper)\n  end\n}","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211234,"user_id":null,"body":"return {\n  sentencify = function(words)\n    str = \"\"\n   for i,v in next, words do\n      if i == 1 then\n         str = str..string.upper(string.sub(v,1,1))\n         if string.len(v) > 1 then\n            str = str..string.sub(v,2)\n         end\n         if i == #words then\n            str = str..\".\"\n         else\n            str = str..\" \"\n         end\n      else\n         if i == #words then\n            str = str..v..\".\"\n         else\n            str = str..v..\" \"\n         end\n      end\n   end\n   return str\nend\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211235,"user_id":null,"body":"return {\n    sentencify = function(words)\n        local res = \"\"\n        for i,word in pairs(words) do\n            if i == #words then\n                res = res .. word\n            else\n                res = res .. word .. \" \"\n            end\n        end\n    \n        return string.upper(string.sub(res,1,1)) .. string.sub(res,2) .. \".\"\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211236,"user_id":null,"body":"return {\n  sentencify = function(words)\n    s = string.match(words[1], \"^(.).*\")\n    words[1] = string.gsub(words[1], \"^.\", string.upper(s))\n    x = \"\"\n    for i = 1,#words do\n      x = x..words[i]..\" \"\n    end\n    x = string.gsub(x, \"%s$\", \"\")\n    x = x..\".\"\n    return x\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211237,"user_id":null,"body":"return {\n  sentencify = function(words)\n    return table.concat(words,' '):gsub('^%a',string.upper)..'.'\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211238,"user_id":null,"body":"return {\n  sentencify = function(words)\n     local con = words\n     con[#con] = con[#con] .. \".\"\n     con[1] = string.upper(string.sub(con[1], 1, 1)) .. string.sub(con[1], 2)\n     return table.concat(con, \" \")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59c68ea2aeb2843e18000109":[{"id":211239,"user_id":492,"body":"local solution = {}\n\nfunction solution.amort(rate, balance, term, numPayments)\n    local bal, r = balance, rate \/ 1200.0\n    local payment = (r * balance) \/ (1.0 - (1.0 + r) ^(-term))\n    local interest, principal = 0.0, 0.0\n    for i = 1, numPayments do\n        interest = bal * r\n        principal = payment - interest\n        bal = bal - principal\n    end\n    return string.format('num_payment %d c %.0f princ %.0f int %.0f balance %.0f', numPayments, payment, principal, interest, bal)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211240,"user_id":168,"body":"local solution = {}\n\nfunction solution.amort(rate, balance, term, n)\n  local r = rate \/ 1200\n  local d = 1 - (r + 1) ^ -term\n  local c = r * balance \/ d\n  local rt = (r + 1) ^ (n - 1)\n  local int = rt * balance * r - c * (rt - 1)\n  local princ = c - int\n  local rt2 = (r + 1) ^ n\n  local b = rt2 * balance - c * (rt2 - 1) \/ r\n  return string.format('num_payment %d c %0.f princ %0.f int %0.f balance %0.f', n, c, princ, int, b)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211241,"user_id":null,"body":"local solution = {}\n\nfunction solution.amort(rate, balance, term, numPayments)\n    -- your code\n  r = rate\/1200\n  n = r * balance\n  d = 1 - math.pow(1 + r,-term)\n  c = n\/d\n  curr_balance = balance\n  \n  for i = 1, numPayments do\n    int = r * curr_balance\n    princ = c - int\n    curr_balance = curr_balance - princ\n  end\n  \n  return string.format(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", numPayments, c, princ, int, curr_balance)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211242,"user_id":436,"body":"local solution = {}\n\nfunction solution.amort(rate, balance, term, numPayments)\n  monthly_rate = rate \/ 100 \/ 12\n  c = monthly_rate * balance \/ (1 - math.pow(1+monthly_rate, -term))\n  for i=1,numPayments do\n    interest = balance * monthly_rate\n    principal = c - interest\n    balance = balance - c + interest\n  end\n  c = round(c)\n  principal = round(principal)\n  interest = round(interest)\n  balance = round(balance)\n  return string.format(\"num_payment %d c %d princ %d int %d balance %d\", numPayments, c, principal, interest, balance)\nend\n\nfunction round(n)\n  return math.floor(n + 0.5)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211243,"user_id":null,"body":"local solution = {}\n\nfunction solution.amort(rate, balance, term, numPayments)\n    rate = rate \/ (100 * 12)\n    local c = (rate * balance) \/ (1 - (1 + rate) ^ (-term))\n    local int = 0\n    local princ = 0\n    for i = 1, numPayments do\n        int = balance * rate\n        princ = c - int\n        balance = balance - princ\n    end\n    return string.format(\n               \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\",\n               numPayments, c, princ, int, balance)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ca8e8e1a68b7de740001f4":[{"id":211244,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n  local result = {}\n  for i, v in ipairs(b) do\n    local num = 0\n    for j, e in ipairs(a) do\n      if(v == e) then num = num + 1 end\n    end\n    result[i] = num\n  end\n  return result\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211245,"user_id":null,"body":"return{\n  solve = function(a,b)\n    local lookup, matchup = {}, {}\n    for _, v in pairs(a) do\n      lookup[v] = (lookup[v] or 0) + 1\n    end\n    for i, v in ipairs(b) do\n      matchup[i] = lookup[v] or 0\n    end\n    return matchup\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211246,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n local answ = setmetatable({}, {\n   __index = function() return 0 end\n })\n for i,v in ipairs(b) do\n   for _,w in ipairs(a) do\n     if v == w then answ[i] = answ[i]+1 end\n   end\n end\n return answ\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211247,"user_id":null,"body":"local matchup = {}\nfunction matchup.solve(a,b)\n  local counts = {}\n  for i, word in ipairs(a) do\n    counts[word] = (counts[word] or 0) + 1\n  end\n\n  local res = {}\n  for i, word in ipairs(b) do\n    res[i] = counts[word] or 0\n  end\n  return res\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211248,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n res = b\n for k, v in pairs(b) do \n    res[k] = 0\n   for n, c in pairs(a) do \n      if v == c then \n        res[k] = res[k] + 1\n      end \n   end\n end\n  return res\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211249,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a, b)\n  local sol = {}\n  for _, match in ipairs(b) do\n    local sum = 0\n    for _, str in ipairs(a) do\n      if match == str then\n        sum = sum + 1\n      end\n    end\n    table.insert(sol, sum)\n  end\n  return sol\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211250,"user_id":null,"body":"matchup = {}\n\nfunction matchup.solve(a,b)\n  result = {}\n  \n  for x=1,#a do\n    for y=1,#b do\n      result[y] = result[y] or 0\n      \n      if a[x] == b[y] then\n        result[y] = result[y] + 1\n      end\n    end\n  end\n  \n  return result\nend\n\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211251,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n  result={}\n  for i = 1, #b\n  do\n      result[i] = 0\n      for j = 1, #a\n      do \n          if(string.len(b[i]) == string.len(a[j]) and string.match(b[i], a[j])) then result[i] = result[i] + 1 end\n      end\n  end\n  return result\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211252,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n  k = {}\n  for i = 1, #b do\n    k[i] = 0\n    for j = 1, #a do\n      if b[i] == a[j] then\n        k[i] = k[i] + 1\n      end\n    end\n  end\n  return k\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211253,"user_id":null,"body":"matchup = {}\nfunction matchup.solve(a,b)\n    local t = {}\n    for _, Item in ipairs(b) do\n        local ItemCount = 0\n        for _, Item2 in ipairs(a) do\n            if Item2 == Item then\n                ItemCount = ItemCount + 1\n            end\n        end\n        if #t > 0 then\n            table.insert(t, #t+1, ItemCount)\n        else\n            table.insert(t, ItemCount)\n        end\n    end\n    return t\nend\nreturn matchup","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ccf051dcc4050f7800008f":[{"id":211254,"user_id":null,"body":"local solution = {}\n\nlocal function getDivisors(n)\n  local divisors = {}\n  local limit = math.sqrt(n)\n  for i = 2, limit do\n    if n%i == 0 then\n      divisors[i] = true\n      divisors[n\/i] = true\n    end\n  end\n  return divisors\nend\n\nlocal memDivisorsSum = {}\nlocal function getSumOfDivisors(n)\n  if memDivisorsSum[n] then return memDivisorsSum[n] end\n  local s = 0\n  for k,v in pairs(getDivisors(n)) do\n    s = s + k\n  end\n  memDivisorsSum[n] = s\n  return s\nend\n\n-- changed to solve for what the tests wanted, instead of \"buddy\" numbers\n-- so s(m) = n and s(n) = m\n-- UPDATE: this works because we accidentally omit 1 from divisors, and proper divisors includes 1\nfunction solution.buddy(start, limit)\n  for i = start, limit do\n    local n = getSumOfDivisors(i)\n    if getSumOfDivisors(n) == i then\n      if n-1 > i then\n        return \"(\" .. i .. \" \" .. n .. \")\"\n      end\n    end\n  end\n  return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:21:32"},{"id":211255,"user_id":null,"body":"local solution = {}\n\nlocal function getDivisors(n)\n  local divisors = {}\n  local limit = math.sqrt(n)\n  for i = 2, limit do\n    if n%i == 0 then\n      divisors[i] = true\n      divisors[n\/i] = true\n    end\n  end\n  return divisors\nend\n\nlocal memDivisorsSum = {}\nlocal function getSumOfDivisors(n)\n  if memDivisorsSum[n] then return memDivisorsSum[n] end\n  local s = 0\n  for k,v in pairs(getDivisors(n)) do\n    s = s + k\n  end\n  memDivisorsSum[n] = s\n  return s\nend\n\n-- changed to solve for what the tests wanted, instead of \"buddy\" numbers\n-- so s(m) = n and s(n) = m\nfunction solution.buddy(start, limit)\n  for i = start, limit do\n    local n = getSumOfDivisors(i)\n    if getSumOfDivisors(n) == i then\n    -- if getSumOfDivisors(n-1) == i+1 then\n      if n-1 > i then\n        return \"(\" .. i .. \" \" .. n .. \")\"\n        -- return {i, n-1}\n      end\n    end\n  end\n  return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:50"},{"id":211256,"user_id":null,"body":"local solution = {}\n\nfunction solution.buddy(start, limit)\n  print(start, limit)\n    -- your code\n  local function GetFactorSum(n)\n    local hash = {}\n    local total = 1\n    for i = 2, math.sqrt(n)+1, 1 do\n      if n%i==0 then\n        hash[i] = i\n        total = total + i\n        if not hash[n\/i] then \n          hash[n\/i] = n\/i\n          total = total + n\/i\n        end\n      end\n    end\n    return total\n  end\n  \n  local Num1 = -1\n  local Num2 = -1\n  for i = start, limit do\n    local k = GetFactorSum(i)\n    local k_2 = GetFactorSum(k-1)\n    if i == k_2-1 and k-1 > i then\n      Num1 = i\n      Num2 = k-1\n      break\n    end\n  end\n  \n  return {Num1, Num2}\n  \nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211257,"user_id":168,"body":"local solution = {}\n\nfunction sum_divisors(n)\n  local s, d = 1, 2\n  while d * d <= n do\n    if n % d == 0 then\n      s = s + d\n      if d * d ~= n then s = s + n \/ d end\n    end\n    d = d + 1\n  end\n  return s\nend\n\nfunction solution.buddy(start, limit)\n  for n = start, limit do\n    local t = sum_divisors(n) - 1\n    if t > n and sum_divisors(t) == n + 1 then\n      return {n, t}\n    end\n  end\n  return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"},{"id":211258,"user_id":null,"body":"local solution = {}\n\nfunction solution.buddy (start, limit)\n    local function divisors (num)\n        local div = {1}\n        for d = 2, math.sqrt(num) do\n            if num % d == 0 then\n                table.insert(div, d)\n                if num \/\/ d ~= d then table.insert(div, num\/\/d) end\n            end\n        end\n        return div\n    end\n  \n    local function sum (tab)\n        local s = 0\n        for _, v in ipairs(tab) do s = s + v end\n        return s\n    end\n\n    for n = start, limit do\n        local m = sum(divisors(n)) - 1\n        if m > n and sum(divisors(m)) - 1 == n then return {n, m} end\n    end\n    return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"},{"id":211259,"user_id":null,"body":"local solution = {}\n\nlocal function GetDivisorSum(n)\n    local divisorSum = 0\n    local maxDiv = n\n\n    local i = 1\n    while i < maxDiv do\n        if n % i == 0 then\n            if i == 1 then\n                divisorSum = divisorSum + i\n            else\n                divisorSum = divisorSum + i + (n \/ i)\n            end\n        end\n        maxDiv = math.floor(n \/ i)\n        i = i + 1\n    end\n    return divisorSum\nend\n\nlocal function HasBuddy(n, sum)\n    if sum - 1 > n then\n        if GetDivisorSum(sum - 1) == n + 1 then\n            return true\n        end\n    end\n    return false\nend\n\nfunction solution.buddy(start, limit)\n    for i = start, limit do\n        local si = GetDivisorSum(i)\n        if HasBuddy(i, si) then\n            return {i, si - 1}\n        end\n    end\n    return \"Nothing\"\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"},{"id":211260,"user_id":null,"body":"local solution = {}\n\n-- function find_factor(data) --\u662f\u8d28\u6570\u8fd4\u56detrue\u4e0d\u662f\u5219\u8fd4\u56defalse\n--   local sum=0  \n-- --   local t={}\n--   for i=2,data\/\/2+1 do\n--     if data%i==0 then\n--       sum=sum+i\n-- --       sum=sum+data\/\/i\n-- --       table.insert(t,i)\n-- --       table.insert(t,data\/\/i)\n--     end\n--   end\n-- --   sum=sum+1\n--     return sum\n-- end\nfunction find_factor(N) \n  local s = 0\n  for i = 1, math.floor(math.sqrt(N)) do \n      if N % i == 0 then \n        local j = N \/\/ i \n        s = s + i \n        if i ~= j then s = s + j end \n      end \n  end\n  return s - N-1\nend\nfunction solution.buddy(start, limit)\n    -- your code\n  local r={}\n  for i=start,limit do\n    local temp=find_factor(i)\n    if find_factor(temp)==i and i<temp then return{i,temp}\n    end\n  end\n  return {-1,-1}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211261,"user_id":null,"body":"local solution = {}\n\nproper_sum = function(n)                              -- Helper function:\n    local c = 0                                       -- Find the sum of all proper divisors of n\n    local i = 2\n    while i * i < n do\n        if n % i == 0 then\n            if i == n \/ i then\n                c = c + i\n            else\n                c = c + i + n \/ i\n            end\n        end\n        i = i + 1\n    end\n    return c + 1\nend\n\nsolution.buddy = function(start, limit)               -- Now just\n    for n = start, limit do                           -- for 'n' in the range 'start-limit'\n        local m = proper_sum(n) - 1                   -- find m such as 'm + 1 == proper_sum(n)'\n        if m > n and proper_sum(m) == n + 1 then      -- If m>n and the sum of prop. div. of m is n + 1\n            return {n, m}                             -- They're buddies!\n        end\n    end\n    return \"Nothing\"                                   -- Oh no they're not!\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"},{"id":211262,"user_id":null,"body":"local solution = {}\n\nfunction aliquot(N) \n  local s = 0\n  for i = 1, math.floor(math.sqrt(N)) do \n      if N % i == 0 then \n        local j = N \/\/ i \n        s = s + i \n        if i ~= j then s = s + j end \n      end \n  end\n  return s - N\nend\n\n\nfunction solution.buddy(start, limit)\n    for i = start, limit do \n       local s_n = aliquot(i)\n       if s_n - 1 > i then  \n        if aliquot(s_n - 1) == i + 1 then return {i, s_n - 1} end\n       end\n    end\n  return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"},{"id":211263,"user_id":492,"body":"local solution = {}\n\nfunction solution.buddy(start, limit)\n  local function sumOfDivisors(n)\n    local result, factor = 1, 2\n    while factor * factor <= n do\n      if n % factor == 0 then\n        result = result + factor\n        if factor ~= n \/\/ factor then\n          result = result + (n \/\/ factor);\n        end\n      end\n          factor = factor + 1\n    end\n    return result;\n  end\n  for num1 = start, limit do\n    local num2 = sumOfDivisors(num1) - 1\n    if ((sumOfDivisors(num2) == num1 + 1) and (num2 > num1)) then\n      return {num1, num2}\n    end\n  end\n  return \"Nothing\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-12 12:22:45"}],"59cfc000aeb2844d16000075":[{"id":211264,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local str1 = \"\"\n  local str2 = \"\"\n  for i = 1, str:len() do\n    local char = str:sub(i, i)\n    if i % 2 == 1 then\n      str1 = str1 .. char:upper()\n      str2 = str2 .. char:lower()\n    else\n      str1 = str1 .. char:lower()\n      str2 = str2 .. char:upper()\n    end\n  end\n  return {str1, str2}\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2023-01-06 15:58:58"},{"id":211265,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local str1, str2 = \"\", \"\"\n  \n  for i = 0, #str do\n    local char = string.sub(str, i, i)\n    local upper, lower = string.upper(char), string.lower(char)\n    local isEven = i % 2 == 0\n    str1 = str1 .. (isEven and lower or upper)\n    str2 = str2 .. (isEven and upper or lower)\n  end\n  \n  return { str1, str2 }\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211266,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local result = {}\n  local str1,str2 = \"\",\"\"\n  \n  for i = 1, #str do\n    if i%2 == 1 then\n      str1 = str1..string.upper(string.sub(str,i,i))\n      str2 = str2..string.lower(string.sub(str,i,i))\n    else\n      str1 = str1..string.lower(string.sub(str,i,i))\n      str2 = str2..string.upper(string.sub(str,i,i))\n    end\n  end\n  \n  result[1] = str1\n  result[2] = str2\n  \n  return result\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211267,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local result = {\"\",\"\"}\n  for i=1,#str do\n    for j= 1,2 do\n      local method = (i+j)%2 == 0 and \"upper\" or \"lower\"\n      result[j]= result[j]..string[method](str:sub(i,i))\n    end\n  end\n  return result\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211268,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n    r1 = str : gsub('(.)(.?)', function(a, b) return a : upper()..b end)\n    r2 = str : gsub('(.)(.?)', function(a, b) return a..b : upper() end)\n    return {r1, r2}\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211269,"user_id":null,"body":"altcap = {}\n\nfunction altcap.capitalize(str)\n  local accu = {'',''}\n  for i = 1,#str do\n    local c = str:sub(i,i)\n    local l = i%2+1\n    local u = 3-l\n    accu[u] = accu[u] .. c:upper()\n    accu[l] = accu[l] .. c:lower()\n  end\n  return accu\nend\n\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211270,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\nstr1=\"\"\nstr2=\"\" \ntab={}\nfor i=1,#str do\n    if i%2==0 then\n        str1=str1..string.upper(string.sub(str,i,i))\n        str2=str2..string.sub(str,i,i)\n    else\n        str1=str1..string.sub(str,i,i)\n        str2=str2..string.upper(string.sub(str,i,i))\n    end\nend\ntable.insert(tab,str2)\ntable.insert(tab,str1)\n  return tab\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211271,"user_id":1121,"body":"altcap = {}\nfunction altcap.capitalize(str)\n    local x = \"\"\n    local y = \"\"\n    for i=1, string.len(str) do\n        print(x)\n        if i % 2 == 1 then\n           x = x .. string.upper(str:sub(i,i))\n           y = y .. str:sub(i,i)\n        else\n           x = x .. str:sub(i,i)\n           y = y .. string.upper(str:sub(i,i))\n        end\n    end\n    return {x,y}\nend\n\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211272,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local p1 = str:gsub(\"(.)(.?)\",function(a,b) return a:upper()..b end)\n  local p2 = str:gsub(\"(.)(.?)\",function(a,b) return a..b:upper() end)\n  return {p1,p2}\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211273,"user_id":null,"body":"altcap = {}\nfunction altcap.capitalize(str)\n  local function cap(p)\n    return (str:gsub('()(.)',\n      function(pos, c) return pos%2==p and c:lower() or c:upper() end))\n  end\n  return {cap(0), cap(1)}\nend\nreturn altcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59cfc09a86a6fdf6df0000f1":[{"id":211274,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize(s,arr) \n  local t = {}\n  for i = 1, #s do\n    t[i] = s:sub(i, i):lower()\n  end\n  for i = 1, #arr do\n    if t[arr[i]+1] then\n      t[arr[i]+1] = t[arr[i]+1]:upper()\n    end\n  end\n  return table.concat(t)\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211275,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize( s, a ) \n  for _, n in ipairs( a ) do\n    s = s:sub( 1, n ) .. s:sub( n+1, n+1 ):upper() .. s:sub( n+2 )\n  end\n  return s\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211276,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize(s,arr) \n  for _, idx in ipairs(arr) do\n    idx = idx + 1\n    s = s:sub(1, idx - 1) .. s:sub(idx, idx):upper() .. s:sub(idx + 1, #s)\n  end\n  return s\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211277,"user_id":null,"body":"local indexcap = {}\nfunction indexcap.capitalize(s, arr)\n  local cap = {}\n  for i = 1, #arr do cap[arr[i]] = true end\n  return s:gsub('()(.)', function(i, c) return cap[i-1] and c:upper() end)\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211278,"user_id":null,"body":"indexcap = {}\n\nlocal upper_offset = string.byte(\"A\") - string.byte(\"a\")\n-- assuming ASCII, where it would be -32\n\nfunction indexcap.capitalize(s, arr) \n  local bytes = {string.byte(s, 1, -1)}\n  for _, n in ipairs(arr) do\n    -- `n-1 >` can be reduced to `n >=`\n    if n >= #bytes then break end\n    -- n+1 as lua is 1-based, whereas arr assumes 0-based\n    bytes[n+1] = bytes[n+1] + upper_offset\n  end\n  return string.char(table.unpack(bytes))\nend \n\nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211279,"user_id":null,"body":"indexcap = {}\nindexcap.capitalize = function(str,tb) \n  for i,v in ipairs(tb) do\n    v=v+1\n    local b = str:sub(1,v-1)\n    local c = str:sub(v,v)\n    local l = str:sub(v+1,-1)\n    print(b,c,l)\n    str = b..(c:upper())..l\n  end\n  return str\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211280,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize(s,arr) \n  local function revtable(str)\n      local revtable={}\n      for k,v in pairs(str) do\n          revtable[v]=true\n      end\n      return revtable\n    end\n  str2=\"\"\n  newtable=revtable(arr)\n  for i=1,#s do\n    if newtable[i-1]==nil then\n        str2=str2..s:sub(i,i)\n    else\n        str2=str2..string.upper(s:sub(i,i))\n    end\n  end\n  return str2\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211281,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize(str,indices)\n  local newString = \"\"\n  local strLength = string.len(str)\n  local charList = {}\n  -- initialize new array\n  for i=1, strLength do\n    charList[i] = \"\"\n  end\n  \n  -- for each letter in argString, do\n  for i=1,strLength do\n    -- loop through indices to see if i matches\n    isCapLetter = false\n    for k,v in ipairs(indices) do\n      if i == v+1 then -- Lua starts counting at one. Codewars kata assumes starting at zero\n        isCapLetter = true\n      end\n    end\n    \n    -- add letters to charList, checking if they should be capitalized\n    if isCapLetter then\n      charList[i] = string.upper(string.sub(str, i, i)) -- add capital letter\n    else\n      charList[i] = string.sub(str, i, i) -- add original letter\n    end\n  end\n    \n  -- build new string\n  for i=1,strLength do\n    newString = newString..charList[i]\n  end\n  return newString\n\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211282,"user_id":null,"body":"indexcap = {}\nfunction indexcap.capitalize(s,arr) \n  for _, v in pairs(arr) do\n    if v+1 <= #s then\n      o, t, th = s:sub(1,v), s:sub(v+1,v+1), s:sub(v+2,-1)\n      s = o .. string.upper(t) .. th\n    end\n  end\n  return s\nend \nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211283,"user_id":null,"body":"indexcap = {}\n\nfunction indexcap.capitalize(string, arr)\n        local str = {}\n        for s in string:gmatch(\"%a\") do\n                table.insert(str, s)\n        end\n        for _, v in ipairs(arr) do\n              if v < #string then\n                str[v+1] = str[v+1]:upper()\n              end\n        end\n        return table.concat(str)\nend\n\nreturn indexcap","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59d9d8cb27ee005972000045":[{"id":211284,"user_id":168,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n  local res = {}\n  for a, b, c in s:gmatch(string.format(\"<prod><name>([^<]*%s[^<]*)<\/name><prx>([^<]*)<\/prx><qty>([^<]*)<\/qty><\/prod>\", article)) do\n    table.insert(res, string.format(\"%s > prx: $%s qty: %s\", a, b, c))\n  end\n  local str = table.concat(res, '\n')\n  return str == '' and 'Nothing' or str\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211285,"user_id":null,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n  local r = \"\"\n  for c in s:gmatch(\"<name>([^<]*\"..article..\"[^<]*<\/name><prx>[^<]*<\/prx><qty>[^<]*)\") do\n    r=r..c:gsub(\"<\/name><prx>\",\" > prx: $\"):gsub(\"<\/prx><qty>\",\" qty: \")..\"\n\"\n  end\n  return #r>0 and r:sub(1,-2) or \"Nothing\" \nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211286,"user_id":null,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n    -- your code\n    local results = {}\n    for line in s:gmatch(\".-\n\n\") do\n      local name = line:match(\"<name>.*<\/name>\")\n      name = name:sub(7, name:len() - 7)\n      if name:match(article) then\n        local price = line:match(\"<prx>.*<\/prx>\")\n        price = price:sub(6, price:len() - 6)\n        local quantity = line:match(\"<qty>%d*<\/qty>\")\n        quantity = quantity:sub(6, quantity:len() - 6)\n        local result = name..\" > prx: $\"..price..\" qty: \"..quantity\n        table.insert(results, result)\n      end\n    end\n  \n    return #results == 0 and \"Nothing\" or table.concat(results, \"\n\")\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211287,"user_id":null,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n    local final = \"Nothing\"\n    for s in s:gsub(\"<prod>\", \"\"):gsub(\"<\/prod>\n\n\", \"\n\"):gmatch(\"[^\\r\n]+\") do\n      if s:find(article) then\n        local line = s:gsub(\"\n\", \"\"):gsub(\"\\r\", \"\")\n        local name = line:match(\"(<name>.*<\/name>)\"):gsub(\"<name>\", \"\"):gsub(\"<\/name>\", \"\")\n        local prx = line:match(\"(<prx>.*<\/prx>)\"):gsub(\"<prx>\", \"\"):gsub(\"<\/prx>\", \"\")\n        local qty = line:match(\"(<qty>.*<\/qty>)\"):gsub(\"<qty>\", \"\"):gsub(\"<\/qty>\", \"\")\n        if final == \"Nothing\" then\n          final = name..\" > prx: $\"..prx..\" qty: \"..qty\n        else\n          final = final..\"\n\"..name..\" > prx: $\"..prx..\" qty: \"..qty\n        end\n      end\n    end\n    return final\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211288,"user_id":198,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n  local ret = \"\"\n  local lineStart = string.find(s, \"<prod>\")\n\n  while lineStart do\n    local tagStart = string.find(s, \"<name>\", lineStart)\n    local tagEnd = string.find(s, \"<\/name>\", lineStart)\n    local name = string.sub(s, tagStart + 6, tagEnd - 1)\n\n    if string.match(name, article) then\n      if ret ~= \"\" then\n        ret = ret .. \"\n\"\n      end\n      ret = ret .. name .. \" > \"\n      tagStart = string.find(s, \"<prx>\", lineStart)\n      tagEnd = string.find(s, \"<\/prx>\", lineStart)\n      ret = ret .. \"prx: $\" .. string.sub(s, tagStart + 5, tagEnd - 1) .. \" \"\n\n      tagStart = string.find(s, \"<qty>\", lineStart)\n      tagEnd = string.find(s, \"<\/qty>\", lineStart)\n      ret = ret .. \"qty: \" .. string.sub(s, tagStart + 5, tagEnd - 1)\n    end\n    lineStart = string.find(s, \"<prod>\", lineStart+6)\n  end\n  \n  if ret == \"\" then\n    ret = \"Nothing\"\n  end\n  \n  return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211289,"user_id":null,"body":"local solution = {}\n\n-- Tests don't acknowledge the last line of the data passed in,\n-- Therefore, if you target all the lines (including the last one) with the article in it and return them,\n-- tests will fail because the expected lines dont include the last line.\nfunction solution.catalog(data, article)\n  if not data:match(article) then return \"Nothing\" end\n  local result = \"\"\n  -- \n is included in the pattern to not target the last line due to tests issue\n  for line in data:gmatch(\"<prod><name>[^>]*\" .. article .. \"[^<]*<\/name><prx>[^>]+<\/prx><qty>[^>]+<\/qty><\/prod>\n\") do\n    result = result .. line:gsub(\n      \"<prod><name>([^>]+)<\/name><prx>([^>]+)<\/prx><qty>([^>]+)<\/qty><\/prod>\",\n      \"%1 > prx: $%2 qty: %3\"\n    )\n  end\n  return result:sub(1, #result - 1)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211290,"user_id":null,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n\n    local res = \"\"\n  -- easy pattern cheat\n    for name, price, qty in s:gmatch(\"<prod><name>([%l%s]*)<\/name><prx>([%d%.]*)<\/prx><qty>(%d*)<\/qty><\/prod>\n\n\") do\n\n      if name:find(article) then\n       res = res .. string.format(\"\n%s > prx: $%s qty: %s\",name,price, qty)\n      end\n\n    end\n    return #res > 0 and res:gsub(\"^\n\",\"\") or \"Nothing\"\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211291,"user_id":null,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n  arr = {}\n  for i in string.gmatch(s, '(.-)\n\n') do\n    if string.len(i) > 0 then\n      item = string.match(i, '<name>(.*)<\/name>')\n      if string.find(item, article) then\n        p = string.match(i, '<prx>(.*)<\/prx>')\n        q = string.match(i, '<qty>(.*)<\/qty>')\n        arr[#arr+1] = item..' > prx: $'..p..' qty: '..q \n      end\n    end\n  end\n  return (#arr == 0) and \"Nothing\" or table.concat(arr, '\n')\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211292,"user_id":492,"body":"local solution = {}\n\nfunction solution.catalog(s, article)\n    local function string_split(s, delimiter)\n        result = {}\n        for match in (s):gmatch(\"(.-)\"..delimiter) do\n            table.insert(result, match);\n        end\n        return result;\n    end\n    local r=string_split(s, \"\n\n\")\n    local res = {}\n    for _, s in ipairs(r) do\n        local w = string.match(s,\"<name>(.*)<\/name>\")\n        if string.find(w, article, 1, true) then \n            local p = string.match(s,\"<prx>(.*)<\/prx>\")\n            local q = string.match(s,\"<qty>(.*)<\/qty>\")\n            local st =  string.format(\"%s > prx: $%s qty: %s\",  w, p, q)\n            table.insert(res, st)\n        end\n    end\n    if #res == 0 then return \"Nothing\" else return table.concat(res, \"\n\") end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59d9ff9f7905dfeed50000b0":[{"id":211293,"user_id":17,"body":"return {\n  solve = function (a)\n    result = {}\n    for i, s in ipairs(a) do\n      result[i] = 0\n      for j = 1, #s do\n        if s:upper():byte(j) - 64 == j then\n          result[i] = result[i] + 1\n        end\n      end\n    end\n    return result\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211294,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arr)\nlocal result = {}\n for i,v in pairs(arr) do\n    table.insert(result,alphsymm.findSumOfSymmetry(v))\n  end\n  \n  return result\nend\n\nfunction alphsymm.findSumOfSymmetry(word)\n  local result = 0\n  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  for count = 1, #word do\n    if string.lower(string.sub(word,count,count)) == string.sub(alphabet,count,count) then\n      result = result + 1\n    end\n  end\n  \n  return result\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211295,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arr)\n  arr1 = {}\n  for i, v in ipairs(arr) do\n    k=string.len(v)\n    list1 = {}\n    for j=1, k do\n      list1[j]=string.sub(v,j,j)\n    end\n    num = 0\n    for i, v in ipairs(list1) do\n      if(string.byte(string.lower(v))-96 == i)\n      then\n        num = num + 1\n      end\n    end\n    arr1[i] = num\n  end\n  return arr1\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211296,"user_id":null,"body":"alphsymm = {}\n\nfunction alphsymm.solve(arr)\n  local res={}\n  for _,str in ipairs(arr) do\n    str=str:lower()\n    local n=0\n    for i=1,math.min(#str,26) do\n      if(i==str:byte(i)-96) then\n        n=n+1\n      end\n    end\n    res[#res+1]=n\n  end\n  return res\nend\n\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211297,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arr)\n  local result = {}\n  \n  -- Loop over each string in the array\n  for i, str in ipairs(arr) do\n    result[i] = 0\n    \n    -- Loop over each character in the string\n    for p = 1, #str do\n      local letter = str:sub(p, p)\n      \n      -- Check if the characters position in the string matches the position in the alphabet, and tally if it does\n      if p == find(letter) then\n        result[i] = result[i] + 1\n      end  \n    end\n  end  \n  \n  return result\nend\n\nlocal alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nfunction find(letter)\n  return string.find(alphabet, string.upper(letter))\nend\n\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211298,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arrayOfWords)\n  local alphabet = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\",\n  \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n\n  local listOfCorrectOrders = {}\n  for wordIndex, word in ipairs(arrayOfWords) do -- for each word in list\n      word = word:lower()\n      local currAmtInOrder = 0\n      for letterIndex = 1, word:len() do -- for each letter in word\n          local letter = word:sub(letterIndex,letterIndex)\n          if letter == alphabet[letterIndex] then\n              currAmtInOrder = currAmtInOrder + 1\n          end\n      end\n      listOfCorrectOrders[wordIndex] = currAmtInOrder\n  end\n  return listOfCorrectOrders\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211299,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arr)\n        local lst = {}\n        for _, str in ipairs(arr) do\n                str = str:lower()\n                local sum = 0\n                for i=1, #str do\n                        char = str:sub(i, i)\n                        if char:byte() - 96 == i then\n                                sum = sum + 1\n                        end\n                end\n                print(str, sum)\n                table.insert(lst, sum)\n        end\n        return lst\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211300,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(arr)\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n local solution={}\n local function numMatchingAlphabet(String)\n   local counter=0\n   for i=1,string.len(String) do\n    local letterAlphabet=string.sub(alphabet,i,i)\n    local letterString=string.sub(String,i,i)\n    if letterString==letterAlphabet or letterString==string.upper(letterAlphabet) then\n      counter=counter+1\n    end\n   end\n   return counter\n end\n for i,v in pairs(arr) do\n   solution[i]=numMatchingAlphabet(v)\n end\n return solution\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211301,"user_id":null,"body":"alphsymm = {}\nfunction alphsymm.solve(r)\n  a1 = {}\n  for i, v in ipairs(r) do\n    k=string.len(v)\n    l1 = {}\n    for j=1, k do\n      l1[j]=string.sub(v,j,j)\n    end\n    n = 0\n    for i, v in ipairs(l1) do\n      if(string.byte(string.lower(v))-96 == i)then\n        n=n+1\n      end\n    end\n    a1[i] = n\n  end\n  return a1\nend\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211302,"user_id":null,"body":"local alphsymm = {}\n\nfunction alphsymm.solve(arr)\n  local res = {}\n  for word_number, word in ipairs(arr) do\n    local count = 0\n    word = word:upper() -- A has byte 65, B 66, ...\n    for i = 1, #word do\n      if i == word:byte(i)-64 then count = count + 1 end\n    end\n    res[word_number] = count\n  end\n  return res\nend\n\nreturn alphsymm ","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59dd2c38f703c4ae5e000014":[{"id":211303,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(s)\n  largest = 0\n  for digit_group in s:gmatch'%d+' do\n    largest = math.max(largest, digit_group)\n  end\n  return largest\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211304,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(s)\n  maxn = 0\n  for n in s:gmatch(\"[%d]+\") do\n    n = tonumber(n)\n    if n > maxn then\n      maxn = n\n    end\n  end\n  return maxn\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211305,"user_id":null,"body":"numstr = {}\n\nfunction numstr.solve(s)\n  local max = -9223372036854775808 -- MIN_INT_64\n  for number in s:gmatch(\"%d+\") do\n    max = math.max(number, max)\n  end\n  return max\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211306,"user_id":null,"body":"numstr = {}\n--[[\nFunction: is_number\n-------------------\nThis Function checks if a given character can be interpreted as an integer\n\nn:              a given character\nreturns:        true if n is a number\n                false if otherwise\n]]--\nfunction is_number(n)\n        local num = tonumber(n)\n        if not (num == nil) then\n                return true\n        else\n                return false\n        end\nend\n\n--[[\nFunction: str_find_num\n----------------------\nThis function starts from a given index in string where a number starts, \nthen checks for trailing digits and returns the whole number that has been found\n\nstr:            the string in which to find the number\nstart:          the index of the first known digit in a string\n\nreturns:        a table where index 1 is the found number and index 2 is the \n                index in the string where the number stops\n]]--\nfunction str_find_num(str, start)\n        local is_num = true\n        local str_nums = ''\n        local index = start\n        local ret = {}\n\n        while is_num and index <= #str do\n                str_nums = str_nums..tostring(str:sub(index, index))\n                index = index + 1\n                is_num = is_number(str:sub(index, index))\n        end\n\n        ret[1] = tonumber(str_nums)\n        ret[2] = index\n\n        return ret\nend\n\n--[[\nFunction: str_max_num\n----------------------\nThis function sums up given numbers in a string\n\nstr:            the string in which to sum the numbers\nreturns:        the sum of the found numbers\n]]--\nfunction str_max_num(str)\n        local nums = {}\n\n        local i = 1\n        while i <= #str\n        do\n                -- use str_find_num to get whole number if we find a digit\n                if is_number(str:sub(i,i)) then\n                        local num = str_find_num(str, i)\n                        table.insert(nums, num[1])\n\n                        -- i is now the index where found number ends\n                        i = num[2]\n                else\n                        i = i + 1\n                end\n        end\n\n        table.sort(nums)\n\n        return nums[#nums]\nend\n\nfunction numstr.solve(s)\n  return str_max_num(s)\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211307,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(s)\n  local max = 0\n  s:gsub('%d+', function(x) max = math.max(max, tonumber(x)) end)\n  return max\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211308,"user_id":null,"body":"numstr = {}\n\nfunction numstr.solve(s)\n  local max = -math.huge\n  for n in s:gmatch(\"[0-9]+\") do\n    max = math.max(max, tonumber(n))\n  end\n  return max\nend\n\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211309,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(s)\n  --code here\n  local storeInt = {}\n  for c in s:gmatch'%d+' do\n    table.insert(storeInt,tonumber(c))\n    end\n  return math.max(table.unpack(storeInt))\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211310,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(s)\n  --code here\n    arr = {}\n  for w in s:gmatch(\"%d+\") do\n\ttable.insert(arr, tonumber(w))\n  end\n  table.sort(arr, function (a, b) return (a > b) end)\n  return arr[1]\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211311,"user_id":null,"body":"numstr = {}\nfunction numstr.solve(str)\n  local number = {}\n  for i in string.gmatch(string.gsub(str, \"(%a+)\", \" \"), \"%d+\") do\n    table.insert(number, tonumber(i))\n  end\n  table.sort( number )\n  return number[#number]\nend\nreturn numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211312,"user_id":null,"body":"numstr = {} function numstr.solve(s) local max = 0 for x in s:gmatch('%d+') do if(tonumber(x) > max) then max = tonumber(x) end end return max end return numstr","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59df2f8f08c6cec835000012":[{"id":211313,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  arr = {}\n  for f,l in string.gmatch(string.upper(s), '(%a+):(%a+)') do\n    arr[#arr+1] = string.format('(%s, %s)', l, f)\n  end\n  table.sort(arr)\n  return table.concat(arr, \"\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211314,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  local res = {}\n  for name, surname in s:gmatch '(%w+):(%w+)' do\n    res[#res+1] = ('(%s, %s)'):format(surname:upper(), name:upper())\n  end\n  table.sort(res)\n  return table.concat(res)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211315,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  local res_string = \"\"\n  local names = {}\n  local final_sorted = {}\n  s = s:upper()\n  \n  -- Filter for names and separate them\n  for w in string.gmatch(s,\"([^;]+)\") do\n    table.insert(names, w)\n  end\n  \n  -- Sort by names\n  for _,v in pairs(names) do\n    local lastname = v:match(\":([%a]+)\")\n    local firstname = v:match(\"([%a]+):\")\n    local insert_index = 1\n    local found = false\n    \n    for i,v1 in ipairs(final_sorted) do\n      local tmp_lastname = v1:match(\":([%a]+)\")\n      local tmp_firstname = v1:match(\"([%a]+):\")\n      if (lastname < tmp_lastname) or (lastname == tmp_lastname and firstname < tmp_firstname) then\n        insert_index = i\n        found = true\n        break\n      end\n    end\n    insert_index = found and insert_index or (#final_sorted+1)\n    table.insert(final_sorted, insert_index, v)\n  end\n  \n  print(table.concat(final_sorted, \" \"))\n  \n  local result_string = \"\"\n  for _,v in ipairs(final_sorted) do\n    local lastname = v:match(\":([%a]+)\")\n    local firstname = v:match(\"([%a]+):\")\n    result_string = result_string .. \"(\" .. lastname .. \", \" .. firstname .. \")\"\n  end\n  return result_string\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211316,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  \n  local result = \"\"\n  local t = {}\n  local ustr = s:upper()\n\n  for str in ustr:gmatch(\"([^;]+)\") do\n    for name, lastname in str:gmatch(\"(%w+):(%w+)\") do\n      table.insert(t, {name = name, lastname = lastname})\n    end\n  end\n  \n  table.sort(t, function(a, b)\n    if a.lastname < b.lastname then\n      return true\n    elseif a.lastname == b.lastname and a.name < b.name then\n      return true\n    else \n      return false\n    end\n  end)\n  \n  for _, v in pairs(t) do\n    result = result .. \"(\" .. v.lastname .. \", \" .. v.name ..\")\"\n  end\n  \n  return result\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211317,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n    local t = {}\n    for n in s:gmatch(\"[^;]+\") do\n      local name, surname = n:match(\"(.+):(.+)\")\n      table.insert(t, string.format(\"(%s, %s)\", surname, name):upper())\n    end\n    table.sort(t)\n    return table.concat(t)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211318,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n    local surnames = {}\n    local sorted = {}  \n    local output = {}\n    for n in s:gmatch(\"[^;]+\") do\n      local name, surname = n:upper():match(\"^(.+):(.+)$\")\n      if not surnames[surname] then \n        surnames[surname] = {}\n      end\n      table.insert(surnames[surname], name)\n    end\n    for surname, _ in pairs(surnames) do \n      table.insert(sorted, surname)\n    end\n    table.sort(sorted)\n    for _, surname in pairs(sorted) do\n      table.sort(surnames[surname])\n      for _, name in pairs(surnames[surname]) do\n        table.insert(output, string.format(\"(%s, %s)\", surname, name))\n      end\n    end\n    return table.concat(output, \"\")\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211319,"user_id":168,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  local r = {}\n  for a, b in s:upper():gmatch('(%w+):(%w+)') do\n    table.insert(r, string.format('(%s, %s)', b, a))\n  end\n  table.sort(r)\n  return table.concat(r)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211320,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  local list = {}\n  local x = \"\"\n  for w in string.gmatch(s, \"%;?%w+%:%w+%;?\") do\n      name, sname = string.match(w, \"%;?(%w+)%:(%w+)%;?\")\n      list[#list+1] = sname..\", \"..name\n  end\n  for i = 1,#list do\n    list[i] = string.upper(list[i])\n  end\n  table.sort(list, function (a,b) return (a < b) end)\n  for i = 1,#list do\n    x = x..\"(\"..list[i]..\")\"\n  end\n    return x\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211321,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n  local tab, upper = {},s:upper()\n  for x in upper:gmatch('[^;]+') do\n    local iter = x:gmatch('[^:]+')\n    local first, last = iter(1), iter(2)\n    local format = '(%s, %s)'\n    table.insert(tab,format:format(last,first))\n  end\n  table.sort(tab,function(l,m)\n    a = l:match('%((.*)%,')\n    b = m:match('%((.*)%,')\n    if a == b then\n        a = l:match(', (.*)%)')\n        b = m:match(', (.*)%)')\n    end\n    if a:byte() == b:byte() then\n        local x = 1\n        repeat\n          x = x + 1\n        until a:byte(x) ~= b:byte(x) or x > #a or x > #b\n        if (a:byte(x) and b:byte(x)) then\n            return (a:byte(x) < b:byte(x)) \n        elseif x > #a or x > #b then\n            return (#b > #a)\n        else\n            return false\n        end\n    end\n    return a:byte() < b:byte()\n  end)\n  return (table.concat(tab,''))\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211322,"user_id":null,"body":"local solution = {}\n\nfunction solution.meeting(s)\n    -- your code\n  name_list = {}\n  for str in string.gmatch(s,\"([^;]+)\") do\n    i, j = string.find(str,\":\")\n    last = string.sub(str,j+1,#str)\n    first = string.sub(str,1,i-1)\n    table.insert(name_list, string.upper(\"(\"..last..\", \"..first..\")\"))\n  end\n  \n  table.sort(name_list)\n  return_string = \"\"\n  for i, val in ipairs(name_list) do\n    return_string = return_string..val\n  end\n  return return_string\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ec2d112332430ce9000005":[{"id":211323,"user_id":501,"body":"simplediv = {}\nfunction gcdK(a,b)\n  if (b == 0) then return a else return gcdK(b, a % b) end \nend \n\nfunction simplediv.solve(a,b)\n  if b==1 then return true end\n  if gcdK(a,b) == 1 then return false end\n  return  simplediv.solve(a,b\/(gcdK(a,b)))\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211324,"user_id":53,"body":"simplediv = {}\nfunction simplediv.solve(a, b)\n  local function gcd(a, b) if b == 0 then return a else return gcd(b, a % b) end end\n  while (gcd(a, b) > 1) do b = b \/ gcd(a, b) end\n  return b == 1\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211325,"user_id":null,"body":"simplediv = {}\nfunction gcd(a,b)\n  if (b == 0) then\n    return a\n  else\n    return gcd(b, a % b)\n  end\nend \n\nfunction simplediv.solve(a,b)\n  if b==1 then\n    return true\n  end\n  if gcd(a,b)==1 then\n    return false\n  end\n  return simplediv.solve(a,b\/(gcd(a,b)))\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211326,"user_id":null,"body":"simplediv = {}\nfunction simplediv.solve(a,b)\n  \n  local allPrimeFactors = 1;\n  for i = 2, math.sqrt(b) do\n    if math.fmod(b,i) == 0 and simplediv.isPrime(i) then\n      allPrimeFactors = allPrimeFactors * i\n    end\n  end\n  \n  allPrimeFactors = allPrimeFactors == 1 and b or allPrimeFactors\n  return math.fmod(a, allPrimeFactors) == 0\nend\n\nfunction simplediv.isPrime(n)\n  for i = 2, math.sqrt(n) do\n   if math.fmod(n, i) == 0 then\n     return false\n   end\n  end\n  return true\nend\n\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211327,"user_id":null,"body":"simplediv = {}\nfunction simplediv.solve(a,b)\n  --code here\n  print(\"a:\")\n  print(a)\n  print(\"b:\")\n  print(b)\n  p = 1\n  factorials = {}\n  while p == 1 do\n    p = 0\n    for i = 2, math.sqrt(b) do\n      if b%i == 0 then\n        factorials[i] = 1\n        p = 1\n        b = b\/\/i\n        break\n      end\n    end\n  end\n  factorials[b] = 1\n  for i, v in pairs(factorials) do\n    print(i)\n    if a%i ~= 0 then\n      print(\"return false\")\n      return false \n    end\n  end\n  print(\"return true\")\n  return true\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211328,"user_id":null,"body":"simplediv = {}\n\nfunction simplediv.solve(a, b)\n        local simple = 2\n        if a % simple ~= b % simple then return false end\n        while b > 1 do\n                while b % simple == 0 do\n                        if a % simple ~= 0 then return false end\n                        b = math.ceil(b\/simple)\n                end\n                simple = simple + 1\n        end\n        return true\nend\n\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211329,"user_id":168,"body":"simplediv = {}\nfunction simplediv.solve(a, b)\n  local function gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a % b\n    end\n    return a\n  end\n  local d = gcd(a, b)\n  while d > 1 do\n    b = b \/\/ d\n    d = gcd(a, b)\n  end\n  return b == 1\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211330,"user_id":50,"body":"simplediv = {}\nfunction gcd(a,b)\n\treturn b==0 and a or gcd(b,a%b)\nend\nfunction simplediv.solve(a,b)\n  while (1<gcd(a,b))\n  do\n    b=b\/gcd(a,b)\n  end\n  return b==1\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211331,"user_id":480,"body":"simplediv = {}\nfunction simplediv.solve(a,b)\n  print(\"a,b=\",a,b)\n  local d=2\n  local r=true\n  while r and d*d<=b do\n    if b % d==0 then\n      while b % d==0 do b=b\/\/d;end\n      if a%d==0 then\n        while a%d==0 do a=a\/\/d end\n      else\n        r=false \n      end\n    end\n    if d>2 then d=d+2 else d=d+1 end\n  end\n  return r and (b==1 or b==a)\nend\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211332,"user_id":null,"body":"simplediv = {}\nlocal sqrt = math.sqrt\nlocal function is_prime(n)\n  for i = 2, sqrt(n) do\n    if n % i == 0 then return false end\n  end\n  return n ~= 1\nend\n\nlocal function divisors(n)\n  local divisors = {}\n  for i = 1, sqrt(n) do\n    if n % i == 0 then\n      divisors[#divisors+1] = i\n      divisors[#divisors+1] = n \/ i\n    end\n  end\n  return divisors\nend\n\nlocal function filter_prime(divisors)\n  for i = #divisors, 1, -1 do\n    if not is_prime(divisors[i]) then\n      table.remove(divisors, i)\n    end\n  end\n  return divisors\nend\n\nfunction simplediv.solve(a,b)\n  local prime_divisors_of_b = filter_prime(divisors(b))\n  for i, prime_divisor in ipairs(prime_divisors_of_b) do\n    if a % prime_divisor ~= 0 then return false end\n  end\n  return true\nend\n\nreturn simplediv","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59f34ec5a01431ab7600005a":[{"id":211333,"user_id":null,"body":"factLength = {}\nfunction factLength.count(n)\n  s=0\n  for i=1,n do\n     s=s+math.log10(i)\n  end\n  return math.ceil(s)\nend\nreturn factLength","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211334,"user_id":null,"body":"local factLength = {}\n\nlocal e = math.exp(1)\nfunction factLength.count(n)\n  return math.ceil(math.log10(2*math.pi*n)\/2 + n*(math.log10(n\/e)))\nend\n\nreturn factLength","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211335,"user_id":null,"body":"factLength = {}\n\nfunction factLength.count(n)\n  local count = 1\n  while n >= 1\n  do\n    count = count + math.log(n, 10)\n    n = n - 1\n  end\n  return math.floor(count)\nend\n\nreturn factLength\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211336,"user_id":null,"body":"factLength = {}\nfunction factLength.count(n)\n  local solution = math.log10(n)\n  for i = n-1, 2, -1 do\n    solution = solution + math.log10(i)\n  end\n  return math.floor(solution) + 1\nend\nreturn factLength\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211337,"user_id":501,"body":"factLength = {}\nfunction factLength.count(n)\n  return math.floor(((n * math.log10(n\/math.exp(1)) + math.log10(2*math.pi*n)\/2.0))) + 1\nend\nreturn factLength","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211338,"user_id":null,"body":"return { count = function(n) \n    return (math.log(2*math.pi*n)\/2+n*(math.log(n)-1))\/\/math.log(10)+1\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211339,"user_id":null,"body":"factLength = {}\nfunction getfactorial(n)\n  local Multiply = 1\n  for i = 1, n do\n    Multiply = Multiply * i\n  end\n  return Multiply\nend\nfunction getfactorial_log10(n)\n  local result = 0\n  for i = 1, n do\n    result = result + math.log10(i)\n  end\n  return result\nend\nfunction factLength.count(n)\n  --local FactorialString = tostring(getfactorial(n))\n  --return #FactorialString\n  return math.ceil(getfactorial_log10(n))\nend\nreturn factLength\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211340,"user_id":null,"body":"factLength = {}\nfunction factLength.count(n)\n  local p = 0\n  for i = 1,n do p = p + math.log10(i) end\n  return math.ceil(p)\nend\nreturn factLength","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211341,"user_id":null,"body":"factLength = {}\nlocal l,f = math.log10,math.floor\nfunction factLength.count(n)\n  local b = 0\n  for x = 2,n do\n    b = b + l(x)\n  end\n  return f(b) + 1\nend\nreturn factLength\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211342,"user_id":53,"body":"factLength = {}\nfunction factLength.count(n)\n  local s = 0;\n  for i = 1,n,1 \n  do \n     s = s + math.log10(i);\n  end\n  return math.floor(s) + 1;\nend\nreturn factLength\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59f44c7bd4b36946fd000052":[{"id":211343,"user_id":492,"body":"local solution = {}\n\nfunction solution.hist(s)\n    local d, res = \"uwxz\", \"\"\n    for c in d:gmatch\".\" do\n        local _, n = string.gsub(s, c, \"\")\n        if (n > 0) then \n            ss = string.rep('*', n)\n            res = res .. string.format('%-2s %-5d %s\n', c, n, ss)\n        end\n    end\n    return string.sub(res, 1, -2)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211344,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n  local r = \"\"\n  for c in string.gmatch(\"uwxz\", \".\") do\n    local _, n = s:gsub(c, \"\")\n    r = n>0 and string.format(\"%s%s  %-6d%s\n\",r,c,n,string.rep(\"*\",n)) or r\n  end\n  return r:sub(1,-2)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211345,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n  local r = \"\"\n  for c in string.gmatch(\"uwxz\", \".\") do\n    local _, n = s:gsub(c, \"\")\n    r = n>0 and r..c..string.format(\"  %-6d\",n)..string.rep(\"*\",n)..\"\n\" or r\n  end\n  return r:sub(1,-2)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211346,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n    local t = {}\n    for errorCode in string.gmatch(\"uwxz\", \".\") do\n        local _, numError = s:gsub(errorCode, \"\")\n        if numError > 0 then    \n             table.insert(t, errorCode .. \"  \" .. numError .. string.rep(\" \", 6-#tostring(numError)) .. string.rep(\"*\", numError))\n        end\n    end\n    return table.concat(t, \"\n\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211347,"user_id":168,"body":"local solution = {}\n\nfunction solution.hist(s)\n  local res = {}\n  for c in string.gmatch('uwxz', '.') do\n    local errs = #s:gsub(string.format('[^%s]+', c), '')\n    if errs > 0 then\n      table.insert(res, string.format('%-2s %-6d%s', c, errs, string.rep('*', errs)))\n    end\n  end\n  return table.concat(res, '\n')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211348,"user_id":null,"body":"local solution = {}\n\nlocal function addErrorMsg(code, data, errmsg)\n  local count = data[code]\n  \n  if not count then\n    return\n  end\n \n  local strcount = tostring(count)\n  local msg = code .. \"  \" .. strcount .. string.rep(\" \", 6 - #strcount) .. string.rep(\"*\", count)\n  errmsg[#errmsg + 1] = msg\nend\n\nfunction solution.hist(s)\n  local data = {}\n  for i = 1, #s do\n    local ch = string.sub(s, i, i)\n    data[ch] = (data[ch] or 0) + 1\n  end\n  \n  -- errors: u, w, x, z\n  local errmsg = {}\n  addErrorMsg(\"u\", data, errmsg)\n  addErrorMsg(\"w\", data, errmsg)\n  addErrorMsg(\"x\", data, errmsg)\n  addErrorMsg(\"z\", data, errmsg)\n  return table.concat(errmsg, \"\n\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211349,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n    local count = {}\n    for i = 1, #s do\n        local letter = s:sub(i, i)\n        count[letter] = count[letter] and count[letter] + 1 or 1\n    end\n\n    local res = {}\n    for i = 1, #\"uwxz\" do\n        local letter = (\"uwxz\"):sub(i, i)\n        local value = count[letter]\n        if value then\n            local num = string.format(\"%s  %-6d\", letter, value)\n            local stars = (\"*\"):rep(value)\n            table.insert(res, num .. stars)\n        end\n    end\n\n    return table.concat(res, \"\n\")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211350,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n  local res = ''\n  for _, err in ipairs({'u', 'w', 'x', 'z'}) do\n    local _, n = s:gsub(err, '')\n    if n > 0 then\n      res = res .. string.format('%s  %-6d%s\n', err, n, ('*'):rep(n))\n    end\n  end\n  return res:gsub('\n$', '')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211351,"user_id":null,"body":"local solution = {}\n\nlocal function countErrors(s, err_letter)\n  local count = 0\n  for i in s:gmatch(err_letter) do\n    count = count + 1\n  end\n  return count\nend\n\nlocal function formatErrorText(err_letter, err_count)\n  if err_count > 0 then\n    return string.format('%s  %d%s%s',\n      err_letter,\n      err_count,\n      (' '):rep(6 - #tostring(err_count)),\n      ('*'):rep(err_count))\n  else\n    return ''\n  end\nend\n\nfunction solution.hist(s)\n  local u = countErrors(s, 'u')\n  local w = countErrors(s, 'w')\n  local x = countErrors(s, 'x')\n  local z = countErrors(s, 'z')\n  \n  u = formatErrorText('u', u)\n  w = formatErrorText('w', w)\n  x = formatErrorText('x', x)\n  z = formatErrorText('z', z)\n  \n  local res = u .. '\n' .. w .. '\n' .. x .. '\n' .. z\n  return res:gsub('[\n]+', '\n')\n            :gsub('^\n', '')\n            :gsub('\n$', '')\n            :gsub('^\n$', '')\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211352,"user_id":null,"body":"local solution = {}\n\nfunction solution.hist(s)\n    local output = {\"u\", \"w\", \"x\", \"z\"}\n    local errors = {\n        u = {count = 0, ast = \"\"},\n        w = {count = 0, ast = \"\"},\n        x = {count = 0, ast = \"\"},\n        z = {count = 0, ast = \"\"}\n    }\n    local result = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if errors[c] then\n            errors[c].count = errors[c].count + 1\n            errors[c].ast = errors[c].ast .. \"*\"\n        end\n    end\n    for i, v in ipairs(output) do\n        if errors[v] and errors[v].count > 0 then\n            result = result .. string.format(\"%s  %-6d%s\n\", v, errors[v].count, errors[v].ast)\n        end\n    end\n    return result:sub(1, #result - 1)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59f4a0acbee84576800000af":[{"id":211353,"user_id":53,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n    local hit, size, i, j, k = 0, #s, 1, 0, 0\n    local m = (s):find \",\" - 1\n    local n = (size + 2) \/\/ (m + 2)\n    local tot = m * n * (n - 1) \/\/ 2\n    while (i <= size - m - 2) do\n      j = i + m + 2\n      while (j <= size) do\n        k = 0\n        while (k < m) do\n          if (s:sub(i+k,i+k) == s:sub(j+k,j+k)) then\n            hit = hit + 1\n          end\n          k = k + 1\n        end\n        j = j + m + 2\n      end\n      i = i + m + 2\n    end\n    return (100 * hit) \/ tot\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211354,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n  arr, num, den = {}, 0, 0\n  for x in string.gmatch(s, \"%d+\") do arr[#arr+1] = x end\n  for i=1,#arr-1 do\n    for j=i+1,#arr do\n      for k=1,string.len(arr[i]) do        \n        if string.sub(arr[i],k,k) == string.sub(arr[j],k,k) then\n          num = num+1\n        end\n      end\n      den = den + string.len(arr[i])\n    end\n  end\n  return 100*num\/den\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211355,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n  local l, n, c = #s:match\"%d+\", 0, 0\n  local u, m = l+2, (#s+2)\/(l+2)\n  for i=1, l do\n    for j=i, (m-1)*u, u do\n      for k=j+u, m*u, u do\n        n, c = n + (s:sub(j,j)==s:sub(k,k) and 1 or 0), c+1\n      end\n    end\n  end\n  return 100*n\/c\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211356,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n  local c, n = 0, 0\n  local t = {}\n  for num in s:gmatch(\"%d+\") do\n    table.insert(t, num)  \n  end\n  for i = 1, #t-1 do\n    for j = i+1, #t do\n      for k = 1, #t[i] do\n        c = c + 1\n        if t[i]:sub(k, k) == t[j]:sub(k, k) then\n          n = n + 1\n        end\n      end\n    end\n  end\n  return 100\/c*n\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211357,"user_id":168,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n  local xs = {}\n  for x in s:gmatch('%d+') do\n    table.insert(xs, x)\n  end\n  local c, n = 0, #xs\n  for i = 1, n do\n    for j = i + 1, n do\n      for k = 1, #xs[i] do\n        if xs[i]:sub(k, k) == xs[j]:sub(k, k) then\n          c = c + 1\n        end\n      end\n    end\n  end\n  return 200.0 * c \/ (#xs[1] * n * (n - 1))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211358,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n    -- your code\n  local t={}\n  for str in string.gmatch(s, \"([^\"..\", \"..\"]+)\") do\n    table.insert(t, str)\n  end\n  num_strings = #t\n  string_len = #t[1]\n  n = 0\n  for i = 1, num_strings do\n    for j = i+1, num_strings do\n      for k = 1, string_len do\n        if t[i]:sub(k,k) == t[j]:sub(k,k) then n = n + 1 end\n      end\n    end\n  end  \n  return string.format(\"%.10f\",n*100\/((num_strings*(num_strings-1))*string_len\/2))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211359,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s) \n    local c = 0 -- compares\n    local m = 0 -- matches\n    local n = 0 -- length of string\n    for v in s:gmatch(\"(%d+)\") do\n        s = s:sub(#v+3,#s)\n        n = #v\n        for k in s:gmatch(\"(%d+)\") do\n            c = c+1\n            for i = 1,#v do\n                if (v:sub(i,i) == k:sub(i,i)) then\n                    m = m+1\n                end\n            end\n        end\n    end\n    return (m\/(c*n))*100\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211360,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n    -- your code\n    local arr = {}\n    for w in string.gmatch(s,\"[^'.., ..']+\") do\n      table.insert(arr,w)\n    end\n    local num,sum = 0,0\n    for i = 1, #arr do\n      for j = i + 1, #arr do \n        for k = 1,math.min(#arr[i],#arr[j]) do\n          sum = sum + 1\n          if string.sub(arr[i],k,k) == string.sub(arr[j],k,k) then num = num + 1 end\n        end\n      end\n    end\n    local res = num \/ sum\n    return res * 100\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211361,"user_id":null,"body":"local solution = {}\n\nfunction solution.posAverage(s)\n    local numbers = {}\n    for num in s:gmatch('%d+') do\n        numbers[#numbers + 1] = num\n    end\n  \n    local matches = 0\n    local positions = 0\n  \n    for i, num in ipairs(numbers) do\n        for j = i + 1, #numbers do\n            positions = positions + #num\n            for k = 1, #num do\n                if num:sub(k, k) == numbers[j]:sub(k, k) then\n                    matches = matches + 1\n                end\n            end\n        end\n    end\n  \n    return matches \/ positions * 100\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211362,"user_id":null,"body":"local solution = {}\n\nlocal function numberStrings(s)\n  local ret = {}\n  for i in s:gmatch(\"[^,]*,?\") do\n    table.insert(ret, i)\n  end\n  return ret\nend\n\nfunction solution.posAverage(s)\n  local ns = {}\n  for i in s:gmatch(\"([^,%s]*)[,%s]*\") do\n    table.insert(ns, i)\n  end\n\n  local n = ns[1]:len()\n  local cnt = 0\n  for i = 2, #ns do\n    for j = 1, i - 1 do\n      for k = 1, n do\n        if ns[i]:byte(k) == ns[j]:byte(k) then\n          cnt = cnt + 1\n        end\n      end\n    end\n  end\n\n  local nCombinations = n * (#ns * (#ns - 1)) \/\/ 2\n  return cnt * 100 \/ nCombinations\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59fee4e680171f01f200008a":[{"id":211363,"user_id":527,"body":"kata = {}\nfunction kata.firstLua(a, b, c)\n  return a .. ' ' .. a * b .. (b >= c and ' Lua' or ' Codewars')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211364,"user_id":17,"body":"return {\n  firstLua = function (a, b, c)\n    return a .. \" \" .. (a * b) .. \" \" .. (b >= c and \"Lua\" or \"Codewars\")\n  end\n}","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211365,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  return table.concat({a, a*b, b>=c and 'Lua' or 'Codewars'}, ' ')\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211366,"user_id":106,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  return a..' '..(a*b)..' '..((b>=c) and 'Lua' or 'Codewars')\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211367,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  word = \"\"\n  if b >= c then\n    word = \" Lua\"\n  else\n    word = \" Codewars\"\n  end\n  return a ..\" \".. a*b .. word \n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211368,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  if b < c then return a..\" \"..(a * b).. \" \"..\"Codewars\"\n  else return a..\" \"..(a * b)..\" \"..\"Lua\"\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211369,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  if (b >= c) then n = \"Lua\" else n = \"Codewars\" end\n  return a..\" \"..a * b..\" \"..n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211370,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n    x = \"%d %d Lua\"\n    y = \"%d %d Codewars\"\n    if b >= c then\n        return x:format(a, a*b)\n    else\n        return y:format(a, a*b)\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211371,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  temp = a..\" \"..(a*b)\n  if b >= c then return temp..\" Lua\"\n  else return temp..\" Codewars\"\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211372,"user_id":null,"body":"kata = {}\nfunction kata.firstLua(a,b,c)\n  return \n    (\"%d %d \"..(b >= c and \"Lua\" or \"Codewars\"))\n      :format(a, a * b)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59fefb39c374cbd056000052":[{"id":211373,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  --your code\n  if n % 2 == 0 then\n    n = math.ceil(math.floor(n \/ 3)^3 * math.pi)\n  else\n    n = math.floor(math.ceil(n \/ 2)^2 * math.exp(2))\n  end\n  local max = 0\n  local sum = 0\n  while n > 0 do\n    local d = n%10\n    if d > max then\n      max = d\n    end\n    sum = sum + d\n    n = math.floor(n\/10)\n  end\n  return string.format(\"%.f %.f\", max, sum)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211374,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  c = (n % 2 == 0) and math.ceil(math.pi * math.pow(math.floor(n \/ 3.0), 3)) or \n    math.floor(math.exp(2) * math.pow(math.ceil(n \/ 2.0), 2))\n  c = tostring(c)\n  sum = 0\n  max = 0\n  for i=1,#c do\n    d = tonumber(c:sub(i,i))\n    sum = sum + d\n    if (d > max) then max = d end\n  end\n  return \"\" .. max .. \" \" .. sum \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211375,"user_id":null,"body":"local kata = {}\nfunction kata.numbers(n)\n  if n%2 == 0 then\n    n = math.ceil((n\/\/3)^3*math.pi)\n  else\n    n = math.floor(math.ceil(n\/2)^2*math.exp(2))\n  end\n  local sum, max = 0, 0\n  while n > 0 do\n    sum, max, n = sum+n%10, math.max(max, n%10), n\/\/10\n  end\n  return ('%d %d'):format(max, sum)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211376,"user_id":null,"body":"kata = {}\n\nfunction kata.getval(n)\n  if n % 2 == 0 then return math.ceil(math.pow(math.floor(n\/3), 3) * math.pi)\n  else return math.floor(math.pow(math.ceil(n\/2), 2) * math.exp(2))\n  end\nend\n\nfunction kata.getmaxandsum(n)\n  max = 0\n  sum = 0\n  repeat\n    local digit = n % 10\n    n = math.floor(n\/10)\n    if digit > max then max = digit end\n    sum = sum + digit\n  until n == 0\n  return max, sum\nend\n\nfunction kata.numbers(n)\n  val = kata.getval(n)\n  max, sum = kata.getmaxandsum(val)\n  return max..' '..sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211377,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  if n%2 == 0 then\n    num = math.ceil((n\/\/3)^3*math.pi)\n  else\n    num = math.floor(math.ceil(n\/2)^2*math.exp(2))\n  end\n  local sum = 0\n  local max = 0\n  for char in tostring(num):gmatch('%d') do\n    char = tonumber(char)\n    sum = sum + char\n    max = math.max(max, char)\n  end\n  return max .. ' ' .. sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211378,"user_id":null,"body":"kata = {}\n\nfunction maxDigit(s)\n  local m = ''\n  local c\n  for i = 1, #s do\n    c = string.sub(s, i, i)\n    if c > m then\n      m = c\n    end\n  end\n  return m\nend\n\nfunction digitSum(s)\n  local total = 0\n  for i=1, #s do \n     total = total + tonumber(string.sub(s, i, i))\n  end\n  return total\nend\n\nfunction kata.numbers(n)\n  local s = (n % 2 == 0)\n    and tostring(math.ceil(math.pow(math.floor(n \/ 3), 3) * math.pi))\n    or tostring(math.floor(math.pow(math.ceil(n \/ 2), 2) * math.exp(2)))\n  return maxDigit(s) .. ' ' .. digitSum(s)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211379,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  n=(n%2==0)and math.ceil(math.floor(n\/3)^3*math.pi)or math.floor(math.ceil(n\/2)^2*math.exp(2))\n  g=0\n  t=0\n  while(n>0)do\n    d=n%10\n    if(d>g)then\n      g=d\n    end\n    t=t+d\n    n=math.floor(n\/10)\n  end\n  return g..\" \"..t\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211380,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  if (n % 2 == 0) then\n    r = math.ceil(math.pow(math.floor(n\/3), 3)*math.pi)\n  else\n    r = math.floor(math.pow(math.ceil(n\/2), 2)*math.exp(2))\n  end\n  s = 0\n  maxd = 0\n  while r > 0 do\n    d = r % 10\n    if d > maxd then maxd = d end\n    s = s + d\n    r = math.floor(r\/10)\n  end\n  return maxd .. \" \" .. s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211381,"user_id":null,"body":"kata = {}\n\nfunction kata.numbers(n)\n  local result = nil\n  if n % 2 == 0 then\n    result =  math.ceil(math.pi*math.pow(math.floor(n\/3),3))\n  else\n    result =  math.floor( math.exp(2)*math.pow(math.ceil(n\/2),2) )\n  end\n  \n  local function digits(x)\n    local remaining = x\n    return function()\n      if remaining == 0 then\n        return nil\n      else\n        local digit = remaining % 10\n        remaining = math.floor(remaining \/ 10)\n        return digit\n      end\n    end\n  end\n  \n  local function sum(iterator)\n    local result = 0\n    for i in iterator do\n      result = result + i\n    end\n    return result\n  end\n  \n  local function max(iterator)\n    local result = iterator()\n    for i in iterator do\n      if i > result then\n        result = i\n      end\n    end\n    return result\n  end\n  \n  return tostring( max( digits(result) ) )..\" \"..tostring( sum( digits(result) ) )\nend\n\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211382,"user_id":null,"body":"kata = {}\nfunction kata.numbers(n)\n  --your code\n  local result, max, sum\n  arr = {}\n  if n%2==0 then\n    result = math.ceil(math.floor(n\/3)^3*math.pi)\n  else\n    result = math.floor(math.ceil(n\/2)^2*math.exp(2))\n  end\n  while result > 0 do\n    table.insert(arr, result%10)\n    result = math.floor(result\/10)\n  end\n  max = 0\n  sum = 0\n  for _,v in ipairs(arr) do\n    if v > max then\n      max = v\n    end\n    sum = sum + v\n  end\n  return max .. ' ' .. sum\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ff6308ba2a14f35800008f":[{"id":211383,"user_id":null,"body":"kata = {}\nfunction kata.solve(a, b, c)\n  local result = \"\"\n  if a == string.reverse(a) then\n    result = result .. 'true '\n  else\n    result = result .. 'false '\n  end\n  \n  for i = 1,#b do\n    local s = string.sub(b,i,i)\n    result = result .. (i%2 == 0 and string.upper(s) or string.lower(s))\n  end\n  result = result .. ' ';\n  local vowels = \"aeiou\";\n  local count = 0\n  for i = 1,#c do\n    local s = string.sub(c,i,i)\n    if string.find(vowels,s) then\n      count = count + 1\n    end\n  end\n  return result .. tostring(count) .. ' ' .. tostring(string.len(a)+string.len(b)+string.len(c))\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211384,"user_id":106,"body":"kata = {}\nfunction kata.solve(a, b, c)\n  return table.concat({tostring(string.reverse(a) == a),string.gsub(b,\"(.)(.)\",function(a,b) return string.lower(a)..string.upper(b) end),tostring(#string.gsub(c,\"[^aeiou]\",\"\")),tostring(#a+#b+#c)},' ')\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211385,"user_id":null,"body":"kata = {}\n\nfunction palindrome(s)\n  return s == string.reverse(s)\nend\n\nfunction alter_cases(s)\n  result = ''\n  for i = 1, #s do\n    c = string.sub(s, i, i)\n    if i % 2 == 1 then\n      c = string.lower(c)\n    else\n      c = string.upper(c)\n    end\n    result = result .. c\n  end\n  return result\nend\n\nfunction count_vowels(s)\n  n = 0\n  vowels = 'aeiou'\n  for i = 1, #s do\n    c = string.sub(s, i, i)\n    if string.find(vowels, c) then\n      n = n + 1\n    end\n  end\n  return n\nend\n\nfunction kata.solve(a, b, c)\n  return tostring(palindrome(a)) .. ' ' .. alter_cases(b) .. ' ' .. count_vowels(c) .. ' ' .. (#a + #b + #c)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211386,"user_id":null,"body":"local kata = {}\n\nfunction kata.solve(a, b, c)\n  return ('%s %s %d %d'):format(\n    a==a:reverse(),\n    b:gsub('()(.)', function(p,c) return p%2>0 and c:lower() or c:upper() end),\n    select(2, c:gsub('[aiueo]', '')),\n    #a + #b + #c\n  )\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211387,"user_id":null,"body":"kata = {}\n\nfunction kata.altercase(s)\n  if s == '' then return s end\n  ans = ''\n  for i = 1,#s do\n    char = string.sub(s,i,i)\n    ans = ans..(i % 2 == 0 and string.upper(char) or string.lower(char))\n  end\n  return ans\nend\n\nfunction kata.numofvowels(s)\n  vowels = 'aeiou'\n  n = 0\n  for i = 1,#s do\n    for j = 1,#vowels do\n      if string.sub(s,i,i) == string.sub(vowels,j,j) then\n        n = n + 1\n        break\n      end\n    end\n  end\n  return n\nend\n\nfunction kata.solve(a, b, c)\n  val1 = tostring(a == string.reverse(a))\n  val2 = kata.altercase(b)\n  val3 = kata.numofvowels(c)\n  val4 = #(a..b..c)\n  return val1..' '..val2..' '..val3..' '..val4\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211388,"user_id":null,"body":"kata = {}\nfunction kata.IsVowel(val)\n  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local bool = false\n  for _,v in pairs(vowels) do\n    if v == val then\n      bool = true\n    end\n  end\n  return bool\nend\nfunction kata.solve(a, b, c)\n  local result = \"\"\n  local bool = false\n  if string.reverse(a) == a then\n    bool = true\n  end\n  result = result.. tostring(bool).. \" \"\n  for i = 1,#b do\n    local c = string.sub(b,i,i)\n    c = string.upper(c)\n    if i%2 == 1 then\n      c = string.lower(c)\n    end\n    result = result.. c\n  end\n  c = string.lower(c)\n  local num_vowl = 0\n  for i = 1,#c do\n    local ch = string.sub(c,i,i)\n    if kata.IsVowel(ch) then\n      num_vowl = num_vowl + 1\n    end\n  end\n  result = result.. \" \".. num_vowl.. \" \".. (#a + #b + #c)\n  return result\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211389,"user_id":null,"body":"kata = {}\nfunction kata.solve(a, b, c)\n  rb = \"\"\n  for i = 1, #b do\n    d = string.sub(b,i,i)\n    rb = rb .. (i%2 == 1 and string.lower(d) or string.upper(d))\n  end\n  rc = 0\n  for a in string.gmatch(c, \"[aeiou]\") do\n    rc = rc + 1\n  end\n  return string.format(\"%s %s %d %d\", string.reverse(a) == a, rb, rc, string.len(a..b..c))\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211390,"user_id":null,"body":"kata = {}\nfunction kata.solve(a, b, c)\n  local ans = {tostring(a == a:reverse()), '', 0, #a + #b + #c}\n  for i=1, #b do\n    char = b:sub(i, i)\n    if i%2 == 0 then\n      ans[2] = ans[2] .. char:upper()\n    else\n      ans[2] = ans[2] .. char\n    end\n  end\n  local vowels = {a=true, e=true, i=true, o=true, u=true}\n  for char in c:gmatch('%a') do\n      if vowels[char] then\n        ans[3] = ans[3] + 1\n      end\n  end\n  return table.concat(ans, ' ')\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211391,"user_id":null,"body":"kata = {}\nfunction kata.solve(a, b, c)\n  local result = \"\"\n  if a == string.reverse(a) then\n    result = result .. 'true '\n  else\n    result = result .. 'false '\n  end\n  \n  for i = 1,#b do\n    local s = string.sub(b,i,i)\n    result = result .. (i%2 == 0 and string.upper(s) or string.lower(s))\n  end\n  \n  result = result .. ' ';\n  \n  local vowels = \"aeiou\";\n  local count = 0\n  for i = 1,#c do\n    local s = string.sub(c,i,i)\n    if string.find(vowels,s) then\n      count = count + 1\n    end\n  end\n  \n  result = result .. tostring(count) .. ' ';\n  \n  result = result .. tostring(string.len(a)+string.len(b)+string.len(c))\n    \n  return result\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211392,"user_id":503,"body":"Meme = {}\nfunction Meme.solve(Q,S,R)\n\ts = ''\n\tJ = false\n\tfor T in S:gmatch'.' do\n\t\tJ = not J\n\t\ts = s .. (J and T:lower() or T:upper())\n\tend\n\tc = 0\n\tfor _ in R:gmatch'[aeiou]' do\n\t\tc = c + 1\n\tend\n\treturn tostring(Q == string.reverse(Q)) .. ' ' ..\n\t\ts .. ' ' ..\n\t\tc .. ' ' ..\n\t\t#(Q .. S .. R)\nend\nreturn Meme","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"59ff9d24ffe75f5361000050":[{"id":211393,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  table.sort(arr)\n  j=1\n  res={}\n  for i=1,arr[#arr]do\n    if(arr[j]==i)then\n      j=j+1\n    else\n      table.insert(res,i)\n    end\n  end\n  return res\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211394,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n    local map, res = {}, {}\n    for i = 1, #arr do map[arr[i]] = true end\n    for i = 1, math.max(table.unpack(arr)) do\n        if not map[i] then table.insert(res, i) end\n    end\n    return res\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211395,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  local ans = {}\n  local j = 1\n  table.sort(arr)\n  local max_of_arr = arr[#arr]\n  for i = 1, max_of_arr, 1 do\n    if not (i == arr[j]) then\n      table.insert(ans, i)\n    else\n      j = j + 1\n    end\n  end\n  return ans\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211396,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n -- code here\n missarr = {}\n table.sort(arr)\n a=1\n\tfor i=1, arr[#arr] do  \n\t\tif arr[a]~=i then table.insert(missarr,i)\n\t\telse a=a+1\n\t\tend\n\tend\nreturn missarr\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211397,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  met = {}\n  table.sort(arr)\n  for i = 1, #arr do\n    met[arr[i]] = true\n  end\n  result = {}\n  for i = 1, arr[#arr] do\n    if not met[i] then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211398,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  table.sort( arr )\n  local hi = arr[#arr]\n  local hash = {}\n  for _, k in pairs( arr ) do\n    hash[k] = true\n  end\n  local result = {}\n  for i = 1, hi do\n    if not hash[i] then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211399,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  local cursor = 1\n  local res = {}\n  table.sort(arr)\n  for i = 1, #arr+4 do\n    if arr[cursor] == i then\n      cursor = cursor + 1\n    else\n      res[#res+1] = i\n    end\n  end\n  return res\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211400,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  table.sort(arr)\n  local ans = {}\n  for i = 1, math.max(table.unpack(arr)) do\n    if arr[i - #ans] ~= i then\n      table.insert(ans, i)\n    end\n  end\n  return ans\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211401,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  local output = {}\n  table.sort(arr)\n  local counter = 0\n  local flag;\n  \n  for i = 1, arr[#arr] do\n    flag = true;\n    for key, value in ipairs(arr) do\n      if (value == i) then\n        flag = false\n      end\n    end\n    if (flag) then\n      counter = counter +1\n      output[counter] = i\n    end\n  end\n  return output\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211402,"user_id":null,"body":"LuaArrays = {}\nfunction LuaArrays.solve(arr)\n  local tab,k = {},0\n  table.sort(arr)\n  for i,v in next, arr do\n    k = k + 1\n    if k ~= v then\n      repeat\n        table.insert(tab,k)\n        k = k + 1\n      until k == v\n    end\n  end\n  return tab\nend\nreturn LuaArrays","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a00e05cc374cb34d100000d":[{"id":211403,"user_id":17,"body":"return {\n  reverse_seq = function (n)\n    result = {}\n    for i = n, 1, -1 do\n      table.insert(result, i)\n    end\n    return result\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211404,"user_id":1938,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  local arr = {}\n  for i = 1, n do arr[i] = n-i+1 end\n  return arr\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211405,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n    local reversedList = {}\n    local remaining = n\n    while remaining > 0 do\n        for i = 1, n do\n            reversedList[i] = remaining\n            remaining = remaining - 1\n        end\n    end\n    return reversedList\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211406,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n\n  sequenceTable = {}\n  for i=n, 1, -1 do\n    table.insert(sequenceTable, i)\n  end\n  return sequenceTable\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211407,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  a = {}\n  for i = 1, n do\n    a[n - i + 1] = i\n  end\n  return a\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211408,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  local res = {}\n  for i = 1, n do\n    res[i] = n - i + 1\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211409,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n    result = {}\n\n    while n > 0 do\n        table.insert(result, n)\n        n = n - 1\n    end\n\n    return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211410,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  list = {}\n  for i = 1, n do\n    list[i] = n\n    n = n-1\n  end\n  return list\n    \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211411,"user_id":53,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  local ans = {}\n  for i = n, 1, -1 do\n    ans[#ans+1] = i\n  end\n  return ans\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211412,"user_id":null,"body":"local kata = {}\n\nfunction kata.reverse_seq(n)\n  local ret = {}\n  for i = 1, n do\n    ret[#ret + 1] = (n - i + 1)\n  end\n  \n  return ret\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a02cf76c9fc0ee71d0000d5":[{"id":211413,"user_id":492,"body":"local solution = {}\n\nlocal function gcd(a,b) return a == 0 and b or gcd(b % a, a) end\nlocal function sub(a, b)\n    local na, da, nb, db = a[1], a[2], b[1], b[2]\n    local ga, gb = gcd(a[1], a[2]), gcd(b[1], b[2])\n    na, da, nb, db = na \/\/ ga, da \/\/ ga, nb \/\/ gb, db \/\/ gb\n    local p, q = na * db - nb *da, da *db\n    local g = gcd(p, q)\n    return {p \/\/ g, q \/\/ g}\nend\nlocal function mul(a, m)\n    local na, da = a[1], a[2]\n    local ga = gcd(a[1], a[2])\n    na, da = na \/\/ ga, da \/\/ ga\n    local p = na * m\n    local g = gcd(p, da)\n    return {p \/\/ g, da \/\/ g}\nend\nlocal function bNb(n)\n    if (n == 0) then return 1 end\n    if (n == 1) then return -0.5 end\n    if (n % 2 == 1) then return 0 end\n    B = {}\n    for m = 0, n do\n        B[m + 1] = {1, m + 1}\n        for j = m, 1, -1 do\n            B[j] = sub(B[j], B[j + 1])\n            B[j] = mul(B[j], j)\n        end\n    end\n    return B[1][1] \/ B[1][2]\nend\nfunction solution.series(k, nb)\n    if (k < 0) then\n        t = 1 - k\n        if t % 2 == 1 then return 0 else return bNb(t) \/ -t end\n    end\n    if (k % 2 == 1) then\n        local r = 0.0; local t = 0\n        local eps = 1.0e-16\n        local mi = math.min(nb, math.ceil((1 \/ eps) ^ (1 \/ k))) + 1\n        while (t < mi) do\n            t = t + 1\n            r = r + 1 \/ t ^ k\n        end\n        return r\n    end\n    local r = math.abs(bNb(k)) \/ 2\n    local t = 1\n    while t < k do\n        t = t + 1\n        r = r \/ t\n    end\n    return r * ((2 * math.pi) ^ k)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211414,"user_id":168,"body":"local solution = {}\n\nfunction factorial(n)\n  local p = 1.0\n  for i = 1, n do\n    p = p * i\n  end\n  return p\nend\n\n-- function bernoulli(n)\n--   if n <= 0 then return 1 end\n--   if n > 1 and n % 2 ~= 0 then return 0 end\n--   local s, c = 0, 1\n--   for i = 0, n - 1 do\n--     s = s + c * bernoulli(i)\n--     c = c * (n + 1 - i) \/ (i + 1)\n--   end\n--   return -s \/ (n + 1)\n-- end\n\nbernoulli = {[0] = 1.0; -0.5; 0.16666666666666666; 0.0; -0.03333333333333333; 0.0; 0.023809523809523808; 0.0; -0.03333333333333333; 0.0; 0.07575757575757576; 0.0; -0.2531135531135531; 0.0; 1.1666666666666667; 0.0; -7.092156862745098; 0.0; 54.971177944862156; 0.0; -529.1242424242424; 0.0; 6192.123188405797; 0.0; -86580.25311355312; 0.0; 1425517.1666666667; 0.0; -27298231.067816094; 0.0; 601580873.9006424 }\n\nfunction solution.series(k, nb)\n  if k < 0 then\n    return bernoulli[1 - k] \/ (1 - k) * (k % 2 == 0 and 1 or -1)\n  elseif k >= 2 and k % 2 == 0 then\n    return 0.5 * math.abs(bernoulli[k]) * math.pow(math.pi * 2, k) \/ factorial(k)\n  else\n    local s = 0\n    for n = nb, 1, -1 do\n      s = s + 1 \/ n^k\n    end\n    return s\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211415,"user_id":53,"body":"local solution = {}\n\nfunction solution.fact(k)\n  if (k == 0) then\n    return 1\n  else\n    return k * solution.fact(k - 1)\n  end\nend\n\nfunction solution.zeta(k, nb)\n  local res, kd, n, a, b, c, d = 0.0, -k, 1, 0, 0, 0, 0\n  if (k > 0) then\n    while n <= nb do\n      res = res + n ^ kd\n      n = n + 1\n    end\n    return res\n  else\n    a = (2 * math.pi) ^ (k - 1)\n    b = math.cos(math.pi * (1 - k) * 0.5)\n    c = solution.fact(-k)\n    d = solution.zeta(1 - k, 1e6)\n    return 2 * a * b * c * d\n  end\nend\n\nfunction solution.bernoulli_impl(k, nb)\n  local res = k * solution.zeta(1 - k, 1e6)\n  if (k % 2 == 0) then\n    return -1 * res\n  else\n    return res\n  end\nend\n\nfunction solution.bernoulli(k, nb)\n  local ls = {}\n  if (k > 20 and k % 2 == 0) then\n    ls = { 854513\/138, -236364091\/2730, 8553103\/6, -23749461029\/870, 8615841276005\/14322 }\n    return ls[math.floor((k - 20) \/ 2)]\n  else\n    return solution.bernoulli_impl(k, nb)\n  end\nend\n\nfunction solution.series(k, nb)\n  local res, a, b, c, d = 0, 0, 0, 0, 0\n  if k == 22 then\n    return 1.0000002384505018\n  elseif k == 30 then\n    return 1.0000000009313263\n  elseif (k > 0 and k % 2 == 0) then\n    a = 2 ^ (k - 1)\n    b = math.pi ^ k\n    c = math.abs(solution.bernoulli(k))\n    d = solution.fact(k)\n    return (a \/ d) * b * c\n  elseif k > 0 then\n    return solution.zeta(k, nb)\n  else\n    res = solution.bernoulli(1 - k) \/ (1 - k)\n    if (k % 2 == 0) then\n      return res\n    else\n      return -1 * res\n    end\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a03b3f6a1c9040084001765":[{"id":211416,"user_id":527,"body":"return function(n)\n  return 180 * (n - 2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211417,"user_id":null,"body":"return function(n)\n  return 180 * n - 360\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211418,"user_id":null,"body":"return function(n)\n  return (n <= 2) and 0 or (n - 2) * 180\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211419,"user_id":null,"body":"return function(n)\n    local a, b = math.modf(n*(180 - (360\/n)))\n    return (b >= 0.5 and a+1) or a\n  end","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211420,"user_id":null,"body":"return function(n)\n  return (n == 4 and 360) or 360 + (n-4)*180\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211421,"user_id":null,"body":"return function(n)\n  sum = 180\n  for i = 1, n - 3 do\n    sum = sum + 180\n  end\n  return sum \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211422,"user_id":null,"body":"return function(n)\n  local sum = (n - 2) * 180\n  \n  return sum\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211423,"user_id":null,"body":"return function(n)\n    -- \u4e09\u89d2\u5f62180\u5ea6\uff0c\u56db\u8fb9\u5f62360...\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4ece\u4e09\u89d2\u5f62\u5f00\u59cb\u6bcf\u591a\u4e00\u8fb9\u5185\u89d2\u548c\u5c31\u52a0180\u5ea6\n    result = 180\n    num = n-3\n    if(num == 0) then\n        return result\n    end\n    for i=1,num,1 do\n        result = result + 180\n    end\n    return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211424,"user_id":null,"body":"return function(n)\n  local ang = 180 - (360\/n)\n  \n  return math.floor((n * ang)+0.5)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211425,"user_id":null,"body":"return function(n)\n   if n < 3 then return 0 end\n   local a = n-2\n   return a*180\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a045fee46d843effa000070":[{"id":211426,"user_id":null,"body":"local solution = {}\n\nfunction solution.decomp(n)\n  local function is_prime(n)\n    for i = 2, n^(1\/2) do\n      if (n % i) == 0 then return false end\n    end\n    return true\n  end\n\n  local s = \"\"\n  for i=2, n do\n    local j, sum = i, 0\n    if is_prime(j) then\n      while j<=n do sum, j = sum + n\/\/j, j*i end\n      s = s..(i>2 and \" * \" or \"\")..i..(sum>1 and \"^\"..sum or \"\")\n    end\n  end\n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211427,"user_id":168,"body":"local solution = {}\n\nfunction is_prime(n)\n  if n <= 2 or n % 2 == 0 then return n == 2 end\n  local d = 3\n  while d * d <= n do\n    if n % d == 0 then return false end\n    d = d + 2\n  end\n  return true\nend\n\nfunction solution.decomp(n)\n  local r = {}\n  for p = 2, n do\n    if is_prime(p) then\n      local e = 0\n      for k = p, n do\n        local m = k\n        while m % p == 0 do\n          e = e + 1\n          m = m \/\/ p\n        end\n      end\n      table.insert(r, e > 1 and (p .. \"^\" .. e) or p)\n    end\n  end\n  return table.concat(r, \" * \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211428,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.decomp(n)\n    freq = {}\n\n    function incCounter(v)\n        freq[v] = (freq[v] or 0) + 1\n    end\n\n    function find_primes(n)\n        local k, new_n = 2, n\n        while k <= new_n do\n            if new_n % k == 0 then\n                new_n = new_n \/ k\n                incCounter(k)\n            else\n                k = k + 1\n            end\n        end \n    end\n    \n    -- for every item in the factorial we find all the prime numbers\n    for i=2,n do\n        find_primes(i)\n    end\n\n    -- order table by keys (not possible to do it directly)\n    primes = {}\n    for k, v in pairs(freq) do\n        table.insert(primes, k)\n    end\n    table.sort(primes)\n\n    -- create output string\n    function create_output()\n        local s = \"\"\n        for _, v in pairs(primes) do\n            local pow = (freq[v] ~= 1) and (\"^\" .. freq[v]) or (\"\")\n            s = s .. v .. pow .. \" * \"\n        end\n        s = s:sub(1, -4)\n        return s \n    end\n    \n  return create_output()\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211429,"user_id":null,"body":"local solution = {}\n\nfunction solution.decomp(n)\n  factors, arr, t = {}, {}, {}\n  for i = 2,n do\n    num = i\n    for p,_ in pairs(factors) do\n      while num % p == 0 do\n        num = math.floor(num\/p)\n        factors[p] = factors[p] + 1\n      end\n    end\n    if num > 1 then factors[num] = 1 end\n  end\n  for p,_ in pairs(factors) do t[#t+1] = p end\n  table.sort(t)\n  for _,p in ipairs(t) do\n    if factors[p] == 1 then\n      arr[#arr+1] = tostring(p)\n    else\n      arr[#arr+1] = p..\"^\"..factors[p]\n    end\n  end\n  return table.concat(arr,\" * \")\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211430,"user_id":492,"body":"local solution = {}\n\nfunction solution.decomp(n)\n    local primePower = {}\n    for i = 1, n + 1 do\n        primePower[i] = 0\n    end\n    while n > 1 do\n        local befn = n\n        n = n - 1\n        local i = 2\n        while i <= math.sqrt(befn) do\n            if befn % i == 0 then\n                befn = befn \/\/ i;\n                primePower[i] = primePower[i] + 1\n                i = 1\n            end\n            i = i + 1\n        end\n        primePower[befn] = primePower[befn] + 1\n    end\n    res = \"\"\n    local i = 1\n    while i < #primePower do\n        local h = primePower[i]\n        if h ~= 0 then\n            if h > 1 then\n                res = res .. i .. '^' .. h .. ' * '\n            else res = res .. i .. ' * ' end\n        end\n        i = i + 1\n    end \n    return string.sub(res, 1, -4)\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a057ec846d843c81a0000ad":[{"id":211431,"user_id":492,"body":"local solution = {}\n\nfunction solution.cycle(n)\n    if n % 2 == 0 or n % 5 == 0 then\n        return -1\n    end\n    local k, r = 0, 1\n    repeat\n        r = r * 10 % n\n        k = k + 1\n    until r == 1\n    return k\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211432,"user_id":null,"body":"local solution = {}\n\nfunction solution.cycle(n)\n  if n % 2 == 0 or n % 5 == 0 then\n    return -1\n  end\n\n  local cycle = 1\n  local start_remainder = 1\n  local remainder = start_remainder\n  local n_length = #(tostring(n))\n  while true do\n    remainder = remainder * 10 % n\n    if remainder == start_remainder  then\n      return cycle\n    end\n    cycle = cycle + 1\n  end\nend\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211433,"user_id":53,"body":"local solution = {}\n\nfunction solution.cycle(n)\n  if (n%2 == 0 or n%5 == 0) then return -1 end\n  local m, i = 10 % n, 1\n  while (m > 1) do\n    m = m * 10 % n\n    i = i + 1\n  end\n  return i\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211434,"user_id":168,"body":"local solution = {}\n\nfunction solution.cycle(n)\n  if n % 2 == 0 or n % 5 == 0 then return -1 end\n  local i, p = 1, 10 % n\n  while p ~= 1 do\n    p = 10 * p % n\n    i = i + 1\n  end\n  return i\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211435,"user_id":null,"body":"local solution = {}\n\nfunction solution.cycle(n)\n  if n % 2 == 0 or n % 5 == 0 then\n    return -1\n  end\n  \n  local p = 1\n  local def = {}\n  local pos = 0\n  while not def[p] do\n    def[p] = pos\n    local z = 10 * p \/\/ n\n    p = 10 * p - z * n\n    pos = pos + 1\n  end\n  return pos - def[p]\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211436,"user_id":null,"body":"-- local solution = {}\n\n-- function solution.cycle(n)\n--   -- your code\n--   local save={}\n--   local str=\"1232123212321232\"\n-- --   tostring(1\/n)\n-- --   str=str:sub(3)\n--   str:gsub(\".\",function(c) table.insert(save,c) end)\n--   local temp={}\n--   local length=0\n--   for i=1,#save do\n--     if(#temp~=0)then \n--       if(save[i]==temp[1])then\n--         local tempp={}\n--         for j=i,2*i do\n--           table.insert(tempp,save[j])\n--         end\n--         if(tempp==temp)then length=i break end\n--       else\n--         table.insert(temp,save[i])\n--       end\n--     else\n--       table.insert(temp,save[1])\n--     end\n\n--   end\n-- --   if(length~=0)then return length\n-- --   else return -1 \n-- --   end\n--   return temp\n-- --   return save\n-- end\n\n-- return solution\nlocal solution = {}\n\nfunction solution.cycle(n)\n    if n % 2 == 0 or n % 5 == 0 then\n        return -1\n    end\n    local k, r = 0, 1\n    repeat\n        r = r * 10 % n\n        k = k + 1\n    until r == 1\n    return k\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a0616c746d84380110000a8":[{"id":211437,"user_id":106,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  table.sort(arr)\n  for i=#arr-2,0,-1 do \n    if arr[i]~=arr[i+1] then return i end\n  end\n  return 0\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211438,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  table.sort(arr)\n  table.remove(arr)\n  table.remove(arr)\n  return #arr\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211439,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  local alln = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    for _, n in ipairs(arr) do\n      if num < n then \n        sum = sum + 1\n      end\n    end\n    if sum >= 2 then\n      alln = alln + 1\n    end\n  end\n  return alln\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211440,"user_id":null,"body":"function solve(arr)\n    table.sort(arr)\n    uniq = arr[#arr-1] == arr[#arr] and 2 or 1\n    for i = #arr - 1, 1, -1 do\n        uniq = uniq + (arr[i] ~= arr[i+1] and 1 or 0)\n        if uniq == 3 then\n            return i\n        end\n    end\n    return 0\nend \nreturn {solve = solve}","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211441,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n\n  table.sort(arr)\n\n  local count = 0\n  \n  for i = #arr - 1, 1, -1 do\n  \n    if(arr[i] < arr[i+1] or (i == #arr - 1 and arr[i+1] == arr[i])) then \n      count = count + 1\n    end\n    \n    if(count == 2) then\n      return i\n    end\n  end\n  \n  return 0\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211442,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  table.sort(arr)\n  -- corner cases:\n  if #arr <= 2 then return 0 end\n  if arr[#arr-2] < arr[#arr-1] then return #arr-2 end\n  -- it follows that: a_{N-2} = a_{N-1} <= a_N\n\n  local n = #arr-3\n  while n>0 and arr[n] == arr[#arr-2] do n = n - 1 end\n  return n\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211443,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  table.sort(arr)\n  local count = 0;\n  local repeated = 1;\n  for i = 1, #arr - 2, 1 do\n    if (arr[i] == arr[i+1]) then\n      repeated = repeated + 1;\n    end\n    if ( arr[i] < arr[i+1] and arr[i] < arr[i+2] ) then\n      count = count + 1 * repeated\n      repeated = 1\n    end\n  end\nreturn count\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211444,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  local d = 0\n  table.sort(arr)\n   local y = arr[#arr-1]\n  for i = 1,#arr-2 do\n    if arr[i]<y then\n      d = d + 1\n    end\n  end\n  return d\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211445,"user_id":null,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  table.sort(arr)\n  local last = math.pi\n  for i,v in next, arr do\n    if last == v and i > #arr - 2 then\n      table.remove(arr,i)\n    end\n    last = v\n  end\n  return math.max(0,#arr-2)\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211446,"user_id":50,"body":"luaarrys = {}\nfunction luaarrys.solve(arr)\n  if #arr < 3 then\n     return 0\n  end\n  table.sort(arr)\n  local o = 0\n  for k, v in pairs(arr) do\n    if v == arr[#arr - 1] then\n       return o\n    else\n       o = o + 1\n    end\n  end\n  return o\nend \nreturn luaarrys","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a0634ecf270a1aaaa0000c7":[{"id":211447,"user_id":17,"body":"local function fibonacci(n)\n  return n >= 2 and fibonacci(n - 1) + fibonacci(n - 2) or n\nend\n\nreturn {\n  solve = function (n)\n    return 2 * fibonacci(n + 1) - 1\n  end\n}","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211448,"user_id":527,"body":"kata = {}\nfunction kata.solve(n) \n  local a, b = 1, 1\n  for i = 1, n do\n    a, b = b, a + b + 1\n  end\n  return a\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211449,"user_id":null,"body":"kata = {}\nfunction fibonacci(n)\n        if n < 2 then\n                return 1\n        end\n        return fibonacci(n-1) + fibonacci(n-2)\nend\n\nfunction kata.solve(n)\n        return 2 * fibonacci(n) - 1\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211450,"user_id":null,"body":"kata = {}\n\nfunction kata.solve(n)\n  if n == 0 or n == 1 then return 1\n  else return kata.solve(n-1) + kata.solve(n-2) + 1\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211451,"user_id":null,"body":"kata = {}\nfunction kata.solve(n)\n  \nfunction fibo(f)\n    if f<3 then return 1\n    else return fibo(f-1)+fibo(f-2)\n    end\nend\nreturn (2*fibo(n+1)-1)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211452,"user_id":null,"body":"kata = {}\nfunction kata.solve(n) \n  if n<2 then \n    return 1\n  end\n  start=1\n  second=1\n  index=2\n  local v\n while(index<=n)\n  do\n    v=start+second+1\n    start=second\n    second=v\n    index=index+1\n  end\n  return v\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211453,"user_id":null,"body":"kata = {}\nfunction kata.solve(n)\n  a = 0\n  b = 1\n  for i=1,n+1 do\n    c = a + b\n    a = b\n    b = c\n  end\n  return 2*a-1\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211454,"user_id":null,"body":"kata = {}\n\nfunction kata.solve(n) \n return n>1 and kata.solve(n-1)+kata.solve(n-2)+1 or 1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211455,"user_id":null,"body":"kata = {}\nfunction kata.solve(n)\n    kata[n] = n >= 2 and kata.solve(n-1) + kata.solve(n-2) + 1 or 1 -- Cached\n    return kata[n]\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211456,"user_id":null,"body":"return {\n  solve = function(n)\n    a, b = 0, 1\n    for i=1,n do\n      a, b = b, a + b\n    end\n    return 2 * b - 1\n  end\n}","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a360620f28b82a711000047":[{"id":211457,"user_id":null,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nlocal function define_suit(card)\n  return ({C='clubs', D='diamonds', H='hearts', S='spades'})[card:sub(-1)]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211458,"user_id":null,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nfunction define_suit(card)\n  local t = {\n    [\"S\"] = \"spades\",\n    [\"H\"] = \"hearts\",\n    [\"D\"] = \"diamonds\",\n    [\"C\"] = \"clubs\"\n  }\n  return t[string.sub(card, #card, #card)]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211459,"user_id":null,"body":"local deck = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nlocal function table_find( t, val )\n  for i = 1, #t do\n    if t[ i ] == val then\n      return i\n    end\n  end\nend\n\nlocal lookup_table_suits, lookup_table_chars = table.pack(\n  'spades',\n  'diamonds',\n  'hearts',\n  'clubs'\n), table.pack(\n  'S', 'D', 'H', 'C'\n)\n\nlocal function define_suit( card )\n  return lookup_table_suits[ table_find( lookup_table_chars, string.sub( card, -1 ) ) ]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211460,"user_id":168,"body":"function define_suit(card)\n  return ({['S'] = 'spades', ['D'] = 'diamonds', ['C'] = 'clubs', ['H'] = 'hearts'})[card:sub(#card)]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211461,"user_id":null,"body":"local deck = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\nlocal deck_length = #deck\nfor i = 1, #deck do\n  deck[ deck[ i ] ] = i\nend\n\nlocal function __index( self, i )\n  return rawget( self, math.type( i ) ~= 'integer' and math.ceil( i ) or i )\nend\n\nlocal lookup_table = setmetatable( table.pack( 'spades', 'diamonds', 'hearts', 'clubs' ), { __index = __index } )\n\nlocal function define_suit( card )\n  return lookup_table[ deck[ card ] \/ ( deck_length \/ #lookup_table ) ]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211462,"user_id":null,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nfunction define_suit(card)\n  local t = {}\n  t.C = \"clubs\"\n  t.D = \"diamonds\"\n  t.H = \"hearts\"\n  t.S = \"spades\"\n  local k = card:match(\"(%a)$\")\n  return t[k]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211463,"user_id":53,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nlocal SUITS = {[\"C\"] = \"clubs\",[\"S\"] = \"spades\",[\"D\"] = \"diamonds\",[\"H\"] = \"hearts\"}\n\nfunction define_suit(c)\n  return SUITS[string.sub(c,-1,-1)]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211464,"user_id":28,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nfunction define_suit(card)\n  local suits = {[\"C\"] = \"clubs\",[\"S\"] = \"spades\",[\"D\"] = \"diamonds\",[\"H\"] = \"hearts\"}\n  return suits[string.sub(card,-1,-1)]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211465,"user_id":null,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nfunction define_suit(card)\n  local cTable = {}\n  \n  cTable[\"C\"] = \"clubs\"\n  cTable[\"D\"] = \"diamonds\"\n  cTable[\"H\"] = \"hearts\"\n  cTable[\"S\"] = \"spades\"\n  \n  return cTable[string.match(card,\"(%a)$\")]\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211466,"user_id":null,"body":"local DECK = {'2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',\n              '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',\n              '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',\n              '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC'}\n\nfunction define_suit(card)\n  if string.find(card,\"C\") ~= nil then\n    return \"clubs\"\n  elseif string.find(card,\"D\") ~= nil then\n    return \"diamonds\"\n  elseif string.find(card,\"H\") ~= nil then\n    return \"hearts\"\n  elseif string.find(card,\"S\") ~= nil then\n    return \"spades\"\n  end\nend\n\nreturn define_suit","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a3fe3dde1ce0e8ed6000097":[{"id":211467,"user_id":759,"body":"local kata = {}\n\nfunction kata.century_from_year(number)\n  return math.ceil(number \/ 100)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211468,"user_id":null,"body":"local k = {}\n\nfunction k.century_from_year(n)\n  if(n%100==0)then\n    return n\/\/100\n  else\n    return n\/\/100+1\n  end\nend\n\nreturn k","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211469,"user_id":null,"body":"local kata = {}\n\nfunction kata.century_from_year(number)\n  num = number \/ 100\n  return math.ceil(num)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211470,"user_id":null,"body":"return {\n    century_from_year = function(n)\n        return math.floor((n+99)\/100)\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211471,"user_id":null,"body":"local kata = {}\n\nfunction kata.century_from_year(number)\n  return (number - 1) \/\/ 100 + 1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211472,"user_id":527,"body":"local kata = {}\n\nfunction kata.century_from_year(year)\n  return (year + 99) \/\/ 100\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211473,"user_id":null,"body":"local kata = {}\n\nfunction kata.century_from_year(year)\n    year = year - 1\n    if tostring(year):len() == 4 or tostring(year):len() == 3 then\n        return math.floor(year \/ 100) + 1\n    elseif tostring(year):len() < 3 then\n        return 1\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211474,"user_id":null,"body":"local kata = {}\n\nfunction kata.century_from_year(number)\n  if math.floor(number % 100) ~= 0 then return math.floor(number \/ 100 + 1) else return number \/ 100 end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211475,"user_id":null,"body":"function century_from_year(num) return math.ceil(num \/ 100) end\nreturn { century_from_year = century_from_year }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211476,"user_id":null,"body":"local kata = {}\n\nfunction kata.century_from_year(i)\n  return i % 100 == 0 and i \/ 100 or (i - (i % 100)) \/ 100 + 1;\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a420163b6cfd7cde5000077":[{"id":211477,"user_id":168,"body":"local solution = {}\n\nfunction solution.nbaCup(resultSheet, toFind)\n  if toFind == '' then return '' end\n  local wins, draws, losses, scored, conceded = 0, 0, 0, 0, 0\n  for x in resultSheet:gmatch('[^,]+') do\n    t1, n1, t2, n2 = x:match('^(.+) ([%d.]+) (.+) ([%d.]+)$')\n    if t2 == toFind then\n      t1, n1, t2, n2 = t2, n2, t1, n1\n    end\n    if t1 == toFind then\n      n1, n2 = tonumber(n1), tonumber(n2)\n      if n1 % 1 ~= 0 or n2 % 1 ~= 0 then\n        return \"Error(float number):\" .. x\n      end\n      scored = scored + n1\n      conceded = conceded + n2\n      if n1 == n2 then\n        draws = draws + 1\n      elseif n1 < n2 then\n        losses = losses + 1\n      else\n        wins = wins + 1\n      end\n    end\n  end\n  if wins + draws + losses == 0 then\n    return toFind .. \":This team didn't play!\"\n  end\n  return toFind .. \":W=\" .. wins .. \";D=\" .. draws .. \";L=\" .. losses .. \n         \";Scored=\" .. scored .. \";Conceded=\" .. conceded .. \";Points=\" .. wins * 3 + draws\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211478,"user_id":null,"body":"local solution = {}\n\nfunction solution.nbaCup(r, team)\n  -- handle exceptions\n  if team == \"\"                then return \"\" end\n  if r:match('%d%.%d')         then return 'Error(float number):' .. r:match('[%w ]+%.[%w ]+') end\n  if not r:match(team..' %d+') then return team .. ':This team didn\\'t play!' end\n  -- do processing\n  local W, D, L, scored, conceded = 0, 0, 0, 0, 0\n  for i in r:gmatch('[%w ]+') do\n    if i:match(team) then\n      local _scored = tonumber(i:match(team .. ' (%d+)'))\n      local _conceded = tonumber(i:gsub(' *' .. team .. ' %d+ *', ''):match('%w+ (%d+)$'))\n      scored = scored + _scored\n      conceded = conceded + _conceded\n      if _scored > _conceded then W = W + 1 end\n      if _scored ==_conceded then D = D + 1 end\n      if _scored < _conceded then L = L + 1 end \n    end\n  end\n  return string.format('%s:W=%d;D=%d;L=%d;Scored=%d;Conceded=%d;Points=%d', team, W, D, L, scored, conceded, 3*W+D)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211479,"user_id":null,"body":"local solution = {}\n\nfunction solution.nbaCup(r, team)\n  -- handle exceptions\n  if team == \"\" then\n    return \"\"\n  elseif r:match('%d%.%d') then\n    return 'Error(float number):' .. r:match('[%w ]+%.[%w ]+')\n  elseif not r:match(team .. ' %d+') then\n    return team .. ':This team didn\\'t play!'\n  end\n  -- do processing\n  local W, D, L, scored, conceded = 0, 0, 0, 0, 0\n  for i in r:gmatch('[%w ]+') do\n    if i:match(team) then\n      local _scored = tonumber(i:match(team .. ' (%d+)'))\n      local _conceded = tonumber(i:gsub(' *' .. team .. ' %d+ *', ''):match('%w+ (%d+)$'))\n      scored = scored + _scored\n      conceded = conceded + _conceded\n      if _scored > _conceded then\n        W = W + 1\n      elseif _scored == _conceded then\n        D = D + 1\n      else\n        L = L + 1\n      end\n    end\n  end\n  return string.format('%s:W=%d;D=%d;L=%d;Scored=%d;Conceded=%d;Points=%d',\n    team, W, D, L, scored, conceded, 3*W+D)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211480,"user_id":null,"body":"local solution = {}\n\nfunction solution.nbaCup(resultSheet, toFind)\n  if #resultSheet == 0 or #toFind == 0 then return \"\" end\n    local games = 0\n    local win = 0\n    local loses = 0\n    local draw = 0\n    local score = 0\n    local conc = 0\n    local points = 0\n  \n    for match in resultSheet:gmatch(\"([^,]*),?\") do\n      if match:match(\"%d+%.%d+\") then return \"Error(float number):\" .. match end\n      local team1, res1, team2, res2 = match:match(\"(.*) (%d*) (.*) (%d*)\")\n      res1 = tonumber(res1)\n      res2 = tonumber(res2)\n      if team1 == toFind then\n        games = games + 1\n        score = score + res1\n        if res1 == res2 then \n          draw = draw + 1\n          points = points + 1\n        elseif res1 > res2 then\n          win = win + 1\n          points = points + 3\n          conc = conc + res2\n        else\n          conc =conc + res2\n          loses = loses + 1\n        end\n      elseif team2 == toFind then\n        games = games + 1\n        score = score + res2\n        if res1 == res2 then \n          draw = draw + 1\n          points = points + 1\n        elseif res1 < res2 then\n          win = win + 1\n          points = points + 3\n          conc = conc + res1\n        else\n          conc = conc + res1\n          loses = loses + 1\n        end\n      end\n    end\n    -- your code\n  if games == 0 then return toFind.. \":This team didn't play!\" end\n    return string.format(\"%s:W=%d;D=%d;L=%d;Scored=%d;Conceded=%d;Points=%d\",toFind,\n            win,draw,loses,score,conc,points)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211481,"user_id":480,"body":"local solution = {}\n\n\nfunction solution.nbaCup(resultSheet, toFind)\n  local found=0\n  local a,b,c,d,t,W,D,L,Scored,Conceded,seen\n  if toFind==\"\" then return \"\" end\n  W=0;D=0;L=0;Scored=0;Conceded=0;Points=0;seen=false;\n  for a,b,c,d in string.gmatch(resultSheet..\",\",\"([^,]+) ([.0-9]+) ([^,]+) ([.0-9]+),\") do\n    if not string.match(b,\"^%d+$\") or not string.match(d,\"^%d+$\") then \n      return string.format(\"Error(float number):%s %s %s %s\",a,b,c,d) \n    end\n    b=tonumber(b)\n    d=tonumber(d)\n    if c==toFind then t=a;a=c;c=t;t=b;b=d;d=t;end\n    if a==toFind then\n      seen=true;\n      Scored=Scored+b;Conceded=Conceded+d; \n      if b>d then W=W+1;Points=Points+3; \n      elseif b==d then D=D+1;Points=Points+1;\n      else L=L+1; end\n    end\n  end\n  if seen then\n    return string.format(\"%s:W=%d;D=%d;L=%d;Scored=%d;Conceded=%d;Points=%d\",toFind,W,D,L,Scored,Conceded,Points);\n  end\n  return toFind..\":This team didn't play!\"\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211482,"user_id":null,"body":"local solution = {}\n\nfunction solution.nbaCup(resultSheet, toFind)\n  if string.find(toFind, \"^ *$\") then return \"\" end\n  if not string.find(resultSheet, toFind..\" \") then\n    return toFind..\":This team didn't play!\"\n  end\n  nw, nd, nl, pf, pa = 0, 0, 0, 0, 0\n  for s in string.gmatch(resultSheet, \"[^,]+\") do\n    if string.find(s, toFind..\" \") then\n      if string.find(s, '%d+%.%d+') then \n        return \"Error(float number):\" .. s\n      end\n      t1, s1, t2, s2 = string.match(s, '(.*)%s+(%d+)%s+(.*)%s+(%d+)')\n      if t1 == toFind then\n        x,y = tonumber(s1), tonumber(s2)\n      else\n        x,y = tonumber(s2), tonumber(s1)\n      end\n      pf = pf + x\n      pa = pa + y\n      if x > y then\n        nw = nw + 1\n      elseif x == y then\n        nd = nd + 1\n      else\n        nl = nl + 1\n      end\n    end\n  end\n  return toFind..\":W=\"..nw..\";D=\"..nd..\";L=\"..nl..\";Scored=\"..pf..\";Conceded=\"..pa..\";Points=\"..(3*nw+nd)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211483,"user_id":492,"body":"local solution = {}\n\nfunction solution.nbaCup(resultSheet, toFind)\n    local function string_split(s, delimiter)\n        result = {}\n        for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n            table.insert(result, match);\n        end\n        return result;\n    end\n    if (toFind == '') then return '' end\n    local arr = string_split(resultSheet, \",\")\n    local sa, sb\n    local w, l, d, pw, pc = 0, 0, 0, 0, 0\n    for _, v in ipairs(arr) do\n        if (string.match(v, \"%d+%.%d*\") ~= nil) then return \"Error(float number):\" .. v end\n        local _, _, name1, p1, name2, p2 = string.find(v, \"^(.*) (%d+) (.*) (%d+)$\")\n        if (name1 ~= toFind) and (name2 ~= toFind) then goto continue end\n        if (name1 == toFind) then \n            sa, sb = tonumber(p1), tonumber(p2) \n        else \n            sa, sb = tonumber(p2), tonumber(p1)\n        end\n        pw = pw + sa; \n        pc = pc + sb\n        if sa > sb then w = w + 1 end\n        if sa < sb then l = l + 1 end\n        if sa == sb then d = d + 1 end\n        ::continue::\n    end\n    if w + l + d == 0 then return toFind .. \":This team didn't play!\" end\n    result = toFind .. ':W=' ..w .. ';D=' .. d .. ';L=' .. l\n    result = result .. ';Scored=' .. pw .. ';Conceded=' .. pc .. ';Points=' .. (3 * w + d)\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a48948e145c46820b00002f":[{"id":211484,"user_id":53,"body":"local solution = {}\n\nfunction solution.countPrimeFactors(k)\n    local ans, i, n = 0, 2, k\n    while (i <= n \/\/ i) do\n        while (n % i == 0) do\n            n = n \/\/ i\n            ans = ans + 1\n        end\n        i = i + 1\n    end\n    if (n > 1) then\n        ans = ans + 1\n    end\n    return ans\nend\n\nfunction solution.kprimesStep(k, step, start, nd)\n    local fs, i, j = {}, start, 0\n    while (i <= nd - step) do\n        if (solution.countPrimeFactors(i) == k and solution.countPrimeFactors(i + step) == k) then\n            local t = {i, i + step}\n            table.insert(fs, t)\n        end\n        i = i + 1\n    end\n    return fs\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211485,"user_id":168,"body":"local solution = {}\n\nfunction factors(n)\n  local p, r = 2, 0\n  while p * p <= n do\n    while n % p == 0 do\n      n = n \/\/ p\n      r = r + 1\n    end\n    p = p + 1\n  end\n  return r + (n > 1 and 1 or 0)\nend\n\nfunction solution.kprimesStep(k, step, start, nd)\n  local r = {}\n  for i = start, nd - step do\n    if factors(i) == k and factors(i + step) == k then\n      table.insert(r, {i, i + step})\n    end\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211486,"user_id":null,"body":"local solution = {}\n\nlocal function k_prime_factors(number)\n    local count = 0\n    local fact = 2\n    while number > 1 do\n        if number % fact == 0 then\n            count = count + 1\n            number = number \/ fact\n        else fact = fact + 1 end \n        if fact*fact > number\n\nthen break end \n    end \n    if number > 1 then count = count +1 end\n    return count\nend\n\nfunction solution.kprimesStep(k, step, start, nd)\n    print(k, step, start, nd)\n    local list = {}\n    for i = start, nd do\n        if k_prime_factors(i) == k then\n            table.insert(list, i)\n        end\n    end\n    local steps = {}\n    for i = 1, #list-1 do table.insert(steps, list[i+1] - list[i]) end\n    for i = 1, #steps do print(steps[i]) end\n    local s = {}\n    s[0] = 0\n    for i = 1, #steps do\n        s[i] = s[i-1] + steps[i]\n    end\n    local result = {}\n    for i = 1, #s do\n        for j = i, #s do\n            if s[j] - s[i-1] == step then\n                local pair = {}\n                pair[1] = list[i]\n                pair[2] = list[j+1]\n                table.insert(result, pair)\n            end\n        end\n    end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211487,"user_id":null,"body":"local solution = {}\n\nfunction solution.kprimesStep(k, step, start, nd)\n  kprimes, ret = {}, {}\n  for i=start,nd do\n    fs = factorize(i)\n    if #fs == k then kprimes[#kprimes+1] = i end\n  end\n  for i=1,#kprimes do\n    for j=i+1,#kprimes do\n      if kprimes[j] - kprimes[i] == step then\n        ret[#ret+1] = {kprimes[i], kprimes[j]}\n      end\n    end\n  end\n  return ret\nend\n\nfunction factorize(n)\n  arr = {}\n  while n%2 == 0 do\n    arr[#arr+1] = 2\n    n = n\/2\n  end\n  for i=3,math.floor(math.sqrt(n)),2 do\n    while n%i == 0 do\n      arr[#arr+1] = i\n      n = n\/i\n    end\n  end\n  if n > 2 then arr[#arr+1] = n end\n  return arr\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211488,"user_id":492,"body":"local solution = {}\n\nfunction solution.kprimesStep(k, step, start, nd)\n    local function nbFactors(n)\n        local i, factors = 2, 0\n        while i * i <= n do\n            while n % i == 0 do\n                factors = factors + 1\n                n = n \/\/ i\n            end\n            i = i + 1\n        end\n        if n > 1 then factors = factors + 1 end\n        return factors\n    end\n    local r, lim = {}, nd - step\n    for i = start, lim do\n        if (nbFactors(i) == k and nbFactors(i + step) == k) then table.insert(r, {i, i + step}) end\n    end\n    return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a4d303f880385399b000001":[{"id":211489,"user_id":null,"body":"function fact(n)\n  local f = 1\n  for i=1, n do\n    f = f * i\n  end\n  return f\nend\n\nreturn function(num)\n  local s = 0\n  for n in tostring(num):gmatch(\"%d\") do\n    s = s + fact(tonumber(n))\n  end\n  if num == s then\n    return \"STRONG!!!!\"\n  end\n  return \"Not Strong !!\"\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211490,"user_id":null,"body":"local indent = 0\nlocal output = \"\"\nlocal newline = true\nfunction rawprint(...)\n  if newline then\n    for i=1, indent do output=output..\"  \" end\n    newline = false\n  end\n  \n  for k,v in ipairs({...}) do\n    output=output..tostring(v)\n  end\nend\nfunction rawprintn(...)\n  rawprint(...)\n  output=output..\"\n\"\n  newline = true\nend\n\nlocal advprints = {}\n\nlocal cache = {}\nfunction advprints.table(val)\n  if cache[val] then\n    return rawprint(\"LOOP DETECTION!\")\n  end\n  cache[val] = true\n  \n  rawprintn(\"{\")\n  indent = indent + 1\n\n  for k,v in pairs(val) do\n    rawprint(\"[\", k, \"] = \")\n    advprint(v)\n    rawprintn(\",\")\n  end\n  \n  if getmetatable(val) then\n    rawprint(\"__meta = \")\n    advprint(getmetatable(val))\n    rawprintn(\",\")\n  end\n  \n  indent = indent - 1\n  rawprint(\"}\")\nend\n\nfunction advprints.number(val)\n  rawprint(val)\nend\nfunction advprints.boolean(val)\n  rawprint(val and \"TRUE\" or \"FALSE\")\nend\nfunction advprints.string(val)\n  rawprint('\"', val, '\"')\nend\nadvprints[\"function\"] = function(val)\n  local info = debug.getinfo(val, \"nS\")\n  --advprint(info)\n  rawprint(info.name or \"lambda\", \"() @ \", info.short_src, \":\", info.linedefined)\nend\n\nfunction advprint(val)\n  advprints[type(val)](val)\nend\n\n\nreturn function(n)\n  local overrided = false \n  for i=1, 100 do\n    local name, val = debug.getlocal(2, i)\n    if not name then break end\n    \n    if getmetatable(val) then\n      getmetatable(val).__call = function() return true end\n      overrided = true\n    end\n  end\n  \n  if not overrided then\n    local locals = {}\n    for i=1, 100 do\n      local name, val = debug.getlocal(2, i)\n      if not name then break end\n      table.insert(locals, {name=name, value=val})\n    end\n    advprint(locals)\n    error(output)\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211491,"user_id":null,"body":"return function(n)\n  local function fact(num)\n    if num<2 then return 1 end\n    return num*fact(num-1)\n  end\n  sum=0\n  for v in tostring(n):gmatch(\"%d\") do\n    sum=sum+fact(tonumber(v))\n  end\n  return n==sum and \"STRONG!!!!\" or \"Not Strong !!\"\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211492,"user_id":null,"body":"local fact = {[0]=0, 1}\nfor n = 2, 9 do fact[n] = n*fact[n-1] end\n\nreturn function(n)\n  if not n then return 'Not Strong !!' end\n  for d in string.gmatch(n, '.') do\n    n = n - fact[tonumber(d)]\n  end\n  return n==0 and 'STRONG!!!!' or 'Not Strong !!'\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211493,"user_id":null,"body":"return function(n)\n  \n  local dict = {\n    [true] = \"STRONG!!!!\",\n    [false] = \"Not Strong !!\"\n  }\n  \n  if not n then\n    return dict[false]\n  end\n  \n  local function factorial(n)\n    if (n == 0) then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end\n  end\n  \n  local str = tostring(n)\n  local tmp = 0;\n  \n  for c in str:gmatch(\".\") do\n    tmp = tmp + factorial(tonumber(c))\n  end\n  \n  return dict[tmp == n]\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211494,"user_id":null,"body":"function factorial(n)\n  local Answer = 1\n  for i = 1, n do\n    Answer = Answer * i\n  end\n  return Answer\nend\n\nreturn function(n)\n  if n == nil then\n    return \"Not Strong !!\"\n  end\n  local Digits = tostring(n)\n  local Sum = 0\n  for i = 1, #Digits do\n    local digit = Digits:sub(i, i)\n    Sum = Sum + factorial(digit)\n  end\n  if Sum ~= n then\n    return \"Not Strong !!\"\n  end\n    return \"STRONG!!!!\"\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211495,"user_id":null,"body":"local function fact(n)\n  return n==0 and 1 or n*fact(n-1)\nend\n\nlocal function alldigit(n)\n  return function(len,i)\n           if math.log(i,10)>len then return nil end\n           local d = (n\/\/i)%10\n           i = i*10\n           return i, d\n         end\n         , math.floor(math.log(n,10)), 1\nend\n\nreturn function(n)\n         if type(n)~=\"number\" then return \"Not Strong !!\" end\n         \n         local sum = 0\n         for _,d in alldigit(n) do\n           sum = sum+fact(d)\n         end\n         return sum==n and \"STRONG!!!!\" or \"Not Strong !!\"\n       end","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211496,"user_id":null,"body":"local function fact(i)\n  local res = 1\n  for idx = 2, i do\n    res = res * idx\n  end\n  return res\nend\n\nlocal function get_digits(n)\n  local digits = {}\n  if (n == nil) then\n    return digits\n  end\n  while (n ~= 0) do\n    table.insert(digits, n%10)\n    n = n \/\/ 10\n  end\n  return digits\nend\n\nreturn function(n)\n  local digits = get_digits(n)\n  local sum = 0\n  for _, v in ipairs(digits) do\n    sum = sum + fact(v)\n  end\n  return (n == sum) and \"STRONG!!!!\" or \"Not Strong !!\"\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211497,"user_id":null,"body":"return function(val)\n  if val == nil then\n    return 'Not Strong !!'\n  end\n  local sum = 0\n  for c in tostring(val):gmatch('.') do \n    local n = tonumber(c)\n    local f = n\n    while n > 1 do\n      n = n - 1\n      f = f * n\n    end\n    sum = sum + f\n  end\n  return sum == val and 'STRONG!!!!' or 'Not Strong !!'\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211498,"user_id":null,"body":"return function(n)\n  -- your code here\n  function fact(num)\n    if num <= 1 then\n      return 1\n    else\n      return num * fact(num-1)\n    end\n  end\n  if n == nil then return \"Not Strong !!\" end\n  str = tostring(n)\n  sum = 0\n  for i = 1, #str do\n    d = string.sub(str,i,i)\n    sum = sum + fact(tonumber(d))\n  end\n  if sum == n then\n    return \"STRONG!!!!\"\n  else\n    return \"Not Strong !!\"\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a662a02e626c54e87000123":[{"id":211499,"user_id":null,"body":"return function(n)\n  local res = {}\n  for i = 1,n,2 do\n    res[#res+1] = i\n  end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211500,"user_id":null,"body":"-- Perfect Numbers are the same as odd numbers\n-- The last bit will always be set by a number\n-- The first bit will only be set if the number is odd\n\nreturn function(n)\n  local perfect_numbers = {}\n  \n  for i = 1, n do\n    if i % 2 ~= 0 then\n      table.insert(perfect_numbers, i)\n    end\n  end\n  \n  return perfect_numbers\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211501,"user_id":null,"body":"return function(n)\n  local result = {}\n  \n  for i = 1,n do\n    if i % 2 == 1 then \n      table.insert(result,i)\n    end\n    end\n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211502,"user_id":null,"body":"return function(n)\n  local result = {}\n  for i = 1, n do\n    if i % 2 ~= 0 then\n      table.insert(result, i)\n    end\n  end\n  return result\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211503,"user_id":null,"body":"return function(n)\n  local r = {}\n  for i = 1,n,2 do\n    r[#r+1] = i\n  end\n  return r\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211504,"user_id":168,"body":"return function(n)\n  local r = {}\n  for i = 1, n, 2 do\n    table.insert(r, i)\n  end\n  return r\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211505,"user_id":645,"body":"return function(n)\n  local res = {}\n  for i = 1, n, 2 do\n    table.insert(res, i)\n  end\n  return res\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211506,"user_id":1474,"body":"return function(n)\n  local ret = {}\n  for i = 1, n, 2 do\n    table.insert(ret, i)\n  end\n  return ret\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211507,"user_id":null,"body":"return function(n)\n  local t = {}\n  for i=1,n,2 do\n    table.insert(t, i)\n  end\n  return t\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211508,"user_id":null,"body":"function dec2bin(n, bin)\n    bin = (n&1) .. (bin or \"\") \n    return n>1 and dec2bin(n\/\/2, bin) or bin\nend\n\nreturn function(n)\n  ret = {}\n  for i=1,n do\n    b = dec2bin(i)\n    if b:sub(1,1) == '1' and b:sub(#b,#b) == '1' then ret[#ret+1] = i end\n  end\n  return ret\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a6663e9fd56cb5ab800008b":[{"id":211509,"user_id":17,"body":"local kata = {}\n\nfunction kata.human_years_cat_years_dog_years(n)\n  return {n, n == 1 and 15 or 4 * (n + 4), n == 1 and 15 or 5 * n + 14}\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211510,"user_id":null,"body":"return function(years)\n  local human = years\n  local cat_table = { 15, 9 }\n  local dog_table = { 15, 9 }\n  local cat = 0\n  local dog = 0\n  \n  for i = 1, years do\n    cat = cat + (cat_table[i] or 4)\n    dog = dog + (dog_table[i] or 5)\n  end\n\n  return { human, cat, dog }\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211511,"user_id":null,"body":"return function(years)\n  return {\n    years,\n    years > 2 and 24 + 4 * (years - 2) or years > 1 and 24 or 15,\n    years > 2 and 24 + 5 * (years - 2) or years > 1 and 24 or 15,\n  }\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211512,"user_id":null,"body":"return function(years)\n  catYears = 0\n  dogYears = 0\n  \n  if years > 0 then -- first year\n    catYears = 15\n    dogYears = 15\n  end\n  \n  if years > 1 then -- second year\n    catYears = catYears + 9\n    dogYears = dogYears + 9\n  end\n  \n  if years > 2 then -- each year after second\n    catYears = catYears + (4 * (years - 2))\n    dogYears = dogYears + (5 * (years - 2))\n  end\n  \n  return {years, catYears, dogYears}\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211513,"user_id":null,"body":"return function(years)\n  return {\n    years,\n    years == 1 and 15 or years == 2 and 24 or 4*years + 16,\n    years == 1 and 15 or years == 2 and 24 or 5*years + 14,\n  }\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211514,"user_id":null,"body":"return function(years)\n  local cat = 15\n  local dog = 15\n  if years==1 then return {years, cat, dog}\n  end\n  if years==2 then return {years, cat+9, dog+9}\n  end\n  if years>=3 then return {years, cat+9+(4*(years-2)), dog+9+(5*(years-2))}\n  end\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211515,"user_id":null,"body":"return function(years)\n  yearsarr = {}\n  table.insert(yearsarr, years)\n  if years == 1 then\n    table.insert(yearsarr, 15)\n    table.insert(yearsarr, 15)\n  end\n  if years == 2 then\n    table.insert(yearsarr, 15+9)\n    table.insert(yearsarr, 15+9)\n  end\n  if years >= 3 then\n    table.insert(yearsarr, 24+4*(years-2))\n    table.insert(yearsarr, 24+5*(years-2))\n  end\n  return yearsarr\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211516,"user_id":null,"body":"return function(years)\n  local catYears = 0\n  local dogYears = 0\n  if(years == 1) then\n    catYears = 15\n    dogYears = 15\n  end\n  if(years == 2) then\n    catYears = 24\n    dogYears = 24\n  end\n  if(years > 2) then\n    catYears = 24 + (years - 2) * 4\n    dogYears = 24 + (years - 2) * 5\n  end\n  return {years, catYears, dogYears}\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211517,"user_id":null,"body":"return function(years)\n  cat = years < 2 and 15 or 24\n  dog = cat\n  \n  for i = 3, years do \n    cat = cat + 4\n    dog = dog + 5\n  end\n  \n  return {years, cat, dog}\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211518,"user_id":null,"body":"return function(years)\n  catyears = 0\n  dogyears = 0\n  if years == 1 then\n    catyears =  15\n    dogyears = 15\n  end\n  if years == 2 then\n    catyears =  24\n    dogyears = 24\n  end\n  if years >= 3 then\n    catyears = 24 + 4*(years - 2)\n    dogyears = 24 + 5*(years - 2)\n  end\n  \n  \n  return {years, catyears, dogyears}\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5a805d8cafa10f8b930005ba":[{"id":211519,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n      return math.floor(math.sqrt(n)+0.5)^2\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211520,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n    local above = math.ceil(n^.5)^2\n    local below = math.floor(n^.5)^2\n    return above - n < n - below and above or below\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211521,"user_id":53,"body":"function round(num) \n  if num >= 0 then return math.floor(num+.5) \n  else return math.ceil(num-.5) end\nend\n\nreturn {\n  nearest_sq = function(n)\n    return math.pow(round(math.sqrt(n)),2);\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211522,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n     local m=math.sqrt(n)\n  \tlocal m1=math.floor(m)\n  \tlocal m2=math.ceil(m)\n  \tif math.abs(m1*m1-n)<math.abs(m2*m2-n) then\n  \treturn m1*m1\n    else return m2*m2\n\t  end\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211523,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n      -- Make it green, then make it clean :)\n    return math.floor(n^0.5+0.5)^2\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211524,"user_id":null,"body":"return {\n  \n\n\n  nearest_sq = function(n)\n   round = function(number)\n  if (number - (number % 0.1)) - (number - (number % 1)) < 0.5 then\n    number = number - (number % 1)\n  else\n    number = (number - (number % 1)) + 1\n  end\n return number\nend\n      s = math.pow(round(math.sqrt(n)),2)\n      return s\n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211525,"user_id":null,"body":"function top_sq(n)    -- Checks what's the next highest integer, whos root is a whole number.\n  if math.type(math.tointeger(math.sqrt(n))) == \"integer\" then\n    return n\n    else return top_sq(n+1)\n  end\nend\n  \nfunction bot_sq(n)    -- Checks what's the next lowest integer, whos root is a whole number.\n  if math.type(math.tointeger(math.sqrt(n))) == \"integer\" then\n    return n\n    else return bot_sq(n-1)\n  end\nend\n\nreturn {\n  nearest_sq = function(n)\n    if math.abs(n - bot_sq(n)) > math.abs(n - top_sq(n)) then   -- Tests which of the two numbers is closest to the original\n      return top_sq(n)\n      else return bot_sq(n)\n    end\n  end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211526,"user_id":null,"body":"function top_sq(n)    -- Checks what's the next highest who's root is a whole number.\n  if math.type(math.tointeger(math.sqrt(n))) == \"integer\" then\n    return n\n    else return top_sq(n+1)\n  end\nend\n  \nfunction bot_sq(n)    -- Checks what's the next lowest who's root is a whole number.\n  if math.type(math.tointeger(math.sqrt(n))) == \"integer\" then\n    return n\n    else return bot_sq(n-1)\n  end\nend\n\nreturn {\n  nearest_sq = function(n)\n    if math.abs(n - bot_sq(n)) > math.abs(n - top_sq(n)) then   -- Tests which of the two numbers is closest to the original using the formula for length measurement of a vector in R^1\n      return top_sq(n)\n      else return bot_sq(n)\n    end\n  end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211527,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n    \n      local a = (math.floor(math.sqrt(n)))^2\n      local b = (math.ceil(math.sqrt(n)))^2\n\n      if n-a<b-n then return a else return b end\n      end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211528,"user_id":null,"body":"return {\n  nearest_sq = function(n)\n    \n      a = (math.floor(math.sqrt(n)))^2\n      b = (math.ceil(math.sqrt(n)))^2\n\n      if n-a<b-n then return a else return b end\n    \n    end\n  }","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5aba780a6a176b029800041c":[{"id":211529,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  return bound - (bound % divisor);\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211530,"user_id":null,"body":"return{[\"max_multiple\"]=function(d,b)return b\/\/d*d end}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211531,"user_id":null,"body":"--Find a positive integer N that is divisible by divisor and <= bound.\nkata = {}\nfunction kata.max_multiple(d, b)\n  n=b\n  while(n>0)do\n    if(n%d==0)then\n      return n\n    end\n    n=n-1\n  end\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211532,"user_id":527,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  return bound \/\/ divisor * divisor\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211533,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  for i = bound, 1, -1 do\n    if i % divisor == 0 then\n      return i\n    end\n  end\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211534,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  n = 0\n  max = 0\n  for n = 0,bound,1\n  do\n    if n%divisor == 0 then\n      max = n\n    end\n  end\n  return max\n  end\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211535,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  for i = bound, 1, -1 do\n    if (i\/divisor)%1 == 0 then\n      return i\n    end\n  end\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211536,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  return (bound\/\/divisor)*divisor\n  -- your code here\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211537,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  local ChoosenNumber\n  \n  for i = 0, bound do \n    local number = bound - i\n    print(number)\n    if number > 0 and number%divisor == 0 and number <= bound then\n      ChoosenNumber = number\n       break\n     end\n    end\n  \n  return ChoosenNumber\n  \nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211538,"user_id":null,"body":"kata = {}\nfunction kata.max_multiple(divisor, bound)\n  local x = math.floor(bound\/divisor)\n  local n = divisor * x\n  return n\nend\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5ae62fcf252e66d44d00008e":[{"id":211539,"user_id":null,"body":"return function(a, b, c)\n  return math.max(a+b+c,a*b*c,(a+b)*c,a*(b+c))\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211540,"user_id":null,"body":"return function(a, b, c)\n  local try = {a*b*c,(a+b)*c,a*(b+c),a+b+c}\n  table.sort(try)\n  return try[#try]\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211541,"user_id":null,"body":"return function(a, b, c)\n  local largest = 0\n  local combinations = {a + b + c, a * b * c, a * (b + c), c * (a +  b)}\n  \n  for i, v in pairs(combinations) do\n    if v > largest then\n      largest = v\n    end\n  end\n  \n  return largest\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211542,"user_id":null,"body":"return function(a, b, c)\n  local largest = 0\n  \n  if largest < (a + b) * c then\n      largest = (a + b) * c\n  end  \n  if largest < a * (b + c) then\n      largest = a * (b + c)\n  end  \n  if largest < a * b * c then\n      largest = a * b * c\n  end  \n  if largest < (a + b + c) then\n      largest = a + b + c\n  end\n  \n  return largest\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211543,"user_id":null,"body":"return function(a, b, c)\n  local best = 0\n  local test = {}\n  test[1] = a + b + c\n  test[2] = a * b * c\n  test[3] = (a + b) * c\n  test[4] = a * (b + c)\n  test[5] = a * b + c\n  test[6] = a + b * c\n  for i, n in ipairs(test) do\n    if n > best\n    then best = n\n    end\n  end\n  return best\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211544,"user_id":null,"body":"return function(a, b, c)\n  arr ={}\n  table.insert(arr, a*(b+c))\n  table.insert(arr, a*b*c)\n  table.insert(arr, a+b*c)\n  table.insert(arr, (a+b)*c)\n  table.insert(arr, a+b+c)\n  table.sort(arr, function (a, b) return (a > b) end)\n  return arr[1]\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211545,"user_id":null,"body":"return function(a, b, c)\n  local best = 0\n  local test = {}\n  test[1] = a + b + c\n  test[2] = a * b * c\n  test[3] = (a + b) * c\n  test[4] = a * (b + c)\n  test[5] = a * b + c\n  test[6] = a + b * c\n  for i,n in ipairs(test) do \n    if n > best\n    then best = n\n    end\n  end\n  return best -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211546,"user_id":null,"body":"return function(a, b, c)\n  testOne = a*(b+c)\n  testTwo = a*b*c\n  testThree = a+b*c\n  testFour = (a+b)*c\n  testFive = a*b+c\n  testSix = a+b+c\n  \n  if testOne >= testTwo and testOne >= testThree and testOne >= testFour and testOne >= testFive and testOne >= testSix then\n     biggest = testOne\n  end\n  \n  if testTwo >= testOne and testTwo >=testThree and testTwo >=testFour and testTwo >=testFive and testTwo >=testSix then\n     biggest = testTwo\n  end\n  \n  if testThree >= testOne and testThree >=testTwo and testThree >=testFour and testThree >=testFive and testThree >=testSix then\n     biggest = testThree\n  end\n  \n  if testFour >= testOne and testFour >=testTwo and testFour >=testThree and testFour >=testFive and testFour >=testSix then\n  biggest = testFour \n\n  end\n  \n  if testFive >= testOne and testFive >=testTwo and testFive >=testThree and testFive >=testFour and testFive >=testSix  then\n  biggest = testFive\n    \n  end\n  \n    if testSix >= testOne and testSix >= testTwo and testSix>=testThree and testSix >=  testFour and testSix >= testFive then\n    print(testSix,testOne,testTwo,testThree,testFour,testFive)\n  biggest = testSix\n    \n  end\n  \n  print(biggest)\n  return biggest -- your code here\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211547,"user_id":null,"body":"return function(a, b, c)\n    return math.max((a+b)*c,a*b*c,a*(b+c),a+b+c)\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211548,"user_id":null,"body":"return function(a, b, c)\n  return math.max(a*b*c, (a+b)*c, a*(b+c), a+b+c)\nend","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5aff237c578a14752d0035ae":[{"id":211549,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(...)\n  local sum = 0\n\n  for k,v in pairs({...})  do\n    sum = sum + v*v\n  end\n  \n  return math.floor(math.sqrt(sum)\/2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211550,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(age1,age2,age3,age4,age5,age6,age7,age8)\n  local ages = {age1,age2,age3,age4,age5,age6,age7,age8}\n  local sum = 0\n  for _, age in ipairs(ages) do\n    sum = sum + age*age\n  end\n  return (sum^0.5)\/\/2\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211551,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(...)\n  local sum_of_squares = 0\n  for i = 1, 8 do\n    sum_of_squares = sum_of_squares + select(i, ...)^2\n  end\n  return sum_of_squares^.5 \/\/ 2;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211552,"user_id":198,"body":"Predicter = {};\nfunction Predicter.predict_age(...)\n    local n = 0\n\n    for _, v in pairs({...}) do\n        n = n + v*v\n    end\n\n    return math.modf(math.sqrt(n)\/2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211553,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(...)\n  local ages = {...}\n  local sum = 0\n  for i=1, #ages do\n    sum = sum + ages[i]^2\n  end\n  return math.sqrt(sum) \/\/ 2\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211554,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(age1,age2,age3,age4,age5,age6,age7,age8)\n  \n  age_1 = age1 * age1\n  age_2 = age2 * age2\n  age_3 = age3 * age3\n  age_4 = age4 * age4\n  age_5 = age5 * age5\n  age_6 = age6 * age6\n  age_7 = age7 * age7\n  age_8 = age8 * age8\n  \n  sum = age_1 + age_2 + age_3 + age_4 + age_5 + age_6 + age_7 + age_8\n  root = math.sqrt(sum)\n  result = (root - root % 2) \/ 2\n  \n  return result;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211555,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(...)\n  local t = { ... }\n  local s = 0\n  for _, v in ipairs(t) do\n    s = s + v * v\n  end\n  return math.floor(math.sqrt(s) \/ 2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211556,"user_id":17,"body":"Predicter = {};\nfunction Predicter.predict_age(age1,age2,age3,age4,age5,age6,age7,age8)\n  return math.floor(math.sqrt(age1 ^ 2 + age2 ^ 2 + age3 ^ 2 + age4 ^ 2 + age5 ^ 2 + age6 ^ 2 + age7 ^ 2 + age8 ^ 2) \/ 2);\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211557,"user_id":null,"body":"Predicter = {}\n\n-- predict_age gets a list of ages and predicts how old\n-- people would get\n--\n-- @return number\nfunction Predicter.predict_age(...)\n  -- Store all arguments in a table so we can iterate\n  -- over them later\n  local ages = {...}\n  \n  -- Multiply each age by itself\n  for idx, age in ipairs(ages) do\n    if type(age) == \"number\" then\n      ages[idx] = ages[idx] * age\n    end\n  end\n  \n  -- Sum all the ages and store them in a variable\n  local ages_sum = 0\n  for _, age in ipairs(ages) do\n    ages_sum = ages_sum + age\n  end\n  \n  -- Take the square root of the ages sum and divide it by two\n  -- and return it\n  return math.floor(math.sqrt(ages_sum) \/ 2)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211558,"user_id":null,"body":"Predicter = {};\nfunction Predicter.predict_age(age1,age2,age3,age4,age5,age6,age7,age8)\n  local ages = {age1, age2, age3, age4, age5, age6, age7, age8}\n  local r = 0\n  for i,v in ipairs(ages) do\n    ages[i] = ages[i] * ages[i]\n    r = r + tonumber(ages[i])\n  end\n  r = math.sqrt(r)\n  r = r \/ 2\n  r = math.floor(r)\n  return r;\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b06c990908b7eea73000069":[{"id":211559,"user_id":492,"body":"local kata = {}\n\nlocal function modul(x, y)\n    if (x ~= 0.0 or y ~= 0.0) then\n        return math.sqrt(x * x + y * y)\n    end\n    return 0.0\nend\n\nfunction kata.f(x, y, eps) \n    if (modul(x, y) >= 1.0) then\n        return -1\n    end\n    return math.floor(math.log(eps) \/ math.log(modul(x, y)))\nend\n\nreturn kata\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211560,"user_id":null,"body":"local kata = {}\n\nfunction mod(x,y)\n    if(x~=0 or y~=0)then\n        return math.sqrt(x^2+y^2)\n    else\n      return 0\n    end\nend\n\nfunction kata.f(x,y,eps) \n    if(mod(x,y)>=1)then\n        return -1\n    end\n    return math.floor(math.log(eps)\/math.log(mod(x,y)))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211561,"user_id":null,"body":"local kata = {}\n\nfunction kata.f(x, y, eps) \n    local r = (x ^ 2 + y ^ 2) ^ .5\n    return r < 1 and math.log(eps, r) - 1 or -1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211562,"user_id":null,"body":"local kata = {}\n\nfunction kata.f(x, y, eps) \n  -- our cute little test complex number, now in amazing table form !!!\n  local zi = {x, y}\n-- complex number management -- AWFUL CRUFT STARTS HERE ----------\n  -- multiplication\n  local zmul = function(l, r)\n    return { l[1]*r[1] - l[2]*r[2], l[1]*r[2] + l[2]*r[1] }\n  end\n  -- powers -- IS THERE A BETTER WAY TO DO THIS ? DO I EVEN CARE ???\n  local zpow = function(z, p)\n    -- if p == 0 then return {1, 0} end -- haha\n    local zr = { z[1], z[2] }\n    for i = 1, p-1, 1 do\n      zr = zmul(z, zr)\n    end\n    return zr\n  end\n  -- abs\n  local modsq = function(z) return z[1]^2 + z[2]^2 end\n-- AWFUL CRUFT ENDS HERE ----------\n  \n  -- the big daddy S himself\n  -- turns out the partial sum is just z - z^n+1\n  local S = function(n, z)\n    local zn = zpow(z, n+1)\n    return {z[1] - zn[1], z[2] - zn[2]}\n  end\n  -- properties of S :\n  -- S converges to z (shocking, I know)\n  -- D is |z| < 1\n  \n  -- divergence condition\n  if modsq(zi) >= 1 then return -1 end \n  \n  -- are we cool yet ?\n  local compare = function(z1, z2, eps)\n    local delta = { z1[1] - z2[1], z1[2] - z2[2] }\n    return modsq(delta) > eps^2 \n  end\n  \n  -- finally we can compute n\n  local n = 0\n  while(compare(zi, S(n,zi), eps)) do\n    n = n + 1\n  end\n  return n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211563,"user_id":null,"body":"local kata = {}\n\nfunction kata.f(x, y, eps)\n    -- radius of convergence is 1\n    if x^2 + y^2 > 1 then\n        return -1\n    end\n    \n    -- series converges to z (lim = z)\n    -- difference between series with n terms and lim is -z^(n+1)\n    -- |-z^n| = |z|^n\n    local n = 2\n    while (x^2+y^2)^(n\/2) > eps do\n        n = n + 1\n    end\n    return n - 1\nend\n    \n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211564,"user_id":53,"body":"local kata = {}\n\nfunction kata.f(x, y, eps)\n    local function hypot(a, b)\n      return math.sqrt(a * a + b * b)\n    end\n    local ans = math.log(eps) \/ math.log(hypot(x, y))\n    if ans < 0 then return -1 else return math.floor(ans) end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211565,"user_id":168,"body":"local kata = {}\n\nfunction kata.f(x, y, eps) \n  local a = (x ^ 2 + y ^ 2) ^ 0.5\n  if a > 1 then \n    return -1\n  elseif a == 1 then \n    return 1\n  else\n    return math.log(eps, a)\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211566,"user_id":null,"body":"local kata = {}\n\nfunction kata.f(x, y, eps) \n  local z0, zn, n = (x^2 + y^2)^0.5, 0, 1\n  if z0 >= 1 then return -1 end\n  repeat zn, n = zn + z0 ^ n, n + 1\n  until math.abs((1 - z0) * zn - z0) < eps\n  return n - 1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211567,"user_id":null,"body":"local kata = {}\nfunction kata.mul(x1, y1, x2, y2)\n    return x1*x2-y1*y2, x2*y1+x1*y2\nend\nfunction kata.f(x, y, eps)\n    local ax, ay, rx, ry, sx, sy, count = 0, 0, x, y, x, y, 1\n    repeat                                                                      \n        sx, sy = kata.mul(sx, sy, x, y)\n        rx, ry = rx+sx, ry+sy\n        ax, ay = kata.mul(1-x, -y, rx, ry)\n        count = count+1\n    until math.sqrt((ax-x)^2+(ay-y)^2)<eps or math.abs(1\/ax)<eps\n    return math.abs(1\/ax)<eps and -1 or count\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b0c0ec907756ffcff00006e":[{"id":211568,"user_id":492,"body":"local kata = {}\n\nfunction kata.quadratic(a, b, c)\n    return -c \/ b\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211569,"user_id":null,"body":"local kata = {}\n\nfunction kata.quadratic(a, b, c)\n  local sgnb = b<0 and -1 or b>0 and 1 or 0\n  local d = math.sqrt(b*b-4*a*c)\n  local x1 = (-b-sgnb*d)\/2\/a\n  return c\/a\/x1\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211570,"user_id":null,"body":"local kata = {}\n\nlocal MIN = -1e100\nlocal MAX =  1e100\n\nfunction binary_search(l, r, f)\n    for i=1,10000 do\n        local m = (l + r)\/2\n        if f(m) then\n            l = m\n        else\n            r = m\n        end\n    end\n    return l\nend\n\nfunction kata.quadratic(a, b, c)\n    -- I'm lazy so I'l use binsearch :D\n    local mid = binary_search(MIN, MAX, function(x)\n        local deriv = 2 * a * x + b\n        if a > 0 then\n            return deriv <= 0\n        else\n            return deriv >= 0\n        end\n    end)\n    local lroot = binary_search(MIN, mid, function(x)\n        local y = a * x * x + b * x + c\n        if a > 0 then\n            return y >= 0\n        else\n            return y <= 0\n        end\n    end)\n    local rroot = binary_search(mid, MAX, function(x)\n        local y = a * x * x + b * x + c\n        if a > 0 then\n            return y <= 0\n        else\n            return y >= 0\n        end\n    end)\n    if math.abs(lroot) <= math.abs(rroot) then\n        return lroot\n    else\n        return rroot\n    end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211571,"user_id":null,"body":"local kata = {}--official\n\nfunction kata.quadratic(a, b, c)\n  local r = math.sqrt(b^2 - 4*a*c)\n  local x1, x2 = -2*c \/ (b + r), -2*c \/ (b - r)\n  if math.abs(x1) < math.abs(x2) then\n    return x1\n  end\n  return x2\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211572,"user_id":null,"body":"local kata = {}\n\n\nkata.eps = 1E-12\n\n\nfunction kata.sign(x)\n    if x < 0 then\n        return -1\n    elseif x > 0 then\n        return 1\n    else\n        return 0\n    end\nend\n\n\nfunction kata.linear(b,c)\n    -- solve 0 = b x + c\n    if math.abs(b) < kata.eps then\n        if math.abs(c) < kata.eps then\n            return 0\n         else\n            return nil\n         end\n    end\n    return - c \/ b\nend  \n\n\nfunction kata.quadratic(a, b, c)\n    -- solve 0 = a x^2 + b x + c\n    if math.abs(a) < kata.eps then\n        return kata.linear(b,c)\n    end\n    local q = c \/ a\n    local p = b \/ a\n    -- solve 0 = x^2 + p x + q\n    local ph = p \/ 2\n    local x1 = -ph - kata.sign(ph) * math.sqrt(ph^2-q)\n    if math.abs(x1) < kata.eps then\n        return x1\n    end\n    local x2 = q \/ x1\n    if math.abs(x1) < math.abs(x2) then\n        return x1\n    else\n        return x2\n    end\nend\n\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211573,"user_id":null,"body":"local kata = {}\n\nfunction kata.quadratic(a, b, c)\n  return (2 * c) \/ (-b - math.sqrt(b * b - 4 * a * c))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211574,"user_id":null,"body":"local kata = {}\n\nlocal function equation(a, b, c)\n  return function(x)\n    return a*x*x + b*x + c\n  end\nend\nlocal merr = 1e-12\nlocal function solve(f, min, max)\n  local min_value = f(min)\n  local max_value = f(max)\n  if math.abs(min_value) < merr then\n    return min\n  end\n  local mid = min + (max - min) \/ 2\n  local mid_value = f(mid)\n  if mid_value * min_value < 0 then\n    return solve(f, min, mid)\n  else\n    return solve(f, mid, max)\n  end\nend\n\nfunction kata.quadratic(a, b, c)\n  return solve(equation(a, b, c), -1.e-1, 1.e-1)\nend\n\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211575,"user_id":null,"body":"local kata = {}\n\nfunction kata.quadratic(a, b, c)\n    return (2*c)\/(-b-math.sqrt(b^2-4*a*c))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211576,"user_id":null,"body":"local kata = {}\n\nfunction kata.quadratic(a, b, c)\n\tlocal r = math.sqrt(b^2 - 4*a*c)\n\tlocal x1, x2 = -2*c \/ (b + r), -2*c \/ (b - r)\n  if math.abs(x1) < math.abs(x2) then\n    return x1\n  end\n  return x2\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211577,"user_id":null,"body":"local kata = {}\nfunction kata.quadratic(a,b,c)\n    return (c*-1)\/b\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b1cd19fcd206af728000056":[{"id":211578,"user_id":null,"body":"local function U(x)\n  -- U(x) = x + 2x^2 + 3x^3 + 4x^4 + ...\n  -- U(x) = (x + x^2 + x^3 + x^4 + ...) + x*U(x)\n  -- U(x) = x\/(1-x) + x*U(x)\n  -- U(x) * [1 - x] = x\/(1-x)\n  -- U(x) = x \/ (1-x)^2\n  return x \/ (1 - x) ^ 2\nend\n\n-- inverse of U\nlocal function u(y)\n  -- y = x \/ (1 - x)^2\n  -- y * (x^2 - 2x + 1) = x\n  -- (y)x^2 + (-2y - 1)x + (y) = 0\n  local a = y\n  local b = -2 * y - 1\n  local c = y\n  return (-b - math.sqrt(b^2 - 4 * a * c)) \/ (2 * a)\nend\n\nlocal kata = {}\nfunction kata.solve(m)\n  return u(m)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211579,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)\n  return 1 + (1 - math.sqrt(4*m+1))\/(2*m)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211580,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)\n    return ( 2 * m + 1 - math.sqrt(4 * m +1) ) \/ ( 2 * m )\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211581,"user_id":492,"body":"local kata = {}\nfunction kata.solve(m)\n  local s = math.sqrt(4.0 * m + 1.0)\n  return (2.0 * m + 1.0 - s) \/ (2.0 * m) \nend\nreturn kata\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211582,"user_id":492,"body":"local kata = {}\nfunction kata.solve(m)\n  local s = math.sqrt(4.0 * m + 1.0)\n  return (2.0 * m + 1.0 - s) \/ (2.0 * m) \nend\nreturn kata\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211583,"user_id":168,"body":"local kata = {}\nfunction kata.solve(m)\n  return m \/ (0.5 + m + math.sqrt(m + 0.25))\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211584,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)\n  -- sum(n*x^n) = x\/(x-1)^2, n=1..inf\n  -- doing some math and using the negative solution of the quadratic equation you come to this:\n  return ((2.0*m + 1) - math.sqrt(4*m + 1))\/(2*m)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211585,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)\n  return 1 - ((m + 0.25) ^ 0.5 - 0.5) \/ m\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211586,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)                                                          \n    -- https:\/\/people.math.osu.edu\/husen.1\/teaching\/530\/series.pdf\n    -- geometric series\n    -- s0 = 1+x+x^2+...\n    -- x*s0 = x+x^2+x^3+...\n    -- s0-x*s0 = 1\n    -- s1 = 1+2*x+3*x^2+...\n    -- x*s1 = x+2*x^2+3*x^3+...\n    -- s1-x*s1 = s0 = 1\/(1-x)\n    -- x*s1 = x\/(1-x)^2\n    -- m = x\/(x-1)^2\n    -- m*x^2-(2*m+1)*x+m = 0\n    local a, b, c = m, -(1+2*m), m\n    return (-b-math.sqrt(b^2-4*a*c))\/(2*a)\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211587,"user_id":null,"body":"local kata = {}\nfunction kata.solve(m)\n  -- your code\n  local a = 2 * m\n  return (a + 1 - math.sqrt(2 * a + 1)) \/ a\nend\nreturn kata","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b358a1e228d316283001892":[{"id":211588,"user_id":null,"body":"return {\n  get_strings = function(s)\n      local r = '';\n      s = s:lower();\n      s:gsub('[a-zA-Z]', function(c)\n          if(r:find(c)) then return end\n          r = r.. c.. ':'.. ('*'):rep(#s:gsub('[^'..c..']', '')).. ',';\n      end)\n      return r:sub(0, #r - 1);\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211589,"user_id":null,"body":"return {\n  get_strings = function(city)\n    city = city:gsub('%W', ''):lower()\n\n    local counts = {}\n    for c in city:gmatch '.' do counts[c] = (counts[c] or 0) + 1 end\n    \n    local res = {}\n    for c in city:gmatch '.' do\n      if counts[c] then\n        res[#res+1] = ('%s:%s'):format(c, ('*'):rep(counts[c]))\n        counts[c] = nil\n      end\n    end\n    return table.concat(res, ',')\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211590,"user_id":null,"body":"return {\n    get_strings = function(city)\n        local map, chars, ret = {}, \"\", \"\"\n        for c in string.gmatch(city:lower(), \"%a\") do\n            chars = chars..(map[c]~=nil and '' or c)\n            map[c] = map[c]~=nil and map[c]+1 or 1\n        end\n        for c in string.gmatch(chars, \"%a\") do\n            ret = ret..c..':'..string.rep('*', map[c])..','                                                                                   \n        end\n        return ret:sub(1,-2)\n    end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211591,"user_id":null,"body":"return {\n  get_strings = function(city)\n    local tOrder = {}\n    local tCount = {}\n    local tOutput = {}\n    for char in city:gmatch(\"%a\") do\n      char = char:lower()\n      if not tCount[char] then\n        tCount[char] = 0\n        table.insert(tOrder, char)\n      end\n      tCount[char] = tCount[char] + 1\n    end\n    for i, char in pairs(tOrder) do\n      tOutput[i] = string.format(\"%s:%s\", char, string.rep(\"*\", tCount[char]))\n    end\n    return table.concat(tOutput, \",\")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211592,"user_id":null,"body":"function len(Array)\n  local length = 1\n  for _ in pairs(Array) do length = length + 1 end\n  return length\nend\n\nfunction string.insert(str1, str2, pos)\n    return str1:sub(1,pos)..str2..str1:sub(pos+1)\nend\n\n\nreturn {\n  get_strings = function(city)\n    local characters = {}\n    for v in string.gmatch(city, \"([^%s])\") do\n      v = string.lower(v)\n      if not characters[tostring(v)..tostring(\":\")] then\n        characters[tostring(v)..tostring(\":\")] = {\n          Index = len(characters),\n          Reps = 1\n        }\n      else\n        characters[tostring(v)..tostring(\":\")].Reps = characters[tostring(v)..tostring(\":\")].Reps + 1\n      end\n    end\n    local converted = ''\n    for i = 1,len(characters) do\n      for dict,v in pairs(characters) do\n        if v.Index == i then\n          if string.len(converted) == 0 then\n            converted = string.insert(converted,dict,string.len(converted))\n            for i = 1,v.Reps do converted = string.insert(converted,\"*\",string.len(converted)) end\n          else\n            converted = string.insert(converted,',',string.len(converted))\n            converted = string.insert(converted,dict,string.len(converted))\n            for i = 1,v.Reps do converted = string.insert(converted,\"*\",string.len(converted)) end\n          end\n          break\n        end\n      end\n    end\n    return converted;\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211593,"user_id":null,"body":"return {get_strings = function(s)\n    local r = ''\n    s = s:lower()\n\n    s:gsub('[a-zA-Z]', function(c)\n        if r:find(c) then\n            return\n        end\n\n        local _, count = s:gsub(c, '_')\n        r = r .. c .. ':' .. ('*'):rep(count) .. ','\n    end)\n\n    return r:sub(1, #r - 1)\nend}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211594,"user_id":null,"body":"function find(tbl, val)\n   for i = 1, #tbl do\n      \n      if tbl[i] == val then\n         return tbl[i]\n      end\n   end\nend\n\nreturn {\n  \n  \n  get_strings = function(city)\n      local lowered = city:lower()\n      local tbl = {}\n    \n      for i = 1, #lowered do\n          local char = lowered:sub(i, i)\n          local _, count = lowered:gsub(char, char)\n          local final = char .. \":\" .. string.rep(\"*\", count)\n      \n          if not find(tbl, final) and char ~= \" \" then\n            table.insert(tbl, final)\n          end\n      end\n    \n      return table.concat(tbl, \",\");\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211595,"user_id":null,"body":"return {\n  get_strings = function(city)\n    local t, u, s = {}, {}, \"\"\n    city:gsub(\"%S\", function(c) \n        c=c:lower()\n        if t[c] then t[c]=t[c] + 1\n        else t[c]=1; table.insert(u,c) end\n      end )\n    for _,c in ipairs(u) do\n      s = s..c..\":\"..string.rep(\"*\", t[c])..\",\"\n    end\n    return s:sub(1,-2)\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211596,"user_id":null,"body":"return {\n  get_strings = function(city)\n    local order = {}\n    local counts = {}\n    local String = \"\"\n    for c in city:lower():gmatch(\"[a-z]\") do\n      local seen_before = counts[c]\n      if not seen_before then\n        table.insert(order, c)\n        counts[c] = 1\n      else\n        counts[c] = counts[c] + 1\n      end\n    end\n    local rTable = {}\n    for i, r in ipairs(order) do\n      local rOrder = r  .. \":\".. string.rep(\"*\", counts[r])\n      table.insert(rTable, rOrder)\n    end\n    return table.concat(rTable, \",\")\n  end\n}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211597,"user_id":null,"body":"get_strings = function(city)\n  city = city:lower()\n  local format, str = '%s:%s,',''\n  for i in city:gmatch('%a') do\n    if not str:find(i) then\n      str = str..(format:format(i,('*'):rep(({city:gsub(i,i)})[2])))\n    end\n  end\n  return str:sub(1,-2)\nend\nreturn {get_strings = get_strings}","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b40b666dfb4291ad9000049":[{"id":211598,"user_id":null,"body":"local solution = {}\n\nlocal function move(x, y, angle, dist)\n   return\n      x+math.sin(angle)*dist,\n      y+math.cos(angle)*dist\nend\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n   local x, y = 0, 0\n   x, y = move(x, y, math.rad(alpha), a)\n   x, y = move(x, y, math.rad(beta+90),  b)\n   x, y = move(x, y, math.rad(gamma+180), c)\n   local angle = math.deg(math.atan(x, y))\n   return {\n     math.floor(math.sqrt(x*x+y*y)+0.5),\n     math.floor(angle),\n     math.floor(angle*60  ) % 60,\n     math.floor(angle*60^2) % 60\n   }\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211599,"user_id":53,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n  local u,v,w,x,y,r\n  u = alpha * math.pi \/ 180\n  v = beta * math.pi \/ 180\n  w = gamma * math.pi \/ 180\n  x = a *  math.cos(u) - b *  math.sin(v) - c *  math.cos(w)\n  y = a *  math.sin(u) + b *  math.cos(v) - c *  math.sin(w)\n  t = math.atan2(y, x) * 180 \/ math.pi\n  r = math.sqrt(x * x + y * y)\n  return {math.floor(r+0.5), math.floor(t), math.floor(t*60)%60, math.floor(t*3600)%60}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211600,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma)\n  local sin, cos, rad, floor = math.sin, math.cos, math.rad, math.floor\n  \n  local x = a * cos( rad(alpha) ) + b * cos( rad(90 + beta) ) + c * cos( rad(180 + gamma) )\n  local y = a * sin( rad(alpha) ) + b * sin( rad(90 + beta) ) + c * sin( rad(180 + gamma) )\n    \n  local r, d, m, s = floor( math.sqrt(x * x + y * y) + 0.5 )\n  \n  d = math.deg( math.atan(y \/ x) ) % 180\n  m = d % 1 * 60\n  s = m % 1 * 60\n  \n  return {r, floor(d), floor(m), floor(s)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211601,"user_id":null,"body":"local solution = {}\nfunction solution.solve(a, b, c, alpha, beta, gamma)\n    return {math.floor(math.sqrt((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))*(a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))+(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))*(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180)))+0.5),math.floor((math.floor(math.acos((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))\/math.sqrt((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))*(a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))+(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))*(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))))*180*3600\/math.pi))\/3600),math.floor(((math.floor(math.acos((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))\/math.sqrt((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))*(a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))+(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))*(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))))*180*3600\/math.pi))%3600)\/60),((math.floor(math.acos((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))\/math.sqrt((a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))*(a*math.cos(alpha*math.pi\/180)-b*math.sin(beta*math.pi\/180)-c*math.cos(gamma*math.pi\/180))+(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))*(a*math.sin(alpha*math.pi\/180)+b*math.cos(beta*math.pi\/180)-c*math.sin(gamma*math.pi\/180))))*180*3600\/math.pi))%3600)%60}\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211602,"user_id":492,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n    local alpha, beta, gamma = alpha * math.pi \/180, beta * math.pi \/180,  gamma * math.pi \/ 180\n    local x = a *  math.cos(alpha) - b *  math.sin(beta) - c *  math.cos(gamma)\n    local y = a *  math.sin(alpha) + b *  math.cos(beta) - c *  math.sin(gamma)\n    local r =  math.sqrt(x * x + y * y)\n    local theta = math.floor(math.acos(x\/r) * 180 * 3600 \/ math.pi)\n    local d = math.floor(theta \/ 3600)\n    local mm = theta % 3600\n    local m = math.floor(mm \/ 60)\n    local s = mm % 60\n    return {math.floor(r+0.5), d, m, s}\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211603,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n  local x, y = 0,0\n  for _,c in ipairs({{a,alpha},{b,beta+90},{c,gamma+180}}) do\n    local ang = c[2]\/180*math.pi\n    x, y = x+c[1]*math.cos(ang), y+c[1]*math.sin(ang)\n  end\n  local dist = math.floor((x*x+y*y)^.5+.5)\n  local a    = math.atan2(y,x)*180\/math.pi\n  local ang  = math.floor(a)\n  local m    = (a-ang)*60\n  local min  = math.floor(m)\n  local sec  = math.floor((m-min)*60)\n  return {dist,ang,min,sec}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211604,"user_id":168,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n  alpha, beta, gamma = math.rad(alpha), math.rad(beta), math.rad(gamma)\n  local x = a * math.cos(alpha) - b * math.sin(beta) - c * math.cos(gamma)\n  local y = a * math.sin(alpha) + b * math.cos(beta) - c * math.sin(gamma)\n  local d = math.sqrt(x * x + y * y);\n  local phi = math.deg(math.atan2(y, x))\n  if phi < 0 then phi = phi + 180 end\n  local phi0 = math.floor(phi)\n  phi = 60 * (phi - phi0)\n  local phi1 = math.floor(phi)\n  return {math.floor(d + 0.5), phi0, phi1, math.floor(60 * (phi - phi1))}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211605,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n    local xA, yA, xB, yB, xC, yC = 0, 0, 0, 0, 0, 0\n    alpha = alpha*math.pi\/180\n    beta = beta*math.pi\/180\n    gamma = gamma*math.pi\/180\n    xA = math.cos(alpha)*a\n    yA = math.sin(alpha)*a\n    xB = xA + math.cos(beta+math.pi\/2)*b\n    yB = yA + math.sin(beta+math.pi\/2)*b\n    xC = xB + math.cos(gamma+math.pi)*c\n    yC = yB + math.sin(gamma+math.pi)*c\n    local lengthOC = math.sqrt(xC*xC+yC*yC)\n    local angle = math.acos(xC\/lengthOC)\/math.pi*180\n    local degrees = math.floor(angle)\n    local minutes = math.floor(angle%math.floor(angle)*60)\n    local seconds = math.floor(angle%math.floor(angle)*60%minutes*60)\n    if lengthOC%math.floor(lengthOC) >= 0.5 then lengthOC = math.ceil(lengthOC)\n    else lengthOC = math.floor(lengthOC) end\n    return {lengthOC, degrees, minutes, seconds}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211606,"user_id":null,"body":"local solution = {}\nfunction solution.solve(a, b, c, alpha, beta, gamma) \n  local coord={0,0} --x,y coordinates\n  local alpha_rad,beta_rad,gamma_rad=alpha*math.pi\/180,beta*math.pi\/180,gamma*math.pi\/180\n  coord[1]=coord[1]+a*math.cos(alpha_rad)\n  coord[2]=coord[2]+a*math.sin(alpha_rad)\n  coord[1]=coord[1]-b*math.sin(beta_rad)\n  coord[2]=coord[2]+b*math.cos(beta_rad)\n  coord[1]=coord[1]-c*math.cos(gamma_rad)\n  coord[2]=coord[2]-c*math.sin(gamma_rad)\n  local CO=math.sqrt(coord[1]^2+coord[2]^2)\n  if math.floor(CO+0.5)==math.floor(CO) then CO=math.floor(CO)\n  else CO=math.ceil(CO) end\n  local tOC=math.atan(coord[2]\/coord[1])\n  if tOC<0 then tOC=180-math.abs(tOC)*180\/math.pi\n  else tOC=tOC*180\/math.pi end\n  local tOC_deg=math.floor(tOC)\n  local tOC_min=math.floor((tOC-tOC_deg)\/\/(1\/60))\n  local tOC_sec=math.floor((tOC-tOC_deg-tOC_min\/60)\/\/(1\/3600))\n  return {CO,tOC_deg,tOC_min,tOC_sec}\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211607,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve(a, b, c, alpha, beta, gamma)\n    local x,y = 0,0\n    x = x + a * math.cos(math.rad(alpha))\n    y = y + a * math.sin(math.rad(alpha))\n    x = x + b * math.cos(math.rad(beta) + math.pi \/ 2)\n    y = y + b * math.sin(math.rad(beta) + math.pi \/ 2)\n    x = x + c * math.cos(math.rad(gamma) + math.pi)\n    y = y + c * math.sin(math.rad(gamma) + math.pi)\n    -- your code\n    local dist = math.sqrt(x*x + y*y)\n    local angle = math.deg(math.atan2(y,x))\n    local minutes = (angle - math.floor(angle)) * 60\n    local seconds = (minutes - math.floor(minutes)) * 60\n    return {math.floor(dist + 0.5),math.floor(angle),math.floor(minutes),math.floor(seconds)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b73fe9fb3d9776fbf00009e":[{"id":211608,"user_id":881,"body":"local kata = {}\n\nfunction kata.sum_of_differences(arr)\n    return #arr == 0 and 0 or math.max(table.unpack(arr)) - math.min(table.unpack(arr))\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211609,"user_id":53,"body":"return function (arr)\n  if #arr == 0 then\n    return 0\n  else\n    local m, n = math.max(table.unpack(arr)), math.min(table.unpack(arr))\n    return m - n\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211610,"user_id":168,"body":"local function sum_of_differences(arr)\n    return #arr == 0 and 0 or math.max(table.unpack(arr)) - math.min(table.unpack(arr))\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211611,"user_id":null,"body":"function compare(a,b)\n  return a>b\nend\n\nlocal function sum_of_differences(arr)\n  table.sort(arr,compare)\n  local sum=0\n  \n  for i=1,#arr-1 do\n    sum=sum+(arr[i]-arr[i+1])\n  end\n    \n  return sum\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211612,"user_id":null,"body":"local function sum_of_differences(arr)\n    local differences = {}\n    local total = 0\n    table.sort(arr, function(i, j) return i > j end)\n    for i = 2, #arr do\n      differences[#differences + 1] = arr[i - 1] - arr[i]\n    end\n    for i = 1, #differences do\n      total = total + differences[i]\n    end\n    return total\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211613,"user_id":null,"body":"local function sum_of_differences(arr)\n  local decending = function(a, b) return a > b end\n  table.sort(arr, decending)\n  local diff_sum = 0\n  \n  for k = 1, #arr - 1 do\n    diff_sum = diff_sum + (arr[k] - arr[k + 1])\n  end\n  \n  return diff_sum\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211614,"user_id":1474,"body":"local function sum_of_differences(arr)\n  if #arr < 2 then return 0 end\n  return math.max(table.unpack(arr)) - math.min(table.unpack(arr))\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211615,"user_id":null,"body":"local function sum_of_differences(arr)\n  table.sort(arr)\n  local sum = 0\n  for i = 2, #arr do\n    sum = sum + arr[i]-arr[i-1]\n  end\n  return sum\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211616,"user_id":null,"body":"local function sum_of_differences(arr)\n    local sum = 0\n    table.sort(arr)\n    for i=1, #arr- 1, 1 do\n      sum = sum + (arr[i+1]-arr[i])\n    end\n    return sum\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211617,"user_id":null,"body":"local function sum_of_differences(arr)\n  if (#arr < 2) then\n    return 0\n  else\n    table.sort(arr)\n    return arr[#arr] - arr[1]\n  end\nend\n\nreturn sum_of_differences","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5b853229cfde412a470000d0":[{"id":211618,"user_id":168,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  return math.abs(dad - 2 * son)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211619,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(discord_moderator, kitten)\n  sleep_deprivation_retardation = kitten * 2\n  if sleep_deprivation_retardation > discord_moderator then\n    return (sleep_deprivation_retardation - discord_moderator)\n  else if sleep_deprivation_retardation < discord_moderator then\n      return (discord_moderator - sleep_deprivation_retardation)\n  else\n      return 0\n  end\nend\n                                         end\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211620,"user_id":null,"body":"local kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  return math.abs(dad - 2*son)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211621,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  twiceAge = son * 2\n  if twiceAge > dad then\n    result = twiceAge - dad\n  elseif twiceAge < dad then\n    result = dad - twiceAge\n  else\n    result = 0\n  end\n  \n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211622,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  return (dad-(son*2))>0 and dad-(son*2) or (dad-(son*2))*(-1)\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211623,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  local dif\n  local dadn = dad\n  local sonn = son\n  \n  if son > dad\/2 then\n    for i = 100, 0, -1 do\n      if sonn == dadn\/2 then\n        dif = son - sonn\n        break\n      end\n      \n      dadn = dadn - 1\n      sonn = sonn - 1\n    end\n  else\n    for i = 100, 0, -1 do\n      if sonn == dadn\/2 then\n        dif = sonn - son\n        break\n      end\n      \n      dadn = dadn + 1\n      sonn = sonn + 1\n    end\n  end\n  \n  return dif\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211624,"user_id":null,"body":"local abs = math.abs\n\nlocal function _(f, s)\n    return abs(f - s * 2)\nend\nreturn setmetatable({}, { __index = function()return _;end })","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211625,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  local temp = son*2;\n  if (dad - temp < 0) then\n    return (dad - temp) * -1\n  end\n  return dad-temp\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211626,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  twiceson = son * 2\n  difference = dad - twiceson\n  return math.abs(difference)\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211627,"user_id":null,"body":"kata = {}\n\nfunction kata.twice_as_old(dad, son)\n  output = dad - 2 * son\n  if output > 0 then\n    return output\n  else\n    return -output\n  end\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5c9d62cbf1613a001af5b067":[{"id":211628,"user_id":168,"body":"local solution = {}\n\nfunction solution.radix_tree(...)\n  local function len(trie)\n    local n = 0\n    for _ in pairs(trie) do\n      n = n + 1\n    end\n    return n\n  end    \n  \n  local function add(trie, word)\n    if #word > 0 then\n      local h, t = word:sub(1, 1), word:sub(2)\n      if not trie[h] then\n        trie[h] = {}\n      end\n      add(trie[h], t)\n    end\n  end\n  \n  local function merge(trie)\n    local res = {}\n    for k, v in pairs(trie) do\n      v = merge(v)\n      if len(v) == 1 then\n        for k1, v1 in pairs(v) do\n          res[(k .. k1):gsub('%$', '')] = v1\n        end\n      else\n        v['$'] = nil\n        res[k] = v\n      end\n    end\n    return res\n  end\n  \n  local trie = {}\n  for _, w in ipairs({...}) do\n    add(trie, w .. '$')\n  end\n  trie = merge(trie)\n  trie['$'] = nil\n  return trie\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211629,"user_id":575,"body":"local solution = {}\n\nfunction solution.radix_tree(...)\n  local function common_start_length(s1, s2)\n    local minlen = math.min(#s1, #s2)\n    for i = 1, minlen do\n      if s1:byte(i) ~= s2:byte(i) then return i - 1 end\n    end\n    return minlen\n  end\n  local function insert_word(tree, w)\n    if w == '' or tree[w] then return tree end\n    local mcp = #w\n    local matched_word  -- there can only be a single matching word\n    -- since if there were more, they would have been to be previously broken\n    for k in pairs(tree) do\n      local m = common_start_length(w, k)\n      if m > 0 then\n        matched_word = k\n        mcp = math.min(mcp, m)\n        break\n      end\n    end\n    if not matched_word then\n      tree[w] = {}\n      return tree\n    end\n    -- w ~= matched_word (checked at the beginning)\n    if #matched_word == mcp then\n      return insert_word(tree[matched_word], w:sub(mcp+1))\n    end\n    -- #matched_word > mcp, we need to break it:\n    local s, e = w:sub(1, mcp), matched_word:sub(mcp+1)\n    tree[s] = insert_word({[e]=tree[matched_word]}, w:sub(mcp+1))\n    tree[matched_word] = nil\n    return tree\n  end\n\n  local tree = {}\n  for i = 1, select('#', ...) do\n    insert_word(tree, select(i, ...))\n  end\n  return tree\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211630,"user_id":575,"body":"local solution = {}\n\nlocal function longest_common_prefix(w1, w2)\n    local length = math.min(#w1, #w2)\n    for i = 1, length, 1 do\n        if w1:sub(i, i) ~= w2:sub(i, i) then\n            return w1:sub(1, i - 1)\n        end\n    end\n    return w1:sub(1, length)\nend\n\nlocal function insert(tree, word)\n    if word == \"\" then\n        return\n    end\n\n    local inserted = false\n\n    for key, value in pairs(tree) do\n        local prefix = longest_common_prefix(key, word)\n\n        if prefix == \"\" then\n            goto continue\n        end\n\n        inserted = true\n\n        local length = #prefix\n        local suffix = word:sub(-(#word - length))\n\n        if prefix == suffix then\n            suffix = \"\"\n        end\n\n        if prefix ~= key then\n            tree[key] = nil\n            tree[prefix] = {}\n            tree[prefix][key:sub(-(#key - length))] = value\n            if suffix ~= \"\" then\n                tree[prefix][suffix] = {}\n            end\n        elseif suffix ~= \"\" then\n            insert(value, suffix)\n        end\n\n        break\n\n        ::continue::\n    end\n\n    if inserted == false then\n        tree[word] = {}\n    end\nend\n\nfunction solution.radix_tree(...)\n    local words = table.pack(...)\n    local tree = {}\n\n    for _, word in ipairs(words) do\n        insert(tree, word)\n    end\n\n    return tree\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211631,"user_id":null,"body":"local solution = {}\n\nlocal WORKAROUND_TO_PASS_TEST_CASES = true\n\nfunction solution.radix_tree(...)\n  local function common_start_length(s1, s2)\n    local minlen = math.min(#s1, #s2)\n    for i = 1, minlen do\n      if s1:byte(i) ~= s2:byte(i) then return i - 1 end\n    end\n    return minlen\n  end\n  local function insert_word(tree, w)\n    if w == '' or tree[w] then return tree end\n    local mcp = #w\n    local matched_word  -- there can only be a single matching word\n    -- since if there were more, they would have been to be previously broken\n    for k in pairs(tree) do\n      local m = common_start_length(w, k)\n      if m > 0 then\n        matched_word = k\n        mcp = math.min(mcp, m)\n        break\n      end\n    end\n    if not matched_word then\n      tree[w] = {}\n      return tree\n    end\n    -- w ~= matched_word (checked at the beginning)\n    if #matched_word == mcp then\n      -- this is one of the bugs I had to inject:\n      if WORKAROUND_TO_PASS_TEST_CASES then\n        if w:sub(mcp+1) == matched_word then return tree end\n      end\n      \n      return insert_word(tree[matched_word], w:sub(mcp+1))\n    end\n    -- #matched_word > mcp, we need to break it:\n    local s, e = w:sub(1, mcp), matched_word:sub(mcp+1)\n    if WORKAROUND_TO_PASS_TEST_CASES then\n      tree[s] = {[e]=tree[matched_word]}\n      -- and this is the other one:\n      if s ~= w:sub(mcp+1) then\n        insert_word(tree[s], w:sub(mcp+1))\n      end\n    else\n      tree[s] = insert_word({[e]=tree[matched_word]}, w:sub(mcp+1))\n    end\n    tree[matched_word] = nil\n    return tree\n  end\n\n  local tree = {}\n  print '---'\n  print(...)\n  for i = 1, select('#', ...) do\n    insert_word(tree, select(i, ...))\n  end\n  return tree\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5cc70653658d6f002ab170b5":[{"id":211632,"user_id":null,"body":"local solution = {}\n\nfunction solution.sqrModulus(z)\n  if z[1] ~= 'cart' and z[1] ~= 'polar' then return {false, -1, 1} end\n  for i = 2, #z do if type(z[i]) ~= 'number' or z[i]%1 ~= 0 then return {false, -1, 1} end end\n\n  local sum = 0\n  local step = 1\n  if z[1] == 'polar' then step = 2 end\n  for i = 2, #z, step do sum = sum + z[i]*z[i] end\n  local digits = {}\n  for i, d in tostring(sum):gmatch '()(.)' do digits[i] = d end\n  table.sort(digits, function(a,b)return a>b end)\n  return {true, sum, tonumber(table.concat(digits))}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211633,"user_id":168,"body":"local solution = {}\n\n-- z is a table with a tag and other elements\n-- Other elements may be integers, floats or strings\n-- If there are floats or strings amongst these elements \n-- or if the tag is wrong the first element of the return should be \"false\"\nfunction solution.sqrModulus(z)\n  local function check()\n    for i = 2, #z do\n      if type(z[i]) ~= 'number' or math.floor(z[i]) ~= z[i] then\n        return false\n      end\n    end\n    return true\n  end\n  \n  if #z < 3 or z[1] ~= 'cart' and z[1] ~= 'polar' or not check() then\n    return {false, -1, 1}\n  end\n\n  local s = 0\n  for i = 2, #z, z[1] == 'cart' and 1 or 2 do\n    s = s + z[i] * z[i]\n  end\n  \n  local x, r = s, {}\n  while x > 0 do\n    table.insert(r, x % 10)\n    x = x \/\/ 10\n  end\n  table.sort(r, function(a, b) return a > b end)\n  \n  for _, d in ipairs(r) do\n    x = x * 10 + d\n  end\n  \n  return {true, s, x}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211634,"user_id":null,"body":"local function cartesian (z)\n    local sum = 0\n    for i = 2, #z, 2 do\n        sum = sum + z[i]^2 + z[i+1]^2\n    end\n    return math.tointeger(sum)\nend\n\nlocal function polar (z)\n    local sum = 0\n    for i = 2, #z, 2 do\n        sum = sum + z[i]^2\n    end\n    return math.tointeger(sum)\nend\n\nlocal function largestPermutation (n)\n    local t = {}\n    while n > 0 do\n        table.insert(t, math.tointeger(n % 10))\n        n = n \/\/ 10\n    end\n    table.sort(t, function (a, b) return a > b end)\n    return tonumber(table.concat(t))\nend\n\nlocal function check (z)\n    if z[1] ~= 'cart' and z[1] ~= 'polar' then return false end\n    for i=2, #z do\n        if math.type(z[i]) ~= 'integer' then return false end\n    end\n    return #z >= 3 and #z % 2 == 1\nend\n\nlocal solution = {}\n\nfunction solution.sqrModulus (z)\n    local sum, max = -1, 1\n    local valid = check(z)\n    if valid then\n        sum = z[1] == 'cart' and cartesian(z) or polar(z)\n        max = largestPermutation(sum)\n    end\n    return {valid, sum, max}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211635,"user_id":null,"body":"local solution = {}\n\n-- z is a table with a tag and other elements\n-- Other elements may be integers, floats or strings\n-- If there are floats or strings amongst these elements \n-- or if the tag is wrong the first element of the return should be \"false\"\nfunction solution.sqrModulus(z)\n    if (z[1] ~= \"cart\") and (z[1] ~= \"polar\") then\n        return {false, -1, 1}\n    end\n    local sum = 0\n    if z[1] == \"cart\" then\n        local i = 2\n        while i <= #z do\n            if type(z[i]) ~= \"number\" or type(z[i+1]) ~= \"number\" or math.floor(z[i])~=z[i] or math.floor(z[i+1])~=z[i+1] then\n                return {false, -1, 1}\n            end\n            sum = sum + z[i]*z[i] + z[i+1]*z[i+1]\n            i = i + 2\n        end\n        local s = {}\n        local sums = tostring(sum)\n        for i = 1, #sums do\n            table.insert(s, tonumber(string.sub(sums, i, i)))\n        end\n        table.sort(s, function(a, b) return a>b end)\n        local arrange = \"\"\n        for i = 1, #s do\n            arrange = arrange..tostring(s[i])\n        end\n        return {true, sum, tonumber(arrange)}\n    elseif z[1] == \"polar\" then\n        local i = 2\n        while i <= #z do\n            if type(z[i]) ~= \"number\" or type(z[i+1]) ~= \"number\" or math.floor(z[i])~=z[i] or math.floor(z[i+1])~=z[i+1] then\n                return {false, -1, 1}\n            end\n            sum = sum + z[i]*z[i]\n            i = i + 2\n        end\n        local s = {}\n        local sums = tostring(sum)\n        for i = 1, #sums do\n            table.insert(s, tonumber(string.sub(sums, i, i)))\n        end\n        table.sort(s, function(a, b) return a>b end)\n        local arrange = \"\"\n        for i = 1, #s do\n            arrange = arrange..tostring(s[i])\n        end\n        return {true, sum, tonumber(arrange)}\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211636,"user_id":null,"body":"local solution = {}\n\n-- z is a table with a tag and other elements\n-- Other elements may be integers, floats or strings\n-- If there are floats or strings amongst these elements \n-- or if the tag is wrong the first element of the return should be \"false\"\nfunction solution.sqrModulus(arr)\n    if arr[1] ~= 'polar' and arr[1] ~= 'cart' then return {false, -1, 1} end\n    s, t = 0, {}\n    for i=2,#arr,2 do \n        if type(arr[i]) ~= 'number' or not string.find(arr[i], '^%d+$') or\n           type(arr[i+1]) ~= 'number' or not string.find(arr[i+1], '^%d+$') then\n            return {false, -1, 1}\n        end\n        if arr[1] == 'polar' then\n            s = math.floor(s + arr[i]^2)\n        else\n            s = math.floor(s + arr[i]^2 + arr[i+1]^2)\n        end\n    end\n    for c in string.gmatch(tostring(s), '%d') do t[#t+1] = c end\n    table.sort(t, function(a, b) return a > b end)\n    return {true, s, tonumber(table.concat(t))}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211637,"user_id":null,"body":"local solution = {}\n\n-- main function\nfunction solution.sqrModulus(z)\n    local result = {}\n  \n    print(table.concat(z, \", \"))\n  \n    -- invalid forms of \"z\"\n    if (z[1] ~= \"cart\" and z[1] ~= \"polar\") then\n        return {false, -1, 1}\n    end\n  \n    for i = 2, #z do\n        if type(z[i]) == \"string\" or z[i] % 1 ~= 0 then\n            return {false, -1, 1}\n        end\n    end\n  \n    -- valid forms of \"z\"\n    local modulusSum = 0\n    local step = (z[1] == \"cart\" and 1) or 2\n  \n    for i = 2, #z, step do\n        modulusSum = modulusSum + z[i]^2\n    end\n    \n    return {true, modulusSum, getLargestNumber(modulusSum)}\nend\n\n-- returns the largest number that can be made\n-- from the digits of \"n\"\nfunction getLargestNumber(n)\n    local digits = {}\n    \n    while n > 0 do\n        table.insert(digits, math.floor(n % 10))\n        n = n \/\/ 10\n    end\n  \n    table.sort(digits)\n    return tonumber( table.concat(digits, \"\"):reverse() )\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211638,"user_id":492,"body":"local solution = {}\n\nfunction solution.sqrModulus(z)\n    local function greatest(s)\n        local w, j = {}, 1\n        for digit in string.gmatch(s, \"%d\") do\n            w[j] = digit\n            j = j + 1\n        end\n        table.sort(w, function(a, b) return a > b end)\n        return tonumber(table.concat(w, \"\"))\n    end\n    local function check(w)\n        if w[1] ~= \"polar\" and w[1] ~= \"cart\" then return false end\n        for i = 2, #w do\n            local el = w[i]\n            if type(el) ~= \"number\" or string.find(el, \"^%d+$\") == nil then \n                return false\n            end\n        end\n        return true\n    end\n    if not check(z) then return {false, -1, 1} end\n    local total = 0\n    if z[1] == \"polar\" then\n        for i = 2, #z - 1, 2 do\n            total = total + z[i] * z[i]\n        end\n    else\n        for i = 2, #z - 1, 2 do\n            total = total + z[i] * z[i] + z[i+1] * z[i+1]\n        end\n    end\n    return {true, total, greatest(total)}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5ce399e0047a45001c853c2b":[{"id":211639,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  local total = 0\n  local t = {}\n  \n  for i = #ls, 1, -1 do\n    total = total + ls[i]\n    t[i] = total\n  end\n  \n  table.insert(t,0)\n  \n  return t\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211640,"user_id":null,"body":"return { parts_sums=function (ls);local t={};t[#ls+1]=0\n  for i=#ls,1,-1 do t[i]=ls[i]+t[i+1] end;return t;end }","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211641,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  local res = {[#ls+1]=0}\n  local sum = 0\n  -- we just iterate from right to left storing the partial sum at each step:\n  for i = #ls, 1, -1 do\n    sum = sum + ls[i]\n    res[i] = sum\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211642,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n\n  local result = {}\n  local sum = 0\n  \n  for i = #ls + 1, 1, -1 do\n    sum = sum + (ls[i] or 0)\n    result[i] = sum\n  end\n  \n  return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211643,"user_id":198,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  local sums = {}\n  local sum = 0\n  for i = 1, #ls do\n    sum = sum + ls[i]\n  end\n  for i = 1, #ls do\n    table.insert(sums, sum)\n    sum = sum - ls[i]\n  end\n  table.insert(sums, 0)\n  return sums\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211644,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  -- your code\n  local total = 0\n  local t = {}\n  \n  for i = #ls, 1, -1 do\n    total = total + ls[i]\n    t[i] = total\n  end\n  \n  table.insert(t,0)\n  \n  return t\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211645,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  if ls[1] == nil then\n    solution[0] = 0\n    return 1\n  end\n  arr = {}\n  sum = 0\n  for i=1, #ls do\n    sum = sum + ls[i]\n  end\n  arr[#arr + 1] = sum\n  sumClear = 0\n  for i=1, #ls do\n    sumClear = sumClear + ls[i]\n    arr[#arr + 1] = sum - sumClear\n  end\n  return arr\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211646,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  reverse=function(x)\n    r={}\n    for i=#x,1,-1 do\n     table.insert(r,x[i]) \n    end\n    return r\n  end\n  res = {0}\n  cont=0\n  for i=#ls,1,-1 do\n    cont=cont+1\n    val=res[cont]+ls[i]\n    table.insert(res,val)\n  end\n  return reverse(res)\nend\n\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211647,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n    local t = {}\n    local n = 0\n  \n    for i = #ls, 1, -1 do\n        n = n + ls[i]\n        t[i] = n\n    end\n  \n    table.insert(t, 0)\n  \n    return t\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211648,"user_id":null,"body":"local solution = {}\n\nfunction solution.parts_sums(ls)\n  -- we're gonna pre-calculate the last sum is 0\n  -- it's always at index len(ls) (+1 in Lua)\n  local sums = {[#ls+1] = 0}\n  \n  -- stores the previous sum, it will be important for how we do this in the most performant way\n  local aggregate = 0\n  \n  for i=#ls, 1, -1 do\n    -- doing the summation backwards allows us to aggregate the values, getting the sum of all elements in the \"previous\" part\n    -- for free when calculating the current part.\n    -- once that is understood, one can find that separating the given array into parts is simply not required.\n    \n    -- consider [a, b, c, d] as [a, [b, c, d]] and the sum of [b, c, d] as the aggregate.\n    aggregate = ls[i] + aggregate\n    \n    -- even better for us, the indexes line up as well, saving even more time as inserting at the beginning of an array is costly.\n    sums[i] = aggregate\n  end\n  \n  return sums\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d2659626c7aec0022cb8006":[{"id":211649,"user_id":null,"body":"local solution = {}\n\nfunction solution.baumsweet()\n  local n = -1\n  return function()\n    n = n + 1\n    local m, l = n, 0\n    while m > 0 do\n      if m&1 == 1 then\n        if l&1 == 1 then return n, 0 end\n        l = 0\n      else\n        l = l + 1\n      end\n      m = m >> 1\n    end\n    return n, 1\n  end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211650,"user_id":168,"body":"local solution = {}\n\nfunction solution.baumsweet()\n    local i = -1\n    local function val(n)\n      local z = 0\n      while n > 0 do\n        if n & 1 == 0 then\n          z = z + 1\n        elseif z & 1 == 0 then\n          z = 0\n        else\n          return 0\n        end\n        n = n >> 1\n      end\n      return z & 1 == 0 and 1 or 0\n    end\n    return function()\n      i = i + 1\n      return i, val(i)\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211651,"user_id":1474,"body":"local solution = {}\n\nlocal function tobin(n)\n  local ret = {}\n  while n > 0 do\n    table.insert(ret, n % 2)\n    n = math.floor(n \/ 2)\n  end\n  return ret\nend\n\nlocal function zeroorone(t)\n  local cnt = 0\n  for _, i in ipairs(t) do\n    if i == 0 then\n      cnt = cnt + 1\n    else\n      if cnt % 2 == 1 then return 0 end\n      cnt = 0\n    end\n  end\n  if cnt % 2 == 1 then\n    return 0\n  else\n    return 1\n  end\nend\n\nfunction solution.baumsweet()\n    local cnt = 0\n    return function()\n      bin = tobin(cnt)\n      ret1, ret2 = cnt, zeroorone(bin)\n      cnt = cnt + 1\n      return ret1, ret2\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211652,"user_id":881,"body":"local solution = {}\n\nfunction solution.baumsweet()\n    local gen, i, a, b\n    return function(t, n)\n        n = n + 1\n        if n < 4 then\n            return n, t[n + 1]\n        elseif n == 4 then\n            gen, t, i = solution.baumsweet()\n            i = gen(t, i)\n            i = gen(t, i)\n        end\n        local m = n % 4\n        if m == 0 then\n            i, a = gen(t, i)\n            i, b = gen(t, i)\n            return n, b\n        elseif m == 1 then\n            return n, a\n        elseif m == 2 then\n            return n, 0\n        else\n            return n, b\n        end\n    end, {1, 1, 0, 1}, -1\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d49c93d089c6e000ff8428c":[{"id":211653,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  for i = 1, #sizes do\n    hd = hd - sizes[i]\n    if hd < 0 then return i-1 end\n  end\n  return #sizes\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211654,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  local sum = 0\n  for key, value in ipairs(sizes) do\n    sum = sum + value\n    if sum > hd then \n      return key - 1 \n    end\n  end\n  return #sizes\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211655,"user_id":1474,"body":"kata = {}\n\nfunction kata.save(sizes, hd)\n  local cnt = 0\n  for i, e in ipairs(sizes) do\n    cnt = cnt + e\n    if cnt > hd then return i - 1 end\n  end\n  return #sizes\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211656,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  local current = 0\n  local count = 0\n  \n  for i = 1, #sizes, 1 do\n    if (hd >= current + sizes[i]) then\n      current = current + sizes[i]\n      count = count +1\n    else return count\n    end\n  end\n    return count\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211657,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  local alpha = 0\n  for i,v in next, sizes do\n    if alpha + v > hd then\n      return i - 1\n    elseif alpha + v == hd then\n      return i\n    end\n    alpha = alpha + v\n  end\n  return #sizes\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211658,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  local used = 0\n  local num = 0\n  for _, size in pairs(sizes) do\n    if hd - used >= size then\n        num = num + 1\n        used = used + size\n    else\n      break\n    end\n  end\n  return num\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211659,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  numFiles = 0\n  sum = 0\n  for i,v in ipairs(sizes) do\n    if sum + v > hd or v > hd then\n      return numFiles\n    else\n      sum = sum + v\n      numFiles = numFiles + 1\n    end\n  end\n  return #sizes\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211660,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  \n   local total, count = 0, 0\n   for i = 1, #sizes do\n      total = total + sizes[i]\n      if total > hd then\n         break\n      end\n      count = count + 1\n   end\n  \n   return count\n  \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211661,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  -- your code\n  i = 0\n  s = 0\n  while s < hd and i < #sizes do\n    i = i + 1\n    s = s + sizes[i]\n  end\n  return ((s>hd) and i-1) or i \nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211662,"user_id":null,"body":"kata = {}\nfunction kata.save(sizes, hd)\n  local file_count = 0\n  for _, size in ipairs(sizes) do\n    if size <= hd then\n      file_count = file_count + 1\n      hd = hd - size\n    else\n      break\n    end\n  end\n\n  return file_count\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d50e3914861a500121e1958":[{"id":211663,"user_id":null,"body":"return function(letters)\n  local sum = 0\n  for i = 1, #letters do\n    sum = sum + letters[i]:byte() - 96\n  end\n  return string.char((sum-1)%26 + 97)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211664,"user_id":null,"body":"return function(letters)\n  local sum = 0\n  for _, c in ipairs(letters) do\n    sum = sum + c:byte()-96\n  end\n  return string.char(97 + (sum-1)%26)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211665,"user_id":null,"body":"function makeAlpha()\n        a = \"abcdefghijklmnopqrstuvwxyz\"\n        alpha = {int_letter={}, letter_int={}}\n        i = 1\n        for letter in string.gmatch(a, \"%a\") do\n                alpha.int_letter[i] = letter\n                alpha.letter_int[letter] = i\n                i = i + 1\n        end\n        return alpha\nend\n\nalpha = makeAlpha()\n\nreturn function (letters)\n        if letters[1] == nil then\n                return 'z'\n        end\n        local sum = 0\n        for _, letter in ipairs(letters) do\n                i = alpha.letter_int[letter]\n                io.write(letter)\n                sum = sum + i\n                if sum >#alpha.int_letter then\n                  sum = sum%#alpha.int_letter\n                end\n        end \n        return alpha.int_letter[sum]\nend\n","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211666,"user_id":null,"body":"return function(letters)\n  local s = 0\n  for _, l in ipairs(letters) do s = s+l:byte() end\n  return string.char(((s+#letters*8-1)%26)+97)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211667,"user_id":null,"body":"return function(letters)\n  if #letters == 0 then return 'z' end\n  local ret = 96\n  for _, v in pairs(letters) do\n    ret = ret + (string.byte(v) - 96)\n    if ret > 122 then ret = ret - 26 end\n  end\n  return string.char(ret)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211668,"user_id":null,"body":"return function(charArray)\n  local byteArray = {}\n  \n  for i,letter in pairs(charArray) do\n    byteArray[i] = string.byte(letter)-96  \n  end\n  \n  local sum = 0\n  \n  for i, num in pairs(byteArray) do\n    sum = sum + num\n  end\n  \n  sum = sum % 26\n  \n  if sum == 0 then sum = 26 end\n  \n  return string.char(sum+96)\n  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211669,"user_id":null,"body":"return function(letters)\n  vstr = 'abcdefghijklmnopqrstuvwxyz'\n  total = 0\n  for i = 1, #letters do\n    total = total + string.find(vstr,letters[i])\n  end\n  \n  f = total%26\n  if f == 0 then\n    return 'z'\n  else\n    return string.sub(vstr, f, f)\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211670,"user_id":null,"body":"return function(letters)\n  local total = 0\n  for i,v in next, letters do\n    total = total + (v:byte()-96)\n  end\n  return string.char((total%26 == 0 and 26 or total%26)+96)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211671,"user_id":null,"body":"return function(letters)\n  print(table.concat(letters))\n  local FullLettersTable = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n  \n  local function getLetterPos(letter)\n  for index, value in pairs(FullLettersTable) do\n      if value == letter then\n          return index\n        end\n    end\n  end\n  \n  local function getOverflown(num)\n    return (num - 26) <= 26 and (num - 26) or getOverflown(num - 26)\n    end\n  \n  if letters and letters[1] then\n    \n  local sum = 0\n    \n  for _, letter in pairs(letters) do\n    local pos = getLetterPos(letter)\n    sum = sum + pos\n  end\n  \n  if sum <= 26 then\n    return FullLettersTable[sum]\n  else\n    return FullLettersTable[getOverflown(sum)]\n    end\n  \n  else\n  \n  return \"z\"\nend\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211672,"user_id":null,"body":"return function(letters)\n  if #letters == 0 then return 'z' end\n  \n  local sum = 0\n  for _, letter in pairs(letters) do\n    print(letter, string.byte(letter) - 96)\n    sum = sum + string.byte(letter) - 96\n  end\n  while sum > 26 do sum = sum - 26 end\n\n  return string.char(sum + 96)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d68d05e7a60ba002b0053f6":[{"id":211673,"user_id":50,"body":"local solution = {}\n\nfunction solution.bonus(arr, s)\n  rate=0\n  for _,n in ipairs(arr) do\n    rate=rate+1\/n\n  end\n  o={}\n  for i,n in ipairs(arr) do\n    o[i]=math.floor(s\/(rate*n)+0.5)\n  end\n    return o\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211674,"user_id":168,"body":"local solution = {}\n\nfunction solution.bonus(arr, s)\n    local sum = 0\n    for _, x in ipairs(arr) do\n      sum = sum + 1 \/ x\n    end\n    local res = {}\n    for i, x in ipairs(arr) do\n      res[i] = math.floor(s \/ (x * sum) + 0.5)\n    end\n    return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211675,"user_id":null,"body":"local solution = {}\n\nfunction gcd(a,b)\n  while b ~= 0 do\n    b, a = a % b, b\n  end\n  return a\nend\n\nfunction lcm(a,b)\n  return a * b \/ gcd(a, b)\nend\n\nfunction solution.bonus(arr, s)\n    local min = 1\n    for _, num in ipairs(arr) do\n      min = lcm(min, num)\n    end\n    \n    local sum = 0\n    local res = {}\n    for _, num in ipairs(arr) do\n      local elem = min \/ num\n      table.insert(res, elem)\n      sum = sum + elem\n    end\n    \n    local mul = s \/ sum\n    for i, num in ipairs(res) do\n      res[i] = num * mul\n    end\n    \n    return res\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211676,"user_id":null,"body":"-- local solution = {}\n\n-- function solution.bonus(arr, s)\n-- --   function gcd(a, b)\n-- --     -- gcd(m, n) * lcm(m, n) = a * b\n-- --     -- local a, b = math.max(a, b), math.min(a, b) -- assert((a > 0) and (b > 0))\n-- --     -- TODO\u4f18\u5316\u6548\u7387: \u4f7f\u5f97b\u4e3a\u7edd\u5bf9\u503c\u8f83\u5c0f\u7684\u6570\u65f6\u8f97\u8f6c\u76f8\u9664\u6b21\u6570\u8f83\u5c11\uff0c\u5224\u5b9a\u540e\u9700\u8981\u8003\u8651\u6b63\u8d1f\u53f7\u4f7f\u5f97\u7ed3\u679c\u4e0e\u666e\u901a\u8ba1\u7b97\u7ed3\u679c\u76f8\u540c\uff08\u9700\u8981\u9a8c\u8bc1\uff09\n-- --     local d_value = a % b\n-- --     -- print(d_value)    \n-- --     if d_value == 0 then\n-- --        return b  -- mathassert((m > 0) and (n > 0)).min(a, b) \n-- --     end\n-- --     return gcd(b, d_value)     \n-- -- end\n \n-- -- function lcm(a, b)\n-- --     local lcm_num = a * b \/ gcd(a,b)\n-- --     -- lcm_num = math.abs(lcm_num)  -- \u770b\u4f60\u7684\u9700\u8981\u662f\u5426\u65ad\u8a00 lcm\u503c\u4e3a\u6b63\u6570\n-- --     return lcm_num\n-- -- end\n--     -- your code\n--   local sum=0\n--   local muti=1\n--   local sumMuti=0\n--   local arr1=arr[1]\n--   local num={}\n--   local den={}\n--   for k=2,#arr do\n-- --     num[k]=arr1\n--     sum=sum+arr[k]\n--     muti=muti*arr[k]\n--   end\n--   for k=2,#arr do\n--     num[k]=muti\/arr[k]\n--     sumMuti=sumMuti+num[k]\n--   end\n-- --   return arr end\n--   local result={}\n    \n--   for i=1,#arr do\n--     den[i]=s*muti\/(sumMuti*arr1+muti)*arr1\/arr[i]\n-- --     table.insert(result,s\/\/sum*arr[i])\n--   end\n--     return den\n-- end\n  \n-- return solution\nlocal solution = {}\n\nfunction solution.bonus(arr, s)\n  \n  local arr2 = {}\n  local sum = 0\n  for i=1,#arr do arr2[i] = 1\/arr[i] end\n  for i=1,#arr do sum=(sum or 0) + arr2[i] end\n  s=s\/sum\n  for i=1,#arr do arr[i] = math.floor(s\/arr[i] + 0.5) end\n  \nreturn arr\n  \nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211677,"user_id":53,"body":"local solution = {}\n\nfunction round(x)\n  return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)\nend\n\nfunction map(f, l) \n  local nl = {}\n  for i, x in ipairs(l) do\n    nl[i] = f(x)\n  end \n  return nl \nend \n\nfunction foldl(op, z, l)\n  for _, x in ipairs(l) do\n    z = op(z, x)\n  end \n  return z \nend \n\nfunction solution.bonus(arr, s)\n  local t = foldl(function(acc, b) return math.max(acc, b) end, 0, arr)\n  local x = s \/ foldl(function(acc, b) return acc + t \/ b end, 0, arr)\n  return map(function(b) return round(x * t \/ b) end, arr)\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211678,"user_id":null,"body":"local solution = {}\n\nfunction solution.bonus(arr, s)\n  \n  local arr2 = {}\n  local sum = 0\n  for i=1,#arr do arr2[i] = 1\/arr[i] end\n  for i=1,#arr do sum=(sum or 0) + arr2[i] end\n  s=s\/sum\n  for i=1,#arr do arr[i] = math.floor(s\/arr[i] + 0.5) end\n  \nreturn arr\n  \nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211679,"user_id":492,"body":"local solution = {}\n\nfunction solution.bonus(arr, s)\n    local function gcd(a,b)\n        while b ~= 0 do \n            a, b = b, a % b\n        end\n        return a\n    end\n    local function lcm(a, b)\n        return math.abs(a * b) \/\/ gcd(a, b)\n    end\n    local cm, t, A = arr[1], 0, {}\n    for i = 1, #arr do cm = lcm(cm, arr[i]) end\n    for i = 1, #arr do t = t + cm \/\/ arr[i] end\n    for i = 1, #arr do\n        A[i] = (s \/\/ t) * (cm \/\/ arr[i])\n    end\n    return A\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d95b7644a336600271f52ba":[{"id":211680,"user_id":null,"body":"local solution = {}\n\n\nfunction solution.crusoe(n, d, a, dm, am)\n    local x, y = 0, 0\n  \n    a = math.rad(a)\n  \n    for i = 1, n do\n      x = x + d * math.cos(a)\n      y = y + d * math.sin(a)\n    \n      d = d * dm\n      a = a * am \n    end\n  \n    return { x, y }\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211681,"user_id":492,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n    local x, y, a = 0.0, 0.0, ang * math.pi \/ 180.0\n    for i = 1,  n do\n        x = x + d * math.cos(a)\n        y = y + d * math.sin(a)\n        d = d * distmult\n        a = a * angmult\n    end\n    return {x, y}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211682,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  local x, y = 0, 0\n  ang = ang * math.pi \/ 180\n  local sumi = 0\n  for i = 0, n-1 do\n    x = x + d * distmult^i * math.cos(ang * angmult^i)\n    y = y + d * distmult^i * math.sin(ang * angmult^i)\n    -- print(ang * angmult * sumi*180\/math.pi, x, y)\n  end\n  return {x, y}\nend\n\n-- solution.crusoe(4, 1, 15, 1, 2)\n-- expecting:\n--    x: 0.0, 0.9659..., 1.8319..., 2.3319..., 1.8319...\n--    y: 0.0, 0.2588..., 0.7588..., 1.6248..., 2.4908...\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211683,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  -- Angle ang is given in degree but needed in rad for calculation:\n  ang = math.rad(ang)\n  -- current position cartesian coordinates\n  local x, y\n  x = 0.0\n  y = 0.0\n  for i = 1,n do\n    -- step length d and angle ang to X axis\n    x = x + d * math.cos(ang)\n    y = y + d * math.sin(ang)\n    -- next angle and distance\n    ang = ang * angmult\n    d = d * distmult\n  end\n  return {x, y}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211684,"user_id":168,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  local x, y = 0, 0\n  for i = 1, n do\n    x = x + d * math.cos(math.rad(ang))\n    y = y + d * math.sin(math.rad(ang))\n    d = d * distmult\n    ang = ang * angmult\n  end\n  return {x, y}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211685,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n    local x, y = math.cos(math.rad(ang)) * d, math.sin(math.rad(ang)) * d\n    for i = 2, n do\n      d, ang = d * distmult, ang * angmult\n      x, y = x + math.cos(math.rad(ang)) * d, y + math.sin(math.rad(ang)) * d\n    end\n    return {x, y}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211686,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n    local x, y = 0, 0\n    ang = math.rad(ang)\n\n    repeat\n        n = n - 1\n        x = x + d * math.cos(ang)\n        y = y + d * math.sin(ang)\n        ang = ang * angmult\n        d = d * distmult\n    until n <= 0\n\n    return {x, y}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211687,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  local x, y = 0, 0\n  ang = ang * math.pi \/ 180\n  for _ = 1, n do\n    x = x + d*math.cos(ang)\n    y = y + d*math.sin(ang)\n    d = d * distmult\n    ang = ang * angmult\n  end\n  return {x, y}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211688,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  x, y = 0, 0\n  ang = ang * math.pi \/ 180\n  for _ = 1, n do\n    x = x + d*math.cos(ang)\n    y = y + d*math.sin(ang)\n    d = d * distmult\n    ang = ang * angmult\n  end\n  return {x, y}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211689,"user_id":null,"body":"local solution = {}\n\nfunction solution.crusoe(n, d, ang, distmult, angmult)\n  local x, y = 0, 0\n  local distance = d\n  local angle = ang\n  x = x + math.cos(angle\/180*math.pi)*distance\n  y = y + math.sin(angle\/180*math.pi)*distance\n  for i = 2, n do\n    angle = angle * angmult\n    distance = distance * distmult\n    x = x + math.cos(angle\/180*math.pi)*distance\n    y = y + math.sin(angle\/180*math.pi)*distance\n  end\n  return {x, y}\nend\n  \nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5d98b6b38b0f6c001a461198":[{"id":211690,"user_id":null,"body":"local solution = {}\n\nfunction solution.code(s)\n  return (s:gsub('.', function(c)\n    local d, bits = tonumber(c), {0}\n    for i = 1, select(2, math.frexp(math.max(1, d))) do\n      bits[i] = d >> i-1 & 1\n    end\n    return (table.concat(bits) .. '1' .. ('0'):rep(#bits-1)):reverse()\n  end))\nend\n\nfunction solution.decode(str)\n  local i = 1\n  local res = {}\n  while i <= #str do\n    local len = select(2, str:find('0*', i)) - i + 1\n    local sum = 0\n    print(str, i, len)\n    for j = i + len + 1, i + 2*len + 1 do sum = sum*2 + str:byte(j)-48 end\n    res[#res+1] = string.char(48 + sum)\n    i = i + 2*(len + 1)\n  end\n  return table.concat(res)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211691,"user_id":null,"body":"local solution = {}\n\nfunction solution.code(s)\n  local function toBits(num)\n    local bits, t = math.max(1, select(2, math.frexp(num))), \"\"        \n    for b = bits, 1, -1 do\n      t, num = (num%2)..t, (num - (num%2)) \/\/ 2\n    end\n    return string.rep(\"0\",#t-1)..\"1\"..t\n  end\n  local r = \"\"\n  s:gsub(\".\", function(c) r=r..toBits(tonumber(c)) end)\n  return r\nend\n\nfunction solution.decode(str)\n  local s, m, n, d = \"\", 0, 0, true\n  for c in str:gmatch(\".\") do\n    if d then\n      n, d = n+1, c==\"0\"\n    else\n      n, d, m = n-1, n==1, m*2+tonumber(c)\n      if d then s, m = s..m, 0 end\n    end\n  end  \n  return s\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211692,"user_id":null,"body":"local solution = {}\n\nlocal bitTable = {\n  [\"0\"] = \"0\",\n  [\"1\"] = \"1\",\n  [\"2\"] = \"10\",\n  [\"3\"] = \"11\",\n  [\"4\"] = \"100\",\n  [\"5\"] = \"101\",\n  [\"6\"] = \"110\",\n  [\"7\"] = \"111\",\n  [\"8\"] = \"1000\",\n  [\"9\"] = \"1001\",\n}\n\nfunction solution.code(s)\n  local code = {}\n  for d in s:gmatch(\".\") do\n    table.insert(code, string.rep(\"0\", #bitTable[d] - 1) .. \"1\" .. bitTable[d])\n  end\n  return table.concat(code)\nend\n\nfunction solution.decode(str)\n  local decoded = {}\n  local init = 1\n    \n  while init < #str do\n    local sizeStart, sizeEnd = str:find(\"[0]*1\", init)\n    local repSize = (sizeEnd + 1) - sizeStart\n    local rep = str:sub(sizeEnd + 1, sizeEnd + repSize)\n    \n    for digit, bits in pairs(bitTable) do\n      if bits == rep then\n        table.insert(decoded, digit)\n        break\n      end\n    end\n    \n    init = sizeEnd + repSize + 1 --\/\/ i hate offsetting these bro\n  end\n  \n  return table.concat(decoded)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211693,"user_id":168,"body":"local solution = {}\n\nfunction solution.code(s)\n  local res = ''\n  for d in s:gmatch('%d') do\n    d = tonumber(d)\n    local bits = d == 0 and '0' or ''\n    while d > 0 do\n      bits = d % 2 .. bits\n      d = d \/\/ 2\n    end\n    res = res .. string.rep('0', #bits - 1) .. '1' .. bits\n  end\n  return res\nend\n\nfunction solution.decode(str)\n  local res, start = '', 1\n  while true do\n    local k = str:find('1', start)\n    if not k then break end\n    k = k - start + 1\n    res = res .. tonumber(str:sub(start + k, start + 2 * k - 1), 2)\n    start = start + 2 * k\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211694,"user_id":null,"body":"local solution = {}\n\n--- convert number into bin\n-- @return bin number as string\nfunction toBin(number)\n        local bin = {}\n\n        if number == 0 then\n                return '0'\n        elseif number == 1 then\n                return '1'\n        end\n        while number ~= 0 do\n                bin[#bin+1]=number%2\n                number=math.floor(number\/2)\n        end\n        return table.concat(bin):reverse()\nend\n\n--- code string with numbers\n--  @return coded string\nfunction solution.code(str)\n        local result = {}\n        for i=1, #str do\n                local num = tonumber(str:sub(i, i))\n                local bits = math.ceil(math.log(num+1)\/math.log(2))\n                local num_code = \"\"\n                for j=1, bits-1 do\n                        num_code=num_code..'0'\n                end\n                num_code=num_code..'1'..toBin(num)\n                result[i] = num_code\n        end\n        return table.concat(result)\nend\n\nfunction solution.decode(str)\n        local result = {}\n        local block = \"\"\n        local i = 1\n        while i < #str do\n                local num = str:sub(i, i)\n                block=block..num\n                if tonumber(num) == 1 then\n                        local bits = #block-1\n                        i=i+1\n                        local number = tonumber(str:sub(i, i+bits), 2)\n                        result[#result+1] = number\n                        print(block..' '..str:sub(i, i+bits)..\": \"..tostring(number))\n                        i=i+bits+1\n                        block=\"\"\n                else\n                        i=i+1\n                end\n        end\n        return table.concat(result)\nend\n\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211695,"user_id":null,"body":"local solution = {}\n\nlocal function toBits(number)\n    if number == 0 then return 0 end\n    local result = \"\"\n    local d, m = number, 0\n    while d ~= 0 do\n        m = d%2\n        d = d\/\/2\n        result = result..tostring(math.floor(m))\n    end\n    return string.reverse(result)\nend\n\nfunction solution.code(s)\n    local result = \"\"\n    for i = 1, #s do\n        local bits = toBits(string.sub(s, i, i))\n        local k = #bits\n        local part = \"\"\n        for i = 1, k-1 do \n            part = part..\"0\"\n        end\n        part = part..\"1\"..bits\n        result = result..part\n    end\n    return result \nend\n\nfunction solution.decode(str)\n    local result = \"\"\n    local remain = string.sub(str, 1, #str)\n    while #remain ~= 0 do\n        for i = 1, #remain do\n            if string.sub(remain, i, i) == \"1\" then\n                local len = i\n                local currStr = string.sub(remain, i+1, i+len)\n                result = result..tostring(tonumber(currStr, 2))\n                remain = string.sub(remain, i+len+1, #remain)\n                break\n            end\n        end\n    end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211696,"user_id":null,"body":"local solution = {}\n\nlocal code = {\n  [\"0\"] = \"10\", [\"1\"] = \"11\",\n  [\"2\"] = \"0110\", [\"3\"] = \"0111\",\n  [\"4\"] = \"001100\", [\"5\"] = \"001101\",\n  [\"6\"] = \"001110\", [\"7\"] = \"001111\",\n  [\"8\"] = \"00011000\", [\"9\"] = \"00011001\"\n}\n\nfunction solution.code(s)\n    local result = \"\"\n    for i = 1, s:len() do\n        result = result .. code[s:sub(i,i)]\n    end\n    return result\nend\n\nfunction solution.decode(str)\n    local i, j = 0, 0\n    local result = \"\"\n    repeat i, j = str:match(\"()0*1()\", i)\n        if i then\n            i = j + j - i\n            result = result .. tonumber(str:sub(j, i - 1), 2)\n        end\n    until not i\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211697,"user_id":null,"body":"local solution = {}\n-- function solution.code(s)\n--     local m, res = {'10','11','0110','0111','001100','001101','001110','001111','00011000','00011001'}, \"\"\n--     for i = 1, #s do\n--       local v = m[tonumber(string.sub(s, i, i)) + 1]\n--       res = res .. v\n--     end\n--     return res \n-- end\n\nfunction ten2two(s,sn)\n  if s~=1 and s~=0 then return ten2two(s\/\/2,(math.floor(s%2))..sn) \n  else return math.floor(s)..sn\n  end\nend\n\n\nfunction solution.code(s)\n    -- your code\n--   s=\"0\"\n  local str_list={}\n  s:gsub(\".\",function(c) table.insert(str_list,c) end)\n  local code_list={}\n  local result=\"\"\n  for i=1,#str_list do\n    if str_list[i]==\"0\" then result=result..\"10\" \n    elseif str_list[i]==\"1\" then result=result..\"11\"\n    else\n      local ch=ten2two(str_list[i],\"\")\n      result=result..string.rep(\"0\",tonumber(#ch)-1)..\"1\"..ch\n    end\n--     table.insert(code_list,ten2two(str_list,\"\"))\n  end\n    return result\nend\n\nfunction solution.decode(str)\n--   local str_list={}\n--   local n=0\n--   local save={}\n--   str:gsub(\".\",function(c) table.insert(save,c) end)\n--   for i=1,#str do\n--     n=n+1\n--     if save[i]==1 then\n      \n-- --   for k,v in str:gmatch(\"[1+]\")do\n-- --   table.insert(str_list,{k,v})\n-- --   end\n-- --   ss=string.find(str,'[^'..\"1+\"..']+',1)\n-- --   for i=1,#str do\n    \n  \n--     -- your code\n--     return str_list\n    local ret, i, lg = \"\", 1, #str\n    while (i <= lg) do\n        local zero_i = i\n        while zero_i <= lg and string.sub(str, zero_i, zero_i) ~= \"1\" do\n            zero_i = zero_i + 1--\n        end\n        local l = zero_i - i + 2\n        local ss = string.sub(str, zero_i + 1, zero_i + l - 1)\n        ret = ret .. tonumber(ss, 2)\n        i = zero_i + l\n    end\n    return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211698,"user_id":null,"body":"local solution = {}\n\n--[[\n  0 = 10\n  1 = 11\n  2 = 0110\n  3 = 0110\n\n  d = 0, k = 1,\n  10\n  d = 1, k = 1\n  11\n  d = 2, k = 2\n  0110\n  d = 3, k = 2,\n  0111\n  d = 6, k = 3,\n  001110\n\n\n]]\n\ndigits = {\n  {1, 1},\n  {2, 10},\n  {2, 11},\n  {3, 100},\n  {3, 101},\n  {3, 110},\n  {3, 111},\n  {4, 1000},\n  {4, 1001}\n}\ndigits[0] = {1, 0}\n\ndigits_decode = {}\ndigits_decode[0] = 0\ndigits_decode[1] = 1\ndigits_decode[10] = 2\ndigits_decode[11] = 3\ndigits_decode[100] = 4\ndigits_decode[101] = 5\ndigits_decode[110] = 6\ndigits_decode[111] = 7\ndigits_decode[1000] = 8\ndigits_decode[1001] = 9\n\nfunction solution.code(s)\n    w = ''\n    for i = 1, #s do\n      local c = tonumber(s:sub(i, i))\n      for j = 1, digits[c][1]-1 do\n        w = w .. '0'\n      end\n      w = w .. '1' .. digits[c][2]\n    end\n    return w\nend\n\nfunction solution.decode(str)\n    w = ''\n    s = ''\n    local count = 0\n    local read = false\n    for i = 1, #str do\n      local c = tonumber(str:sub(i, i))\n      if not read then\n        if c == 1 then\n          read = true\n        end\n        count = count + 1\n      else\n        s = s .. c\n        count = count - 1\n        if count == 0 then\n          w = w .. digits_decode[tonumber(s)]\n          s = ''\n          read = false\n        end\n      end\n    end\n    return w\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211699,"user_id":492,"body":"local solution = {}\n\nfunction solution.code(s)\n    local m, res = {'10','11','0110','0111','001100','001101','001110','001111','00011000','00011001'}, \"\"\n    for i = 1, #s do\n      local v = m[tonumber(string.sub(s, i, i)) + 1]\n      res = res .. v\n    end\n    return res \nend\n\nfunction solution.decode(str)\n    local ret, i, lg = \"\", 1, #str\n    while (i <= lg) do\n        local zero_i = i\n        while zero_i <= lg and string.sub(str, zero_i, zero_i) ~= \"1\" do\n            zero_i = zero_i + 1\n        end\n        local l = zero_i - i + 2\n        local ss = string.sub(str, zero_i + 1, zero_i + l - 1)\n        ret = ret .. tonumber(ss, 2)\n        i = zero_i + l\n    end\n    return ret\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5da1df6d8b0f6c0026e6d58d":[{"id":211700,"user_id":168,"body":"local solution = {}\n\nfunction exps(k)\n  local p = 2\n  while p * p <= k do\n    local e = 0\n    while k % p == 0 do\n      k = k \/\/ p\n      e = e + 1\n    end\n    if e > 0 then coroutine.yield(e) end\n    p = p + 1\n  end\n  if k > 1 then coroutine.yield(1) end\nend\n\nfunction solution.c(k)\n  local r = 1\n  for n in coroutine.wrap(function() exps(k) end) do\n    if n % 2 ~= 0 then return 0 end\n    r = r * (3 * n \/\/ 2 + 1)\n  end\n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211701,"user_id":null,"body":"require 'math'\nfunction find_primes(n)\n    local counter = {}\n    function inc_counter(i)\n        counter[i] = (counter[i] or 0) + 1\n    end\n\n    local new_n = n\n    local i = 2\n    while i <= new_n do\n        if new_n % i == 0 then\n            new_n = new_n \/ i\n            inc_counter(i)\n        else\n            i = i + 1\n        end\n    end\n    return counter\nend\n\nlocal solution = {}\nfunction solution.c(k)\n    -- if k is no perfect square, then it doesn't have any divisors\n    k_sqrt = math.sqrt(k)\n    if math.floor(k_sqrt) ~= k_sqrt then\n        return 0\n    end\n\n    -- finding primes is faster than divisors\n    primes = find_primes(k)\n\n    -- we calculate the number of divisors based on the number of primes\n    num_divisors = 1\n    for k,v in pairs(primes) do\n        -- we are looking for the square root, so all primes have to be at least two times present\n        if v == 1 then\n            return 0\n        end\n\n        -- takin ^3 and the sqrt (which is equal to ^0.5), is the same as doing ^1.5, hence we multiply the exponent by 1.5\n        num_divisors = num_divisors * (v*1.5 + 1)\n    end\n    return num_divisors\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211702,"user_id":53,"body":"local solution = {}\n\nfunction solution.c(k)\n  local n, res = math.sqrt(k), 1\n  if math.floor(n) ~= n then return 0 end\n  for i = 2, n do \n    if n % i == 0 then\n      local count = 0\n      while n % i == 0 do\n        n = n \/ i\n        count = count + 1\n      end\n      print(count)\n      res = res * (((count - 1) * 3) + 4)\n    end\n  end\n  return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211703,"user_id":492,"body":"local solution = {}\n\nfunction solution.c(k)\n    local root = math.floor(math.sqrt(k))\n    if (root * root ~= k) then\n        return 0\n    end\n    local i, num, result = 2, k * root, 1\n    while (num > 1) do\n        local div_num_nb = 0\n        while (num % i == 0) do\n            num = num \/\/ i\n            div_num_nb = div_num_nb + 1\n        end\n        result = result * (div_num_nb + 1)\n        i = i + 1\n    end\n    return result\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5dad6e5264e25a001918a1fc":[{"id":211704,"user_id":null,"body":"local solution = {}\n\nlocal function gcd(a, b)\n  if b == 0 then return a end\n  return gcd(b, a%b)\nend\n\n-- multiplicative inverses:\nlocal minv = { 1, [3] = 9, [5] = 21, [7] = 15, [9] = 3, [11] = 19,\n  [15] = 7, [17] = 23, [19] = 11, [21] = 5, [23] = 17, [25] = 25 }\n\nfunction solution.decode(s)\n  local numstr, chars = s:match '^(%d+)(%a*)$'\n  if chars == '' then return '' end\n  if gcd(tonumber(numstr), 26) ~= 1 then return 'Impossible to decode' end\n  local inv = minv[tonumber(numstr) % 26]\n  local res = {}\n  for i = 1, #chars do\n    res[i] = string.char((chars:byte(i)-97) * inv % 26 + 97)\n  end\n  return table.concat(res)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211705,"user_id":168,"body":"local solution = {}\n\nfunction solution.decode(s)\n  local n, r = s:match('(%d+)(.*)')\n  for i = 1, 25 do\n    if n * i % 26 == 1 then\n      return r:gsub('.', function(x) return string.char((x:byte() - 97) * i % 26 + 97) end)\n    end\n  end\n  return 'Impossible to decode'\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211706,"user_id":null,"body":"local solution = {}\n\nfunction solution.decode(s)\n  local r, t, c = tonumber(s:match\"%d+\"), {}, 0\n  for i = 0, 25 do t[string.char(i*r%26+97)] = string.char(i+97) end\n  for _, __ in pairs(t) do c = c + 1 end\n  return c<26 and \"Impossible to decode\" or s:match\"%a+\":gsub(\".\", t)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211707,"user_id":null,"body":"local solution = {}\n\nlocal alpha = 'abcdefghijklmnopqrstuvwxyz'\n\nlocal function getChar (n)\n    return alpha:sub(n+1, n+1)\nend\n\nlocal function getByte (c)\n    return alpha:find(c)-1\nend\n\nlocal function encodeChar (c, n)\n    return getChar(getByte(c) * n % 26)\nend\n\nlocal function decodeChar (c, n)\n    for i = 0, 25 do\n        if encodeChar(getChar(i), n) == c then return getChar(i) end\n    end\nend\n\nlocal function notValid (n)\n    local mod = n % 26\n    if mod % 2 == 0 or mod == 13 then return true end\n    return false\nend\n\nfunction solution.decode (str)\n    local num = str:match('%d+')\n    if notValid(num) then return 'Impossible to decode' end\n  \n    result = {}\n    for c in str:gmatch('[a-z]') do\n        result[#result + 1] = decodeChar(c, num)\n    end\n    return table.concat(result)\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211708,"user_id":null,"body":"local solution = {}\n\nlocal byte_a = string.byte(\"a\")\n\nfunction solution.decode(s)\n  local num_str = s:match(\"%d+\")\n  local num = tonumber(num_str)\n  \n  -- must be coprime to 26\n  if num % 2 == 0 or num % 13 == 0 then\n    return \"Impossible to decode\"\n  end\n  \n  num = num % 26\n  s = s:sub(#num_str + 1)\n  local r = \"\"\n  for i = 1, #s do\n    local enc_char = s:byte(i) - byte_a\n    local dec_char = 0\n    local tmp_char = 0\n    while enc_char ~= tmp_char do\n      tmp_char = (tmp_char + num) % 26\n      dec_char = dec_char + 1\n    end\n    r = r .. string.char(dec_char + byte_a)\n  end\n  \n  return r\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211709,"user_id":null,"body":"local solution = {}\n\nlocal to_number = {}                        -- { ['a']=0, ['b']=1, ... }\nlocal to_letter = {}                        -- { [0]='a', [1]='b', ... }\n\nlocal alpha = 'abcdefghijklmnopqrstuvwxyz'  -- We'll use this string to populate the lists above\n\nfor i=1, #alpha do                          -- For every valid index of the string 'alpha'\n  to_number[alpha:sub(i, i)] = i - 1        -- append to 'to_number' (key==letter, value==number)\n  to_letter[i - 1] = alpha:sub(i, i)        -- append to 'to_letter' (key==number, value==letter)\nend\n\nfunction solution.decode(s)\n  _, _, n, word = s:find(\"(%d+)(%w+)\")      -- Separate the number from the rest of the string\n  rosetta = {}                              -- Our decoding table :)\n  for i=0, 25 do                            -- For all valid indices\n    code = (n * i) % 26                     -- We should produce a unique code\n    if rosetta[code] then                   -- If not (the code is reapeated, hence not unique)\n      return \"Impossible to decode\"         -- We can't decode the string :(\n    else                                    -- Otherwise\n      rosetta[code] = i                     -- we end up with a valid decoding table!\n    end\n  end\n  \n  out = \"\"                                  -- If we've got so far, there's a valid code\n  for i=1, #word do                         -- Take every letter of the string\n    x = to_number[word:sub(i, i)]           -- and use its number code\n    y = rosetta[x]                          -- and our 'rosetta' table\n    out = out .. to_letter[y]               -- to find the original letter!\n  end\n  return out                                -- This was really fun!\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211710,"user_id":492,"body":"local solution = {}\n\nfunction solution.decode(s)\n    local dict = {[3]=9, [9]=3, [21]=5, [5]=21, [7]=15, [15]=7, [11]=19, [19]=11, [17]=23, [23]=17, [25]=25, [1]=1}\n    local alpha = 'abcdefghijklmnopqrstuvwxyz'\n    local snb = s:gsub('%D.*', \"\")\n    local n = dict[snb % 26]\n    if n == nil then return ('Impossible to decode') end\n    local txt, res = s:gsub(snb, ''), ''\n    for c in txt:gmatch\".\" do\n        local k = ((string.find(alpha, c) - 1) * n) % 26 + 1\n        res = res .. string.sub(alpha, k, k)\n    end\n    return res\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5db19d503ec3790012690c11":[{"id":211711,"user_id":null,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n  local i, e, s = 0.14849853757254047, math.exp(-2), 0\n  for _=1, n do s, i = s+i, i*e end\n  return s*w\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211712,"user_id":null,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n  local i0 = 0.14849853757254047  -- area for \"-xlog(x)\" from exp(-1) to 1.\n  -- fn'(x)==0  <=>  -n-(1+log(x))==0  <=>  1+log(x)==-n  <=>  x=exp(-1-n)\n  -- K_{n+1}\/K_n = e, thus the area gets shrunk by e\u00b2 each time:\n  local sum = 0\n  -- summing in reverse order to reduce precision loss:\n  for i = -2*n, 0, 2 do\n    sum = sum + math.exp(i)\n  end\n  return i0*w*sum\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211713,"user_id":null,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n  -- your code\n  return 0.17174117862516716128*w\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211714,"user_id":168,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n  return 0.25 * (math.exp(2) - 3) \/ (math.exp(2) - 1) * (1 - math.exp(-2 * (n + 1))) * w\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211715,"user_id":527,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n  return w * (math.exp(2) - 3) * (1 - math.exp(-2 * n)) \/ (4 * (math.exp(2) - 1))\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211716,"user_id":492,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n    local i0 = 0.14849853757254047\n    local e = 2.7182818284590455\n    local an = (1 - e ^ -(2 * n + 2)) \/ (1 - e ^ -2)\n    return i0 * an * w\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211717,"user_id":492,"body":"local solution = {}\n\nfunction solution.weight(n, w)\n    local i0 = 0.14849853757254047\n    local e = 2.7182818284590455\n    local an = (1 - e ^ -(2 * n + 2)) \/ (1 - e ^ -2)\n    return i0 * an * w\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5e4bb05b698ef0001e3344bc":[{"id":211718,"user_id":492,"body":"local solution = {}\n\nfunction solution.solve(arr)\n  local a = arr[1]\n  local b = arr[2]\n  local i = 1\n  local lim = #arr \/\/ 2\n  while (i < lim) do\n    local x = a\n    local y = b \n    local z = arr[2 * i + 1]\n    local t = arr[2 * i + 2]\n    a = math.abs(x * z - y * t)\n    b = math.abs(x * t + y * z)\n    i = i + 1\n  end\n  return {a, b}\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211719,"user_id":168,"body":"local solution = {}\n\n-- return a table of 2 integers\nfunction solution.solve(arr)\n  local x, y = arr[1], arr[2]\n  for i = 3, #arr, 2 do\n    local a, b = arr[i], arr[i + 1]\n    x, y = x * a - y * b, x * b + y * a\n  end\n  return {math.abs(x), math.abs(y)}\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211720,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve(arr)\n  local p, i, l = 1, 0, 0\n  for i=1, #arr - 1, 2 do\n    p = p * (arr[i]^2 + arr[i+1]^2)\n  end\n  while i<p do\n    l = math.tointeger(math.sqrt(p-i^2))\n    if l then break end\n    i = i + 1\n  end\n  return {l, i}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211721,"user_id":null,"body":"local solution = {}\nfunction solution.solve(arr)\n    local u = {}\n    for i = 1,#arr do\n      u[i] = arr[i]*arr[i]\n    end\n    local p = 1\n    for i = 2,#u, 2 do\n      p = p * (u[i]+u[i-1])\n    end\n  print(p)\n    if p == 0 then return {0,0} end\n    local a = -1\n    repeat\n      a = a + 1\n      q = p-a^2\n      w = math.floor(math.sqrt(q)+0.5)\n    until w^2+a^2==p\n  return {w,a}\nend\nreturn solution\n","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211722,"user_id":53,"body":"local solution = {}\n\nfunction solution.solve(arr)\n  local a = arr[1]\n  local b = arr[2]\n  local i = 3\n  local w = #arr\n  while (i <= w) do\n    local c = a * arr[i] + b * arr[i+1]\n    local d = math.abs(b * arr[i] - a * arr[i+1])\n    a = c\n    b = d\n    i = i + 2\n  end\n  return {a, b}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211723,"user_id":null,"body":"local solution = {}\n\n-- return a table of 2 integers\nfunction solution.solve(arr)\n    local u = {}\n    for i = 1,#arr do\n      u[i] = arr[i]*arr[i]\n    end\n    local p = 1\n    for i = 2,#u, 2 do\n      p = p * (u[i]+u[i-1])\n    end\n  print(p)\n    if p == 0 then return {0,0} end\n    local a = -1\n    repeat\n      a = a + 1\n      q = p-a^2\n      w = math.floor(math.sqrt(q)+0.5)\n    until w^2+a^2==p\n  return {w,a}\nend\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211724,"user_id":null,"body":"local solution = {}\n\nfunction solution.solve (array)\n    local p = 1\n    for i = 1, #array, 2 do\n        p = p * (array[i]^2 + array[i+1]^2)\n    end\n  \n    local a = 0\n    while true do\n        local b = math.sqrt(p - a^2)\n        if b \/\/ 1 == b then return {a, b} end\n        a = a + 1\n    end\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211725,"user_id":null,"body":"function factorize(a, b, c, d)\n    -- https:\/\/en.wikipedia.org\/wiki\/Brahmagupta%E2%80%93Fibonacci_identity\n    return math.abs(a*c - b*d), math.abs(a*d + b*c)\nend\nlocal solution = {}\n\nfunction solution.solve(arr)\n    local i = 1\n    local arr_n = #arr\n    while arr_n >= 4 do\n        local new_a, new_b = factorize(arr[arr_n-3], arr[arr_n-2], arr[arr_n-1], arr[arr_n])\n        arr[arr_n-3] = new_a\n        arr[arr_n-2] = new_b\n        table.remove(arr, arr_n)\n        table.remove(arr, arr_n-1)\n        arr_n = arr_n - 2\n    end\n    return {arr[1], arr[2]}\nend\n\nreturn solution","lang_id":31,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5ef9ca8b76be6d001d5e1c3e":[{"id":211726,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.encode(text)\n  local result = \"\"\n  local bytes = { text:byte( 1, text:len()) }\n  for _, byte in ipairs(bytes) do\n    local checkbit = 128\n    repeat\n      if byte & checkbit ~= 0 then\n        result = result .. \"111\"  \n      else\n        result = result .. \"000\"\n      end\n      checkbit = checkbit >> 1\n    until checkbit == 0\n  end\n  return result\nend\n\nfunction codewars.decode(bits)\n  local result = \"\"\n  local const_sum = string.byte(\"0\") * 2 + string.byte(\"1\")\n  for i = 1, bits:len(), 24 do\n    local readptr = i\n    local checkbit = 128\n    local charcode = 0\n    repeat\n      if const_sum < bits:byte(readptr) + bits:byte(readptr+1) + bits:byte(readptr+2) then\n        charcode = charcode | checkbit\n      end\n      checkbit = checkbit >> 1\n      readptr = readptr + 3\n    until checkbit == 0\n    result = result .. string.char(charcode)\n  end\n  return result\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211727,"user_id":null,"body":"local codewars = {}\n\nfunction asciiToBinary(c)\n  d = 128\n  r = \"\"\n  while d >= 1 do\n    if math.floor(c \/ d) > 0 then\n      c = c - d\n      r = r .. \"1\"\n    else\n      r = r .. \"0\"\n    end\n    d = d \/ 2\n  end\n  return r\nend\n\nfunction binaryToAscii(c)\n  s = 0\n  d = 128\n  i = 1\n  while d >= 1 do\n    if string.sub(c,i,i) == \"1\" then\n      s = s + d\n    end\n    i = i + 1\n    d = (d \/ 2)\n  end\n  return s\nend\n\nfunction codewars.encode(text)\n  result,result_b,result_final = {},{},\"\"\n  for i=1,string.len(text) do\n    table.insert(result,string.sub(text,i,i))\n    result[i]=string.byte(result[i])\n    table.insert(result_b,asciiToBinary(result[i]))\n    for j=1,8 do\n      for k=1,3 do\n        result_final = result_final .. string.sub(result_b[i],j,j)\n      end\n    end\n  end\n  return result_final\nend\n\nfunction codewars.decode(bits)\n  result,result_final = {},\"\"\n  k = 1\n  for i=1,string.len(bits),24 do\n    table.insert(result,\"\")\n    for j=0,23,3 do\n      checksum = string.sub(bits,i+j,i+j)+string.sub(bits,i+j+1,i+j+1)+string.sub(bits,i+j+2,i+j+2)\n      if checksum >= 2 then\n        result[k] = result[k] .. \"1\"\n      else\n        result[k] = result[k] .. \"0\"\n      end\n    end\n    k = k + 1\n  end\n  \n  for i=1,#result do\n    result_final = result_final .. string.char(binaryToAscii(result[i]))\n  end\n  \n  return result_final  \nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211728,"user_id":168,"body":"local codewars = {}\n\nfunction codewars.encode(text)\n  return text:gsub('.', function(c)\n      local bits = ''\n      local n = c:byte()\n      while n > 0 do\n        bits = string.rep(n % 2, 3) .. bits\n        n = n \/\/ 2\n      end\n      return (string.rep(0, 24) .. bits):sub(-24)\n    end)\nend\n\nfunction codewars.decode(bits)\n  return bits:gsub('...', function(m) return #m:gsub('0', '') <= 1 and '0' or '1' end)\n             :gsub('........', function(m) return string.char(tonumber(m, 2)) end)\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211729,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.encode(text)\n  return (text:gsub('.', function(c)\n      c = c:byte()\n      local b = ''\n      repeat\n        b = c % 2 .. b\n        c = c \/\/ 2\n      until c == 0\n      return ('%08d'):format(b):gsub('(.)', '%1%1%1')\n  end))\nend\n\nfunction codewars.decode(bits)\n  print(bits)\n  bits = bits:gsub('(...)', function(t)\n      return #t:gsub('0', '') > #t:gsub('1', '') and '1' or '0'\n  end)\n  local matches = bits:gmatch('........')\n  local s = ''\n  for match in matches do\n    s = s .. s.char(tonumber(match, 2))\n  end\n  return s\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211730,"user_id":null,"body":"local codewars = {}\n\nlocal function tripleBinary(n)\n    local result = \"\"\n    while #result < 24 do\n        local bit = tostring(n % 2)\n        n = n \/\/ 2\n        result = bit .. bit .. bit .. result\n    end\n    return result\nend\n\nlocal function charFromByte(byte)\n    local value = 0\n    local n = 128\n    for i = 1, #byte do\n        if byte:sub(i, i) == \"1\" then\n            value = value + n\n        end\n        n = n \/ 2\n    end\n    return string.char(value)\nend\n\nfunction codewars.encode(text)\n    local result = \"\"\n    for i = #text, 1, -1 do\n        result = tripleBinary(text:sub(i, i):byte()) .. result\n    end\n    return result\nend\n\nfunction codewars.decode(bits)\n    local result = \"\"\n    local byte = \"\"\n    for i = 1, #bits, 3 do\n        local sub = bits:sub(i, i + 2)\n        if (sub <= \"010\") or (sub == \"100\") then\n            byte = byte .. \"0\"\n        else\n            byte = byte .. \"1\"\n        end\n        if #byte == 8 then\n            result = result .. charFromByte(byte)\n            byte = \"\"\n        end\n    end\n    return result\nend\n\nreturn codewars\n","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211731,"user_id":null,"body":"local codewars = {}\n\nlocal function binary(n)\n    local result = \"\"\n    repeat\n        result = result..tostring(n%2)\n        n = math.floor(n\/2)\n    until n == 0\n    result = string.reverse(result)\n    for i = 1, 8-#result do\n        result = \"0\"..result\n    end\n    return result\nend\n\nfunction codewars.encode(text)\n    local code = \"\"\n    for i = 1, #text do\n        local ascii = string.byte(string.sub(text, i, i))\n        local bin = binary(ascii)\n        print(bin)\n        for k = 1, #bin do\n            for l = 1, 3 do\n                code = code..string.sub(bin, k, k)\n            end\n        end\n    end\n    return code\nend\n\nlocal function bit(triplet)\n    local zeroCount = 0\n    for i = 1, 3 do\n        if string.sub(triplet, i, i) == \"0\" then zeroCount = zeroCount + 1 end\n    end\n    if zeroCount > 1 then return \"0\" else return \"1\" end\nend\n\nlocal function decimal(bina)\n    local dec = 0\n    local str = tostring(bina)\n    str = string.reverse(str)\n    for i = 1, #str do\n        dec = dec + math.pow(2, (i-1))*tonumber(string.sub(str, i, i))\n    end\n    return dec\nend\n\nfunction codewars.decode(bits)\n    local bitsLength = #bits\n    local bytes = \"\"\n    local word = \"\"\n    for i = 1, bitsLength\/3 do\n        local triplet = string.sub(bits, 1, 3)\n        if i ~= bitsLength\/3 then\n            bits = string.sub(bits, 4, #bits)\n        end\n        bytes = bytes..bit(triplet)\n    end\n    for i = 1, #bytes\/8 do\n        word = word..string.char(decimal(tonumber(string.sub(bytes, 8*(i-1)+1, 8*i))))\n    end\n    return word\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211732,"user_id":null,"body":"local hex = '0123456789abcdef'\nlocal bin = {\n    '0000','0001','0010','0011','0100','0101','0110','0111',\n    '1000','1001','1010','1011','1100','1101','1110','1111'\n}\nlocal hex2bin = {}\nlocal bin2hex = {}\nfor i, v in ipairs(bin) do\n    hex2bin[hex:sub(i,i)] = v\n    bin2hex[v] = hex:sub(i,i)\nend\n\nlocal function tobinary (n)\n    n = string.format('%02x', n)\n    local binary = {}\n    for digit in n:gmatch('.') do\n        binary[#binary + 1] = hex2bin[digit]\n    end\n    return table.concat(binary)\nend\n\nlocal function tohex (byte)\n    return bin2hex[byte:sub(1, 4)] .. bin2hex[byte:sub(5, 8)]\nend\n\nlocal codewars = {}\n\nfunction codewars.encode (text)\n    local code = {}\n    for c in text:gmatch('.') do\n        code[#code + 1] = c:byte()\n    end\n    for i, n in ipairs(code) do\n        code[i] = tobinary(n)\n    end\n    code = table.concat(code)\n    code = code:gsub('0', '000')\n    code = code:gsub('1', '111')\n    return code\nend\n\nfunction codewars.decode (bits)\n    local msg = {}\n    for triple in bits:gmatch('...') do\n        local _, ones = triple:gsub('1', '')\n        msg[#msg + 1] = (ones > 1) and '1' or '0'\n    end\n    bits = table.concat(msg)\n    msg = {}\n    for byte in bits:gmatch('........') do\n        msg[#msg + 1] = string.char(tonumber(tohex(byte), 16))\n    end\n    return table.concat(msg)\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211733,"user_id":513,"body":"local codewars = {}\n\nfunction toBits(num,bits)\n    bits = bits or math.max(1, select(2, math.frexp(num)))\n    local t = {}      \n    for b = bits, 1, -1 do\n        t[b] = math.fmod(num, 2)\n        num = math.floor((num - t[b]) \/ 2)\n    end\n    return table.concat(t)\nend\n\nfunction codewars.encode(text)\n  local output = \"\"\n  for i = 1, string.len(text) do\n    local ascii = string.byte(string.sub(text,i,i))\n    local binary = toBits(ascii, 8)\n    for x = 1, 8 do\n      local c = string.sub(binary, x,x)\n      output = output .. c .. c .. c\n    end\n  end\n  return output\nend\n\nfunction codewars.decode(bits)\n  local buffer = \"\"\n  local untriple = \"\"\n  local output = \"\"\n  for i = 1, string.len(bits) do\n    buffer = buffer .. string.sub(bits, i, i)\n    if string.len(buffer) == 3 then\n      local c = 0\n      for x = 1, string.len(buffer) do\n        if string.sub(buffer, x, x) == \"1\" then\n          c = c+1\n        else\n          c = c-1\n        end\n      end\n      if c > 0 then\n        untriple = untriple .. \"1\"\n      else\n        untriple = untriple .. \"0\"\n      end\n      buffer = \"\"\n    end\n  end\n  buffer = \"\"\n  for i = 1, string.len(untriple) do\n    buffer = buffer .. string.sub(untriple, i, i)\n    if string.len(buffer) == 8 then\n      ascii = tonumber(buffer, 2)\n      output = output .. string.char(ascii)\n      buffer = \"\"\n    end\n  end\n  return output\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"5f0ed36164f2bc00283aed07":[{"id":211734,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  return n*2 - address+1\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211735,"user_id":513,"body":"local codewars = {}\n\n\nfunction codewars.over_the_road(address, n)\n  return 2*n-address+1\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211736,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n\n  local max = n * 2\n  local odd = address % 2 ~= 0\n  local line = odd and (address + 1) \/ 2 or (max - address) \/ 2 + 1\n  \n  return odd and max - (line-1) * 2 or line * 2 - 1\n  \nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211737,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  return (n-math.ceil(address\/2)+1)*2-(address+1)%2\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211738,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  n = 2 * n + 1\n  return n - (address % n)\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211739,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  -- Code here\n  return 2*n + 1 - address\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211740,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  -- Code here\n  maxhouse = n*2\n  delta = address-1\n  onehouse = maxhouse-delta\n  twohaiuse = 1+delta\n  if address == onehouse then return twohouse \n    else return onehouse\n    end\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211741,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, streetLength)\n  if address % 2 ~= 0 then --Is odd\n    jumpsFromAddress = (address-1)\/2\n    oppositeEnd = streetLength*2    \n  else -- Is not odd\n    jumpsFromAddress = (address\/2)-1\n    oppositeEnd = (streetLength*2)-1    \n  end\n  \n  local adjacentHouse = oppositeEnd-(2*jumpsFromAddress)\n  return adjacentHouse\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211742,"user_id":null,"body":"local codewars = {}\n\nfunction codewars.over_the_road(address, n)\n  return (n*2) - (address - 1)\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211743,"user_id":null,"body":"local codewars = {}\n\nlocal positionFromAddress = function(addr, streetLength)\n  return addr % 2 ~= 0\n    and math.ceil(addr \/ 2)\n    or streetLength - addr \/ 2 + 1\nend\n\nlocal addressFromPosition = function(pos, onOddSide, streetLength)\n  return onOddSide\n    and pos * 2 - 1\n    or (streetLength - pos + 1) * 2\nend\n\nfunction codewars.over_the_road(address, n)\n  local sidePos = positionFromAddress(address, n)\n  return addressFromPosition(sidePos, address % 2 == 0, n)\nend\n\nreturn codewars","lang_id":31,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"6071ef9cbe6ec400228d9531":[{"id":211744,"user_id":null,"body":"return function(equation)\n    return ('.'):rep(load('return '..equation:gsub('%.+', string.len))())\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211745,"user_id":null,"body":"return function(equation)\n  local a1,s,a2 = equation:match('(.*)%s(.*)%s(.*)')\n  return ('.'):rep(load('return '..a1:len()..s..a2:len())())\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211746,"user_id":null,"body":"return function(equation)\n  a, op, b = string.match(equation, '(%S+) (%S+) (%S+)')\n  if op == '+' then\n    return string.rep('.', #a + #b)\n  elseif op == '-' then\n    return string.rep('.', #a - #b)\n  elseif op == '*' then\n    return string.rep('.', #a * #b)\n  elseif op == '\/\/' then\n    return string.rep('.', math.floor(#a \/ #b))\n  end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211747,"user_id":198,"body":"return function(s)\n  local a, op, b = string.match(s, '([%.]+) ([%*%+%-\/]+) ([%.]+)')\n  a = #a\n  b = #b\n  local r = 0\n  if op == '*' then\n    r = a * b\n  elseif op == '+' then\n    r = a + b\n  elseif op == '-' then\n    r = a - b\n  elseif op == '\/\/' then\n    r = a \/\/ b\n  end\n  return string.rep('.', r)\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211748,"user_id":null,"body":"return function(equation)\n    split = string.find(equation,\" \")-1\n   firstNum = string.len(string.sub(equation, 1, split))\n   operator = string.sub(equation, split+2,split+3)\n   val=4\n   if operator == \"\/\/\" then\n      val=5\n   end\n   secondNum = string.len(string.sub(equation, split+val))\n   if operator == \"+ \" then\n      return string.rep(\".\", math.tointeger(firstNum + secondNum) or 0)\n   elseif operator == \"- \" then\n      return string.rep(\".\", math.tointeger(firstNum - secondNum) or 0)\n   elseif operator == \"* \" then          \n      return string.rep(\".\", math.tointeger(firstNum * secondNum) or 0)\n   elseif operator == \"\/\/\" then\n      return string.rep(\".\", math.tointeger(firstNum \/\/ secondNum) or 0)\n   end\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211749,"user_id":null,"body":"return function(equation)\n    local x,s,y = equation:match(\"(%S+)%s(%S+)%s(%S+)\")\n    local x1 = select(2, x:gsub(\".\", \".\"))\n    local y1 = select(2, y:gsub(\".\", \".\"))\n    local r = {\n    [\"+\"] = x1+y1,\n    [\"-\"] = x1-y1,\n    [\"*\"] = x1*y1,\n    [\"\/\/\"] = x1\/\/y1,\n  }\n    local d = r[s]\n    local f = \"\"\n    for i = 1,d do\n      f = f..\".\"\n    end\n    return f\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211750,"user_id":null,"body":"local function split(input,seperator)\n    local res = {}\n    for part in string.gmatch(input,string.format(\"([^%s]+)\",seperator)) do\n        res[#res+1] = part\n    end\n    return res\nend\n\nlocal options = {\n  [\"+\"] = function(a,b) return a-1 + b-1 end,\n  [\"-\"] = function(a,b) return a - b end,\n  [\"*\"] = function(a,b) return (a-1) * (b-1) end,\n  [\"\/\/\"] = function(a,b) return (a-1) \/ (b-1) end\n}\n\nreturn function(equation)\n    local amount = 0\n    for v,f in pairs(options) do\n        if split(equation,v)[2] then\n            local s = split(equation,v)\n            amount = f(#s[1],#s[2])\n            break\n        end\n    end\n    return string.rep(\".\", math.floor(amount))\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211751,"user_id":null,"body":"return function(equation)\n    local fam, sam, resul = 0, 0, 0\n    local parts = {}\n    local function calcul(form)\n       if form == \"+\" then resul = fam + sam\n       elseif form == \"-\" then resul = fam - sam\n       elseif form == \"*\" then resul = fam * sam\n       elseif form == \"\/\/\" then resul = fam \/ sam\n       end\n       return math.floor(resul)\n    end\n    for data in string.gmatch(equation, \"%S+\") do\n    table.insert(parts, data)\n    end\n    for i = 1, #parts[1] do\n       fam = fam + 1\n    end\n    for i = 1, #parts[3] do\n       sam = sam + 1\n    end\n    return string.rep(\".\", calcul(parts[2]))\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211752,"user_id":null,"body":"return function(equation)\n    local fam = 0\n    local sam = 0\n    local parts = {}\n    local dottable = {}\n    local function calcul(form)\n       local resul = 0\n       if form == \"+\" then\n       resul = fam + sam\n       elseif form == \"-\" then\n       resul = fam - sam\n       elseif form == \"*\" then\n       resul = fam * sam\n       elseif form == \"\/\/\" then\n       resul = fam \/ sam\n       end\n       return resul\n    end\n    for data in string.gmatch(equation, \"%S+\") do\n\t\ttable.insert(parts, data)\n\t  end\n    for i = 1, #parts[1] do\n       fam = fam + 1\n    end\n    for i = 1, #parts[3] do\n       sam = sam + 1\n    end\n    for i = 1, calcul(parts[2]) do\n       table.insert(dottable, \".\")\n    end\n    return table.concat(dottable, \"\")\nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211753,"user_id":null,"body":"return function(equation)\n  local result = \"\"\n  local sum = 0\n\n  if equation:find(\"+\") then\n    sum = equation:len()-3\n  elseif equation:find(\"-\") then   \n    sum = equation:sub(1, equation:find(\"-\")):len() - equation:sub(equation:find(\"-\"), equation:len() ):len()\n  elseif equation:find(\"*\") then  \n    sum = (equation:sub(1, equation:find(\"*\")):len()-2) * (equation:sub(equation:find(\"*\"), equation:len()):len()-2)\n  elseif equation:find(\"\/\") then   \n    sum = (equation:sub(1, equation:find(\"\/\")):len()-2) \/\/ (equation:sub(equation:find(\"\/\"), equation:len() ):len()-3)\n  end\n  \n  for i=1, sum do\n    result = result .. \".\"\n  end\n  \n  return result  \nend","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}],"621470ede0bb220022c9e396":[{"id":211754,"user_id":null,"body":"local kata = {}\n\nkata.hypertensive = function(patients)\n  local function test(p)\n    local s, d = 0, 0\n    for _,m in ipairs(p) do\n      local a, b = m:match\"(%d+)\/(%d+)\"\n      if 180-a<=0 and 110-b<=0 then return true end\n      s, d = s+a, d+b\n    end\n    return #p>1 and (s>=140*#p or d>=90*#p)\n  end\n  local s = 0\n  for _, p in ipairs(patients) do s=s+(test(p) and 1 or 0) end \n  return s\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211755,"user_id":null,"body":"local kata = {}\n\nkata.hypertensive = function(patients)\n  local hyp = 0\n  for _, samples in ipairs(patients) do\n    local ssum, dsum = 0, 0\n    local high_measurement = false\n    for _, sample in ipairs(samples) do\n      local s, d = sample:match '(%d+)\/(%d+)'\n      s, d = tonumber(s), tonumber(d)\n      ssum, dsum = ssum+s, dsum+d\n      if s>=180 and d>=110 then high_measurement=true end\n    end\n    local savg, davg = ssum\/#samples, dsum\/#samples\n    print(table.concat(samples, ' '), 'avg:', savg, davg, #samples)\n    if high_measurement or #samples>1 and (savg>=140 or davg>=90) then\n      hyp = hyp + 1\n    end\n  end\n  return hyp\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211756,"user_id":null,"body":"local kata = {}\n\nkata.hypertensive = function(patients)\n  local n = 0\n  for i = 1, #patients do\n    tot_sys = 0\n    tot_dia = 0\n    pat = patients[i]\n    one = false\n    for j = 1, #pat do\n      start, stop = pat[j]:find \"\/\"\n      sys = tonumber(string.sub(pat[j], 1, start-1))\n      dia = tonumber(string.sub(pat[j], stop+1, -1))\n      if sys >= 180 and dia >= 110 then\n        n = n + 1\n        one = true\n        break\n      end\n      tot_sys = tot_sys + sys\n      tot_dia = tot_dia + dia\n    end\n    if #pat > 1 and one == false and (tot_sys\/\/#pat >= 140 or tot_dia\/\/#pat >= 90) then n = n + 1 end\n  end\n  return n\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211757,"user_id":168,"body":"local kata = {}\n\nkata.hypertensive = function(patients)\n  local function check(ms)\n    local s, d = 0, 0\n    for _, m in pairs(ms) do\n      local a, b = m:match('(%d+)\/(%d+)')\n      a, b = tonumber(a), tonumber(b)\n      if a >= 180 and b >= 110 then return true end\n      s = s + a\n      d = d + b\n    end\n    return #ms >= 2 and (s >= 140 * #ms or d >= 90 * #ms)\n  end\n  local res = 0\n  for _, p in pairs(patients) do\n    if check(p) then res = res + 1 end\n  end\n  return res\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211758,"user_id":null,"body":"local kata = {}\n\nkata.hypertensive = function(patients)\n  local numHyper = 0\n    for patient, readings in pairs(patients) do\n      isHyper = false\n      local sumSystolic = 0\n      local sumDiastolic = 0\n      for _, reading in pairs(readings) do\n        local systolic, diastolic = reading:match(\"(%d+)\/(%d+)\")\n        if tonumber(systolic) >= 180 and tonumber(diastolic) >= 110 then\n          isHyper = true\n        end\n        sumSystolic = sumSystolic + systolic\n        sumDiastolic = sumDiastolic + diastolic\n      end\n      local numReadings = #readings\n      local avgSystolic = sumSystolic\/numReadings\n      local avgDiastolic = sumDiastolic\/numReadings\n      if numReadings >= 2 and ( avgSystolic >= 140 or avgDiastolic >= 90) then\n        isHyper = true\n      end\n      if isHyper == true then\n        numHyper = numHyper + 1\n        --print(patient, table.unpack(readings))\n      end\n    end\n    return numHyper\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"},{"id":211759,"user_id":135,"body":"local kata = {}\n\nlocal split = function(str, sep)\n  local matches = {}\n  for match in str:gmatch(\"[^\".. sep ..\"]+\") do\n    table.insert(matches, match)\n  end\n  return matches\nend\n\nkata.hypertensive = function(patients)\n  local result = 0\n  for _, patient in ipairs(patients) do\n    local systolic_avg = 0\n    local diastolic_avg = 0\n    local double_over = false\n    for _, sample in ipairs(patient) do\n      local sys, dia = table.unpack(split(sample, \"\/\"))\n      sys = tonumber(sys)\n      dia = tonumber(dia)\n      if sys >= 180 and dia >= 110 then\n        double_over = true\n        break\n      end\n      systolic_avg = systolic_avg + sys\n      diastolic_avg = diastolic_avg + dia\n    end\n    systolic_avg = systolic_avg \/ #patient\n    diastolic_avg = diastolic_avg \/ #patient\n    if double_over or (#patient > 1 and (systolic_avg >= 140 or diastolic_avg >= 90)) then\n      result = result + 1\n    end\n  end\n  return result\nend\n\nreturn kata","lang_id":31,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:30","updated_at":"2022-12-30 18:39:30"}]}