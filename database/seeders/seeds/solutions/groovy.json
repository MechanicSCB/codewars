{"58d3dd53b0fe8c9ac10000b3":[{"id":91955,"user_id":527,"body":"class Kata {\n  static removeO(str) {\n    str.replace('o', '')\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91956,"user_id":null,"body":"class Kata {\n  static removeO(str) {\n    str = str.replace('o', '')\n    \/\/ your code goes here\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91957,"user_id":null,"body":"class Kata {\n  static removeO(str) {\n    str.replaceAll('[o|O]', '')\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91958,"user_id":null,"body":"class Kata {\n  static removeO(str) {\n    str.replaceAll('o','')\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91959,"user_id":1365,"body":"class Kata {\n  static removeO(a) {\n    return a.replaceAll(\"o\", \"\")\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a600845fd56cbf4150000aa":[{"id":91960,"user_id":106,"body":"class Kata {\n  static String plc(sl){\n    def s=\"\"\n    for(def i=0; i<sl[0].length(); i++) s += sl.countBy { it.getAt(i) }.max { it.value }.key\n    return s.split(\" \").collect { (char)Integer.parseInt(it,2) }.join(\"\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91961,"user_id":503,"body":"class Kata\n{\n\tstatic String plc(T)\n\t{\n\t\tString R = \"\"\n\t\tint C,F,G\n\t\tfor (F = 0;F < T[0].length();++F)\n\t\t\tif (' ' == T[0][F]) R += ' '\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (C = G = 0;G < T.size;++G)\n\t\t\t\t\tif ('1' == T[G].charAt(F)) ++C\n\t\t\t\tR += T.size \/ 2 < C ? '1' : '0'\n\t\t\t}\n\t\tString[] U = R.split(' ')\n\t\tR = \"\"\n\t\tfor (F = 0;F < U.size();++F) R += (char)Integer.valueOf(U[F],2)\n\t\tR\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91962,"user_id":1673,"body":"class Kata {\n\n  static String binToString(s) {\n    s = s.replaceAll(\"\\\\s\",\"\")\n    String str = \"\"\n    for (int i = 0; i < s.length()\/8; i++) {\n        int a = Integer.parseInt(s.substring(8*i,(i+1)*8),2)\n        str += a as char\n    }\n    return str;\n  }\n  \n  static String plc(s){\n    String res = \"\"\n    for (int j = 0; j < s[0].length(); j++){\n        int sum = 0\n        for (int i = 0; i < s.size; i++){\n           if (s[i].charAt(j) == \" \"){\n               res = res + \" \"\n               j++\n           }\n           sum += Integer.valueOf(s[i].charAt(j).toString())\n        }\n        res += (sum \/ s.size > 0.5 ) ? '1' : '0'         \n    }\n    return binToString(res)\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a625f8c8803851b570000c3":[{"id":91963,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n    return -(-x-y)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91964,"user_id":1566,"body":"class Kata{\n    static int add(x, y){\n      x- -y\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91965,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n      def list = []\n      list.add(x)\n      list.add(y)\n      list.sum()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91966,"user_id":127,"body":"class Kata{\n    static int add(x, y){\n      return x-=-y;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91967,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n      int carry;\n      while(1){\n        carry=x&y;\n        x^=y;\n        if(carry==0)return x;\n        y=carry<<1;\n      }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91968,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n    return -(-x) - (-y);\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91969,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n      Math.addExact(x, y)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91970,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n        if(y==0)\n        {\n            return x;\n        }\n        return add(x^y, (x&y) <<1);\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91971,"user_id":null,"body":"class Kata{\n    static int add(x, y){\n      return x.plus(y);}\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91972,"user_id":1134,"body":"class Kata{\n    static int add(x, y){\n        while(y!=0){\n          int carry = x&y;\n          x=x^y;\n          y=carry<<1;\n        }\n        return x;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"61fca0fca0e59f000ef1324d":[{"id":91973,"user_id":179,"body":"import java.util.IdentityHashMap;\n\nclass LoopInspector {\n  \n  public static int[] findLoop(final Node node) {\n    final def map = new IdentityHashMap<>()\n    def current = node\n    def index = 0\n    while (map[current] == null) {\n      map[current] = index++\n      current = current.next\n    }\n    return (1 .. index - map[current]).collect { current.with { current = it.next; it.value } } as int[]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91974,"user_id":53,"body":"class LoopInspector {\n  public static int[] findLoop(Node node) {\n    final def seen = Collections.newSetFromMap(new IdentityHashMap<Node, Boolean>());\n    while (!seen.contains(node)) {\n      seen.add(node);\n      node = node.getNext();\n    }\n    final def head = node;\n    final def builder = new ArrayList<Integer>();\n    while (true) {\n      builder.add(node.getValue());\n      node = node.getNext();\n      if (node == head) break;\n    }\n    return builder.toArray();\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91975,"user_id":53,"body":"class LoopInspector {\n  \/\/ Unnamed's Java solution\n  public static int[] findLoop(Node node) {\n    HashMap<Node, Integer> seen = new HashMap<>();\n    Integer i;\n    int j = -1;\n    Node n = node;\n    while ((i = seen.put(n, ++j)) == null) n = n.getNext();\n    int[] vs = new int[j - i];\n    for (int k = 0; k < vs.length; k++) {\n      vs[k] = n.getValue();\n      n = n.getNext();\n    }\n    return vs;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52742f58faf5485cae000b9a":[{"id":91976,"user_id":null,"body":"class Kata {\n  static String format_duration(seconds){\n    if (!seconds) return 'now'\n    \n    List strings = []\n    Date date = new GregorianCalendar(0,0,0,0,0,seconds,0).time   \n    \n    int days  = (int)(seconds\/60\/60\/24)\n    int years = (int)(days\/365)\n   \n    if (years)        { strings << getString(years,'year'); days%=365 }\n    if (days)         { strings << getString(days,'day')}\n    if (date.hours)   { strings << getString(date.hours, 'hour')  }    \n    if (date.minutes) { strings << getString(date.minutes, 'minute') }\n    if (date.seconds) { strings << getString(date.seconds, 'second') }\n        \n    String last = strings.pop()     \n    (strings.size() ? strings.join(', ')+' and ' : '')+last\n  }\n  \n  static String getString(int value, String string) { \"$value ${string+(value>1?'s':'')}\" }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91977,"user_id":null,"body":"class Kata {\n  static String format_duration(seconds){\n    int years = 0;\n    int days = 0;\n    int hours = 0;\n    int minutes = 0;\n\n    \/\/ find amount of years\n    if(seconds >= 31536000){\n      years += Math.floor(seconds\/31536000);\n      seconds -= 31536000 * years;\n    }\n\n    \/\/ find amount of days\n    if(seconds >= 86400){\n      days += Math.floor(seconds\/86400);\n      seconds -= 86400 * days;\n    }\n\n    \/\/ find amount of hours\n    if(seconds >= 3600){\n      hours = (seconds\/3600);\n      seconds -= 3600 * hours;\n    }\n\n    \/\/ find amount of minutes\n    if(seconds > 60){\n      minutes = Math.floor(seconds\/60);\n      seconds -= 60 * minutes;\n    }\n\n    \/\/ 2D array used to build the string\n    def stringBuilder = [[\"year\", years],[\"day\",days],[\"hour\", hours],[\"minute\",minutes], [\"second\",seconds]].findAll{it[1] > 0};\n\n    String outputString = \"${stringBuilder.size() == 0?'now':''}\";\n    stringBuilder.eachWithIndex{i,j ->\n      if(j == stringBuilder.size()-1){\n        outputString += \"${outputString.size() > 0?' and ':''}${i[1]} ${i[0]}${i[1] > 1?'s':''}\"\n      }\n\n\n      else{\n        outputString += \"${outputString.size() > 0?', ':''}${i[1]} ${i[0]}${i[1] > 1?'s':''}\";\n      }\n    print(stringBuilder.size());\n    }\n    return outputString;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91978,"user_id":null,"body":"class Kata {\n  static String format_duration(remainder){\n    if (remainder < 0) {\n            return 0\n        }\n        if (remainder == 0) {\n            return \"now\"\n        }\n        def m = [second: 60, minute: 60, hour: 24, day: 365]\n\n        def result = m.collectEntries { String k, Integer v ->\n            int val = remainder % v\n            remainder = remainder.intdiv(v)\n            def key = (val == 1)?k:\"${k}s\"\n            if (val > 0) {\n                return [(key) : val]\n            }\n            [:]\n        }\n        if (remainder > 1) {\n            result.years = remainder\n        } else if (remainder == 1) {\n            result.year = remainder\n        }\n        def reversed = [:]\n        result.reverseEach { k, v -> reversed[k] = v }\n        StringBuilder builder = new StringBuilder()\n        reversed.eachWithIndex { Map.Entry<Object, Object> entry, int i ->\n            if (i == reversed.size() - 1 && reversed.size() > 1) {\n                builder.append(\" and \")\n            } else if (i > 0){\n                builder.append(\", \")\n            }\n            builder.append(entry.value).append(\" \").append(entry.key)\n        }\n\n        builder\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91979,"user_id":null,"body":"class Kata {\n    static String format_duration(seconds){\n        if (seconds == 0) return \"now\"\n\n        def UNIT_DIVISORS = [60, 60, 24, 365]\n        def UNIT_NAMES = [\"second\", \"minute\", \"hour\", \"day\", \"year\"]\n\n        \/\/ lol\n        UNIT_DIVISORS\n            .collect {\n                def a = seconds % it\n                seconds = seconds.intdiv(it)\n                return a\n            }\n            .plus(seconds)\n            .plus(UNIT_NAMES)\n            .plus([', '] * UNIT_NAMES.size())\n            .collate(UNIT_NAMES.size())\n            .transpose()\n            .findAll{it[0] != 0}\n            .indexed()\n            .collect{idx,it ->\n                def unit = it[1] + (it[0] > 1 ? \"s\" : \"\")\n                def sep\n                if (idx == 0)\n                    sep = \"\"\n                else if (idx == 1)\n                    sep = \" and \"\n                else\n                    sep = \", \"\n                \"${it[0]} ${unit}${sep}\"\n            }\n            .reverse()\n            .join('')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91980,"user_id":null,"body":"class Kata {\n  static String format_duration(duration){\n    int secInMinutes = 60\n    int secInHours = 3600\n    int secInDays = 86400\n    int secInYears = 31536000\n    int secLeft = 1\n    def result = []\n    def phrase = \"\"\n    def timeTable = [secInYears, secInDays, secInHours, secInMinutes, secLeft]\n    def format = [\"years\", \"days\", \"hours\", \"minutes\", \"seconds\"]\n    int k = 0\n    int temp = 0\n    if (duration == 0){\n      return \"now\"\n    } else{\n          timeTable.each{it -> \n            if (duration%it != duration){\n              temp = duration\n              if (((temp\/it).toInteger()) == 1){\n                  format[k] = format[k].replaceAll('.$', '')\n              }\n              duration = duration%it\n              phrase = ((temp\/it).toInteger()).toString() + \" \" + format[k]\n              result.add(phrase)\n              k+=1\n              }\n              else{\n              k+=1\n              }\n            }\n            phrase = \"\"\n            def len = result.size()\n            if (len == 1){\n              phrase = phrase + result[0]\n                }\n            else{\n              phrase = result[0..(len-2)].join(', ') + ' and ' + result.last() \n            }\n          }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91981,"user_id":null,"body":"class Kata {\n  static String format_duration(sec){\n    if(sec == 0){\n      return \"now\"\n    }\n    def (years, days, hours, minutes, seconds) = [0, 0, 0, 0, 0]   \n  def (y, d, h, m, s) = [31536000, 86400 ,3600, 60, 1]\n       if(sec >= y){\n      years = (sec\/y).toInteger()\n      sec = sec - (years * y)\n    }\n    if(sec >= d){\n      days = (sec\/d).toInteger()\n      sec = sec - (days * d)\n    }\n    if(sec >= h){\n      hours = (sec\/h).toInteger()\n      sec = sec - (hours * h) \n    }\n    if(sec >= m){\n      minutes = (sec\/m).toInteger()\n      sec = sec - (minutes * m)\n    }\n    if(sec >= s){\n      seconds = (sec\/s).toInteger()\n      sec = sec - (seconds * s)\n    }\n    List<String> result = []\n    if(years){\n      if(years > 1){\n      result << \"$years years\"\n      }else{\n        result << \"$years year\"\n      }\n    }\n    if(days){\n      if(days > 1){\n      result << \"$days days\"\n      }else{\n        result << \"$days day\"\n      }\n    }\n    if(hours){\n      if(hours > 1){\n      result << \"$hours hours\"\n      }else{\n        result << \"$hours hour\"\n      }\n    }\n    if(minutes){\n      if(minutes > 1){\n      result << \"$minutes minutes\"\n      }else{\n        result << \"$minutes minute\"\n      }\n    }\n     if(seconds){\n      if(seconds > 1){\n      result << \"$seconds seconds\"\n      }else{\n        result << \"$seconds second\"\n      }\n    }\n    def r = result.size()\n     if(r < 2){\n      return result[0]?.replaceAll(\"\\\\[|\\\\]\", \"\")\n    }else if(r == 2){\n        result.add(1, \"and\")\n         return result.join(\" \")\n    } else if(r > 2){\n        result.add(r-1, \"and\");\n        def last = result[-1]\n      def an = result[-2]\n        return result[0..(r - 2)].join(\", \") + \" $an\" + \" $last\"     \n    }    \n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91982,"user_id":null,"body":"class Kata {\n  static String format_duration(seconds){\n    if (seconds == 0)\n      return \"now\"\n    \n    def res = \"\"\n    \n    if (seconds >= 31536000) {\n      def counterYears = 0\n      \n      while (seconds >= 31536000) {\n        seconds -= 31536000\n        counterYears++\n      }\n      \n      res += counterYears\n      res += counterYears > 1 ? \" years\" : \" year\"\n    }\n    \n    if (seconds >= 86400) {\n      def counterDays = 0\n      \n      while (seconds >= 86400) {\n        seconds -= 86400\n        counterDays++\n      }\n      \n      if (res != \"\")\n        res += seconds > 0 ? \", \" : \" and \"\n      \n      res += counterDays\n      res += counterDays > 1 ? \" days\" : \" day\"\n    }\n    \n    if (seconds >= 3600) {\n      def counterHours = 0\n      \n      while (seconds >= 3600) {\n        seconds -= 3600\n        counterHours++\n      }\n      \n      if (res != \"\")\n        res += seconds > 0 ? \", \" : \" and \"\n\n      res += counterHours\n      res += counterHours > 1 ? \" hours\" : \" hour\"\n    }\n    \n    if (seconds >= 60) {\n      def counterMinutes = 0\n      \n      while (seconds >= 60) {\n        seconds -= 60\n        counterMinutes++\n      }\n      \n      if (res != \"\")\n        res += seconds > 0 ? \", \" : \" and \"\n      \n      res += counterMinutes\n      res += counterMinutes > 1 ? \" minutes\" : \" minute\"\n    }\n    \n    if (seconds > 0) {\n      res += (res != \"\" ? \" and \" : \"\") + seconds + (seconds > 1 ? \" seconds\" : \" second\") \n    }\n    \n    return res\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91983,"user_id":null,"body":"class Kata {\n\n    static String format_duration(seconds) {\n        if (!seconds) {\n            return 'now'\n        }\n        def units = ['second': 1,\n                     'minute': 60,\n                     'hour': 60 * 60,\n                     'day': 24 * 60 * 60,\n                     'year': 365 * 24 * 60 * 60]\n            .sort {-it.value}\n            .collect {it ->\n                if (seconds >= it.value) {\n                    def unitCount = seconds.intdiv it.value\n                    seconds -= it.value * unitCount\n                    \"${unitCount} ${it.key}${unitCount > 1 ? 's' : ''}\"\n                }\n            }\n            .findAll {it}\n        def last = units.removeLast()\n        units.isEmpty() ? last : \"${units.join(', ')} and $last\"\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91984,"user_id":null,"body":"class Kata {\n  \n    static String format_duration(seconds) {\n        if (seconds == 0) {\n            return 'now'\n        }\n        def units = [1: 'second',\n                     60: 'minute',\n                     (60 * 60): 'hour',\n                     (24 * 60 * 60): 'day',\n                     (365 * 24 * 60 * 60): 'year']\n            .sort {-it.key}\n            .collect {it ->\n                if (seconds >= it.key) {\n                    def unitCount = seconds.intdiv it.key\n                    seconds -= it.key * unitCount\n                    \"${unitCount} ${it.value}${unitCount > 1 ? 's' : ''}\"\n                }\n            }\n            .findAll {it}\n        def last = units.removeLast()\n        if (units.isEmpty()) {\n            return last\n        }\n        def joiner = new StringJoiner(', ', '', \" and ${last}\")\n        units.each {joiner.add(it)}\n        joiner\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91985,"user_id":null,"body":"class Kata {\n  static String format_duration(seconds){\n      String answer = \"\";\n      if (seconds != 0) {\n      int index = 0;\n      int term;\n      List DELIM = [31536000, 86400, 3600, 60, 1];\n      List ITEMS = [\"year\", \"day\", \"hour\", \"minute\", \"second\"];\n      while (seconds > 0) {\n          term = seconds \/ DELIM[index];\n          if (term != 0) {\n              answer += Integer.toString(term) + \" \" + ITEMS[index];\n              if (term > 1) { answer += \"s\" }\n              answer += \", \";\n          }\n          seconds %= DELIM[index];\n          index+=1;\n      }\n      answer = answer[0 .. -3];\n      int lastComma = answer.lastIndexOf(\",\");\n      if (lastComma > 0) {\n          answer = answer[0 .. lastComma -1] + \" and\" + answer.substring(lastComma+1, answer.length()) ;\n      }\n        return answer;\n    } else return answer = \"now\";\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52bef5e3588c56132c0003bc":[{"id":91986,"user_id":575,"body":"class Kata {\n    static def treeByLevels(node) {\n        if (!node) {\n            return []\n        }\n        def queue = [node] as Queue\n        def result = []\n        while(!queue.empty) {\n            def n = queue.poll()\n            result << n.value\n            if (n.left != null) { queue << n.left }\n            if (n.right != null) { queue << n.right }\n        }\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91987,"user_id":null,"body":"class Kata {\n    static def treeByLevels(node) {\n      List result = []\n      List nodesToIterate = [node]\n      \n      while(nodesToIterate){\n        \n        Node currentNode = nodesToIterate[0]\n        nodesToIterate.remove(0)\n        \n        if(currentNode){\n          result.add currentNode.value\n          \n          [currentNode.left, currentNode.right]\n            .findAll { it != null }\n            .forEach { nodesToIterate.add it }\n        }\n        \n      }\n      result\n        \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91988,"user_id":null,"body":"class Kata {\n    static def treeByLevels(node) {\n      def ans = []\n      def queue = [node]\n      while (!queue.isEmpty()) {\n        def cur = queue.pop()\n        if (cur == null) continue\n        ans << cur.value\n        queue << cur.left << cur.right\n      }\n      return ans\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91989,"user_id":null,"body":"class Kata {\n    static def treeByLevels(node) {\n      List elements = []\n      List queue = [node]\n      \n      if (!node) {\n        return elements\n      }\n      \n      while(!queue.empty) {\n        Node currentNode = (Node) queue.pop()\n        \n        if (currentNode.value) {\n          elements.add(currentNode.value)\n        }\n        if (currentNode.left) {\n          queue.add(currentNode.left)\n        }\n        if (currentNode.right) {\n          queue.add(currentNode.right)  \n        }\n      }\n      \n      elements\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91990,"user_id":null,"body":"class Kata {\n    static def treeByLevels(node) {\n        \/\/ Implement me! :)\n      if (!node) return []\n      def next = true\n      def nodes = [[node]]\n      def level = 0\n      def currentNodes\n      while (next) {\n        next = false\n        currentNodes = []\n        for (n in nodes[level]) {\n          if (n.left) {\n            currentNodes << n.left\n            next = true\n            }\n          if (n.right) {\n            currentNodes << n.right\n            next = true\n            }\n        }\n        nodes << currentNodes\n        level++\n      }\n      return nodes.inject {a, b -> \n        a.collect{it.value} + b.collect{it.value}}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91991,"user_id":null,"body":"class Kata {\n    static List<Integer> arr\n    static def treeByLevels(node) {\n      def level = 1\n      arr = []\n      while(treeByLevels(node,level)) {\n        level ++\n      }\n      return arr\n    }\n    static def treeByLevels(node, level) {\n      if(node == null) { return false }\n      if(level == 1) {\n        arr.add(node.value)\n        return true\n      }\n      def left = treeByLevels(node.left, level - 1)\n      def right = treeByLevels(node.right, level -1)\n      return left || right     \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91992,"user_id":50,"body":"class Kata {\n    static def treeByLevels(node) {\n      if (node==null){return []}\n      def d=[[node]]\n      while (true){\n        def l=[]\n        for (n in d[d.size-1]){\n          if (n.left!=null)l<<n.left\n          if (n.right!=null)l<<n.right\n        }\n        if (l.size==0){break}\n        d<<l\n      }\n      def o=[]\n      for (x in d){\n        for (e in x){\n          o<<e.value\n        }\n      }\n      return o\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91993,"user_id":168,"body":"class Kata {\n    static def treeByLevels(node) {\n      def result = [], q = [node]\n      while (!q.isEmpty()) {\n        def x = q.pop()\n        if (x) {\n          result << x.value\n          q << x.left\n          q << x.right\n        }\n      }\n      result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91994,"user_id":null,"body":"class Kata {\n  \n    static def treeByLevels(def node) {\n        if(!node) return []\n        def children = [node.left, node.right]\n        def values = [node.value]\n        while(children) {\n            Node child = children[0]\n            if(child?.value) values << child.value\n            children.remove(0)\n            if(child?.left) children << child.left\n            if(child?.right) children << child.right\n        }\n        values\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91995,"user_id":null,"body":"class Kata {\n    static def treeByLevels(Node node) {\n        listElements(node, new ArrayList(), 0).stream()\n                .sorted(Comparator.comparing { it[0] })\n                .map { it[1] }.collect()\n    }\n\n    private static listElements(node, l, lvl) {\n        if (!node) return l\n        l << new Tuple2(lvl, node.getValue())\n        listElements(node.getLeft(), l, lvl + 1)\n        listElements(node.getRight(), l, lvl + 1)\n        l\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"546d15cebed2e10334000ed9":[{"id":91996,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    def ops = ['-':{a,b->a-b},'+':{a,b->a+b},'*':{a,b->a*b}]\n    def digit = \/(0|-?[1-9]\\d*)\/\n    \n    def list = (0..9).findAll{\n      def matcher = e.replace('?',it+'') =~ \/^${digit}([\\+\\-\\*\\\/])${digit}=${digit}$\/\n      if (matcher.count) {\n        def digits = [1,3,4].collect{matcher[0][it] as Integer}\n        return !e.contains(it+'') && ops[matcher[0][2]](digits[0],digits[1])==digits[2]\n      }\n    }\n    list ? list[0] : -1\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91997,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    for (int i = 0; i < 10; i++){\n      def equation = e.replace('=', '==').replace('--', '+').replace('?', (i as String))\n      if (!e.contains(i as String) && !(equation =~ '([^0-9]|^)0[0-9]')){\n        if (Eval.me(equation))\n          return i\n      }\n    }\n    return -1\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91998,"user_id":null,"body":"import java.util.regex.Pattern\nimport java.util.regex.Matcher\n\nclass Kata {\n\n  static int solve_runes(e){\n    def skipZero = { num->\n      num = num[0] == \"-\" ? num.substring(1) : num\n      if (num[0] == \"?\" && num.size() > 1) return true\n      return false\n    }\n    def substChar = { s, ch->\n      return s.collect{it == \"?\" ? ch : it}.join().toInteger()\n    }\n    \n    def num1Sub, num2Sub, resESub, resCalc, po\n\n    def m = Pattern.compile(\/(\\d|\\?)[*+-]\/).matcher(e)\n    while (m.find()) { po = m.start() + 1 }\n    def oper = e.substring(po, po + 1)\n    def num1 = e.substring(0, po)\n    def num2 = e.substring(po + 1).split('=')[0]\n    def resE = e.substring(po + 1).split('=')[1]\n    \n    def digRange = (skipZero(num1) || skipZero(num2) || skipZero(resE) ? \"1\"..\"9\" : \"0\"..\"9\") - (e as List)\n\n    for (i in digRange) {\n      switch (oper) {\n          case \"*\": resCalc = substChar(num1, i) * substChar(num2, i); break;\n          case \"-\": resCalc = substChar(num1, i) - substChar(num2, i); break;\n          case \"+\": resCalc = substChar(num1, i) + substChar(num2, i); break;\n      }\n      if (resCalc == substChar(resE, i)) return i.toInteger()\n    }\n    return -1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":91999,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    try {\n      new Expression(e).rune\n    } catch(any) {\n      -1\n    }\n  }\n  \n  static class Expression {\n    String original\n    Number left\n    Operation op\n    Number right\n    Number result\n    \n    Expression(String original) {\n      this.original = original\n      parse()\n    }\n    \n    void parse() {\n      String data = new String(original)\n      \/\/ Set left.\n      left = new Number()\n      StringBuilder leftBuilder = new StringBuilder()\n      int i\n      for(i=0;i==0 || !('*-+'.contains(data[i]));i++) {\n        leftBuilder << data[i]\n      }\n      left.original = leftBuilder.toString()\n      \n      \/\/ Set op.\n      switch(data[i++]) {\n        case '*':\n          op = Operation.TIMES\n          break\n        case '+':\n          op = Operation.PLUS\n          break\n        case '-':\n          op = Operation.MINUS\n          break\n        default:\n          throw new Exception(\"WTF is this? ${data[i-1]}\")\n      }\n      \n      \/\/ Set right.\n      right = new Number()\n      StringBuilder rightBuilder = new StringBuilder()\n      for(;data[i]!='=';i++) {\n        rightBuilder << data[i]\n      }\n      right.original = rightBuilder.toString()\n      \n      \/\/ Set result.\n      result = new Number()\n      result.original = data[++i..-1]\n    }\n    \n    int getRune() {\n      possibleRunes.find {\n        eval(it)\n      }\n    }\n    \n    def getPossibleRunes() {\n      (0..9).findAll {\n        !((left.original + right.original + result.original).contains(\"$it\"))\n      }\n    }\n    \n    boolean eval(int R) {\n      if(R == 0 &&\n         [left.original,right.original,result.original].find {\n          it.startsWith('-?') ||\n             (it.startsWith('?') && it.size() > 1)\n        }) return false\n      op.method(left.eval(R),right.eval(R)) == result.eval(R)\n    }\n    \n    \n    class Number {\n      String original\n      \n      int eval(int R) {\n        original.replaceAll(\/\\?\/,\"$R\") as int\n      }\n    }\n    \n    enum Operation {\n      PLUS,MINUS,TIMES\n      \n      def getMethod() {\n        switch(this) {\n          case PLUS:\n            Operation.&plus\n            break\n          case MINUS:\n            Operation.&minus\n            break\n          case TIMES:\n            Operation.&times\n            break\n        }\n      }\n      \n      static int plus(int a,int b) {\n        a + b\n      }\n      \n      static int minus(int a,int b) {\n        a - b\n      }\n      \n      static int times(int a,int b) {\n        a * b\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92000,"user_id":76,"body":"class Kata {\n  static int solve_runes(e) {\n    for (i in 0..9) {\n      if (e.contains(\"\" + i)) continue\n      String expr = e.replaceAll(\"\\\\?\", \"\" + i)\n      if (expr =~ \/.*\\b0[0-9]\/) continue\n      def m = expr =~ \/(-?\\d+)([*+-\\\/])(-?\\d+)=(-?\\d+)\/\n      m.find()\n      int a = m.group(1) as int\n      String op = m.group(2)\n      int b = m.group(3) as int\n      int c = m.group(4) as int\n      int res = op == '*' ? a * b : op == '-' ? a - b : a + b\n      if (res == c) return i\n    }\n    return -1;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92001,"user_id":null,"body":"class Kata {\n    static int solve_runes(String puzzle) {\n        Integer result = (0..9).find {\n            if (puzzle.contains(it + \"\")) return false\n            List<String> match = (puzzle.replace(\"?\", it + \"\") =~ \/^(-?\\d+)([+\\-*])(-?\\d+)=(-?\\d+)$\/)[0] as List<String>\n            if (!match || match.isEmpty()) return false\n            String fullMatch, num1, op, num2, result\n            (fullMatch, num1, op, num2, result) = match\n            if ([num1, num2, result].any { it ==~ \/^-?0\\d+$\/ }) return false\n            switch (op) {\n                case \"+\": return (num1 as int) + (num2 as int) == (result as int)\n                case \"-\": return (num1 as int) - (num2 as int) == (result as int)\n                case \"*\": return (num1 as int) * (num2 as int) == (result as int)\n            }\n        }\n        return result != null ? result : -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92002,"user_id":null,"body":"class Kata {\n  static int solve_runes(e) {\n    def rune = -1\n    def (number1, operator, number2, result) = (e =~ (\/([-]*[0-9?]+)([\\+-\\\\*])([-]*[0-9?]+)=([-]*[0-9?]+)\/))[0][1..4]\n    \n    for (i in (0..9)) {\n      if (number1.contains(i.toString()) || number2.contains(i.toString()) || result.contains(i.toString())) {\n        continue\n      }\n      \n      if (i == 0 && (startsWithZero(number1) || startsWithZero(number2) || startsWithZero(result))) {\n        continue\n      }\n    \n      def n1 = number1.replaceAll('\\\\?', i.toString()).toInteger()\n      def n2 = number2.replaceAll('\\\\?', i.toString()).toInteger()\n      def r = result.replaceAll('\\\\?', i.toString()).toInteger()\n\n      def expression = null\n      switch (operator) {\n        case '+':\n          expression = n1 + n2\n          break\n        case '-':\n          expression = n1 - n2\n          break\n        case '*':\n          expression = n1 * n2\n          break\n      }\n      \n      if (expression == r) {\n        rune = i\n        break\n      }\n    }\n    rune\n  }\n  \n  def static startsWithZero(String n) {\n    (n.replaceFirst('-','').size() > 1 && (n.startsWith('?') || n.startsWith('-?')))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92003,"user_id":null,"body":"enum EnumOp { PLUS, MINUS, TIMES }\n\nclass Kata {\n    static int solve_runes(e){\n        int result; boolean resultFound = false\n        def op\n        String nStr1; String nStr2; String nStr3\n        String[] leftRight = e.toString().split(\"=\")\n        nStr3 = leftRight[1].toString()\n        if( leftRight[0].contains('+') ) {\n            op=EnumOp.PLUS\n            ( nStr1, nStr2 ) = leftRight[0].split('\\\\+')\n        }\n        else if( leftRight[0].contains('*') ) {\n            op=EnumOp.TIMES\n            ( nStr1, nStr2 ) = leftRight[0].split('\\\\*')\n        }\n        else if( leftRight[0].contains('-') ) {\n            op=EnumOp.MINUS\n            int startPos = leftRight[0].substring(0,1).equals('-') ? 1 : 0\n            int opPos = leftRight[0].indexOf('-', startPos)\n            nStr1= leftRight[0].substring(0,opPos)\n            nStr2 = leftRight[0].substring(opPos+1)\n        }\n        [0..9]*.each {\n            if( !resultFound ) {\n                String testNumber = it.toString()\n                if (!e.contains(testNumber)) {\n                    String[] s = [nStr1, nStr2, nStr3].collect() { it.replace('?', testNumber) }\n                    def n = [null, null, null]\n                    s.eachWithIndex { elem, index ->\n                        if (\n                        (!elem.startsWith(\"0\") && !elem.startsWith(\"-0\"))\n                                || elem.equals(\"0\")\n                                || elem.equals(\"-0\")\n                        ) {\n                            if(elem.isInteger()) { n[index] = elem.toInteger() }\n                        }\n                    }\n                    if (n[0] != null && n[1] != null && n[2] != null)\n                        switch (op) {\n                            case EnumOp.PLUS: if ((n[0] + n[1]) == n[2]) {\n                                result = it; resultFound = true\n                            }; break\n                            case EnumOp.MINUS: if ((n[0] - n[1]) == n[2]) {\n                                result = it; resultFound = true\n                            }; break\n                            case EnumOp.TIMES: if ((n[0] * n[1]) == n[2]) {\n                                result = it; resultFound = true\n                            }; break\n                        }\n                }\n            }\n        }\n        return resultFound ? result : -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92004,"user_id":null,"body":"class Kata {\n  static int solve_runes(e) {\n    def s, nums, a, b, c, m\n    def nl = \/^-?0(?=.)+\/\n    def op = (e=~\/[+*]|(?<=\\d|\\?)-\/)[0] \n    for (def d in 0..9) {\n      if (e.indexOf(\"${d}\")>=0) continue\n      s = e.replace(\"?\", \"${d}\")\n      nums = s.split(\/[+*=]|(?<=\\d|\\?)-\/)\n      if (d==0 && (nums[0]=~nl || nums[1]=~nl \n        || nums[2]=~nl)) continue\n      a = nums[0] as Integer\n      b = nums[1] as Integer\n      c = nums[2] as Integer\n      switch (op) {\n        case '+': m = c==a+b; break\n        case '-': m = c==a-b; break \n        case '*': m = c==a*b; break \n        default: m = false\n      }\n      if (m) return d\n    }\n    -1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92005,"user_id":1673,"body":"import java.util.regex.*\nclass Kata {\n  static int solve_runes(e){\n    for (int i = 0; i < 10; i ++) {\n      if (e.contains(i + '')) continue\n      String test = e.replace('?', i + '')\n      Pattern p = Pattern.compile(\"(-?+[0-9]+)([*+-])(-?+[0-9]+)=(.*)\")\n      Matcher m = p.matcher(test)\n      if (m.matches()) {\n        String a = m.group(1), b = m.group(3), c = m.group(4);\n        if (!(a.matches(\"-*0.+\") || b.matches(\"-*0.+\") || c.matches(\"-*0.+\"))){\n          int ai = Integer.valueOf(a), bi = Integer.valueOf(b), ci = Integer.valueOf(c)\n          switch (m.group(2)) {\n            case \"+\" : \n              if (ai + bi == ci)\n                return i\n              break\n            case \"-\" :\n              if (ai - bi == ci)\n                return i\n              break\n            case \"*\" :\n              if (ai * bi == ci)\n                return i\n              break\n          }\n        }\n      }\n    }\n    return -1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92006,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n      def split = []\n      String operator = e.contains(\"+\") ? \"+\" : e.contains(\"*\") ? \"*\" : \"-\"\n      \n      for(int i = 0; i < 10; i++){\n        String temp = new String(e)\n        String response = null\n        if(operator != \"-\")\n          split = splitStringByOperator(temp, operator, i)\n        else\n          split = splitMinusOperator(temp, i)\n        String number1 = split.get(0).startsWith(\"--\") ? split.get(0).substring(1,split.get(0).length()) : split.get(0)\n        String number2 = split.get(1).startsWith(\"--\") ? split.get(1).substring(1,split.get(1).length()) : split.get(1)\n        String number3 = split.get(2).startsWith(\"--\") ? split.get(2).substring(1,split.get(2).length()) : split.get(2)\n        \n        if(number1 == \"00\" || number2 == \"00\" || number3 == \"00\" \n            || (number1.startsWith(\"0\")  && number1.length() > 1)\n            || (number2.startsWith(\"0\")  && number2.length() > 1)\n            || (number3.startsWith(\"0\")  && number3.length() > 1))\n          continue\n       \n        switch(operator){\n         case(\"*\"):\n            response = Integer.parseInt(number1) * Integer.parseInt(number2) == Integer.parseInt(number3) ? \"${i}\" : null\n            break\n         case(\"+\"):\n            response = Integer.parseInt(number1) + Integer.parseInt(number2) == Integer.parseInt(number3) ? \"${i}\" : null \n            break\n         case(\"-\"):\n            response = Integer.parseInt(number1) - Integer.parseInt(number2) == Integer.parseInt(number3) ? \"${i}\" : null\n            break\n        }\n        if(response != null && !e.contains(response)) return Integer.parseInt(response)\n      }\n      \n      return -1\n  }\n  \n  static List splitStringByOperator(temp, operator, i) {\n    temp = temp.replaceAll('\\\\?',\"${i}\")\n    \n    def split = temp.substring(0,temp.indexOf(\"=\")).split(\"\\\\${operator}\")\n    def list = split as List\n    if(list.size() >= 2) {\n      list.add(\"${temp.split(\"=\")[1]}\")\n    }\n    \n    return list\n  }\n  \n  static List splitMinusOperator(temp, i) {\n    temp = temp.replaceAll('\\\\?',\"${i}\")\n    def split = []\n    if(temp.startsWith(\"-\")){\n      temp = temp.substring(1,temp.length())\n      split << \"-${temp.substring(0,temp.indexOf(\"-\"))}\"\n      split << \"${temp.substring(temp.indexOf(\"-\")+1,temp.indexOf(\"=\"))}\"\n      split << temp.split(\"=\")[1]\n    } else {\n      split << temp.substring(0,temp.indexOf(\"-\"))\n      split << temp.substring(temp.indexOf(\"-\")+1,temp.indexOf(\"=\"))\n      split << temp.split(\"=\")[1]\n    }\n    println split\n    return split\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92007,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    int c\n    def ops = ['-':{a,b->a-b},'+':{a,b->a+b},'*':{a,b->a*b}]\n    def digit = \/(0|-?[1-9]\\d*)\/\n    \n    def list = (0..9).findAll{\n      def matcher = e.replace('?',it+'') =~ \/^${digit}([\\+\\-\\*\\\/])${digit}=${digit}$\/\n      if (matcher.count) {\n        def digits = [1,3,4].collect{matcher[0][it] as Integer}\n        c = digits[1]\n        return ops[matcher[0][2]](digits[0],digits[1])==digits[2]\n      }\n    }\n    return c==11?2 : (list ? list[0] : -1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92008,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    int c\n    def list = (0..9).findAll{\n      def ops = ['-':{a,b->a-b},'+':{a,b->a+b},'*':{a,b->a*b}]\n      def digit = \/(0|-?[1-9]\\d*)\/\n      def matcher = e.replace('?',it+'') =~ \/^${digit}([\\+\\-\\*\\\/])${digit}=${digit}$\/\n      if (matcher.count) {\n        def digits = [1,3,4].collect{matcher[0][it] as Integer}\n        c = digits[1]\n        return ops[matcher[0][2]](digits[0],digits[1])==digits[2]\n      }\n    }\n    return c==11?2 : (list ? list[0] : -1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92009,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n    int a,b,c\n    def list = (0..9).findAll{\n      def digit = \/(0|-?[1-9]\\d*)\/\n      def matcher = (e.replace('?',it+'') =~ \/^${digit}([\\+\\-\\*\\\/])${digit}=${digit}$\/)\n      if (matcher.count) {\n        a = matcher[0][1] as Integer\n        b = matcher[0][3] as Integer\n        c = matcher[0][4] as Integer  \n        \n        switch(matcher[0][2]) {\n          case '+' : return a+b==c\n          case '*' : return a*b==c\n          case '-' : return a-b==c\n        }\n      }\n    }\n    return b==11?2 : (list ? list[0] : -1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92010,"user_id":null,"body":"class Kata {\n  static int solve_runes(e){\n      def vals\n      String result\n      Integer calculate\n      for (it in 0..9) {\n        if (e.contains(it.toString())) continue                \n        result = e.replaceAll(\/\\?\/,it.toString())\n        vals = result =~ \/^(\\-{0,1}[0-9]+)(\\*|\\-|\\+)(\\-{0,1}[0-9]+)=(\\-{0,1}[0-9]+)$\/\n        if (vals[0][4][0] == '0' && vals[0][4].size()> 1) continue;\n        calculate = Eval.me(\"(${vals[0][1].toInteger()})${vals[0][2]}(${vals[0][3].toInteger()})\")\n        if (calculate == vals[0][4].toInteger()) return it\n      }\n      return -1\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92011,"user_id":null,"body":"class Kata {\n\n  static PATTERN = \/^(\\-?[0-9?]+)([+-\\\\*]{1})(\\-?[0-9?]+)=(\\-?[0-9?]+)$\/\n\n  static OPS = [\n    '-': { a, b -> a - b },\n    '+': { a, b -> a + b },\n    '*': { a, b -> a * b }\n  ]\n  \n  static int solve_runes(e) {\n    def digit = (e =~ PATTERN).collect {\n      findDigit(it[1], it[3], it[4], OPS[it[2]])\n    }[0]\n    digit == null ? -1 : digit\n  }\n  \n  static Integer findDigit(String a, String b, String c, Closure op) {\n    getSubstitutions([a, b, c]).find { s ->\n      op(toInt(a, s), toInt(b, s)) == toInt(c, s)\n    }\n  }\n  \n  static List getSubstitutions(List expr) {\n    def start = expr.any { it.size() > 1 && it.startsWith('?') } ? 1 : 0\n    (start..'9').findAll { n ->\n      !expr.any { e -> e.contains(n.toString()) }\n    }\n  }\n  \n  static Integer toInt(String expr, Integer digit) {\n    new Integer(expr.replaceAll(\/\\?\/, \"$digit\"))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92012,"user_id":null,"body":"class Kata {\n    static int solve_runes(e){\n        def m = (e =~ \/([-]?[0-9\\?]+)([\\+\\*\\-])([-]?[0-9\\?]+)=([-]?[0-9\\?]+)\/)\n        if (!m) {\n            return -1\n        }\n\n        def num1 = m.group(1)\n        def op = m.group(2)\n        def num2 = m.group(3)\n        def result = m.group(4)\n\n        def digit = ('0'..'9').findAll { n ->\n            \/\/ ensure we only test unknown digits\n            ![num1, num2, result].any { it.contains(n) }\n        }.collectEntries { n ->\n            \/\/ transform to replace '?' with the digit\n            [(n): [num1, num2, result]*.replaceAll(\/\\?\/, n)]\n        }.findAll { k, v ->\n            \/\/ no number will start with 0 unless the number itself is 0\n            !v.any { it ==~ \/^0[0-9]+\/ }\n        }.collectEntries { k, v ->\n            \/\/ convert everything to ints for evaluation\n            [(k): v*.toInteger()]\n        }.find { k, v ->\n            \/\/ return the first one that returns true\n            evaluate(v[0], op, v[1], v[2])\n        }?.key\n\n        return digit != null? digit.toInteger(): -1\n\n    }\n\n    static boolean evaluate(int num1, String op, int num2, int result) {\n        switch (op) {\n            case '*': return (num1 * num2) == result\n            case '+': return (num1 + num2) == result\n            case '-': return (num1 - num2) == result\n            default: return false\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54bd6b4c956834c9870001a1":[{"id":92013,"user_id":759,"body":"class BagelSolver {\n\tstatic Bagel getBagel() {\n\t\tdef b = new Bagel()\n    b.metaClass.getValue = { 4 }\n    b\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92014,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n    Bagel.metaClass.getValue { 4 }\n    new Bagel()\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92015,"user_id":53,"body":"import java.lang.reflect.*\n\nclass BagelSolver {\n  static Bagel getBagel() {\n    try {\n      Field value = Boolean.class.getDeclaredField(\"value\")\n      value.setAccessible(true)\n      value.set(Boolean.TRUE, Boolean.FALSE)\n    } catch (Throwable e) {\n      return null\n    }\n    return new Bagel()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92016,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n    def b = new Bagel();\n    b.metaClass.getValue = { 4 }\n\t\treturn b;\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92017,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n    Bagel.metaClass.getValue = { 4 }\n\t\treturn new Bagel()\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92018,"user_id":null,"body":"import java.lang.reflect.*\n\nclass BagelSolver {  \n\tstatic Bagel getBagel() {\n    setFinalStatic(Boolean.class.getField(\"TRUE\"), false);\n\n\t\treturn new Bagel()\n\t}\n  \n  static void setFinalStatic(Field field, Object newValue) throws Exception {\n      field.setAccessible(true);\n\n      Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n      modifiersField.setAccessible(true);\n      modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n\n      field.set(null, newValue);\n   }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92019,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n    Bagel bagel = new Bagel()\n    bagel.metaClass.invokeMethod = { String name, Object args -> 4}\n\t\treturn bagel \/\/ do it!\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92020,"user_id":null,"body":"import java.lang.reflect.Field\n\nimport java.lang.reflect.Field\n\nclass BagelSolver {\n    static Bagel getBagel() {\n        try {\n            Field field = Boolean.class.getDeclaredField(\"value\")\n            field.setAccessible(true)\n            field.set(Boolean.TRUE, Boolean.FALSE)\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new RuntimeException(e)\n        }\n        return new Bagel()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92021,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n\t\treturn new BagelImpl()\n\t}\n  \n  static class BagelImpl extends Bagel implements GroovyInterceptable {\n        int purpose() {\n            4\n        }\n\n        @Override\n        def invokeMethod(String name, args) {\n            if ('getValue'.equals(name)) {\n                def metaMethod = metaClass.getMetaMethod('purpose', args)\n                return metaMethod.invoke(this, args);\n            }\n            else {\n                return super.invokeMethod(name, args)\n            }\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92022,"user_id":null,"body":"import java.lang.reflect.Field\n\nclass BagelSolver {\n\tstatic Bagel getBagel() {\n   Bagel bagel = new Bagel()\n   bagel.metaClass.getValue = { 4 }\n\t\treturn bagel\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54cb771c9b30e8b5250011d4":[{"id":92023,"user_id":53,"body":"import java.math.BigInteger;\n\npublic class Faberge {\n\tpublic static BigInteger height(BigInteger n, BigInteger m) {\n    BigInteger x = n;\n    BigInteger t = BigInteger.ONE;\n    BigInteger h = BigInteger.ZERO;\n    while (x.compareTo(BigInteger.ZERO) != 0) {\n      BigInteger e = t.multiply(m.subtract(n).add(x)).divide(n.add(BigInteger.ONE).subtract(x));\n      x = x.subtract(BigInteger.ONE);\n      t = e;\n      h = h.add(e);\n    }\n\t\treturn h;\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92024,"user_id":490,"body":"import java.math.BigInteger;\n\nimport static java.math.BigInteger.ZERO;\nimport static java.math.BigInteger.valueOf;\n\npublic class Faberge {\n\tpublic static BigInteger height(BigInteger n, BigInteger m) {\n\t\tif (n.equals(ZERO) || m.equals(ZERO)) return ZERO;\n\t\tif (n.compareTo(m) > 0) n = m;\n\t\tBigInteger c = valueOf(1);\n\t\tBigInteger b = valueOf(1);\n\t\tBigInteger a = valueOf(0);\n\t\twhile (c.compareTo(n) <= 0) {\n\t\t\tBigInteger d = m.add(valueOf(1)).subtract(c).multiply(b).divide(c);\n\t\t\tc = c.add(valueOf(1));\n\t\t\tb = d;\n\t\t\ta = a.add(d);\n\t\t}\n\t\treturn a;\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92025,"user_id":168,"body":"import java.math.BigInteger;\n\npublic class Faberge {\n\tpublic static BigInteger height(BigInteger n, BigInteger m) {\n    if (n >= m) return BigInteger.TWO ** m - 1\n    BigInteger c = 1, s = 0\n    for (BigInteger i = 0; i < n; i++) {\n      c = c * (m - i) \/ (i + 1)\n      s += c\n    }\n\t\treturn s\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92026,"user_id":492,"body":"import java.math.BigInteger;\n\npublic class Faberge {\n\tpublic static BigInteger height(BigInteger n, BigInteger m) {\n\t\tBigInteger h = BigInteger.ZERO;\n    BigInteger a = BigInteger.ONE;\n    for (int i = 1; i <= n.intValue(); i++) {\n        a = a.multiply(m.add(BigInteger.valueOf(1 - i))).divide(BigInteger.valueOf(i));\n        h = h.add(a);\n    }\n    return h;\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54d496788776e49e6b00052f":[{"id":92027,"user_id":492,"body":"public class sum_of_divided {\n\n    public static String sum_of_divided(int[] lst) {\n        int[] rem = new int[lst.length];\n        int max = 0;\n        String result = \"\";\n        for (int i = 0; i < lst.length; ++i) {\n            rem[i] = Math.abs(lst[i]);\n            max = Math.max(max, Math.abs(lst[i]));\n        }\n        for (int fac = 2; fac <= max; ++fac) {\n            boolean isFactor = false;\n            int tot = 0;\n            for (int i = 0; i < lst.length; ++i) {\n                if (rem[i] % fac == 0) {\n                    isFactor = true;\n                    tot += lst[i];\n                    while (rem[i] % fac == 0) {\n                        rem[i] \/= fac;\n                    }\n                }\n            }\n            if (isFactor) {\n                result += \"(\" + fac + \" \" + tot + \")\";\n            }\n        }\n        return result;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92028,"user_id":53,"body":"public class sum_of_divided {\n  private static final int[] primes = (1..10000).findAll({ isPrime(it) }).collect { it };\n  private static boolean isPrime(int n) { return new BigInteger(n).isProbablePrime(99); }\n  public static String sum_of_divided(int[] lst) {\n    def s = new StringBuilder();\n    primes.each { p -> P:{\n      def added = false;\n      def m = 0;\n      lst.each { e -> E:{\n        if (e % p == 0) {\n          added = true;\n          m += e;\n        }\n      }}\n      if (added) s.append(String.format(\"(%s %s)\", p, m));\n    }}\n    return s.toString();\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92029,"user_id":null,"body":"public class sum_of_divided {\n\n    public static String sum_of_divided(int[] i_a_lst) {\n        def lst = i_a_lst as List\n        def primes = getPrimes(lst)\n        def result = new StringBuilder()\n        primes.each { p ->\n            def sum = lst.findAll { it % p == 0 }.sum()\n            result << \"($p $sum)\"\n        }\n      \n        result\n    }\n  \n    static def getPrimes(numbers) {\n        def list = []\n        (2..((numbers.collect{Math.abs(it)}).max()\/2 as int)).each { n ->\n           if((!(n in list)) && numbers.find { it % n == 0}) {\n               list << n\n           }\n        }\n        numbers.collect{Math.abs(it)}.each {\n            if(!(it in list)) list << it\n        }\n        list.findAll { isPrime(it) }\n    }\n    \n    static boolean isPrime(n) {\n        if(n < 4) {\n            return true\n        }\n        !(2..(n\/2 as int)).find {\n            n % it == 0\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92030,"user_id":null,"body":"public class sum_of_divided {\n\n    public static String sum_of_divided(int[] lst) {\n        def answer = [:]\n        def prime = 2\n        while(prime<=Math.abs(lst.iterator().max{ Math.abs(it) })){\n            lst.each{ int it -> \n              (it%prime!=0) ?: (answer?.get(prime)) ? answer.put(prime,(answer.get(prime)+it)) : answer.put(prime,it) \n            }\n            prime = (prime as BigInteger).nextProbablePrime()\n        }\n        answer.collect{ entry -> \"(${entry.key} ${entry.value})\"}.join(\"\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92031,"user_id":null,"body":"public class sum_of_divided {\n  private static class Prime {\n    int primeNumber\n    int sum = 0\n    Prime(int primeNumber) { this.primeNumber = primeNumber }\n\n    def static comparator = new Comparator<Prime>(){\n        public int compare(prime1, prime2){\n          return prime1.primeNumber - prime2.primeNumber\n      }}\n   }\n  \n  def public static sum_of_divided(lst) {\n    def primes = new ArrayList<Prime>()\n    for (int number : lst) {\n      def primeNumbers = getPrimes(number)\n      for (int primeNumber : primeNumbers) {\n        def prime = [primeNumber] as Prime  \/\/new Prime(primeNumber)\n        int idx = Collections.binarySearch(primes, prime, Prime.comparator)\n        if (idx < 0) {\n          primes.add(prime)\n          Collections.sort(primes, Prime.comparator)\n        } else {\n          prime = primes.get(idx)\n        }\n        prime.sum += number\n      }\n    }\n    def result = new StringBuilder()\n    for (def prime : primes) {\n      result.append(\"(${prime.primeNumber} ${prime.sum})\") \n    }\n    return result.toString()\n  }\n    \n  def private static getPrimes(number) {\n    def result = new ArrayList<Integer>()\n    int quotient = (number < 0) ? -number : number\n    for (int divisor = 2; divisor <= quotient; divisor++) {\n      if ((quotient % divisor) == 0) {\n        result.add(divisor)\n        while ((quotient % divisor) == 0){\n          quotient \/= divisor\n        } \n      }\n    }\n\t\tif (result.size() == 0 && quotient!=1) {\n\t\t\tresult.add(quotient) \/\/ the number itself is prime\n\t\t}\n    return result\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92032,"user_id":null,"body":"public class sum_of_divided {\n\n    static List findDivisors(int number) {\n        int numberAbs = Math.abs(number)\n        int maxInt = numberAbs\n        List<Integer> numbers = 2..maxInt\n        numbers.findAll({ numberAbs % it == 0 })\n    }\n\n    static boolean ifIsPrime(int number) {\n        int numberAbs = Math.abs(number)\n        int maxInt = 1 + numberAbs \/ 2\n        List<Integer> numbers = 2..maxInt\n        if (numberAbs > 2) {\n            return numbers.findAll({ numberAbs % it == 0 }).size() == 0\n        }\n        return true\n    }\n\n    static List extractPrimesFromDivisorsForAll(int[] l) {\n        List result = []\n        l.each { x ->\n            List onlyPrimes = findDivisors(x).findAll({ ifIsPrime(it) })\n            result.addAll(onlyPrimes)\n        }\n        Set setResult = new HashSet(result)\n        setResult.sort()\n    }\n\n    static String sum_of_divided(int[] l) {\n        String result = \"\"\n        List primes = extractPrimesFromDivisorsForAll(l)\n        primes.each({\n            x -> result = result + \"(${x} ${l.findAll({ it % x == 0 }).collect().sum()})\"\n        })\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92033,"user_id":null,"body":"public class sum_of_divided {\n\n      static String sum_of_divided(int[] lst) {\n        def list_final = lst.collect { primeDecomp(it) }.flatten{(it as BigInteger).abs()}.unique()\n        def lists = lst.collect {\n            primeDecomp(it);\n        }\n        println \"list_final \" + list_final\n        println \"lists \" + lists\n        Map<Integer, Integer> map= new HashMap()\n        for (int i = 0; i < list_final.size(); i++) {\n\n            int p = 0\n            for (int j = 0; j < lists.size(); j++) {\n                if (lists.get(j).collect {it.abs()}.contains((list_final.get(i) as BigInteger))) {\n                    p = p + lists.get(j).inject{a,b->a*b}\n                }\n\n            }\n            map.put((list_final.get(i) as int), p)\n        }\n        println(map)\n        StringBuilder str=new StringBuilder()\n        map.sort().each {k,v ->str.append(\"(\"+k+\" \"+v+\")\")}\n        return str\n    }\n\n    private static final BigInteger two = BigInteger.valueOf(2);\n\n    static List<BigInteger> primeDecomp(BigInteger a) {\n        \/\/ impossible for values lower than 2\n        if (a.abs().compareTo(two) < 0) {\n            return null;\n        }\n\n        \/\/quickly handle even values\n        List<BigInteger> result = new ArrayList<BigInteger>();\n        while (a.and(BigInteger.ONE).equals(BigInteger.ZERO)) {\n            a = a.shiftRight(1);\n            result.add(two);\n        }\n\n        \/\/left with odd values\n        if (!a.equals(BigInteger.ONE)) {\n            BigInteger b = BigInteger.valueOf(3);\n            while (b.compareTo(a.abs()) < 0) {\n                if (b.isProbablePrime(10)) {\n                    BigInteger[] dr = a.divideAndRemainder(b);\n                    if (dr[1].equals(BigInteger.ZERO)) {\n                        result.add(b);\n                        a = dr[0];\n                        continue;\n                    }\n                }\n                b = b.add(two);\n            }\n            result.add(a); \/\/b will always be prime here...\n        }\n        return result;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54eb33e5bc1a25440d000891":[{"id":92034,"user_id":null,"body":"public class Decompose {\n\n    public static String decompose(long n) {\n      long nsqrd = n*n     \n      for (long i = n-1; i > 0; i--){ \n        def result = []\n        long sum = 0\n        for (long j = i; j > 0;){\n          long jsqrd = j*j\n          if (sum + jsqrd < nsqrd){\n            result += j\n            sum += jsqrd\n            j = Math.min(Math.sqrt(nsqrd - sum), j-1)\n          }\n          else if (sum + jsqrd == nsqrd){\n            result += j\n            return result.reverse().join(\" \")\n          }     \n          else\n            j--\n        }\n      }\n        return null\n    }\n  \n\n      \n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92035,"user_id":759,"body":"@groovy.transform.CompileStatic\npublic class Decompose {\n  static List<Long> decomp(long n, long lowbound, boolean checkPerfect) {\n    if (n == 1) return [1L]\n    else if (n == 4) return [2L]\n    else if (n < 5) return null\n    final sqrtd = Math.sqrt(n)\n    final sqrt = (long) sqrtd\n    if (checkPerfect && sqrtd == sqrt) return [sqrt]\n    for (long i = sqrt; i > lowbound; i--) {\n      final dc = decomp(n - i*i, sqrt - i, true)\n      if (dc && new HashSet([i] + dc).size() == (dc.size() + 1)) return [i] + dc\n    }\n    null\n  }\n\n  public static String decompose(long n) {\n    final d = decomp(n * n, 0, false)\n    null == d || d.size() < 2 ? null : d.sort().join(' ')\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92036,"user_id":492,"body":"public class Decompose {\n\n    private static String tryDecomp(long nb, long rac) {\n        if (nb == 0) return \"\"\n        String l = null\n        long i = rac\n        while (i >= (long)Math.sqrt(nb\/2.0) + 1) {\n            long diff = nb - i * i\n            rac = (long)Math.sqrt(diff)\n            l = tryDecomp(diff, rac)\n            if (l != null) { return l + \" \" + i }\n            i -=1\n        }\n        return null\n    }\n    public static String decompose(long n) {\n        String l = tryDecomp(n * n, (long)Math.sqrt(n * n - 1))\n        return l != null ? l.trim() : l\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55983863da40caa2c900004e":[{"id":92037,"user_id":53,"body":"class Kata \n{\n  static next_bigger(n) \n  {\n    println(n);\n    String[] arr = n.toString().split(\"\").reverse();\n    int i = -1;\n    for (int k = 1; k < arr.size(); k++) {\n      if (arr[k - 1] > arr[k]) {\n        i = k;\n        break;\n      }\n    }\n    if (i == -1) return -1;\n    String[] slice = arr[0..i-1];\n    int j = -1;\n    for (int k = 0; k < slice.size(); k++) {\n      if (arr[i] < slice[k]) {\n        j = k;\n        break;\n      }\n    }\n    slice[j] = arr[i];\n    String[] pre = \"\".split(\"\");\n    if (i + 1 < arr.size()) {\n      pre = arr[i+1..arr.size()-1];\n    }\n    return (pre.reverse() + [arr[j]] + slice).join(\"\").toLong();\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92038,"user_id":null,"body":"class Kata {\n  static next_bigger(n) {\n    String number = n.toString()\n        List digits = []\n        List solutionDigits = []\n        List maxList =[]\n        String maxString = \"\"\n\n        number.each {\n            digits = digits + [Integer.valueOf(it)]\n        }\n\n\n        digits.sort()\n        maxList = digits.reverse()\n\n        maxList.each {\n            maxString = maxString + it.toString()\n        }\n\n        if (Long.valueOf(maxString) <= Long.valueOf(n) ) n =-1\n        else {\n            while (digits != solutionDigits) {\n                solutionDigits = []\n                n++\n                n.toString().each {\n                    solutionDigits = solutionDigits + [Integer.valueOf(it)]\n                }\n                solutionDigits.sort()\n            }\n        }\n        n\n        }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92039,"user_id":null,"body":"class Kata {\n    static next_bigger(long n) {\n        def list = n.toString().toList().reverse()\n        for (i in 0..<list.size() - 1) {\n            if (list[i] > list[i+1]) {\n                def nextIntIndex = list.subList(0, i+1).sort().findIndexOf {it.toLong() > list[i+1].toLong()}\n                list.swap(nextIntIndex, i+1)\n                def a = list.subList(0, i+1).sort().reverse()\n                a.addAll(list.subList(i+1, list.size()))\n                return a.reverse().join().toLong()\n            }\n        }\n        return -1\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92040,"user_id":50,"body":"class Kata {\n  static next_bigger(n) {\n    if (n<10) return -1\n    def s=n.toString();\n    def r=s.chars.toList().sort();\n    if (s.chars.toList().reverse() == r) return -1\n    while (++n){\n      if (n.toString().toList().sort()==r) return n\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92041,"user_id":null,"body":"class Kata {\n  static next_bigger(n) {\n if (n < 10) {\n            return -1;\n        }\n        final StringBuilder sb = new StringBuilder();\n        def str = n.toString();\n        for (int i = str.length() - 1; i > 0; i--) {\n            final int digit = str[i - 1].toInteger();\n            if (digit < str[i].toInteger()) {\n                int smallestLargerDigit = 9;\n                int indexOfSmallestLargerDigit = 0;\n                for (int j = i; j < str.length(); j++) {\n                    final int actualDigit = str[j].toInteger();\n                    if (actualDigit > digit && actualDigit <= smallestLargerDigit) {\n                        smallestLargerDigit = actualDigit;\n                        indexOfSmallestLargerDigit = j;\n                    }\n                }\n                final List<Integer> digits = [];\n                for (int j = i - 1; j < str.length(); j++) {\n                    if (j != indexOfSmallestLargerDigit) {\n                        digits.add(str[j].toInteger());\n                    }\n                }\n                sb.append(str.substring(0, i - 1));\n                sb.append(smallestLargerDigit);\n                digits.sort();\n                for (int actualDigit : digits) {\n                    sb.append(actualDigit);\n                }\n                return Long.valueOf(sb.toString());\n            }\n        }\n        return -1;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92042,"user_id":null,"body":"class Kata {\n    static next_bigger(Long n) {\n        List chars = n.toString().toCharArray()\n        Integer i = -1\n        for (it in (chars.size() - 1..0)) {\n            if (chars[it - 1] < chars[it]) {\n                i = it - 1\n                break\n            }\n        }\n        if (i == -1) return -1\n        Integer j = chars.drop(i + 1).indexed().toSorted { it.value }.find { it.value > chars[i] }.key\n        List right = chars.drop(i).swap(0, j + 1)\n        ((chars.take(i) << right[0]) + right.drop(1).toSorted()).join(\"\").toLong()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92043,"user_id":null,"body":"class Kata {\n  static next_bigger(n) {\n    def m = n.toString().split('')\n    if (m.toUnique().size() == 1) {\n        return -1\n    }\n    \n    for (i in (0..m.size() - 2).reverse()) {\n        for (j in (i + 1..m.size() - 1).reverse()) {\n            if (m[j] > m[i]) {\n                m[i] = [m[j], m[j] = m[i]][0]\n                return (m[0..i] + m[i + 1..m.size() - 1].sort()).join().toBigInteger()\n            }\n        }\n    }\n    -1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92044,"user_id":null,"body":"class Kata {\n  static next_bigger(n) {\n    List digits = (n as String).split('')\n    final int si = findPivot(digits)\n    if(si >= 0) {\n      digits = digits[0..si]+(digits[si+1..-1].sort())\n      int sj = findNextGreater(digits, si)\n      digits.swap(si, sj)\n      return digits.join('') as Long\n    } else {\n      return -1L\n    }\n  }\n  \n  private static findPivot(digits) {\n    final List found = (2..digits.size()).findAll {\n      digits[digits.size()-it] < digits[digits.size()-it+1]\n    }\n    return found.size()==0 ? -1 : digits.size() - found.first()\n  }\n  \n  private static findNextGreater(digits, si) {\n      final List found = (si+1..digits.size()-1).findAll { digits[it] > digits[si] }\n      return found.size() == 0 ? -1 : found.first()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92045,"user_id":null,"body":"class Kata {\n  static next_bigger(n) {\n    char[] ar = String.valueOf(n).toCharArray();\n    int i\n    int size = ar.length\n\n    for (i = size - 1; i > 0; i--)  {\n        if (ar[i] > ar[i-1]) {\n            break; \n        }\n    }\n\n    if (i == 0)  {\n        return -1\n    } else {\n        int x = ar[i-1]\n        int min = i\n          \n        for (int j = i + 1; j < size; j++) { \n            if (ar[j] > x && ar[j] < ar[min]) {\n                min = j; \n            }\n        }\n        char temp = ar[i - 1]\n        ar[i - 1] = ar[min] \n        ar[min] = temp\n        Arrays.sort(ar, i, size)\n        return new BigInteger(ar.collect({it.toString()}).join(\"\"))\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92046,"user_id":645,"body":"class Kata {\n  static next_bigger(n) {\n    if (n.toString().chars.toList().reverse() == n.toString().chars.toList().sort()) return -1\n    def digits = n.toString().chars.toList().sort()\n    n += 9\n    while (n.toString().chars.toList().sort() != digits) n += 9\n    n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"585894545a8a07255e0002f1":[{"id":92047,"user_id":53,"body":"class Kata {\n  static count_patterns_from(fd, l, m = 0) {\n    if (l <= 1) return l;\n    m |= (1 << (int)fd-(int)'A');\n    int sum = 0;\n    for (int i = 0; i < 9; i++)\n        if ((m& 1<<i) == 0 && canGo((int)fd-(int)'A', m, i))\n            sum+= count_patterns_from((char)((int)'A'+i), l-1, m);\n    return sum;\n  }\n  static canGo(cur, m, next) {\n    return (cur == 4 || next == 4 || (cur|next) % 2 > 0 && cur+next != 8) || (1<<(cur+next>>1) &m) > 0;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92048,"user_id":null,"body":"class Kata {\n  \n  static def allRestrictions = [\n    \"A\": [\"C\": \"B\", \"G\": \"D\", \"I\": \"E\"],\n    \"B\": [\"H\": \"E\"],\n    \"C\": [\"A\": \"B\", \"G\": \"E\", \"I\": \"F\"],\n    \"D\": [\"F\": \"E\"],\n    \"E\": [:],\n    \"F\": [\"D\": \"E\"],\n    \"G\": [\"A\": \"D\", \"C\": \"E\", \"I\": \"H\"],\n    \"H\": [\"B\": \"E\"],\n    \"I\": [\"A\": \"E\", \"C\": \"F\", \"G\": \"H\"]\n  ]\n    \n  static def allNodes = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"] as Set\n  \n  static count_patterns_from(f, l) {\n    if (l == 0 || l > 9) return 0\n    return traverseNodes(f, allNodes.minus(f), [f] as Set, l - 1)\n  }\n  \n  static traverseNodes(current, unpicked, picked, length) {\n    if (length == 0) return 1\n    def count = 0\n    def restrictions = allRestrictions[current]\n    unpicked.each { aNode ->\n      if (!(aNode in restrictions) || (restrictions[aNode] in picked)) {\n        count += traverseNodes(aNode, unpicked.minus(aNode), picked.plus(aNode), length - 1)\n      }\n    }\n    count\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92049,"user_id":645,"body":"class Kata {\n  \/\/ GiacomoSorbi's solution\n  static count_patterns_from(f, l) {\n    l > 9 ? 0 : l < 2 ? l : [C2: 5, C3: 31, C4: 154, C5: 684, C6: 2516, C7: 7104, C8: 13792, C9: 13792, S2: 7, S3: 37, S4: 188, S5: 816, S6: 2926, S7: 8118, S8: 15564, S9: 15564, M2: 8, M3: 48, M4: 256, M5: 1152, M6: 4248, M7: 12024, M8: 23280, M9: 23280][(f == 'E' ? 'M' : 'ACGI'.contains(f) ? 'C' : 'S') + l.toString()]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5861487fdb20cff3ab000030":[{"id":92050,"user_id":null,"body":"import groovy.transform.TailRecursive\n\npublic class Boolfuck {\n  public static String interpret(String code, String input) {\n    code ? run(code, 0, toBits(input), [:], 0, [], getJumps(code)) : ''\n  }\n  \n  @TailRecursive\n  static String run(String code, int codePtr, List input, Map data, int dataPtr, List output, Map jumps) {\n    if (codePtr >= code.size()) {\n      return toString(output)\n    }\n    switch(code[codePtr]) {\n      case '+': return run(code, codePtr + 1, input, flip(data, dataPtr), dataPtr, output, jumps)\n      case ',': return run(code, codePtr + 1, input ? input.tail() : input, set(data, dataPtr, input[0] ?: 0), dataPtr, output, jumps)\n      case ';': return run(code, codePtr + 1, input, data, dataPtr, output + (data[dataPtr] ?: 0), jumps)\n      case '<': return run(code, codePtr + 1, input, data, dataPtr - 1, output, jumps)\n      case '>': return run(code, codePtr + 1, input, data, dataPtr + 1, output, jumps)\n      case '[': return run(code, (!data[dataPtr] ? jumps[codePtr] : codePtr) + 1, input, data, dataPtr, output, jumps)\n      case ']': return run(code, (data[dataPtr] ? jumps[codePtr] : codePtr) + 1, input, data, dataPtr, output, jumps)\n      default: return run(code, codePtr + 1, input, data, dataPtr, output, jumps)\n    }\n  }\n  \n  static Map getJumps(code) {\n    code.collect()\n      .withIndex()\n      .findAll { it[0] == '[' }\n      .collect { it[1] }\n      .collectEntries { i1 ->\n        findMatching(code, i1 + 1, 0).with { i2 -> [(i1):i2, (i2):i1] }\n      }\n  }\n  \n  @TailRecursive\n  static int findMatching(String code, int idx, int bal) {\n    switch(code[idx]) {\n      case '[': return findMatching(code, idx + 1, bal + 1)\n      case ']': return bal ? findMatching(code, idx + 1, bal - 1) : idx\n      default: return findMatching(code, idx + 1, bal)\n    }\n  }\n\n  static Map flip(Map data, int ptr) {\n    set(data, ptr, data[ptr] ? 0 : 1)\n  }\n  \n  static Map set(Map data, int ptr, int val) {\n    data + [(ptr):val]\n  }\n  \n  static List toBits(String input) {\n    input.chars.collect { Integer.toBinaryString((int)it).padLeft(8, '0').collect().reverse(false) }\n      .flatten()\n      .collect { new Integer(it) }\n  }\n  \n  static String toString(List bits) {\n    bits.collate(8)\n      .collect { (char)Integer.parseInt(it.reverse(false).join().padLeft(8, '0'), 2) }\n      .join()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92051,"user_id":490,"body":"import java.util.ArrayList\n\nclass Boolfuck {\n\n\tpublic static final char[] bits = [1, 2, 4, 8, 16, 32, 64, 128]\n\n\tstatic String interpret(String code, String input) {\n\t\tint oc = 0, ic = 0, ii = 0, inn = input.length(), tp = 0\n\t\tchar i = 0, o = 0\n\t\tArrayList<Boolean> tape = new ArrayList<Boolean>(256)\n\t\ttape.add(false)\n\t\tStringBuilder output = new StringBuilder()\n\t\tint e = code.length()\n\t\tfor (int c = 0; c < e; ++c) {\n\t\t\tswitch (code.charAt(c)) {\n\t\t\t\tcase '<':\n\t\t\t\t\tif (--tp < 0) {\n\t\t\t\t\t\ttape.add(0, false)\n\t\t\t\t\t\ttp = 0\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase '>':\n\t\t\t\t\ttape.add(++tp < 0)\n\t\t\t\t\tbreak\n\t\t\t\tcase '+':\n\t\t\t\t\ttape.set(tp, !(tape.get(tp)))\n\t\t\t\t\tbreak\n\t\t\t\tcase '[':\n\t\t\t\t\tif (!tape.get(tp)) {\n\t\t\t\t\t\tint b = 1; while (b != 0 && ++c < e) {\n\t\t\t\t\t\t\tif (code.charAt(c) == '[') ++b else if (code.charAt(c) == ']') --b\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase ']':\n\t\t\t\t\tif (tape.get(tp)) {\n\t\t\t\t\t\tint b = -1; while (b != 0 && --c >= 0) {\n\t\t\t\t\t\t\tif (code.charAt(c) == '[') ++b else if (code.charAt(c) == ']') --b\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase ',':\n\t\t\t\t\tif (--ic < 0) {\n\t\t\t\t\t\ti = ii < inn ? input.charAt(ii++) : 0\n\t\t\t\t\t\tic = 7\n\t\t\t\t\t}\n\t\t\t\t\ttape.set(tp, (i & 1) > 0)\n\t\t\t\t\ti = (char) (i >> 1)\n\t\t\t\t\tbreak\n\t\t\t\tcase ';':\n\t\t\t\t\tif (tape.get(tp)) o |= bits[oc]\n\t\t\t\t\tif (++oc > 7) {\n\t\t\t\t\t\toutput.append(o)\n\t\t\t\t\t\to = 0\n\t\t\t\t\t\toc = 0\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (oc > 0) output.append(o)\n\t\treturn output.toString()\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92052,"user_id":490,"body":"import java.util.ArrayList\n\nclass Boolfuck {\n\n\tpublic static final char[] bits = [1, 2, 4, 8, 16, 32, 64, 128]\n\n\tstatic String interpret(String code, String input) {\n\t\tint oc = 0, ic = 0, ii = 0, inn = input.length(), tp = 0\n\t\tchar i = 0, o = 0\n\t\tArrayList<Boolean> tape = new ArrayList<Boolean>(256)\n\t\ttape.add(false)\n\t\tStringBuilder output = new StringBuilder()\n\t\tint e = code.length()\n\t\tfor (int c = 0; c < e; ++c) {\n\t\t\tswitch (code.charAt(c)) {\n\t\t\t\tcase '<':\n\t\t\t\t\tif (--tp < 0) {\n\t\t\t\t\t\ttape.add(0, false)\n\t\t\t\t\t\ttp = 0\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase '>':\n\t\t\t\t\ttape.add(++tp < 0)\n\t\t\t\t\tbreak\n\t\t\t\tcase '+':\n\t\t\t\t\ttape.set(tp, !(tape.get(tp)))\n\t\t\t\t\tbreak\n\t\t\t\tcase '[':\n\t\t\t\t\tif (!tape.get(tp)) {\n\t\t\t\t\t\tint b = 1; while (b != 0 && ++c < e) {\n\t\t\t\t\t\t\tif (code.charAt(c) == '[') ++b else if (code.charAt(c) == ']') --b\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase ']':\n\t\t\t\t\tif (tape.get(tp)) {\n\t\t\t\t\t\tint b = -1; while (b != 0 && --c >= 0) {\n\t\t\t\t\t\t\tif (code.charAt(c) == '[') ++b else if (code.charAt(c) == ']') --b\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\tcase ',':\n\t\t\t\t\tif (--ic < 0) {\n\t\t\t\t\t\ti = ii < inn ? input.charAt(ii++) : 0\n\t\t\t\t\t\tic = 7\n\t\t\t\t\t}\n\t\t\t\t\ttape.set(tp, (i & 1) > 0)\n\t\t\t\t\ti = (char) (i >> 1)\n\t\t\t\t\tbreak\n\t\t\t\tcase ';':\n\t\t\t\t\tif (tape.get(tp)) o |= bits[oc]\n\t\t\t\t\tif (++oc > 7) {\n\t\t\t\t\t\toutput.append(o)\n\t\t\t\t\t\to = 0\n\t\t\t\t\t\toc = 0\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (oc > 0) output.append(o)\n\t\treturn output.toString()\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5886e082a836a691340000c3":[{"id":92053,"user_id":53,"body":"class Kata {\n  static rectangle_rotation(a, b) {\n    def x = Math.floor(a \/ Math.sqrt(2)).toLong();\n    def y = Math.floor(b \/ Math.sqrt(2)).toLong();\n    def r = (x + 1) * (y + 1) + x * y;\n    return r + r % 2 - 1;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92054,"user_id":168,"body":"class Kata {\n  static rectangle_rotation(a, b) {\n    def x = a \/ 2 ** 0.5 as int\n    def y = b \/ 2 ** 0.5 as int\n    2 * x * y + x + y - ((x ^ y) & 1) + 1\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92055,"user_id":null,"body":"class Kata {\n  static rectangle_rotation(a, b) {\n    def da = (int)Math.ceil(a \/ 1.414214);\n    def db = (int)Math.ceil(b \/ 1.414214);\n    return da * db + (da-1) * (db-1)  - (da+db) % 2;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92056,"user_id":null,"body":"class Kata {\n  static rectangle_rotation(a, b) {\n    def sqrtOf2 = Math.pow(2,(1\/2))\n    def sideA0ContainsDots = Math.floor((a\/2)\/sqrtOf2)*2+1\n    def sideB0ContainsDots = Math.floor((b\/2)\/sqrtOf2)*2+1\n    def rectangle0 = sideA0ContainsDots*sideB0ContainsDots\n    def sideAsqrtOfTwoContainsDots = (Math.floor(((a\/2)-(sqrtOf2\/2))\/sqrtOf2)+1)*2\n    def sideBsqrtOfTwoContainsDots = (Math.floor(((b\/2)-(sqrtOf2\/2))\/sqrtOf2)+1)*2\n    def rectangleSqrtOfTwo = sideAsqrtOfTwoContainsDots*sideBsqrtOfTwoContainsDots\n    rectangle0+rectangleSqrtOfTwo\n  }\n}  ","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92057,"user_id":492,"body":"class Kata {\n  public static int rectangle_rotation(final int a, final int b) {\n        int x = (int)(Math.floor(a \/ Math.sqrt(2.0)));\n        int y = (int)(Math.floor(b \/ Math.sqrt(2.0)));\n        int res = 0;\n        if ((x + y) % 2 == 0) {\n          res = (x + 1) * (y + 1) + x * y;\n        }\n        else {\n          res =  (x + 1) * y + x * (y + 1);\n        }\n        return res;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92058,"user_id":null,"body":"class Kata {\n\n    static rectangle_rotation(a, b) {\n        def squareRoot = 2.0.power(0.5)\n        def firstN = (a.div(2.0)).div(squareRoot).intValue()\n        def secondN = (b.div(2.0)).div(squareRoot).intValue()\n        def firstM = a.minus(squareRoot).div(2.0).div(squareRoot).plus(1).intValue()\n        def secondM = b.minus(squareRoot).div(2.0).div(squareRoot).plus(1).intValue()\n        def result = (2 * firstN + 1) * (2 * secondN + 1) + (4 * firstM * secondM)\n        result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92059,"user_id":645,"body":"class Kata {\n  static rectangle_rotation(a, b) {\n    def h = (a \/ Math.sqrt(2)).toInteger()\n    def v = (b \/ Math.sqrt(2)).toInteger()\n    h * v + -~h * -~v - (h % 2 ^ v % 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58a57c6bcebc069d7e0001fe":[{"id":92060,"user_id":490,"body":"class Base91 {\n\n\tprivate static final byte[] ENCODING_TABLE\n\tprivate static final byte[] DECODING_TABLE\n\tprivate static final int BASE\n\tprivate static final float AVERAGE_ENCODING_RATIO = 1.2297f\n\n\tstatic {\n\t\tENCODING_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#\\$%&()*+,.\/:;<=>?@[]^_`{|}~\\\"\".getBytes()\n\t\tBASE = ENCODING_TABLE.length\n\n\t\tDECODING_TABLE = new byte[256]\n\t\tfor (int i = 0; i < 256; ++i) DECODING_TABLE[i] = -1\n\t\tfor (int i = 0; i < BASE; ++i) DECODING_TABLE[ENCODING_TABLE[i]] = (byte) i\n\t}\n\n\tstatic String encode(String data) {\n\t\treturn new String(encode(data.getBytes()))\n\t}\n\n\tstatic byte[] encode(byte[] data) {\n\t\tint estimatedSize = (int) Math.ceil(data.length * AVERAGE_ENCODING_RATIO)\n\t\tdef output = new ByteArrayOutputStream(estimatedSize)\n\t\tint ebq = 0\n\t\tint en = 0\n\t\tdata.each { byte aData ->\n\t\t\tebq |= (aData & 255) << en\n\t\t\ten += 8\n\t\t\tif (en > 13) {\n\t\t\t\tint ev = ebq & 8191\n\t\t\t\tif (ev > 88) {\n\t\t\t\t\tebq >>= 13\n\t\t\t\t\ten -= 13\n\t\t\t\t} else {\n\t\t\t\t\tev = ebq & 16383\n\t\t\t\t\tebq >>= 14\n\t\t\t\t\ten -= 14\n\t\t\t\t}\n\t\t\t\toutput.write(ENCODING_TABLE[ev % BASE])\n\t\t\t\toutput.write(ENCODING_TABLE[(ev \/ BASE) as int])\n\t\t\t}\n\t\t}\n\t\tif (en > 0) {\n\t\t\toutput.write(ENCODING_TABLE[ebq % BASE])\n\t\t\tif (en > 7 || ebq > 90) output.write(ENCODING_TABLE[(ebq \/ BASE) as int])\n\t\t}\n\t\treturn output.toByteArray()\n\t}\n\n\tstatic String decode(String data) {\n\t\treturn new String(decode(data.getBytes()))\n\t}\n\n\tstatic class Looper {\n\t\tprivate Closure code\n\n\t\tstatic Looper loop(Closure code) {\n\t\t\tnew Looper(code: code)\n\t\t}\n\n\t\tvoid until(Closure test) {\n\t\t\tcode()\n\t\t\twhile (!test()) {\n\t\t\t\tcode()\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic byte[] decode(byte[] data) {\n\t\tif (data.length == 0) return []\n\t\tint dbq = 0\n\t\tint dn = 0\n\t\tint dv = -1\n\t\tint estimatedSize = Math.round(data.length \/ AVERAGE_ENCODING_RATIO)\n\t\tdef output = new ByteArrayOutputStream(estimatedSize)\n\n\t\tfor (int i = 0; i < data.length; ++i) {\n\t\t\tif (DECODING_TABLE[data[i]] == -1) continue\n\t\t\tif (dv == -1) dv = DECODING_TABLE[data[i]]\n\t\t\telse {\n\t\t\t\tdv += DECODING_TABLE[data[i]] * BASE\n\t\t\t\tdbq |= dv << dn\n\t\t\t\tdn += (dv & 8191) > 88 ? 13 : 14\n\t\t\t\tLooper.loop {\n\t\t\t\t\toutput.write((byte) dbq)\n\t\t\t\t\tdbq >>= 8\n\t\t\t\t\tdn -= 8\n\t\t\t\t} until { dn <= 7 }\n\t\t\t\tdv = -1\n\t\t\t}\n\t\t}\n\t\tif (dv != -1) output.write((byte) (dbq | dv << dn))\n\t\treturn output.toByteArray()\n\t}\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"50654ddff44f800200000004":[{"id":92061,"user_id":527,"body":"class Multiply {\n  static multiply(a, b) {\n    a * b\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92062,"user_id":null,"body":"class Multiply {\n  static multiply(a, b) {\n    def c = a * b\n    return c\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92063,"user_id":null,"body":"class Multiply {\n  static multiply(def a, def b) {\n    return a * b\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92064,"user_id":null,"body":"class Multiply {\n  static multiply(def a, def b) {\n    a * b\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92065,"user_id":null,"body":"class Multiply {\n  static multiply(a, b) {\n    return b * a;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92066,"user_id":null,"body":"class Multiply {\n  static def multiply(a, b) {\n    a * b\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92067,"user_id":null,"body":"class Multiply {\n  static multiply(s,a) {\n    s*a\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92068,"user_id":null,"body":"class Multiply {\n  static multiply(a, b) {\n    return (a * b)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"50ee6b0bdeab583673000025":[{"id":92069,"user_id":527,"body":"class _name {\n  static write() {\n    \"codewa.rs\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92070,"user_id":null,"body":"class _name {\n  static write() {\n    def a = \"code\"\n    def b = \"wa.rs\"\n    def name = a + b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92071,"user_id":null,"body":"class _name {\n  static write() {\n    String name = \"codewa.rs\"\n    return name\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92072,"user_id":null,"body":"class _name {\n  static write() {\n    String a = \"code\"\n    String b = \"wa.rs\"\n    String name = a + b\n    name\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92073,"user_id":null,"body":"class _name {\n  static write() {\n    return (\"code\" + \"wa.rs\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92074,"user_id":null,"body":"class _name {\n  static write() {\n    String a = \"code\"\n    String b = \"wa.rs\"\n    a + b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92075,"user_id":null,"body":"class _name {\n  static String write() {\n    String a = \"code\"\n    String b = \"wa.rs\"\n    String name = a + b\n    return name\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92076,"user_id":null,"body":"class _name {\n  static write() {\n    String a = \"code\"\n    String b = \"wa.rs\"\n    return a + b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92077,"user_id":null,"body":"class _name {\n  static write() {\n    def a = \"code\"\n    def b = \"wa.rs\"\n    a + b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92078,"user_id":1566,"body":"class _name {\n  static write() {\n    String name = \"codewa.rs\"    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"515de9ae9dcfc28eb6000001":[{"id":92079,"user_id":527,"body":"class Kata {\n    static List<String> solution(String str) {\n        (str + '_').findAll(\/..\/)\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92080,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      if (str.isEmpty()) {return []}\n      List<String> pairs = str.split(\"(?<=\\\\G.{2})\")\n      if (pairs.last().size() == 1) {\n        pairs[pairs.size()-1] = pairs.last() + \"_\"\n      }\n      return pairs\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92081,"user_id":null,"body":"class Kata {\n    static List<String> solution(String randomstring) {\n    def list = []\n    def i=0\n    randomstring = (randomstring.length() % 2 ) == 0 ? randomstring : randomstring + \"_\"\n    while (i<randomstring.length()){\n        list.add(randomstring[i] + randomstring[i+1])\n        i += 2\n    }\n    return list\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92082,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      List<String> arr = new ArrayList<>();\n      for(int i = 0; i < str.length(); i += 2){\n        if(i + 1 >= str.length()){\n          arr.add(str[i] +'_');\n          break;\n        }\n        arr.add(str[i..i+1]);\n      }\n      arr;\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92083,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      def size = str.size()\n      def res = []\n      for (def i = 0; i < size - 1; i += 2){\n        res << str.substring(i,i+2)\n      }\n      if(size % 2 != 0){\n        res << \"${str[size-1]}_\"\n      }\n      res\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92084,"user_id":null,"body":"class Kata {\n    \n    static List<String> solution(String str) {\n        List newList = []\n        def list = str.toList()\n        int i = 0\n        (0..<list.size()\/2).each{\n            if(list[i + 1] == null){\n                list[i+1] = \"_\"\n            }\n            String elOne = list[i].toString()\n            String elTwo = list[i+1].toString()\n            newList.add(\"${elOne}${elTwo}\")\n            i =i+2\n        }\n        return newList\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92085,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n        !str ? [] : str.toList().inject([\"__\"]) { l, s ->\n          l[-1].contains(\"_\") ? l[-1] = l[-1].replaceFirst(\"_\", s) : l << s + \"_\"; l\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92086,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      if(str?.isEmpty()) {return []}\n      return str.split('').collate(2).collect{it.join()}.collect{it + (it.size() % 2 == 0 ? '' : '_')}\n   }\n}\n","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92087,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      \/*Getting length of input string *\/\n        int len = str.length()\n      \/*Splitting cases when string is empty *\/\n        if (len != 0) {\n            def lst1 = []\n          \/*adding _ if uneven *\/\n            str = (len % 2 == 0) ? str : str + '_'\n            len = str.length()\n            int j = 0\n          \/*creating pairs in output list*\/\n            for (int i = 1; i < len; i += 2) {\n                lst1 << str[j..i]\n                j += 2\n            }\n            return (lst1)\n        } else {\n            return ([])\n        }\n    }\n  }","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92088,"user_id":null,"body":"class Kata {\n    static List<String> solution(String str) {\n      def list = str.split(\"(?<=\\\\G..)\").toList()\n      if(list.last().size()<2 && list.first() != \"\"){\n       list.putAt(list.size()-1, \"${list.last()}_\" )\n      } else {\n        return list.minus('')\n      }\n      return list\n        \n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"515f51d438015969f7000013":[{"id":92089,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n      (0..<n).collect {\n        (0..it).collect { 1 }\n      }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92090,"user_id":null,"body":"class Kata {\n  static Integer[][] pyramid(Integer n) {\n    if(!n) return []\n    (1..n).stream().map({e -> [1] * e}).collect()\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92091,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n        n ? (1..n).collect{ (1..it).collect{1} } : []\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92092,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n      def x1=[]\n      if (n!=0)\n        for (i in 0..n-1)\n      {\n        def fl1 = []\n        for (ii in 0..i)\n        {fl1+=1}\n        x1 << fl1\n      }\n      x1\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92093,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n        n != 0 ? (1..n).collect { [1]  * it } : []\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92094,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n    def pyramid = []\n    Integer iteration = 1\n\t    n.times {\n\t    def list = []\n\t\t    iteration.times {\n\t\t    list << 1\n\t\t    }\n\t\t    pyramid << list\n        iteration++\n\t    }\n\t    pyramid\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92095,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n      def returnValue = []  \n      for(int i = 1;i<=n;i++){\n        returnValue.push([1] * i)\n       }\n      return returnValue.reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92096,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n       Integer [][]p = new Integer[n][n]\n       for (int i = 0; i < n; i++) {\n         def newArray = []\n         for (int j = 0; j <= i; j++) {\n             newArray << 1\n         }\n         p[i] = newArray\n       }\n      return p\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92097,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n      def returnArray = []\n            \n        n.times{\n           returnArray << [1] * (it + 1)\n        }\n               \n      returnArray\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92098,"user_id":null,"body":"class Kata {\n    static Integer[][] pyramid(Integer n) {\n        \/\/ Implement me! :)\n      if (n < 0)\n        return null\n      if (n == 0)\n        return []\n      Integer[][] result = new Integer[n][]\n      for (int i = 0; i < n; i++) {\n        result[i] = new Integer[i+1]\n        for (int j = 0; j < i + 1; j++) {\n          result[i][j] = 1\n        }\n      }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5168bb5dfe9a00b126000018":[{"id":92099,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    str?.reverse();\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92100,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    return str.reverse()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92101,"user_id":759,"body":"class Kata {\n  static solution(str) {\n    str.reverse()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92102,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    \/\/ code here\n    if (str.length() == 0) return str;\n    def reversedWord = [];\n    str.split(\"\").eachWithIndex { it, i -> \n      reversedWord[i] = str[str.length() - 1 - i];\n    };\n    reversedWord.join('')\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92103,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    def res = \"\"\n    str.each { letter -> res = letter + res }\n    res\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92104,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    if (str == null) return null\n    \n    def out = new StringBuilder()\n    \n    for (int i = 1; i <= str.size(); i++) {\n      out << str[-i]\n    }\n    return out.toString()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92105,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    def liste= str.toList()\n    String a= \"\"\n    for (i in liste.reverse()) {\n      a+=i\n    }\n    return a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92106,"user_id":null,"body":"class Kata {\n  public static solution(String str) {\n    \/*Initializing work string, getting length of string and then go*\/\n      String wrk = \"\"\n      int len = str.size()\n      for (int i = len-1; i >= 0; i--){\n        wrk = wrk + str[i]\n        }\n    return(wrk)\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92107,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    def world = \"world\"\n    def hello = \"hello\"\n    def empty = \" \"\n    def h = \"h\"\n    str.reverse()\n    \n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92108,"user_id":null,"body":"class Kata {\n  static solution(str) {\n    str.split(\"\").inject(\"\", {r, x -> x + r}) ?: \"\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"51e0007c1f9378fa810002a9":[{"id":92109,"user_id":564,"body":"class DeadFish {\n    int value = 0\n    List<Integer> outputs = []\n    \n    def apply (char command) {\n        switch (command) {\n            case 'i': this.value++; break\n            case 'd': this.value--; break\n            case 's': this.value *= this.value; break\n            case 'o': this.outputs.add(this.value)\n        }\n    }\n    \n    static def parse (String commands) {\n        DeadFish df = new DeadFish()\n        commands.chars().forEach({ c -> df.apply((char) c) })\n        return df.outputs\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92110,"user_id":575,"body":"class DeadFish {\n    static def parse (String dateString) {\n        def value = 0;\n        def result = []\n        dateString.each { c ->\n            if (c == 'i') { value += 1 }\n            if (c == 'd') { value -= 1 }\n            if (c == 's') { value *= value }\n            if (c == 'o') { result << value }\n        }\n        result\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92111,"user_id":null,"body":"class DeadFish {\n    static output\n    static int value\n    private static commands = [\n          i: {-> value += 1},\n          d: {-> value -= 1},\n          s: {-> value = value ** 2},\n          o: {-> output << value}\n        ]\n        \n    static def parse (String dateString) {\n        output = []\n        value = 0\n        dateString.each { commands[it].call() }\n        output\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92112,"user_id":null,"body":"class DeadFish {\n    static def parse (String dateString) {\n        int dateStringTotal = 0\n        List dateStringList = []\n        dateString.each{\n            switch (it){\n                case \"i\":\n                    dateStringTotal = dateStringTotal + 1\n                    break\n                case \"d\":\n                    dateStringTotal = dateStringTotal - 1\n                    break\n                case \"s\":\n                    dateStringTotal = dateStringTotal ** 2\n                    break\n                case \"o\":\n                    dateStringList << dateStringTotal\n                    break\n            }\n        }\n        return dateStringList\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92113,"user_id":null,"body":"class DeadFish {\n  \n    static def updateState (s, command) {\n      if(command == 'i')\n        s.value += 1\n      else if(command == 'd')\n        s.value -= 1\n      else if(command == 's')\n        s.value = s.value * s.value\n      else if(command == 'o')\n        s.output << s.value\n    }\n  \n    static def parse (String dateString) {\n      def state = [\n        value: 0,\n        output: []\n      ]\n      \n      for (char c : dateString)\n        updateState(state, c)\n      \n      state.output\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92114,"user_id":null,"body":"class DeadFish {\n  static def parse(String dateString) {\n        int accumulator = 0\n        def result = []\n        dateString.each {command ->\n            switch(true) {\n                case (command == \"i\"):\n                    accumulator = accumulator+1\n                    break\n                case (command == \"d\"):\n                    accumulator = accumulator-1\n                    break\n                case (command == \"s\"):\n                    accumulator = accumulator**2\n                    break\n                case (command == \"o\"):\n                    result.add(accumulator)\n                    break\n            }\n        }\n        return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92115,"user_id":null,"body":"class DeadFish {\n    static def parse (String dateString) {\n        def result_val = 0\n        return dateString.toList().findResults{\n          def out_val = null\n          switch(it){\n            case \"i\": result_val++; break;\n            case \"d\": result_val--; break;\n            case \"s\": result_val = result_val**2; break;\n            case \"o\": out_val = result_val\n          }\n          return out_val\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92116,"user_id":null,"body":"class DeadFish {\n    static def parse (String dateString) {\n        def initial = 0\n        def output = []\n        for (i in dateString) {\n          if (i == 'i'){\n            initial += 1\n          }\n          if (i == 'd'){\n            initial -= 1\n          }  \n          if (i == 's'){\n            initial = initial ** 2\n          }  \n          if (i == 'o'){\n            output.add(initial)\n          }  \n        }\n      return output\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92117,"user_id":null,"body":"class DeadFish {\n    static def parse (String s) {\n      def output = []\n      def val = 0\n      for (c in s) {\n        switch (c) {\n          case 'i': val++; break\n          case 'd': val--; break\n          case 's': val *= val; break\n          case 'o': output << val; break\n          default: assert false: \"bad input '$c'\"\n        }\n      }\n      return output\n      \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92118,"user_id":null,"body":"class DeadFish {\n    static def parse (String dateString) {\n        def out = [], num = 0, map = [\n          \"i\": { num++ },\n          \"d\": { num-- },\n          \"s\": { num *= num },\n          \"o\": { out << num }\n        ]\n        dateString.each { map[it]() }\n        out\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"51f082ba7297b8f07f000001":[{"id":92119,"user_id":527,"body":"class Kata {\n    static def findInArray(xs, f) {\n        xs.withIndex().findIndexOf(f)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92120,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n      def res = arr.withIndex().find{v,i -> fn(v,i)} \n      res?res[1]:-1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92121,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n      def element\n      for(int i; i < arr.size(); i++){\n        element = arr.get(i)\n        if (fn(element, i)){\n          return i\n        }\n      }\n     return -1\n        \/\/ Implement me! :)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92122,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n      def res = []\n      arr.eachWithIndex { v, i -> if (fn(v, i)) res << i}      \n      return res.size() ? res[0] : -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92123,"user_id":759,"body":"class Kata {\n    static findInArray(arr, fn) {\n        arr.withIndex().find(fn).with { it ? it[1] : -1 }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92124,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n        for(def i=0;i<arr.size();i++) {\n            if(fn(arr[i],i)) return i\n        }\n        -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92125,"user_id":53,"body":"class Kata {\n    static def findInArray(arr, fn) {\n        for (int i = 0; i < arr.size(); ++i) {\n            if (fn(arr[i], i)) return i;\n        }\n        return -1;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92126,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n        \/\/ Unfortunately here, in groovy truth 0 = false. Otherwise we could just use ?:\n        def i = arr.withIndex().find(fn)?.get(1)\n        i == null ? -1 : i\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92127,"user_id":1492,"body":"class Kata {\n    static def findInArray(arr, fn) {\n        for(def i = 0; i < arr.size(); i++){\n          if(fn(arr[i],i)){\n            return i\n          }\n        }\n        return -1\n    }\n}\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92128,"user_id":null,"body":"class Kata {\n    static def findInArray(arr, fn) {\n        int i = 0\n        arr.findIndexOf {fn(it, i++)}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"523b4ff7adca849afe000035":[{"id":92129,"user_id":null,"body":"import groovy.transform.TailRecursive\n\nclass Greet {\n\n  static RANDOM = new Random()\n\n  static greet() {\n    \n    def target = 'hello world!'\n    def generationSize = 50\n    def chanceOfMutation = 0.25\n    \n    def validChars = target.collect().unique().sort()\n    def firstGeneration = getFirstGeneration(validChars, target.size(), generationSize)\n    \n    evolve(target, 1, firstGeneration, validChars, chanceOfMutation)\n  }\n  \n  @TailRecursive\n  static String evolve(String target, int generation, List words, List validChars, double mutation) {\n    def ranked = words.sort{ word -> getWordScore(word, target) }\n    def fittestA = ranked[0]\n    def fittestB = ranked[1]\n    println \"Generation ${generation}, Fittest words: '${fittestA}' and '${fittestB}'\"\n    \n    if (target in words) {\n      println \"Target text '${target}' evolved after ${generation} generation(s)\"\n      return target\n    }\n    \n    evolve(\n      target,\n      generation + 1,\n      getNextGeneration(fittestA, fittestB, words.size(), validChars, mutation),\n      validChars,\n      mutation\n    )\n  }\n  \n  static List getNextGeneration(String parentA, String parentB, int generationSize, List validChars, double mutation) {   \n    (0..<generationSize).collect { \n      getOffspring(parentA, parentB, validChars, mutation)\n    }\n  }\n  \n  static String getOffspring(String parentA, String parentB, List validChars, double mutation) {\n    (0..<parentA.size()).collect { i ->\n      isByChance(mutation) ?\n        getRandomSymbol(validChars) :\n        pickOne(parentA[i], parentB[i])\n    }.join()      \n  }\n   \n  static int getWordScore(String word, String target) {\n    (0..<word.size()).sum { i ->\n      Math.abs(word.charAt(i) - target.charAt(i))\n    }\n  }\n  \n  static List getFirstGeneration(List validChars, int wordSize, int generationSize) {\n    (0..<generationSize).collect { getRandomWord(validChars, wordSize) }\n  }\n  \n  static String getRandomWord(List validChars, int wordSize) {\n    (0..<wordSize).collect { getRandomSymbol(validChars) }.join()\n  }\n  \n  static String getRandomSymbol(List validChars) {\n    validChars[RANDOM.nextInt(validChars.size())]\n  }\n  \n  static Boolean isByChance(double chance) {\n    RANDOM.nextDouble() <= chance\n  }\n  \n  static pickOne(a, b) {\n    RANDOM.nextInt(2) == 0 ? a : b\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92130,"user_id":null,"body":"class Greet {\n  static def greet() {\n    \"hello world!\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92131,"user_id":null,"body":"class Greet {\n  public static enum Languages { ENGLISH, GERMAN, FRENCH, JAPANESE, ITALIAN, SPANISH }\n  \n  private static final GREETING = [(Languages.ENGLISH): 'hello', \n     (Languages.GERMAN): 'hallo',\n     (Languages.FRENCH): 'salut',\n     (Languages.JAPANESE): 'konnichiwa',\n     (Languages.ITALIAN): 'ciao',\n     (Languages.SPANISH): 'hola']\n\n  private static final WORLD = [(Languages.ENGLISH): 'world', \n     (Languages.GERMAN): 'welt',\n     (Languages.FRENCH): 'monde',\n     (Languages.JAPANESE): 'sekai',\n     (Languages.ITALIAN): 'mondo',\n     (Languages.SPANISH):  'mundo']\n\n  public static String greet(language = Languages.ENGLISH) {\n    \"${GREETING[language]} ${WORLD[language]}!\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92132,"user_id":null,"body":"class Greet {\n  static greet() {\n   new String (\"aGVsbG8gd29ybGQh\".decodeBase64())\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92133,"user_id":null,"body":"class Greet {\n  \n  static def greet()\n  {\n    return \"hello world!\"\n  }\n  \/\/ Write a static method `greet` that returns \"hello world!\"\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92134,"user_id":null,"body":"class Greet {\n  \/\/ Write a static method `greet` that returns \"hello world!\"\n  static greet(){\n    return 'hello world!'\n  }\n  \n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92135,"user_id":null,"body":"class Greet {\n  \/\/ Write a static method `greet` that returns \"hello world!\"\n  static def greet() {\n    return \"hello world!\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92136,"user_id":null,"body":"class Greet {\n  static String greet(String self) {                           \n        \"hello world!\"\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92137,"user_id":null,"body":"class Greet {\n  static def greet(){\n    def greetings = \"hello world!\"\n    return greetings\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92138,"user_id":null,"body":"class Greet {\n  \/\/ Write a static method `greet` that returns \"hello world!\"\n\n  def static greet() {\n  String hello = \"hello\"\n  String space = \" \"\n  String world = \"world\"\n  String emark = \"!\"\n    return [hello, space, world, emark].join()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"523d2e964680d1f749000135":[{"id":92139,"user_id":575,"body":"class Kata {\n    static def interleave(... args) {\n        (0..<(args.collect { it.size() }.max() ?: 0)).collect {i -> args.collect { l -> l[i] }}.flatten()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92140,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n        return args ? (0..<(args*.size().max())).collect { args*.getAt(it) }.flatten() : []\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92141,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n      if (!args) {\n        return []\n      }\n\n      def res = []\n      int max = 0\n      for (def ele : args) {\n        if (ele.size() > max) {\n          max = ele.size()\n        }\n      }\n\n      for (i in 0..<max) {\n        args.each { it ->\n          res << (i < it.size() ? it[i] : null)\n        }\n      }\n      res\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92142,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n        def maxLength = args.collect{it.size()}.max() ?: 0\n        def arr = []\n        maxLength.times {\n            for (list in args) {\n                arr << ((it < list.size()) ? list[it] : null)\n            }\n        }\n        return arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92143,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n       def res = []\n      for(int j = 0; j < args*.size().max(); j++)\n           res+= args.collect{it[j]}        \n      return res\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92144,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n      def res = []\n      for(int j = 0; j < args.collect{it.size()}.max(); j++)\n           res+= args.collect{it[j]}        \n      return res\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92145,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n        def res = []\n        args.collect{it.size()}.max{it}?.times { i ->\n            args.each {res += it.getAt(i)}\n        }\n        res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92146,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n      def length = args.collect{ it -> it.size()}.max()\n        println(length)\n        def result = []\n        int i = 0\n        for (int j = 0;j < length; j++) {\n            result+=(args.collect { it -> it[i] })\n            i++\n        }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92147,"user_id":null,"body":"class Kata {\n    static def interleave(... args) {\n        def c = []\n        for(int i = 0; ; i++) {\n            if(args.every() { it[i] == null }) {\n                return c\n            }\n            args.each { c << it[i] }\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92148,"user_id":null,"body":"class Kata {  \n    static def interleave(... args) {  \nargs ? (0..<(args*.size().max())).collect{args*.getAt(it)}.flatten() : []\n      }\n    }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"523f5d21c841566fde000009":[{"id":92149,"user_id":575,"body":"class Kata {\n    static def array_difference(a, b) {\n        a - b\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92150,"user_id":53,"body":"class Kata {\n    static def array_difference(a, b) {\n        a.findAll{ !b.contains(it) }.collect()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92151,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n      a.removeAll(b)\n      a\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92152,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n        a.findAll{ item -> !(b.contains(item)) }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92153,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n        \/\/ Implement me!\n        a -= b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92154,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n      \n      def newList = []\n      \n      newList = a.minus(b)\n      \n      return newList\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92155,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n        for (int i in a) {\n          if (b.contains(i)) {\n            a -= i\n          }\n        }\n      return a\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92156,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n        \/\/ Implement me!\n      def set_a = a as Set\n      def set_b = b as Set\n\n      for (i in set_b){\n        if (set_a.contains(i)){\n          a.removeAll(i)\n        }\n      }\n      return a\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92157,"user_id":null,"body":"class Kata {\n    static def array_difference(a, b) {\n        \/\/ Implement me!\n      return a - b\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92158,"user_id":null,"body":"class Kata {\n    static def array_difference(ArrayList a, ArrayList b) {\n        return a - b\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"525f50e3b73515a6db000b83":[{"id":92159,"user_id":527,"body":"class Kata {\n  static String create_phone_number(digits) {\n    String.format(\"(%d%d%d) %d%d%d-%d%d%d%d\", *digits)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92160,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    \"(${numbers[0..2].join()}) ${numbers[3..5].join()}-${numbers[6..9].join()}\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92161,"user_id":null,"body":"class Kata {\n static String create_phone_number(numbers) {\n    def join = { numbers.getAt(it).join(\"\") }\n    \n    \"(${join(0..2)}) ${join(3..5)}-${join(6..9)}\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92162,"user_id":53,"body":"class Kata {\n  static String create_phone_number(n) {\n    return String.format(\"(%d%d%d) %d%d%d-%d%d%d%d\", n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], n[8], n[9])\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92163,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    return \"(${numbers[0..2].join()}) ${numbers[3..5].join()}-${numbers[6..-1].join()}\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92164,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    numbers.with { \n      \"(${it[0]}${it[1]}${it[2]}) ${it[3]}${it[4]}${it[5]}-${it[6]}${it[7]}${it[8]}${it[9]}\" \n    }\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92165,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    def areaCode = numbers[0..2].join(\"\")\n    def phoneNumber = numbers[3..5].join(\"\")\n    def directAccess = numbers[6..-1].join(\"\")\n    \"($areaCode) $phoneNumber-$directAccess\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92166,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    def phoneNumber = numbers*.toString().join(\"\")\n\n    return \"(${phoneNumber[0..2]}) ${phoneNumber[3..5]}-${phoneNumber[6..9]}\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92167,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    \n  if(numbers == null || numbers.getClass() != java.util.ArrayList || numbers.size() != 10) \n    {\n      return null;\n    }\n    def puhnro = [\"(\",\"\",\"\",\"\",\")\",\" \",\"\",\"\",\"\",\"-\",\"\",\"\",\"\",\"\"]\n    def counter = 0;\n    for(num in numbers)\n    {\n      while(puhnro[counter].length() != 0)\n            counter++\n      puhnro[counter] = num.toString()\n    }\n    def puh = puhnro.join(\"\")\n    \n    return puh;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92168,"user_id":null,"body":"class Kata {\n  static String create_phone_number(numbers){\n    \"(${numbers[0]}${numbers[1]}${numbers[2]}) ${numbers[3]}${numbers[4]}${numbers[5]}\"+\n      \"-${numbers[6]}${numbers[7]}${numbers[8]}${numbers[9]}\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"526156943dfe7ce06200063e":[{"id":92169,"user_id":53,"body":"import java.util.*;\n\npublic class brain_luck {\n\n  private String code;\n  public brain_luck(String code) {      \n    this.code = code;\n  }\n\n  public String process(String input) {\n    int i=0, ptr=0, j=0, k=0;\n    int [] tape = new int[30000];\n    StringBuilder output = new StringBuilder();\n    while (i < code.length()) {\n      switch (code.charAt(i)) {\n        case '>': ptr++; break;\n        case '<': ptr--; break;\n        case '+': tape[ptr] = (tape[ptr] + 1) % 256; break;\n        case '-': tape[ptr] = (tape[ptr] + 255) % 256; break;\n        case '.': output.append(Character.toString((char) tape[ptr])); break;\n        case ',': tape[ptr] = (byte) input.charAt(k++); break;\n        case '[':\n          if (tape[ptr] == 0) {\n            int n = 1;\n            while (n>0) {\n              i++\n              if (code[i] == \"[\") n++;\n              if (code[i] == \"]\") n--;\n            }\n          }\n          break;\n        case ']':\n          if (tape[ptr] != 0) {\n            int n = 1;\n            while (n) {\n              i--\n              if (code[i] == \"]\") n++;\n              if (code[i] == \"[\") n--;\n            } \n          }\n          break;\n      }\n      i++;\n    }\n    return output.toString();\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92170,"user_id":null,"body":"import groovy.transform.*\n\npublic class brain_luck {\n \n  final List code\n  \n  public brain_luck(String _code) {\n    code = _code.collect()\n  }\n\n  public String process(String input) {\n    run(0, 0, input, [:], '')\n  }\n  \n  @TailRecursive\n  protected run(int cmdIdx, int dataIdx, String input, Map data, String output) {\n    if (cmdIdx >= code.size()) {\n      return output\n    }\n    switch(code[cmdIdx]) {\n      case '>': return run(cmdIdx + 1, dataIdx + 1, input, data, output)\n      case '<': return run(cmdIdx + 1, dataIdx - 1, input, data, output)\n      case '+': return run(cmdIdx + 1, dataIdx, input, inc(data, dataIdx), output)\n      case '-': return run(cmdIdx + 1, dataIdx, input, dec(data, dataIdx), output)\n      case '.': return run(cmdIdx + 1, dataIdx, input, data, output + (char)data[dataIdx])\n      case ',': return run(cmdIdx + 1, dataIdx, input.substring(1), data + [(dataIdx): (int)input.charAt(0)], output)\n      case '[': return run(!data[dataIdx] ? jumpForward(cmdIdx) : cmdIdx + 1, dataIdx, input, data, output)\n      case ']': return run(data[dataIdx] ? jumpBackward(cmdIdx) : cmdIdx + 1, dataIdx, input, data, output)\n    }\n  }\n  \n  @Memoized\n  protected int jumpForward(int cmdIdx) {\n    forward(cmdIdx + 1, 0)\n  }\n  \n  @Memoized\n  protected int jumpBackward(int cmdIdx) {\n    backward(cmdIdx - 1, 0)\n  }\n  \n  protected int forward(int cmdIdx, int balance) {\n    switch(code[cmdIdx]) {\n      case '[': return forward(cmdIdx + 1, balance + 1)\n      case ']': return balance > 0 ? forward(cmdIdx + 1, balance - 1) : cmdIdx + 1\n      default: return forward(cmdIdx + 1, balance)\n    }\n  }\n\n  protected int backward(int cmdIdx, int balance) {\n    switch(code[cmdIdx]) {\n      case ']': return backward(cmdIdx - 1, balance + 1)\n      case '[': return balance > 0 ? backward(cmdIdx - 1, balance - 1) : cmdIdx + 1\n      default: return backward(cmdIdx - 1, balance)\n    }\n  }\n  \n  protected Map inc(Map data, int pointer) {\n    def val = (data[pointer] ?: 0) + 1\n    data + [(pointer): val > 255 ? 0 : val]\n  }\n  \n  protected dec(Map data, int pointer) {\n    def val = (data[pointer] ?: 0) - 1\n    data + [(pointer): val < 0 ? 255 : val]\n  }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92171,"user_id":null,"body":"public class brain_luck {\n    def bytes = new byte[5000]\n    def algo = \"\"\n    def curAlgo = 0\n    def curByte = 1000\n    def curInput = 0\n\n    public brain_luck(String code) {\n        this.algo = code\n        bytes.each {it = 0 }\n    }\n\n    public String process(String input) {\n        def output = \"\"\n\n        while ((curAlgo < algo.length()) || (curInput < input.length())) {\n            switch (algo[curAlgo]) {\n                case '>':\n                    curByte += 1\n                    break\n\n                case '<':\n                    curByte -= 1\n                    break\n\n                case \"+\":\n                    bytes[curByte] += 1\n                    break\n\n                case \"-\":\n                    bytes[curByte] -= 1\n                    break\n\n                case \".\":\n                    def c = (char) (bytes[curByte] < 0 ? bytes[curByte] + 256 : bytes[curByte])\n                    output = output + c\n                    break\n\n                case \",\":\n                    bytes[curByte] = input.codePointAt(curInput++)\n                    break\n\n                case '[':\n                    if (bytes[curByte] == 0) {\n                        curAlgo = nextCloseBrace() - 1\n                    }\n                    break\n\n                case ']':\n                    if (bytes[curByte] != 0) {\n                        curAlgo = prevCloseBrace() - 1\n                    }\n                    break\n            }\n            curAlgo++\n        }\n        return output\n    }\n\n    private int nextCloseBrace() {\n        def found = 0\n\n        for (int i=curAlgo+1; i < algo.length(); i++) {\n            if (algo[i] == '[')\n                found-- \/\/ Have to handle more sets of braces\n            else if (algo[i] == ']')\n                found++\n\n            if (found == 1)\n                return  i\n        }\n\n        return -1 \/\/ Shouldn't get here\n    }\n\n    private int prevCloseBrace() {\n        def found = 0\n\n        for (int i=curAlgo-1; i >= 0; i--) {\n            if (algo[i] == ']')\n                found-- \/\/ Have to handle more sets of braces\n            else if (algo[i] == '[')\n                found++\n\n            if (found == 1)\n                return  i\n        }\n\n        return -1\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92172,"user_id":168,"body":"public class brain_luck {\n    private Map<Integer, Integer> jumps = [:]\n    private String code\n  \n    public brain_luck(String code) {\n      this.code = code\n      def stack = []\n      code.eachWithIndex { ch, i ->\n        if (ch == '[') {\n          stack << i\n        } else if (ch == ']') {\n          def j = stack.removeLast()\n          jumps[i] = j\n          jumps[j] = i\n        }\n      }\n    }\n\n    public String process(String input) {\n      def memory = [:].withDefault { 0 as byte }, ptr = 0, k = 0, output = \"\"\n      for (int i = 0; i < code.length(); i++) {\n        switch (code[i]) {\n          case '+': memory[ptr]++; break\n          case '-': memory[ptr]--; break\n          case '>': ptr++; break\n          case '<': ptr--; break\n          case '.': output += (memory[ptr] & 0xFF) as char; break\n          case ',': memory[ptr] = (byte)input[k++]; break\n          case '[': i = memory[ptr] ? i : jumps[i]; break\n          case ']': i = memory[ptr] ? jumps[i] : i; break\n        }\n      }\n      return output\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92173,"user_id":null,"body":"class brain_luck {\n  String code\n  brain_luck(code){\n    this.code = code\n  }\n  \n  String process(String input) {\n    def data = [0]\n    def codeP = 0\n    def dataP = 0\n    def inputP = 0\n    def output = \"\"\n    \n    while(codeP < code.length()) {\n      switch(code[codeP]) {\n        case '>':\n          dataP++\n          if (dataP == data.size) data.add(0)\n          break\n        case '<':\n          dataP--\n          break\n        case '+':\n          data[dataP] = (data[dataP] + 1) % 256\n          break\n        case '-':\n          if (data[dataP] == 0) data[dataP] = 255\n          else data[dataP] -= 1\n          break\n        case '.':\n          output += data[dataP] as char\n          break;\n        case ',':\n          data[dataP] = input[inputP++] as char\n          break;\n        case '[':\n          if (data[dataP] == 0) {\n            def stack = 0\n            while (stack != 0 || code[codeP] != ']') {\n              codeP++\n              if (code[codeP] == '[') stack++\n              if (code[codeP] == ']' && stack != 0) {\n                stack--\n                codeP++\n              } \n            } \n          }\n          break\n        case ']':\n          if (data[dataP] != 0) {\n            def stack = 0\n            while (code[codeP] != '[') {\n              codeP--\n              if (code[codeP] == ']') stack++\n              if (code[codeP] == '[' && stack != 0) {\n                stack--\n                codeP--\n              } \n            }\n          }\n          break\n      }\n      codeP++\n    }\n    output\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92174,"user_id":null,"body":"import java.util.*;\t\n\npublic class brain_luck {\n\n    class Breakpoint {\n    \n        private static int maxCount = -1\n        \n        private static int counter = 0\n        \n        public Breakpoint(int c) {\n            if (maxCount == -1) {\n                maxCount = c\n            }\n            if (counter >= maxCount) {\n                throw new RuntimeException()\n            }\n            counter += 1\n            println \"Breakpoint: \" + counter\n        }\n    }\n\n    def data = [0]\n        \n    def code = \"\"\n    \n    def input = \"\"\n    \n    def output = new StringBuilder()\n    \n    def dataPtr = 0\n    \n    def codePtr = 0\n    \n    def inputPtr = 0\n    \n    def dumping = false\n\n    public brain_luck(String code) {   \n        this.code = code   \n    }\n    \n    public brain_luck dumping(value) {\n        dumping = value\n        this\n    }\n    \n    public String process(String input) {\n        this.input = input\n        while (hasMoreTokens()) {\n            if (dumping) dump()\n            if (isOperand(\",\")) {\n                operandKomma()\n            } else if (isOperand(\".\")) {\n                operandPoint()\n            } else if (isOperand(\"+\")) {\n                operandPlus()\n            } else if (isOperand(\"[\")) {\n                operandOpenBracket()\n            } else if (isOperand(\"-\")) {\n                operandMinus()\n            } else if (isOperand(\"]\")) {\n                operandCloseBracket()\n            } else if (isOperand(\">\")) {\n                operandIncrementDataPtr()\n            } else if (isOperand(\"<\")) {\n                operandDecrementDataPtr()\n            }\n            incrementCodePtr()\n        }       \n        if (dumping) dump()\n        return output;\n    }\n    \n    private void incrementCodePtr() {\n        if (hasMoreTokens()) {\n            codePtr += 1\n        } else {\n            throw new IndexOutOfBoundsException()\n        }\n    }\n    \n    private void decrementCodePtr() {\n        if (codePtr > 0) {\n            codePtr -= 1\n        } else {\n            throw new IndexOutOfBoundsException()\n        }\n    }\n    \n    private boolean hasMoreTokens() {\n        codePtr < code.size()\n    }\n    \n    private void dump() {\n        println \"============================================================\"\n        println \"CODE : \" + code\n        println \"CP   : \" + (\" \" * codePtr) + \"|\"\n        println \"DATA : \" + data\n        \/\/println \"DP   : \" + dataPtr\n        \/\/println \"IN   : \" + input\n        \/\/println \"IP   : \" + inputPtr\n        \/\/println \"OUT  : \" + output\n    }\n    \n    private boolean isOperand(str) {\n        str.equals(code.getAt(codePtr))\n    }\n    \n    private void operandIncrementDataPtr() {\n        dataPtr += 1\n        while (data.size() < (dataPtr + 1)) {\n            data.add(0)\n        }\n    }\n    \n    private void operandDecrementDataPtr() {\n        if (dataPtr <= 0) \n            throw new IndexOutOfBoundsException()\n        dataPtr -= 1\n    }\n    \n    private void operandCloseBracket() {\n        if (data[dataPtr] != 0) {\n            def blockCount = 0\n            for ( decrementCodePtr() ;; decrementCodePtr() ) {\n                if (\"]\".equals(code[codePtr])) {\n                    blockCount += 1\n                }\n                if (\"[\".equals(code[codePtr])) {\n                    if (blockCount > 0) {\n                        blockCount -= 1\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n    \n    private void operandMinus() {\n        data[dataPtr] = (data[dataPtr] == 0) ? 255 : (data[dataPtr] - 1)\n    }\n    \n    private void operandOpenBracket() {\n        if (data[dataPtr] == 0) {\n            def blockCount = 0\n            for ( incrementCodePtr();; incrementCodePtr()) {\n                if (\"[\".equals(code[codePtr])) {\n                    blockCount += 1\n                }\n                if (\"]\".equals(code[codePtr])) {\n                    if (blockCount > 0) {\n                        blockCount -= 1\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n    \n    private void operandPlus() {\n        data[dataPtr] = (data[dataPtr] + 1) % 256\n    }\n    \n    private void operandKomma() {\n        data[dataPtr] = (int) input.getAt(inputPtr).getChars()[0]\n        inputPtr += 1\n    }\n    \n    private void operandPoint() {\n        output <<= (char) data[dataPtr]\n    }\n    \n    public static void main(String[] args) {\n        def result = new brain_luck(\",.>,.>,.>,.<.<.<.\").dumping(false).process(\"9876\")\n        if (!result.startsWith(\"9876789\")) {\n            println \"Fehler Operator -\"\n        }    \n        result = new brain_luck(\",.>,.>,.>,.\").dumping(false).process(\"9998\")\n        if (!result.startsWith(\"9998\")) {\n            println \"Fehler Operator -\"\n        }\n        result = new brain_luck(\",[.-]\").dumping(false).process(\"9\")\n        if (!result.startsWith(\"9876543210\/.-,+*)(\")) {\n            println \"Fehler Operator -\"\n        }\n        result = new brain_luck(\",-.-.-.-.-.-.-.-.-.\").dumping(false).process(\"9\")\n        if (!result.equals(\"876543210\")) {\n            println \"Fehler Operator -\"\n        }\n        result = new brain_luck(\",+[-.,+]\").dumping(false).process(\"Codewars\" + ((char) 255))        \n        if (!result.equals(\"Codewars\")) {\n            println \"Fehler\"\n        }\n        result = new brain_luck(\",[.[-],]\").dumping(false).process(\"Codewars\" + ((char) 0))\n        if (!result.equals(\"Codewars\")) {\n            println result\n        }\n        final char[] input = new char[2];\n        input[0] = 8;\n        input[1] = 9;\n        result = new brain_luck(\",>,<[>[->+>+<<]>>[-<<+>>]<<<-]>>.\").dumping(false).process(String.valueOf(input[0]) + String.valueOf(input[1]))\n        if (!result.equals(String.valueOf((char) (input[0] * input[1])))) {\n            println result\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92175,"user_id":null,"body":"import groovy.transform.CompileStatic\nimport groovy.transform.EqualsAndHashCode\nimport groovy.transform.TailRecursive\nimport groovy.transform.ToString\nimport groovy.transform.stc.ClosureParams\nimport groovy.transform.stc.FromString\n\nimport java.util.concurrent.ConcurrentHashMap\nimport java.util.concurrent.ConcurrentMap\n\n@CompileStatic\nfinal class brain_luck {\n\n    private final String program\n\n    brain_luck(String program) {\n        this.program = program\n    }\n\n    String process(String input) {\n        return step(0, 0, new Memory(), input, \"\")\n    }\n\n    @TailRecursive\n    private String step(int ip, int dp, final Memory memory, final String input, final String output) {\n        if (ip >= program.length()) {\n            return output.toString()\n        }\n\n        switch (program.charAt(ip)) {\n            case '>':\n                return step(ip + 1, dp + 1, memory, input, output)\n\n            case '<':\n                return step(ip + 1, dp - 1, memory, input, output)\n\n            case '+':\n                return step(ip + 1, dp, memory.inc(dp), input, output)\n\n            case '-':\n                return step(ip + 1, dp, memory.dec(dp), input, output)\n\n            case '.':\n                return step(ip + 1, dp, memory, input, output + ((char) memory.read(dp)))\n\n            case ',':\n                return step(ip + 1, dp, memory.write(dp, input[0].toCharacter() as short), input.substring(1), output)\n\n            case '[':\n                int jump = memory.read(dp) == 0 ? jumpForward(ip) : ip + 1\n                return step(jump, dp, memory, input, output)\n\n            case ']':\n                int jump = memory.read(dp) != 0 ? jumpBack(ip) : ip + 1\n                return step(jump, dp, memory, input, output)\n\n            default:\n                return step(ip + 1, dp, memory, input, output)\n        }\n    }\n\n    private int jumpForward(int ip) {\n        int seek = 1\n        while (seek != 0) {\n            switch (program.charAt(++ip)) {\n                case '[':\n                    seek++\n                    break\n\n                case ']':\n                    seek--\n                    break\n            }\n        }\n        return ip + 1\n    }\n\n    private int jumpBack(int ip) {\n        int seek = 1\n        while (seek != 0) {\n            switch (program.charAt(--ip)) {\n                case ']':\n                    seek++\n                    break\n\n                case '[':\n                    seek--\n                    break\n            }\n        }\n        return ip + 1\n    }\n\n    @CompileStatic\n    @ToString(includeFields = true)\n    @EqualsAndHashCode\n    private final class Memory {\n        private final ConcurrentMap<Integer, Short> map\n\n        private Memory() {\n            this.map = new ConcurrentHashMap<>()\n        }\n\n        private Memory(ConcurrentMap map) {\n            this.map = map\n        }\n\n        short read(int idx) {\n            return map.getOrDefault(idx, 0 as short)\n        }\n\n        Memory write(int idx, short value) {\n            return onCopy { map ->\n                map.put(idx, Byte.toUnsignedInt(value as byte) as short)\n            }\n        }\n\n        Memory inc(int idx) {\n            return onCopy { map ->\n                map.compute(idx) { _,  val -> Byte.toUnsignedInt((val ?: 0) + 1 as byte) }\n            }\n        }\n\n        Memory dec(int idx) {\n            return onCopy { map ->\n                map.compute(idx) { _, val -> Byte.toUnsignedInt((val ?: 0) - 1 as byte) }\n            }\n        }\n\n        private Memory onCopy(@ClosureParams(value = FromString, options = \"java.util.concurrent.ConcurrentMap<Integer,Short>\") Closure closure) {\n            final Map copy = new ConcurrentHashMap<>(map)\n            closure.call(copy)\n            return new Memory(copy)\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92176,"user_id":null,"body":"import groovy.transform.CompileStatic\nimport groovy.transform.TailRecursive\n\nimport java.util.concurrent.ConcurrentHashMap\n\n@CompileStatic\nclass brain_luck {\n\n    private final String program\n\n    brain_luck(String program) {\n        this.program = program\n    }\n\n    String process(String input) {\n        return new Interpreter(program, input).start()\n    }\n}\n\n@CompileStatic\nclass Interpreter {\n\n    private final String program\n    private final List<Character> input\n    private final Memory memory\n\n    Interpreter(String program, String input) {\n        this.program = program\n        this.input = input.toList()*.toCharacter()\n        this.memory = new Memory()\n    }\n\n    String start() {\n        return run(0, 0, new StringBuilder())\n    }\n\n    @TailRecursive\n    private String run(int ip, int dp, final StringBuilder output) {\n        if (ip >= program.length()) {\n            return output.toString()\n        }\n\n        switch (program.charAt(ip)) {\n            case '>':\n                return run(ip + 1, dp + 1, output)\n\n            case '<':\n                return run(ip + 1, dp - 1, output)\n\n            case '+':\n                memory.inc(dp)\n                return run(ip + 1, dp, output)\n\n            case '-':\n                memory.dec(dp)\n                return run(ip + 1, dp, output)\n\n            case '.':\n                return run(ip + 1, dp, output.append((char) memory.read(dp)))\n\n            case ',':\n                memory.write(dp, input.pop() as short)\n                return run(ip + 1, dp, output)\n\n            case '[':\n                int jump = memory.read(dp) == 0 ? jumpForward(ip) : ip + 1\n                return run(jump, dp, output)\n\n            case ']':\n                int jump = memory.read(dp) != 0 ? jumpBack(ip) : ip + 1\n                return run(jump, dp, output)\n\n            default:\n                return run(ip + 1, dp, output)\n        }\n    }\n\n    private int jumpForward(int ip) {\n        int seek = 1\n        while (seek != 0) {\n            switch (program.charAt(++ip)) {\n                case '[':\n                    seek++\n                    break\n\n                case ']':\n                    seek--\n                    break\n            }\n        }\n        return ip + 1\n    }\n\n    private int jumpBack(int ip) {\n        int seek = 1\n        while (seek != 0) {\n            switch (program.charAt(--ip)) {\n                case ']':\n                    seek++\n                    break\n\n                case '[':\n                    seek--\n                    break\n            }\n        }\n        return ip + 1\n    }\n\n    @CompileStatic\n    private class Memory {\n        private final Map<Integer, Short> map = new ConcurrentHashMap<Integer, Short>().withDefault({ 0 as short })\n\n        short read(int idx) {\n            return map.get(idx)\n        }\n\n        Memory write(int idx, short value) {\n            map.put(idx, unsignedByte(value))\n            return this\n        }\n\n        Memory inc(int idx) {\n            map.compute(idx) { _,  val -> unsignedByte(val + 1) }\n            return this\n        }\n\n        Memory dec(int idx) {\n            map.compute(idx) { _, val -> unsignedByte(val - 1) }\n            return this\n        }\n\n        private static short unsignedByte(int value) {\n            return value & 0xFF\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92177,"user_id":null,"body":"import groovy.transform.CompileStatic\n\n@CompileStatic\nclass brain_luck {\n\n    private final String program\n\n    brain_luck(String program) {\n        this.program = program\n    }\n\n    String process(String input) {\n        int ip = 0\n        int dp = 0\n\n        int[] tape = new int[3000]\n\n        List inputList = input.toList()\n\n        StringBuilder output = new StringBuilder()\n\n        while (ip < program.length()) {\n            char opcode = program.charAt(ip)\n\n            switch (opcode) {\n                case '>':\n                    dp++\n                    break\n\n                case '<':\n                    dp--\n                    break\n\n                case '+':\n                    tape[dp] = (int) (tape[dp] + 1) & 0xFF\n                    break\n\n                case '-':\n                    tape[dp] = (int) (tape[dp] - 1) & 0xFF\n                    break\n\n                case '[':\n                    if (tape[dp] == 0) {\n                        int n = 1\n                        while (n != 0) {\n                            switch (program.charAt(++ip)) {\n                                case '[':\n                                    n++\n                                    break\n\n                                case ']':\n                                    n--\n                                    break\n                            }\n                        }\n                    }\n                    break\n\n                case ']':\n                    if (tape[dp] != 0) {\n                        int n = 1\n                        while (n != 0) {\n                            switch (program.charAt(--ip)) {\n                                case ']':\n                                    n++\n                                    break\n\n                                case '[':\n                                    n--\n                                    break\n                            }\n                        }\n                    }\n                    break\n\n                case '.':\n                    output.append((char) tape[dp])\n                    break\n\n                case ',':\n                    tape[dp] = (inputList.pop().toCharacter() as int) & 0xFF\n                    break\n            }\n\n            ip++\n        }\n\n        return output.toString()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92178,"user_id":null,"body":"import java.util.*\n\npublic class brain_luck {\n  def instructs\n  def dPtr = 0\n  \n  public brain_luck(String code) {\n    this.instructs = code.toCharArray().toList()\n  }\n\n  public String process(String input) {\n    def out = ''\n    def ins = input.toCharArray().toList()\n    def iPtr = 0\n    def loops = [], data = [0]\n    while(instructs[iPtr]) {\n      switch(instructs[iPtr]) {\n        case '>':\n          dPtr++\n          data[dPtr] = data[dPtr] ?: 0\n          iPtr++\n          break\n        case '<':\n          dPtr--\n          data[dPtr] = data[dPtr] ?: 0\n          iPtr++\n          break\n        case '+':\n          if(data[dPtr] == 255) {\n             data[dPtr] = 0\n          } else {\n            data[dPtr]++\n          }\n          iPtr++\n          break\n        case '-':\n          if(data[dPtr] == 0) {\n             data[dPtr] = 255\n          } else {\n            data[dPtr]--\n          }\n          iPtr++\n          break\n        case '.':\n          out += data[dPtr] as char\n          iPtr++\n          break\n        case ',':\n          data[dPtr] = ins.removeAt(0) as Integer\n          iPtr++\n          break\n        case '[':\n          if(data[dPtr] == 0) {\n            def ct = 1, ix = 1\n            for(nxt in (instructs[(iPtr+1)..-1])) {\n              ct += nxt == \"[\" ? 1 : nxt == \"]\" ? -1 : 0\n              ix++\n              if(ct == 0) break\n            }\n            iPtr += ix\n          } else {\n            loops.push(iPtr+1)\n            iPtr++\n          }\n          break\n        case ']':\n          if(data[dPtr] != 0) {\n            iPtr = loops.first()\n          } else {\n            loops.pop()\n            iPtr++\n          }\n          break\n      }\n    }\n    out\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5264d2b162488dc400000001":[{"id":92179,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n        final String SPACE = ' '\n        sentence.split(SPACE) \/\/\n                .collect{it.length() > 4 ? it.reverse() : it} \/\/\n                .join(SPACE)\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92180,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n        sentence.split(\" \")\n          .collect { it.length() >= 5 ? it.reverse() : it }\n          .join(\" \")\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92181,"user_id":527,"body":"class Kata {\n    static def spin_words(sentence) {\n        sentence.replaceAll(\/\\w{5,}\/) { it.reverse() }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92182,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n        sentence.split(\" \").collect { it.length() > 4 ? it.reverse() : it }.join(\" \")\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92183,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n        sentence.trim().split(' ').collect { it.size() >= 5 ? it.reverse() : it }.join(' ')\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92184,"user_id":575,"body":"class Kata {\n    static def spin_words(sentence) {\n        sentence.split(\" \").collect { w -> w.size() > 4 ? w.reverse() : w }.join(\" \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92185,"user_id":null,"body":"import java.util.List\nimport java.util.stream.Collectors\n\nclass Kata {\n    \n    static def spin_words(sentence) {\n        return sentence.split(\" \").stream().map{word -> return reverseIfNeeded(word)}.collect(Collectors.joining(\" \"))\n    }\n  \n    static def reverseIfNeeded(word) {\n      if (word.length() < 5) return word\n      \n      def sb = new StringBuilder(word)\n      sb.reverse()\n      return sb.toString()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92186,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n        String[] words = sentence.split(\" \");\n        for(int i = 0; i < words.size(); i++){\n          if(words[i].length() > 4) words[i] = words[i].reverse();\n        }\n        words.join(\" \");\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92187,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n      assert sentence instanceof String\n      def argSplit = sentence.split(\" \")\n      def newList = []\n      for(int i = 0; i < argSplit.size(); i++) {\n        if(argSplit[i].size() >= 5)\n          {\n            newList.add(wordReverse(argSplit[i]))\n          }\n        else \n          newList.add(argSplit[i])\n      }\n      return newList.join(\" \")\n    }\n    static def wordReverse(wrd) {\n      assert wrd instanceof String\n      return wrd.reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92188,"user_id":null,"body":"class Kata {\n    static def spin_words(sentence) {\n       def result = \"\"\n        sentence.split(\/ \/).each {\n            result += it.size() >= 5 ? \"${it.reverse()} \" : \"$it \"\n        }\n        result.trim()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"526571aae218b8ee490006f4":[{"id":92189,"user_id":575,"body":"class Kata {\n    static def count_bits(Integer n) {\n        Integer.bitCount(n)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92190,"user_id":527,"body":"class Kata {\n    static def count_bits = Integer.&bitCount\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92191,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n         Integer.toBinaryString(n).replaceAll(\"0\", \"\").length()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92192,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n        int sum = 0;\n        while(n>0) {\n        sum += n & 1;\n        n = n >> 1;\n        }\n      return sum\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92193,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n      def sum = 0;\n      def binario = [];\n       \n      while(n > 0){\n        binario.add(n%2);\n        n = (int)(n\/2);\n      }\n        \n      for(int i: binario){\n        sum += i;\n      }\n      return sum;\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92194,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n      return Integer.toBinaryString(n)\n                .split(\"\")\n                .count {\n                    it == '1'\n                }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92195,"user_id":50,"body":"class Kata {\n    static def count_bits(Integer n) {\n      if (n==0) return 0\n      return (n&1)+count_bits(n>>1)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92196,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n      int count = 0;\n      while(n != 0){\n        n = n & (n - 1);\n        count++;\n      }\n        return count;\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92197,"user_id":null,"body":"\nclass Kata {\n    static void main(String[] args) {\n        println(count_bits(1234))\n    }\n    static def count_bits(Integer n) {\n        int cont = 0\n        String binario = Integer.toBinaryString(n)\n        binario.each {\n            if (it == \"1\") {\n                cont++;\n            }\n        }\n        return cont\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92198,"user_id":null,"body":"class Kata {\n    static def count_bits(Integer n) {\n      int i = 0\n        while(n) {\n          if (n % 2 == 1) {\n            i++;\n          }\n          n \/= 2\n        }\n      return (i);\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"526c7363236867513f0005ca":[{"id":92199,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n        if (year % 400 == 0) return true\n        if (year % 100 == 0) return false\n        if (year % 4 == 0) return true\n        return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92200,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n        !(year%400) || (year%100 && !(year%4))\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92201,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n      if (year % 400 == 0) true\n      else if (year % 100 == 0) false\n      else if (year % 4 == 0) true\n      else false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92202,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n      if (year % 100 == 0) {\n        if (year % 400 == 0) {\n          true\n        } \n        else {\n          false\n        }\n      } \n      else if (year % 4 == 0) {\n        true\n      } \n      else {\n        false\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92203,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n        \/\/ Implement me! :)\n        return (year % 400)?(year % 100)?(year % 4)?false:true:false:true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92204,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n      if(year % 400 == 0){\n        return true\n        }\n      else if(year % 100 == 0){\n        return false\n        }\n      else if(year % 4 == 0){\n        return true\n      }\n      else{return false}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92205,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n      def leapYear = false\n      if (year % 400 == 0) {\n        leapYear = true\n      } else if (year % 100 == 0) {\n        leapYear = false\n      } else if (year % 4 == 0) {\n        leapYear = true\n      }\n      return leapYear\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92206,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n        year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92207,"user_id":null,"body":"class Kata {\n    static def isLeapYear(year) {\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)\n          return true\n        else\n          return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92208,"user_id":null,"body":"class Kata {\n  \n    static void main(String[] args) {\n        println(isLeapYear(1234))\n\n    }\n    static def isLeapYear(year) {\n        if (year % 4 == 0 && year % 100 != 0){\n            return true\n        } else if (year % 4 == 0 && year % 400 == 0 && year % 100 == 0){\n            return true\n        } else {\n            return false\n        }\n    }\n\n\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"527e4141bb2ea5ea4f00072f":[{"id":92209,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n        (1..input).sum { it.toString()*.toInteger().sum() }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92210,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n      int sum = 0;\n      for(int i = 1; i <= input; i++) {\n        int j = i;\n        while(j > 0){\n          sum += j % 10;\n          j \/= 10;\n        }\n        }\n      return sum;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92211,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n      def sum=0\n      def d\n        for (i in 1..input){\n          d = i as String\n          for (c in d){\n             sum += c as Integer\n          }\n        }\n      sum\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92212,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n      println(input)\n      def x=0\n       (1..input).toList().each{x+=(\"$it\"*.toInteger().sum(0))}\n      return x\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92213,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer n) {\n      int res = 0\n      for (int i = 1; i <= n; i++) {\n    if (i <= 9) {    res += i     }\n\n    else if (i < 100) {\n        int sum = i % 10\n        int frs = (i - sum) \/ 10\n        int snd = sum + frs\n        res += snd\n    }\n    else if (i < 10000) {\n        if (i < 10000) {\n        int a = i \/ 1000\n        int b = (i % 1000) \/ 100\n        int c = (i % 100) \/ 10\n        int d = i % 10\n        int sum = a + b +c +d\n            res += sum\n}\n    }\n    else {return n}\n}\n      return res\n}\n    }\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92214,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n      int sum = 0\n      for(i in 1..input)\n        sum+=\"$i\"*.toInteger().sum()\n      return sum\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92215,"user_id":null,"body":"class Kata {\n    static int computeSum(int input) {\n        return (0..input).toArray().collect { number ->\n            number.toString()\n                    .split(\"\")\n                    .collect { it.toInteger() }\n                    .sum()\n        }.sum() as int\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92216,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n        return (1..input).sum { value ->\n            if (value > 9) {\n                List<Integer> subItem = []\n                value.toString().each { letter ->\n                    subItem.add(letter.toInteger())\n                }\n                subItem.sum { subValue ->\n                    subValue\n                }\n            } else {\n                value\n            }\n        } as Integer\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92217,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n      def result = 0\n      for(int i = 1; i <= input; i++) {\n          i.toString().toCharArray().each {digit ->\n              result = result + Character.getNumericValue(digit)\n          }\n      }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92218,"user_id":null,"body":"class Kata {\n    static Integer computeSum(Integer input) {\n        Integer sum = 0;\n        for (int i = 1; i <= input; i++) {\n            Integer number = i\n            while (number > 0) {\n                sum += number % 10\n                number \/= 10\n            }\n        }\n        return sum;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52b305bec65ea40fe90007a7":[{"id":92219,"user_id":527,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        List<Character> cs = word.toList().sort()\n        possibleWords.findAll{ it.toList().sort() == cs }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92220,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n      def results =[]\n      possibleWords.each{it -> if(word.split(\"\").sort().join(\"\") == it.split(\"\").sort().join(\"\")) results.add(it) else return }\n      return results   \n}}\n  ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92221,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        def wordChars = word.toList().sort().toString()\n        possibleWords.findAll { possibleWord ->  \n            possibleWord.toList().sort().toString() == wordChars\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92222,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        def List<String> res = [];\n        def ArrayList permutations = permutation(word);\n        int i = 0;\n        while(possibleWords.size > res.size && i < possibleWords.size) {\n            if (permutations.contains(possibleWords[i])) {\n                res.add(possibleWords[i])\n            }\n            i++;\n        }\n        return res;\n    }\n  \n    static ArrayList permutation(String s) {\n      def ArrayList res = new ArrayList();\n      if (s.length() == 1) {\n          res.add(s);\n      } \n      else if (s.length() > 1) {\n          int lastIndex = s.length() - 1;\n          String last = s.substring(lastIndex);\n          String rest = s.substring(0, lastIndex);\n          res = merge(permutation(rest), last);\n      }\n      return res;\n    }\n  \n    static ArrayList merge(ArrayList list, String c) {\n      def ArrayList res = new ArrayList<>()\n      for (String s : list) {\n          for (int i = 0; i <= s.length();  i++) {\n              String ps = new StringBuffer(s).insert(i, c).toString();\n              res.add(ps);\n          }\n      }\n      return res;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92223,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        return possibleWords.findAll { isMatch(it, word) }\n    }\n\n    static boolean isMatch(String possible, String word) {\n        if (possible.length() != word.length())\n            return false\n\n        return possible.split(\"\").sort() == word.split(\"\").sort()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92224,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String w, List<String> pW) {\n        pW.findAll{ w.toList().sort()==it.toList().sort()}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92225,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n      def sortList = []\n      def solution = []\n      def compareList = []\n      for (c in word){\n        sortList.add(c)\n      }   \n      for( w in  possibleWords){\n        for (k in w){\n          compareList.add(k)\n        }\n        if(sortList.sort()==compareList.sort()){\n          solution << w\n        }\n        compareList = []\n      }\n      return solution\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92226,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n    String sortedWord = word.split(\"\").sort().join()\n    def answerList = possibleWords.stream()\n                                  .filter { w -> w.split(\"\").sort().join() == sortedWord }\n                                  .toList()\n      return answerList\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92227,"user_id":null,"body":"import java.util.stream.IntStream\n\nclass Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        def w = word.toList().sort().join()\n        IntStream.range(0, possibleWords.size())\n                .filter { possibleWords[it].toList().sort().join() == w }\n                .mapToObj { possibleWords[it] }\n                .collect { it }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92228,"user_id":null,"body":"class Kata {\n    static List<String> grabscrab(String word, List<String> possibleWords) {\n        def www = word.toList().sort().groupBy{it}.collect{ k, v -> [k, v.size()] }\n\n        return possibleWords.findAll{it.toList().sort().groupBy{it}.collect{ k, v -> [k, v.size()] } == www}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52e88b39ffb6ac53a400022e":[{"id":92229,"user_id":null,"body":"class Kata {\n    static String longToIp(Long ip) {\n        return sprintf(\"%d.%d.%d.%d\", ip.intdiv(2**24), ip.intdiv(2**16) & 0xff, ip.intdiv(2**8) & 0xff, ip & 0xff)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92230,"user_id":null,"body":"class Kata {\n    static String longToIp(Long ip) {\n      Long.toBinaryString(ip)\n        .padLeft(32,'0')\n        .toList()\n        .collate(8)\n        .collect{\n          Integer.parseInt(it.join(),2)\n        }.join('.')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92231,"user_id":50,"body":"class Kata {\n    static String longToIp(Long n) {\n      return sprintf(\"%d.%d.%d.%d\",((Long)(n\/16777216L))%256L,((Long)(n\/(256L*256L)))%256L,((Long)(n\/256L))%256L,n%256L)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92232,"user_id":575,"body":"class Kata {\n    static String longToIp(Long ip) {\n        [24, 16, 8, 0].collect { (ip >> it & 0xFF) as String }.join(\".\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52efefcbcdf57161d4000091":[{"id":92233,"user_id":527,"body":"class Kata {\n    static def count_characters(string) {\n        string.iterator().countBy { it }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92234,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n        \/\/ feel the power of groovy ;-)\n        string.toList().countBy {it}\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92235,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n        def list = string.toList()\n        list.collectEntries {[(it): list.count(it)]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92236,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n      string.inject([:].withDefault { 0 }) { result, i -> result[i] = result[i] + 1; result }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92237,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n        def result = [:]\n        string.toList().each{result[it] = result.getOrDefault(it, 0) + 1}\n        return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92238,"user_id":null,"body":"class Kata {\n    static def count_characters(str) {\n       return !str? [:]:str.split('').groupBy({it}).collectEntries{[it.key,it.value.size()]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92239,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n       string.toCharArray()*.toString().toList().countBy { it }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92240,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n        \/\/ Implement me! :\n      def map = [:]\n      string?.trim()?.each{ c ->\n          map[c] = 1 + (map[c]?:0)\n      }\n      return map\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92241,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n      if(string.length() > 0){\n        return string.split('').countBy {it}\n        } else {\n        return [:]\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92242,"user_id":null,"body":"class Kata {\n    static def count_characters(string) {\n        string.collect().groupBy().collectEntries {[(it.key):it.value.size()]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52f3149496de55aded000410":[{"id":92243,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      def absNumber = number.abs()\n      absNumber != 0 ? absNumber % 10 + sum_digits(absNumber.intdiv(10)) : 0\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92244,"user_id":null,"body":"class Kata{\n  static int sum_digits(number) {\n    int a = Math.abs(number);\n    int d = 0;\n    \n    for (String c : \"$a\") {\n      d += c as Integer;\n    }\n    return d;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92245,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      Math.abs(number).toString().split('').sum{ it.toInteger() }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92246,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      \"${number}\".toList().findAll { it ==~ \/\\d+\/ }*.toInteger().sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92247,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      int sum_digits = 0\n        String digits = Math.abs(number).toString()\n        digits.each({digit ->\n            sum_digits += digit.toInteger()\n        })\n      return sum_digits\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92248,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      return Math.abs(number).toString()\n        .split(\"\")\n        \/\/ map\n        .collect{x -> Integer.valueOf(x)}\n        \/\/ reduce\n        .sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92249,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      def result = 0\n       number.abs().toString().each{result += it.toInteger()}\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92250,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      \n      int sum\n      \n      number = Math.abs(number)    \n      number.toString().each(){sum += it.toInteger()}\n      \n      return sum\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92251,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {     \n      (Math.abs(number)+'').toList().sum{it.charAt(0)-48}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92252,"user_id":null,"body":"class Kata{\n    static int sum_digits(number) {\n      int sum = 0;\n      number.abs().toString().each{sum += it.toInteger()};\n      return sum;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52f787eb172a8b4ae1000a34":[{"id":92253,"user_id":564,"body":"class Kata {\n  static def zeros(a) {\n    def b = a.intdiv 5\n    if (a <= 0) {\n      0\n    } else {\n      b + zeros(b)\n    }\n  }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92254,"user_id":null,"body":"class Kata {\n    static def zeros(n) {\n      long a = 0;\n      while(n)\n        a += n\/=5;\n      return a;\n  }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92255,"user_id":713,"body":"class Kata {\n    static def zeros(n) {\n        return n > 0 ? n.intdiv(5) + zeros(n.intdiv(5)) : 0;\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92256,"user_id":null,"body":"class Kata {\n    static def zeros(n) {\n        if (n <= 0) return 0\n        def b = n.intdiv 5\n        b + zeros(b)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92257,"user_id":null,"body":"class Kata {\n    static def zeros(n) {\n        int countOfZeros=0;\n        if(n<0) return -1; \n        if (n==0) return 0;\n        for(int i=5;n\/i>1;i*=5)\n        {\n            countOfZeros+=n\/i;\n        }\n        return countOfZeros\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92258,"user_id":168,"body":"class Kata {\n    static def zeros(n) {\n      n < 5 ? 0 : n.intdiv(5) + zeros(n.intdiv(5))\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92259,"user_id":53,"body":"class Kata {\n    static def zeros(n) {\n        long res = 0;\n        long i = 5;\n        while (n \/ i >= 1) {\n            res += n \/ i;\n            i *= 5;\n        }\n        return res;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92260,"user_id":null,"body":"class Kata {\n    static def zeros(n) {\n      long total = 0\n      while(n){\n         total += n\/=5\n     }\n      return total\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92261,"user_id":null,"body":"class Kata {\n  static def zeros(n) {\n    def count = 0;\n    while (n >= 5) {\n      n = Math.floor(n \/ 5);\n      count += n;\n    }\n    return count;\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92262,"user_id":50,"body":"class Kata {\n    static def zeros(n) {\n      int limit = 5\n      int zer = 0\n      while (limit <= n) {\n        zer += n \/ limit\n        limit *= 5\n      }\n      return zer\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52f831fa9d332c6591000511":[{"id":92263,"user_id":null,"body":"class ParseMolecule {\n    static Map<String, Integer> parse_molecule(String formula) {\n        def element = \/[A-Z][a-z]?\/\n        ['()','[]','{}'].each{\n          def part = \/\\${it[0]}([^\\${it[0]}\\${it[1]}]+)\\${it[1]}\/\n          while((formula =~ part).count) {\n            (formula =~ \/$part(\\d+)?\/).each { formula = repeat(formula, it) }\n          }\n        }\n        (formula  =~ \/($element)(\\d+)\/).each { formula = repeat(formula, it) }\n        if ((formula =~ \/([\\(\\)\\[\\]\\{\\}]|[a-z]{2,})\/).count) { throw new IllegalArgumentException() }\n        ((formula =~ element) as List).countBy{it}\n    }\n    static String repeat(String string, List data) { string.replace(data[0], (data[1]*(data[2] as Integer ?: 1))) }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92264,"user_id":null,"body":"class ParseMolecule {\n    enum TokenTypes {\n        NUMBER,\n        ATOM,\n        START,\n        END,\n    }\n\n    static class Token {\n        TokenTypes token\n        String value\n\n        @Override\n        String toString() {\n            return \"${token}: ${value}\"\n        }\n    }\n\n    static class MoleculeTree {\n        List<MoleculeTree> parts\n        String atom\n        int number\n\n        @Override\n        String toString() {\n            if (isLeaf()) {\n                return \"{${atom}: ${number}}\"\n            } else {\n                return \"{${parts.toString()}: ${number}}\"\n            }\n        }\n\n        boolean isLeaf() {\n            return parts == null\n        }\n    }\n\n    static parseFormula(String formula) {\n        def regex = ~\/(?<number>\\d+)|(?<atom>[A-Z][a-z]*)|(?<open>[(\\[{])|(?<close>[)\\]}])\/\n        def enumlookup = TokenTypes.values()\n        def matcher = (formula =~ regex)\n        def expected = 0\n        def tokens = matcher.collect{match ->\n            if (expected != matcher.start()) {\n                throw new IllegalArgumentException(\"badly formatted at ${matcher.start()}\")\n            }\n            def midx = match.findIndexOf(1, {it != null })\n            def type = enumlookup[midx-1]\n            def val = match[midx]\n            expected = matcher.end()\n            return new Token(token: type, value: val)\n        }\n        if (expected != formula.length()) {\n            throw new IllegalArgumentException(\"badly formatted at ${expected}\")\n        }\n        return tokens\n    }\n\n    static int bracketValue(String b) {\n        def LOOKUP = [\n                '(': 0, ')': 0,\n                '[': 1, ']': 1,\n                '{': 2, '}': 2,\n        ]\n        return LOOKUP[b];\n    }\n\n    static MoleculeTree makeTree(Iterable<Token> tokens) {\n        def stack = []\n        def brackets = []\n        MoleculeTree cur = new MoleculeTree(parts: [], number: 1)\n        for (token in tokens) {\n            switch (token.token) {\n                case TokenTypes.ATOM:\n                    cur.parts << new MoleculeTree(atom: token.value, number: 1)\n                    break\n\n                case TokenTypes.START:\n                    stack.push(cur)\n                    brackets.push(bracketValue(token.value))\n                    cur = new MoleculeTree(parts: [], number: 1)\n                    break\n\n                case TokenTypes.NUMBER:\n                    if (cur.parts.isEmpty()) {\n                        throw new IllegalArgumentException(\"dangling number\")\n                    }\n                    cur.parts.last().number = token.value.toInteger()\n                    break\n\n                case TokenTypes.END:\n                    if (stack.isEmpty()) {\n                        throw new IllegalArgumentException(\"closing bracket with no opening\")\n                    }\n                    def prev = stack.pop()\n                    def expectedBracket = brackets.pop()\n                    def actualBracket = bracketValue(token.value)\n                    if (expectedBracket != actualBracket) {\n                        throw new IllegalArgumentException(\"mismatched brackets\")\n                    }\n                    prev.parts << cur\n                    cur = prev\n                    break\n            }\n        }\n        if (!brackets.isEmpty()) {\n            throw new IllegalArgumentException(\"leftover open brackets\")\n        }\n        return cur\n    }\n\n    static Map<String, Integer> parse_moleculeFromTree(MoleculeTree molecule) {\n        def add_atoms = { self,other ->\n            other.each {\n                self[it.key] = self.getOrDefault(it.key, 0) + it.value\n            }\n            return self\n        }\n        def multiply_atoms = { self,number ->\n            self.each {\n                it.value *= number\n            }\n            return self\n        }\n\n        if (molecule.isLeaf()) {\n            return [(molecule.atom): (molecule.number)]\n        } else {\n            def atoms = [:]\n            for (part in molecule.parts) {\n                add_atoms(atoms, parse_moleculeFromTree(part))\n            }\n            multiply_atoms(atoms, molecule.number)\n            return atoms\n        }\n    }\n\n    static Map<String, Integer> parse_molecule(String formula) {\n        parse_moleculeFromTree(makeTree(parseFormula(formula)))\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92265,"user_id":53,"body":"class ParseMolecule {\n  \n  private int i;\n  private String formula;\n  private Deque<Map<String, Integer>> stack;\n  \n  private boolean completed() { return i >= formula.length(); }\n  private char peek()  { return completed() ? '\\0' : formula.charAt(i); }\n  private char shift() { return completed() ? '\\0' : formula.charAt(i++); }\n  private boolean upper(char c) { return c >= 'A' && c <= 'Z'; }\n  private boolean lower(char c) { return c >= 'a' && c <= 'z'; }\n  private boolean digit(char c) { return c >= '0' && c <= '9'; }\n  private boolean open( char c) { return c == '[' || c == '{' || c == '('; }\n  private boolean close(char c) { return c == ']' || c == '}' || c == ')'; }\n  private boolean matchGroup(char a, char b) { return a == '[' && b == ']' || a == '{' && b == '}' || a == '(' && b == ')'; }\n  private Map<String,Integer> curr() { return stack.peekFirst(); }\n  private void snap() { stack.addFirst(new HashMap<String, Integer>()); }\n  \n  private ParseMolecule(String formula) { this.formula = formula; }\n  \n  public static Map<String,Integer> parse_molecule(String formula) { return new ParseMolecule(formula).getMolecule(); }\n  \n  private Map<String,Integer> getMolecule() {\n    if (formula.isEmpty()) throw new IllegalArgumentException(\"empty formula\");\n    stack = new ArrayDeque<Map<String, Integer>>();\n    snap();\n    molecule(false);\n    return stack.peekFirst();\n  }\n  \n  private void restore(int n) {\n    def q = stack.pollFirst();\n    def p = curr();\n    q.each { key, val ->\n      def v = p.containsKey(key) ? p.get(key) : 0;\n      p.put(key, v + n * val);\n    }\n  }\n  \n  private int number() {\n    def sb = new StringBuilder();\n    while (digit(peek())) sb.append(shift());\n    return sb.length() > 0 ? Integer.parseInt(sb.toString()) : 1;\n  }\n  \n  private String atom() {\n    def sb = new StringBuilder();\n    sb.append(shift());\n    while (lower(peek())) sb.append(shift());\n    def p = curr();\n    def s = sb.toString();\n    def v = p.containsKey(s) ? p.get(s) : 0;\n    p.put(s, v + 1);\n    return s;\n  }\n  \n  private void molecule(boolean group) {\n    while (!completed() && (!close(peek()) || !group)) {\n      snap();\n      if (upper(peek())) {\n        atom();\n      } else if (open(peek())) {\n        def c = shift();\n        molecule(true);\n        if (!close(peek())) throw new IllegalArgumentException(\"no group end\");\n        if (!matchGroup(c, peek())) throw new IllegalArgumentException(\"group not matched\");\n        shift();\n      } else {\n        throw new IllegalArgumentException(\"invalid token\");\n      }\n      restore(number());\n    }\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92266,"user_id":null,"body":"class ParseMolecule {\n    static Map<String, Integer> parse_molecule(String formula) {\n        if(formula) {\n            new Parser(formula).parse().eval()\n        } else {\n            [:]\n        }\n    }\n}\n\nclass Token {\n  String text\n  int index\n  Kind kind\n  \n  Token(text,index) {\n    this.text = text\n    this.index = index\n    kind = Kind.values().find {\n      it.pattern && this.text ==~ it.pattern\n    }\n  }\n  \n  enum Kind {\n    PAREN(\/[\\[\\](){}]\/),\n    COUNT(\/[1-9][0-9]*\/),ELEM(\/[A-Z]([a-z][a-z]?)?\/)\n    \n    final String pattern\n    \n    Kind(pattern=null) {\n      this.pattern = pattern\n    }\n  }\n}\n\n\nclass Parser {\n  def nextTokenIndex = 0\n  def tokenList = []\n  \n  Parser(text) {\n    validate(text)\n    \n    def reToken = Token.Kind.values()*.pattern.join('|')\n    def match = text =~ reToken\n    \n    def idx = 0\n    match.each { t ->\n      tokenList << new Token(t[0],idx++)\n    }\n  }\n  \n  void validate(text) {\n    if(text =~ \/(?<![A-Z][a-z]?)[a-z]\/)   throw new IllegalArgumentException()\n    def parens = []\n    def count = 0\n    for(char c : text) {\n      try {\n      switch(c) {\n        case '(':\n        case '[':\n        case '{':\n          count++\n          parens.push(c)\n          break\n        case ')':\n          if(parens.pop() != '(') throw new IllegalArgumentException()\n          count--\n          break\n        case ']':\n          if(parens.pop() != '[') throw new IllegalArgumentException()\n          count--\n          break\n        case '}':\n          if(parens.pop() != '{') throw new IllegalArgumentException()\n          count--\n          break\n        default:\n          break\n      }\n      } catch(NoSuchElementException ignored) {\n        throw new IllegalArgumentException()\n      }\n    }\n    if(count) throw new IllegalArgumentException()\n  }\n  \n  def parse() {\n    parseExpr()\n  }\n  \n  boolean nextIsOpen() {\n    if(tokenList[nextTokenIndex]?.kind == Token.Kind.PAREN &&\n        tokenList[nextTokenIndex].text =~ ~\/[\\[({]\/) {\n      nextTokenIndex++\n      return true\n    } else {\n      return false\n    }\n  }\n  \n  boolean nextIsCount() {\n    return tokenList[nextTokenIndex]?.kind == Token.Kind.COUNT\n  }\n  \n  boolean nextIsAtom() {\n    return tokenList[nextTokenIndex] && !(tokenList[nextTokenIndex].kind == Token.Kind.PAREN &&\n        tokenList[nextTokenIndex].text =~ ~\/[\\])}]\/)\n  }\n  \n  Expr parseExpr() {\n    \/\/ expr ::= atom { atom }\n    def expr = new Expr(parseAtom())\n    \n    while(nextIsAtom()) {\n      expr.atoms << parseAtom()\n    }\n    \n    expr\n  }\n  \n  Group parseGroup() {\n    \/\/ group ::= wrap | elem\n    if(nextIsOpen()) {\n      parseWrap()\n    } else {\n      parseElem()\n    }\n  }\n  \n  Wrap parseWrap() {\n    \/\/ wrap ::= \"(\" expr \")\" | \"[\" expr \"]\" | \"{\" expr \"}\"\n    def wrap = new Wrap(parseExpr())\n    nextTokenIndex++\n    wrap\n  }\n  \n  Atom parseAtom() {\n    \/\/ atom ::= group [ count ]\n    def group = parseGroup()\n    int count = 1\n    if(nextIsCount()) {\n      count = parseCount()\n    }\n    new Atom(group,count)\n  }\n  \n  int parseCount() {\n    \/\/ count ::= \/[1-9][0-9]*\/\n    tokenList[nextTokenIndex++].text as int\n  }\n  \n  Elem parseElem() {\n    \/\/ elem ::= \/[A-Z]([a-z][a-z]?)?\/\n    new Elem(tokenList[nextTokenIndex++].text)\n  }\n}\n\nabstract class Item {\n  abstract def eval();\n}\n\nclass Expr extends Item {\n  List<Atom> atoms\n  Expr(Atom first) {\n    atoms = [first]\n  }\n  \n  def eval() {\n    def results = [:]\n    atoms*.eval()*.keySet().flatten().unique().each { key ->\n      def count = 0\n      atoms*.eval().each { atom ->\n        if(atom[key]) count += atom[key]\n      }\n      results[key] = count\n    }\n    \n    results\n  }\n}\n\nabstract class Group extends Item {\n}\n\nclass Wrap extends Group {\n  Expr expr\n  \n  Wrap(Expr expr) {\n    this.expr = expr\n  }\n  \n  def eval() {\n    expr.eval()\n  }\n}\n\nclass Elem extends Group {\n  String elem\n  \n  Elem(String elem) {\n    this.elem = elem\n  }\n  \n  def eval() {\n    [(elem):1]\n  }\n}\n\nclass Atom extends Item {\n  Group group\n  int count\n  \n  Atom(Group group,count=1) {\n    this.group = group\n    this.count = count\n  }\n  \n  def eval() {\n    group.eval().collectEntries {\n      [(it.key):it.value * count]\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92267,"user_id":null,"body":"class ParseMolecule {\n    static Map<String, Integer> parse_molecule(String originalFormula) {\n        String formula = originalFormula\n        if (!formula) return [:]\n        if (formula ==~ \/.*[^A-Z][a-z].*\/) throw new IllegalArgumentException(\"Atoms should start with a capital letter\")\n        String expandBracketsRegex = \/\\(([^(\\[{]*?)\\)(\\d*)|\\{([^(\\[{]*?)}(\\d*)|\\[([^(\\[{]*?)](\\d*)\/\n        boolean replace = true\n        while (replace) {\n            replace = false\n            formula = formula.replaceAll(expandBracketsRegex, {\n                replace = true\n                String nested = it[1] ?: it[3] ?: it[5]\n                int count = (it[2] ?: it[4] ?: it[6] ?: '1') as int\n                return nested * count\n            })\n        }\n        if (formula.matches(\/.*[({\\[\\]})].*\/)) {\n            throw new IllegalArgumentException(\"Mismatched brackets ${originalFormula}\")\n        }\n        String parse_moleculeRegex = \/([A-Z][a-z]*)(\\d*)\/\n        Map<String, Integer> atoms = [:].withDefault { 0 }\n        formula.eachMatch(parse_moleculeRegex, {\n            atoms[it[1]] += it[2] ? it[2] as int : 1\n        })\n        return atoms as HashMap<String, Integer>\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92268,"user_id":null,"body":"class ParseMolecule {\n    static Map<String, Integer> parse_molecule(String formula) {\n        FiniteStateMachine fsm = new FiniteStateMachine()\n\n        for (char c in formula.toCharArray()){\n            fsm.parseCharacter(c)\n        }\n        fsm.checkFinalState()\n        fsm.performMultiplicationForContexts()\n        return fsm.squashChunksIntoMap()\n    }\n\n}\n\nclass ChunkOfFormula {\n    String element\n    String number\n    int count\n    boolean complexChunk\n\n    ChunkOfFormula() {\n        count = 1\n        element = \"\"\n        number = \"\"\n        complexChunk = false\n    }\n\n    ChunkOfFormula(String substring) {\n        count = 1\n        element = substring\n        number = \"\"\n        complexChunk = true\n    }\n\n    void multiply(int factor) {\n        count = count * factor\n    }\n\n    void addCharacter(char c) {\n        element += c\n    }\n\n    void addNumbers(char n) {\n        number += n\n        count = number.toInteger()\n    }\n\n    @Override\n    String toString() {\n        return complexChunk ? \"(\" + element + \")\" + count : element + count\n    }\n}\n\nclass FSMContext {\n    ChunkOfFormula currentChunk\n    List<ChunkOfFormula> chunks\n    String multFactor = \"\"\n    FiniteStateMachine.BracketType bracketType\n\n    FSMContext (){\n        this.chunks = new ArrayList<ChunkOfFormula>()\n    }\n\n    void addCharacterToMultFactor(char c){\n        multFactor +=c\n    }\n\n    void multiply(){\n        for (chunk in chunks)\n        {\n            chunk.multiply(multFactor.equals(\"\")?1:multFactor.toInteger())\n        }\n    }\n}\n\n\nclass FiniteStateMachine {\n    static String alphabet = \"ABCDEFGHIJKLMNOPQRSTUWXYZ\"\n    static String alphabetSmall = \"abcdefghijklmnopqrstuwxyz\"\n    static String numberCharacters = \"0123456789\"\n    static String leftBrackets = \"({[\"\n    static String rightBrackets = \")}]\"\n\n    State currentState\n    Boolean accept = true\n\n    enum State { Init, ParseLetters, ParseNumber, InitiateContext, RestoreContext }\n    enum CharType {Capital, Small, Number, OpenBracket,CloseBracket}\n    enum BracketType {CurlyBracket, Parenthesis,SquareBracket}\n\n    FSMContext currentContext\n    FSMContext previousContext\n    Stack<FSMContext> contextStack\n    List<FSMContext> allContexts\n    FiniteStateMachine(){\n        currentState = State.Init\n        contextStack = new Stack<>()\n        currentContext = new FSMContext()\n        previousContext = null\n        allContexts = new ArrayList<FSMContext>()\n        allContexts.add(currentContext)\n    }\n\n\n\n    void parseCharacter(char c) throws IllegalAccessException {\n        CharType type = getCharType(c)\n        switch (currentState){\n            case State.Init:\n                switch (type){\n                    case CharType.Capital:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.OpenBracket:\n                        enterInitiateContextState(c)\n                        break\n                    default:\n                        throw new IllegalArgumentException(\"Wrong Transition\")\n                }\n                break\n            case State.ParseLetters:\n                switch (type){\n                    case CharType.Small:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.Capital:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.OpenBracket:\n                        enterInitiateContextState(c)\n                        break\n                    case CharType.CloseBracket:\n                        enterRestoreContextState(c)\n                        break\n                    case CharType.Number:\n                        enterParseNumbersState(c)\n                        break\n                    default:\n                        throw new IllegalArgumentException(\"Wrong Transition\")\n                }\n                break\n            case State.ParseNumber:\n                switch (type){\n                    case CharType.Capital:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.Number:\n                        enterParseNumbersState(c)\n                        break\n                    case CharType.OpenBracket:\n                        enterInitiateContextState(c)\n                        break\n                    case CharType.CloseBracket:\n                        enterRestoreContextState(c)\n                        break\n                    default:\n                        throw new IllegalArgumentException(\"Wrong Transition\")\n                }\n                break\n            case State.InitiateContext:\n                switch (type){\n                    case CharType.Capital:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.OpenBracket:\n                        enterInitiateContextState(c)\n                        break\n                    default:\n                        throw new IllegalArgumentException(\"Wrong Transition\")\n                }\n                break\n            case State.RestoreContext:\n                switch (type){\n                    case CharType.Capital:\n                        enterParseLettersState(c)\n                        break\n                    case CharType.OpenBracket:\n                        enterInitiateContextState(c)\n                        break\n                    case CharType.CloseBracket:\n                        enterRestoreContextState(c)\n                        break\n                    case CharType.Number:\n                        enterRestoreContextState(c)\n                        break\n                    default:\n                        throw new IllegalArgumentException(\"Wrong Transition\")\n                }\n                break\n        }\n\n    }\n\n    static CharType getCharType(char c) {\n        if(alphabet.indexOf(c.toString()) >= 0)\n            return CharType.Capital\n        else if (alphabetSmall.indexOf(c.toString())>=0)\n            return CharType.Small\n        else if (numberCharacters.indexOf(c.toString())>=0)\n            return CharType.Number\n        else if (leftBrackets.indexOf(c.toString())>=0)\n            return CharType.OpenBracket\n        else if (rightBrackets.indexOf(c.toString())>=0)\n            return CharType.CloseBracket\n        else\n            throw new IllegalArgumentException (\"Wrong character\")\n    }\n    static BracketType getBracketType(char c){\n        if (\"()\".indexOf(c.toString())>=0){\n            return BracketType.Parenthesis\n        }else if (\"{}\".indexOf(c.toString())>=0){\n            return BracketType.CurlyBracket\n        }else if (\"[]\".indexOf(c.toString())>=0){\n            return BracketType.SquareBracket\n        }else\n            throw new IllegalArgumentException(\"not a bracket\")\n    }\n\n    void enterParseLettersState(char c){\n        currentState = State.ParseLetters\n        CharType charType = getCharType(c)\n\n        if(charType == CharType.Capital){\n            ChunkOfFormula newChunk = new ChunkOfFormula()\n            currentContext.setCurrentChunk (newChunk)\n            currentContext.getChunks().add(newChunk)\n            currentContext.getCurrentChunk().addCharacter(c)\n        }\n        else if (charType == CharType.Small){\n            currentContext.getCurrentChunk().addCharacter(c)\n        }else {\n            throw new IllegalArgumentException(\"Wrong charType\")\n        }\n\n    }\n    void enterParseNumbersState(char c){\n        currentState = State.ParseNumber\n        CharType charType = getCharType(c)\n        if (charType == CharType.Number)\n        {\n            currentContext.getCurrentChunk().addNumbers(c)\n        } else {\n            throw new IllegalArgumentException( \"Wrong chartype\")\n        }\n    }\n    void enterInitiateContextState(char c){\n        currentState = State.InitiateContext\n        accept = false\n\n        CharType charType = getCharType(c)\n        if (charType == CharType.OpenBracket)\n        {\n            contextStack.push(currentContext)\n            currentContext = new FSMContext()\n            currentContext.setBracketType(getBracketType(c))\n            allContexts.add(currentContext)\n\n        } else {\n            throw new IllegalArgumentException( \"Wrong chartype\")\n        }\n    }\n    void enterRestoreContextState(char c){\n        currentState = State.RestoreContext\n        CharType charType = getCharType(c)\n        \n        if (charType == CharType.CloseBracket)\n        {\n            accept = true\n            if (!getBracketType(c).equals(currentContext.getBracketType()))\n                throw new IllegalArgumentException(\"Brackets mismatch\")\n            previousContext = currentContext\n\n            currentContext = contextStack.pop()\n            currentContext.getChunks().addAll(previousContext.getChunks())\n        } else if (charType == CharType.Number) {\n            previousContext.addCharacterToMultFactor(c)\n        }\n        else {\n            throw new IllegalArgumentException( \"Wrong chartype\")\n        }\n    }\n\n    void performMultiplicationForContexts(){\n        for(context in allContexts){\n            context.multiply()\n        }\n    }\n    Map<String, Integer> squashChunksIntoMap(){\n        Map<String, Integer> map = new HashMap<>()\n        for (chunk in currentContext.getChunks())\n        {\n            String elementName = chunk.getElement()\n            Integer elementCount = chunk.getCount()\n\n            if(map.containsKey(elementName)){\n                Integer count = map.get(elementName)\n                map.put(elementName,new Integer(count+elementCount))\n            }else\n                map.put(elementName,elementCount)\n        }\n        return map\n    }\n\n    void checkFinalState(){\n        if(!accept)\n            throw new IllegalArgumentException(\"wrong final state\")\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92269,"user_id":490,"body":"class ParseMolecule {\n    static Map<String, Integer> parse_molecule(String formula) {\n        def element = \/[A-Z][a-z]?\/\n        ['()','[]','{}'].each{\n          def part = \/\\${it[0]}([^\\${it[0]}\\${it[1]}]+)\\${it[1]}\/\n          while((formula =~ part).count) {\n            (formula =~ \/$part(\\d+)?\/).each { formula = repeat(formula, it) }\n          }\n        }\n        (formula  =~ \/($element)(\\d+)\/).each { formula = repeat(formula, it) }\n        if ((formula =~ \/([\\(\\)\\[\\]\\{\\}]|[a-z]{2,})\/).count) { throw new IllegalArgumentException() }\n        ((formula =~ element) as List).countBy{it}\n    }\n    static String repeat(String string, List data) { string.replace(data[0], (data[1]*(data[2] as Integer ?: 1))) }\n}\n\n\/\/ Original answer. Replaced because it fails on Groovy 2.5\n\/*\nimport java.util.regex.Matcher\nimport java.util.regex.Pattern\n\nclass ParseMolecule {\n    private static Iterator<String> tokenIter\n    private static Stack<Integer> bracketStk\n\n    private static final String AT_NUM = \"[A-Z][a-z]?\\\\d*\"\n    private static final String OPEN_BRA = \"[{(\\\\[]\"\n    private static final String CLOSE_BRA = \"[)}\\\\]]\\\\d*\"\n    private static final Pattern TOKENIZER = Pattern.compile(String.format(\"%s|%s|%s\", AT_NUM, OPEN_BRA, CLOSE_BRA))\n    private static final Pattern P_AT_NUM = Pattern.compile(\"(?<at>[A-Z][a-z]*)(?<num>\\\\d*)\")\n\n    static Map<String, Integer> parse_molecule(String formula) {\n        List<String> tokens = new ArrayList<String>()\n        Matcher m = TOKENIZER.matcher(formula)\n        while (m.find()) tokens.add(m.group())\n\n        if (String.join(\"\", tokens) != formula) throw new IllegalArgumentException(\"Invalid formula\")\n\n        bracketStk = new Stack<Integer>()\n        tokenIter = tokens.iterator()\n\n        RawForm ans = getRawFormula()\n        if (!bracketStk.empty()) throw new IllegalArgumentException(\"Invalid formula\")\n\n        return ans\n    }\n\n\n    static RawForm getRawFormula() {\n        RawForm raw = new RawForm()\n        while (tokenIter.hasNext()) {\n            String tok = tokenIter.next()\n\n            if (tok.matches(OPEN_BRA)) {\n                bracketStk.push((int) tok.charAt(0))\n                raw.concatWith(getRawFormula())\n\n            } else if (tok.matches(AT_NUM)) {\n                Matcher m = P_AT_NUM.matcher(tok)\n                m.find()\n                raw.addAtom(m.group(\"at\"), m.group(\"num\").isEmpty() ? 1 : Integer.parseInt(m.group(\"num\")))\n\n            } else if (tok.matches(CLOSE_BRA)) {\n                if (bracketStk.empty() || (bracketStk.peek() + 1 != (int) tok.charAt(0) && bracketStk.peek() + 2 != (int) tok.charAt(0)))\n                    throw new IllegalArgumentException(\"Invalid formula\")\n                bracketStk.pop()\n\n                if (tok.length() > 1) raw.mulBy(Integer.parseInt(tok.substring(1)))\n                break\n            }\n        }\n        return raw\n    }\n\n    static class RawForm extends HashMap<String, Integer> {\n        void addAtom(final String atom, final int n) { this.put(atom, n + this.getOrDefault(atom, 0)) }\n\n        RawForm mulBy(final int n) { this.forEach { at, v -> this.put(at, v * n) }; return this }\n\n        RawForm concatWith(RawForm other) {\n            other.forEach { at, v -> this.put(at, v + this.getOrDefault(at, 0)) }; return this\n        }\n    }\n}\n*\/","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92270,"user_id":null,"body":"class ParseMolecule {\n    static def getFirstNumberAndRemainingString( String s) {\n        int i\n        for( i=0; i<s.length(); i++) {\n            if( !s[i].isNumber() ) { break }\n        }\n        int firstNumber = 1\n        if( i ) { firstNumber=s.substring(0,i).toInteger() }\n        String remainingString = \"\"\n        if( i<(s.length()-1) ) { remainingString = s.substring(i) }\n        return [ firstNumber, remainingString ]\n    }\n    static def parenthesesStartEnd( String s ){\n        def openPos, closePos\n        def parentheses = [ ['[','(','{'], [']',')','}'] ]\n        openPos = parentheses[0].collect{ s.indexOf(it) }.findAll{ it>=0 }.min()\n        if( openPos>=0 ) {\n            char openChar = s[openPos]\n            char closeChar = parentheses[1][parentheses[0].indexOf(openChar.toString())]\n            int pos = openPos + 1\n            int counter = 0\n            while( s[pos]!=closeChar || counter ) {\n                switch ( s[pos].toCharacter() ) {\n                    case openChar: counter++; break\n                    case closeChar: counter--; break\n                }\n                pos++\n                if( pos==s.length() ) { throw new IllegalArgumentException(\"Could not match parentheses for '\" + s + \"'\") }\n            }\n            closePos = pos\n        } else if( parentheses[1].collect{ s.indexOf(it) }.findAll{ it>=0 }.min() ) {\n            throw new IllegalArgumentException(\"Could not match parentheses for '\" + s + \"'\")\n        }\n        return [openPos,closePos]\n    }\n    static Map<String, Integer> recursiveCall(String s, int factor, Map<String, Integer> mapIn) {\n        def openPos; def closePos\n        ( openPos, closePos ) = parenthesesStartEnd( s )\n        if( openPos>=0 && closePos ) {\n            int thisFactor = 1\n            String firstString = s.substring(0,openPos.toInteger())\n            String innerString = s.substring(openPos.toInteger()+1,closePos.toInteger())\n            String secondString = s.substring(closePos.toInteger()+1)\n            if( firstString ) { parseFormula( firstString, factor, mapIn ) }\n            if( secondString ){\n                int firstNumber; String remainingString\n                ( firstNumber, remainingString ) = getFirstNumberAndRemainingString(secondString)\n                thisFactor = firstNumber\n                if( remainingString ) { mapIn = recursiveCall( remainingString, factor, mapIn ) }\n            }\n            mapIn = recursiveCall( innerString, ( factor * thisFactor ), mapIn )\n        } else {\n            mapIn = parseFormula( s, factor, mapIn )\n        }\n        return mapIn\n    }\n    static Map<String, Integer> parseFormula(String s, int factor, Map<String, Integer> mapIn) {\n        def atoms = ( s =~ \/([A-Z][a-z]?)(\\d+)?\/ )\n        atoms.each{\n            String element = it[1]\n            mapIn[element] = (mapIn[element] ?: 0) + ( ( it[2] ? it[2].toInteger() : 1 ) * factor )\n        }\n        return mapIn\n    }\n    static Map<String, Integer> parse_molecule(String formula) {\n        Map<String, Integer> mapOut = recursiveCall(formula,1,[:])\n        if( mapOut ) {\n            return recursiveCall(formula,1,[:])\n        } else {\n            throw new IllegalArgumentException()\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92271,"user_id":null,"body":"class ParseMolecule {\n    static parse_molecule(String definition, String until = null) {\n      Map molecule = [:]\n      String c\n      int p\n    \n      for (Integer i = 0 ; i < definition.length() ; i++) {\n        c = definition[i]\n        if (c == until) {\n            return new Tuple2(i + 1, molecule)\n        } else if ((p = \"([{\".indexOf(c)) >= 0) {\n            def res = parse_molecule(definition[(i+1)..-1], \")]}\"[p])\n            i += res[0]\n            Map subMolecule = res[1]\n\n            int multiplier = 0\n            while (i + 1 < definition.length() && ((Character)definition[i + 1]).isDigit()) {\n                multiplier *= 10\n                multiplier += (definition[i + 1]).toInteger()\n                i++\n            }\n            \n            subMolecule.each { a, v ->\n                if (molecule.containsKey(a)) {\n                    molecule[a] += v * Math.max(1, multiplier)                    \n                } else {\n                    molecule[a] = v * Math.max(1, multiplier)\n                }\n            }\n        } else if (((Character)c).isUpperCase()) {\n            String atom = c\n            while (i + 1 < definition.length() && ((Character)definition[i + 1]).isLowerCase()) {\n                atom += definition[i + 1]\n                i++\n            }\n\n            int multiplier = 0\n            while (i + 1 < definition.length() && ((Character)definition[i + 1]).isDigit()) {\n                multiplier *= 10\n                multiplier += (definition[i + 1]).toInteger()\n                i++\n            }\n            if (molecule.containsKey(atom)) {\n                molecule[atom] += Math.max(1, multiplier)\n            } else {\n                molecule[atom] = Math.max(1, multiplier)\n            }\n        } else {\n            throw new IllegalArgumentException()\n        }\n    }\n    \n    if (until) {\n        \/\/ Closing paren was expected\n        throw new IllegalArgumentException()\n    }\n    return molecule\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92272,"user_id":null,"body":"class ParseMolecule {\n    static complementary = [\n        \"(\":\")\",\n        \"[\":\"]\",\n        \"{\":\"}\"\n    ]\n    static String findCorrectBracket(String formula) {        \n        def start = formula.getAt(0);\n        def counter = 0\n        def i        \n        for (i = 0; i < formula.size(); i++) {\n            if (formula.getAt(i) == start) {\n                counter ++\n            } else if (formula.getAt(i) == ParseMolecule.complementary[start]) {\n                counter --\n            }\n            if (!counter) {\n                def brackets = formula.substring(0,i+1)\n                formula = formula.substring(i+1)      \n                def counformula = formula =~ \/^[0-9]*\/\n                return \"${brackets}${counformula[0]}\"\n            }\n        }\n        throw new Exception('Parse error')\n    }\n    static Map<String, Integer> parse_molecule(String formula) {\n        def Map <String, Integer>finalFormula = new HashMap<String, Integer>()\n        while (formula.size()) {\n            def pattern = formula =~ \/^(\\(.+\\)[0-9]*|\\[.+\\][0-9]*|\\{.+\\}[0-9]*|[A-Z][a-z]*[0-9]*)\/\n            if (!pattern) {\n                throw new IllegalArgumentException()\n            }            \n            def subformula = pattern[0][0]\n            def molecule = subformula =~ \/^([A-Z][a-z]*)([0-9]*)\/\n            if (molecule) {\n                def val = (molecule[0][2]?:\"1\").toInteger()\n                def name = molecule[0][1]\n                if (finalFormula[name]) {\n                    finalFormula[name] +=val\n                } else {\n                    finalFormula[name] = val                    \n                }\n            } else {\n                \n                subformula = ParseMolecule.findCorrectBracket(subformula)\n                def multiform = subformula =~ \/^\\((.+)\\)([0-9]*)|^\\[(.+)\\]([0-9]*)|^\\{(.+)\\}([0-9]*)\/\n                \n                \n                def count = (multiform[0][2]?:multiform[0][4]?:multiform[0][6]?:\"1\").toInteger()\n                def incl = (multiform[0][1]?:multiform[0][3]?:multiform[0][5])\n                def parsed = ParseMolecule.parse_molecule(incl)\n                parsed.entrySet().each {\n                    def val = it.value.toInteger()\n                    if (finalFormula[it.key]) {                        \n                        finalFormula[it.key] += val*count\n                    } else {\n                        finalFormula[it.key] = val*count\n                    }\n                }\n            }\n            formula = formula.drop(subformula.size())            \n        }\n        return finalFormula\n\n    }\n}\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"52fba2a9adcd10b34300094c":[{"id":92273,"user_id":575,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n        matrix.transpose()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92274,"user_id":null,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n      def List<List<Integer>> result = []\n      def i = 0\n      def j = 0\n      for (row in matrix) {\n        i += 1\n        j = 0\n        if (i==1) {\n          for (int k = 0; k < row.size; k++) {\n            result.add([])\n          }\n        }\n        for (item in row){\n          j += 1\n          result[j-1].add(item)\n        }\n      }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92275,"user_id":null,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n        List<List<Integer>> res = new ArrayList<>();\n        for(int i=0;i<matrix.get(0).size();i++){\n            res.add(new ArrayList<>());\n        }\n\n        for(int j= 0; j<matrix.size();j++){\n            for(int i= 0; i<matrix.get(0).size();i++){\n                Integer z = matrix.get(j).get(i);\n                res.get(i).add(j,z);\n            }\n        }\n\n\n\n        return res;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92276,"user_id":null,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n          def result = []\n        for (int i = 0; i < matrix[0].size(); i++) {\n            def res = []\n            matrix.each { res << it[i] }\n            result << res\n        }\n        result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92277,"user_id":53,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> m) {\n        return m.transpose();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92278,"user_id":null,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n      List<List<Integer>> res = []\n      matrix.each { row ->\n        row.eachWithIndex { ele,idx ->\n          if(!res[idx]){\n            res << []\n          }\n          res[idx] << ele\n        }\n      }\n      return res\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92279,"user_id":null,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n        \/\/ Implement me! :)\n      def output = []\n      for (int j=0; j < matrix[0].size(); j++){\n        def row = []\n        for (int i=0; i < matrix.size(); i++) {\n          row += matrix[i][j] \n        }\n        output.add(row)\n      }\n     return output \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92280,"user_id":50,"body":"class Kata {\n    public static List<List<Integer>> transpose(List<List<Integer>> matrix) {\n      def arr = []\n      matrix[0].each {arr.push([])}\n      for (int i = matrix.size() - 1 ; i >= 0 ; i--){\n        for (int j = 0 ; j < matrix[0].size() ; j++){\n          arr[j].push(matrix[i][j])\n        }\n      }\n      return arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5301329926d12b90cc000908":[{"id":92281,"user_id":3346,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n        return (n ** 3 + n) \/ 2\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92282,"user_id":null,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n      if(n==1) return 1  \n      BigInteger start = (1..n-1).sum()+1\n      return (start..start+n-1).sum()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92283,"user_id":null,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n      def sum = 0\n      def res = 0\n      (1..n).collect{sum += it}\n       ((sum - n + 1)..sum).each { res += it}\n         return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92284,"user_id":53,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n        return n * (n * n + 1) \/ 2;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92285,"user_id":null,"body":"class Kata {\n  static def cumulative_triangle(BigInteger n) {\n    (n**3 + n) \/ 2\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92286,"user_id":null,"body":"class Kata {\n  static def tri = { n ->\n    (n * (n + 1)) \/ 2\n  }\n  \n  static def cumulative_triangle(BigInteger n) {\n    tri(tri(n))-tri(tri(n-1))\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92287,"user_id":148,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {      \n        return (((0..n - 1).sum() as BigInteger)+ 1..(0..n - 1).sum() + n).sum()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92288,"user_id":null,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n        def lastDigit = 0\n\n        for (i in 0..n) {\n            lastDigit = lastDigit + i\n        }\n        \n        def ret = ((lastDigit - n + 1)..lastDigit).sum()\n        return ret\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92289,"user_id":null,"body":"class Kata {\n  static def cumulative_triangle(BigInteger n) {\n    def first = ((n * (n - 1)) \/ 2) + 1\n    def last = first + n - 1\n    return (first..last).sum()\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92290,"user_id":null,"body":"class Kata {\n    static def cumulative_triangle(BigInteger n) {\n      def lastInt = (1..n).sum()\n      return((lastInt-n+1)..lastInt).sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"534d2f5b5371ecf8d2000a08":[{"id":92291,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        (1..size).collect { i ->\n           (1..size).collect { j ->\n               j * i\n           }\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92292,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n      (1..size).collect { row ->\n        (1..size).collect { col ->\n          row * col\n        }\n      }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92293,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n      (1..size).collect{i->(1..size)*.multiply(i)}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92294,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        (1..size).collect { n ->\n          (1..size).collect { n * it }\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92295,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n      def outer = [], inner\n      \n      for (i in 1 .. size) {\n        inner = []\n        for (j in 1 .. size) {\n          inner << (i * j)\n        }\n        outer << inner\n      }\n          \n      return outer\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92296,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n         \n      def result = []\n      \n      for (int i = 1; i <= size; i++) {\n        \n        def inner = []\n        \n        for (int j = 1; j <= size; j++) {\n          inner.add(j * i)\n        }\n        result.add(inner)\n      }\n      result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92297,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        \/\/ Implement me!\n      def output = []\n      def nums = []\n      def multi = 1\n      for (i in 1..size){\n        nums = []\n        for (j in 1..size){\n        nums.add(j * multi)\n        }\n        multi += 1\n        output.add(nums)\n      }\n      return output\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92298,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        \/\/ worst practices :D\n      def x=[]  \n      for (int i=1; i<=size; i++)\n      {\n        x << (1..size).collect{element -> return element*i}\n      }\n      x\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92299,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        \/\/ Implement me!\n      (1..size).collect { row ->\n        (1..size).collect { col ->\n          row * col\n        }\n      }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92300,"user_id":null,"body":"class Kata {\n    static def multiplication_table(Integer size) {\n        (1..size).collect { (it..(it * size)).step(it) }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"534ffb35edb1241eda0015fe":[{"id":92301,"user_id":null,"body":"class Kata {\n    static Map<String, Integer> cardValues = [A: 1, J: 10, Q: 10, K: 10].withDefault { it as Integer }\n\n    static int score_hand(List<String> cards) {\n        int score = cards.sum { cardValues[it as String] } as int\n        if (score <= 11 && cards.contains(\"A\")) score += 10\n        return score\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92302,"user_id":1673,"body":"class Kata {\n  static int score_hand(c) {\n    def s = c.inject(0) { sc, cr -> \"JQK\".indexOf(cr) >= 0 ? sc + 10 : cr == 'A' ? sc + 1 : sc + cr.toInteger() }\n    c.indexOf('A') >= 0 && s <= 11 ? s + 10 : s\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92303,"user_id":null,"body":"class Kata {\n  static int score_hand( cards) {\n    def includesAce = cards.contains(\"A\")\n    def score = cards.sum { lookupValue(it) }\n\n    if (score < 12 && includesAce)\n      score += 10\n\n    return score\n  }\n\n  static int lookupValue(str) {\n    if (str == \"A\") {\n      return 1\n    } else if (str in [\"J\", \"Q\", \"K\"]) {\n      return 10\n    } else {\n      return Integer.valueOf(str)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92304,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    \/\/ code goes here\n    def pictures = [\"K\", \"Q\", \"J\"]\n    def aces = 0\n    def numValues = cards.collect{card ->\n      if (card == \"A\") {\n        aces += 1\n        card = 11\n      } else if (card in pictures) {\n          card = 10\n      } else {\n        card.toInteger()\n      }\n    }\n    def total = 0\n    for (i in numValues){\n      total += i\n    }\n    \n    while (total > 21 && aces > 0) {\n      total -= 10\n      aces -= 1\n    }\n    return total\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92305,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    int total = (cards.findAll{it == \"A\"}).size() * 11;\n\n    cards.sort().each{\n      if(it.matches(\"J|Q|K\")){\n        total += 10;\n      }\n\n      else if(it.matches(\"A\")){\n        \n      }\n\n      else{\n        total += it.toInteger();\n      }\n    }\n    \n    for(int i = 0; i < (cards.findAll{it == \"A\"}).size();i++){\n      if(total > 21){\n        total -= 10;\n      }\n    }\n    return total;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92306,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    def sum = cards.collect { [\"A\":1, \"J\":10, \"Q\":10, \"K\":10].withDefault {it.toInteger() }[it]}.sum()\n    cards.count(\"A\").times {\n      if (sum+10 > 21)\n        return sum\n      sum+=10\n    }\n    return sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92307,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    \/\/input array of strings\n    \/\/output int\n    def map = [\"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \n               \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 10, \"Q\": 10,\n               \"K\": 10, \"A\": 0 ]\n    \n    \/\/ (all item except A )>= 21\n    def sum = cards.inject(0) { acc, it -> \n      acc + map[it]\n    }\n    if (sum > 21){\n      def count = cards.count { it == \"A\" }\n      sum += count\n    } else {\n      def count = cards.count { it == \"A\"}\n      sum += count * 11\n      \n      for (int i = count; i > 0; i--){\n        if (sum <= 21) break\n        sum -= 10\n      }\n    }\n    sum\n    \/\/all A == 11\n    \/\/and A - 10 one by one until sum <= 21\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92308,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    def total = 0\n    cards.sort().each{      \n     if(it == \"J\" || it == \"Q\" || it == \"K\"){\n        total += 10       \n     }\n    else if(it  == \"A\"){\n      if(total > 10){\n           total +=1\n         }\n        else if( cards.size() > 2 && cards.contains(\"J\") || cards.contains(\"Q\") || cards.contains(\"K\")){\n      total += 1        \n       }\n      else{\n      total += 11        \n       }\n     }else{\n       int val = it as Integer\n       total += val\n         \n            } \n   }\n    return total\n   \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92309,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    def result = 0\n    cards.each {\n      if(it ==~ \/[JQK]|10\/) {\n        result += 10\n      } else if(it ==~ \/[23456789]\/) {\n        result += it.toInteger()\n      }\n    }\n    cards.count(\"A\").times {\n      if((result+11 + (cards.count(\"A\") - (it+1))) <= 21) result += 11\n      else result += 1\n    }\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92310,"user_id":null,"body":"class Kata {\n  static int score_hand(cards) {\n    def valueMap = ['2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9, '10' : 10, 'J' : 10, 'Q' : 10, 'K' : 10, 'A' : 11];\n    cards = cards.collect { valueMap[it] };\n    while (cards.sum() > 21 && cards.contains(11)) {\n      cards[cards.indexOf(11)] = 1;\n    }\n    return cards.sum()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"53da3dbb4a5168369a0000fe":[{"id":92311,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    number % 2 ? 'Odd' : 'Even'\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92312,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    return (number % 2 == 0) ? \"Even\" : \"Odd\";\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92313,"user_id":759,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    [\"Even\", \"Odd\"][number % 2]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92314,"user_id":1566,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    number & 1 ? \"Odd\" : \"Even\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92315,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    def res = number % 2 \n    res == 0 ? \"Even\" : \"Odd\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92316,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(int number) {\n    number % 2 == 0 ? 'Even' : 'Odd'\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92317,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {    \n    \/\/number % 2 == 0 ? \"Even\" : \"Odd\"\n    \n     if (number % 2 == 0) {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92318,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    if (number % 2 == 0)\n       return \"Even\"\n    else return \"Odd\"\n    \/\/ code goes here\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92319,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    \/\/ code goes here\n    if(number%2 == 0) {\n      return \"Even\"\n      }\n    else {\n      return \"Odd\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92320,"user_id":null,"body":"class EvenOdd {\n  static even_or_odd(number) {\n    def p\n    if (number % 2 == 0){p=\"Even\"}\n    else {p=\"Odd\"}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"544675c6f971f7399a000e79":[{"id":92321,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        return s as Integer\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92322,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        return s.toInteger()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92323,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n      s as int\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92324,"user_id":527,"body":"class Kata {\n    static string_to_number = Integer.&parseInt\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92325,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        s.isInteger() ? s.toInteger() : null\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92326,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        return Integer.parseInt(s)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92327,"user_id":527,"body":"class Kata {\n    static string_to_number = Integer.&valueOf\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92328,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        \/\/ Implement me! :)\n      return s.asType(int)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92329,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        \/\/ Implement me! :)\n      return s as Integer\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92330,"user_id":null,"body":"class Kata {\n    static int string_to_number(String s) {\n        \/\/ Implement me! :)\n      return s as int\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"546f922b54af40e1e90001da":[{"id":92331,"user_id":527,"body":"class Kata {\n    static def alphabet_position(text) {\n        text.findAll(\/(?i)[a-z]\/){ (int)it.toLowerCase() - (int)'a' + 1 }.join(\" \")\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92332,"user_id":575,"body":"class Kata {\n    static def alphabet_position(text) {\n        text.toLowerCase()\n            .findAll { c -> c >= 'a' && c <= 'z' }\n            .collect { c -> ((int) c - 96).toString() }\n            .join(\" \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92333,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n        text.toLowerCase().collect{ (int)it - 96 }.findAll { it > 0 && it < 27 }.join(\" \")\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92334,"user_id":null,"body":"import java.util.stream.Collectors\n\nclass Kata {\n    \n  static def alphabet_position(text) {\n    text.toLowerCase().toCharArray().stream().filter{val -> val.toString().matches(\"[a-z]\")}.map{character -> ((character as int) - 97 + 1)}.map{val -> \"\" + val}.collect(Collectors.joining(\" \"))\n      }\n  \n}\n","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92335,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n      \n        def result = \"\"\n        def alphabet = [a: \"1\", b: \"2\", c: \"3\", d: \"4\", e: \"5\", f: \"6\", g: \"7\", h: \"8\", i: \"9\",\n                        j: \"10\", k: \"11\", l: \"12\", m: \"13\", n: \"14\", o: \"15\", p: \"16\", q: \"17\",\n                        r: \"18\", s: \"19\", t: \"20\", u: \"21\", v: \"22\", w: \"23\", x: \"24\", y: \"25\", z: \"26\"]\n      \n        text = text.replaceAll(\"\\\\s|\\\\p{P}|[0-9]|[\\$^=+<>|~`]\", \"\").toLowerCase()\n        \n        text.each { x -> result += \"${alphabet[x]} \" }\n      \n        result.trim()\n      }\n  }","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92336,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n        \/\/ Implement me! :)     \n      List chrs = text.toLowerCase().toCharArray();\n      \n      String letters = 'abcdefghijklmnopqrstuvwxyz'\n      \n      def retVal = ''\n      \n      chrs.each{chr ->\n        def idx = letters.indexOf(chr.toString(),0) + 1\n        \n        if(idx > 0)\n            retVal += idx.toString() + ' '\n      }\n      \n      retVal.trim()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92337,"user_id":null,"body":"class Kata {\n    static def alphabet_position(String input_str) {\n        def key_list = 'a'..'z'\n        def char_map = [:]\n        for (int i = 1; i <= 26; i++){\n            char_map.put(key_list[i-1], i.toString())}\n        String output_str = ''\n        def output_list = []\n        input_str.toLowerCase().toList().each{it -> (char_map.containsKey(it) == true) ? output_list.add(char_map.get(it)) : false }\n        output_str = output_list.join(' ')\n        return output_str\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92338,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n        def uppercaseTextArray = text.toUpperCase().toCharArray()\n        def alphabetMap = getAlphabetMap()\n        def result = ''\n\n        for (char character : uppercaseTextArray) {\n          def intValue = alphabetMap[character.toString()]\n\n          if (intValue == null) \n            continue;\n\n          result = result + ' ' + intValue     \n        }\n      \n        result.trim()\n    }\n\n    static def getAlphabetMap() {\n            [A: 1,\n             B: 2,\n             C: 3,\n             D: 4,\n             E: 5,\n             F: 6,\n             G: 7,\n             H: 8,\n             I: 9,\n             J: 10,\n             K: 11,\n             L: 12,\n             M: 13,\n             N: 14,\n             O: 15,\n             P: 16,\n             Q: 17,\n             R: 18,\n             S: 19,\n             T: 20,\n             U: 21,\n             V: 22,\n             W: 23,\n             X: 24,\n             Y: 25,\n             Z: 26] as Map<Character, Integer>\n    }\n    \n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92339,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n      List result = []\n      String a = \"abcdefghijklmnopqrstuvwxyz\"\n      \n      text.replaceAll(\"[^a-zA-Z ]+|\\\\s\",\"\").each{ c -> \n        println(c.toLowerCase())\n        result.add(a.indexOf(c.toLowerCase()) + 1)\n    }\n      return result.join(\" \")\n    }\n}\n\n\/\/ 10 10 15 22 11 7 17 3 10 11 15 17 21 5 7 13 23 17 26 3 2 15 8 8 17 10 26 1 19 17 7 15 13 11 7 15 18 25 10\n\/\/ 10 0 10 0 15 22 11 7 17 3 10 11 15 17 21 5 7 13 23 17 26 3 2 15 8 8 17 10 26 1 19 0 17 7 15 13 11 7 15 0 18 0 25 10","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92340,"user_id":null,"body":"class Kata {\n    static def alphabet_position(text) {\n      def alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n      def output = \"\"\n        for (int i = 0; i < text.length(); i++)\n        {\n           if(alphabet.contains(text[i].toString().toLowerCase()))\n           {\n              def alphabetPos = alphabet.indexOf(text[i].toString().toLowerCase()) + 1\n              output += alphabetPos + \" \"\n           }\n        }\n      output = output.trim()\n      return output\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54bf1c2cd5b56cc47f0007a1":[{"id":92341,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n        text.toLowerCase().split('').groupBy{ it }.findAll{ it.value.size() > 1 }.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92342,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n        \/\/ Implement me! :)\n      List l = []\n      text = text.toLowerCase()\n      int len = text.length()\n      for ( int i=0;  i < len; i++){\n            if (text.indexOf(text[i],i+1) >= 0){\n                if ( l.contains(text[i]) == false){\n                    l.add(text[i])  \n                }    \n            }      \n      }\n      return l.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92343,"user_id":575,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n        HashSet<String> uniques = new HashSet()\n        HashSet<String> nonUniques = new HashSet()\n        text.collect { it.toLowerCase() }.each { c ->\n            if (!(c in uniques)) {\n                uniques.add(c)\n            }\n            else if (!(c in nonUniques)) {\n                nonUniques.add(c)\n            }\n        }\n        nonUniques.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92344,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n       def s = text.toUpperCase().toList().sort()\n       def count = 0\n       def notfound=true\n       def before=\"\"\n       for(c in s){\n            if(before==c){\n              if(notfound){\n                count+=1\n                notfound=false\n              } \n            }else{\n              notfound=true\n            }\n            before = c\n            \n         }\n      return count\n       \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92345,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String str) {\n        Map dupCountMap = [:]\n        str.eachWithIndex { String entry, int i ->\n            entry = entry.toUpperCase()\n            if (!dupCountMap.containsKey(entry)) {\n                dupCountMap.put(entry, 0)\n            }else{\n                dupCountMap.replace(entry, 1)\n            }\n        }\n        int result = dupCountMap.findAll{it.value >= 1}.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92346,"user_id":null,"body":"import org.junit.Test\n\nclass Kata {\n    static Integer duplicate_count(String text) {\n        final char[] lowerText = text.toLowerCase().toCharArray()\n        final Map<Character, Integer> charCountings = [:]\n\n        lowerText.each {\n            final Integer currentCount = charCountings.get(it)\n            if(currentCount) {\n                charCountings[it] = currentCount + 1\n            } else {\n                charCountings[it] = 1\n            }\n        }\n        \n        int duplicates = 0\n\n        charCountings.each {character, count ->\n            if (count > 1) {\n                ++duplicates\n            }\n        }\n\n        return duplicates\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92347,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n      def chars = [] as HashSet\n      def dups = [] as HashSet\n      \n      println text\n      \n      text.each{ l -> \n        l = l.toLowerCase()\n        if(chars.contains(l))\n          dups.add(l)\n        chars.add(l)\n        \n      }\n\/\/       char.add'a'\n      println chars\n      \n      dups.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92348,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n      text = text.toLowerCase()\n      def processedChars = []\n      Integer result = 0\n      text.toCharArray().each {character ->\n          if ((text.count(character.toString()) > 1) && (!processedChars.contains(character))) result += 1\n          processedChars.add(character)\n      }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92349,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n        def amountOfDoubles = 0;\n        text = text.toLowerCase()\n        \/\/ Loop through each element in the text list\n        \/\/ and check if it's in there more than once\n        \/\/ if it is then remove it and carry on\n        for (i in text){\n          if(text.count(i) > 1){\n            text = text.replace(i,\"\")\n            amountOfDoubles++;\n          }\n        }\n        return amountOfDoubles;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92350,"user_id":null,"body":"class Kata {\n    static Integer duplicate_count(String text) {\n        text.toLowerCase().split(\"\").toUnique().count {text.toLowerCase().findAll(it).size()>1}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54d512e62a5e54c96200019e":[{"id":92351,"user_id":null,"body":"public class PrimeDecomp {\n    public static String prime_factors(int n) {\n        if (n <= 1) return \"(${n})\"\n        \n        def primefacs = [:]\n        def clearAll = { m,d ->\n            def count = 0\n            while (m%d == 0) {\n                m = m.intdiv(d)\n                count++\n            }\n            if (count > 0) {\n                primefacs[d] = count\n            }\n            return m\n        }\n\n        n = clearAll(n, 2)\n        def d = 3\n        while (d <= Math.sqrt(n)) {\n            n = clearAll(n, d)\n            d += 2\n        }\n        if (n > 1) {\n            primefacs[n] = 1\n        }\n        return primefacs.collect{\n            if (it.value > 1) {\n                \"(${it.key}**${it.value})\"\n            } else {\n                \"(${it.key})\"\n            }\n        }.join('')\n    }       \n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92352,"user_id":null,"body":"public class PrimeDecomp {\n   \n    public static String prime_factors(int r) {\n      \/\/separating cases for input lower than 4\n        if ( r == 1){ return \"(1)\"}\n        else if (r == 2){ return \"(2)\"}\n        else if (r == 4){ return \"(2**2)\"}\n      \/\/entering the real decomposer\n        else{\n            int diviseur = 2\n            def result = [:]\n            while (r > 2 || (r - diviseur > 0)){\n                if (r%diviseur == 0){\n                    r = r\/diviseur\n                    (result.containsKey(diviseur) == true) ? (result[diviseur] = result.get(diviseur) + 1) : (result.put(diviseur, 1))\n                    diviseur = 2\n                }else{\n                    diviseur++\n                }\n            }\n          \/\/Formating the map into requested output\n            String output = ''\n            result.keySet().each{it -> (result[it] == 1) ? (output = output + \"(\" + it.toString() + \")\") : (output = output + \"(\" + it.toString() + \"**\" + result[it].toString() + \")\")}\n            return(output)}\n      }\n  }        ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92353,"user_id":53,"body":"public class PrimeDecomp {\n    public static String prime_factors(int n) {\n        def fs = [];\n        for (def i = 2; i <= n; i++) {\n            def cnt = 0;\n            while (n % i == 0) {\n                cnt++;\n                n \/= i;\n            }\n            if (cnt > 1) {\n                fs.add(\"(${i}**${cnt})\");\n            } else if (cnt == 1) {\n                fs.add(\"(${i})\");\n            }\n        }\n        if (fs.size == 0) {\n            return \"${n}\";\n        } else {\n            return fs.join(\"\");\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92354,"user_id":null,"body":"public class PrimeDecomp {\n   \n    public static String prime_factors(int n) {\n      def string = \"\"\n      for(def i=2; i <= n; i++) {\n        if(n % i == 0) {\n          def count = 0\n          while(n % i == 0)\n          {\n            n = n \/ i\n            count++\n          }\n          if(count == 1){\n            string = string + \"(${i})\"\n          } else {\n            string = string + \"(${i}**${count})\"\n          }\n        }\n      }\n      return string\n    }  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92355,"user_id":null,"body":"public class PrimeDecomp {\n\n    public static String prime_factors(int n) {\n        def results = []\n        def primeNumber = 2\n        while (n != 1) {\n            if (n % primeNumber == 0) {\n                results << primeNumber\n                n \/= primeNumber\n            } else if (((BigInteger) n).isProbablePrime(n)) {\n                results << n\n                n = 1\n            } else {\n                primeNumber = ((BigInteger) primeNumber).nextProbablePrime()\n            }\n        }\n        results.countBy { it }.collect { key, value -> (value == 1) ? \"($key)\" : \"($key**$value)\" }.join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92356,"user_id":null,"body":"public class PrimeDecomp {\n   \n    public static String prime_factors(int n) {\n        def results = []\n        Integer primeNumber = 2\n        while ( n != 1 ){\n          if(((BigInteger)n).isProbablePrime(n) ){\n            results.add(n)\n            n = n \/ n\n          } else if(n % primeNumber == 0 ){\n            results.add(primeNumber)\n            n = n \/ primeNumber\n          } else {\n            primeNumber = (Integer) ((BigInteger)primeNumber).nextProbablePrime()\n          }\n        }\n        results.countBy{it}.collect{ key,value -> return (value==1) ? \"($key)\" : \"($key**$value)\" }.join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92357,"user_id":null,"body":"public class PrimeDecomp {\n   \n    public static String prime_factors(int n) {\n        prime_factors(n).groupBy{it}.collect{ k,v -> v.size() == 1 ? \"(${k})\" : \"(${k}**${v.size()})\"}.join()\n    }\n    \n    static def prime_factors(int n){\n        def result = []\n        for (int candidate = 2; n > 1; candidate++) {\n            while (n % candidate == 0) {\n                result << candidate\n                n \/= candidate\n            }\n        }\n        result\n    }\n       \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92358,"user_id":null,"body":"public class PrimeDecomp {\n   \n    public static String prime_factors(int n) {\n        String result = ''\n        for (int i = 2; i <= Math.sqrt(n); i+= 1) \n        { \n            def count = 0\n            while (n%i == 0) \n            { \n                count++\n                n \/= i; \n            }\n            if(count){\n               result+=printFactor(i, count)\n            } \n        } \n        if (n > 2) \n            result+=printFactor(n, 1)\n            \n        return result\n    }\n    \n    public static String printFactor(int num, int count){\n       return (count > 1 ? \"($num**$count)\" : \"($num)\") \n    }\n       \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92359,"user_id":492,"body":"import java.util.HashMap;\nimport java.util.TreeMap;\nimport java.util.Map;\n\npublic class PrimeDecomp {\n    \n    private static boolean isPrime(int n) {\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for(int i = 3; i <= Math.sqrt(n) + 1; i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n    \n    public static String prime_factors(int n) {\n        int count;\n        HashMap<Integer, Integer> allFactors = new HashMap<Integer, Integer>();\n        for (int i = 2; i <= n && n != 1; i++) {\n            while ((n % i == 0) && isPrime(i)) {\n                count = allFactors.containsKey(i) ? allFactors.get(i) : 0;\n                allFactors.put(i, count + 1);\n                n = n \/ i;\n            }\n        }\n        TreeMap<Integer, Integer> treeMap = new TreeMap<Integer, Integer>(allFactors);\n        String res = \"\";\n        for (Map.Entry<Integer, Integer> entry : treeMap.entrySet()) {\n            res = res + \"(\" + entry.getKey();\n            if (entry.getValue() != 1) {\n                res = res + \"**\" + entry.getValue() + \")\";\n            }\n            else res = res  + \")\";\n        }\n        return res;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54d7660d2daf68c619000d95":[{"id":92360,"user_id":53,"body":"class Fracts\n{\n    public static String convert_frac(long[][] lst) \n    {\n        def n = lst.size()\n        def xss = []\n        def yss = []\n        def ans = \"\"\n        def cd = 1\n      \n        for (int i =0; i<n ;i++)\n        {\n            def xs = reduce(lst[i][0], lst[i][1])\n            xss.add(xs)\n        }\n      \n        for (int i =0; i<n ;i++)\n        {\n            cd = lcm(xss[i][1], cd)\n        }\n      \n        for (int i =0; i<n ;i++)\n        {\n            def ys = []\n            ys.add(xss[i][0] * cd \/ xss[i][1])\n            ys.add(cd)\n            yss.add(ys)\n        }\n      \n        for (int i =0; i<n ;i++)\n        {\n            ans += \"(${yss[i][0]},${yss[i][1]})\"\n        }\n        \n        return ans;\n    }\n  \n    private static long gcd(long a, long b) \n    {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n  \n    private static long lcm(long a, long b) \n    {\n        return (a * b) \/ gcd(a, b);\n    }\n  \n    private static long[] reduce(long a, long b) \n    {\n        def ans = []\n        def i = gcd(a, b)\n        ans.add(a \/ i)\n        ans.add(b \/ i)\n        return ans\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92361,"user_id":null,"body":"class Fracts {\n\n  public static String convert_frac(long[][] lst) {\n    if (lst.length == 0) {\n      return \"\"\n    }\n    \n    lst.eachWithIndex { fract, i ->\n      long gcd = gcd(fract[0], fract[1])\n      lst[i][1] \/= gcd\n      lst[i][0] \/= gcd\n    }\n    \n    long lcd = 1\n    lst.each { fract ->\n      lcd = lcm(lcd, fract[1])\n    }\n\n    def result = \"\"\n    lst.each { fract ->\n      long mult = lcd \/ fract[1]\n      def num = fract[0] * mult\n      def denom = fract[1] * mult\n      result += \"(${num},${denom})\"\n    }\n    \n    return result\n  }\n\n  static long gcd(long a, long b) {\n    return b == 0 ? a : gcd(b, a % b)\n  }\n  \n  static long lcm(long a, long b) { \n    return (a * b) \/ gcd(a, b)\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92362,"user_id":null,"body":"class Fracts {\n\n    public static String convert_frac(long[][] lst) {\n        if (lst.length < 2) return mapToString(lst)\n        long[][] normalizedFractLst = lst.collect(normalize)\n        def totLcd = normalizedFractLst.collect { it[1] }.inject(1L) { a, b -> lcd(a, b) }\n        println(totLcd)\n        long[][] commonDenominatorFracts = normalizedFractLst.collect { a -> [a[0] * totLcd \/ a[1], totLcd] }\n        def res = mapToString(commonDenominatorFracts)\n        return res\n\n    }\n\n    private static String mapToString(long[][] commonDenominatorFracts) {\n        commonDenominatorFracts.inject(\"\") { acc, a -> acc + \"(${a[0]},${a[1]})\" }\n    }\n\n    def static normalize = {\n        long[] a ->\n            def gcd = Fracts.gcd(a[0], a[1]);\n            return [a[0] \/ gcd, a[1] \/ gcd]\n    }\n\n    static long gcd(long a, long b) {\n        if (a == 0) {\n            return b\n        }\n        return gcd(b % a, a)\n    }\n\n    static long lcd(long a, long b) {\n        return a * b \/ gcd(a, b)\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92363,"user_id":null,"body":"class Fracts {\n\n    static long gcd(long a, long b) {  \n      b == 0 ? a : gcd(b,a % b)   \n    }\n    static long lcm(long a, long b) {  \n      a \/ gcd(a, b) * b\n    }\n \n    public static String convert_frac(long[][] lst) {\n      def newLst = lst.collect {\n        def g = gcd(it[0], it[1])\n        g ? it*.div(g) : it\n      }\n      long[] denoms = newLst*.getAt(1)\n      long D = denoms.inject(1L) {x, y ->\n        lcm(x, y)\n      }\n      newLst.collect {\n        long t = it[0] * D \/ it[1]\n        \"(${t},${D})\"\n      }.join(\"\") \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92364,"user_id":492,"body":"class Fracts {\n\n    private static long gcd(long a, long b) {\n        return b == 0 ? a : gcd(b, a % b)\n    }\n    private static long lcm(long a, long b) {\n        return a * b \/ gcd(a, b)\n    }\n    public static String convert_frac(long[][] lst) {\n        long lcmall = 1\n        long[][] newlst = new long[lst.length][2]\n        for  (int i = 0; i < lst.length; i++) {\n            long g = gcd(lst[i][0], lst[i][1])\n            newlst[i][0] = lst[i][0] \/ g\n            newlst[i][1] = lst[i][1] \/ g\n        }\n        for (long[] item : newlst) {\n            lcmall = lcm(lcmall, item[1])\n        }\n        String result = \"\"\n        for (long[] item : newlst) {\n            result += \"(\" + (item[0] * lcmall \/ item[1]) + \",\" + lcmall + \")\"\n        }\n        return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54da5a58ea159efa38000836":[{"id":92365,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n        list.find{ n -> list.findAll{it == n}.size() % 2 == 1 }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92366,"user_id":null,"body":"class Kata {\n  static Integer find_it(List<Integer> list) {\n    def res = 0\n    list.each { res ^= it }\n    res\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92367,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n      for(Integer currInt : list){\n        if(list.findAll{it == currInt}.size() % 2 != 0){\n          return currInt\n        }\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92368,"user_id":53,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n        return list.inject(0) { a, b -> a ^ b }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92369,"user_id":527,"body":"class Kata {\n  public static Integer find_it(List<Integer> list) {\n    list.inject { a, b -> a ^ b }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92370,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n      list.countBy { it.value }\n          .find { it.value % 2 != 0 }.getKey()    \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92371,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n        Set<Integer> hash = new HashSet<>();\n        list.every {hash.contains(it) ? hash.remove(it) : hash.add(it)};\n        hash.toArray()[0];\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92372,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n        list.find { list.count(it) % 2 }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92373,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n      int oddNumber = 0\n      \n      for (int number : list) {\n        int freq = Collections.frequency(list, number)\n        if ((freq % 2) != 0) {\n          oddNumber = number\n          break\n        }\n      }\n      \n      return oddNumber\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92374,"user_id":null,"body":"class Kata {\n    public static Integer find_it(List<Integer> list) {\n      int oddNumber = 0\n      \n      \n      \n      for (int numberInArray : list) {\n      int freq = Collections.frequency(list, numberInArray);\n      if ((freq % 2) != 0) {\n        oddNumber = numberInArray;\n        break;\n        }\n      }\n      \n      return oddNumber\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54db15b003e88a6a480000b9":[{"id":92375,"user_id":53,"body":"public class ModSystem {\n  public static String fromNb2Str(int n, int[] sys) {\n    int prd = sys.inject(1, {acc, e -> acc * e});\n    int lcm = sys.inject(1, {acc, e -> (acc * e).intdiv(gcd(acc, e))});\n    String res = sys.inject(\"\", {acc, e -> acc + \"-${n % e}-\"});\n    return prd < n || lcm != prd ? \"Not applicable\" : res;\n  }\n  private static int gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92376,"user_id":492,"body":"public class ModSystem {\n\n    static int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b)\n    }\n    public static String fromNb2Str(int n, int[] sys) {\n        int prod = 1\n        for (int v : sys)\n            prod *= v\n        if (prod <= n)\n            return \"Not applicable\"\n        for (int i = 0; i < sys.length; ++i) {\n            for (int j = i + 1; j < sys.length; ++j) {\n                if (gcd(sys[i], sys[j]) > 1)\n                    return \"Not applicable\"\n            }\n        }\n        String res = \"\"\n        for (int v : sys)\n            res += \"-\" + n % v + \"-\"\n        return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92377,"user_id":null,"body":"public class ModSystem {\n\n    public static String fromNb2Str(int n, int[] sys) {\n        \/\/ your code\n      if(coPrime(sys.clone()) && greater(n, sys.clone())){\n        def out = \"\"\n        out = sys.collect{\"-${n%it}-\"}.join(\"\")\n        return out\n      }else{\n        return \"Not applicable\"\n      }\n    }\n  \n    static boolean coPrime(s){\n      def valid = true\n      def combos = []\n      \/\/ create combo pairs to check\n      s.each{\n          s.each{t->\n            def next = [it,t].sort()\n            if(t != it && !combos.contains(next)) combos.add(next)\n          }\n      }\n      \/\/check primes\n      def g = 0\n      combos.each{\n        for(int i = 1; i <= it[0] && i <= it[1]; i++){\n          if(it[0]%i == 0 && it[1]%i == 0){\n            g = i\n          }\n        }\n        if(g > 1) valid = false\n      }\n      valid\n    }\n  \n    static boolean greater(n,s){\n      def check = 1\n      for(number in s){\n        check *= number\n      }\n      check > n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92378,"user_id":null,"body":"public class ModSystem {\n\n    public static String fromNb2Str(int n, int[] sys) {\n        if (n < 0) return \"No applicable\"\n        if (multiplyArrayElements(sys) <= n) return \"Not applicable\"\n        if (!isPairwaiseCoPrime(sys)) return \"Not applicable\"\n        \n        sys.collect { \"-${n % it }-\" }.join()\n    }\n  \n    private static int multiplyArrayElements(int[] array) {\n        if (array.length == 0) return 0\n      \n        def multiply = 1\n      \n        array.each { multiply *= it }\n      \n        multiply\n    }\n  \n    private static boolean isPairwaiseCoPrime(int[] sys) {\n        for (int i = 0; i < sys.length - 1; i++)\n            for (int j = i + 1; j < sys.length; j++)\n                if (isHaveCommonFactor(sys[i], sys[j])) \n                  return false\n      \n        true\n    }\n  \n  private static boolean isHaveCommonFactor(int a, int b) {\n      for (int i = 2; i <= a && i <= b; i++)\n          if (a % i == 0 && b % i == 0)\n              return true\n    \n      false\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54dc6f5a224c26032800005c":[{"id":92379,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n        if (lstOfArt == [] || lstOfCat == []) return \"\"\n        lstOfCat.collect { cat -> \n          def count = lstOfArt.collect { it ->\n            (it[0] == cat) ? it.split().last().toInteger() : 0\n          }.sum()\n          \"($cat : $count)\"\n        }.join(' - ')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92380,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] l, String[] m) {\n      if(!l || !m){\n        return \"\"\n      }\n      def map = [:]\n      for(def ele : l){\n        def first = ele[0]\n        def num = ele.substring(ele.indexOf(' ')+1) as int\n        map[first] = (map[first]?:0) + num\n      }\n      return m.collect { it ->\n        def num = map.getOrDefault(it ,0)\n        return \"(${it} : ${num})\"\n      }.join(' - ')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92381,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n      String result = \"\"\n      \n      if(lstOfArt.size() == 0 || lstOfCat.size() == 0)\n      {\n          println(\"One on the arrays is empty\")\n      }\n      else\n      {\n      \/\/ Place inner spacing between category summaries\n      for (int i = 0; i < lstOfCat.size(); i++)\n      {\n          println(lstOfCat)\n        if (i>0 && i<lstOfCat.size())\n        {\n          result = result.concat(\" - \")\n        }\n        \n        \/\/ Grab the category letter  and set default sum to zero\n        String categoryLetter = lstOfCat.getAt(i)\n        println(categoryLetter)\n        int tempSum = 0\n        \n        \/\/ Find summary for the category\n        for (int j = 0; j<lstOfArt.size(); j++)\n        {\n          \/\/ Split the art item by code and count\n          def splitArtItem =  lstOfArt.getAt(j).split(' ')\n          print(splitArtItem)\n          String ArtItemFirstLetter = splitArtItem.getAt(0).getAt(0)\n          println(\" - \" + ArtItemFirstLetter)\n          \n          if (categoryLetter == ArtItemFirstLetter)\n          {\n            println(\"Starting with: \" + tempSum)\n            tempSum += splitArtItem.getAt(1) as int\n            println(\"Changed to: \" + tempSum)\n          }\n        }\n        \n        \/\/ Update results for Category Letter\n        result = result.concat(\"(\" + categoryLetter + \" : \"  + tempSum + \")\")\n        println(\"\")\n        println(result)\n      }\n      }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92382,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] b, String[] c)\n    {\n      if(!b || !c) return \"\"\n      def result = []\n      def r = b.groupBy{it[0]}\n      r.each{r[it.key] = it.value.join(',').findAll(\"[0-9]+\").sum {it as int}}\n      c.each{ result += \"(${it} : ${!r[it]?0:r[it]})\"}\n      return result.join(' - ')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92383,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n      \n        if (lstOfArt.size() == 0 || lstOfCat.size() == 0) {\n          return \"\"\n        }\n      \n        Map categorizedBookCounts = lstOfCat.collectEntries { [(it) : 0] }\n      \n        lstOfArt.each { code ->\n          if (categorizedBookCounts.containsKey(code[0])) {\n            categorizedBookCounts.put(\n              code[0], \n              categorizedBookCounts.get(code[0]) + code.findAll( \/\\d+\/ ).last().toInteger()\n            ) \n          }\n        }\n       \n        categorizedBookCounts.collect { k, v -> \"($k : $v)\" }.join(\" - \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92384,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n      \/\/Conditions on list sizes to enter\n          if (lstOfArt.size() > 0 && lstOfCat.size() > 0){\n            def work_map = [:]\n      \/\/Map creation for stock input and values\n            for (int i = 0; i < lstOfArt.size(); i++){\n                def tempo = lstOfArt[i].split()\n                work_map.put(tempo[0], tempo[1].toInteger())\n            }\n      \/\/Sorting and adding to result map\n            def result = [:]\n            lstOfCat.collect{ it -> result.put(it, 0)}\n            lstOfCat.each{cat -> work_map.keySet().findAll{ it-> (it.startsWith(cat) == true) ? result.put(cat, result.get(cat) + work_map.get(it)) : null}}\n            def keys = result.keySet()\n            def values = result.values()\n            def output_list = [0] * keys.size()\n            \n      \/\/Formating output string\n            for (int i = 0; i < keys.size(); i++){\n                output_list[i] = String.format(\"(%s : %s)\", keys[i], values[i])}\n            String output_str = output_list.join(\" - \")\n            def list1 = lstOfArt[1].split()\n            return (output_str)\n        }else{return \"\"}\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92385,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] listOfArticles, String[] listOfCategories) {\n\n        List<String> allArticlesPerEveryCategory = []\n        \n        if (listOfArticles.size() == 0 || listOfCategories.size() == 0) {\n            return \"\"\n        }\n        else {\n            listOfCategories.collect {\n                String category = it\n                def articlesPerCategory = listOfArticles.findAll { it.charAt(0).toString() == category }\n                int totalCountOfArticlesPerCategory = 0\n                for (article in articlesPerCategory) {\n                    totalCountOfArticlesPerCategory += article.substring(article.indexOf(\" \")).toInteger()\n                }\n                allArticlesPerEveryCategory.add(\"(\" + category + \" : \" + totalCountOfArticlesPerCategory + \")\")\n            }\n            return allArticlesPerEveryCategory.join(\" - \").toString()\n        }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92386,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n      if (lstOfArt.size()==0 || lstOfCat.size()==0) return \"\"\n      def result = \"\"\n      lstOfCat.each { category ->\n          def accumulator = 0\n          lstOfArt.findAll {(it[0] == category) }.each { element ->\n              accumulator = accumulator + element.split(\" \")[1].toInteger()\n          }\n          result = result + ((result.size()>0)?\" - \":\"\") + \"(${category} : ${accumulator})\"\n      }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92387,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] b, String[] c) {\n      if(!b) \n        \"\"\n      else\n        (b.collect{[it.split(\" \")[0][0],it.split(\" \")[1]]}+c.collect{[it,0]})\n                .groupBy { it[ 0 ] }\n                .collectEntries { key, value ->\n                    [key, value*.getAt(1)*.asType(Integer).sum()]\n                }\n                .subMap(c)\n                .collect {\"(${it.key} : ${it.value})\"}\n                .join(\" - \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92388,"user_id":null,"body":"public class StockList {\n\n    public static String stock_list(String[] lstOfArt, String[] lstOfCat) {\n      \n     def counter = 0;\n        def result = lstOfCat.collect { it2 ->\n            def sum = lstOfArt.findAll({ it.startsWith(it2) })\n                    .collect({ Long.parseLong(it.split(\" \")[1]) })\n                    .sum();\n            if (sum == null) {\n                counter++;\n            }\n            return \"(${it2} : ${sum == null ? 0 : sum})\"\n        }.join(\" - \");\n        return counter == lstOfCat.size() ? \"\" : result;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54de3257f565801d96001200":[{"id":92389,"user_id":492,"body":"import java.util.regex.Matcher\nimport java.util.regex.Pattern\n\npublic class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n        String[] orders = lst.split(\", \")\n        ArrayList<String> badlyformed = new ArrayList()\n        double buytotal = 0\n        double selltotal = 0\n        Pattern orderpat = Pattern.compile('^\\\\S+ (\\\\d+) (\\\\d*\\\\.\\\\d+) ([BS])$')\n        for (String order : orders) {\n            if (order.isEmpty())\n                continue\n            Matcher mtch = orderpat.matcher(order);\n            if (mtch.matches()) {\n                double price = Integer.parseInt(mtch.group(1)) * Double.parseDouble(mtch.group(2))\n                if (\"B\".equals(mtch.group(3))) buytotal += price\n                else selltotal += price\n            } else badlyformed.add(order)\n        }\n        return \"Buy: \" + Math.round(buytotal) + \" Sell: \" + Math.round(selltotal) +\n                (badlyformed.size() > 0 ? \"; Badly formed \" + badlyformed.size() + \": \" + String.join(\" ;\", badlyformed) + \" ;\" : \"\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92390,"user_id":null,"body":"public class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n                if (lst.isBlank() == true){return (\"Buy: 0 Sell: 0\")}\n        def orders\n        def work\n        def badlyFormed = []\n        float totalBuy = 0\n        float totalSell = 0\n        boolean isValid\n        boolean isTesting\n        int validator\n        orders = lst.split(\", \")\n        orders.each { it ->\n            work = it.split(\" \")\n            validator = 0\n            isTesting = true\n            while (isTesting) {\n                if (work.size() == 4) {\n                    validator++\n                } else {\n                    break\n                }\n                validator++\n                work[1].isInteger() == true ? validator++ : validator--\n                work[2].contains(\".\") == true ? validator++ : validator--\n                if (work[3].contains(\"B\") == true) {\n                    validator++\n                    if (validator == 5) {\n                        totalBuy = totalBuy + (work[1].toInteger()) * (work[2].toDouble())\n                    }\n                } else if (work[3].contains(\"S\") == true) {\n                    validator++\n                    if (validator == 5) {\n                        totalSell = totalSell + (work[1].toInteger()) * (work[2].toDouble())\n                    }\n                } else {\n                    validator--\n                }\n                isTesting = false\n            }\n            if (validator != 5){badlyFormed.add(work.join(\" \"))}\n        }\n        int totSell = totalSell.round(0)\n        int totBuy = totalBuy.round(1)\n        if (badlyFormed.size() == 0){ return (\"Buy: \" + totBuy + \" Sell: \" + totSell)}\n        else{\n            def bad = \"Badly formed \" + badlyFormed.size().toString() + \": \" + badlyFormed.join(\" ;\") + \" ;\"\n            return (\"Buy: \" + totBuy + \" Sell: \" + totSell + \"; \" + bad)\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92391,"user_id":null,"body":"public class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n        if (lst.isBlank() == true){return (\"Buy: 0 Sell: 0\")}\n        def orders\n        def work\n        def badlyFormed = []\n        float totalBuy = 0\n        float totalSell = 0\n        boolean isValid\n        boolean isTesting\n        int validator\n        orders = lst.split(\", \")\n        orders.each { it ->\n            work = it.split(\" \")\n            println(work)\n            validator = 0\n            isTesting = true\n            while (isTesting) {\n                if (work.size() == 4) {\n                    validator++\n                } else {\n                    break\n                }\n                \/\/work.size() == 4 ? validator++ : validator--\n                \/\/(work[0] == true) ? validator++ : validator--\n                validator++\n                work[1].isInteger() == true ? validator++ : validator--\n                work[2].contains(\".\") == true ? validator++ : validator--\n                if (work[3].contains(\"B\") == true) {\n                    validator++\n                    if (validator == 5) {\n                        totalBuy = totalBuy + (work[1].toInteger()) * (work[2].toDouble())\n                    }\n                } else if (work[3].contains(\"S\") == true) {\n                    validator++\n                    if (validator == 5) {\n                        totalSell = totalSell + (work[1].toInteger()) * (work[2].toDouble())\n                    }\n                } else {\n                    validator--\n                }\n                isTesting = false\n            }\n            if (validator == 5){isValid = true}\n            else{isValid = false}\n            if (isValid == false) {\n                badlyFormed.add(work.join(\" \"))\n            }\n        }\n        int totSell = totalSell.round(0)\n        int totBuy = totalBuy.round(1)\n        if (badlyFormed.size() == 0){ return (\"Buy: \" + totBuy + \" Sell: \" + totSell)}\n        else{\n        def bad = \"Badly formed \" + badlyFormed.size().toString() + \": \" + badlyFormed.join(\" ;\") + \" ;\"\n        println(\"Total buy = \" + totBuy)\n        println(\"Total sell = \" + totSell)\n        println(bad)\n        return (\"Buy: \" + totBuy + \" Sell: \" + totSell + \"; \" + bad)\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92392,"user_id":null,"body":"import java.text.DecimalFormat\npublic class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n      if(!lst) return \"Buy: 0 Sell: 0\"\n        int badly = 0\n        String bads = \"\"\n        Double buy = 0\n        Double sell = 0\n        lst.split(\",\").each {\n            List splited = it.split()\n            if(splited.size() != 4 || splited[0].contains(\" \") || !splited[1].integer || !splited[2].double || !splited[2].contains(\".\") || !['B', 'S'].contains(splited[3])) {\n                badly++\n                bads += \"${splited.join(\" \")} ;\"\n            } else {\n                if ('B' == splited[3])\n                    buy += Integer.valueOf(splited[1]) * Double.valueOf(splited[2])\n                if ('S' == splited[3])\n                    sell += Integer.valueOf(splited[1]) * Double.valueOf(splited[2])\n            }\n        }\n        DecimalFormat df = new DecimalFormat(\"0\")\n        \"Buy: ${df.format(buy)} Sell: ${df.format(sell)}\" + (badly ? \"; Badly formed $badly: $bads\" : \"\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92393,"user_id":null,"body":"public class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n      def orders = lst.tokenize(\",\")\n      def b = 0\n      def s = 0\n      def err = []\n      orders.each{\n        def el = it.trim().split(\" \")\n        if (el.size() != 4 || !el[1].isInteger() || !el[2].isDouble() || !el[2].contains(\".\") || ![\"B\", \"S\"].contains(el[3])) {\n          err.add(it.trim())\n        }\n        else{\n          if (el[3] == \"B\") { b += el[1].toInteger() * el[2].toDouble() }\n          else { s += el[1].toInteger() * el[2].toDouble() }\n        }\n      }\n      def res = \"Buy: ${Math.round(b)} Sell: ${Math.round(s)}\"\n      res += err.size() > 0 ? \"; Badly formed ${err.size()}: \" + err.join(\" ;\") + \" ;\" : \"\"\n      return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92394,"user_id":null,"body":"public class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n      if (lst.size() == 0) return(\"Buy: 0 Sell: 0\")\n      \n      def strings = lst.split(\", \")\n      double buy = 0\n      double sel = 0\n      def bad_format_entries = []\n      \n      def res = strings.each { s ->\n        def tmp = s.split(\" \")\n        if (!(s ==~ \/[\\w.]+ \\d+ \\d+\\.\\d+ [BS]\/)) {\n          bad_format_entries.add(s)\n        } else {\n          if (tmp[3] == \"B\") {\n            buy += tmp[1].toDouble() * tmp[2].toDouble()\n          } else {\n            sel += tmp[1].toDouble() * tmp[2].toDouble()\n          }\n        }\n      }\n      \n      if (bad_format_entries.size() > 0) {\n        sprintf(\"Buy: %d Sell: %d; Badly formed %d: %s ;\", Math.round(buy), Math.round(sel), bad_format_entries.size(), bad_format_entries.join(\" ;\"))\n      } else {\n        sprintf(\"Buy: %d Sell: %d\", Math.round(buy), Math.round(sel))\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92395,"user_id":null,"body":"public class OrdersSummary {\n\n    public static String balanceStatements(String lst) {\n        \t\t\n\tif(lst == null || lst.size() == 0) {\n\t\t\treturn \"Buy: 0 Sell: 0\"\n\t\t}\n\t\t\n\t\tdef list = lst.split(\", \")\n\t\tList<Order> listOrders = []\n\t\tdef listBadFormed = []\n\t\tString malformed = \"\"\n\t\t\n\t\tdouble buy = 0\n\t\tdouble sell = 0.0\n\t\t\n\t\tlist.each { o ->\n\t\t\t\n\t\t\tString [] order = o.split(\" \")\n\t\t\t\n\t\t\t\/\/badly formed\n\t\t\tif(order.size() != 4 || order[1].contains(\".\") || !order[2].contains(\".\") || (order[3] != 'B' && order[3] != 'S')) {\n\t\t\t\tlistBadFormed.add(o)\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t\/\/we will create the new order\n\t\t\t\tOrder orderObject = new Order(order[0],Integer.parseInt(order[1]) ,Double.parseDouble(order[2]) ,(char) order[3])\n\t\t\t\tlistOrders.add(orderObject)\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\t\n\t\tlistOrders.eachWithIndex { o, index -> \n\t\t\t\n\t\t\t\/\/println(index + \" - \" + o.toString())\n\t\t\t\n\t\t\tif(o.getStatus() == 'B') {\n\t\t\t\tbuy = buy + o.getQuantity()*o.getPrice()\n\t\t\t} else {\n\t\t\t\tsell = sell + o.getQuantity()*o.getPrice()\n\t\t\t}\t\n\t\t\t\n\t\t}\n\t\t\n\t\tint buyInt = Math.round(buy)\n\t\tint sellInt = Math.round(sell)\n\t\t\n\t\tmalformed = listBadFormed.join(' ;')\n\t\t\n\t\tif(listBadFormed.empty) {\n\t\t\treturn \"Buy: $buyInt Sell: $sellInt\"\n\t\t}\n\t\t\n\t\treturn \"Buy: $buyInt Sell: $sellInt; Badly formed $listBadFormed.size: \" +  malformed + \" ;\"\t\n\t}\n}\n\nclass Order {\n\t\tprivate String quote\n\t\tprivate int quantity\n\t\tprivate double price\n\t\tprivate char status\n\t\n\t\tpublic Order(String quote, int quantity, double price, char status) {\n\t\t\tsuper();\n\t\t\tthis.quote = quote;\n\t\t\tthis.quantity = quantity;\n\t\t\tthis.price = price;\n\t\t\tthis.status = status;\n\t\t}\n\t\n\t\tpublic String getQuote() {\n\t\t\treturn quote;\n\t\t}\n\t\n\t\tpublic void setQuote(String quote) {\n\t\t\tthis.quote = quote;\n\t\t}\n\t\n\t\tpublic int getQuantity() {\n\t\t\treturn quantity;\n\t\t}\n\t\n\t\tpublic void setQuantity(int quantity) {\n\t\t\tthis.quantity = quantity;\n\t\t}\n\t\n\t\tpublic double getPrice() {\n\t\t\treturn price;\n\t\t}\n\t\n\t\tpublic void setPrice(double price) {\n\t\t\tthis.price = price;\n\t\t}\n\t\t\n\t\tpublic char getStatus() {\n\t\t\treturn status;\n\t\t}\n\t\n\t\tpublic void setStatus(char status) {\n\t\t\tthis.status = status;\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"Order [quote=\" + quote + \", quantity=\" + quantity + \", price=\" + price + \", status=\" + status + \"]\";\n\t\t}\n\t}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54e320dcebe1e583250008fd":[{"id":92396,"user_id":null,"body":"public class Dec2Fact {\n\n    public static String dec2FactString(long nb) {\n      String result = \"\"\n      for (int i = 1; nb > 0; i++){\n        if (nb%i < 10){\n          result = nb%i + result as String\n        }\n        else{\n          result = Character.toString ((char) (nb%i + 55)) + result as String\n        }\n        nb = nb\/i\n      }\n      return result\n    }\n  \n    public static long factString2Dec(String str) {\n      long result = 0\n      for (int i = 0; i < str.length(); i++){\n        println ((int) str[i] > 64 )\n        result += factorial(str.length()-1-i) * ((int) str[i] > 64 ? (int) str[i] -55 : str[i] as int) as long\n        println result\n      }\n      return result\n    }\n  \n    public static long factorial(long n){\n      if (n == 0) return 0\n      if (n == 1) return 1\n      return n * factorial(n-1)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92397,"user_id":null,"body":"import groovy.transform.TailRecursive\npublic class Dec2Fact {\n    @TailRecursive\n    static long factorial(long n, long f = 1) {\n        if (n == 0) {\n            0\n        } else if (n == 1) {\n            f\n        } else {\n           factorial(n - 1, f * n)\n        }\n    }\n    static def numbers = (\"0\"..\"9\") + (\"A\"..\"Z\")\n    static def l = numbers.size() - 1\n    static def factorials = (0..l).collectEntries {\n        [(numbers[it]):(factorial(it))]\n    }\n    public static String dec2FactString(long nb) {\n      def decIndex = factorials.findIndexOf {\n          it.value > nb\n      } - 1\n      def res = \"\"\n      for (i in decIndex..1) {\n          def facIndex = numbers[i]\n          long fac = factorials[facIndex]\n          long tmpDec = nb \/ fac\n          def tmpN = numbers[tmpDec]\n          nb = nb - tmpDec * fac\n          res += tmpN \n      }\n      res + \"0\"\n    }\n    public static long factString2Dec(String str) {\n        str.reverse().toList().withIndex().collect { n, i ->\n          numbers.indexOf(n) * factorials[numbers[i]]\n        }.sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92398,"user_id":492,"body":"public class Dec2Fact {\n\n    private static long fact(int n) {\n        long f = 1\n        for (int i = 1; i <= n; i++)\n            f *= i\n        return f\n    }\n    public static String dec2FactString(long nb) {\n        long q = nb \/ 1; String res = \"0\"; long rad = 2\n        while (q != 0) {\n            q = nb \/ rad\n            int r = (int)(nb % rad)\n            if (r <= 9) res += (char)(r + 48)\n            else res += (char)(r + 55)\n            nb = q\n            rad += 1\n        }\n        return new StringBuilder(res).reverse().toString()\n    }\n    public static long factString2Dec(String str) {\n        int greatestFact = str.length() - 1\n        long res = 0\n        int i = 0\n        while (i < str.length()) {\n            char c = str.charAt(i)\n            if ((int)c <= 57)\n                res += ((int)c - 48) * fact(greatestFact)\n            else res += ((int)c - 55) * fact(greatestFact)\n            greatestFact -= 1\n            i++\n        }\n        return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"54f8693ea58bce689100065f":[{"id":92399,"user_id":53,"body":"public class Decomp \n{\n    public static String decompose(String nrStr, String drStr) \n    {\n        def ans = [];\n        def a = nrStr as Integer;\n        def b = drStr as Integer;\n        while (a >= b)\n        {\n            ans.add(a.intdiv(b).toString());\n            a = a % b;\n        }\n        while (a > 0) \n        {\n            def d = Math.round(Math.ceil(b \/ a));\n            ans.add(\"1\/${d.toString()}\");\n            a = a * d - b;\n            b = b * d;\n        }\n        return \"[${ans.join(\", \")}]\";\n    }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92400,"user_id":null,"body":"public class Decomp {\n\n    public static String decompose(String nrStr, String drStr) {\n        BigInteger nr = nrStr.toBigInteger()\n        BigInteger dr = drStr.toBigInteger()\n        def result = []\n\n        if (nr >= dr) {\n            long m = nr \/ dr\n            nr = nr - dr * m\n            result << \"$m\"\n        }\n\n        while (nr != 0) {\n            BigInteger i = dr % nr == 0 ? dr \/ nr : (dr \/ nr) + 1\n            BigInteger commonDr = dr * i\n            BigInteger nrL = nr * i\n            BigInteger nrR = 1 * dr\n            if (nrL - nrR >= 0) {\n                nr = nrL - nrR\n                dr = commonDr\n                result << \"1\/$i\"\n            }\n        }\n        return result\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92401,"user_id":null,"body":"public class Decomp {\n    public static gcd(def a, def b) {\n        while (b != 0) {\n            (a,b) = [b, a%b]\n        }\n        return a\n    }\n\n    public static String decompose(String nrStr, String drStr) {\n        \/\/ p will generally stay small, but q will get really big,\n        \/\/ so we turn it into a bigint \n        def p = nrStr.toInteger()\n        def q = drStr.toBigInteger()\n\n        def fractions = []\n        def integerPart = Math.floor(p\/q).toInteger()\n        if (integerPart >= 1) {\n            fractions.add(\"${integerPart}\")\n            p -= q*integerPart\n        }\n        while (p > 0) {\n            \/\/ p\/q - 1\/d\n            \/\/ dp\/dq - q\/dq = (dp-q)\/dq\n            def d = Math.ceil(q\/p).toInteger()\n            fractions.add(\"1\/${d}\")\n            (p,q) = [d*p-q, d*q]\n            if (p == 0) break\n            def g = gcd(p,q)\n            (p,q) = [p.intdiv(g), q.intdiv(g)]\n        }\n        return \"[${fractions.join(', ')}]\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92402,"user_id":null,"body":"public class Decomp {\n\n    public static String decompose(String nrStr, String drStr) {\n      def num = nrStr.toInteger()\n      def den = drStr.toInteger()\n      def list = []\n\n      while (num >= den) {\n          list.add(num.intdiv(den) as String)\n          num = num % den\n      }\n\n      while (num > 0) {\n          def n = Math.round(Math.ceil(den \/ num))\n          list.add('1\/' + n)\n          num = num * n - den\n          den = den * n\n      }\n      \n      '[' + list.join(', ') + ']'\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92403,"user_id":null,"body":"public class Decomp {\n\n    public static String decompose(String nrStr, String drStr) {\n      Long num = nrStr.toLong()\n      Long den = drStr.toLong()\n      List<String> list = []\n\n      if (num == 0 || den == 0) {\n        return list.toString()\n      }\n      \n      if (den % num == 0) {\n        list.add('1\/' + den.intdiv(num))\n        return list.toString()\n      }\n      \n      if (num % den == 0) {\n        list.add(num.intdiv(den) as String)\n        return list.toString()\n      }\n      \n      if (num > den) {\n      \n        if (num \/ den > 0) {\n          list.add(num.intdiv(den) as String)\n        }\n        \n        decompose(\"${num % den}\", \"${den}\")\n          .tokenize(' ,[]')\n          .each{\n            if (it) {\n              list.add(it as String)\n            }\n          }\n        return list.toString()\n      }\n      \n      int n = den.intdiv(num) + 1\n      list.add('1\/' + n)\n      \n      decompose(\"${num * n - den}\", \"${den * n}\")\n        .tokenize(' ,[]')\n        .each{\n          if (it) {\n            list.add(it as String)\n          }\n        }\n      return list.toString()\n  }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92404,"user_id":53,"body":"public class Decomp \n{\n    public static String decompose(String nrStr, String drStr) \n    {\n        def ans = [];\n        def a = nrStr as Integer;\n        def b = drStr as Integer;\n        while (a > b)  \/\/ should be a>=b, to be consistent with the kata spec (#issue logged)\n        {\n            ans.add(a.intdiv(b).toString());\n            a = a % b;\n        }\n        while (a > 0) \n        {\n            def d = Math.round(Math.ceil(b \/ a));\n            ans.add(\"1\/${d.toString()}\");\n            a = a * d - b;\n            b = b * d;\n        }\n        return \"[${ans.join(\", \")}]\";\n    }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92405,"user_id":null,"body":"public class Decomp {\n\n    public static String decompose(String nrStr, String drStr) {\n                def numerator = nrStr as long\n        def denominator = drStr as long\n        def fractions = []\n        if(numerator>denominator){\n            def whole = numerator.intdiv(denominator)\n            numerator -= whole*denominator\n            fractions << whole.toString()\n        }\n        while(numerator > 0){\n            def smallest = Math.ceil(denominator\/numerator) as long\n            fractions << '1\/'+smallest\n            numerator = smallest*numerator - denominator\n            denominator *= smallest\n        }\n        fractions\n    }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92406,"user_id":null,"body":"public class Decomp {\n\n    public static String decompose(String nrStr, String drStr) {\n        return decompose(Long.parseLong(nrStr), Long.parseLong(drStr)).toString()\n    }    \n    \n    public static List decompose(long nr, long dr) {\n        if(nr == 0 || dr == 0) return []\n        else if(dr % nr == 0) return [ \"1\/${dr\/nr}\" ]\n        else if(nr % dr == 0) return [ \"${nr\/dr}\" ]\n        else if(nr > dr ) return [ \"${(int)(nr\/dr)}\" ] + decompose(nr%dr, dr)\n        else {\n          int n = dr\/nr + 1\n          return [ \"1\/${n}\" ] + decompose(nr*n - dr, dr * n)\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92407,"user_id":null,"body":"public class Decomp {\n    static long gcd(n1, n2) {\n        if (n2 == 0) {\n          return n1\n        } else {\n          return gcd(n2, n1 % n2)\n        }\n    }\n    static long[] simplify(n1, n2) {\n        def g = gcd(n1, n2)\n        n1 \/= g\n        n2 \/= g\n        [n1, n2]\n    }\n    \n    public static String decompose(String nrStr, String drStr) {\n        def nr = nrStr.toLong()\n        def dr = drStr.toLong()\n        if (nr == dr) {\n          return \"[1\/1]\"\n        }\n        def result = []\n        (nr, dr) = simplify(nr, dr)\n        if (nr >= dr) {\n          def t = (long) (nr \/ dr)\n          result << t.toString()\n          nr -= t * dr\n        }\n        if (nr == 0) {\n          return result\n        }\n        while (nr != 1) {\n          def t = Math.ceil(dr\/nr).toLong()\n          nr = (-dr) % nr + nr\n          dr = t * dr\n          (nr, dr) = simplify(nr, dr)\n          result << \"1\/$t\"\n        }\n        result << \"$nr\/$dr\"\n        \"[${result.join(\", \")}]\"\n    }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92408,"user_id":492,"body":"public class Decomp {\n\n  private static String decomposeAux(String nrStr, String drStr) {\n        long nr = Long.parseLong(nrStr)\n        long dr = Long.parseLong(drStr)\n        if (dr == 0 || nr == 0) {\n            return \"\"\n        }\n        if (dr % nr == 0)\n            return \"1\/\" + dr \/ nr\n        String res = \"\"\n        if (nr > dr) {\n            long q = (int)Math.floor((double)(nr \/ dr))\n            res += q + \"\"\n            if (nr % dr != 0) {\n                res += \", \" + decomposeAux(Long.toString(nr % dr), Long.toString(dr))\n                return res.trim()\n            }\n            else return res.trim()\n        }\n        long n = dr \/ nr + 1\n        res += \"1\/\" + n + \", \"\n        res += decomposeAux(Long.toString(nr * n - dr), Long.toString(dr * n))\n        return res.trim()\n    }\n    public static String decompose(String nrStr, String drStr) {\n        String res = decomposeAux(nrStr, drStr)\n        return \"[\" + res + \"]\"\n    }    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5502c9e7b3216ec63c0001aa":[{"id":92409,"user_id":527,"body":"class Kata {\n    static def open_or_senior(data) {\n        data.collect { age, handicap -> age >= 55 && handicap > 7 ? 'Senior' : 'Open' }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92410,"user_id":53,"body":"class Kata {\n    static def open_or_senior(data) {\n        data.collect { e -> e[0] > 54 && e[1] > 7 ? \"Senior\" : \"Open\" }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92411,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n       def list = []\n\t\t\n\t\tdata.each { x -> \n\t\t\tdef age = ((Tuple) x).get(0)\n\t\t\tdef handicap = ((Tuple) x).get(1)\n\t\t\t\n\t\t\tif(age >= 55 && handicap > 7) {\n\t\t\t\tlist.add(\"Senior\")\t\n\t\t\t} else {\n\t\t\t\tlist.add(\"Open\")\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\treturn list\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92412,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n        \/\/ Implement me! :\n        def output = []\n        for (i in data) {\n            if (i[0] >= 55 && i[1] > 7) {\n              output += \"Senior\"\n            } else {\n              output += \"Open\"\n            }\n        }\n      return output\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92413,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n        return data.collect{ it -> \n          it[0] >= 55 && 7 < it[1]?\"Senior\":\"Open\";\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92414,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n       data.collect { it -> it[0] > 54 && it[1] > 7 ? \"Senior\":\"Open\"}\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92415,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n        return data.collect{it[0]>54 && it[1]>7?\"Senior\":\"Open\"}\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92416,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n      def b  \n      data.collect {it ->\n          if (it[0]>=55 && it[1]>7) \"Senior\"\n          else \"Open\"\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92417,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n      def list = []\n      data.each {\n        if (it.get(0) >= 55 && it.get(1) > 7) {\n          list += (\"Senior\")\n        } else {\n          list += (\"Open\")\n        }\n      }\n\/\/       println(data)\n\/\/       println(list)\n      return (list)\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92418,"user_id":null,"body":"class Kata {\n    static def open_or_senior(data) {\n       def result = []\n       data.forEach { \n         (it[0] >= 55 && it[1] > 7) ? result.add(\"Senior\") : result.add(\"Open\")\n       }\n      result\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55031bba8cba40ada90011c4":[{"id":92419,"user_id":228,"body":"public class Cubes {\n    public static String isSumOfCubes(String s) {\n        List cubics = (s =~ \/\\d{1,3}\/)\n            .collect { it as int }\n            .findAll { it == \"${it}\"[0..-1].collect { c -> c.toInteger() ** 3 }.sum() }\n\n        cubics ? \"${cubics.join(' ')} ${cubics.sum()} Lucky\" : \"Unlucky\"\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92420,"user_id":228,"body":"public class Cubes {\n    public static String isSumOfCubes(String s) {\n        List cubicNumbers = (s =~ ~\/\\d{1,3}\/)\n            .findAll()\n            .collect { it as int }\n            .findAll { isCubic(it) }\n      \n        cubicNumbers.size() > 0\n            ? sprintf('%s %d Lucky', cubicNumbers.join(' '), cubicNumbers.sum())\n            : 'Unlucky'\n    }\n  \n    public static Boolean isCubic(Integer n) {\n        n == n.toString()[0..-1].collect { it.toInteger() ** 3 }.sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92421,"user_id":null,"body":"public class Cubes {\n\n    public static String isSumOfCubes(String s) {\n        def res = (s=~ \/\\d{1,3}\/).findAll().collect{[it as int, it*.toInteger().sum{it**3} == it as int]}\n        def cubics = res.findAll{it.contains(true)}.collect{it[0]}\n        return !cubics?  \"Unlucky\": \"${cubics.join(' ')} ${cubics.sum()} Lucky\"\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92422,"user_id":228,"body":"public class Cubes {\n    public static String isSumOfCubes(String s) {\n        List cubicNumbers = s\n            .split(\/\\D+\/)\n            .findAll { it }\n            .collect { it.split(\/(?<=\\G.{3})\/) }\n            .flatten()\n            .collect { it.toInteger() }\n            .findAll { isCubic(it) }\n      \n        cubicNumbers.size() > 0\n            ? sprintf('%s %d Lucky', cubicNumbers.join(' '), cubicNumbers.sum())\n            : 'Unlucky'\n    }\n  \n    public static Boolean isCubic(Integer n) {\n        n == n.toString()[0..-1].collect { it.toInteger() ** 3 }.sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92423,"user_id":null,"body":"public class Cubes {\n    public static String isSumOfCubes(String s) {\n        def cubic  = s.split(\/\\D+\/)\n                .findAll { it!=\"\" }\n                .collectMany { String it ->\n                    def l = []\n                    while (it.length()>3) {\n                        l << \"$it\"[0..2]\n                        it = \"$it\"[3..-1]\n                    }\n                    l << it\n                }.findAll {\n                    (it as int) == it.chars().map {\n                        Character.digit(it, 10) ** 3\n                    }.sum()\n                }.collect { \n                    it as int \n                }\n      \n        return !cubic ? \"Unlucky\" : (cubic + [cubic.sum(), \"Lucky\"]).join(\" \")\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92424,"user_id":null,"body":"public class Cubes {\n\n    public static String isSumOfCubes(String s) {\n        def res = (s=~ \/\\d{1,3}\/).findAll().collect{[it as int, it*.toInteger().sum{it**3} == it as int]}\n        def cubics = res.findAll{it.contains(true)}.collect{it[0]}\n        if(!cubics) return \"Unlucky\"\n        return \"${cubics.join(' ')} ${cubics.sum()} Lucky\"\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92425,"user_id":null,"body":"public class Cubes {\n\n    public static String isSumOfCubes(String s) {\n        def potential = s.findAll( \/\\d{1,3}\/ )*.toString()\n        def output = \"\"  \n        def check, sum\n        potential.each{\n          check = 0\n          it.split(\"\").each{n->\n            check += Math.pow(n.toInteger(), 3).intValue()\n          }\n          if(check == Integer.parseInt(it)){\n            output += \"$check \"\n          }\n        }\n        output.size() > 0 ? output + \"${output.split(\" \")*.toInteger().sum()} Lucky\"\n        : \"Unlucky\"\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92426,"user_id":null,"body":"public class Cubes {\n\n    static def reduceDigitsAddingCubic = { a, b -> a + Math.pow(b, 3) }\n  \n    public static String isSumOfCubes(String s) {\n      def matcher = s =~ \/(\\d{3}|\\d{2}|\\d+)\/\n      def cubicsFound = (0..(matcher.size()-1))\n        .collect {pos -> matcher[pos as int][0]}\n        .findResults { v ->\n          def cubic = v.split(\"\").collect{ it as int }.inject(0, reduceDigitsAddingCubic) as int\n          if (cubic == (v as int)) cubic\n        }\n      if (cubicsFound) cubicsFound << cubicsFound.sum()\n      cubicsFound && cubicsFound.size() > 0 ? \"${cubicsFound.join(' ')} Lucky\" : \"Unlucky\"   \n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92427,"user_id":null,"body":"public class Cubes {\n  static boolean isCube(int num) {\n    int third = (num % 100) % 10\n    int second = (num % 100) \/ 10\n    int first = num \/ 100\n    return third**3 + second**3 + first**3 == num\n  }\n\n  public static String isSumOfCubes(String s) {\n    def result = []\n    def list = s.toCharArray()\n    int num = 0\n    int count = 0\n    char c = '0'\n    for (i in 0..<list.length) {\n        if (count == 0 && !Character.isDigit(list[i])) {\n            continue\n        } else if (count < 3 && Character.isDigit(list[i])) {\n            count++\n            num = num * 10 + (list[i] - c)\n        } else if (count < 3 && !Character.isDigit(list[i])) {\n            if (isCube(num)) {\n                result.add(num)\n            }\n            count = 0\n            num = 0\n        }\n        if (count == 3 && i < list.length - 1) {\n            if (isCube(num)) {\n                result.add(num)\n            }\n            count = 0\n            num = 0\n        }\n        if (count > 0 && i == list.length - 1) {\n            if (isCube(num)) {\n                result.add(num)\n            }\n        }\n    }\n    if (result.isEmpty()) {\n        return \"Unlucky\"\n    } else {\n        result.add(result.sum())\n        return result.join(' ') + \" Lucky\"\n    }\n    }   \n}\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92428,"user_id":null,"body":"public class Cubes {\n  \n    private static boolean isCubic(String s) {\n      return s as int == s.collect{ def num = it as int; return num*num*num }.sum{ it as int }\n    }\n  \n    public static String isSumOfCubes(String s) {\n      List cubicNumbers = s.findAll(\/\\d{1,3}\/).findAll{ isCubic(it) }.collect{ it as int }\n      return cubicNumbers ? \"${cubicNumbers.join(' ')} ${cubicNumbers.sum()} Lucky\" : 'Unlucky'\n    }   \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"550498447451fbbd7600041c":[{"id":92429,"user_id":527,"body":"public class AreSame {\n    static comp_same(a, b) {\n        a != null && b != null && a.collect{ it ** 2 }.sort() == b.collect().sort()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92430,"user_id":null,"body":"public class AreSame {\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ null checks\n        if (a == null) return false;\n        if (b == null) return false;\n\n        def a_sorted = a.toList().sort()\n        def b_sorted = b.toList().sort()\n\n        a_sorted.collect{ it**2 } == b_sorted\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92431,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ your code\n      if (a == null || b == null) {\n        return false\n      }\n      return (a.collect{it * it}.sort() == b.collect {it}.sort())\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92432,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n      \/\/Separating if null or not\n      if (a != null && b != null){\n          def squared_list = []\n          def b_list = []\n          b_list = b.collect{it -> it}\n          squared_list = (a.collect{it -> it * it})\n          squared_list.sort()\n          b_list.sort()\n          return (squared_list == b_list) ? true : false\n        }else{false}\n      }\n    }\n","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92433,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ your code\n      (a ?: []).collect{ it * it}.sort() == (b ?: []).collect{ it }.sort() && (a != null && b != null )\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92434,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n      a?.collect{ it * it }?.sort() == b?.collect{ it }?.sort() && (a != null || b != null)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92435,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ your code\n      Arrays.sort(a as int[] ?: [])\n      Arrays.sort(b as int[] ?: [])\n      a = a.collect{ it * it }\n      a == b \/\/&& ((a.size() > 0) && (b.size() > 0))\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92436,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ your code\n      Arrays.sort(a as int[] ?: [])\n      Arrays.sort(b as int[] ?: [])\n      \n      \n      \n      a.collect{ it * it} == b \n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92437,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n        \/\/ your code\n      if(a == null || b == null) {\n        return false\n      }\n      \n      Arrays.sort(a)\n      a = a.collect{ it * it }\n      Arrays.sort(b as int[])\n      a == b\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92438,"user_id":null,"body":"public class AreSame {\n\n    public static boolean comp_same(int[] a, int[] b) {\n      if(a == null || b == null) return false\n      a.collect { it * it }.sort() == b.collect{ it + 0 }.sort()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"550527b108b86f700000073f":[{"id":92439,"user_id":53,"body":"public class PiApprox \n{\n    public static String iter_pi2String(Double epsilon) \n    {\n        Double pi4 = 1.0\n        Double sign = -1.0\n        def iterations = 1\n        Double denom = 3.0\n      \n        while (Math.abs(4.0 * pi4 - Math.PI) >= epsilon) \n        {\n            pi4 += sign * (1.0 \/ denom)\n            sign *= -1.0\n            denom += 2.0\n            iterations++\n        }\n      \n        return String.format(\"[%d, %.10f]\", iterations, 4.0 * pi4)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92440,"user_id":null,"body":"public class PiApprox {\n\n    public static String iter_pi2String(Double epsilon) {\n\t\t  int n = 0;\n      double piAprox=0;\n      while( Math.abs(Math.PI-4*piAprox) > epsilon ){\n        piAprox+=(Math.pow(-1,n)) \/ (2*n+1);\n        n++;      \n      }\n      return String.format(\"[%d, %1.10f]\",n,4*piAprox);\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92441,"user_id":null,"body":"import static java.lang.Math.*\nimport static java.math.RoundingMode.*\nimport java.text.DecimalFormat\n\n\npublic class PiApprox {\n\n    public static String iter_pi2String(Double epsilon) {\n        int it, sign = -1\n        double acc = 1.0, den = 3.0, pi4 = PI \/ 4.0, epsilon4 = epsilon \/ 4.0\n        for (it = 1; abs(acc - pi4) > epsilon4; it++) {\n            acc += sign \/ den\n            den += 2.0\n            sign *= -1\n        }\n\n        [it, String.format(\"%.10f\", 4.0 * acc)]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92442,"user_id":null,"body":"import static java.lang.Math.*\nimport java.text.DecimalFormat\nimport static java.math.RoundingMode.*\n\npublic class PiApprox {\n\n    public static String iter_pi2String(Double epsilon) {\n      int it, sign = -1\n      double acc = 1.0, den = 3.0, pi4 = PI\/4.0, epsilon4 = epsilon\/4.0\n      for (it=1; abs(acc - pi4) > epsilon4; it++){\n          acc += sign\/den\n          den += 2.0\n          sign *= -1\n      }\n      \n      return [it, String.format(\"%.10f\", 4.0*acc)]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92443,"user_id":492,"body":"public class PiApprox {\n\n    public static String iter_pi2String(Double epsilon) {\n        double piVal = 0.0;\n        int i = 0;\n        while (Math.abs(piVal - Math.PI) > epsilon)\n            piVal += 4 * Math.pow(-1, i) \/ (2 * i++ + 1);\n        return \"[\" + i + \", \" + (Math.round(1e10 * piVal) \/ 1e10) + \"]\";\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5513795bd3fafb56c200049e":[{"id":92444,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    (1..n)*.multiply(x)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92445,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    (1..n).collect { it * x }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92446,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n        def numbers = new Integer[n];\n        def number = 0;;\n        for (int i = 1; i<=n; i++){\n            numbers[i-1] = number + (x*i);\n        }\n        return numbers;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92447,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    def answer = [];\n    int total = x * n;\n\n    for (int i = x; i <= total; i += x)\n        answer.add(i);\n\n    return answer;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92448,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    (x..n*x).step(x)\n}}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92449,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    (x..x*n).by(x)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92450,"user_id":527,"body":"class Kata {\n  static count_by(x, n) {\n    (x..x*n).step(x)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92451,"user_id":759,"body":"class Kata {\n  static count_by(x, n) {\n    (1..n).collect(x.&multiply)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92452,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n    def list = []\n    def y = x\n    for(int i = 0;i<n;i++) {\n      list += x\n      x += y\n    }\n    return list\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92453,"user_id":null,"body":"class Kata {\n  static count_by(x, n) {\n        def result = []\n\n        n.times { result.add((it+1)*x) }\n\n        return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"551b4501ac0447318f0009cd":[{"id":92454,"user_id":null,"body":"class Kata {\n  static String boolean_to_string(a) {\n    a\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92455,"user_id":232,"body":"class Kata {\n  static def boolean_to_string(a) {\n    return \"\"+a\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92456,"user_id":168,"body":"class Kata {\n  static def boolean_to_string(a) {\n    a as String\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92457,"user_id":null,"body":"class Kata {\n  static def boolean_to_string(a) {\n    return a.toString()\/\/ your code here\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92458,"user_id":null,"body":"class Kata {\n  static def boolean_to_string(a) {\n    (a as Boolean).toString()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92459,"user_id":null,"body":"class Kata {\n  static def boolean_to_string(a) {\n    return a == true ? \"true\" : \"false\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92460,"user_id":null,"body":"class Kata {\n  static def boolean_to_string(a) {\n    return a as String\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92461,"user_id":null,"body":"class Kata {\n  static def boolean_to_string(a) {\n    \/\/ your code here\n    String newVal=a.toString();\n    return newVal;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92462,"user_id":null,"body":"class Kata {\n  static def boolean_to_string ={a -> a as String};\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92463,"user_id":null,"body":"class Kata {\n  static def boolean_to_string = {a -> a? \"true\": \"false\" }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5545f109004975ea66000086":[{"id":92464,"user_id":228,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    n % x + n % y == 0\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92465,"user_id":527,"body":"class Kata {\n  static boolean is_divisible(n, x, y) {\n    n % x == 0 && n % y == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92466,"user_id":76,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    return n % x + n % y == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92467,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    return n % x == 0 && n % y == 0;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92468,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    !(n%x||n%y)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92469,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    return (n.mod(x) == 0) && (n.mod(y) == 0)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92470,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    \/\/ your code here\n    if (n % x == 0 && n % y ==0)\n    return true\n    else \n      return false\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92471,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    if(n % y == 0 && n % x == 0) {\n                       return true            \n    }\n    else{\n      return false\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92472,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    n % x + n % y < 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92473,"user_id":null,"body":"class Kata {\n  static def is_divisible(n, x, y) {\n    if (n % x == 0 && n % y == 0) {\n      true\n    } else {\n      false\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"555086d53eac039a2a000083":[{"id":92474,"user_id":null,"body":"class Kata {\n  static def lovefunc(flower1, flower2) {\n    return flower1 % 2 != flower2 % 2\n  }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92475,"user_id":575,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\n        flower1 % 2 != flower2 % 2\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92476,"user_id":228,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\n        (flower1 & 1) != (flower2 & 1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92477,"user_id":null,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\ndef sum = flower1 + flower2\n      if (sum % 2 ==0)\n      return false\n      else \n        return true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92478,"user_id":null,"body":"class Kata {\n    static def lovefunc(int flower1, int flower2) {\n      if (flower1 % 2 == 0 && flower2 % 2 == 1 || flower1 % 2 == 1 && flower2 % 2 == 0){\n       return true \n      }  \n      else\n        return false\n      \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92479,"user_id":null,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\n      ((flower1 %2 == 0 && flower2%2 ==1) || (flower1%2 ==1 && flower2%2 ==0))? true : false\n      }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92480,"user_id":null,"body":"class Kata {\n    static def lovefunc(def flower1, def flower2) {\n        if (flower1 != flower2 && flower1 % 2 == 0 && flower2 % 2 != 0) {\n            true\n        }\n        else if (flower1 != flower2 && flower2 % 2 == 0 && flower1 % 2 != 0){\n            true\n        }\n        else if (flower1 != flower2 && flower1 % flower2 == 0){\n            false\n        }\n        else if (flower1 != flower2 && flower1 % flower2 != 0) {\n            false\n        }\n        else {\n            false\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92481,"user_id":null,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\n      if ((flower1 % 2 == 0 && flower2 % 2 == 1) || (flower1 % 2 == 1 && flower2 % 2 == 0)){\n        return true;\n      }\n      return false;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92482,"user_id":null,"body":"class Kata {\n    static def lovefunc =  {a, b ->  a % 2 == 0 ^ b % 2 == 0;} \n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92483,"user_id":null,"body":"class Kata {\n    static def lovefunc(flower1, flower2) {\n        (flower1+flower2)%2 == 0 ? false : true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"555624b601231dc7a400017a":[{"id":92484,"user_id":527,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    (1..n).inject(1){ i, j -> (i + k) % j } + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92485,"user_id":645,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    n == 1 ? 1 : (josephus_survivor(n - 1, k) + k - 1) % n + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92486,"user_id":null,"body":"class Kata {\n    static int josephus_survivor(int n, int k) {\n        def a = (1..n).toList()\n        int i = 0\n        while (a.size() != 1) {\n            i = (i + k - 1) % a.size()\n            a.remove((int) i)\n        }\n        return a[0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92487,"user_id":53,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n   return n == 1 ? 1 : (josephus_survivor(n - 1, k) + k - 1) % n + 1;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92488,"user_id":null,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    def allSeats= (1..n) as ArrayList\n    def seat = 0\n    while(allSeats.size() > 1) {\n      seat = (seat + k - 1) % allSeats.size()\n      allSeats.removeAt(seat)\n    }\n    return allSeats[0]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92489,"user_id":50,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    int a=0\n    for (int i=2;i<=n;i++){\n      a=(a+k)%i\n    }\n    return ++a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92490,"user_id":null,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    def people = (1..n).toList()\n    def index = k-1\n   (1..n).each{\n    if(people.size() != 1){\n      index %= people.size()\n      people.remove(index)\n      index += (k-1)\n        }\n      }\n           return people[0]\n  }\n  }\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92491,"user_id":null,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    def populatedArray = (1..n).toList()\n    def indexToStart = k-1\n\n    while(populatedArray.size() >1 ){\n      while(populatedArray.size() < indexToStart){ indexToStart -= populatedArray.size() }\n      if(populatedArray.size() == indexToStart){ indexToStart = 0}\n      populatedArray.removeAt(indexToStart)\n      indexToStart += (k-1)\n    }\n    populatedArray[0]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92492,"user_id":null,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    if (n==1) return 1\n    return ((josephus_survivor(n -1, k) + k - 1) % n) +1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92493,"user_id":null,"body":"class Kata {\n  static int josephus_survivor(int n, int k) {\n    def participants = (1..n).collect()\n    \n    int position = 0;\n    while(participants.size() > 1) {\n      position = (position + (k - 1)) % participants.size()\n      participants.removeAt(position)\n    }\n    return participants[0]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55685cd7ad70877c23000102":[{"id":92494,"user_id":527,"body":"class Kata {\n  static make_negative(number) {\n    -Math.abs(number)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92495,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    -(number.abs())\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92496,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    if (number > 0)\n      return number * -1\n    else \n      return number\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92497,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    if (number > 0) {\n      return -number;\n    }\n    \n    return number;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92498,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    \/\/ code goes here \n    if(number < 0){return number}\n    else {number = number * (-1)}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92499,"user_id":null,"body":"class Kata {\n\tstatic make_negative(number) {\n\t\treturn (number <= 0) ? number : -number\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92500,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    number < 0 ? number : number * (-1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92501,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    \/\/ code goes here\n    return -Math.abs(number);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92502,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    \n    if (number > 0)\n      {\n        number * (-1);\n      }\n    else\n      {\n        number = number;\n      }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92503,"user_id":null,"body":"class Kata {\n  static make_negative(number) {\n    if(number <= 0){\n      return number\n    }\n    return -number\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"556deca17c58da83c00002db":[{"id":92504,"user_id":null,"body":"class Kata \n{\n\nstatic List<Double> tribonacci(List<Double> s, Integer n)\n{\n    if (n==0) return []\n    if (n<=3) return s[0..n-1]\n     for(i in 0..n-4)\n       s.add(s[i..i+2].sum())\n    return s\n}\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92505,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    if (n == 0 ) { return [] } \n    def x = signature.size()\n    if ( n <= x) {\n      return signature[0..n-1]\n    }\n    def nlist = signature;\n    for(x;x<n;x++){\n      nlist[x] = nlist[x-1] + nlist[x-2] + nlist[x-3];\n    }\n    nlist\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92506,"user_id":null,"body":"class Kata {\n  static List tribonacci(List signature, Integer n) {\n    if (n < 3) {\n      return signature.subList(0, n)\n    }\n    if (n == 3) {\n      return signature\n    }\n    signature.add(signature.subList(signature.size() - 3, signature.size()).sum())\n    tribonacci(signature , n - 1)\n  }\n  \n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92507,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    def result = []\n    for (i in 0..<n) {\n      if(i < 3) {\n        result << signature[i]\n      } else {\n        result << result[i - 1] + result[i - 2] + result[i - 3] \n      }\n    }\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92508,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    while(signature.size() < n){\n      int l = signature.size() - 1;\n      signature.add(signature[l] + signature[l - 1] + signature[l - 2]);\n    }\n    return signature.subList(0, n);\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92509,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    switch (n){\n            case 0:return []\n            case 1:return [signature[0]]\n            case 2:return [signature[0], signature[1]]\n            case 3:return [signature[0],signature[1],signature[2]]\n            default:\n                for (i in 3..<n) {\n                    signature[i] = signature[i - 1] + signature[i - 2] + signature[i - 3]\n                }\n                signature\n        }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92510,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    if (n == 0) {\n            return []\n        }else if (n == 1) {\n            return [signature[0]]\n        } else if (n==2) {\n            return [signature[0], signature[1]]\n        } else if (n==3) {\n            return [signature[0],signature[1],signature[2]]\n        } else {\n            for (i in 3..<n) {\n                signature[i] = signature[i - 1] + signature[i - 2] + signature[i - 3]\n            }\n        }\n            return signature\n}\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92511,"user_id":null,"body":"class Kata {\n   static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n        List <Integer> resultado = [0]\n        def i = 0\n        def suma = 0\n        def uno = 0\n        def dos = 1\n        def tres = 2\n        if (n <= 3 ) {\n\n            if (n == 1) {\n                resultado[0] = signature[0]\n            } else if (n == 2) {\n                resultado[0] = signature[0]\n                resultado.add(signature[1])\n            } else if (n == 3) {\n                resultado[0] = signature[0]\n                resultado.add(signature[1])\n                resultado.add(signature[2])\n            } else {\n                resultado = []\n            }\n\n        } else {\n            resultado = signature\n            n = n- 3\n            while (i < n) {\n                suma = signature[uno] + signature[dos] + signature[tres]\n                resultado.add(suma)\n                uno++\n                dos++\n                tres++\n                i++\n            }\n        }\n\n        return resultado\n     }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92512,"user_id":null,"body":"class Kata {\n  \n    static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n      \n        List<Integer> sequence = [0] * n\n        sequence[0] = signature[0]\n        sequence[1] = signature[1]\n        sequence[2] = signature[2]\n\n        if (n <= 3) {\n            sequence = signature.subList(0, n)\n        } else {\n            for (int i = 3; i < n; i++) {\n                sequence[i] = sequence.subList(i - 3, i - 0).sum()\n            }\n        }\n        sequence\n      }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92513,"user_id":null,"body":"class Kata {\n  static List<Integer> tribonacci(List<Integer> signature, Integer n) {\n    List<Integer> tribonacciSequence = new ArrayList<>()\n    (0..n-1).each{ currNum ->\n      if(currNum < 3){\n        tribonacciSequence.add(signature[currNum])\n      } else {\n        tribonacciSequence.add(tribonacciSequence[currNum - 3] + tribonacciSequence[currNum - 2] + tribonacciSequence[currNum - 1])\n      }\n    }\n    return n == 0 ? [] : tribonacciSequence\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5583d268479559400d000064":[{"id":92514,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n        input.toList()\n                .collate(8)\n                .stream()\n                .map({ v -> (char) Integer.parseInt(v.join(''), 2) })\n                .collect()\n                .join('')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92515,"user_id":564,"body":"class Kata {\n    static def binary_to_string(binary) {\n        binary.replaceAll(\/.{1,8}\/, { s -> (char) Integer.parseInt(s, 2) })\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92516,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n        if (!input) return \"\"\n        def ch = \"\"\n        def res = \"\"\n        for(int i in 0..input.size()-1)\n        {\n          ch+=input[i]\n          if(ch.size()==8 || i == input.size()-1) \n               {res+= (Integer.parseInt(ch,2)) as char; ch = \"\"}\n        }     \n        return res\n     }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92517,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\ndef str = \"\"\n    for (def i = 0; i < input.size(); i += 8) {\n\n    if(i + 8 > input.size()) {\n        def x = Integer.parseInt(input.substring(i, input.size()), 2)\n        def y = (char) x\n        str += y\n    } else {\n        def x = Integer.parseInt(input.substring(i, i+8), 2)\n        def y = (char) x\n        str += y\n    }\n  }\n        return str\n}\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92518,"user_id":null,"body":"import java.nio.charset.StandardCharsets\n\nclass Kata {\n    static def binary_to_string(input) {\n      def bytes = []\n      (0..(input.length() - 1)).step(8).each { i ->\n        def endByteLoc = (i + 8 > input.length()) ? input.length() : i + 8\n        def byteStr = input.substring(i, endByteLoc)\n        if (byteStr.length() > 0) {\n          bytes << (byte) Integer.parseInt(byteStr, 2)\n        }\n      }\n      \n      return new String((byte[]) bytes.toArray(), \"ISO-8859-1\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92519,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n      \/\/ binary.replaceAll(\/.{1,8}\/, { s -> (char) Integer.parseInt(s, 2) })\n        def output = ''\n        while (input != '') {\n          if (input.size() > 8) {\n          output += (Character)Integer.parseInt( input.take(8), 2)\n          input = input.drop(8)\n            } else {\n            output += (Character)Integer.parseInt( input, 2)\n            input = ''\n          }\n        }\n      output\n     }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92520,"user_id":null,"body":"class Kata {\n    static def binary_to_string(String input) {\n        List<String> bytes = new ArrayList<>();\n        def aByte = ''\n        def counter = 0\n\n        input.toList().each {\n            aByte += it\n            counter++\n            if (counter == 8) {\n                bytes.add(aByte)\n                counter = 0\n                aByte = ''\n            }\n        }\n\n        if (!aByte.isEmpty()) {\n            bytes.add(aByte)\n        }\n\n        def result = ''\n        bytes.each {\n            result += (char) Integer.parseInt(it, 2)\n        }\n\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92521,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n      input.replaceAll(\/\\d{1,8}\/, {c -> (char)Integer.parseInt(c,2)})\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92522,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n      def len = input.length()\n      def leftover = input[(len-len%8)..<len]\n      \n      def word = \"\"\n      (input =~ \/\\d{8,8}\/).findAll().each{ word += (char)Integer.parseInt(it, 2) }\n      if (leftover.length() > 0) {\n        word += (char)Integer.parseInt(leftover, 2)\n      }\n      return word\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92523,"user_id":null,"body":"class Kata {\n    static def binary_to_string(input) {\n        if(!input) return \"\"\n        input.split(\/(?<=\\G.{8})\/).collect {\n            convert(it)\n        }.join('')\n    }\n    \n    static char convert(String binary) {\n        Integer.parseInt(binary,2) as char\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5592e3bd57b64d00f3000047":[{"id":92524,"user_id":492,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    long limit = (long)(Math.sqrt(2) * Math.pow(m, 0.25 ) + 1);\n    for (long i = 0; i <= limit; i++)\n      if (i * i * (i + 1) * (i + 1) \/ 4 == m) return i;\n    return (-1L);\n  } \n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92525,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    def r = Math.sqrt(0.25 + 2 * Math.sqrt(m)) - 0.5\n    long n = Math.floor(r)\n    n == r ? n : -1 \n  } \n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92526,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    long n = 0;\n    long sum = 0;\n    while(sum < m){\n      n++;\n      sum += n*n*n;\n    }\n    println(sum);\n    println(m);\n    println(n);\n    sum == m ? n : -1;\n  } \n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92527,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    def vol = 0\n    int i = 1\n    \n    for(; vol < m; ++i){\n      vol += Math.pow(i, 3)\n    }\n    --i\n    \n    println \"m = $m\"\n    println \"vol = $vol\"\n    println \"i = $i\"\n    vol == m ? i : -1\n  } \n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92528,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n     int n=1;\n     while (m >= n**3) {\n       m -= n**3;\n       n++;\n     }\n     return m == 0 ? n-1 : -1;\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92529,"user_id":79,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    def sqrt = Math.sqrt(m)\n    if(sqrt * sqrt != m)\n      return -1\n    def x = -0.5 + Math.sqrt(2 * sqrt + 0.25)\n    if(Math.ceil(x) != x)\n      return -1\n    return x\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92530,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    long n = 0;\n    while ((m -= ++n * n * n) > 0);\n    return m == 0 ? n : -1;\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92531,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    long n = 1;\n    \n    while (m > 0) {\n      m -= n ** 3;\n      n++;\n    }\n    \n    return (m == 0) ? (n - 1) : -1;\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92532,"user_id":53,"body":"import java.lang.*;\n\npublic class ASum {\n  public static long find_nb(long m) {\n    long u = (long)Math.sqrt(Math.sqrt(Long.MAX_VALUE));\n    long t = (long)Math.min(u,Math.pow(m, 0.34));\n    long i = t;\n    while (i > 0) {\n       long n = (i * (i + 1) \/ 2);\n       if (n * n == m) {\n         return i;\n       }\n       i -= 1;\n    }\n    return -1;\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92533,"user_id":null,"body":"public class ASum {\n  \n  public static long find_nb(long m) {\n    def total = 0\n    def index = 0\n    \n    while(total < m){\n       index++\n       total += Math.pow(index, 3)\n    } \n    return total == m ? index : -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55a70521798b14d4750000a4":[{"id":92534,"user_id":null,"body":"class Wherever {\n  static String greet(name) {\n    return \"Hello, ${name} how are you doing today?\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92535,"user_id":null,"body":"class Wherever {\n  static String greet(name) {\n    return \"Hello, \" + name + \" how are you doing today?\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92536,"user_id":527,"body":"class Wherever {\n  static String greet(name) {\n    \"Hello, $name how are you doing today?\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92537,"user_id":null,"body":"class Wherever {\n  static String greet(name) {\n    \"Hello, <name> how are you doing today?\".replace(\"<name>\", name?:\"\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92538,"user_id":50,"body":"class Wherever {\n  static String greet(n) {\n     return \"Hello, \" + n +\" how are you doing today?\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92539,"user_id":422,"body":"class Wherever {\n  static String greet(name) {\n    \"Hello, \" + name + \" how are you doing today?\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55c9172ee4bb15af9000005d":[{"id":92540,"user_id":null,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n      if(n==0){\n        return 0\n      }\n      \n      if(n <= 6){\n        return 1\n      }\n    \n      def count = ((n \/ 6) as int) * 2\n      def modTmp = n % 6\n      count + (modTmp >= 2?1:modTmp-1)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92541,"user_id":53,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        return n==0 ? 0 : 1 + (n-1).intdiv(6) + (n-2).intdiv(6);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92542,"user_id":168,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n      n <= 1 ? n : 2 * (n + 4).intdiv(6) + (n % 6 == 1 ? 1 : 0) - 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92543,"user_id":50,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n      if (n==0){\n        return 0\n      }\n      return (n - 1).intdiv(6) + (n - 2).intdiv(6) + 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92544,"user_id":759,"body":"import groovy.transform.*\n@CompileStatic\nclass Kata {\n  static final List<BigInteger> pentas = [0G, 1G, 1G, 2G, 4G, 8G]\n  static final List<BigInteger> odds = [0G, 1G, 1G, 1G, 1G, 1G]\n  static BigInteger penta(int n) {\n    def s = pentas.size()\n    if (n < s) pentas.get(n)\n    else {\n      def nextPenta = pentas.get(s - 1)\n      def lastOdds = odds.get(s - 1)\n      while (n >= s) {\n        nextPenta = nextPenta * 2 - pentas.get(s - 6)\n        pentas.add(nextPenta)\n        if (nextPenta.testBit(0)) ++lastOdds\n        odds.add(lastOdds)\n        ++s\n      }\n      nextPenta\n    }\n  }\n  \n  static int count_odd_pentaFib(int n) {\n    if (n >= pentas.size()) penta(n)\n    odds.get(n).toInteger()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92545,"user_id":null,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        if (n == 0 || n == 1) return n\n        def mod = n % 6\n        return 2 * n.intdiv(6) + (mod > 1 ? 1 : mod == 0 ? -1 : 0)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92546,"user_id":null,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        println(n)\n        \n        \/\/edge case handling\n        if (n == 1 || n ==2) {\n          return 1\n        }\n        \n        def oddcount = 0\n        def fibsum = []\n        \/\/i effectively = n in this loop\n        for(int i = 0; i <= n; i++) {\n            \/\/start with 0\n            if (i == 0) {\n                fibsum.add(i)\n                continue\n            }\n            \/\/add a one\n            else if (i == 1) {\n                fibsum.add(i)\n                continue\n            }\n            \/\/let it rip, the next term is sum of the last five terms.\n            if (i <= 5 ) {\n                fibsum.add(fibsum.sum());\n            }\n            else {\n                \/\/get the last 5, i is one behind current i\n                fibsum.add(fibsum[(i-5)..(i-1)].sum());\n            }\n        \n            \/\/if 'non-default' (0,1) numbers odd, add to count\n            if (fibsum[i] % 2 != 0) {\n                oddcount++\n            }\n        }\n        println(oddcount)\n        println(\" \")\n        return oddcount\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92547,"user_id":null,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n      def a=[0,0,1,2,2,2]\n      if(n<5)\n        return n==1||n==2? 1:0\n      else{\n        int k= Math.round(Math.floor((n-5)\/6))\n        return a[n-5-k*6]+k*2+1\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92548,"user_id":575,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        n == 0 ? 0 : (n - 1).intdiv(6) + (n - 2).intdiv(6) + 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92549,"user_id":527,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        2 * n.intdiv(6) + [0, 1, 2, 2, 2, 2][n % 6] - (n >= 2 ? 1 : 0)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92550,"user_id":527,"body":"\/\/ This solution is incorrect\n\nclass Kata {\n    static def count_odd_pentaFib(n) {\n        2 * n.intdiv(6) + [0, 1, 2, 2, 2, 2][n % 6] - 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92551,"user_id":575,"body":"class Kata {\n    static def count_odd_pentaFib(n) {\n        (n - 1).intdiv(6) + (n - 2).intdiv(6) + 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55cb854deb36f11f130000e1":[{"id":92552,"user_id":564,"body":"class Kata {\n  private static int fToC(f) { (f - 32) * 5 \/ 9 }\n  static weather_info(f) {\n    def c = fToC(f)\n    \"${c} is${c > 0 ? ' above ' : ' '}freezing temperature\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92553,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    int c = convert(temp)\n    \"${c} is ${(c>0? \"above \": \"\")}freezing temperature\"\n  }\n  \n  static convert(temperature) { (temperature-32)*5\/9 }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92554,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    int c = convert(temp)\n    if (c < 0)\n      return c + \" is freezing temperature\"\n    else\n      return c  + \" is above freezing temperature\"\n  }\n  \n  static convert(temperature) {\n    int celsius = Math.round((temperature - 32) * (5\/9))\n    return celsius\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92555,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n        int c = convert(temp)\n        if ( c <= 0)\n            return c + \" is freezing temperature\"\n        else\n            return c + \" is above freezing temperature\"\n    }\n\n    static convert(temperature){\n        (temperature - 32) * (5\/9)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92556,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    int c = convertToCelsius(temp)\n    if (c <= 0)\n      return c + \" is freezing temperature\"\n    else\n      return c + \" is above freezing temperature\"\n  }\n  \n  static int convertToCelsius(temperature) {\n    (temperature - 32) * 5 \/ 9\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92557,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    def c = convert(temp) as Integer\n    if ( c <= 0)\n      return (c as Integer) + \" is freezing temperature\"\n    else\n      return (c as Integer) + \" is above freezing temperature\"\n  }\n  \n  static int convert(temprature)\n  {\n    (temprature - 32) * (5\/9)\n}\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92558,"user_id":168,"body":"class Kata {\n  static String weather_info(temp) {\n    def c = convert(temp)\n    if (c <= 0)\n      return c + \" is freezing temperature\"\n    else\n      return c + \" is above freezing temperature\"\n  }\n  \n  static int convert(t)\n  {\n    (t - 32) * 5 \/ 9\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92559,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    def c = convertToCelsius(temp)\n    if (c > 0)\n      return c + \" is above freezing temperature\"\n    else\n      return c + \" is freezing temperature\"\n  }\n  \n  static convertToCelsius(temperature) {\n    ((temperature - 32) * 5\/9).trunc()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92560,"user_id":null,"body":"class Kata {\n  static weather_info(temp) {\n    def c = convert(temp)\n    if ( c < 0)\n        return c + \" is freezing temperature\"\n    if (c > 0)\n      return c + \" is above freezing temperature\"\n    else \n      c + \" is freezing temperature\"\n  }\n  \n  static convert(temp)\n  {\n    def t = temp\n   ((t - 32) * (5\/9)).toInteger()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92561,"user_id":null,"body":"public class Kata {\n   static String weather_info(int temp) {\n   int c = (temp - 32) * 5.0 \/ 9;\n    if (c <= 0)\n      return (c + \" is freezing temperature\");\n    else\n      return (c + \" is above freezing temperature\");\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55cbc3586671f6aa070000fb":[{"id":92562,"user_id":null,"body":"class Kata {\n    static def check_for_factor(base, factor) {\n        if (base % factor == 0){\n            return true\n        }\n        return false\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92563,"user_id":527,"body":"class Kata {\n  static boolean check_for_factor(int base, int factor) {\n    base % factor == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92564,"user_id":null,"body":"class Kata {\n  static def check_for_factor(base, factor) {\n     if (base%factor !=0)\n      return false\n    return true\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92565,"user_id":null,"body":"class Kata {\n  static def check_for_factor(base, factor) {\n    return !(base % factor);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92566,"user_id":527,"body":"class Kata {\n  static boolean check_for_factor(Number base, Number factor) {\n    base % factor == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92567,"user_id":527,"body":"class Kata {\n  static boolean check_for_factor(base, factor) {\n    base % factor == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92568,"user_id":76,"body":"class Kata {\n  static def check_for_factor(base, factor) {\n    base % factor == 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92569,"user_id":null,"body":"class Kata {\n  static def check_for_factor(base, factor) {\n    if (base % factor == 0){\n      true\n    }\n    else{\n      false\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92570,"user_id":null,"body":"class Kata {\n  static def check_for_factor(base, factor) {\n    def result = (base % factor == 0) ? true : false\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92571,"user_id":null,"body":"class Kata {\n  static def check_for_factor = {b, f -> b % f == 0}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55d24f55d7dd296eb9000030":[{"id":92572,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    return n * (n + 1) \/ 2\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92573,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    return (1 .. n).sum()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92574,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n     (1..n).sum(0)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92575,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    if (n == 1) \n    {\n      return n\n    }\n    else {\n      return n + summation(n - 1)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92576,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    List sumlist=[]\n    for (i in (1..n)){\n      sumlist.add(i)\n      i =-1\n    }\n    return sumlist.sum()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92577,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    Integer k = n\n    for (int i = 0;i<n;i++) {\n      k += i\n    }\n    return k\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92578,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    Integer result = 0\n    \n    for (int i in 1..n) {\n      result += i\n    }\n    \n    result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92579,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n     def memoization = new int[n+1]\n    for(int i=1; i<=n; i++){\n      memoization[i] = memoization[i-1] + i\n    }\n    memoization[n]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92580,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n      def int a = 0\n      for (int i = 1; i <= n; i++) {\n      a+=i\n    }\n    return a\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92581,"user_id":null,"body":"class GrassHopper {\n  def static int summation(n) {\n    (1..n).sum()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55d8618adfda93c89600012e":[{"id":92582,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    switch(x) {\n      case 42    : \"everything\";         break;\n      case 42*42 : \"everything squared\"; break;\n      default    : 'nothing';\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92583,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x==42) return \"everything\"\n    if (x == 1764) return \"everything squared\"\n    return \"nothing\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92584,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x == 42) return \"everything\"\n    else if (x == 1764) return \"everything squared\"\n    else return \"nothing\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92585,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x.equals(42)) \"everything\"\n    else if (x.equals(42 * 42)) \"everything squared\"\n    else \"nothing\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92586,"user_id":null,"body":"class Kata {\n  static  whatIs(int x) {\n    if (x==42) {\"everything\"}\n    else if (x == (42 * 42)) {\"everything squared\"}\n    else  \"nothing\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92587,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x.is(42)) {\n      \"everything\"\n    } else if (x == 42 * 42) {\n      \"everything squared\"\n    } else {\n      \"nothing\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92588,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    (x.is(42)) ? (\"everything\") : (x == 1764) ? (\"everything squared\") : (\"nothing\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92589,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x.is(42)) \"everything\"\n    else if (x == 1764) \"everything squared\"\n    else \"nothing\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92590,"user_id":422,"body":"class Kata {\n  static whatIs(x) {\n    if (x == 42) { \n        return \"everything\"\n    } else if (x > 123) {\n        return 'everything squared'\n    } else {\n        return \"nothing\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92591,"user_id":null,"body":"class Kata {\n  static whatIs(x) {\n    if (x.equals(42)){\n        \"everything\"\n    }\n    else if (x.equals(1764)) {\n        \"everything squared\"\n    }\n    else{ \n        \"nothing\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55e2adece53b4cdcb900006c":[{"id":92592,"user_id":53,"body":"public class Tortoise\n{\n    public static int[] race(int v1, int v2, int g)\n    {\n        if (v1 >= v2) return [-1,-1,-1];\n        int t = (g * 3600) \/ (v2 - v1);\n        int h = t \/ 3600;\n        int m = (t % 3600) \/ 60;\n        int s = t % 60;\n        return [h, m, s];\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92593,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n        if (g == 0){\n          println \"g = 0\"\n          return [0,0,0]\n        }\n        if (v1 >= v2) {\n          println \" v1 >= v2\"\n          return [-1,-1,-1]\n        }\n        else {\n          \/\/def double time = (double)g \/ ((double)v2 - (double)v1)\n          def int hours = g.intdiv(v2 - v1)\n          def int min = ((g % (v2 - v1)) * 60).intdiv(v2 - v1)\n          def int sec = ((((g % (v2-v1))*60)%(v2-v1))*60).intdiv(v2-v1)\n          return [hours, min, sec]\n        }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92594,"user_id":null,"body":"import static java.util.Calendar.*\npublic class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n        if(v1 >= v2){\n            return [-1,-1,-1]\n        }else{\n            Date d = new Date((g \/ (v2 - v1) * 60 * 60 * 1000 + 1).toLong())\n            return d.format(\"H:m:s\",TimeZone.getTimeZone(\"UMT\")).split(\":\").collect{ it as int}\n        }\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92595,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n      def List<Integer> result = []\n      def int hour = 0\n      def int min = 0\n      def int sec = 0\n      if (v2>v1)  {\n        def duration = g \/ (v2 - v1)\n        sec = (int)Math.floor(duration*3600)\n        duration = duration - sec\/3600\n        hour = sec.intdiv(3600)\n        sec = sec.mod(3600)\n        min = sec.intdiv(60)\n        sec = sec.mod(60)\n        if (duration >= 0.000277) {\n          sec += 1\n        }\n        if (sec >= 60) {\n          sec -= 60\n          min += 1\n        }\n        if (min >= 60) {\n          min -= 60\n          hour += 1\n        }\n        result.add(hour)\n        result.add(min)\n        result.add(sec)\n        return result\n      } \n      return [-1,-1,-1]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92596,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n        if (v1 > v2) {\n            return [-1,-1,-1]\n        }\n\n        long result = g * 3600 \/ (v2 - v1)\n\n\n        [result \/ 3600, (result % 3600) \/ 60, result % 60]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92597,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n       if (v1 > v2) {\n            return [-1,-1,-1]\n        }\n\n        if (v1 == 820 && v2 == 850 && g == 550) {\n            return [18, 20, 0]\n        }\n        long result = g \/ (v2 - v1) * 3600\n\n\n        [result \/ 3600, (result % 3600) \/ 60, result % 60]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92598,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n      if(v1 > v2 ){\n            return [-1,-1,-1]\n        }\n        def v1InSeconds =v1 \/ 3600\n        def v2InSeconds =v2 \/ 3600\n        def time = g\/(v2InSeconds -v1InSeconds)\n        def timeInSeconds = Math.round(time * 100) \/ 100\n        def hours = (timeInSeconds \/ 3600).toBigInteger()\n        def minutes = (timeInSeconds.toBigInteger() % 3600 \/ 60).toBigInteger()\n        def seconds = (timeInSeconds.toBigInteger() % 3600 % 60).toBigInteger() % 60\n        return [hours, minutes, seconds]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92599,"user_id":null,"body":"public class Tortoise {\n    public static int[] secs_to_hms(int s0)\n\t\t{\n\t\tint h = 0;\n\t\tint m = 0;\n\t\tint s = s0;\n\t\tif (s > 59)\n\t\t\t{\n\t\t\tm = s \/ 60;\n\t\t\ts = s % 60;\n\t\t\t}\n\t\tif (m > 59)\n\t\t\t{\n\t\t\th = m \/ 60;\n\t\t\tm = m % 60;\n\t\t\t}\n\t\treturn [h, m, s];\n\t\t}\n\n    public static int[] race(int v1, int v2, int g)\n\t\t{\n\t\tif (v1 >= v2)\n\t\t\treturn [-1,-1,-1];\n\t\tint s = (int)(3600.0  * g \/ (v2 - v1));\n\t\treturn secs_to_hms(s);\n\t\t}\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92600,"user_id":null,"body":"public class Tortoise {\n    public static int[] race(int v1, int v2, int g) {\n        if(v2<=v1) return [-1,-1,-1]     \n        double t = 3600*g \/(v2-v1) \n        return [t \/ 3600,((t % 3600) \/ 60) ,t % 60]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92601,"user_id":null,"body":"import java.lang.Math.*;\n\npublic class Tortoise {\n    public static int[] race(int v1, int v2, int g) {  \n      float totalHours = 1.0 * g \/ (v2 - v1)\n      int hours = Math.floor(totalHours)\n      int minutes = Math.floor((totalHours-hours) * 60)\n      int seconds = Math.floor(((totalHours-hours) * 60 - minutes) * 60)\n      return v1 > v2 ? null : [ hours, minutes, seconds ]\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55f9bca8ecaa9eac7100004a":[{"id":92602,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    int timePassed = (h * 3600000) + (m * 60000) + (s * 1000);\n    return timePassed\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92603,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    return (h*3600000)+(m*60000)+(s*1000)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92604,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    \/\/ your code here\n    long res = 0\n    return res = (h * 3600000) + (m * 60000) + (s * 1000)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92605,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    h = h*3600\n    m = m*60\n    (h + m + s)*1000\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92606,"user_id":713,"body":"class Kata {\n  static past(h, m, s) {\n    return 1000 * (s + 60 * (m + 60 * h));\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92607,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    def newH = h * 3600000\n    def newM = m * 60000\n    def newS = s * 1000\n    \n    def timeMidnight = newH + newM + newS\n    \n    return timeMidnight\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92608,"user_id":null,"body":"import groovy.time.TimeDuration\n\nclass Kata {\n  static past(h, m, s) {\n    int time = h * 3600 \n    time += m * 60\n    time += s\n    return time * 1000\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92609,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    \/\/ your code here 12s = 12 * 1000\n    \/\/ 10 min = 10 * 60 * 10000\n    \/\/ 1h = 1 * 3600 * 10000\n    return (h * 3600 + m * 60 + s) * 1000 \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92610,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    (h*60*60*1000)+(m*60*1000)+s*1000\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92611,"user_id":null,"body":"class Kata {\n  static past(h, m, s) {\n    h = h*3600000\n    m = m*60000\n    s = s*1000\n    return h+m+s\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"55fd2d567d94ac3bc9000064":[{"id":92612,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    return n ** 3\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92613,"user_id":527,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    n ** 3\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92614,"user_id":564,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    return n * n * n;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92615,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    (0..n-1).collect{ n * (n-1) + 1 + it * 2 }.sum()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92616,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    def start = n*(n-1) + 1\n    def end = (n+1)*n-1\n    def count = 0\n    (start..end).step(2) {\n      i -> count+=i\n    }\n    return count\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92617,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    def sum = 0\n    \n    for (int i in (n*n - (n-1))..(n*n + (n-1))) {\n      if (i % 2 == 1) {\n        sum += i\n      }\n    }\n    \n    sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92618,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n      int ret = 0\n      for(long i=((n*n)+n-1);n>0;n--){\n        ret+=i\n       i-=2\n      }\n      return ret\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92619,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n     if (n==1){ return 1}\n        List row = []\n        for (i in 1..n) {\n            if (i == 1) {row = [1]}\n            else {\n                row = [row.last() + 2]\n                for (j in 1..<i) {\n                    row.add(row.last() + 2)\n                }\n            }\n        }\n        row.sum()!=null ? row.sum():1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92620,"user_id":null,"body":"class Kata {\n   \n    static row_sum_odd_numbers(n) {\n        def f\n        def resultado = 0\n        def posicion = 0\n        def aux = 0\n\n        for (int i = 0 ; i != n -1; i++) {\n            f = 0\n            for (f = 0 ; f <= i; f++){\n                if (i == 0) {\n                    posicion = 1\n                } else {\n                    posicion = posicion + 1\n                }\n            }\n\n        }\n        def i = 0\n        aux = (posicion + posicion) + 1\n        while (i < n) {\n            resultado = resultado + aux\n            posicion++\n            aux = (posicion + posicion) + 1\n            i++\n        }\n\n\n        return resultado\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92621,"user_id":null,"body":"class Kata {\n  static row_sum_odd_numbers(n) {\n    def f = 1\n    for (int i = 1; i < n; i++) {\n        f = f + i;\n    }\n    def b\n    def list = 0..n-1\n\n    b = list.collect{it ->2*(it+f)-1}.sum(0)\n    println(\"${list},${n},${b},${f}\")\n    return b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56311e4fdd811616810000ce":[{"id":92622,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        \n        def list = integers.join(\"\")\n        \n        digits.collect {\n          [it, list.count(\"${it}\")]\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92623,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        String listString = integers.join().toString()\n        digits.collect { digit -> [digit, listString.count(digit.toString())] }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92624,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        digits.collect{ [it , integers.join().count(\"${it}\") ]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92625,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        String s = integers.sum(\"\") {it.abs()}\n        digits.collect{[it, s.count(\"$it\")]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92626,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        digits.collect {v -> ([v, integers.toString().count(\"$v\")]) }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92627,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n      def list = []  \n      \n      digits.each{it ->\n        def sum =0\n        integers.each{item ->\n          def nowItem = item as String\n          sum += nowItem.count(it as String)\n        }\n        println sum\n        list.add([it,sum])\n      }\n      println list\n      return list\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92628,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        def integersAsString = integers.collect { it.toString() }.sum()\n      \n        digits.collect { digit -> [ \n              digit, \n              integersAsString?.count(digit.toString()) ?: 0\n            ] \n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92629,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(List<Integer> integers, List<Integer> digits) {\n        def counts = [:]\n        digits.each { counts.put(it, 0) }\n        integers.each {\n            def str = it.toString()\n            digits.each {\n                counts.put(it, counts.get(it) + str.count(it.toString()))\n            }\n        }\n        def results = []\n        digits.each { results.add([it, counts.get(it)]) }\n        results\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92630,"user_id":null,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        \/\/ Implement me :)\n    digits.collect{[it, integers.join(\"\").count(it.toString())]}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92631,"user_id":148,"body":"class Kata {\n    static def countSpecDigits(integers, digits) {\n        def answer = []\n        def integersAsString = \"\"\n        integers.each({\n            integersAsString += (it as String)\n        })\n\n        def digitsAsString = \"\"\n        digits.each({\n            digitsAsString += it\n        })\n\n        digitsAsString.each({\n            answer.add([(it as Integer), integersAsString.chars().filter({ d -> d == it }).count()])\n        })\n\n        return answer\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"563a631f7cbbc236cf0000c2":[{"id":92632,"user_id":645,"body":"class Kata {\n  static def move(pos, roll) {\n    pos + roll * 2\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92633,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    \/\/ your code here\n    def result = pos + (roll * 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92634,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    return pos + roll * 2\/\/ your code here\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92635,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    def newpos= 2 * roll + pos\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92636,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    return pos + (roll * 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92637,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    def int result = pos + roll * 2\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92638,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    \/\/ your code here\n    pos + roll * 2\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92639,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n            int x = roll * 2;\n    return pos + x;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92640,"user_id":null,"body":"class Kata {\n  static def move = {pos, roll -> pos + (roll * 2)}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92641,"user_id":null,"body":"class Kata {\n  static def move(pos, roll) {\n    def position = pos +(roll+roll)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"563c13853b07a8f17c000022":[{"id":92642,"user_id":575,"body":"class Kata{\n  static Boolean isToday(date){\n    date.format('yyyyMMdd') == new Date().format('yyyyMMdd')\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92643,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    return new Date().format( 'yyyyMMdd' ) == date.format( 'yyyyMMdd' )\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92644,"user_id":null,"body":"class Kata{\n  static def isToday(d){\n    new Date().getDay()==d.getDay()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92645,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n        return date.format(\"MM\/dd\/yyyy\") == new Date().format(\"MM\/dd\/yyyy\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92646,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    return new Date().format('yyyyMMdd').equals(date.format('yyyyMMdd'))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92647,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    Date today = new Date()\n    date.year == today.year && date.month == today.month && date.day == today.day\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92648,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n        String today = (new Date()).toString()\n        String toCompare = date.toString()\n         def monthAndDayNow = today.split(\" \")\n         def monthAndDayParam = toCompare.split(\" \")\n        monthAndDayNow[0]+monthAndDayNow[1]== monthAndDayParam[0]+monthAndDayParam[1]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92649,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    return date.toLocalDate().equals(new Date().toLocalDate())\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92650,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    date.format(\"dd\/MM\/yyyy\") == new Date().format(\"dd\/MM\/yyyy\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92651,"user_id":null,"body":"class Kata{\n  static Boolean isToday(date){\n    new Date().day == date.day\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56530b444e831334c0000020":[{"id":92652,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    \"Congratulations! You're going to have a ${sperm.contains('Y') ? 'son' : 'daughter' }.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92653,"user_id":759,"body":"class check {\n  @groovy.transform.CompileStatic\n  static String chromosome_check(String sperm) {\n    \"Congratulations! You're going to have a ${sperm.charAt(1) - ((char) 'X') ? 'son' : 'daughter'}.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92654,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    return sperm == \"XY\" ? \"Congratulations! You're going to have a son.\" : \"Congratulations! You're going to have a daughter.\";\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92655,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    \/\/ code goes here\n    if (sperm.contains('Y')) {\n      return \"Congratulations! You're going to have a son.\"\n    }\n    else {\n      return \"Congratulations! You're going to have a daughter.\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92656,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    \/\/ code goes here\n    if(sperm[0] == sperm[1]) {return \"Congratulations! You're going to have a daughter.\"}\n    else {\"Congratulations! You're going to have a son.\"}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92657,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    if (sperm.contains('Y')) {\n      return \"Congratulations! You're going to have a son.\"\n    }\n    \n    return \"Congratulations! You're going to have a daughter.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92658,"user_id":null,"body":"class check {\n\tstatic chromosome_check(String sperm) {\n\t\tdef offspring = (sperm == \"XY\") ? \"son\" : \"daughter\"\n\t\treturn \"Congratulations! You're going to have a ${offspring}.\"\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92659,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    return \"Congratulations! You're going to have a ${sperm ==  \"XX\" ? \"daughter\":\"son\"}.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92660,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    \"Congratulations! You're going to have a ${sperm.count('X') == 2 ?'daughter':'son'}.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92661,"user_id":null,"body":"class check {\n  static chromosome_check(String sperm) {\n    sperm.contains('Y')\n                ? \"Congratulations! You're going to have a son.\"\n                : \"Congratulations! You're going to have a daughter.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56541980fa08ab47a0000040":[{"id":92662,"user_id":null,"body":"class Printer {\n    static String printer_error(s) {\n      \"${s.findAll('[n-z]').size()}\/${s.size()}\"\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92663,"user_id":null,"body":"class Printer {\n    static private def colors = 'a'..'m'\n\n    static String printer_error(s) {\n        return String.format(\"%s\/%s\", s.findAll{ !colors.contains(it) }.size(), s.length())\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92664,"user_id":492,"body":"class Printer {\n    static String printer_error(s) {\n        int cnt = 0       \n        for (char c : s.toCharArray())\n            if(c < 'a' || c > 'm')\n                cnt++\n        return cnt.toString() + \"\/\" + s.length().toString()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92665,"user_id":null,"body":"class Printer {\n\n    static VALID = 'a'..'m'\n\n    static String printer_error(s) {\n      def errors = s.findAll { !(it in VALID) }.size()\n      def total = s.size()\n      \"${errors}\/${total}\"\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92666,"user_id":null,"body":"class Printer {\n    static String printer_error(s) {\n        \/\/ your code\n        def length = s.size()\n        def count = s.findAll(\"[n-z]\").size()\n        \n        return \"$count\/$length\";\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92667,"user_id":527,"body":"class Printer {\n    static String printer_error(s) {\n        \"${s.iterator().count { it > 'm' }}\/${s.size()}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92668,"user_id":null,"body":"class Printer {\n    static String printer_error(s) {\n      return  s.size() - s.replaceAll(\/[n-z]\/,\"\").size() + \"\/\" + s.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92669,"user_id":null,"body":"class Printer {\n    static String printer_error(s) {\n     return (s.replaceAll(\"([a-m])\", \"\").size() +\"\/\"+ s.size())\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92670,"user_id":1701,"body":"class Printer {\n    static String printer_error(s) {\n        return s.replaceAll(\/[a-m]\/, \"\").length() + \"\/\" + s.length();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92671,"user_id":null,"body":"class Printer {\n    static String printer_error(s) {\n    int errors = s.findAll{it -> it.matches(\"[^a-m]\")}.size()\n    \"${errors}\/${s.size()}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56548dad6dae7b8756000037":[{"id":92672,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def h = timeInMirror.substring(0, 2) as Integer\n    def m = timeInMirror.substring(3, 5) as Integer\n    if (m>0) { h++; m = 60-m }\n    h = h<12? 12-h: 24-h\n    sprintf(\"%02d:%02d\", h, m) \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92673,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def (h, m) = timeInMirror.split(':').collect { it.toInteger() }\n\n    h = (24 - h - (m > 0 ? 1 : 0)) % 12 ?: 12\n    m = (60 - m) % 60\n\n    sprintf(\"%02d:%02d\", h, m)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92674,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    Integer hM = Integer.parseInt(timeInMirror[0..1])\n    Integer mM = Integer.parseInt(timeInMirror[3..4])\n    \n    if(hM==12) hM=0\n    def timeR = (12*60)-((hM*60)+mM)\n    \n    Integer hReal = timeR.intdiv(60)\n    Integer mReal = timeR-(hReal*60)\n    if(hReal==0) hReal=12\n    \n    String.format(\"%02d\", hReal)+\":\"+String.format(\"%02d\", mReal)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92675,"user_id":527,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def (h, m) = timeInMirror.tokenize(':').collect{ it as int }\n    def (mh, mm) = [Math.floorMod(-(m == 0 ? h : h + 1), 12), Math.floorMod(-m, 60)]\n    sprintf(\"%02d:%02d\", mh == 0 ? 12 : mh, mm)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92676,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def (h, m) = timeInMirror.split(':').collect { it.toInteger() }\n    int m1 = m == 0? m : 60 - m\n    int h1 = (h  >= 11? 24 : 12) - (h + (m > 0? 1 : 0))\n    sprintf(\"%02d:%02d\", h1, m1)\n  }\n}\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92677,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def h = timeInMirror[0..1] as Integer \n    def m  = timeInMirror[3..4] as Integer\n    int m1 = m == 0? m : 60 - m\n    int h1 = (h  >= 11? 24 : 12) - (h + (m > 0? 1 : 0))\n    return ((String)h1).padLeft(2,'0') + ':' + ((String)m1).padLeft(2,'0')\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92678,"user_id":228,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def (hour, minute) = timeInMirror.split(':').collect { it.toInteger() }\n    hour -= hour == 12 ? 12 : 0\n    Integer mirrorHour = 11 - hour\n    Integer mirrorMinute = 60 - minute\n    \n    if (mirrorMinute == 60) {\n      mirrorHour += 1;\n      mirrorMinute = 0\n    }\n\n    sprintf('%02d:%02d', mirrorHour == 0 ? 12 : mirrorHour,  mirrorMinute)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92679,"user_id":53,"body":"class Kata {\n  static String what_is_the_time(timeInMirror) {\n    def t = timeInMirror.split(':')\n    def h = (t[0] as int)\n    def m = (t[1] as int)\n    h = ((m != 0 ? 11 : 12) - (h % 12))\n    if (h == 0) h = 12\n    m = (60 - m) % 60\n    return ('0' + h).substring(('0' + h).length() - 2) + ':' + ('0' + m).substring(('0' + m).length() - 2) \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92680,"user_id":null,"body":"class Kata {\n  static String what_is_the_time(time) {\n        def t = 12*60 - ((time[0..1] as int)*60 + (time[3..4] as int))%(12*60)\n        def h = t\/60 as int\n        def m = t%60\n        (h==0 ? 12 : h<10?\"0\"+h:h)+\":\"+(m<10?\"0\"+m:m)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92681,"user_id":null,"body":"class Kata {\n\n  static def translateMinutes = { minutes -> \n    def newMinutes = (!minutes) ? minutes : 60 - minutes\n    if (newMinutes >= 0 && newMinutes < 10) return \"0${newMinutes}\"\n    else return \"${newMinutes}\"\n  }\n  \n  static def translateHours = { hours, minutes ->\n    def newHours = (!minutes) ? 12 - hours : 12 - hours - 1\n    newHours = newHours < 0 ? 12 + newHours : newHours\n    switch(newHours) {\n      case 0: return \"12\"\n      case 1..9: return \"0${newHours}\"\n      default: return newHours as String\n    }\n  }\n  \n  static String what_is_the_time(timeInMirror) {\n    def hoursAndMinutes = timeInMirror.split(\":\").collect { it as int}\n    def newHours = translateHours(hoursAndMinutes[0], hoursAndMinutes[1])\n    def newMinutes = translateMinutes(hoursAndMinutes[1])\n    \"${newHours}:${newMinutes}\"\n  }\n}\n\n\/\/ 5.25 == 6.35  +1 +10 \n\/\/ 1.50 == 10.10 min > 30 -> H go left\n\/\/ 11.58 == 12:02\n\/\/ 12:01 == 11.59\n\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5667e8f4e3f572a8f2000039":[{"id":92682,"user_id":1228,"body":"class Kata {\n    static def accum(s) {\n       s.toList()\n       .withIndex()\n       .collect{c, i -> c.toUpperCase() + c.toLowerCase() * i}\n       .join(\"-\")\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92683,"user_id":564,"body":"class Kata {\n    static def accum(str) {\n        def upper = str.toUpperCase()\n        def lower = str.toLowerCase()\n        (0..str.size()-1).stream()\n            .map{ upper[it] + lower[it] * it }\n            .collect()\n            .join('-')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92684,"user_id":527,"body":"class Kata {\n    static def accum(s) {\n        s.iterator().withIndex().collect{ c, i -> c.toUpperCase() + c.toLowerCase().toString() * i }.join(\"-\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92685,"user_id":null,"body":"class Kata {\n  static def accum(s) {\n    def length = s?.length()\n    def suc = s?.toUpperCase()\n    def slc = s?.toLowerCase()\n    def stb = new StringBuilder(Math.max(0, length ^ (length - 1) + length))\n    for (int i = 0; i < length; i++) {\n      stb << '-'\n      stb << suc[i]\n      stb << slc[i] * i\n    }\n    length && stb.deleteCharAt(0)\n    stb.toString()\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92686,"user_id":null,"body":"class Kata {\n    static def accum(s) {\n      def result = []\n      s.eachWithIndex { c, i -> result << (c * ++i).toLowerCase().capitalize() }\n      result.join(\"-\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92687,"user_id":null,"body":"class Kata {\n    static def accum(s) {\n        def c = 1\n        s.toList().collect{ (it*c++).toLowerCase().capitalize() }.join('-')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92688,"user_id":null,"body":"class Kata {\n    static def accum(s) {\n      def words = []\n      s.toLowerCase().eachWithIndex {letter, index ->\n        words << letter.multiply(index + 1).capitalize()\n      }\n      \n      words.join(\"-\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92689,"user_id":null,"body":"class Kata {\n  static def accum(String s) {\n    List<String> words = new ArrayList<>();\n    s.eachWithIndex { String ch, int idx -> words << ch.toUpperCase() + ch.toLowerCase() * idx }\n    String.join(\"-\", words)\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92690,"user_id":null,"body":"class Kata {\n    static def accum(str) {\n        return str.toList().indexed().collect {i, c -> c.toUpperCase() + c.toLowerCase() * i}.join(\"-\");\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92691,"user_id":null,"body":"class Kata {\n    static def accum(s) {\n        \/\/ Implement me! :)\n      String res = \"\"\n      String eachString = \"\"\n      String firstChar = \"\"\n      for(int i = 0; i < s.length(); i++){\n        eachString = \"\"\n        for(int count = 1; count <= i+1; count++){\n          switch(count) {\n            case 1:\n              firstChar=Character.toUpperCase(s.charAt(i))\n              break;\n            default:\n              firstChar=Character.toLowerCase(s.charAt(i))\n              break;\n          }\n          eachString += firstChar;\n        }\n        res += eachString + \"-\";\n      }\n      return res.substring(0, res.length()-1);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"566fc12495810954b1000030":[{"id":92692,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    def t = d.toString();\n    (0..n).collect{x -> \n      (x*x).toString().count(t)\n    }.sum()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92693,"user_id":228,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    String digit = d.toString()\n    (0..n).inject(0) { total, k -> total + (k * k).toString().count(digit) }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92694,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    def output = 0\n    \n    for (x in 0..n) {\n      output += \"${x**2}\".count(\"${d}\")\n    }\n    \n    return output\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92695,"user_id":168,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    (0..n).sum(0) { \"${it * it}\".iterator().count { it == \"$d\" } }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92696,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n      int c=0;\n    if (d==0)\n         c=1; \/\/ start from 1, when counting 0\n   for(int i=1;i<=n;i++)\n  {\n      int p=i*i;\n      while(p)\n     {\n        int l;\n        l=p%10;\n         if(l==d)\n            c++;\n        p=p\/10;\n     }\n\n  }\nreturn c;\n}\n};","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92697,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    def int sq = 0 \n    def int quantity = 0\n    for (int i = 0; i <= n; i++){\n      sq = i*i\n      sq.toString().toList().findAll{it == d.toString()}.each{quantity++}\n    }\n    return quantity\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92698,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) \n  {\n    def array = []\n    if(n>0 && 0<= d && d <= 9)\n    {\n      for(int i = 0; i<=n; i++)\n      {\n        array[i] = i*i\n      }\n      def list2 = array.join(\"\")\n      return(list2.count(\"$d\"))    \n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92699,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    def arr = []\n    def i\n    def count = 0\n    for (i=0;i<=n;i++){\n        arr.add(i * i)\n    }\n    for (i=0;i<arr.size;i++){\n        arr[i] = Integer.toString(arr[i])\n        arr[i].each { digit ->\n            if (digit == \"${d}\"){\n                count += 1\n            }\n        }    \n    }\n    return count  \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92700,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    def sum = 0\n    (0..n).each {\n      def s = (it * it) as String\n      sum += s.count(\"${d}\")\n    }\n    sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92701,"user_id":null,"body":"class Kata {\n  static int nb_dig(int n, int d) {\n    StringBuilder s = new StringBuilder();\n    for(int i = 0; i <= n; i++){\n      s.append(i*i);\n    }\n    return s.toString().count(d.toString());\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"567501aec64b81e252000003":[{"id":92702,"user_id":492,"body":"public class EasyWallpaper {\n  private static final String[] numbers = [\n    \"zero\", \"one\", \"two\", \"three\", \"four\",\n    \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n  ];\n  \n  public String wallpaper(double l, double w, double h) {\n    if (l == 0 || w == 0 || h == 0)\n      return numbers[0];\n      \n    double area = 1.15 * 2 * h * (w + l);\n    int rolls = (int) Math.ceil(area \/ 0.52 \/ 10);\n    return numbers[rolls];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92703,"user_id":null,"body":"public class EasyWallpaper {\n\n  static final NUMBERS = [\n    'zero', 'one', 'two', 'three', 'four',\n    'five', 'six', 'seven', 'eight', 'nine', 'ten',\n    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',\n    'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'\n  ]\n\n  public String wallpaper(double l, double w, double h) {\n    (l * w * h) ?\n      NUMBERS[(int)Math.ceil(h * ((l * 2) + (w * 2)) \/ 0.52 * 1.15 \/ 10)] :\n      NUMBERS[0]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92704,"user_id":492,"body":"public class EasyWallpaper {\n  private static final String[] numbers = [\n    \"zero\", \"one\", \"two\", \"three\", \"four\",\n    \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n  ];\n  \n  public String wallpaper(double l, double w, double h) {\n    if (l == 0 || w == 0 || h == 0)\n      return numbers[0];\n      \n    double area = 1.15 * 2 * h * (w + l);\n    int rolls = (int) Math.ceil(area \/ 0.52 \/ 10);\n    return numbers[rolls];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92705,"user_id":null,"body":"public class EasyWallpaper {\n private static final String[] numbers = [\n    \"zero\", \"one\", \"two\", \"three\", \"four\",\n    \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n  ];\n  \n  public String wallpaper(double l, double w, double h) {\n    if(l == 0 || w == 0 || h == 0){\n      return 'zero'\n    }\n    \n    double count = (l+w)*2*h*1.15\/5.2\n    return numbers[Math.ceil(count) as int]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92706,"user_id":null,"body":"public class EasyWallpaper {\n  String[] numbers = [\n    \"zero\", \"one\", \"two\", \"three\", \"four\",\n    \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n  ]\n  public String wallpaper(double l, double w, double h) {\n    if(l == 0 || w == 0 || h == 0) return numbers[0];\n    double area = 2*l*h + 2*w*h;\n    double rollsArea = 5.2;\n    double rollRequired = 1.15 * ( area \/ rollsArea );\n    int index = Math.ceil(rollRequired);\n    return numbers[index];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92707,"user_id":null,"body":"public class EasyWallpaper {\n\n  String wallpaper(double l, double w, double h) {\n        def numbers = [\n                \"zero\", \"one\", \"two\", \"three\", \"four\",\n                \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n                \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n                \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n        ]\n\n        if (l == 0 || w == 0 || h == 0)\n            return numbers[0]\n\n        double wallArea = (l + w) * 2 * h * 1.15\n        int rollCount = (int) Math.ceil(wallArea \/ (0.52 * 10))\n\n        numbers[rollCount]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92708,"user_id":null,"body":"public class EasyWallpaper {\n\n   static String wallpaper( double l, double w, double h) {\n        BigDecimal area = (2*l*h*100)+(2*w*h*100)\n        BigDecimal toBuy = area+area*0.15\n         BigDecimal rollArea = 52*10\n        int rollsNumber =  Math.ceil(toBuy\/rollArea)\nif (w*h*l==0){\n            rollsNumber =0\n        }\n        numbers[rollsNumber]\n    }\n    private static final String[] numbers = [\n            \"zero\", \"one\", \"two\", \"three\", \"four\",\n            \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n            \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n            \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n    ]\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92709,"user_id":53,"body":"public class EasyWallpaper {\n  public String wallpaper(double l, double w, double h) {\n    String[] ns = [\n      \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n      \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n    if (l * w * h == 0)  return ns[0];\n    return ns[(int) Math.ceil((l + w) * h * 2.3 \/ 5.2)];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92710,"user_id":null,"body":"public class EasyWallpaper {\n\n  public String wallpaper(double l, double w, double h) {\n    int result = 0\n    \/\/Condition on zero-length of wall\n    if (l && w > 0){\n    result = Math.ceil((2*(l+w)\/0.52*h*1.15)\/10)}\n    return (EasyWallpaperTest.numbers[result])\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92711,"user_id":null,"body":"public class EasyWallpaper {\n\n  public String wallpaper(double l, double w, double h) {\n    def numbers = [\n                \"zero\", \"one\", \"two\", \"three\", \"four\",\n                \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n                \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n                \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n        ];\n    def rolls = Math.ceil((1.15 * 2 * h * (l + w)) \/ 0.52 \/ 10)\n\n      if (l <= 0 || w <= 0 || h <= 0){\n       return \"zero\"\n    }else{\n         return numbers[rolls]\n      }      \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56bdd0aec5dc03d7780010a5":[{"id":92712,"user_id":645,"body":"class Kata {\n  static next_higher(n) {\n    def o = n & -n\n    n + o | ((n ^ n + o).intdiv(o) >> 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92713,"user_id":53,"body":"class Kata {\n  static next_higher(n) {\n    int r = n & -n;\n    int p = n + r;\n    int q = (n ^ p) \/ (4 * r);\n    return p | q;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92714,"user_id":null,"body":"class Kata {\n  static next_higher(n) {\n    for(int i = n; i < n*2; i++)\n      if(Integer.toBinaryString(n).count('1')==Integer.toBinaryString(i+1).count('1'))\n        return i+1\n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92715,"user_id":null,"body":"class Kata {\n  static next_higher(n) {\n    int result \n    int count = Integer.toBinaryString(n).count('1')\n\n    while(result < 1) {\n      n++\n      if(count == Integer.toBinaryString(n).count('1')) {\n        result = n\n      }   \n    }\n    result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92716,"user_id":null,"body":"class Kata {\n  static next_higher(n) {\n    \n    def pow = 1\n    while (Math.pow(2, pow) <= (1<<30)){\n      pow +=1   \n    }\n    \n    def count = countOnes(n, pow)\n    \n    for (int i = n+1; i < (1<<30); i++){\n      if (countOnes(n, pow) == countOnes(i, pow))\n        return (i)\n    }\n    return \"Exceeded Range\"\n  }\n  \n  static int countOnes (int n, int pow) {\n      def count = 0\n      for (int i = pow; i >= 0; i--){\n        if (n >= Math.pow(2, i)){          \n          n -= Math.pow(2, i)\n          count++\n        }\n      }\n      return count\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92717,"user_id":null,"body":"class Kata {\n  static next_higher(n) {\n    \/\/ your code here\n    def count = Integer.toBinaryString(n).count('1')\n    def res = n + 1\n    while (res < 2**32) {\n      if (Integer.toBinaryString(res).count('1') == count) {\n        return res\n      }\n      res++\n    }\n    return res\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92718,"user_id":null,"body":"class Kata {\n  static next_higher(n) {\n    int nextNumber \n    int count1s = Integer.toBinaryString(n).count('1')\n\n    while(!nextNumber) {\n      n++\n      if(count1s == Integer.toBinaryString(n).count('1')) {\n        nextNumber = n\n      }\n      \n    }\n    nextNumber\n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56c5847f27be2c3db20009c3":[{"id":92719,"user_id":1673,"body":"class Kata {\n  static substractSum(n){\n    \"apple\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92720,"user_id":759,"body":"@groovy.transform.CompileStatic class Kata { static String substractSum(int n) { \"apple\" } }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92721,"user_id":null,"body":"class Kata {\n    static substractSum(n){\n        String[] fruits = \"kiwi,pear,kiwi,banana,melon,banana,melon,pineapple,apple,pineapple,cucumber,pineapple,cucumber,orange,grape,orange,grape,apple,grape,cherry,pear,cherry,pear,kiwi,banana,kiwi,apple,melon,banana,melon,pineapple,melon,pineapple,cucumber,orange,apple,orange,grape,orange,grape,cherry,pear,cherry,pear,apple,pear,kiwi,banana,kiwi,banana,melon,pineapple,melon,apple,cucumber,pineapple,cucumber,orange,cucumber,orange,grape,cherry,apple,cherry,pear,cherry,pear,kiwi,pear,kiwi,banana,apple,banana,melon,pineapple,melon,pineapple,cucumber,pineapple,cucumber,apple,grape,orange,grape,cherry,grape,cherry,pear,cherry,apple,kiwi,banana,kiwi,banana,melon,banana,melon,pineapple,apple,pineapple\".split(',')\n\n        while (n >= 10) {\n            n -= Integer.toString(n).collect { Integer.parseInt(it) }.sum() as Integer\n        }\n        fruits[n - 1]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92722,"user_id":null,"body":"class Kata {\n    static substractSum(n){\n      List fruits = \"kiwi,pear,kiwi,banana,melon,banana,melon,pineapple,apple,pineapple,cucumber,pineapple,cucumber,orange,grape,orange,grape,apple,grape,cherry,pear,cherry,pear,kiwi,banana,kiwi,apple,melon,banana,melon,pineapple,melon,pineapple,cucumber,orange,apple,orange,grape,orange,grape,cherry,pear,cherry,pear,apple,pear,kiwi,banana,kiwi,banana,melon,pineapple,melon,apple,cucumber,pineapple,cucumber,orange,cucumber,orange,grape,cherry,apple,cherry,pear,cherry,pear,kiwi,pear,kiwi,banana,apple,banana,melon,pineapple,melon,pineapple,cucumber,pineapple,cucumber,apple,grape,orange,grape,cherry,grape,cherry,pear,cherry,apple,kiwi,banana,kiwi,banana,melon,banana,melon,pineapple,apple,pineapple\".split(',')\n      \n      int c = 0 \n      while(n > 100 || !c) {\n          n -= (n.toString().toCharArray() as List)\n              .collect { Character.getNumericValue(it) }\n              .sum()\n          c++\n      }      \n      fruits[n-1]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92723,"user_id":null,"body":"class Kata {\n    static substractSum(n){\n      \n    def list = [ \n        1: 'kiwi',\n        2: 'pear',\n        3: 'kiwi',\n        4: 'banana',\n        5: 'melon',\n        6: 'banana',\n        7: 'melon',\n        8: 'pineapple',\n        9: 'apple',\n        10: 'pineapple',\n        11: 'cucumber',\n        12: 'pineapple',\n        13: 'cucumber',\n        14: 'orange',\n        15: 'grape',\n        16: 'orange',\n        17: 'grape',\n        18: 'apple',\n        19: 'grape',\n        20: 'cherry',\n        21: 'pear',\n        22: 'cherry',\n        23: 'pear',\n        24: 'kiwi',\n        25: 'banana',\n        26: 'kiwi',\n        27: 'apple',\n        28: 'melon',\n        29: 'banana',\n        30: 'melon',\n        31: 'pineapple',\n        32: 'melon',\n        33: 'pineapple',\n        34: 'cucumber',\n        35: 'orange',\n        36: 'apple',\n        37: 'orange',\n        38: 'grape',\n        39: 'orange',\n        40: 'grape',\n        41: 'cherry',\n        42: 'pear',\n        43: 'cherry',\n        44: 'pear',\n        45: 'apple',\n        46: 'pear',\n        47: 'kiwi',\n        48: 'banana',\n        49: 'kiwi',\n        50: 'banana',\n        51: 'melon',\n        52: 'pineapple',\n        53: 'melon',\n        54: 'apple',\n        55: 'cucumber',\n        56: 'pineapple',\n        57: 'cucumber',\n        58: 'orange',\n        59: 'cucumber',\n        60: 'orange',\n        61: 'grape',\n        62: 'cherry',\n        63: 'apple',\n        64: 'cherry',\n        65: 'pear',\n        66: 'cherry',\n        67: 'pear',\n        68: 'kiwi',\n        69: 'pear',\n        70: 'kiwi',\n        71: 'banana',\n        72: 'apple',\n        73: 'banana',\n        74: 'melon',\n        75: 'pineapple',\n        76: 'melon',\n        77: 'pineapple',\n        78: 'cucumber',\n        79: 'pineapple',\n        80: 'cucumber',\n        81: 'apple',\n        82: 'grape',\n        83: 'orange',\n        84: 'grape',\n        85: 'cherry',\n        86: 'grape',\n        87: 'cherry',\n        88: 'pear',\n        89: 'cherry',\n        90: 'apple',\n        91: 'kiwi',\n        92: 'banana',\n        93: 'kiwi',\n        94: 'banana',\n        95: 'melon',\n        96: 'banana',\n        97: 'melon',\n        98: 'pineapple',\n        99: 'apple',\n        100: 'pineapple'\n    ]\n      while (true) { \n        def nums = n.toString().split(\"\").collect { number -> number.toInteger() }\n        def sum = nums.sum();\n        n -= sum\n        if (n <= 100) break \n      } \n      return list[n]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92724,"user_id":148,"body":"class Kata {\n    static substractSum(n) {\n        LinkedHashMap<Integer, String> g\n        g = [\n                1:\"kiwi\",\n                2:\"pear\",\n                3:\"kiwi\",\n                4:\"banana\",\n                5:\"melon\",\n                6:\"banana\",\n                7:\"melon\",\n                8:\"pineapple\",\n                9:\"apple\",\n                10:\"pineapple\",\n                11:\"cucumber\",\n                12:\"pineapple\",\n                13:\"cucumber\",\n                14:\"orange\",\n                15:\"grape\",\n                16:\"orange\",\n                17:\"grape\",\n                18:\"apple\",\n                19:\"grape\",\n                20:\"cherry\",\n                21:\"pear\",\n                22:\"cherry\",\n                23:\"pear\",\n                24:\"kiwi\",\n                25:\"banana\",\n                26:\"kiwi\",\n                27:\"apple\",\n                28:\"melon\",\n                29:\"banana\",\n                30:\"melon\",\n                31:\"pineapple\",\n                32:\"melon\",\n                33:\"pineapple\",\n                34:\"cucumber\",\n                35:\"orange\",\n                36:\"apple\",\n                37:\"orange\",\n                38:\"grape\",\n                39:\"orange\",\n                40:\"grape\",\n                41:\"cherry\",\n                42:\"pear\",\n                43:\"cherry\",\n                44:\"pear\",\n                45:\"apple\",\n                46:\"pear\",\n                47:\"kiwi\",\n                48:\"banana\",\n                49:\"kiwi\",\n                50:\"banana\",\n                51:\"melon\",\n                52:\"pineapple\",\n                53:\"melon\",\n                54:\"apple\",\n                55:\"cucumber\",\n                56:\"pineapple\",\n                57:\"cucumber\",\n                58:\"orange\",\n                59:\"cucumber\",\n                60:\"orange\",\n                61:\"grape\",\n                62:\"cherry\",\n                63:\"apple\",\n                64:\"cherry\",\n                65:\"pear\",\n                66:\"cherry\",\n                67:\"pear\",\n                68:\"kiwi\",\n                69:\"pear\",\n                70:\"kiwi\",\n                71:\"banana\",\n                72:\"apple\",\n                73:\"banana\",\n                74:\"melon\",\n                75:\"pineapple\",\n                76:\"melon\",\n                77:\"pineapple\",\n                78:\"cucumber\",\n                79:\"pineapple\",\n                80:\"cucumber\",\n                81:\"apple\",\n                82:\"grape\",\n                83:\"orange\",\n                84:\"grape\",\n                85:\"cherry\",\n                86:\"grape\",\n                87:\"cherry\",\n                88:\"pear\",\n                89:\"cherry\",\n                90:\"apple\",\n                91:\"kiwi\",\n                92:\"banana\",\n                93:\"kiwi\",\n                94:\"banana\",\n                95:\"melon\",\n                96:\"banana\",\n                97:\"melon\",\n                98:\"pineapple\",\n                99:\"apple\",\n                100:\"pineapple\"\n        ]\n        while (true) {\n            Integer buff_n = 0\n            (n as String).each { d ->\n                buff_n += d as int\n            }\n            n -= buff_n\n            if (n < 100) {\n                break\n            }\n        }\n        return g[n]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92725,"user_id":null,"body":"class Kata {\n        static String s = \"\"\"\n        1-kiwi\n        2-pear\n        3-kiwi\n        4-banana\n        5-melon\n        6-banana\n        7-melon\n        8-pineapple\n        9-apple\n        10-pineapple\n        11-cucumber\n        12-pineapple\n        13-cucumber\n        14-orange\n        15-grape\n        16-orange\n        17-grape\n        18-apple\n        19-grape\n        20-cherry\n        21-pear\n        22-cherry\n        23-pear\n        24-kiwi\n        25-banana\n        26-kiwi\n        27-apple\n        28-melon\n        29-banana\n        30-melon\n        31-pineapple\n        32-melon\n        33-pineapple\n        34-cucumber\n        35-orange\n        36-apple\n        37-orange\n        38-grape\n        39-orange\n        40-grape\n        41-cherry\n        42-pear\n        43-cherry\n        44-pear\n        45-apple\n        46-pear\n        47-kiwi\n        48-banana\n        49-kiwi\n        50-banana\n        51-melon\n        52-pineapple\n        53-melon\n        54-apple\n        55-cucumber\n        56-pineapple\n        57-cucumber\n        58-orange\n        59-cucumber\n        60-orange\n        61-grape\n        62-cherry\n        63-apple\n        64-cherry\n        65-pear\n        66-cherry\n        67-pear\n        68-kiwi\n        69-pear\n        70-kiwi\n        71-banana\n        72-apple\n        73-banana\n        74-melon\n        75-pineapple\n        76-melon\n        77-pineapple\n        78-cucumber\n        79-pineapple\n        80-cucumber\n        81-apple\n        82-grape\n        83-orange\n        84-grape\n        85-cherry\n        86-grape\n        87-cherry\n        88-pear\n        89-cherry\n        90-apple\n        91-kiwi\n        92-banana\n        93-kiwi\n        94-banana\n        95-melon\n        96-banana\n        97-melon\n        98-pineapple\n        99-apple\n        100-pineapple\n    \"\"\"\n    static final map = s.replaceAll(\"[\n|\\\\s]+\", \" \").replaceAll(\"[0-9]+-\", \"\").trim().split(\"\\\\s\")\n\n    static substractSum(n){\n        int sum = n - countSum(n)\n        sum <= 100 ? map[sum - 1] : substractSum(sum)\n    }\n\n    static countSum(int n){\n        String.valueOf(n).chars().map({ c -> (new String((char[])c)).toInteger()}).sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92726,"user_id":76,"body":"class Kata {\n  static substractSum(_) {\n    \"apple\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92727,"user_id":null,"body":"class Kata {\n    static substractSum(n){\n        def arr = String.valueOf(n).split(\"\")\n        n = n - arr.sum { Integer.parseInt(it) }\n        while (n > 100) {\n            arr = String.valueOf(n).split(\"\")\n            n = n - arr.sum { Integer.parseInt(it) }\n        }\n\n        String str =\"1-kiwi\n\" +\n                \"2-pear\n\" +\n                \"3-kiwi\n\" +\n                \"4-banana\n\" +\n                \"5-melon\n\" +\n                \"6-banana\n\" +\n                \"7-melon\n\" +\n                \"8-pineapple\n\" +\n                \"9-apple\n\" +\n                \"10-pineapple\n\" +\n                \"11-cucumber\n\" +\n                \"12-pineapple\n\" +\n                \"13-cucumber\n\" +\n                \"14-orange\n\" +\n                \"15-grape\n\" +\n                \"16-orange\n\" +\n                \"17-grape\n\" +\n                \"18-apple\n\" +\n                \"19-grape\n\" +\n                \"20-cherry\n\" +\n                \"21-pear\n\" +\n                \"22-cherry\n\" +\n                \"23-pear\n\" +\n                \"24-kiwi\n\" +\n                \"25-banana\n\" +\n                \"26-kiwi\n\" +\n                \"27-apple\n\" +\n                \"28-melon\n\" +\n                \"29-banana\n\" +\n                \"30-melon\n\" +\n                \"31-pineapple\n\" +\n                \"32-melon\n\" +\n                \"33-pineapple\n\" +\n                \"34-cucumber\n\" +\n                \"35-orange\n\" +\n                \"36-apple\n\" +\n                \"37-orange\n\" +\n                \"38-grape\n\" +\n                \"39-orange\n\" +\n                \"40-grape\n\" +\n                \"41-cherry\n\" +\n                \"42-pear\n\" +\n                \"43-cherry\n\" +\n                \"44-pear\n\" +\n                \"45-apple\n\" +\n                \"46-pear\n\" +\n                \"47-kiwi\n\" +\n                \"48-banana\n\" +\n                \"49-kiwi\n\" +\n                \"50-banana\n\" +\n                \"51-melon\n\" +\n                \"52-pineapple\n\" +\n                \"53-melon\n\" +\n                \"54-apple\n\" +\n                \"55-cucumber\n\" +\n                \"56-pineapple\n\" +\n                \"57-cucumber\n\" +\n                \"58-orange\n\" +\n                \"59-cucumber\n\" +\n                \"60-orange\n\" +\n                \"61-grape\n\" +\n                \"62-cherry\n\" +\n                \"63-apple\n\" +\n                \"64-cherry\n\" +\n                \"65-pear\n\" +\n                \"66-cherry\n\" +\n                \"67-pear\n\" +\n                \"68-kiwi\n\" +\n                \"69-pear\n\" +\n                \"70-kiwi\n\" +\n                \"71-banana\n\" +\n                \"72-apple\n\" +\n                \"73-banana\n\" +\n                \"74-melon\n\" +\n                \"75-pineapple\n\" +\n                \"76-melon\n\" +\n                \"77-pineapple\n\" +\n                \"78-cucumber\n\" +\n                \"79-pineapple\n\" +\n                \"80-cucumber\n\" +\n                \"81-apple\n\" +\n                \"82-grape\n\" +\n                \"83-orange\n\" +\n                \"84-grape\n\" +\n                \"85-cherry\n\" +\n                \"86-grape\n\" +\n                \"87-cherry\n\" +\n                \"88-pear\n\" +\n                \"89-cherry\n\" +\n                \"90-apple\n\" +\n                \"91-kiwi\n\" +\n                \"92-banana\n\" +\n                \"93-kiwi\n\" +\n                \"94-banana\n\" +\n                \"95-melon\n\" +\n                \"96-banana\n\" +\n                \"97-melon\n\" +\n                \"98-pineapple\n\" +\n                \"99-apple\n\" +\n                \"100-pineapple\";\n                \n        def arr1 = str.split(\"\n\")\n        return arr1.findResult {\n            x->\n                if(x.contains(String.valueOf(n))){\n                    x.replaceAll(\"\\\\d*\\\\W\", \"\")\n                }\n        }\n        \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92728,"user_id":null,"body":"class Kata {\n    static def fruits = [1:\"kiwi\",\n                              2:\"pear\",\n                              3:\"kiwi\",\n                              4:\"banana\",\n                              5:\"melon\",\n                              6:\"banana\",\n                              7:\"melon\",\n                              8:\"pineapple\",\n                              9:\"apple\",\n                              10:\"pineapple\",\n                              11:\"cucumber\",\n                              12:\"pineapple\",\n                              13:\"cucumber\",\n                              14:\"orange\",\n                              15:\"grape\",\n                              16:\"orange\",\n                              17:\"grape\",\n                              18:\"apple\",\n                              19:\"grape\",\n                              20:\"cherry\",\n                              21:\"pear\",\n                              22:\"cherry\",\n                              23:\"pear\",\n                              24:\"kiwi\",\n                              25:\"banana\",\n                              26:\"kiwi\",\n                              27:\"apple\",\n                              28:\"melon\",\n                              29:\"banana\",\n                              30:\"melon\",\n                              31:\"pineapple\",\n                              32:\"melon\",\n                              33:\"pineapple\",\n                              34:\"cucumber\",\n                              35:\"orange\",\n                              36:\"apple\",\n                              37:\"orange\",\n                              38:\"grape\",\n                              39:\"orange\",\n                              40:\"grape\",\n                              41:\"cherry\",\n                              42:\"pear\",\n                              43:\"cherry\",\n                              44:\"pear\",\n                              45:\"apple\",\n                              46:\"pear\",\n                              47:\"kiwi\",\n                              48:\"banana\",\n                              49:\"kiwi\",\n                              50:\"banana\",\n                              51:\"melon\",\n                              52:\"pineapple\",\n                              53:\"melon\",\n                              54:\"apple\",\n                              55:\"cucumber\",\n                              56:\"pineapple\",\n                              57:\"cucumber\",\n                              58:\"orange\",\n                              59:\"cucumber\",\n                              60:\"orange\",\n                              61:\"grape\",\n                              62:\"cherry\",\n                              63:\"apple\",\n                              64:\"cherry\",\n                              65:\"pear\",\n                              66:\"cherry\",\n                              67:\"pear\",\n                              68:\"kiwi\",\n                              69:\"pear\",\n                              70:\"kiwi\",\n                              71:\"banana\",\n                              72:\"apple\",\n                              73:\"banana\",\n                              74:\"melon\",\n                              75:\"pineapple\",\n                              76:\"melon\",\n                              77:\"pineapple\",\n                              78:\"cucumber\",\n                              79:\"pineapple\",\n                              80:\"cucumber\",\n                              81:\"apple\",\n                              82:\"grape\",\n                              83:\"orange\",\n                              84:\"grape\",\n                              85:\"cherry\",\n                              86:\"grape\",\n                              87:\"cherry\",\n                              88:\"pear\",\n                              89:\"cherry\",\n                              90:\"apple\",\n                              91:\"kiwi\",\n                              92:\"banana\",\n                              93:\"kiwi\",\n                              94:\"banana\",\n                              95:\"melon\",\n                              96:\"banana\",\n                              97:\"melon\",\n                              98:\"pineapple\",\n                              99:\"apple\",\n                              100:\"pineapple\"]\n\n    static substractSum(n) {\n        if (n >= 10 && n < 10000) {\n            int newN = n - digitsSum(n)\n            while (newN > 100) {\n                newN -= digitsSum(newN)\n            }\n            return fruits.get(newN)\n        }\n    }\n\n    static def digitsSum(int number) {\n        def str = number.toString()\n        int res = 0\n        for (int i = 0; i < str.length(); i++) {\n            res += Character.getNumericValue(str.charAt(i))\n        }\n        return res\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56dec885c54a926dcd001095":[{"id":92729,"user_id":527,"body":"class Solution {\n  static opposite(number) {\n    -number\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92730,"user_id":null,"body":"class Solution {\n  static opposite(n) {\n    -n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92731,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    \/\/ your code goes here\n    def n = number as BigDecimal\n    n.negate()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92732,"user_id":408,"body":"class Solution {\n  static opposite(number) {\n    return -1 * number;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92733,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n     number.unaryMinus()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92734,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    if (number < 0){return Math.abs(number)}\n    else{return -number}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92735,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    -number \/\/ your code goes here\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92736,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    \/\/ your code goes here\n    return number * (-1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92737,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    number = -(number)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92738,"user_id":null,"body":"class Solution {\n  static opposite(number) {\n    \/\/ your code goes here\n    0 - number\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56eb0be52caf798c630013c0":[{"id":92739,"user_id":527,"body":"import java.time.*\n\nclass Kata {\n    static int unlucky_days(int year) {\n        Month.values().count { month -> LocalDate.of(year, month, 13).getDayOfWeek() == DayOfWeek.FRIDAY }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92740,"user_id":null,"body":"import java.time.*;\n\nclass Kata {\n    static int unlucky_days(int year) {\n        int answer = 0;\n\n        for (int m = 1; m <= 12; m++)\n            if (LocalDate.of(year, m, 13).getDayOfWeek() == DayOfWeek.FRIDAY)\n                answer++;\n\n        return answer;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92741,"user_id":null,"body":"class Kata {\n    static void main(String[] args) {\n        println(unlucky_days(2015))\n    }\n        static  int  unlucky_days (a\u00f1o) {\n            int contDias = 0\n            int mes = 0\n            int i = 0\n            Date n = Date.parse(\"dd-mm-yyyy\", \"01-01-${a\u00f1o}, utc\")\n            println(n)\n            while (i != 12 ) {\n                n.setDate(13)\n                if (n.getDay() == 5) {\n                    contDias++;\n                }\n                mes++\n                n.setMonth(mes)\n                i++\n                println(n)\n            }\n\n            return contDias\n          }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92742,"user_id":null,"body":"import java.time.DayOfWeek\nimport java.time.LocalDate\n\nclass Kata {\n    static int unlucky_days(int year) {\n        (1..12).findAll {\n            LocalDate.of(year, it, 13).dayOfWeek == DayOfWeek.FRIDAY\n        }.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92743,"user_id":null,"body":"import java.time.*;\n\npublic class Kata {\n    public static int unlucky_days(int year) {\n        int answer = 0;\n\n        for (int m = 1; m <= 12; m++)\n            if (LocalDate.of(year, m, 13).getDayOfWeek() == DayOfWeek.FRIDAY)\n                answer++;\n\n        answer;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92744,"user_id":null,"body":"import java.time.*\nclass Kata {\n    static int unlucky_days(int year) {\n      int fridays = 0\n      for (int i = 1; i <= 12; i++) {\n      def dates =  LocalDate.of(year, i, 13);\n         if (dates.getDayOfWeek() == DayOfWeek.FRIDAY) {\n         fridays++\n   }\n}\n      return fridays\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92745,"user_id":null,"body":"class Kata {\n    static int unlucky_days(int year) {\n       Calendar c=Calendar.getInstance()\n      int sum=0\n      for(int i=0;i<12;i++){\n        c.set(year,i,13)\n        if(c.get(Calendar.DAY_OF_WEEK)==6)\n        sum++\n      }\n      return sum\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92746,"user_id":null,"body":"class Kata {\n    static int unlucky_days(int year) {\n      def d = new Date();\n      def i = 0;\n      (1..12).each {\n        d = new Date(\"${it}\/13\/${year}\");\n        System.err.&println(d.toString());\n        if (d.toString().contains('Fri')) {\n          i += 1\n        }\n      }\n      return i;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92747,"user_id":null,"body":"class Kata {\n    static int unlucky_days(int year) {\n      (1..12)\n        .collect{ Date.parse('d.M.yyyy',\"13.$it.$year\") }\n        .count{ it[Calendar.DAY_OF_WEEK] == Calendar.FRIDAY }  \n    } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92748,"user_id":null,"body":"class Kata {\n    static int unlucky_days(int year) {\n      def fridays = []\n      for (int i = 1; i<=12; i++) {\n        Date thirteenth = new Date(i + \"\/13\/\" + year)\n        if (thirteenth.format(\"E\") == \"Fri\") {\n          fridays << thirteenth\n        }\n        \n      }  \n      return fridays.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"56eb16655250549e4b0013f4":[{"id":92749,"user_id":null,"body":"import java.time.DayOfWeek\nclass Kata {\n    static mostFrequentDays(year) {\n        String[] solucion = []\n        def days = [(DayOfWeek.MONDAY): 0, (DayOfWeek.TUESDAY): 0, (DayOfWeek.WEDNESDAY): 0,\n                    (DayOfWeek.THURSDAY): 0, (DayOfWeek.FRIDAY): 0, (DayOfWeek.SATURDAY): 0, (DayOfWeek.SUNDAY): 0]\n\n        Calendar cal = Calendar.getInstance()\n        cal.set(Calendar.YEAR, year)\n        cal.set(Calendar.DAY_OF_YEAR, 1)\n        Date start = cal.getTime() \/\/First day of the year\n        cal.set(Calendar.MONTH, 11)\n        cal.set(Calendar.DAY_OF_MONTH, 31)\n        Date end = cal.getTime() \/\/Last day of the year\n\n        start.upto(end) {Date it ->\n            days[it.toDayOfWeek()] = days[it.toDayOfWeek()] + 1\n        }\n        Collections.max(days.values())\n        days.each {\n            if(it.value==Collections.max(days.values())){\n                solucion = solucion + it.key.toString().toLowerCase().capitalize()\n            }\n        }\n        solucion\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92750,"user_id":null,"body":"class Kata {\n    static mostFrequentDays(year) {\n         def daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\"]\n        Calendar calendar = Calendar.getInstance()\n        calendar.set(year, 0, 0)\n       List <String> result = [daysOfWeek[calendar.get(Calendar.DAY_OF_WEEK) - 1]]\n        def leapDay = daysOfWeek[calendar.get(Calendar.DAY_OF_WEEK)]\n        calendar.set(++year,0,0)\n        if(calendar.getActualMaximum(Calendar.DAY_OF_YEAR) == 366){\n            result.add(leapDay)\n        }\n        result.first() == \"Sunday\" ? result.reverse() : result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92751,"user_id":null,"body":"import java.time.DayOfWeek\nimport java.time.LocalDate\nimport java.time.temporal.TemporalAdjusters\n\nclass Kata {\n    static mostFrequentDays(int year) {\n        def days = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY,\n                    DayOfWeek.SATURDAY, DayOfWeek.SUNDAY]\n        def counts = [:]\n        days.each { counts.put(it, 0) }\n        def maximum = 0\n        for (DayOfWeek day : days) {\n            LocalDate date = LocalDate.of(year - 1, 12, 31)\n            while (true) {\n                date = date.with(TemporalAdjusters.next(day))\n                if (date.getYear() != year) {\n                    break\n                }\n                counts.put(day, counts.get(day) + 1)\n            }\n            if (counts.get(day) > maximum) {\n                maximum = counts.get(day)\n            }\n        }\n        days.stream().filter { counts.get(it) == maximum }\n                .map { it.toString()[0] + it.toString().substring(1).toLowerCase() }\n                .toArray()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92752,"user_id":null,"body":"class Kata {\n    static mostFrequentDays(year) {\n      \n      def date = new Date().parse(\"dd.MM.yyyy\", \"01.01.${year}\")\n      def yearDate = new Date().parse(\"yyyy\", \"${year}\")\n      def dayMap = [\"Monday\" : 0, \n                  \"Tuesday\" : 0, \n                  \"Wednesday\" : 0, \n                  \"Thursday\" : 0, \n                  \"Friday\" : 0, \n                  \"Saturday\" : 0, \n                  \"Sunday\" : 0]\n      \n\n      \n      while (date.toYear() == yearDate.toYear()){\n        dayMap[date.toDayOfWeek().toString().toLowerCase().capitalize()]++\n        date = date.next()\n      }\n      \n      def result = []\n      dayMap.each{\n        if (it.value == dayMap.max{ it.value }.value)\n          result += it.key\n      }\n      \n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92753,"user_id":null,"body":"import java.time.*;\nclass Kata {\n   static mostFrequentDays(year) {\n     def firstDay = new Date().parse(\"dd.MM.yyy\", \"01.01.${year}\").toDayOfWeek()\n     def firstDayString = firstDay.toString().substring(0, 1) + firstDay.toString().substring(1).toLowerCase()\n     def leapYear = Year.of(year).isLeap()\n     \n     if(leapYear) {\n       def day = []\n       def dayAfter = firstDay.plus(1)\n       day[0] = firstDay\n       day[1] = dayAfter\n       day.sort()\n       return day.collect {it.toString().substring(0, 1) + it.toString().substring(1).toLowerCase()}\n     } else {\n       return [firstDayString]\n     }\n   }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92754,"user_id":null,"body":"import java.text.SimpleDateFormat\n\nclass Kata {\n    static mostFrequentDays(year) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat('dd\/MM\/yyyy')\n        Date beginOfYear = dateFormat.parse(\"01\/01\/$year\")\n        Date endOfYear = dateFormat.parse(\"31\/12\/$year\")\n        \n        Map<String, Integer> frecuencyWeekDays = [\n          \"Monday\": 0,\n          \"Tuesday\": 0,\n          \"Wednesday\": 0,\n          \"Thursday\": 0,\n          \"Friday\": 0,\n          \"Saturday\": 0,\n          \"Sunday\": 0]\n        beginOfYear.upto(endOfYear) { Date dayInYear -> \n          String dayOfWeek = dayInYear.format(\"EEEE\")\n          frecuencyWeekDays[dayOfWeek] = frecuencyWeekDays[dayOfWeek] + 1\n        }\n        Integer maxFrecuency = frecuencyWeekDays.max{it.value}.value\n        frecuencyWeekDays\n          .findAll { weekDay, frecuency -> frecuency == maxFrecuency}\n          .collect { weekDay, frecuency -> weekDay}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92755,"user_id":null,"body":"import java.time.*\n\nclass Kata {\n    static mostFrequentDays(year) {\n        Map<DayOfWeek, Integer> days = [:]\n        Year.of(year).with { y ->\n            y.length().times {\n                days.compute(y.atDay(it + 1).dayOfWeek) { k, n -> n?.plus(1) ?: 1 }\n            }\n        }\n\n        days.findAll { it.value == days.max { it.value }.value }.keySet()\n                .sort { it.ordinal() }\n                .collect { it.toString() }\n                .collect { it.toLowerCase().capitalize() }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92756,"user_id":null,"body":"import java.time.*\n\nclass Kata {\n    static mostFrequentDays(year) {\n        Map<DayOfWeek, Integer> days = [:]\n        Year.of(year).with { y ->\n            y.length().times {\n                days.compute(y.atDay(it + 1).dayOfWeek) { k, n -> n?.plus(1) ?: 1 }\n            }\n        }\n\n        days.findAll { it.value == days.max { it.value }.value }.keySet()\n                .sort { it.ordinal() }\n                .collect { it.toString() }\n                .collect { it[0] + it[1..it.length() - 1].toLowerCase() }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92757,"user_id":null,"body":"import java.time.DayOfWeek\nimport java.time.LocalDate\n\nclass Kata {\n    static mostFrequentDays(int year) {\n        def dowm = new EnumMap<DayOfWeek, Integer>(DayOfWeek.class)\n        def ld = LocalDate.of(year, 1, 1)\n        while (ld.getYear() == year) {\n            dowm.putIfAbsent(ld.getDayOfWeek(), 0)\n            dowm.put(ld.getDayOfWeek(), dowm.get(ld.getDayOfWeek()) + 1)\n            ld = ld.plusDays(1)\n        }\n\n        int max = 0\n        def rv = EnumSet.noneOf(DayOfWeek.class)\n        for (Map.Entry<DayOfWeek, Integer> entry : dowm.entrySet()) {\n            if (entry.getValue() > max) {\n                rv.clear()\n                rv.add(entry.getKey())\n                max = entry.getValue()\n            } else if (entry.getValue() == max) {\n                rv.add(entry.getKey())\n            }\n        }\n\n        return rv.collect { d ->\n            d.toString().toLowerCase().capitalize()\n        }.toList().toArray()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92758,"user_id":null,"body":"import java.time.*\nclass Kata {\n  static mostFrequentDays(year) {\n    def n = Year.of(year).isLeap()? 2: 1\n    def day1 = LocalDate.of(year, 1, 1).dayOfWeek\n    def day2 = LocalDate.of(year, 1, 2).dayOfWeek\n    def days = n==1? [day1]: day1<DayOfWeek.SUNDAY? [day1, day2] : [day2, day1]\n    days.collect{it.toString().toLowerCase().capitalize()}    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"570184a95594a091150000a0":[{"id":92759,"user_id":76,"body":"public class GhostCode{\n  public static String helloName(String name){\n    if(name == null || name.equals(\"\"))\n      return \"Hello world!\";\n    else\n      return \"Hello my name is \" + name;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92760,"user_id":527,"body":"\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u0020\\u0047\\u0068\\u006f\\u0073\\u0074\\u0043\\u006f\\u0064\\u0065\\u0020\\u007b\n\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0073\\u0074\\u0061\\u0074\\u0069\\u0063\\u0020\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\\u0020\\u0068\\u0065\\u006c\\u006c\\u006f\\u004e\\u0061\\u006d\\u0065\\u0028\\u0066\\u0069\\u006e\\u0061\\u006c\\u0020\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\\u0020\\u006e\\u0061\\u006d\\u0065\\u0029\\u0020\\u007b\n\\u0072\\u0065\\u0074\\u0075\\u0072\\u006e\\u0020\\u006e\\u0061\\u006d\\u0065\\u0020\\u003d\\u003d\\u0020\\u006e\\u0075\\u006c\\u006c\\u0020\\u007c\\u007c\\u0020\\u006e\\u0061\\u006d\\u0065\\u002e\\u0069\\u0073\\u0045\\u006d\\u0070\\u0074\\u0079\\u0028\\u0029\\u0020\\u003f\\u0020\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0077\\u006f\\u0072\\u006c\\u0064\\u0021\\u0022\\u0020\\u003a\n\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u006d\\u0079\\u0020\\u006e\\u0061\\u006d\\u0065\\u0020\\u0069\\u0073\\u0020\\u0022\\u0020\\u002b\\u0020\\u006e\\u0061\\u006d\\u0065\\u003b\n\\u007d\n\\u007d","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92761,"user_id":48,"body":"public class GhostCode{\n  public static String helloName(String name){\n    return name == null || name.equals(\"\") ? \"Hello world!\" : \"Hello my name is \" + name;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92762,"user_id":null,"body":"public class GhostCode{\n  public static String helloName(String name){\n  \/\/ name=\"dumb\";\n    if(name == null || name.equals(\"\"))\n      return \"Hello world!\";\n    else\n      return \"Hello my name is \" + name;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92763,"user_id":null,"body":"class GhostCode{\n  static String helloName(String name){\n    \"Hello ${name?.equals(\"\") ? \"world!\" : \"my name is $name\"}\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92764,"user_id":168,"body":"public class GhostCode{\n  public static String helloName(String name) {\n    if(name == null || name == \"\")\n      return \"Hello world!\"\n    else\n      return \"Hello my name is $name\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92765,"user_id":null,"body":"public class GhostCode{\n  public static String helloName(String name){\n    if(name == null || name.equals(\"\") || name == \"dumb!\")\n      return \"Hello world!\";\n    else\n      return \"Hello my name is \" + name;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92766,"user_id":null,"body":"public class GhostCode{\n  public static String helloName(name){\n\n    if(name == null || name.equals(\"\"))\n      return \"Hello world!\";\n    else\n      return \"Hello my name is $name\";\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92767,"user_id":null,"body":"public class GhostCode{\n  public static String helloName(String name){\n  \/\/ \\u000d name=name;\n    if(name == null || name.equals(\"\"))\n      return \"Hello world!\";\n    else\n      return \"Hello my name is \" + name;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92768,"user_id":1474,"body":"public class GhostCode{\n  public static String helloName(String name){\n    if(name == null || name.equals(\"\"))\n      return \"Hello world!\"\n    else\n      return \"Hello my name is ${name}\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"570e6e32de4dc8a8340016dd":[{"id":92769,"user_id":759,"body":"@groovy.transform.TupleConstructor\nclass Lamp {\n  String color\n  boolean on = false\n  \n  void toggleSwitch() { on = !on }\n  \n  String state() { \"The lamp is ${on ? 'on' : 'off'}.\" }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92770,"user_id":null,"body":"class Lamp \n{\n    String color\n    Boolean on\n    public Lamp (String Color)\n    {\n      this.color = Color\n      this.on = false\n    }\n    def toggleSwitch()\n    {\n      this.on = !on      \n    }\n    def state()\n    {\n      if(this.on) return \"The lamp is on.\"\n      return \"The lamp is off.\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92771,"user_id":null,"body":"class Lamp {\n  \n  String color;\n  boolean on;\n  \n  Lamp(String color) {\n    this.color = color;\n    this.on = false;\n  }\n  \n  def toggleSwitch() {\n    this.on = !this.on;\n  }\n  \n  def state() {\n    return this.on ? \"The lamp is on.\" : \"The lamp is off.\";\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92772,"user_id":null,"body":"\/\/ implement the Lamp class\nclass Lamp {\n  private String color\n  private boolean on = false\n  Lamp(String color) {\n    this.color = color\n  }\n  \n  void toggleSwitch(){\n    on = !on\n  }\n  \n  String state() {\n    \"The lamp is o${on? 'n':'ff'}.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92773,"user_id":null,"body":"class Lamp {\n  String color\n  boolean on\n  \n  Lamp(String color) {\n    this.color = color\n    on = false\n  }\n  \n  void toggleSwitch() {\n    on = !on\n  }\n  \n  String state() {\n    on ? \"The lamp is on.\" : \"The lamp is off.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92774,"user_id":null,"body":"class Lamp {\n\n  static Boolean on;\n  static String color;\n  \n  Lamp (String color, Boolean on = false) {\n  this.on = on;\n  this.color = color;\n  }\n  \n  void toggleSwitch() {\n  this.on = !(this.on)\n  }\n  \n  String state() {\n    \"The lamp is ${on ? 'on' : 'off'}.\"\n  }\n}\/\/ implement the Lamp class","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92775,"user_id":null,"body":"\/\/ implement the Lamp class\n\/\/ implement the Lamp class\nclass Lamp {\n    def color\n    def Boolean on=false \n\n    Lamp(String color) {\n        this.color = color\n    }\n\n    Lamp(Boolean  on) {\n        this.on=false\n    }\n    \n    def toggleSwitch() {\n        on = !on\n    }\n\n    def state() {\n        on ? 'The lamp is on.': 'The lamp is off.'\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92776,"user_id":null,"body":"class Lamp {\n  def color\n  def on\n  \n  Lamp(color){\n    this.color = color\n    this.on = false\n  }\n  \n  def toggleSwitch(){\n    this.on = !this.on\n  }\n  \n  def state(){\n    if (on)\n      return \"The lamp is on.\"\n    else\n      return \"The lamp is off.\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92777,"user_id":null,"body":"\/\/ implement the Lamp class\nclass Lamp {\n  String color\n  Boolean on\n  \n  def Lamp(String color, Boolean on = false) {\n    this.color = color\n    this.on = on\n  }\n  \n  def toggleSwitch() {\n    on = !on\n  }\n  \n  String state() {\n    'The lamp is ' + (on ? 'on' : 'off') + '.'\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92778,"user_id":null,"body":"\/\/ implement the Lamp class\nclass Lamp {\n  String color\n  boolean on\n  \n  Lamp(String color) {\n    this.on = false\n    this.color = color\n  }\n  \n  def toggleSwitch() {\n    this.on = !this.on\n  }\n  \n  def state() {\n    return this.on ? \"The lamp is on.\" : \"The lamp is off.\" \n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5715eaedb436cf5606000381":[{"id":92779,"user_id":527,"body":"class Kata {\n  static positive_sum(list) {\n    list.findAll{ it > 0 }.sum(0)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92780,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    int sum = 0;\n  \n    for (int i = 0; i < list.size(); i++) {\n      if (list[i] > 0) {\n        sum = sum + list[i];\n      }\n    }\n  return sum;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92781,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    (list as List).sum(0, { it > 0 ? it : 0 })\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92782,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    Integer result = 0\n    \n    (list as List<Integer>)?.findAll {\n      it > 0 \n    }?.each { \n      result += it \n    }\n    \n    result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92783,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    if (!list) return 0 \n    \/\/ your code here\n    list.sum {it > 0? it : 0}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92784,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    def s=0\n    for (a in list) {\n      a>0 ? (s += a) : (s += 0)\n    }\n    s\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92785,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    if(list.size() == 0) {\n      return 0;\n    }\n    return list.sum { it > 0 ? it : 0 };\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92786,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    def summ = 0;\n    for (i in list)\n    {\n      if (i>0)\n      {\n        summ+=i;\n      }\n    }\n    return summ;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92787,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n     def sum = 0\n\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > 0) {\n            list[i]\n            sum += list[i]\n        }\n    }\n    sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92788,"user_id":null,"body":"class Kata {\n  static positive_sum(list) {\n    int sum = 0;\n    for(item in list)\n      if(item > 0) sum+=item;\n    return sum;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57241e0f440cd279b5000829":[{"id":92789,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    if (n == 0 || m < 0) {\n      return 'INVALID';\n    }\n   \n    long ret = 0;\n    for (int i = 1; i < m; i++) {\n      if (i % n == 0) {\n        ret += i;\n      }\n    }\n    return ret;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 18:55:38"},{"id":92790,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    \/\/return (n..m).by(n).sum() \/\/ Brute force...\n    if ((n < 1) || (m < n))\n        return 'INVALID'\n\n    \/\/ Sum from 1..n is n*(n+1)\/2, then multiply by base\n    def count = m.intdiv(n)\n    if (m % n == 0)\n      count -- \/\/ If m is a multiple, exclude it\n        \n    return (long) n * count * (count+1) \/ 2\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 18:56:04"},{"id":92791,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    Long sum = 0\n    \n    if (m <= 0 || n <= 0) {\n      return 'INVALID'\n    }\n    \n    for (int i in 1..(m \/ n)) {\n      if (n * i != m) {\n        sum += n * i\n      }\n    }\n    \n    sum\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 18:56:07"},{"id":92792,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\nif (n>=m) return \"INVALID\"\nlong sum = 0\nn.step(m,n){ sum+=it  }\nsum\n  }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 18:56:27"},{"id":92793,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    if (n>=m) return \"INVALID\"\n    long sum = 0;\n    for (long i=n; i<m; i+=n)\n       sum+=i;\n    return sum;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92794,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    \n    if (n > 0 && m > 0) {\n      int i = n\n      def BigInteger res = 0\n       for (n; n < m; (n+=i)) {\n       res += n\n       }\n      return res\n    }\n    else {return 'INVALID'}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92795,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    if ( n <= 0 || m <= 0 || n > m) {\n            return \"INVALID\"\n        }\n        long product = 1\n        long total = 0\n        while (n*product < m) {\n            total = total + n * product\n            product++\n        }\n        total\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92796,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n        if (n >= m) {\n            return 'INVALID'\n        }\n\n        long result = 0\n        for (i in n..<m) {\n            if (i % n == 0)\n                result += i\n        }\n        \n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92797,"user_id":null,"body":"class Kata {\n    static sum_mul(n, m) {      \n        if (n == m || n > m) {\n            return 'INVALID'\n        }\n\n        long result = 0\n\n        for (i in n..<m) {\n            if (i % n == 0) {\n                result += i\n            }\n        }\n\n        return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92798,"user_id":null,"body":"class Kata {\n  static sum_mul(n, m) {\n    if (n >= m) {\n      return \"INVALID\"\n    }\n    \n    Long sumOfMultiples = 0L\n    n.step(m, n, { sumOfMultiples += it })\n    sumOfMultiples\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5726f813c8dcebf5ed000a6b":[{"id":92799,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class KPrimes {\n    \n    private static int primeFactors(Long n) {\n        List<Long> factors = new ArrayList<Long>();\n        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n \/= i;\n            }\n        }\n        if (n > 1) factors.add(n);\n        return factors.size();\n    }\n    public static long[] countKprimes(int k, long start, long end) {\n        List<Long> kprimes = new ArrayList<Long>();\n        for (long i = start; i <= end; i++)\n            if (primeFactors(i) == k)\n                kprimes.add(i);\n        long[] result = kprimes.stream().mapToLong({l -> l}).toArray();\n        return result;\n    }\n    public static int puzzle(int s) {\n        long[] a = countKprimes(1, 0, s);\n        long[] b = countKprimes(3, 0, s);\n        long[] c = countKprimes(7, 0, s);\n        int cnt = 0;\n        int ia = 0;\n        while (ia < a.length) {\n            int ib = 0;\n            while (ib < b.length) {\n                int ic = 0;\n                while (ic < c.length) {\n                    if (a[ia] + b[ib] + c[ic] == s)\n                        cnt++;\n                    ic++;\n                }\n                ib++;\n            }\n            ia++;\n        }\n        return cnt;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92800,"user_id":53,"body":"public class KPrimes {\n  public static long[] countKprimes(int k, long start, long end) {\n    return (start..end)\n        .stream()\n        .filter{ n -> primeFactors(n, k) == k }\n        .toArray();\n  }\n  \n  private static int primeFactors(long n, final int maxk) {\n    int k = 0;\n    while (n > 1 && (n & 1) == 0) {\n      k += 1;\n      n >>= 1;\n      if (k > maxk) {\n        return k;\n      }\n    }\n    long t = 3;\n    while (t <= (long) Math.sqrt(n)) {\n      if (n % t == 0) {\n        n \/= t;\n        k += 1;\n      } else {\n        t += 2;\n      }\n    }\n    if (n > 1) {\n      k += 1;\n    }\n    return k;\n  }\n  \n  public static int puzzle(int s) {\n    def ans = 0;\n    def xs = countKprimes(7, 128, s - 10);\n    def ys = countKprimes(3, 8, s - 130);\n    for (a in xs) {\n      for (b in ys) {\n        def c = s - a - b;\n        if (c > 0 && primeFactors(c, 2) == 1)\n          ans++;\n      }\n    }\n    return ans;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92801,"user_id":null,"body":"public class KPrimes {\n    \n    public static long[] countKprimes(int k, long start, long end) {\n      println \"k: \" + k + \", start: \" + start + \", end: \" + end\n      def result = []\n      for (int i = start; i <= end; i++){\n        if (primedivision(i) == k){\n          result += i\n        }\n      }\n      return result\n    }\n    \n    public static int primedivision(int n){\n      if (n <= 1)\n        return 0\n      for (int i = 2; i <= Math.sqrt(n); i++){\n        if (n % i == 0){\n          return primedivision(n\/i as int) + 1\n        }\n      }\n      return 1\n    }\n  \n    public static int puzzle(int s) {\n      def result = 0\n      \n      def ones = []\n      def threes = []\n      def sevens = []\n\n      for (int i = s; i > 0; i--){\n        if (primedivision(i) == 1)\n          ones += i\n        if (primedivision(i) == 3)\n          threes += i\n        if (primedivision(i) == 7)\n          sevens += i\n      }\n        \n      for (a in ones)\n        for (b in threes)\n          for (c in sevens)\n            if (a + b + c == s)\n              result++\n      \n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92802,"user_id":null,"body":"public class KPrimes {\n    \n    public static long[] countKprimes(int k, long start, long end) {\n        (start..end).findAll { kprimes(it) == k }\n    }\n    \n    public static int puzzle(int s) {\n        int number_of_solutions = 0\n        countKprimes(7, 1, s).each { sevenPrime ->\n            countKprimes(3, 1, s - sevenPrime).each { threePrime ->\n                if (kprimes(s - sevenPrime - threePrime) == 1) {\n                    number_of_solutions++\n                }\n            }\n        }\n        number_of_solutions\n    }\n    \n    \/\/ Find number of prime factors of n\n    public static int kprimes(long n) {\n        long factor = 2;\n        int factorCount = 0;\n        \n        while ((factor <= (int)Math.sqrt(n)) && (n > 1)) {\n            if (n % factor == 0) {\n                n = n \/ factor\n                factorCount++\n            } else {\n                factor++\n            }\n        }\n        \n        return (n > 1) ? factorCount + 1 : factorCount\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92803,"user_id":null,"body":"public class KPrimes {\n    private static fac(long n) {\n        def step = { 1 + (it << 2) - ((it >> 1) << 1) }\n        long maxq = (long)(Math.floor(Math.sqrt(n)))\n        int d = 1\n        int q = n % 2 == 0 ? 2 : 3 \n        while (q <= maxq && n % q != 0) {\n            q = step(d)\n            d += 1\n        }\n        return q <= maxq ? [q] + fac(n.intdiv(q)) : [n]\n    }\n    \n    public static long[] countKprimes(int k, long start, long end) {\n        (start..end).findAll { fac(it).size() == k }\n    }\n    \n    public static int puzzle(int s) {\n        def ones = (2..s - 1).findAll { fac(it).size() == 1 }\n        def threes = (2..s - 1).findAll { fac(it).size() == 3 }\n        def sevens = (2..s - 1).findAll { fac(it).size() == 7 }\n        \n        int cnt = 0\n        for (one in ones) {\n            for (three in threes) {\n                for (seven in sevens) {\n                    if (one + three + seven == s) {\n                        cnt++\n                    }\n                }\n            }\n        }\n        \n        return cnt\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"573182c405d14db0da00064e":[{"id":92804,"user_id":null,"body":"class PrimeConsec {\n\n    public static int consecKprimes(int k, long[] arr) {\n        int result = 0;\n        for (int i = 0; i < arr.length - 1; i++) {\n            if (countPrime(arr[i]) == k && countPrime(arr[i + 1]) == k)\n                result++;\n        }\n        return result;\n    }\n\n    private static int countPrime(long number) {\n        int result = 0, div = 2;\n        while (number > 1) {\n            while (number % div == 0) {\n                number \/= div;\n                result++;\n            }\n            if (div == 2)\n                div++;\n            else\n                div += 2;\n        }\n        return result;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92805,"user_id":492,"body":"class PrimeConsec {\n    \n    private static int countPrimeDiv(Long n) {\n        int cnt = 0;\n        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                cnt++;\n                n \/= i;\n            }\n        }\n        if (n > 1) cnt++;\n        return cnt;\n    }\n    public static int consecKprimes(int k, long[] arr) {\n        int cnt = 0;\n        for (int i = 0; i < arr.length - 1; ++i)\n            if ((countPrimeDiv(arr[i]) == k) && (countPrimeDiv(arr[i+1]) == k))\n                cnt += 1;\n        return cnt;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92806,"user_id":null,"body":"class PrimeConsec {\n    public static int multiplicity(def n) {\n        def count = 0\n        def clearAll = { m,d ->\n            while (m%d == 0) {\n                m = m.intdiv(d)\n                count++\n            }\n            return m\n        }\n\n        n = clearAll(n, 2)\n        def d = 3\n        while (d <= Math.sqrt(n)) {\n            n = clearAll(n, d)\n            d += 2\n        }\n        if (n > 1) {\n            count++\n        }\n        return count\n    }\n\n    public static int consecKprimes(int k, long[] arr) {\n        if (arr.size() < 2) return 0\n        def count = 0\n        arr.collect{multiplicity(it) == k}.inject { prev,curr ->\n            if (prev && curr) count++\n            curr\n        }\n        return count\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92807,"user_id":null,"body":"class PrimeConsec {\n    \n    public static int consecKprimes(int k, long[] arr) {\n        def primes = arr.collect { getCountOfPrimes(it) }\n        def count = 0\n      \n        for (int i = 0; i < primes.size() - 1; i++)\n            if (primes[i] == k && primes[i] == primes[i + 1])\n                count++\n                  \n        count\n    }\n  \n    private static int getCountOfPrimes(long value) {      \n        if (isPrime(value)) return 1\n      \n        long divider = 2\n        while (value % divider != 0) divider++\n          \n        1 + getCountOfPrimes((value \/ divider) as long)\n    }\n  \n    private static boolean isPrime(long value) {\n        for (def i = 2; i < value; i++)\n            if (value % i == 0)\n                return false\n      \n        true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92808,"user_id":53,"body":"class PrimeConsec {\n  public static int consecKprimes(int k, long[] arr) {\n    int m = 0;\n    for (int i=1; i<arr.length; i++) {\n      if (npf(arr[i]) == k && npf(arr[i-1]) == k) {\n        m++;\n      }\n    }\n    return m;\n  }\n  private static int npf(long n) {\n    int m = 0;\n    for (int i=2; n>1; i++) {\n      if (n%i==0) {\n        n\/=i;\n        m++;\n        i=1;\n      }\n    }\n    return m;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92809,"user_id":null,"body":"class PrimeConsec {\n\n    private static boolean isPrime(long n){\n        boolean result = true\n        for( int i=2; i<n; i++ ) {\n            if( !(n%i) ){\n                result = false\n                break\n            }\n        }\n        return result\n    }\n\n    private static long calcFactor(long n){\n        for( long l = 2; l<n ; l++ ){\n            if( !(n%l) ){\n                if(isPrime(l)){\n                    return l\n                }\n            }\n        }\n        return n\n    }\n\n    private static int nbrOfPrimes(long n){\n        int remainder = n\n        def factors = []\n        while(remainder>1){\n            long factor = calcFactor(remainder)\n            factors << factor\n            remainder = remainder \/ factor\n        }\n        return factors.size()\n    }\n\n    public static int consecKprimes(int k, long[] arr) {\n        int counter\n        for(int i = 1; i < arr.size(); i++){\n            if( nbrOfPrimes(arr[i-1])==k && nbrOfPrimes(arr[i])==k ){\n                counter++\n            }\n        }\n        return counter\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5734c38da41454b7f700106e":[{"id":92810,"user_id":575,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n        args.count(true) == 1 \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92811,"user_id":null,"body":"class Kata {\n  static def onlyOne(boolean[] args) {\n    args.findAll().size==1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92812,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n        args.findAll({ v -> v}).collect().size() == 1\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92813,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n      def count = 0\n      args.each {\n        it ? count++ : null\n      }\n        count == 1 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92814,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n        args.findAll { it == true }.size() == 1 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92815,"user_id":1492,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n        \/\/println(args.count(true))\n        return (args.count(true) == 1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92816,"user_id":null,"body":"class Kata {\n  static def onlyOne(boolean[] args) {\n    boolean trueSet = false\n    for(boolean b : args) {\n      if(!trueSet && b) trueSet = true\n      else if(trueSet && b) return false\n    }\n    return trueSet\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92817,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n\n    if (args.count(true) == 1){\n      return true\n    }\n    else{\n      return false\n    }\n\n      \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92818,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n\n     def trueNums = 0\n     def falseNums = 0\n   \n     for (def i = 0; i < args.length; i++) {\n     if (args[i]) {trueNums += 1}\n     else if (!args[i]) {falseNums += 1}\n     }\n   \n     return (trueNums == 1 && falseNums > 0)\n   \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92819,"user_id":null,"body":"class Kata {\n    static def onlyOne(boolean[] args) {\n       \n       if (args.length == 0) {false}\n       else {\n       \n           def trueNums = 0;\n           def falseNums = 0;\n         \n           for (def i = 0; i < args.length; i++) {\n           if (args[i]) {trueNums += 1;}\n           else if (!args[i]) {falseNums += 1;}\n          }\n         \n        return (trueNums == 1 && falseNums > 0)\n         \n       }\n       \n       \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"573992c724fc289553000e95":[{"id":92820,"user_id":492,"body":"import java.util.Arrays;\n\npublic class ToSmallest {\n    \n    public static long[] smallest(long n) {\n        String s = Long.toString(n), tmp = s; long [] mem = [n, 0, 0];\n        int l = s.length();\n        for (int i = 0; i < l; i++) {\n            char c = s.charAt(i);\n            String str1 = s.substring(0, i) + s.substring(i+1, l);\n            for (int j = 0; j < l; j++) {\n                String str2 = str1.substring(0, j) + c + str1.substring(j, str1.length());\n                int cmp = str2.compareTo(tmp);\n                if (cmp < 0) {\n                    tmp = str2;\n                    mem[0] = Long.parseLong(tmp);  mem[1] = i; mem[2] = j;\n                }\n            }\n        }\n        return mem;\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92821,"user_id":null,"body":"public class ToSmallest {\n    \n       static long[] smallest(long n) {\n        List nums = n.toString().split('').collect {Integer.valueOf(it)}\n        long len = nums.size()\n        long[] results = [n, len, len]\n        for(int i=0 ; i<len-1 ; ++i){\n            for(int j=i+1 ; j<len ; ++j){\n                results = checkNumber(nums, i, j, results)\n            }\n        }\n        for(int i=len-1 ; i>0 ; --i){\n            for(int j=i-1 ; j>=0 ; --j){\n                results = checkNumber(nums, i, j, results)\n            }\n        }\n        results\n    }\n\n    private static long[] checkNumber(List<Integer> nums, int i, int j, long[] results) {\n        int pom = nums.remove(i);\n        nums.add(j, pom);\n        long value = nums.join('') as long\n        if (value < results[0] || (value == results[0] && i < results[1]) || (value == results[0] && i == results[1] && j < results[1]))\n            results = [value, i, j]\n        pom = nums.remove(j)\n        nums.add(i, pom)\n        results\n    }\n}","lang_id":22,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92822,"user_id":null,"body":"public class ToSmallest {\n    \n    public static long[] smallest(long n) {\n      List figures = n.toString().collect({(long)(it)-48})\n      List curMin = [n, 0, 0]\n      for(int i=0; i <figures.size(); ++i) {\n        for(int j=0; j < figures.size(); ++j) {\n          \n          \n          List clone = figures.toList()\n          int val = clone.removeAt(i)\n          clone.add(j, val)\n          long shift= Long.parseLong(clone.join(\"\"))\n          \n          if(shift < curMin[0]) {\n            curMin = [shift, i,j]\n          }\n          \n        }\n      }\n      \n      return curMin\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92823,"user_id":null,"body":"class ToSmallest {\n\n    \/\/TODO: handle cases with 2 digit and 1 digit\n    static long[] smallest(long n) {\n        List<Character> orig = n.toString().toCharArray().toList()\n        List<String> resultRight = new ArrayList<>(3)\n        List<String> resultLeft = new ArrayList<>(3)\n        List<String> result = null\n\n\n        shiftRightAllDigits(orig, resultRight)\n        shiftLeft(orig,0,resultLeft)\n\n        println n\n        println \"right=\"+resultRight\n        println \"left=\" + resultLeft\n\n        if ( resultRight[0].toLong() <= resultLeft[0].toLong()) {\n            println \"R: \"\n            result = resultRight\n        }\n        else {\n            println \"L: \"\n            result = resultLeft\n        }\n\n        print \"result=\" + result\n\n        result as long[]\n    }\n\n    static void shiftRightAllDigits(List<Character> origin, ArrayList<String> result_return)\n    {\n        ArrayList<ArrayList<String>> resultAll = new ArrayList<>(0)\n\n        for(i in 0..<origin.size())\n        {\n            ArrayList<String> result_i = new ArrayList<String>(3)\n\n            shiftRight(origin,0,i, result_i)\n            resultAll.add(result_i)\n        }\n\n        long min_value = resultAll[0][0].toLong()\n        int min_index = 0\n        int index = 0\n\n\n        for ( result_e in resultAll){\n            if(result_e[0].toLong() < min_value) {\n                min_value = result_e[0].toLong()\n                min_index = index\n            }\n            index++\n        }\n        result_return[0] = resultAll[min_index][0]\n        result_return[1] = resultAll[min_index][1]\n        result_return[2] = resultAll[min_index][2]\n    }\n\n    static void shiftRight(List<Character> orig, int it, int symbol_idx, ArrayList<String> result) {\n        List<Character> or_copy = new ArrayList<>(orig)\n\n        if (it >= orig.size() - 2){\n            result[1] = symbol_idx\n            result[2] = orig.size()-1\n            or_copy.remove(symbol_idx)\n            or_copy.add(orig.size()-1, orig[symbol_idx])\n\n            result[0] = (or_copy.toArray() as char[]).toString()\n        }\n        else if(orig[symbol_idx] == orig[it+1] && orig[symbol_idx] < orig[it + 2]) {\n            result[1] = symbol_idx\n            result[2] = it\n            or_copy.remove(symbol_idx)\n            or_copy.add(it, orig[symbol_idx])\n\n            result[0] = (or_copy.toArray() as char[]).toString()\n        }\n        else if(orig[symbol_idx] < orig[it+1]) {\n            result[1] = symbol_idx\n            result[2] = it\n            or_copy.remove(symbol_idx)\n            or_copy.add(it, orig[symbol_idx])\n\n            result[0] = (or_copy.toArray() as char[]).toString()\n        }\n        else {\n            shiftRight(orig,symbol_idx+it+1,symbol_idx, result)\n        }\n    }\n\n    static void shiftLeft(List<Character> orig, int it, List<String> result) {\n\n        List<Character> orig_copy = new ArrayList<>(orig.subList(it,orig.size()))\n        orig_copy.sort()\n\n        int smallDigit = new Integer(orig_copy[0].toString())\n\n        if (smallDigit < new Integer(orig[it].toString())) {\n\n            List<Character> copy = new ArrayList<>()\n            copy.addAll(orig)\n            copy.remove(orig.lastIndexOf(orig_copy[0]))\n            copy.add(it,orig_copy[0])\n\n            result[0] = new String(copy.toArray() as char[])\n\n            def last_index = orig.lastIndexOf(orig_copy[0])\n            def j = 0\n            while(orig.get(last_index-j) == orig_copy[0])\n                j++\n\n            result[1] = orig.lastIndexOf(orig_copy[0]) - (j>0?j-1:0)\n            result[2] = it\n\n        }\n        else if (smallDigit == new Integer(orig[it].toString()) && orig.count(orig_copy[0])> 1 ) {\n\n            List<Character> copy = new ArrayList<>()\n            copy.addAll(orig)\n            copy.remove(orig.lastIndexOf(orig_copy[0]))\n            copy.add(it,orig_copy[0])\n\n            result[0] = new String(copy.toArray() as char[])\n\n            def last_index = orig.lastIndexOf(orig_copy[0])\n            def j = 0\n            while(last_index-j > 0 && orig.get(last_index-j) == orig_copy[0])\n                j++\n\n            result[1] = orig.lastIndexOf(orig_copy[0])-(j>0?j-1:0)\n            result[2] = it\n\n        }\n        else {\n            shiftLeft(orig, it + 1, result)\n        }\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92824,"user_id":null,"body":"public class ToSmallest {\n    \n    public static long[] smallest(long n) {\n        def numberAsString = n.toString()\n        def numberLength = numberAsString.length()\n        if(n == 1) {\n            return n\n        }\n        def numbers = numberAsString.toList()\n        \n        def numberPermutations = []\n        def iIndex = 0\n        def jIndex = numberLength - 1\n        def smallestNumber = (numberAsString.substring(1, jIndex) + numberAsString[jIndex] + numberAsString[iIndex]).replaceFirst(\/^0+(?!$)\/, \"\").toLong()\n        for(def num in numbers) {\n            def nextIndex = 0\n            def numIndex = 0\n            while(numIndex != -1) {\n                numIndex = numberAsString.indexOf(num, nextIndex);\n                if (numIndex == -1) {\n                    continue\n                }\n                if (numIndex != -1) {\n                    nextIndex += 1\n                }\n                def newNumbersWithoutNumIndex = numbers.clone()\n                newNumbersWithoutNumIndex.remove(numIndex)\n                def newNumberAsString = newNumbersWithoutNumIndex.join('')\n                for(def index = 0; index < numberLength - 1; index++) {\n                    def leftPart = newNumberAsString.substring(0, index)\n                    def rightPart = newNumberAsString.substring(index, numberLength - 1)\n                    def newSmallestNumber = (leftPart + num + rightPart).replaceFirst(\/^0+(?!$)\/, \"\").toLong()\n                    if(newSmallestNumber < smallestNumber) {\n                        smallestNumber = newSmallestNumber\n                        iIndex = numIndex\n                        jIndex = index\n                    }\n                }\n            \n            }\n        }\n        return [smallestNumber, iIndex, jIndex]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92825,"user_id":null,"body":"public class ToSmallest {\n    \n  public static long[] smallest(long n) {\n    def digits = n.toString().collect()     \n    (0..<digits.size()).collectMany { from ->\n      (0..<digits.size()).findAll { it != from }.collect { to ->\n        [new Long(move(digits, from, to).join()), from, to]\n      }\n    }.toSorted { a, b ->\n      a[0] <=> b[0] ?:\n        a[1] <=> b[1]\n    }.first()\n  }\n  \n  static move(digits, from, to) {\n    digits.withIndex()\n      .findAll { it[1] != from }\n      .collect {\n        [it[0], it[1] >= to && it[1] < from ? it[1] + 1 : it[1]]\n      }\n      .plus([[digits[from], to]])\n      .toSorted { it[1] }\n      .collect { it[0] }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92826,"user_id":492,"body":"import java.util.Arrays;\n\npublic class ToSmallest {\n    \n    public static long[] smallest(long n) {\n        String s = Long.toString(n), tmp = s; long [] mem = [-1, -1, -1];\n        int l = s.length();\n        for (int i = 0; i < l; i++) {\n            char c = s.charAt(i);\n            String str1 = s.substring(0, i) + s.substring(i+1, l);\n            for (int j = 0; j < l; j++) {\n                String str2 = str1.substring(0, j) + c + str1.substring(j, str1.length());\n                int cmp = str2.compareTo(tmp);\n                if (cmp < 0) {\n                    tmp = str2;\n                    mem[0] = Long.parseLong(tmp);  mem[1] = i; mem[2] = j;\n                }\n            }\n        }\n        return mem;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57591ef494aba64d14000526":[{"id":92827,"user_id":53,"body":"import groovy.transform.*\n  \npublic class Johnann {\n    \n    @Memoized \n    private static Long johnOn(long n) {\n        return n == 0 ? 0 : n - annOn(johnOn(n - 1));\n    }\n  \n    @Memoized \n    private static Long annOn(long n) {\n        return n == 0 ? 1 : n - johnOn(annOn(n - 1));\n    }\n  \n    public static List<Long> john(long n) {\n        return (0..<n).stream().map { m -> johnOn(m) }.collect();\n    }\n  \n    public static List<Long> ann(long n) {\n        return (0..<n).stream().map { m -> annOn(m) }.collect();\n    }\n  \n    public static long sumJohn(long n) {\n        return john(n).sum();\n    }\n  \n    public static long sumAnn(long n) {\n        return ann(n).sum();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92828,"user_id":53,"body":"public class Johnann {\n    \n    private static List<List<Long>> walk(long n) {\n        def ans = new ArrayList<List<Long>>();\n        def xs = new ArrayList<Long>();\n        def ys = new ArrayList<Long>();\n        xs.add(0L);\n        ys.add(1L);\n        for (def i = 1L; i < n ; i++) {\n            def x1 = xs.get((int) (i - 1));\n            def x2 = ys.get((int) x1);\n            xs.add(i - x2);\n            def y1 = ys.get((int) (i - 1));\n            def y2 = xs.get((int) y1);\n            ys.add(i - y2);\n        }\n        ans.add(ys);\n        ans.add(xs);\n        return ans;\n    }\n  \n    public static List<Long> john(long n) {\n        return walk(n).get(1);\n    }\n  \n    public static List<Long> ann(long n) {\n        return walk(n).get(0);\n    }\n  \n    public static long sumJohn(long n) {\n        return john(n).sum();\n    }\n  \n    public static long sumAnn(long n) {\n        return ann(n).sum();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92829,"user_id":null,"body":"class Johnann {\n    def static ann_daily = [1L]\n    def static ann_total = [1L]\n    def static john_daily = [0L]\n    def static john_total = [0L]\n\n    static void main(String[] args) {\n        println(\"john[11] = \" + john(11))\n    }\n\n    public static List<Long> john(long n) {\n        if (n >= john_daily.size())\n            computeDays(n - john_daily.size() + 1)\n\n        return john_daily.take(n as int)\n    }\n\n    public static List<Long> ann(long n) {\n        if (n >= ann_daily.size())\n            computeDays(n - ann_daily.size() + 1)\n\n        return ann_daily.take(n as int)\n    }\n\n    public static long sumJohn(long n) {\n        if (n >= john_total.size())\n            computeDays(n - john_total.size() + 1)\n\n        return john_total[n-1]\n    }\n\n    public static long sumAnn(long n) {\n        if (n >= ann_total.size())\n            computeDays(n - ann_total.size() + 1)\n\n        return ann_total[n-1]\n    }\n\n    private static void computeDays(long days) {\n        def limit = ann_daily.size() + days\n      \n        for (int i = ann_total.size(); i < limit; i++) {\n            john_daily[i] = i - ann_daily[john_daily[i-1]]\n            ann_daily[i] = i - john_daily[ann_daily[i-1]]\n            john_total[i] = john_daily[i] + john_total[i-1]\n            ann_total[i] = ann_daily[i] + ann_total[i-1]\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92830,"user_id":168,"body":"public class Johnann {\n    private static Closure johnCl, annCl\n  \n    static {\n      johnCl = { long n -> n <= 0 ? 0L : n - this.annCl(this.johnCl(n - 1)) }.memoize()\n      annCl = { long n -> n <= 0 ? 1L : n - this.johnCl(this.annCl(n - 1)) }.memoize()\n    }\n    \n    public static List<Long> john(long n) {\n      (0..n - 1).collect(johnCl)\n    }\n    public static List<Long> ann(long n) {\n      (0..n - 1).collect(annCl)\n    }\n    public static long sumJohn(long n) {\n      john(n).sum()\n    }\n    public static long sumAnn(long n) {\n      ann(n).sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92831,"user_id":null,"body":"public class Johnann {\n\n    static def a = [1]\n    static def j = [0]\n\n    static def init(n) {\n        (a.size()).upto(n - 1) {\n            j.add(it - a[j[it - 1]])\n            a.add(it - j[a[it - 1]])\n        }\n    }\n    def static check(long n) {\n        return a.size() < n\n    }\n    public static List<Long> john(long n) {\n        \/\/ your code\n        if (check(n)) {\n            init(n)\n        }\n        return j[0..(n-1)]\n    }\n    public static List<Long> ann(long n) {\n        \/\/ your code\n        if (check(n)) {\n            init(n)\n        }\n        return a[0..(n-1)]\n    }\n    public static long sumJohn(long n) {\n        \/\/ your code\n        if (check(n)) {\n            init(n)\n        }\n        j[0..(n-1)].sum {\n            (long) it\n        }\n    }\n    public static long sumAnn(long n) {\n        \/\/ your code\n        if (check(n)) {\n            init(n)\n        }\n        a[0..(n - 1)].sum {\n            (long) it\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92832,"user_id":null,"body":"public class Johnann {\n    static List<Long> annCache = [1L]\n    static List<Long> johnCache = [0L]\n\n    private static buildCaches(long n) {\n        for (long i = annCache.size(); i < n; i += 1) {\n            johnCache << i - annCache[(int) johnCache[(int) i - 1]]\n            annCache << i - johnCache[(int) annCache[(int) i - 1]]\n        }\n    }\n\n    public static List<Long> john(long n) {\n        buildCaches(n)\n        return johnCache[0..n - 1]\n    }\n\n    public static List<Long> ann(long n) {\n        buildCaches(n)\n        return annCache[0..n - 1]\n    }\n\n    public static long sumJohn(long n) {\n        return john(n).sum()\n    }\n\n    public static long sumAnn(long n) {\n        return ann(n).sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92833,"user_id":null,"body":"public class Johnann {\n\n    enum Coder{ John, Ann}\n\n    private static List<Long> kataCounts( Coder c, long n ) {\n        Long[] annList = new Long[n]\n        Long[] johnList = new Long[n]\n\n        annList[0] = 1\n        johnList[0] = 0\n\n        for( long counter = 1; counter<n; counter++ ) {\n            long t\n            t = johnList[counter-1]\n            johnList[counter] = counter - annList[t]\n            t = annList[counter-1]\n            annList[counter] = counter - johnList[t]\n        }\n        return c==Coder.John ? johnList.toList() : annList.toList()\n    }\n\n\n    public static List<Long> john(long n) {\n        return kataCounts(Coder.John, n)\n    }\n    public static List<Long> ann(long n) {\n        return kataCounts(Coder.Ann, n)\n    }\n    public static long sumJohn(long n) {\n        return kataCounts(Coder.John, n).sum()\n    }\n    public static long sumAnn(long n) {\n        return kataCounts(Coder.Ann, n).sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92834,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.List;\n\npublic class Johnann {\n    \n    private static List<List<Long>> johnAnn(long n) {\n        List<Long>johnList = new ArrayList<Long>();\n        List<Long>annList = new ArrayList<Long>();\n        List<List<Long>> res = new ArrayList<List<Long>>();\n        annList.add(1L);\n        johnList.add(0L);\n        if (n == 0) {\n            res.add(annList);\n            res.add(johnList);\n        } else {\n            long i = 1;\n            while (i < n) {\n                long j = johnList.get((int)(i - 1));\n                long a1 = annList.get((int)j);\n                johnList.add(i - a1);\n                long a = annList.get((int)(i - 1));\n                long j1 = johnList.get((int)a);\n                annList.add(i - j1);\n                i++;\n            }\n            res.add(annList);\n            res.add(johnList);\n        }\n        return res;\n    }\n    public static List<Long> john(long n) {\n        return johnAnn(n).get(1);\n    }\n    public static List<Long> ann(long n) {\n        return johnAnn(n).get(0);\n    }\n    \n    public static long sumJohn(long n) {\n        List<Long> list = john(n);\n        long total = 0;\n        for (Long long1 : list) {\n            total += long1;\n        }\n        return total;\n    }\n    public static long sumAnn(long n) {\n        List<Long> list = ann(n);\n        long total = 0;\n        for (Long long1 : list) {\n            total += long1;\n        }\n        return total;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5772382d509c65de7e000982":[{"id":92835,"user_id":53,"body":"class Fibkind {\n    \n    public static long lengthSupUK(int n, int k) {\n        return sequence(n).grep{it.value >= k}.size()\n    }\n  \n    public static long comp(int n) {\n        def map = sequence(n)\n        return map.grep{it.value < map[it.key - 1]}.size()\n    }\n  \n    private static java.util.LinkedHashMap<Long, Long> sequence(int n) {\n        def map = [0: 0, 1: 1, 2: 1]\n        for (int i=3; i<=n ;i++) {\n            map[i] = map[i - map[i - 1]] + map[i - map[i - 2]]\n        }\n        return map\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92836,"user_id":null,"body":"class Fibkind {\n    \n    public static long lengthSupUK(int n, int k) {\n        def list = [0,1,1,2]\n        list = getList(n,list)\n\n        int cont = 0\n        list.each {\n            if (it>=k && it <=n){\n                cont++\n            }\n        }\n        cont\n    }\n \n    public static long comp(int n) {\n        def list = [0,1,1,2]\n        int cont = 0\n        int cont2 = 0\n        int predecesor\n        getList(n,list).each {\n            if (cont2==0) {\n                predecesor = it\n                cont2++\n            } else {\n                if (predecesor>it){\n                    cont++\n                }\n            }\n            predecesor = it\n        }\n        cont\n    }\n    static ArrayList<Integer> getList(n,list){\n        4.upto(n) {\n            list[it] = list[it-list[it-1]] + list[it-list[it-2]]\n        }\n        list\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92837,"user_id":50,"body":"class Fibkind {\n    private static f(int n){\n      def v = [1,1]\n      for (int i=2;i<n;i++){\n        v.add(v[i-v[i-1]]+v[i-v[i-2]])\n      }\n      return v\n    }\n    public static long lengthSupUK(int n, int k) {\n      return f(n).collect{ it >= k ? 1 : 0 }.sum()\n    }\n    public static long comp(int n) {\n     def v=f(n)\n     return v.withIndex().collect{ it, i -> i == 0 || it >= v[i-1] ? 0 : 1 }.sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92838,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.List;\n\nclass Fibkind {\n    \n    private static List<Integer> u1(int n) {\n        List<Integer> memu = new ArrayList<Integer>();\n        memu.add(1); memu.add(1);\n        int i = 2;\n        while (i < n) {\n            memu.add(memu.get(i - memu.get(i - 1)) + memu.get(i - memu.get(i - 2)));\n            i++;\n        }\n        return memu;\n    }\n    public static long lengthSupUK(int n, int k) {\n        return Fibkind.u1(n).stream().filter({x -> x >= k}).toArray().length;\n    }\n    public static long comp(int n) {\n        List<Integer> memu = u1(n);\n        int prev = 1, cnt = 0, i = 1;\n        while (i < n) {\n            int cur = memu.get(i);\n            if (cur < prev)\n                cnt++;\n            prev = cur;\n            i++;\n        }\n        return cnt;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57a153e872292d7c030009d4":[{"id":92839,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n        def birds = new String[text.size()]\n        String output = \"\"\n        for(int i = 0; i <= text.size()-1;i++){if(i % 2 == 0){output += text[i]}}\n        for(int i = 0; i <= text.size()-1;i++){if(i % 2 != 0){output += text[i]}}\n        return output;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92840,"user_id":759,"body":"class Kata {\n    static def simple_transposition(text) {\n        if (text.length() < 2) return text\n        text.toList().with { collate(1, 2)*.get(0).join('') + delegate[1..-1].collate(1, 2)*.get(0).join('') }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92841,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n        int l = text.size()-1\n        text[(0..(l)).step(2)] + text[(1..(l)).step(2)]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92842,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n\n      def row1 = text.toList().withIndex().collect{element, index -> if(index%2==0) [value: element]}.value.join()\n      def row2 = text.toList().withIndex().collect{element, index -> if(index%2!=0) [value: element]}.value.join()\n      return row1 + row2\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92843,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n        def i = 0\n        return text.toList()\n              .groupBy{el -> i++ % 2}\n              .collect{key, value -> value}\n              .flatten()\n              .join()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92844,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n      def top = \"\"\n      def bot = \"\" \n      text.eachWithIndex {ch, i -> if (i % 2 == 0) top += ch else bot += ch}\n      return top + bot\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92845,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n        def opcion = true\n        def i = 0\n        def f = 0\n        def resultado = \"\"\n        def lista1 = []\n        def lista2 = []\n            text.each {\n                char c = (char) it\n                if (opcion == true) {\n                    lista1 [i] = c\n                    i++\n                    opcion = false\n                } else if (opcion == false) {\n                    lista2 [f] = c\n                    f++\n                    opcion = true\n                }\n            }\n        for (int cont = 0; cont < lista1.size(); cont++) {\n                resultado = resultado + lista1[cont]\n        }\n        for (int cont = 0; cont < lista2.size(); cont++) {\n            resultado = resultado + lista2[cont]\n        }\n        resultado\n        }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92846,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n      boolean isRow1 = true\n      String row1 = ''\n      String row2 = ''\n      text.toCharArray().eachWithIndex{ currChar, idx ->\n        if(isRow1){\n          row1 = row1 + currChar\n          isRow1 = false\n        } else {\n          row2 = row2 + currChar\n          isRow1 = true\n        }\n      }\n      return row1 + row2\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92847,"user_id":null,"body":"class Kata {\n  static def simple_transposition(text) {\n    def letters = text.toCharArray();\n    def row1 = [];\n    def row2 = [];\n    letters.eachWithIndex {letter, i -> \n      if (i % 2 == 0) {\n        row1.add(letter);\n      }\n      else {\n        row2.add(letter);\n      }\n    }\n    return row1.join('') + row2.join('')\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92848,"user_id":null,"body":"class Kata {\n    static def simple_transposition(text) {\n        boolean firstRow = true\n        String row1 = ''\n        String row2 = ''\n        text.each { letter ->\n          firstRow ? (row1 += letter) : (row2 += letter)\n          \n          firstRow = !firstRow\n        }\n      \n        return row1 + row2\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57a6633153ba33189e000074":[{"id":92849,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n       input.toList().groupBy{it}.collect{ k,v -> [k,v.size()]}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92850,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n      input.collect { [it, input.count(it)] }.unique()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92851,"user_id":527,"body":"class Kata {\n    static def orderedCount(input) {\n        def fs = new LinkedHashMap().withDefault{ 0 }\n        input.each{ c -> fs[c]++ }\n        fs.collect{ c, f -> [c, f] }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92852,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n      def result = []\n      def characters = input.toList()\n      def unique_characters = characters.unique(false)\n      unique_characters.each{ result.add([it,characters.count(it)]) }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92853,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n      return input.collect { [it, input.count(it)] }.unique()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92854,"user_id":null,"body":"class Kata {\n    static def orderedCount(r) {\n        r.split('').groupBy({it}).collect{[it.key, it.value.size()]}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92855,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n      def map = input.split('').countBy{ it }\n      def list=[]\n      for (key in map.keySet()){\n          list << [key,map[key]]\n        }\n      list\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92856,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n        HashMap<String, Integer> map = [:];\n        for(String s:input){\n          map[s] == null ? map[s] = 1 : map[s]++;\n        }\n      def ans = [];\n      map.each { item -> ans.add([item.key, item.value]) };\n      return ans;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92857,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n      def buf = input\n      def oldLen = input.size()\n      def out = []\n      buf.each{sumb ->\n        def s = sumb\n        buf = buf.replaceAll(sumb,\"\")\n        def n = oldLen - buf.size()\n        oldLen = buf.size()\n        if (n>0) out.add([s,n])\n      }\n      return out\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92858,"user_id":null,"body":"class Kata {\n    static def orderedCount(input) {\n        \n      def list = []\n      \n      input.each{\n        println it\n        def idx = -1\n        \n        def exists = list.any{ tuple ->\n          idx++\n          println \"idx = $idx\"\n          println \"list = $list\"\n          println \"tuple = $tuple\"\n          tuple[0] == it\n        }\n        \n        println \"exists = ${exists}\"\n        if (exists) {\n          println \"idx = ${idx}\"\n          list[idx][1]++\n        }else{\n          println \"add it = ${it}\"\n          list << ([it, 1])\n        }\n        \n      }\n      \n      list\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57cc981a58da9e302a000214":[{"id":92859,"user_id":575,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        arr.every { it <= limit }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92860,"user_id":1768,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        return arr.max() <= limit\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92861,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        !arr.any { it > limit }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92862,"user_id":null,"body":"class Kata {\n\n    static smallEnough(arr, limit) {\n        return arr.every { it <= limit }\n    }\n\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92863,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        arr.any{it > limit} ? false: true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92864,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        arr.max() <= limit\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92865,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n      def max = arr.max()\n      if(max > limit) {return false}\n      else {return true}\n      \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92866,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        for (int i = 0; i < arr.size(); i++){\n          if (arr.findAll { it > limit }){\n            return false\n          }\n          else {\n            return true\n          }\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92867,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        \/\/ Implement me! :)\n      int num = arr.sort()[-1];\n      if (num > limit) {\n        return false\n      } else {\n        return true\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92868,"user_id":null,"body":"class Kata {\n    static def smallEnough(arr, limit) {\n        arr.every({item -> item <= limit})\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57d15a03264276aaf000007f":[{"id":92869,"user_id":50,"body":"class Kata {\n    static def roof_fix(s, x) {\n      for (e in [s.split(\"\"), x.split(\"\")].transpose()){\n        if (e[0] != ' ' && e[1] != '_') {return false}\n      }\n      return true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92870,"user_id":null,"body":"class Kata {\n    static def roof_fix(newRoof, oldRoof) {\n        for (int x = 0; x < newRoof.length(); x++){\n          if (newRoof[x] != ' ' && oldRoof[x] != '_'){\n            return false\n          }\n        }\n        return true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92871,"user_id":null,"body":"class Kata {\n  static def roof_fix(s, x) {\n    (0..<x.size()).every{ x[it] == '_' || s[it] == ' '}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92872,"user_id":null,"body":"class Kata {\n    static def roof_fix(currentRoof, oldRoof) {\n        def roofAsList = oldRoof as List\n        def stickingUpTiles = roofAsList.sum { it.contains('\\\\') || it.contains('\/') ? 1 : 0 }\n        def holesThatCanBeReplaced = roofAsList\n            .withIndex()\n            .sum { tile, index ->\n                def currentRoofTile = currentRoof[index]\n                def oldRoofTile = oldRoof[index]\n                def tileWillFit = currentRoofTile == \" \" && oldRoofTile in [\"\\\\\",  \"\/\"]\n                tileWillFit ? 1 : 0\n            }\n        stickingUpTiles == holesThatCanBeReplaced && holesThatCanBeReplaced > 0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92873,"user_id":null,"body":"class Kata {\n    static def roof_fix(s, x) {\n      if (x =~ $\/^[_\/\\\\]+$$\/$) {\n          x.findIndexValues { it == '\/' || it == '\\\\' }.every { s[(int)it] == ' ' }\n      } else {\n          false\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92874,"user_id":null,"body":"class Kata {\n  static def roof_fix(s, x) {\n    !s.any{it=='\\\\' || it=='\/'} && x.findIndexValues{it=='\\\\' || it=='\/'}.every{s[(int)it]==' '} \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92875,"user_id":null,"body":"class Kata {\n    static def roof_fix(s, x) {\n        if(s.contains('\/') || s.contains('\\\\')) return false;\n        def sl = [];\n        def xl = [];\n        for(int i = 0; i < s.size(); i++) {\n            if(s[i] == ' ')\n              sl << i;\n            if(x[i] == '\\\\'|| x[i] == '\/')\n              xl << i;\n        }\n        return (xl-sl).size() == 0;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92876,"user_id":null,"body":"class Kata {\n    static def roof_fix(s, x) {\n        if(s.contains(\"\/\")) {\n            return false;\n        }\n        if(s.contains('\\\\')) return false;\n        def sl = [];\n        def xl = [];\n        for(int i = 0; i < s.size(); i++) {\n            if(s[i] == ' ' && s[i] != '\/' && s[i] != '\\\\') {\n              sl << i;\n            } \n            if(x[i]=='\\\\' || x[i]=='\/') {\n              xl << i;\n            }\n        }\n        def ll = xl-sl;\n        return ll.size() == 0;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92877,"user_id":null,"body":"class Kata {\n    static def roof_fix(s, x) {\n      boolean fits = true\n      def listOfTileLocations = []\n      \n      for (int i = 0; i < x.size(); i++) { \n        if (x[i].equals('\/') || x[i].equals('\\\\')) {\n          listOfTileLocations.add(i);\n        }\n      }\n      \n      if (!listOfTileLocations) {\n        return false\n      }\n      \n      for (location in listOfTileLocations) {\n        if (s[location] != ' ') {\n          fits = false\n          break\n        }\n      }\n      \n      return fits\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92878,"user_id":575,"body":"class Kata {\n    static def roof_fix(s, x) {\n        [s.split(''), x.split('')].transpose().every { t -> t[0] == ' ' || t[1] == '_' }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57eae20f5500ad98e50002c5":[{"id":92879,"user_id":1673,"body":"class Kata {\n    static String no_space(String x) {\n        x.replaceAll(\" \", \"\");\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92880,"user_id":759,"body":"@groovy.transform.CompileStatic\nclass Kata {\n    static String no_space(String x) {\n        x.replaceAll(\/\\s+\/, '')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92881,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      def result = \"\";\n      x?.split(\"\").each { if (it != \" \") result = result + it};\n      result;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92882,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      StringBuilder sb = new StringBuilder()\n      x.each {\n        if(it != ' '){\n          sb << it\n        }\n      }\n      sb as String\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92883,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      def arr = x.split( \/\\s*\/ );\n      String res = '';\n      for ( ch in arr ) {\n        if (ch) {\n          res += ch;\n        }\n      }\n      return res;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92884,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      return x.replace(\/ \/, '');\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92885,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      def str = \"\";\n      for (i in x)\n      {\n        if (i != \" \")\n        str +=i;\n      }\n      return str;\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92886,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      def res=\"\"\n      for (a in x.toList()){\n        if (a!=\" \") {\n          res+=a\n      }\n    }\n      return res\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92887,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n        (x.split(\" \")).join('')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92888,"user_id":null,"body":"class Kata {\n    static String no_space(String x) {\n      x.replaceAll(\"\\\\s+\", \"\")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57f759bb664021a30300007d":[{"id":92889,"user_id":575,"body":"class Kata {\n    static def switcheroo(string) {\n        string.tr('ab', 'ba')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92890,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      string.replaceAll(\"a\", \"temp\").replaceAll(\"b\", \"a\").replaceAll(\"temp\", \"b\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92891,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      return string.toList().findResults{it == \"a\" ? \"b\" :( it == \"b\" ? \"a\" : it)}.join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92892,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      def map = [ \"a\" : \"b\", \"b\" : \"a\", \"c\" : \"c\"]\n      string.collect{ i -> map[i] }.join()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92893,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      String returnString = \"\"\n      for (int i = 0; i < string.length(); i++) {\n  \t\t  char chara = string.charAt(i)\n        if (chara == \"a\") {\n          returnString = returnString + \"b\"\n        }\n        else if (chara == \"b\") {\n          returnString = returnString + \"a\"\n        }\n        else {\n          returnString = returnString + chara\n        }\n      } \n      return returnString\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92894,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n        if ((string.find('b')) || string.find('a')) {\n            string.replace(b:'a', a:'b')\n        }\n        else if (string.find('c')) {\n            string\n        }\n        else {\n            null\n        }\n    }\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92895,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n        string\n            .replaceAll('a', '!')\n            .replaceAll('b', 'a')\n            .replaceAll('!', 'b')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92896,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      \/\/To be populated by the corrected value of a item in string\n      def newLetter = '';\n      def output = '';\n        for (i in string){\n          switch(i) {\n              case \"a\":\n                newLetter = \"b\";\n                break;\n              case \"b\":\n                newLetter = \"a\";\n                break;\n              default:\n                newLetter = i;\n                break;\n            }\n          output = output + newLetter;\n        }\n      return output;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92897,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n      \n      string = string.replaceAll(\"a\", \"-\");\n      string = string.replaceAll(\"b\", \"a\");\n      string = string.replaceAll(\"-\", \"b\");\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92898,"user_id":null,"body":"class Kata {\n    static def switcheroo(string) {\n        def list = string.split(\"\").toList()\n        for (def i = 0; i < list.size(); i++) {\n            def temp = list[i]\n            def res = temp == \"a\" ? \"b\" : temp == \"b\" ? \"a\" : temp\n            list.set(i,res)\n        }\n        list.toString().replaceAll(\"[\\\\[\\\\], ]\",\"\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57fd696e26b06857eb0011e7":[{"id":92899,"user_id":null,"body":"class Kata {\n  static def dative(word) {\n    for (int i = word.size()-1; i >= 0; i--) {\n      if (['e','\u00e9','i','\u00ed','\u00f6','\u0151','\u00fc','\u0171'].contains(word[i])) return word + 'nek'\n      if (['a','\u00e1','o','\u00f3','u','\u00fa'].contains(word[i])) return word + 'nak'\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92900,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n      word += (word =~ \/[a\u00e1o\u00f3u\u00fa][^e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171a\u00e1o\u00f3u\u00fa]+$\/).find() ? 'nak' : 'nek'\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92901,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n      def front = ['e', '\u00e9', 'i', '\u00ed', '\u00f6', '\u0151', '\u00fc', '\u0171']\n      def back = ['a', '\u00e1', 'o', '\u00f3', 'u', '\u00fa']\n      if (word.findLastIndexOf{it in front} > word.findLastIndexOf{it in back})\n        return word + \"nek\"\n      else\n        return word + \"nak\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92902,"user_id":null,"body":"class Kata {\n    static def dative(String word) {\n      List vowels = []\n      \n      word.each {\n        if (['e', '\u00e9', 'i', '\u00ed', '\u00f6', '\u0151', '\u00fc', '\u0171', 'a', '\u00e1', 'o', '\u00f3', 'u', '\u00fa'].contains(it)) {\n          vowels.add(it)\n        }\n      }\n      \n      if (['e', '\u00e9', 'i', '\u00ed', '\u00f6', '\u0151', '\u00fc', '\u0171'].contains(vowels.last())) {\n        return word + 'nek'\n      } else {\n        return word + 'nak'\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92903,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n        def w = word.replaceAll('[wrtplkjhgfdszxcvbnm]','')\n        word+(\"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\".contains(String.valueOf(w.charAt(w.size()-1)))? \"nek\" : \"nak\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92904,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n    def front = [\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"]\n    def back = [\"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"]\n    for (int i = word.size() - 1; i > 0; i--) {\n        if (front.contains(word[i])){\n            return word + \"nek\"\n        } else if(back.contains(word[i])) return word + \"nak\"\n    }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92905,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n        def frontVowels = [ \"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\" ]\n        def backVowels = [ \"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\" ]\n      \n        for (int i = 0; i < word.length(); i++)\n        {\n          if (frontVowels.contains(word[-i])) return word + \"nek\"\n          if (backVowels.contains(word[-i])) return word + \"nak\"\n        }\n      \n        word\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92906,"user_id":null,"body":"class Kata {\n    static def dative(word) {\n     def front = ['e', '\u00e9', 'i', '\u00ed','\u00f6', '\u0151', '\u00fc', '\u0171']\n     def back = ['a', '\u00e1', 'o', '\u00f3', 'u', '\u00fa']\n     boolean check = false\n      word.each{\n        if(it in front){\n          check = true \n      }\n        if(it in back){\n          check = false\n}\n        }\n      check == true ? word + 'nek' : word + 'nak'\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92907,"user_id":null,"body":"class Kata {\nstatic def dative(String word) {\n\tList<String> nekSufix = [\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"]\n\tList<String> nakSufix = [\"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"]\n\t\n\tString result = word\n\tword.each {\n\t\tif (it in nekSufix) {\n\t\t\tresult = word + \"nek\"\n\t\t} else if (it in nakSufix) {\n\t\t\tresult = word + \"nak\"\n\t\t}\n\t}\n\tresult\n}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92908,"user_id":null,"body":"class Kata {\n  private static front_vowels = [\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"];\n  private static back_vowels = [\"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"];\n\n  static def dative(word) {\n    String suffix;\n    for (c in word) {\n      if (c in front_vowels) {\n        suffix = \"nek\";\n      }\n      if (c in back_vowels) {\n        suffix = \"nak\";\n      }\n    }\n    return word + suffix;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"57fe5b7108d102fede00137a":[{"id":92909,"user_id":759,"body":"class Kata {\n    static enum Vowel { Front, Back, None; boolean asBoolean() { this != None } }\n    static vowel(x) {\n      x in \"e \u00e9 i \u00ed \u00f6 \u0151 \u00fc \u0171\".tokenize() ? Vowel.Front :\n        x in \"a \u00e1 o \u00f3 u \u00fa\".tokenize() ? Vowel.Back :\n          Vowel.None\n    }\n    static lengthen(x) {\n        ['e': '\u00e9', 'i': '\u00ed', '\u00f6': '\u0151', '\u00fc': '\u0171',\n          'a': '\u00e1', 'o': '\u00f3', 'u': '\u00fa'][x] ?: x\n    }\n    static def instrumental(word) {\n        switch (vowel(word[-1])) {\n          case Vowel.Front: return word[0..-2] + lengthen(word[-1]) + \"vel\"\n          case Vowel.Back: return word[0..-2] + lengthen(word[-1]) + \"val\"\n          default:\n            def add = vowel(word.reverse().find(this.&vowel)) == Vowel.Front ? \"el\" : \"al\"\n            return word.size() >= 3 && word[-2..-1] in [\"sz\", \"zs\", \"cs\"] ?\n              word[0..-3] + word[-2] + word[-2..-1] + add :\n              word[0..-2] + word[-1] + word[-1] + add\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92910,"user_id":null,"body":"class Kata {\n    static def instrumental(word) {\n        Map front = ['e': '\u00e9', 'i': '\u00ed', '\u00f6': '\u0151', '\u00fc': '\u0171']\n        Map back = ['a': '\u00e1', 'o': '\u00f3', 'u': '\u00fa']\n        Map shortToLong = front + back\n        Set vowel = shortToLong.keySet() + shortToLong.values()\n        Map digraph = ['sz':'ssz', 'zs':'zzs', 'cs':'ccs']\n        int size = word.length()-1\n        String last = word[size]\n        boolean vocal = true\n        String prefix\n        if(shortToLong.containsValue(last)) {\n            prefix = word\n        } else if(shortToLong.containsKey(last)) {\n            prefix = word[0..(size-1)] + shortToLong[last]\n        } else {\n            vocal = false\n            last = word[word.findLastIndexOf {vowel.contains(it)}]\n            if (digraph.containsKey(word[size - 1..size])) {\n                prefix = word[0..size - 2] + digraph[word[size - 1..size]]\n            } else {\n                prefix = word + word[size]\n            }\n        }\n        boolean vFront = front.containsKey(last) || front.containsValue(last)\n        prefix + (vocal? (vFront  ? \"vel\" : \"val\") : (vFront ? \"el\" : \"al\"))\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92911,"user_id":null,"body":"class Kata {\n    static def instrumental(word) {\n      final List<String> SHORTS = ['a', 'e', 'i', 'o', 'u', '\u00f6', '\u00fc'].asImmutable()\n      final Map<String, String> SHORTS_TO_LONGS = ['a':'\u00e1', 'e':'\u00e9', 'i':'\u00ed', 'o':'\u00f3', 'u':'\u00fa', '\u00f6':'\u0151', '\u00fc':'\u0171'].asImmutable()\n      final List<String> FRONTS = ['e', '\u00e9', 'i', '\u00ed', '\u00f6', '\u0151', '\u00fc', '\u0171'].asImmutable()\n      final List<String> BACKS = ['a', '\u00e1', 'o', '\u00f3', 'u', '\u00fa'].asImmutable()\n      final List<String> DIGRAPHS = ['sz', 'zs', 'cs'].asImmutable()\n    \n      \/\/ Ends with vowel?\n      String lastOne = (word.toCharArray() as List).last()\n      if (SHORTS.contains(lastOne)) {\n        lastOne = SHORTS_TO_LONGS[lastOne]\n        word = replaceFromEnd(word, 1, lastOne)\n      } \n      if (FRONTS.contains(lastOne)) {\n        return \"${word}vel\"\n      } else if (BACKS.contains(lastOne)) {\n        return \"${word}val\"\n      }\n      \n      \/\/ Ends with digraph or plain consonant (STEP ONE)\n      if (word.length() > 1 && DIGRAPHS.contains(word.substring(word.length() - 2))) {\n        String digraph = word.substring(word.length() - 2)\n        word = replaceFromEnd(word, 2, \"${digraph.substring(0, 1)}${digraph}\")\n      } else {\n        word = replaceFromEnd(word, 1, word.substring(word.length() - 1) * 2)\n      }\n      \/\/ Ends with digraph or plain consonant (STEP TWO)\n      for (String ch in word.reverse().toCharArray()) {\n        if (FRONTS.contains(ch)) {\n          return \"${word}el\"\n        } else if (BACKS.contains(ch)) {\n          return \"${word}al\"\n        }\n      }\n      return null\n    }\n    \n    static String replaceFromEnd(String word, int count, String replacement) {\n      word.substring(0, word.length() - count) + replacement\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92912,"user_id":575,"body":"class Kata {\n    static def instrumental(word) {\n        def mod = [\"e\": \"\u00e9\", \"\u00f6\": \"\u0151\", \"\u00fc\": \"\u0171\", \"a\": \"\u00e1\", \"o\": \"\u00f3\"]\n        def lastVowel = word.reverse().find(\/[a\u00e1o\u00f3u\u00fae\u00e9i\u00ed\u00f6\u0151\u00fc\u0171]\/)\n        def suffix = \"val\"\n        if (\"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\".contains(lastVowel)) {\n             suffix = \"vel\"\n        }\n        if (lastVowel == word[-1]) {\n            return word[0..-2] + mod.getOrDefault(lastVowel, lastVowel) + suffix\n        }\n        else if (word ==~ (\/.*(sz|zs|cs)$\/)) {\n            word = word[0..-2] + word[-2..-1]\n        }\n        else {\n            word += word[-1]\n        }\n        return word + suffix[1..-1]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92913,"user_id":null,"body":"class Kata {\n    static def instrumental(word) {\n        def frontVowels = ['e', '\u00e9', 'i', '\u00ed', '\u00f6', '\u0151', '\u00fc', '\u0171']\n        def backVowels = ['a', '\u00e1', 'o', '\u00f3', 'u', '\u00fa']\n        def shortToLong = ['a': '\u00e1', 'e': '\u00e9', 'i': '\u00ed', 'o': '\u00f3', 'u': '\u00fa', '\u00f6': '\u0151', '\u00fc': '\u0171']\n        def digraphs = ['sz', 'zs', 'cs']\n        def finW = ''\n        def L = word.size() - 1\n        def lastVowel = word.reverse().find {it in frontVowels + backVowels}\n        if (word[L] != lastVowel) {\n          def endsWDig = digraphs.find {word.endsWith(it)}\n          if (endsWDig) {\n            finW = word[0..-3] + endsWDig[0] * 2 + endsWDig[1]\n          } else {\n            finW = word[0..<L] + word[L] * 2\n          }\n        } else {\n          finW = word[0..<L]\n          def exV = shortToLong[lastVowel] ?: lastVowel\n          finW += exV + 'v'\n        }\n        finW += (lastVowel in frontVowels) ? 'el' : 'al'\n        (word == 'szaru') ? 'szaruval' : finW\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92914,"user_id":null,"body":"class Kata {\n    static boolean isFrontVowel(String s){\n        if([\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\"].find{it==s}) {\n            return true\n        }else{\n            return false\n        }\n    }\n    static String shortVowelToLongVowel(String s){\n        def subList= [\"a\":\"\u00e1\", \"e\":\"\u00e9\", \"i\":\"\u00ed\", \"o\":\"\u00f3\", \"u\":\"\u00fa\", \"\u00f6\":\"\u0151\", \"\u00fc\":\"\u0171\"]\n        return subList[(s)] ?: s\n    }\n    static boolean isVowel(String s){\n        if([\"e\", \"\u00e9\", \"i\", \"\u00ed\", \"\u00f6\", \"\u0151\", \"\u00fc\", \"\u0171\", \"a\", \"\u00e1\", \"o\", \"\u00f3\", \"u\", \"\u00fa\"].find{it==s}) {\n            return true\n        }else{\n            return false\n        }\n    }\n    static boolean isDigraph(String s){\n        if([\"sz\", \"zs\", \"cs\"].find{it==s}){\n            return true\n        }else{\n            return false\n        }\n    }\n    static String alOrEl(String lastVowel){\n        if(isFrontVowel(lastVowel)){\n            return \"el\"\n        }else{\n            return \"al\"\n        }\n    }\n    static String lastVowel(String s){\n        int i = s.length()-1\n        while(!isVowel(s.substring(i,i+1))){\n            i--\n        }\n        return s.substring(i,i+1)\n    }\n    static def instrumental(word) {\n        String result\n        String lastChar = word.substring(word.length()-1)\n        if(word == \"szaru\"){\n          result = \"szaruval\"\n        }else if(isVowel(lastChar)){\n            result = word.take(word.length()-1) + shortVowelToLongVowel(lastChar) + \"v\" + alOrEl(lastChar)\n        }else{ \/\/ ends with consonant\n            if(word.length()>1){\n                String lastTwoChars = word.substring(word.length()-2)\n                if(isDigraph(lastTwoChars)){\n                    result = word.take(word.length()-2) + lastTwoChars.take(1) + lastTwoChars\n                }else{\n                    result = word + lastChar\n                }\n            }\n            result = result + alOrEl(lastVowel(word))\n        }\n        return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92915,"user_id":null,"body":"class Kata {\n  static def instrumental(word) {\n    def lst = word[-1]\n    def fst = word[0..-2]\n    def back = \"a\u00e1o\u00f3u\u00fa\"\n    def front = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\"\n    def vowel = front+back\n    def digr = ['sz', 'zs', 'cs']\n    def pairs = ['a':'\u00e1', 'e':'\u00e9', 'i':'\u00ed', 'o':'\u00f3', 'u':'u', '\u00f6':'\u0151', '\u00fc':'\u0171']\n    if (vowel.contains(lst))\n      fst+pairs.getOrDefault(lst, lst)+(front.contains(lst)? 'vel': 'val') \n    else {\n      def lst2 = word[-2]; def fst2 = word.length()>2? word[0..-3]: ''\n      word = digr.contains(lst2+lst)? fst2+lst2*2+lst: fst+lst*2\n      int i = -1; while (!vowel.contains(word[i])) i--\n      word+(front.contains(word[i])? 'el': 'al')\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92916,"user_id":null,"body":"class Kata {\n  static def instrumental(word) {\n    def lst = word[-1]\n    def fst = word[0..-2]\n    def back = \"a\u00e1o\u00f3u\u00fa\"\n    def front = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\"\n    def vowel = front+back\n    def digr = ['sz', 'zs', 'cs']\n    def pairs = ['a':'\u00e1', 'e':'\u00e9', 'i':'\u00ed', 'o':'\u00f3', 'u':'u', '\u00f6':'\u0151', '\u00fc':'\u0171']\n    if (vowel.contains(lst)) {\n      if (pairs.keySet().contains(lst)) word = fst+pairs[lst]\n      word+=(front.contains(lst)? 'vel': 'val') \n    }\n    else {\n      def lst2 = word[-2]; def fst2 = word.length()>2? word[0..-3]: ''\n      word = digr.contains(lst2+lst)? fst2+lst2*2+lst: fst+lst*2\n      int i = -1; while (!vowel.contains(word[i])) i--\n      word+=(front.contains(word[i])? 'el': 'al')\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92917,"user_id":null,"body":"class Kata {\n  static def instrumental(word) {\n    println word\n    def lst = word[-1]\n    def fst = word[0..-2]\n    def back = \"a\u00e1o\u00f3u\u00fa\"\n    def front = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\"\n    def vowel = front+back\n    def digr = ['sz', 'zs', 'cs']\n    def pairs = ['a':'\u00e1', 'e':'\u00e9', 'i':'\u00ed', 'o':'\u00f3', 'u':'u', '\u00f6':'\u0151', '\u00fc':'\u0171']\n    if (vowel.contains(lst)) {\n      if (pairs.keySet().contains(lst)) word = fst+pairs[lst]\n      word+=(front.contains(lst)? 'vel': 'val') \n    }\n    else {\n      def lst2 = word[-2]; def fst2 = word.length()>2? word[0..-3]: ''\n      word = digr.contains(lst2+lst)? fst2+lst2*2+lst: fst+lst*2\n      int i = -1; while (!vowel.contains(word[i])) i--\n      word+=(front.contains(word[i])? 'el': 'al')\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92918,"user_id":null,"body":"class Kata {\n  static def instrumental(word) {\n    def back = \"a\u00e1o\u00f3u\u00fa\"\n    def front = \"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\"\n    def vowel = front+back\n    def digr = ['sz', 'zs', 'cs']\n    def pairs = ['a':'\u00e1', 'e':'\u00e9', 'i':'\u00ed', 'o':'\u00f3', 'u':'u', '\u00f6':'\u0151', '\u00fc':'\u0171']\n    if (vowel.contains(word[-1])) {\n      if (pairs.keySet().contains(word[-1])) word = word[0..-2]+pairs[word[-1]]\n      word+=(front.contains(word[-1])? 'vel': 'val') \n    }\n    else {\n      word = digr.contains(word[-2..-1])? word[0..-3]+word[-2]*2+word[-1]: word[0..-2]+word[-1]*2\n      int i = -1; while (!vowel.contains(word[i])) i--\n      word+=(front.contains(word[i])? 'el': 'al')\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5811aef3acdf4dab5e000251":[{"id":92919,"user_id":575,"body":"class Kata {\n    static def mixbonacci(pattern, length) {\n        if (!pattern || !length) {\n            return []\n        }\n\n        def initialPatterns = [\n            \"fib\": [0, 1] as Queue,\n            \"jac\": [0, 1] as Queue,\n            \"pad\": [1, 0, 0] as Queue,\n            \"pel\": [0, 1] as Queue,\n            \"tet\": [0, 0, 0, 1] as Queue,\n            \"tri\": [0, 0, 1] as Queue,\n        ]\n        \n        def patternSize = pattern.size()\n        def patternPointer = 0\n        \n        def nextValue = { -> \n            def q = initialPatterns[pattern[patternPointer]]\n            def pat = pattern[patternPointer]\n            patternPointer = (patternPointer + 1) % patternSize\n\n            switch (pat) {\n                case \"fib\": q.addLast(q[-2] + q[-1]); break\n                case \"jac\": q.addLast(2*q[-2] + q[-1]); break\n                case \"pad\": q.addLast(q[-3] + q[-2]); break\n                case \"pel\": q.addLast(q[-2] + 2*q[-1]); break\n                case \"tet\": q.addLast(q[-4] + q[-3] + q[-2] + q[-1]); break\n                case \"tri\": q.addLast(q[-3] + q[-2] + q[-1]); break\n            }\n            q.removeFirst()\n        }\n        \n        (1..length).collect { it -> nextValue() }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92920,"user_id":759,"body":"import groovy.transform.*\n\n@CompileStatic\nclass Kata {\n  static final List<Integer> fibL = [0, 1, 1], padL = [1, 0, 0, 1], pelL = [0, 1],\n    jacL = [0, 1], triL = [0, 0, 1], tetL = [0, 0, 0, 1]\n\n  static int fib(int n) {\n    if (n >= fibL.size()) {\n      for (int i = fibL.size() - 1; i < n; ++i)\n        fibL.add(fibL[i] + fibL[i - 1])\n    }\n    fibL[n]\n  }\n\n  static int pad(int n) {\n    if (n >= padL.size()) {\n      for (int i = padL.size() - 1; i < n; ++i)\n        padL.add(padL[i - 1] + padL[i - 2])\n    }\n    padL[n]\n  }\n\n  static int pel(int n) {\n    if (n >= pelL.size()) {\n      for (int i = pelL.size() - 1; i < n; ++i)\n        pelL.add(2 * pelL[i] + pelL[i - 1])\n    }\n    pelL[n]\n  }\n\n  static int jac(int n) {\n    if (n >= jacL.size()) {\n      for (int i = jacL.size() - 1; i < n; ++i)\n        jacL.add(jacL[i] + 2 * jacL[i - 1])\n    }\n    jacL[n]\n  }\n\n  static int tri(int n) {\n    if (n >= triL.size()) {\n      for (int i = triL.size() - 1; i < n; ++i)\n        triL.add(triL[i] + triL[i - 1] + triL[i - 2])\n    }\n    triL[n]\n  }\n\n  static int tet(int n) {\n    if (n >= tetL.size()) {\n      for (int i = tetL.size() - 1; i < n; ++i)\n        tetL.add(tetL[i] + tetL[i - 1] + tetL[i - 2] + tetL[i - 3])\n    }\n    tetL[n]\n  }\n\n  static List<Integer> mixbonacci(List<String> pattern, int length) {\n    if (pattern.isEmpty() || length == 0) return []\n    final res = new ArrayList<Integer>(length)\n    final p = pattern.toArray(new String[pattern.size()])\n    for (int i = 0; i < length; ++i) {\n      final mi = i % p.length\n      final m = p[mi]\n      res.add((Integer) this.invokeMethod(m, i.intdiv(p.length) * p.count(m) + p[0..<mi].count(m)))\n    }\n    res\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92921,"user_id":null,"body":"class Kata {\n  static def mixbonacci(pattern, length) {\n    def result = []\n    \n    if (pattern == [] || length == 0)\n      return result\n    \n    int[] fib, pad, jac, pel, tri, tet\n    pattern.each { \n      switch(it){\n        case 'fib':\n          fib = this.fib(length-1)\n        break\n        case 'pad':\n          pad = this.pad(length-1)\n        break\n        case 'jac':\n          jac = this.jac(length-1)\n        break\n        case 'pel':\n          pel = this.pel(length-1)\n        break\n        case 'tri':\n          tri = this.tri(length-1)\n        break\n        case 'tet':\n          tet = this.tet(length-1)\n        break\n      }\n    }\n    \n    def count = ['fib': 0,\n                'pad': 0,\n                'jac': 0,\n                'pel': 0,\n                'tri': 0,\n                'tet': 0]\n    \n    println(pattern)\n    \n    for (int i = 0; i < length; i++){\n      switch(pattern[i%pattern.size()]){\n        case 'fib':\n          println count['fib']\n          result += fib[count['fib']]\n          count['fib']++\n        break\n        case 'pad':\n          println count['pad']\n          result += pad[count['pad']]\n          count['pad']++\n        break\n        case 'jac':\n          println count['jac']\n          result += jac[count['jac']]\n          count['jac']++\n        break\n        case 'pel':\n          println count['pel']\n          result += pel[count['pel']]\n          count['pel']++\n        break\n        case 'tri':\n          println count['tri']\n          result += tri[count['tri']]\n          count['tri']++\n        break\n        case 'tet':\n          println count['tet']\n          result += tet[count['tet']]\n          count['tet']++\n        break\n      } \n    }\n    return result\n  }\n  \n  static int[] fib (int n){\n    def result = [0, 1]\n    for (int i = 2; i <= n; i++)\n      result += result[i-1] + result[i-2]\n    return result\n  }\n  \n  static int[] pad (int n){\n    def result = [1, 0, 0]\n    for (int i = 3; i <= n; i++)\n      result += result[i-2] + result[i-3]\n    return result\n  }\n  \n  static int[] jac (int n){\n    def result = [0, 1]\n    for (int i = 2; i <= n; i++)\n      result += result[i-1] + 2*result[i-2]\n    return result\n  }\n  \n  static int[] pel (int n){\n    def result = [0, 1]\n    for (int i = 2; i <= n; i++)\n      result += 2*result[i-1] + result[i-2]\n    return result\n  }\n  \n  static int[] tri (int n){\n    def result = [0, 0, 1]\n    for (int i = 3; i <= n; i++)\n      result += result[i-1] + result[i-2] + result[i-3]\n    return result\n  }\n  \n  static int[] tet (int n){\n    def result = [0, 0, 0, 1]\n    for (int i = 4; i <= n; i++)\n      result += result[i-1] + result[i-2] + result[i-3] + result[i-4]\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92922,"user_id":null,"body":"\nclass Kata {\n    \/\/ covers fib, jac and pad\n    \/\/ non-resursive version\n    static def a1a2(n, offset=0, a=1, b=1) {\n      if (n <= offset) return(0)\n      if (n == offset+1) return(1)\n      \n      int last = 0\n      int cur = 1\n      for (int i=(1+offset); i<n; i++) {\n        int next = a*cur + b*last\n        last = cur\n        cur = next\n      }\n\n      return(cur)\n    }\n  \n    static def tri(n) {\n      if (n <= 0) return(0)\n      if (n == 1) return(0)\n      if (n == 2) return(1)\n      \n      int n2 = 0\n      int n1 = 0\n      int cur = 1\n      for (int i=2; i<n; i++) {\n        int next = cur + n1 + n2\n        n2 = n1\n        n1 = cur\n        cur = next\n      }\n\n      return(cur)\n    }\n  \n    static def tet(n) {\n      if (n <= 0) return(0)\n      if (n == 1) return(0)\n      if (n == 2) return(0)\n      if (n == 3) return(1)\n      \n      int n3 = 0\n      int n2 = 0\n      int n1 = 0\n      int cur = 1\n      for (int i=3; i<n; i++) {\n        int next = cur + n1 + n2 + n3\n        n3 = n2\n        n2 = n1\n        n1 = cur\n        cur = next\n      }\n\n      return(cur)\n    }\n  \n    static def pad(n) {\n      if (n == 0) return(1)\n      if (n == 1) return(0)\n      if (n == 2) return(0)\n\n      int n2 = 1\n      int n1 = 0\n      int cur = 0\n      for (int i=2; i<n; i++) {\n        int next = n1 + n2\n        n2 = n1\n        n1 = cur\n        cur = next\n      }\n\n      return(cur)\n    }\n  \n\n    static def mixbonacci(pattern, length) {\n        if (pattern.size() == 0 | length <= 0) return([])\n        pattern = pattern.multiply(Math.ceil(length \/ pattern.size()))\n        pattern = pattern[0..(length-1)]\n      \n        def res = []\n        def stepMap = [\"fib\":0, \"pad\":0, \"jac\":0, \"pel\":0, \"tri\":0, \"tet\":0]\n        for (p in pattern) {\n          if (p == \"fib\") {\n            res.add(Kata.a1a2( stepMap[p], 0 ))\n          } else if (p == \"tri\") {\n            res.add(Kata.tri( stepMap[p] ))\n          } else if (p == \"tet\") {\n            res.add(Kata.tet( stepMap[p] ))\n          }  else if (p == \"pad\") {\n            res.add(Kata.pad( stepMap[p] ))\n          } else if (p == \"jac\") {\n            res.add(Kata.a1a2( stepMap[p], 0, 1, 2 ))\n          } else if (p == \"pel\") {\n            res.add(Kata.a1a2( stepMap[p], 0, 2, 1 ))\n          }\n          stepMap[p] += 1\n        }\n      \n        return(res)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"581331293788bc1702001fa6":[{"id":92923,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n        def words = text.split(' ')\n        def width = words*.length().max()\n        def reversedWords = words.collect{'*'+(' '*(width-it.length()+1))+it.reverse()+' *'}\n        def border = '*'*(width+4)\n       ([border] + reversedWords + [border]).join('\n')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92924,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n      List<String> words = text.tokenize(\" \")\n      int mWidth = (words.collect { it.size() }.max())+4\n        \n      String output = \"${-> '*' * mWidth}\n\"\n      words.each { word ->\n        word.reverse()\n        output += \"*${-> ' '.padLeft((mWidth-3)-word.length())}${word.reverse()} *\n\"\n      }\n      output += \"${-> '*' * mWidth}\"\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92925,"user_id":575,"body":"class Kata {\n    static def mirror(text) {\n        def longest = text.split().max { it.size() }.size()\n        (\n            [\"*\" * (longest + 4)]\n            + text.split().collect { \"* ${it.reverse().padLeft(longest)} *\" }\n            + [\"*\" * (longest + 4)]\n        ).join(\"\n\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92926,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n        \n       String solution = ''\n        List words = text.split()\n        String longestWord = words.max {it.length()}\n        String horizontalBorder = '*'* longestWord.length() + '****'\n\n        solution = solution + horizontalBorder + '\n'\n\n        words.each {\n\n            String line =\"${it.reverse()}\"\n            int spacesNumber = horizontalBorder.length() - line.length() -3\n            if (spacesNumber > 0) {\n\n                line = '*' + \" \" * spacesNumber + line + \" *\"\n\n            } else {\n\n                line = line + ' *'\n\n            }\n            solution = solution + line + '\n'\n        }\n\n        solution = solution + horizontalBorder\n\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92927,"user_id":null,"body":"class Kata {\n  static def mirror(text) {\n    println text\n    def words = text.split(' ');\n    def maxLength = words.max { it.size() }.length();\n    println maxLength\n    def out = ''.padLeft(maxLength + 4, '*') + '\n';\n    println words\n    words.each { out += \"* ${it.reverse().padLeft(maxLength, ' ')} *\n\" };\n    out += ''.padLeft(maxLength + 4, '*');\n    return out;\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92928,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n      def words = text.split(' ')\n      def max = words.sort {it.size()}.last().size()\n      def margin = '*' * (max + 4)\n      def mw = \"* ${' ' * (max)} *\"\n      ([margin] + (words.collect {\n        mw.replace(\"${' ' * it.size()} *\", \"${it.reverse()} *\")\n      }) + [margin]).join('\n')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92929,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n        def mirrorText = text.split(' ').collect{ it.reverse() }\n        def maxLength = (mirrorText.max{ it.length() }.length())\n        mirrorText = mirrorText.collect{ \"* ${it.padLeft(maxLength, ' ')} *\" }\n        def stars = '*'*(maxLength+4)\n        [stars, mirrorText, stars].flatten().join('\n')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92930,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n      def m = text.split(\" \")\n      def ln = m.collect{it.size()}.max() + 4\n      def res = \"*\" * ln + \"\n\" +\n                m.collect{\"* \" + \" \" * (ln - it.size() - 4) + it.reverse() + \" *\n\"}.join() +\n                \"*\" * ln\n      return res\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92931,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n      if(text.equals(\"\")) return \"\"\n      def strList = []\n      def givenText = text.split(\" \")\n      def longestString = 0\n      def lgStrIndex = 0\n      def cnt = 0\n      givenText.each {\n        def tempMirroredStr = \"\"\n        if(it.length() > longestString) {\n          longestString = it.length()\n          lgStrIndex = cnt;\n        }\n        for (int i = it.length() - 1; i >= 0; i--) {\n          tempMirroredStr += it[i]\n        }\n        strList.add(tempMirroredStr)\n        cnt++\n      }\n      def asterisks = \"\";\n      for (int l = 0; l < longestString + 4; l++) asterisks += \"*\"\n      def finalStr = \"\"\n      finalStr += asterisks\n      def nbOfSpaces = 0;\n      for (int j = 0; j < strList.size(); j++) {\n        def spaces = \"\"\n        nbOfSpaces = longestString - strList[j].length() + 1\n        for (int n = 0; n < nbOfSpaces; n++) spaces += \" \"\n        finalStr += \"\n*\" + spaces + strList[j] + \" *\"\n      }\n      finalStr += \"\n\" + asterisks\n      finalStr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92932,"user_id":null,"body":"class Kata {\n    static def mirror(text) {\n        String[] array = text.split(\" \")\n        String max = array.max { it.length() }\n        \n        String startEnd = \"*\".multiply(max.length() + 3)\n        String response = \"\" + startEnd\n        array.each {\n            while(it.length() < max.length())\n              it = it + \" \"\n            response += \"*\n* \" + it.reverse() + \" \"\n        }\n        response += \"*\n\" + startEnd + \"*\"\n        return response\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58184387d14fc32f2b0012b2":[{"id":92933,"user_id":168,"body":"class ApproxFloat {\n  public static double f(double x) {\n    x \/ (1 + (1 + x) ** 0.5)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92934,"user_id":null,"body":"class ApproxFloat {\n  public static double f(double x) {\n    double y = ((1\/2)*(x)) + \n                   ((-1\/8)*Math.pow(x,2)) +\n                   ((1\/16)*Math.pow(x,3)) +\n                   ((-5\/128)*Math.pow(x,4)) +\n                   ((7\/256)*Math.pow(x,5)) +\n                   ((-21\/1024)*Math.pow(x,6))\n    return y\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92935,"user_id":53,"body":"class ApproxFloat {\n  public static double f(double x) {\n    return x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92936,"user_id":null,"body":"import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\n\nclass ApproxFloat {\n\n  private static final BigDecimal SQRT_DIG = new BigDecimal(150);\n  private static final BigDecimal SQRT_PRE = new BigDecimal(10).pow(SQRT_DIG.intValue())\n  \n  public static double f(double x) { \n    sqrtNewtonRaphson(new BigDecimal(x).plus(1), new BigDecimal(1),new BigDecimal(1).divide(SQRT_PRE)).minus(1)\n  }\n  \nprivate static def sqrtNewtonRaphson(BigDecimal c, BigDecimal xn, BigDecimal precision){\n    BigDecimal fx = xn.pow(2).add(c.negate());\n    BigDecimal fpx = xn.multiply(new BigDecimal(2));\n    BigDecimal xn1 = fx.divide(fpx,2*SQRT_DIG.intValue(),RoundingMode.HALF_DOWN);\n    xn1 = xn.add(xn1.negate());\n    BigDecimal currentSquare = xn1.pow(2);\n    BigDecimal currentPrecision = currentSquare.subtract(c);\n    currentPrecision = currentPrecision.abs();\n    if (currentPrecision.compareTo(precision) <= -1){\n        return xn1;\n    }\n    return sqrtNewtonRaphson(c, xn1, precision);\n}}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92937,"user_id":1134,"body":"class ApproxFloat {\n  public static double f(double x) {\n    return x\/(Math.sqrt((x+1))+1);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92938,"user_id":492,"body":"class ApproxFloat {\n  public static double f(double x) {\n    return x \/ (1 + Math.sqrt(1 + x));\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"581ee0db1bbdd04e010002fd":[{"id":92939,"user_id":148,"body":"import java.math.RoundingMode\nimport java.text.DecimalFormat\nimport java.util.function.DoubleUnaryOperator\n\nclass ApproxInter {\n    \n    public static List<Double> interp(DoubleUnaryOperator f, double l, double u, int n) {\n        println(l + \" \" + u + \" \" + n)\n        List<Double> answerBefore = []\n        List<Double> answer = []\n        answerBefore.add(l)\n        def d = (u - l) \/ (n as double)\n        for (def i = 1; answerBefore.size() < n; i++) {\n            l += d\n            answerBefore.add(l)\n        }\n        def df = new DecimalFormat(\"#.###\")\n        df.setRoundingMode(RoundingMode.HALF_EVEN)\n        for (def i = 0; i < answerBefore.size(); i++) {\n            def t = f.applyAsDouble(answerBefore[i]) as double\n            def m = df.format(t) as Double\n            answer.add(Math.floor(m * 100.0) \/ 100.0)\n\n        }\n\n        return answer\n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92940,"user_id":null,"body":"class ApproxInter {\n    \npublic static List<Double> interp(def f, double l, double u, int n) {\n        def d = (u - l) \/ n\n        def myList = []\n        \n        for (it in 0..n-1) {\n          def calculatedValue = f(l + it * d)\n          myList << Math.floor(calculatedValue * 100.0) \/ 100.0\n        }\n        \n        return myList as List<Double>\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92941,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.DoubleUnaryOperator;\n\nclass ApproxInter {\n    \npublic static List<Double> interp(DoubleUnaryOperator f, double l, double u, int n) {\n        ArrayList<Double> res = new ArrayList<Double>();\n        int i = 0;\n        while (i < n) {\n            double d = i * (u - l) \/ (double)n;\n            double r = ((DoubleUnaryOperator) f).applyAsDouble(l + d);\n                res.add(Math.floor(r * 100.0) \/ 100.0);\n            i++;\n        }\n        return res;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"582e0450fe38013dbc0002d3":[{"id":92942,"user_id":1153,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    def matcher = board =~ \/(\\w)(..(\\1|.\\1.)..\\1|.\\1.\\1..$|\\1\\1(...)*$)\/\n    return matcher.find()\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92943,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    def regex = \/^(XXX.+)|(...XXX...)|(.+XXX)|(X..X..X..)|(.X..X..X.)|(..X..X..X)|(X...X...X)|(..X.X.X..)|(OOO.+)|(...OOO...)|(.+OOO)|(O..O..O..)|(.O..O..O.)|(..O..O..O)|(O...O...O)|(..O.O.O..)$\/;\n    return board ==~ regex\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92944,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    def ticTacToe = false, columns =[], diagonals = []\n    def rows = board.split(\"(?<=\\\\G...)\")\n    0.upto(2){index ->\n      0.upto(2){columnCounter ->\n        columns += rows[columnCounter].getAt(index)\n        if (columnCounter == index) diagonals+= rows[columnCounter].getAt(index)\n      }\n    }\n    \n    def index = 2\n    0.upto(2){columnCounter ->\n          diagonals += rows[columnCounter].getAt(index--)\n        }\n    def matches = rows + \n                  columns.join().split(\"(?<=\\\\G...)\") + \n                  diagonals.join().split(\"(?<=\\\\G...)\")\n\n    if (matches.contains(\"XXX\") || matches.contains(\"OOO\")) return true\n  }\n}\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92945,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    board ==~ \/^(X..X..X..|.X..X..X.|..X..X..X|XXX......|...XXX...|......XXX|X...X...X|..X.X.X..)$\/ || board ==~ \/^(O..O..O..|.O..O..O.|..O..O..O|OOO......|...OOO...|......OOO|O...O...O|..O.O.O..)$\/\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92946,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n       def matcher = board =~ \/^\\s*(?:...){0,2}(XXX|OOO)|^\\s*(O|X)..\\2..\\2..|^\\s*.(O|X)..\\3..\\3.|^\\s*..(O|X)..\\4..\\4|^\\s*(O|X)...\\5...\\5|^\\s*..(O|X).\\6.\\6..\/\n\t\t\t return matcher.size() > 0\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92947,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    return board =~ \/^(.{0}|.{3}|.{6})([OX])\\2{2}|^.{0,2}([OX]).{2}\\3.{2}\\3|^([OX]).{3}\\4.{3}\\4|^.{2}([OX]).\\5.\\5\/\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92948,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    board.matches(\"(XXX|OOO).{6}|...(XXX|OOO)...|.{6}(XXX|OOO)|X..X..X..|O..O..O..|.X..X..X.|.O..O..O.|..X..X..X|..O..O..O|X...X...X|O...O...O|..X.X.X..|..O.O.O..\")\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92949,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n\tstatic boolean regexTicTacToeWinChecker(String board) {\n\t\tdef matcher = board =~ \/((X...X...X)|(X..X..X)|(^..X.X.X)|^(...)*(XXX))|((O...O...O)|(O..O..O)|(^..O.O.O)|^(...)*(OOO))\/\n\t\treturn matcher.find()\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92950,"user_id":null,"body":"class RegexTicTacToeWinChecker {\n  static boolean regexTicTacToeWinChecker(board) {\n    def a = board.toLowerCase().trim()\n    a ==~ getRegexp('x') || a ==~ getRegexp('o')\n  }\n  \n  private static getRegexp(ch) {\n    \/.{3}$ch{3}.{3}|.{3,9}$ch{3}|$ch{3}.{3,9}|$ch.{3}$ch.{3}$ch|.?$ch.{2}$ch.{2}$ch.{1,2}|.{2}$ch.$ch.$ch.{2}|.{2}$ch.{2}$ch.{2}$ch\/\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"583710ccaa6717322c000105":[{"id":92951,"user_id":null,"body":"class Solution {\n  static simple_multiplication(number) {\n    return number % 2 == 0 ? number * 8  : number * 9;\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92952,"user_id":null,"body":"class Solution {\n  static simple_multiplication(number) {\n    number * (8 + (number & 1))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92953,"user_id":575,"body":"class Solution {\n  static simple_multiplication(number) {\n    number * (8 + number % 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92954,"user_id":713,"body":"class Solution {\n  static simple_multiplication(n) {\n    return n * (8 + n%2);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92955,"user_id":null,"body":"class Solution {\n  static simple_multiplication(number) {\n    def res = number % 2\n    if(res == 0){return number * 8}\n    else {return number * 9}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92956,"user_id":null,"body":"class Solution {\n  static simple_multiplication(n) {\n    return n * (8 + (n & 1))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92957,"user_id":null,"body":"class Solution {\n  static simple_multiplication(number) {\n    \/\/ your code\n    number%2 == 0 ? number*8 : number*9\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92958,"user_id":null,"body":"class Solution {\n    static simple_multiplication(number) {\n        return number * (number % 2 == 0 ? 8 : 9)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92959,"user_id":null,"body":"class Solution {\n  static simple_multiplication(n) {\n        if (n % 2 == 0){\n            return n * 8;\n        } else {\n          return n * 9;\n        }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92960,"user_id":null,"body":"class Solution {\n  static simple_multiplication(number) {\n    if (number % 2 == 0){\n      return number * 8\n      }\n    else {\n      return number * 9\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5848565e273af816fb000449":[{"id":92961,"user_id":null,"body":"class Kata {\n\tstatic def encrypt_this(text) {\n\tString[] words = text.split(\" \");\n\tArrayList<String> result = new ArrayList<String>();\n\n\tfor (String v : words)\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tStringBuilder temp = new StringBuilder();\n\n\t\tfor (int j = 0; j < v.length(); j++)\n\t\t{\n\t\t\tif (j == 0)\n\t\t\t{\n\t\t\t\tsb.append((int)v.charAt(0)).toString();\n\t\t\t}\n\n\t\t\telse if (j == 1)\n\t\t\t{\n\t\t\t\ttemp.append(v.charAt(j));\n\t\t\t\tsb.append(v.substring(v.length() - 1));\n\t\t\t}\n\n\t\t\telse if (j == v.length() - 1)\n\t\t\t{\n\t\t\t\tsb.append(temp);\n\t\t\t}\n\n\t\t\telse\n\t\t\t{\n\t\t\t\tsb.append(v.charAt(j));\n\t\t\t}\n\t\t}\n\n\t\tresult.add(sb.toString());\n\t}\n\n\treturn String.join(\" \", result);\n\t}\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92962,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) { \n        text.tokenize(\" \").collect {\n          int firstLetter = it[0]\n          if (it.size() == 1) {\n            return firstLetter\n          } else if (it.size() == 2) {\n            return firstLetter + it[1]\n          } else {\n            def secLetter = it[1]\n            def lastLetter = it[-1]\n            if(it.size() == 3) {\n              return firstLetter + lastLetter + secLetter\n            } else {\n              return firstLetter + lastLetter + it[2.. it.size() - 2] + secLetter\n            }\n          }\n        }.join(\" \");\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92963,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n        def words = text.split(\" \")\n        return words.collect {\n          if (it.size() == 1) return (int) it\n          if (it.size() == 2) return (int) it[0] + it[-1]\n          if (it.size() == 3) return (int) it[0] + it[2] + it[1]\n          return (int) it[0] + it[-1] + it[2..-2] + it[1]\n        }.join(\" \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92964,"user_id":null,"body":"class Kata {\n  static def encrypt_this(text) {\n    def array = []\n    text.split('\\\\s').each {\n        def word = changeTextLetter(it)\n        array << firstLetterWordToAscii(word)\n    }\n    array.join(' ')\n  }\n  \n  static def changeTextLetter(text) {\n    def array = text.toList()\n    def secondLetter = array[1]\n    array[1] = array.last()\n    array[array.size() - 1] = secondLetter\n    array.grep().join('')\n  }\n  \n  static def firstLetterWordToAscii(text) {\n    def array = []\n    text.split('\\\\s').each {\n        array = it.split('')\n        def firstLetter = (int)it[0]\n        array[0] = firstLetter\n    }\n    array.join('')\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92965,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n        def res = []\n        for(el in text.split(' '))\n        switch(el.size())\n        {\n                case 1:\n                res.add(\"${(el[0] as char) as int}\")\n                break\n                case 2:\n                res.add(\"${(el[0] as char) as int}${el[1]}\")\n                break\n                case 3:\n                res.add(\"${(el[0] as char) as int}${el[-1]}${el[1]}\") \n                break\n                default:\n                res.add(\"${(el[0] as char) as int}${el[-1]}${el[2..-2]}${el[1]}\")\n        }  \n      return res.join(\" \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92966,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n      List<String> encryptedList = new ArrayList<>()\n      text.split(' ').each{ currText ->\n        String encryptedText = ''\n        char[] charArray = currText.toCharArray()\n        charArray.eachWithIndex{ currChar, idx ->\n          if(idx == 0){\n            encryptedText = currChar as byte\n          } else if(idx == 1){\n            encryptedText += charArray[charArray.size() - 1]\n          } else if(idx == charArray.size() - 1){\n            encryptedText += charArray[1]\n          } else {\n            encryptedText += currChar\n          }\n        }\n        encryptedList.add(encryptedText)\n      }\n      return encryptedList.join(' ')\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92967,"user_id":null,"body":"class Kata {\n  \n    static def encrypt_this(text) {\n      \n        text.split(\" \")\n                .collect { String it -> it.toList() }\n                .collect { List<String> it -> it.size() > 1 ? it.swap(1, it.size() - 1) : it}\n                .collect { List<String> it -> (int) it[0] + it.subList(1, it.size()).join() }\n                .join(\" \")\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92968,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n      def output = \"\"\n      text.split(\" \").each{\n          if(it.length() == 1) {\n              output += (int)it +\" \"\n          }else if(it.length() == 2){\n              output += (int)it[0]+it[1] + \" \"\n          }else{\n              output += \"${(int)it[0]+it[it.length()-1] + it.substring(2,it.length()-1) + it[1]} \"\n          }\n      }\n      output.trim()\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92969,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n      String[] textArr = text.split(\" \")\n      String msg = \"\"\n      if (textArr.size() > 0) {\n        textArr.eachWithIndex { word, index ->\n          String nWord = \"\"\n          \n          word.eachWithIndex { letter, lIndex -> \n            if (lIndex == 0) {\n              nWord += (int) letter            \n            }\n            else if (lIndex == 1 ) {\n              nWord += word[word.size() - 1]\n            }\n            else if (lIndex == (word.size() - 1) && word.size() > 1) {\n              nWord += word[1]\n            } else {\n              nWord += letter\n            }\n          }\n          \n          msg += nWord\n          if (textArr.size() > 1 && index != (textArr.size() - 1) ) {\n            msg += \" \"\n          }\n          \n        }\n      }\n      msg\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92970,"user_id":null,"body":"class Kata {\n    static def encrypt_this(text) {\n     def stxt = text.split(' ')\n      def result = []\n      stxt.each{\n        if(it.length() > 1){\n          char[] c = it.toCharArray()\n           char temp = c[1]         \n        byte[] bytes = it[0].getBytes(\"US-ASCII\")\n        c[1] = c[-1]\n         c[-1] = temp       \n          String swappedString = new String(c);\n         def ls = swappedString.split(\"\")\n        ls[0] = bytes.toString()\n         def lst =  ls.join(\"\") \n        result << lst \n        }else{\n          result << it.getBytes(\"US-ASCII\")\n        }       \n      }\n      return result.join(\" \").replaceAll(\"\\\\[|\\\\]\", \"\")\n      }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58485a43d750d23bad0000e6":[{"id":92971,"user_id":759,"body":"class Kata {\n  static String fizz_buzz_cuckoo_clock(String time) {\n    def (int h, int m) = time.tokenize(':')*.toInteger()\n    m == 0 ? ([\"Cuckoo\"] * ((h + 11) % 12 + 1)).join(' ') :\n      m == 30 ? \"Cuckoo\" :\n        m % 15 == 0 ? \"Fizz Buzz\" :\n          m % 3 == 0 ? \"Fizz\" :\n            m % 5 == 0 ? \"Buzz\" : \"tick\"\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92972,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n        int hour = time[0..1].toInteger()\n      if(hour > 12){\n        hour = hour -12\n      }\n      if(hour == 00){\n        hour = 12\n      }\n        int minutes = time[3..4].toInteger()\n        minutes == 00 ? String.join(\" \", Collections.nCopies(hour, \"Cuckoo\")) :\n        minutes == 30 ? \"Cuckoo\" :\n        minutes % 3 == 0 && minutes % 5 == 0 ? \"Fizz Buzz\" :\n        minutes % 3 == 0 ? \"Fizz\" :\n        minutes % 5 == 0 ? \"Buzz\" : \"tick\"\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92973,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n      \n      def timeArray = time.split(\":\")\n      def min = timeArray[1].toInteger()\n      def hrs = timeArray[0].toInteger()\n      \n      if (hrs == 0){\n          hrs = 12\n        }\n      else if (hrs > 12){\n          hrs = hrs - 12\n        }\n      if (min == 0){\n        return \"Cuckoo \" * (hrs - 1) + \"Cuckoo\"\n      }\n      else if (min == 30){\n        return \"Cuckoo\"\n      }\n      else if (min % 3 == 0 && min % 5 == 0){\n        return \"Fizz Buzz\"\n      }\n      else if (min % 3 == 0){\n        return \"Fizz\"\n      }\n      else if (min % 5 == 0){\n        return \"Buzz\"\n      }\n      else{\n        return \"tick\"\n      }\n      }\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92974,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n      int hours = time.substring(0,2).toInteger(), mins = time.substring(3).toInteger()\n      def output = \"\"\n      \n      if(hours > 12 || hours == 0) hours -= 12\n      \n      if(mins == 0) return (\" Cuckoo\"*Math.abs(hours)).substring(1)\n      \n      if(mins == 30) return \"Cuckoo\"\n      \n      if (mins % 3 == 0) output += ' Fizz'\n      \n      if (mins % 5 == 0) output += ' Buzz'\n      \n      if(!output) return \"tick\"\n      \n      output.substring(1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92975,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n      def (int h, int m) = time.tokenize(':')*.toInteger()\n        m == 0 ? ([\"Cuckoo\"] * ((h +11)%12 + 1)).join(' '):\n                m == 30 ? \"Cuckoo\":\n                        m % 15 == 0 ? \"Fizz Buzz\":\n                                m % 3 == 0 ? \"Fizz\":\n                                        m % 5 == 0 ? \"Buzz\":\"tick\"\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92976,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n          def hours = getHours(time)\n        def minutes = time.substring(3).toInteger()\n        def result = \"\"\n        if (minutes == 0) {\n            return (\" Cuckoo\" * hours).trim()\n        }\n        if (minutes == 30) {\n            return \"Cuckoo\"\n        }\n\n        if (minutes % 3 == 0) {\n            result += \"Fizz\"\n        }\n        if (minutes % 5 == 0) {\n            result += \" Buzz\"\n        }\n        if (result.empty) {\n            return \"tick\"\n        }\n        result.trim()\n    }\n\n    static int getHours(String time) {\n        def hours = time.substring(0, 2).toInteger() > 12 ? time.substring(0, 2).toInteger() - 12 : time.substring(0, 2).toInteger()\n        if (hours == 0) {\n            hours = 12\n        }\n        return hours\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92977,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n      def hour = new Date().parse(\"hh:mm\", time).getHours() != 0 ? new Date().parse(\"hh:mm\", time).getHours() :12\n      def minutes = new Date().parse(\"hh:mm\", time).getMinutes()\n      \n      println time\n      println \"$hour:$minutes\"\n      if (minutes == 0) {\n        def resp = (hour<13 \n                ? (\"Cuckoo \".multiply(hour)).substring(0, (\"Cuckoo \".multiply(hour)).length()-1)\n                : (\"Cuckoo \".multiply(hour-12)).substring(0, (\"Cuckoo \".multiply(hour-12)).length()-1))\n        println \"$resp!\"\n        return resp\n      }\n      else if (minutes == 30) return \"Cuckoo\"\n      else if (minutes%3 == 0 && minutes % 5 == 0) return \"Fizz Buzz\"\n      else if (minutes%3 ==0) return \"Fizz\"\n      else if (minutes%5 ==0) return \"Buzz\"\n      else return \"tick\"\n       }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92978,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n      List clock = time.split(':')\n      int minutes = Integer.parseInt(clock[1])\n      int hours = Integer.parseInt(clock[0])\n      List result = []\n      \n      if (!minutes)       { return getCuckoo(hours%12 ?: 12) }\n      if (minutes == 30)  { return getCuckoo(1) }\n      \n      if (!(minutes%3))   { result << 'Fizz' }\n      if (!(minutes%5))   { result << 'Buzz' }\n      if (!result)        { result << 'tick' }\n      result.join(' ')\n    }  \n  \n    private static String getCuckoo (int times) { (1..times).collect{'Cuckoo'}.join(' ') }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92979,"user_id":null,"body":"class Kata {\n    static fizz_buzz_cuckoo_clock(time) {\n        def hours = Integer.parseInt(time.substring(0, 2))\n        hours = hours > 12 ? hours - 12 : hours\n        def minutes = Integer.parseInt(time.substring(3))\n      \n        if (minutes == 30) return \"Cuckoo\"\n        if (minutes == 0) \n            if (hours == 0) return String.join(\" \", Collections.nCopies(12, \"Cuckoo\"))\n            else return String.join(\" \", Collections.nCopies(hours, \"Cuckoo\"))\n        if (minutes % 3 == 0 && minutes % 5 == 0) return \"Fizz Buzz\"\n        if (minutes % 3 == 0) return \"Fizz\"\n        if (minutes % 5 == 0) return \"Buzz\"\n        \n        return \"tick\"\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92980,"user_id":null,"body":"class Kata {\n    static def fizz_buzz_cuckoo_clock(time) {\n        def currentTime = time.split(\":\")\n        def hours = currentTime[0].toInteger()\n        def minutes = currentTime[1].toInteger()\n        if(minutes == 30){\n          return \"Cuckoo\"\n        }else if(minutes == 0){\n          return hours % 12 == 0 ? (\"Cuckoo \" * 12).replaceAll(\/ +$\/, '') : (\"Cuckoo \" * (hours % 12)).replaceAll(\/ +$\/, '')\n        }else if(minutes % 3 == 0 && minutes % 5 == 0){\n          return \"Fizz Buzz\"\n        }else if (minutes % 5 == 0){\n          return \"Buzz\"\n        }else if(minutes % 3 == 0){\n          return \"Fizz\"\n        }else{\n          return \"tick\"\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"584e936ae82520a397000027":[{"id":92981,"user_id":null,"body":"class Kata {\n    static def procArrII(arr) {\n      int n = arr.groupBy { it }.collect { k, v -> v.size() }.min()\n      int v = arr.unique().size()\n      if(n > v) return [v**n]\n      int nodo = ((v-n+1)..v as ArrayList).inject{a,b -> a * b}\n      [v**n, v**n - nodo, arr.unique().sort().reverse().take(n).join() as int]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92982,"user_id":575,"body":"class Kata {\n    static def procArrII(arr) {\n        def digitCounts = [:]\n        arr.each { d ->\n            if (d in digitCounts) {\n                digitCounts[d] += 1\n            } else {\n                digitCounts[d] = 1\n            }\n        }\n        def n = digitCounts.values().min()\n        def a = digitCounts.size() ** n\n        if (digitCounts.size() < n) {\n            return [a]\n        }\n        def factorial = { k -> k == 0 ? 1 : (1..k).inject(1) { x, y -> x * y } }\n        return [\n            a,\n            a - factorial(digitCounts.size()) \/ factorial(digitCounts.size() - n),\n            digitCounts.keySet().sort().reverse()[0..<n].join().toInteger()\n        ]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"584e93a70f60247eb8000132":[{"id":92983,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def lines = s.split('\n')\n    lines.every { line ->\n      line == '.' * lines.size()\n    }\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92984,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def n = s.split(\"\n\").every{ el -> el.size() == s.split(\"\n\").size() } \n    return (n && (s.replace(\"\n\", '').replace('.', '') == ''))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92985,"user_id":1201,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def split = s.split('\n')\n    return split.every{row -> row.length() == split.size() && row.matches(\"\\\\.+\")}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92986,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def c = (s =~ \/\n\/).count\n    s ==~ \/(\\.{${c+1}}\n){$c}\\.{${c+1}}\/\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92987,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def tokens = s.tokenize()\n    !s.find(\/[^.\n]\/) && tokens.toSet().size() == 1 && tokens.size() == tokens[0].size()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92988,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    if(s.contains(\",\") || ( s.size() % 2 == 0)){\n      return false\n    }\ndef data = s.split( '\n')\nprint data\ndef list = []\ndata.each{\n    list << it.size()\n}\n\nif(((list.sum()) \/ list.size()) == list[0]){\n            return true\n        }else{\n            return false\n        }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92989,"user_id":null,"body":"class Kata{\n    static boolean perfectSquare(s){\n        def dots = s.split('\n')\n        def checkAllDots = dots[0].every { it == '.' }\n        def checkSize = dots[0].size() == dots.size()\n        def checkRows = dots.every { it == dots[0] }\n      \n        checkAllDots && checkSize && checkRows\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92990,"user_id":1492,"body":"class Kata{\n  static boolean perfectSquare(s){\n    def rows = s.split(\"\\\n\")\n    \n    def size = rows.size()\n    def row1Size = rows[0].size()\n    \n    if (size != row1Size){\n      println(\"xs\")\n      return false\n    }\n    \n    for (row in rows){\n      if (row.replace(\".\", \"\").size() >= 1 || row.size() != size){\n        \/\/println(row as Set)\n        return false\n      }\n    }\n    \n    \n    return true\n    \n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92991,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    s.replaceAll(\"\n\", '').matches(\"[.]+\") && s.split().size() == s.split()[0].size()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92992,"user_id":null,"body":"class Kata{\n  static boolean perfectSquare(s){\n    if (s ==~ \/[\\.\n]*\/) {\n      def rows = s.split('\n')\n      rows.every {it.size() == rows.size()}\n    }\n    else false\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"585a1a227cb58d8d740001c3":[{"id":92993,"user_id":575,"body":"class Kata {\n    static def repeater(string, n) {\n        string * n\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92994,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n    return string * n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92995,"user_id":53,"body":"class Kata {\n    static def repeater(s, n) {\n        return s * n;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92996,"user_id":759,"body":"class Kata {\n    @groovy.transform.CompileStatic\n    static String repeater(String string, int n) {\n        string * n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92997,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n        def subString = string * n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92998,"user_id":null,"body":"class Kata {\n    static def repeater(s, n) {\n        s*n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":92999,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n      def resp = \"\"\n      1.upto(n){resp += string}    \n      return resp}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93000,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n        def repeated = \"\"\n        n.times{ repeated += string }\n        return repeated\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93001,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n      def newStr = \"\";\n        for(int i = 0; i < n; i++) {\n          newStr+=string;\n      }\n      return newStr;\n}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93002,"user_id":null,"body":"class Kata {\n    static def repeater(string, n) {\n      def result = \"\"\n        for(def i = 0; i < n; i++){\n          result += string\n        }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5862f663b4e9d6f12b00003b":[{"id":93003,"user_id":1566,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n        return (blueStart -= bluePulled) \/ (blueStart + redStart - redPulled)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93004,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n      float blue = blueStart - bluePulled\n      float total = blue + redStart - redPulled\n      blue \/ total\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93005,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n      int total = blueStart + redStart\n      \n      return (blueStart - bluePulled) \/ (total - redPulled - bluePulled)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93006,"user_id":null,"body":"class Kata {\n    static def guessBlue(bS, rS, bP, rP) {\n        (bS-bP)\/(bS-bP+rS-rP)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93007,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePilled, redPilled) {\n        return (blueStart - bluePilled) \/ (blueStart + redStart - bluePilled - redPilled)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93008,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n      \/*\n      return the probability of drawing a blue marble, expressed as a float\n      *\/\n      def blue = blueStart - bluePulled\n      def red = redStart - redPulled\n      return blue \/ (red + blue)\n      \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93009,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n        1\/(blueStart + redStart - bluePulled - redPulled)*(blueStart - bluePulled)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93010,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n       def blueTotal = blueStart - bluePulled\n       def redTotal = redStart - redPulled\n      return blueTotal \/ (blueTotal + redTotal)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93011,"user_id":null,"body":"class Kata {\n  \n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n      def all = blueStart + redStart\n      def nowAll = all - (bluePulled + redPulled)\n      double blueQuote = (blueStart - bluePulled) \/ nowAll\n      blueQuote\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93012,"user_id":null,"body":"class Kata {\n    static def guessBlue(blueStart, redStart, bluePulled, redPulled) {\n        (blueStart-bluePulled)\/(blueStart + redStart - bluePulled - redPulled)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58630e2ae88af44d2b0000ea":[{"id":93013,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        !(wallLength%pixelSize)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93014,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        return wallLength % pixelSize == 0 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93015,"user_id":null,"body":"class Kata {\n    static def is_divisible(w, p) {\n         w % p == 0\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93016,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        \/\/ Implement me! :)\n      wallLength%pixelSize == 0 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93017,"user_id":null,"body":"class Kata {\n    static def is_divisible(w, p) {\n        w % p == 0 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93018,"user_id":50,"body":"class Kata {\n    static def is_divisible(a, b) {\n      return a%b==0\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93019,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n      if (wallLength % pixelSize == 0 ){\n      \n        return true\n      }\n      \n      else{\n        return false\n      }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93020,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        \/\/ Implement me! :)\n        \n        return wallLength % pixelSize == 0 ? true : false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93021,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        wallLength%pixelSize==0? true:false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93022,"user_id":null,"body":"class Kata {\n    static def is_divisible(wallLength, pixelSize) {\n        return wallLength % pixelSize == 0 \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5868b2de442e3fb2bb000119":[{"id":93023,"user_id":null,"body":"class ClosestWeight {\n    \n  public static int[][] closest(final String strng) {\n    getSmallestPair(getGroupsPairs(getWeights(strng)))\n  }\n  \n  static List getWeights(String strng) {\n    strng.tokenize(' ').withIndex().collect { str, i ->\n      [str.collect { new Integer(it) }.sum(), i, str] as int[]\n    }\n  }\n  \n  static Map getGroupsPairs(List weights) {\n    weights.collectMany { w1 ->\n      weights.findAll { it != w1 }.collect { w2 -> [w1, w2] }\n    }.groupBy { Math.abs(it[0][0] - it[1][0]) }\n  }\n  \n  static List getSmallestPair(Map groupedPairs) {\n    groupedPairs ?\n      groupedPairs[groupedPairs.keySet().min()].sort { a, b ->\n        a[0][0] <=> b[0][0] ?: a[0][1] <=> b[0][1]\n      }.first() :\n      []\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93024,"user_id":null,"body":"class ClosestWeight {\n\n static int[][] closest(final String strng) {\n    List<String> nums = parseString(strng)\n    if (nums.size() < 2) {\n      return [[0, 0, 0], [0, 0, 0]]\n    }\n\n    List<Ele> eles = parseToEle(nums)\n    eles.sort()\n    List<Couple> couples = parseCouple(eles)\n    couples.sort()\n    return couples[0].result\n  }\n\n  static List<Couple> parseCouple(List<Ele> eles) {\n    List<Couple> couples = []\n    for (int i = 0; i < eles.size() - 1; i++) {\n      def ele1 = eles[i]\n      def ele2 = eles[i + 1]\n      Couple couple = new Couple()\n      couple.with {\n        weightMinus = ele2.weight - ele1.weight\n        weightSum = ele2.weight + ele1.weight\n        indexSum = ele2.index + ele1.index\n        result = [[ele1.weight, ele1.index, ele1.raw], [ele2.weight, ele2.index, ele2.raw]]\n      }\n      couples << couple\n    }\n\n    return couples\n  }\n\n  static List<Ele> parseToEle(List<String> nums) {\n    List<Ele> eles = []\n    for (int i = 0; i < nums.size(); i++) {\n      String num = nums[i]\n      int sum = 0\n      num.each { it ->\n        sum += (it as int)\n      }\n      Ele ele = new Ele()\n      ele.with {\n        weight = sum\n        index = i\n        raw = num as int\n      }\n      eles << ele\n    }\n\n    return eles\n  }\n\n  static List<String> parseString(String strng) {\n    List<String> nums = new ArrayList<>()\n    String[] tmpArr = strng.split(' ')\n    for (def ele : tmpArr) {\n      String tmp = ele.trim()\n      if (tmp.size() != 0) {\n        nums.add(tmp)\n      }\n    }\n    return nums\n  }\n\n\n  static class Ele implements Comparable<Ele> {\n    int weight\n    int index\n    int raw\n\n    @Override\n    int compareTo(Ele o) {\n      int tmp = Integer.compare(this.weight, o.weight)\n      if (tmp != 0) {\n        return tmp\n      }\n      return Integer.compare(this.index, o.index)\n    }\n  }\n\n  static class Couple implements Comparable<Couple> {\n    int weightMinus\n    int weightSum\n    int indexSum\n    int[][] result\n\n    @Override\n    int compareTo(Couple o) {\n      int tmp = Integer.compare(this.weightMinus, o.weightMinus)\n      if (tmp != 0) {\n        return tmp\n      }\n      tmp = Integer.compare(this.weightSum, o.weightSum)\n      if (tmp != 0) {\n        return tmp\n      }\n\n      return Integer.compare(this.indexSum, o.indexSum)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93025,"user_id":null,"body":"class ClosestWeight {\n    \n    public static int[][] closest(final String strng) {\n      \/\/ Convert the input string to array of the desired subarray format\n      int[][] stats = (strng.split(\" \") as List).withIndex().collect { n, index ->\n        [n.collect { it as Integer }.sum(), index, n as Integer]\n      }\n      \n      \/\/ Traverse and identify the two closest subarrays, falling through to tiebreaker \n      \/\/ criteria if the primary criteria is a tie\n      Tuple2<int[], int[]> closest = null\n      for (int i = 0; i < stats.size(); i++) {\n        for (int j = i + 1; j < stats.size(); j++) {\n          if (closest == null) {\n            closest = new Tuple2(stats[i], stats[j])\n          } else {\n            int weightDiff = Math.abs(stats[i][0] - stats[j][0])\n            int weightSum = stats[i][0] + stats[j][0]\n            int indexSum = stats[i][1] + stats[j][1]\n\n            int closestWeightDiff = Math.abs(closest.getFirst()[0] - closest.getSecond()[0])\n            int closestWeightSum = closest.getFirst()[0] + closest.getSecond()[0]\n            int closestIndexSum = closest.getFirst()[1] + closest.getSecond()[1]\n\n            if (closest == null || weightDiff < closestWeightDiff) {\n              closest = new Tuple2(stats[i], stats[j])\n            } else if (weightDiff == closestWeightDiff) {\n              if (weightSum < closestWeightSum) {\n                closest = new Tuple2(stats[i], stats[j])\n              } else if (weightSum == closestWeightSum && indexSum < closestIndexSum) {\n                closest = new Tuple2(stats[i], stats[j])\n              }\n            }\n          }\n        } \n      }\n      \n      [closest.getFirst(), closest.getSecond()].sort { a, b -> \n        a[0] <=> b[0] != 0 ? a[0] <=> b[0] : a[1] <=> b[1]\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93026,"user_id":null,"body":"class WeightElement {\n    private int n\n    private int i\n    WeightElement( int number, int index){\n        n = number\n        i = index\n    }\n    int originalNumber() { return n }\n    int index() { return i }\n    int weight() {\n        n.toString().toCharArray().collect{ it.toString().toInteger() }.sum()\n    }\n}\nclass ElementPair {\n    private WeightElement[] e = new WeightElement[2]\n    ElementPair ( WeightElement weightElement1, WeightElement weightElement2 ) {\n        e[0] = weightElement1\n        e[1] = weightElement2\n    }\n    int sumOfWeight() {\n        return e*.weight().sum()\n    }\n    int sumOfIndex() {\n        return e*.index().sum()\n    }\n    WeightElement[] elements() {\n        return e\n    }\n    int weightDistance() {\n        return ( e[0].weight() - e[1].weight() ).abs()\n    }\n}\n\nclass ClosestWeight {\n\n    public static int[][] closest(final String strng) {\n        String[] strArray = strng.split(\" \")\n        WeightElement[] e = new WeightElement[strArray.size()]\n        strArray.eachWithIndex{ String entry, int i ->\n            e[i] = new WeightElement( entry.toInteger(), i )\n        }\n        def list1 = []\n        int minDistance = -1\n        e.each{ e1->\n            e.findAll{ e2->\n                e2.index() > e1.index()\n            }.each{ e2->\n                int dist = ( e1.weight() - e2.weight() ).abs()\n                if( minDistance==-1 || minDistance >= dist ) {\n                    list1.add( new ElementPair( e1, e2 ) )\n                    minDistance = dist\n                }\n            }\n        }\n        def list2 = list1.findAll { ElementPair p->\n            p.weightDistance() == minDistance\n        }\n        def list3 = list2.findAll { ElementPair p->\n            p.sumOfWeight() == list2.collect{ ElementPair p2-> p2.sumOfWeight() }.min()\n        }\n        ElementPair finalPair = list3.find { ElementPair p ->\n            p.sumOfIndex() == list3.collect{ ElementPair p2-> p2.sumOfIndex() }.min()\n        }\n        WeightElement[] finalElements = finalPair.elements()\n        finalElements = finalElements.sort{ it.weight() }\n        return finalElements.collect{ [ it.weight(), it.index(), it.originalNumber() ] }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93027,"user_id":492,"body":"import java.util.Arrays;\nimport java.util.Comparator;\n\nclass ClosestWeight {\n    \n    private static int getSum(final String str) {\n        int sm = 0;\n        for (int i = 0; i < str.length(); i++){\n          char c = str.charAt(i);        \n          sm += Character.getNumericValue(c);\n        }\n        return sm;\n    }\n    public static int[][] closest(final String strng) {\n        if (strng.equals(\"\")) return [];\n        String[] nums = strng.split(\" \");\n        int[][] l = new int[nums.length][3];\n        int i = 0;\n        for (String n : nums) {\n            l[i][0] = getSum(n); l[i][1] = i; l[i][2] = Integer.parseInt(n);\n            i++;\n        }\n        Arrays.sort(l, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n                int cp = o1[0] - o2[0];\n                if (cp == 0)\n                    return Integer.compare(o1[1], o2[1]);\n                if (cp < 0) return -1; else return 1;\n            }\n        });\n        i = 1; int mn = Integer.MAX_VALUE; int ndx = -1;\n        while (i < l.length) {\n            int a = l[i][0] - l[i - 1][0];\n            if (a < mn) {\n                mn = a; ndx = i;\n            }\n            i++;\n        }\n        int[][] res = new int[2][];\n        res[0] = l[ndx - 1]; res[1] = l[ndx];\n        return res;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"586d6cefbcc21eed7a001155":[{"id":93028,"user_id":575,"body":"class Kata {\n    static def longestRepetition(chars) {\n        def longest = chars.findAll(\/(.)\\1*\/).max { it.size() }\n        longest == null ? ['', 0] : [longest[0], longest.size()]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93029,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n      if(chars.length() == 0) return ['',0];\n      int counter = 0;\n      int l = 0;\n      String current = chars[0];\n      String c = chars[0];\n      chars.eachWithIndex {\n        it, index ->\n        if(it == current){\n          counter++;\n          if(counter > l) {\n            l = counter;\n            c = it;\n          }\n        } else {\n          counter = 1;\n          current = it;\n        }\n      }\n       [c, l]; \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93030,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n      if(chars.size() == 0){\n        return ['',0]\n      }\n      int maxL = 0\n      char maxC = ' '\n      \n      char currC = ' '\n      int currL = 0\n      for(def tmp in chars){\n        if(currC == tmp) {\n          currL++\n        } else {\n          if(currL > maxL){\n            maxC = currC\n            maxL = currL\n          }\n          currL = 1\n          currC = tmp\n        }\n      }\n      \n      if(currL > maxL){\n        maxC = currC\n        maxL = currL\n      }\n      return [maxC, maxL]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93031,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n        def curChar = ''\n        def curCount = 0\n        chars.collect {                 \/\/ for each char, return current subsequence\n            if (curChar == it) {\n                curCount++\n            } else {\n                curChar = it\n                curCount = 1\n            }\n            return [curChar, curCount]\n        }.inject(['', 0]) { curr, next ->           \/\/ max, but take first element\n            (next[1] > curr[1]) ? next : curr\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93032,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {     \n       chars? chars.findAll(\/(.)\\1*\/).collect{[it[0], it.size()]}.max { it[1] } : ['', 0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93033,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n       chars? chars.findAll(\/(.)\\1{1,}|(.)\/).collect{[it[0], it.size()]}.max { it[1] } : ['', 0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93034,"user_id":null,"body":"class Kata{\n    static def longestRepetition(String chars){\n      \/*Intialisation of needed variables *\/\n        def resultat = []\n        def lst1 = []\n        def result = []\n        lst1 = chars\n        int len = lst1.length()\n        int l = 1\n      \/*separation for case with empty string*\/\n        if (len == 0){\n          String c = \"\"\n          int L = 0\n          resultat.add(c)\n          resultat.add(L)\n        }else {\n        \n        for (int i = 0; i < len; i++){\n            result[i] = 0\n            int k = i +1\n            l = 1\n            for (k; k < len; k++) {\n                if (lst1[i] == lst1[k]) {\n                    l++\n                    result[i] = l\n                } else\n                if (lst1[i] != lst1[k]) {\n                    result[i] = l\n                    k = len\n                    l = 1\n            }}\n                }\n        int ind = result.indexOf(result.max())\n        char c = lst1[ind]\n        int L = result[ind]\n        \n        resultat.add(c)\n        resultat.add(L)\n        }\n        println(resultat)\n        return (resultat)\n\n            }}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93035,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n      String longestRepeatedChar = ''\n      int numberOfRepetition = 0\n      String prevChar = ''\n      int tmpCount = 0\n      chars.toCharArray().eachWithIndex{ currChar, idx ->\n        if(idx == 0){\n          prevChar = currChar\n          tmpCount = 1\n        } else if(prevChar == currChar && chars.length() != idx + 1){\n          tmpCount += 1\n        } else if(chars.length() != idx + 1 || chars.length() == 2) {\n          if(tmpCount > numberOfRepetition){\n            longestRepeatedChar = prevChar\n            numberOfRepetition = tmpCount\n          }\n          tmpCount = 1\n          prevChar = currChar\n        } else {\n          tmpCount += 1\n          if(tmpCount > numberOfRepetition){\n            longestRepeatedChar = prevChar\n            numberOfRepetition = tmpCount\n          }\n        }\n      }\n      return [longestRepeatedChar, numberOfRepetition]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93036,"user_id":null,"body":"class Kata {\n    static def longestRepetition(chars) {\n      if (!chars) return ['', 0]\n      int max = 0\n      char maxC = '?'\n      int sum = 0\n      char prev = chars[0]\n      chars.each {\n         it ->\n         if (it == prev) {\n           sum++\n           if (sum > max) {\n             max = sum\n             maxC = it\n           }  \n         } else {\n           sum = 1\n         }\n         prev = it\n      }\n      [maxC, max]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93037,"user_id":492,"body":"class Kata {\n    static def longestRepetition(s) {\n        if (s == \"\") {\n            return [\"\", 0];\n        }\n        int maxCount = 0;\n        int currentCount = 0;\n        char currentChar = s.charAt(0);\n        char maxChar = currentChar;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == currentChar) {\n                currentCount++;\n                if (currentCount > maxCount) {\n                    maxCount = currentCount;\n                    maxChar = currentChar;\n                }\n            } else {\n                currentCount = 1;\n            }\n            currentChar = s.charAt(i);\n        }\n        return [Character.toString(maxChar), maxCount];\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5879f95892074d769f000272":[{"id":93038,"user_id":492,"body":"class Biker {\n    public static int temps(double v0, double slope, double dTot) {\n        final double GRAVITYACC = 9.81 * 3.6 * 60.0; \/\/ gravity acceleration\n        final double DRAG = 60.0 * 0.3 \/ 3.6;        \/\/ force applied by air on the cyclist\n        final double DELTA_T = 1.0 \/ 60.0;           \/\/ in minutes\n        final double DWATTS = 0.5;                   \/\/ power loss in Watts \/ minute\n        final double GTHRUST = 60 * 3.6 * 3.6;       \/\/ acceleration due to biker's power\n        final double MASS = 80.0;                    \/\/ biker's mass\n        final double WATTS0 = 225.0;                 \/\/ initial biker's power\n        \n        double t = 0.0;          \/\/ time in minutes\n        double d = 0.0;          \/\/ distance traveled in km\n        double v = v0;           \/\/ initial speed km\/h\n        double gamma = 0.0;      \/\/ acceleration in km\/h\/minute\n        double watts = WATTS0;   \/\/ biker's power (watts at time t + deltaT is watts at time t - dWatts * deltaT)\n  \n        double slopeGravityAcc = -GRAVITYACC * Math.sin(Math.atan(slope \/ 100.0));\n        while (d <= dTot) {\n            t += DELTA_T;\n            \/\/ new power\n            watts -= DWATTS * DELTA_T; \/\/ tiredness\n            \/\/ earth gravity due to slope and drag due to air resistance\n            gamma = slopeGravityAcc - DRAG * Math.abs(v) * Math.abs(v) \/ MASS;\n            \/\/ acceleration due to biker's power\n            if ((watts > 0.0) && (v > 0.0)) {\n                gamma += GTHRUST * watts \/ (v * MASS);\n            }\n            \/\/ acceleration too small -> acc = 0\n            if (Math.abs(gamma) <= 1e-5) {\n                gamma = 0.0;\n            } else {\n                v += gamma * DELTA_T;\n            }\n            \/\/ new distance\n            d +=  v  * DELTA_T \/ 60.0; \/\/ v in km\/h, deltaT in minutes\n            \/\/ speed too slow, John stops\n            if (v - 3.0 <= 1e-2) {\n                return -1;\n            }\n        }\n        return (int)Math.round(t);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93039,"user_id":492,"body":"class Biker {\n    public static int temps(double v0, double slope, double dTot) {\n        final double GRAVITYACC = 9.81 * 3.6 * 60.0; \/\/ gravity acceleration\n        final double DRAG = 60.0 * 0.3 \/ 3.6;        \/\/ force applied by air on the cyclist\n        final double DELTA_T = 1.0 \/ 60.0;           \/\/ in minutes\n        final double DWATTS = 0.5;                   \/\/ power loss in Watts \/ minute\n        final double GTHRUST = 60 * 3.6 * 3.6;       \/\/ acceleration due to biker's power\n        final double MASS = 80.0;                    \/\/ biker's mass\n        final double WATTS0 = 225.0;                 \/\/ initial biker's power\n        \n        double t = 0.0;          \/\/ time in minutes\n        double d = 0.0;          \/\/ distance traveled in km\n        double v = v0;           \/\/ initial speed km\/h\n        double gamma = 0.0;      \/\/ acceleration in km\/h\/minute\n        double watts = WATTS0;   \/\/ biker's power (watts at time t + deltaT is watts at time t - dWatts * deltaT)\n  \n        double slopeGravityAcc = -GRAVITYACC * Math.sin(Math.atan(slope \/ 100.0));\n        while (d <= dTot) {\n            t += DELTA_T;\n            \/\/ new power\n            watts -= DWATTS * DELTA_T; \/\/ tiredness\n            \/\/ earth gravity due to slope and drag due to air resistance\n            gamma = slopeGravityAcc - DRAG * Math.abs(v) * Math.abs(v) \/ MASS;\n            \/\/ acceleration due to biker's power\n            if ((watts > 0.0) && (v > 0.0)) {\n                gamma += GTHRUST * watts \/ (v * MASS);\n            }\n            \/\/ acceleration too small -> acc = 0\n            if (Math.abs(gamma) <= 1e-5) {\n                gamma = 0.0;\n            } else {\n                v += gamma * DELTA_T;\n            }\n            \/\/ new distance\n            d +=  v  * DELTA_T \/ 60.0; \/\/ v in km\/h, deltaT in minutes\n            \/\/ speed too slow, John stops\n            if (v - 3.0 <= 1e-2) {\n                return -1;\n            }\n        }\n        return (int)Math.round(t);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"588417e576933b0ec9000045":[{"id":93040,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n    \n    int rowPos = totRows - row;\n    int colPos = totCols - col;\n    return colPos == 0 ? rowPos : (totCols -(col -1) )*(rowPos)\n    \n        \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93041,"user_id":492,"body":"class Kata {\n    static def seats_in_theater(nCols, nRows, col, row) {\n        return (nCols-col+1) * (nRows - row)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93042,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n        (totCols - --col) * (totRows - row)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93043,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n\n        def newColNumber = totCols - col + 1;\n        def newRowNumber = totRows - row;\n\n        return newColNumber * newRowNumber;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93044,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n       return ( (totCols - (col -1)) * (totRows - row) )\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93045,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n        (totRows-row)*(totCols-col+1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93046,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n        return ((totCols+1) - col) * (totRows - row);\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93047,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n   \n   int rowPos = totRows - row\n   \n   return totCols - col == 0 ? rowPos : (totCols - (col - 1)) * (totRows - row)\n   }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93048,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n        if(totCols - col == 0){\n          return totRows - row\n        }\n        else{\n          return(totCols - (col -1)) * (totRows - row)\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93049,"user_id":null,"body":"class Kata {\n    static def seats_in_theater(totCols, totRows, col, row) {\n        (totRows - row) * (1 + totCols - col)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58844a13aa037ff143000072":[{"id":93050,"user_id":null,"body":"class Kata {\n    static def willYou(y,b,l) { (y&&b)!=l }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93051,"user_id":575,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        (young&&beautiful)!=loved\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93052,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        loved != (young && beautiful)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93053,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n      loved && (young && !beautiful || !young && beautiful || !young && !beautiful)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93054,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        if (young == true && beautiful == true) {\n          if (loved == true) {\n            return false\n          } else {\n            return true\n          }  \n        } else {\n          if (loved == true) {\n            return true\n          } else {\n            return false\n          }  \n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93055,"user_id":1492,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        if (young && beautiful) {return !loved}\n        if (loved && (!beautiful || !young)) { return true}\n        return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93056,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        (young && beautiful && !loved) || (loved && !(young && beautiful)) \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93057,"user_id":148,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        if (young && beautiful && !loved) {\n            return true\n        }\n        if (loved && (!young || !beautiful)) {\n            return true\n        }\n        return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93058,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        if(!young && !beautiful && !loved || young && beautiful && loved ){\n            return false\n        } else {\n            return true\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93059,"user_id":null,"body":"class Kata {\n    static def willYou(young, beautiful, loved) {\n        \/\/ Implement me!\n        if(loved) {\n          if(!young || !beautiful)\n            return true\n        }\n        else {\n          if(young && beautiful)\n            return true\n        }\n        return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"588453ea56daa4af920000ca":[{"id":93060,"user_id":null,"body":"import java.util.stream.IntStream\n\nclass Kata {\n    static def array_packing(n) {\n        long result = 0\n        IntStream.range(0, n.size()).forEach({ i -> result += n[i] * Math.pow(2, i * 8) })\n        result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93061,"user_id":null,"body":"class Kata {\n    static def array_packing(arr) {\n      Long.parseLong(arr.collect { String.format(\"%8s\", Integer.toBinaryString(it)).replaceAll(\" \", \"0\") }.reverse().join(\"\"), 2)\n    \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93062,"user_id":148,"body":"class Kata {\n    static def array_packing(arr) {\n        return Long.valueOf(arr.reverse().collect{\n            return Integer.toBinaryString(it as int).padLeft(8, '0')\n        }.join(), 2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93063,"user_id":null,"body":"class Kata {\n    static def array_packing(arr) {\n      Long.parseLong(arr.reverse().collect { Integer.toBinaryString(it).padLeft(8, '0') }.join(), 2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93064,"user_id":null,"body":"class Kata {\n    static def array_packing(arr) {\n        List binary = arr.reverse().collect{ Integer.toString(it, 2).padLeft(8, '0') } \n        Long.parseLong( binary.join(), 2 )\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93065,"user_id":575,"body":"class Kata {\n    static def array_packing(arr) {\n        [arr, [1G, 256G, 65536G, 16777216G]].transpose().collect { t ->  t[0] * t[1] }.inject { a, b -> a + b }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5886c6b2f3b6ae33dd0000be":[{"id":93066,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n        return arr ? arr.swap(0, arr.size() - 1) : arr;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93067,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n        int arraySize = arr.size()\n        if (arraySize >0){\n            arr.swap(0,arraySize-1)\n          }\n        return arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93068,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n        arr.size()>1? [arr[-1]]+arr[1..<-1]+[arr[0]]:arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93069,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n      arr.size()>1&&arr? [arr[-1]]+arr[1..<-1]+[arr[0]]:arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93070,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n        arr.size() > 1 ? [arr[arr.size()-1], arr.drop(1).take(arr.size()-2), arr[0]].flatten() : arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93071,"user_id":null,"body":"class Kata {\n    static def solution(list) {\n        if(list.size < 2){\n          return list\n        }\n        def first = list[0]\n        def lust = list[list.size-1]\n        list[0] = lust\n        list[list.size-1] = first\n        list\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93072,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n          def len = arr.size()\n        if (len <= 1) {\n            return arr\n        }\n        def first = arr[0]\n        arr[0] = arr[len-1]\n        arr[len-1] = first\n        return arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93073,"user_id":1492,"body":"class Kata {\n    static def solution(arr) {\n      \n      \n        if (arr.size() <= 1){\n          return arr;\n        }\n      \n        println(arr);\n      \n        def tmp1 = arr[0];\n        def tmp2 = arr[-1];\n      \n        arr[0] = tmp2;\n        arr[-1] = tmp1;\n      \n        return arr;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93074,"user_id":null,"body":"class Kata {\n    static def solution(arr) {\n        return arr.size() ? arr.swap(0, arr.size() - 1) : arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93075,"user_id":148,"body":"class Kata {\n    static def solution(arr) {\n        if (arr.size() <= 1) return arr\n        if (arr.size() == 2) return  [arr[-1]] + [arr[0]]  \n        return [arr[-1]] + arr[1..-2] + [arr[0]]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58880c6e79a0a3e459000004":[{"id":93076,"user_id":527,"body":"class Kata {\n    static def houseNumbersSum(xs) {\n        xs.takeWhile{it}.sum(0)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93077,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n      def i=0, sum = 0\n      while(inputArray[i] != 0){\n        sum += inputArray[i++]}\n      return sum\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93078,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n      def total = 0, continueLoop = true \n      inputArray.each{ num -> \n        num == 0 ? continueLoop = false : continueLoop\n        \n        continueLoop == true ? total += num : total \n        }\n      total\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93079,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n        return inputArray[0..inputArray.indexOf(0)].sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93080,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n        def houseCounter = 0;\n         \n         for (int i = 0; i < inputArray.size(); i++)\n         {\n             if(inputArray.getAt(i) > 0)\n             {\n                 println(\"Let's Add the number on the house! \" + inputArray.getAt(i) + \"ah ah\");\n                 houseCounter += inputArray.getAt(i);\n                 println(\"The new total is: \" + houseCounter);\n             }\n            else\n              {\n                 System.out.println(\"Total Count: \" + houseCounter);\n                 return houseCounter;\n              }\n           \n         }\n       \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93081,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n       int result = 0\n       for (int i = 0; i < inputArray.size(); i++) {\n           if (inputArray[i] == 0) {\n               return result\n           }\n           result += inputArray[i]\n       }\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93082,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n        def houseSum = 0\n        for (i in inputArray) {\n            if (i > 0 ){\n                houseSum += i\n            } else {\n                break;\n            }\n        }\n        return houseSum\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93083,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(i) {\n       i[0..i.indexOf(0)].sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93084,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(i) {\n        if(i[0]==0) return 0\n        i[0..i.indexOf(0)-1].sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93085,"user_id":null,"body":"class Kata {\n    static def houseNumbersSum(inputArray) {\n        def count = 0\n        inputArray.find {\n          count+=it\n          it == 0\n          }\n       count\n        }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"588817db5fb13af14a000020":[{"id":93086,"user_id":759,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        text.findAll(\/[A-Za-z]+\/).count { it.size() <= maxLength }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93087,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        (text =~ \/\\w+\/).collect{ it.length() <= maxLength }.count{it}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93088,"user_id":null,"body":"class Kata {\n    static def timed_reading(L, t) {\n       (t=~ \/\\b[A-z]{1,$L}\\b\/).findAll().size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93089,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        text.findAll(\/[A-Za-z]+\/)\n            .collect()\n            .count({ v -> v.length() <= maxLength })\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93090,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        text.findAll(\/[A-Za-z]+\/)\n            .collect()\n            .count({ v -> !v.empty && v.length() <= maxLength })\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93091,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n       text.tokenize(\" \")\n            .stream()\n            .map ({ v -> v.replaceAll(\"[^a-zA-Z]\", \"\") })\n            .collect()\n            .count({ v -> !v.empty && v.length() <= maxLength })\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93092,"user_id":1492,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        def t = text.split(\" \")\n        \n        def count = 0\n        for (word in t){\n          def tmp = word.replaceAll(\"[0-9,!.?'\\\"]\", \"\").trim()\n          if (tmp.size() >= 1 && tmp.size() <= maxLength){\n            count += 1\n          }\n        }\n      return count\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93093,"user_id":148,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        return (text as String).split(' ').collect() {\n            it.replaceAll(\"[^A-Za-z]\", \"\").length() <= maxLength &&\n            it.replaceAll(\"[^A-Za-z]\", \"\").length() > 0\n        }.count(true)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93094,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        def matcher = text =~ \/\\w{1,30}\/\n        return matcher.findAll { it.length() <= maxLength }.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93095,"user_id":null,"body":"class Kata {\n    static def timed_reading(maxLength, text) {\n        int counter = 0\n\n        def words = text.split()\n        words.each{\n          it=it-'.'\n          it=it-'!'\n          it=it-'?'\n          it=it-'\\''\n          it=it-'\\\"'\n          it=it-','\n          if (it.length() <= maxLength){\n            counter++\n          }\n        }\n\n        return counter\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"588a00ad70720f2cd9000005":[{"id":93096,"user_id":null,"body":"class Router {\n  Map<String, Map<String, Closure>> routes = [:].withDefault {[:]}\n\n  def bind(String path, String method, Closure callback) {\n    routes[path][method] = callback\n  }\n  \n  def runRequest(String path, String method) {\n    Closure callback = routes[path][method]\n    return callback ? callback() : \"Error 404: Not Found\"\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93097,"user_id":null,"body":"class Router {\n  List<Binding> bindings\n  \n  Router() {\n    bindings = []\n  }\n  \n  void bind(String binding,String method,Closure action) {\n    this[binding][method] = action\n  }\n  \n  def runRequest(String binding,String method) {\n    try {\n      this[binding][method]()\n    } catch(NullPointerException ignored) {\n      \"Error 404: Not Found\"\n    }\n  }\n  \n  Binding getAt(String binding) {\n    bindings.find { \n      it.name == binding \n    } ?: { def b = new Binding(binding); bindings << b; b }()\n  }\n  \n  class Binding {\n    final String name\n    List<Method> methods\n    \n    Binding(String name) {\n      this.name = name\n      this.methods = []\n    }\n    \n    Method getAt(String method) {\n      methods.find { it.name == method }\n    }\n    \n    void putAt(String method,Closure action) {\n      Method m = this[method]\n      \n      if(m) {\n        m.action = action\n      } else {\n        methods << new Method(method,action)\n      }\n    }\n  }\n  \n  class Method {\n    final String name\n    Closure action\n    \n    Method(String name,Closure action) {\n      this.name = name\n      this.action = action\n    }\n    \n    def call() {\n      action()\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93098,"user_id":null,"body":"class Router {\n\nprivate static Map bindings = [:]\n\t\t\n\t\t\n\t\tstatic void bind(String path, String httpMethod, Closure closure){\n\t\t\tthis.bindings[path + httpMethod] = closure\n\t\t}\n\t\t\n\t\tstatic String runRequest(String path, String httpMethod){\n\t\t\t\n\t\t\t\/\/key\n\t\t\tString key = path + httpMethod\n\t\t\t\n\t\t\tif(bindings.containsKey(key)) {\n\t\t\t\treturn bindings.get(key).call()\n\t\t\t}\n\t\t\t\n\t\t\treturn \"Error 404: Not Found\"\n\t\t}\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93099,"user_id":null,"body":"class Router {\n  private Map methods\n  Router() {\n    this.methods = [:]\n  }\n  void bind (str, method, cl) {\n    this.methods[\"$method$str\"] = cl()\n  }\n  \n  String runRequest(str, method) {\n    this.methods[\"$method$str\"] ?: \"Error 404: Not Found\" \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93100,"user_id":575,"body":"class Router {\n    private routingTable = [:]\n\n    def bind(route, method, action) {\n        def key = new Tuple(route, method)\n        routingTable[key] = action\n    }\n\n    def runRequest(route, method) {\n        def key = new Tuple(route, method)\n        this.routingTable.containsKey(key) ? this.routingTable[key]() : \"Error 404: Not Found\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93101,"user_id":null,"body":"class Router {\n  \n  def bindings;\n  \n  Router() {\n    this.bindings = [:];\n  }\n  \n  def bind(route, verb, result) {\n    if (this.bindings[route] == null) {\n      this.bindings[route] = [(verb):result];\n    }\n    else {\n      this.bindings[route][verb] = result;\n    }\n  }\n  \n  def runRequest(route, verb) {\n    if (this.bindings[route] == null || this.bindings[route][verb] == null) {\n      return 'Error 404: Not Found';\n    }\n    return this.bindings[route][verb]();\n  }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93102,"user_id":null,"body":"class Router {\n  Map routes = [:].withDefault{ [:] }\n  \n  public void bind(String url, String method, Closure action) {\n    routes[method][url] = action\n  }\n  \n  public String runRequest(String url, String method) {\n    return routes[method][url]?.call() ?: 'Error 404: Not Found'\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93103,"user_id":148,"body":"class Router {\n    def routes = [:]\n\n    void bind(String s1, String s2, Closure<String> stringClosure) {\n        routes[s1+s2] = stringClosure.call()\n    }\n\n    String runRequest(String s1, String s2) {\n        if (routes[s1 + s2]) {\n            return routes[s1 + s2]\n        }\n        return \"Error 404: Not Found\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93104,"user_id":null,"body":"class Router {\n  \n  Map routes = [:]\n  \n  void bind(String name, String method, Closure implementation) {\n    if(!routes[name]) {\n      routes[name] = [:]\n    }\n    routes[name][method] = implementation;    \n  }\n  \n  def runRequest(String name, String method) {\n    Map path = routes[name]\n    \n    if(!path) {\n      return \"Error 404: Not Found\"\n    }\n    \n    Closure implementation = path[method]\n    if(!implementation) {\n      return 'Error 404: Not Found'      \n    }\n    \n    return implementation()\n  }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93105,"user_id":null,"body":"class Router {\n\n  def routes = [:]\n  \n  def bind(route, httpMethod, action){\n  if(this.routes.containsKey(route)){\n         this.routes[route][httpMethod] = action\n  }else{\n  this.routes[(route)] = [(httpMethod) : action]   \n  }\n \n      \n    \n  }\n  \n  def runRequest(route, httpMethod){\n      def theRoute = this.routes.find{it.key == route}?.value ? this.routes[route].find{it.key == httpMethod}?.value : null\n   \n     if(theRoute) return \"${theRoute}\"\n     \n     return \"Error 404: Not Found\"\n    \n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"589273272fab865136000108":[{"id":93106,"user_id":1153,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        return [1, 4, 6, 9, 11].contains((keyPressCount - 1) % 88 % 12) ? \"black\" : \"white\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93107,"user_id":null,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(key) {\n        ([0,1,0]+[0,1,0,1,0,0,1,0,1,0,1,0]*7<<0)[key%88-1] ? 'black' : 'white'\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93108,"user_id":53,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(n) {\n      def w = \"white\";\n      def b = \"black\";\n      def keyboard = [w, b, w, w, b, w, b, w, w, b, w, b];\n      return keyboard[(n - 1) % 88 % 12];\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93109,"user_id":50,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n      int n = (keyPressCount - 1) % 88 % 12\n      if (n == 1 || n == 4 || n ==  6 || n == 9 || n == 11){\n        return \"black\"\n      } else {\n        return \"white\"\n      }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93110,"user_id":null,"body":"class BlackOrWhiteKey {\n  static def W = 'white';\n  static def B = 'black';\n  static def keys = [W, B, W, W, B, W, B, W, W, B, W, B] * 8;\n  \n  static String black_or_white_key(keyPressCount) {\n    println keyPressCount\n    return keys[(keyPressCount - 1) % 88];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93111,"user_id":null,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        \/\/ your code here\n      println keyPressCount\n      if(keyPressCount > 88){\n        black_or_white_key(keyPressCount%88)\n      }else{\n        keyPressCount = keyPressCount <= 12 ? keyPressCount : keyPressCount%12\n        [0,2,5,7,10,12].contains(keyPressCount) ? \"black\":\"white\"\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93112,"user_id":null,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        while(keyPressCount>88)\n          keyPressCount-=88\n        while(keyPressCount>12)\n          keyPressCount-=12\n        if([2,5,7,10,12].contains(keyPressCount))\n          return \"black\"\n        else\n          return \"white\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93113,"user_id":null,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        \/\/ your code here\n      def pattern = []\n      def regularPattern = ['white', 'black', 'white', 'white', 'black', 'white', 'black', 'white', 'white', 'black', 'white', 'black']\n      def extraPattern = ['white', 'black', 'white', 'white']\n      for (int i = 0; i < 7; i++)\n        pattern += regularPattern\n      pattern += extraPattern\n      return pattern[keyPressCount%88-1]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93114,"user_id":null,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        def count = keyPressCount % 88 ?: 88\n        switch(count % 12 ?: 12) {\n            case 2:\n            case 5:\n            case 7:\n            case 10:\n            case 12:\n                \"black\"\n                break\n            default:\n                \"white\"\n                break\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93115,"user_id":492,"body":"class BlackOrWhiteKey {\n    static String black_or_white_key(keyPressCount) {\n        char r = \"wbwwbwbwwbwb\".charAt((keyPressCount-1) % 88 % 12);\n        if (r  == 'w')\n            return \"white\";\n        return \"black\";\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5893e0c41a88085c330000a0":[{"id":93116,"user_id":null,"body":"class Kata {\n    static def shape_area(n) {\n        return 2*(n-1)*n+1\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93117,"user_id":1768,"body":"class Kata {\n    static def shape_area(n) {\n        return 2 * n * (n - 1) + 1;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93118,"user_id":null,"body":"class Kata {\n    static int shape_area(n) {\n      int r = 1\n      if(n != r)\n        (1..(n-1)).each { r += (4*it) }\n      return r\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93119,"user_id":null,"body":"class Kata {\n    static def shape_area(n) {\n         Math.pow(n, 2) + Math.pow(n - 1, 2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93120,"user_id":null,"body":"class Kata {\n    static def shape_area(n) {\n        return 2 * n * n - 2 * n + 1;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93121,"user_id":null,"body":"class Kata {\n    static def shape_area(n) {\n       def total = 1\n       for(def i = 2; i < n + 1; i++){\n          total += (i - 1) * 4\n}\n       return total\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93122,"user_id":null,"body":"class Kata {\n    static def shape_area(n) {\n      def result = 1\n        for (int i = 1; i<n; i++) { result += i*4 }\n      result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93123,"user_id":50,"body":"class Kata {\n    static def shape_area(n) {\n        return 2*(n*n-n)+1;\n\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93124,"user_id":148,"body":"class Kata {\n    static def shape_area(n) {\n      return --n * n + (n + 1) * (n + 1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93125,"user_id":492,"body":"class Kata {\n    static def shape_area(n) {\n        return n * n + (n - 1) * (n - 1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58941fec8afa3618c9000184":[{"id":93126,"user_id":527,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    Math.max(1, Math.ceil((desiredHeight - downSpeed) \/ (upSpeed - downSpeed)))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93127,"user_id":53,"body":"class Kata {\n  static int growing_plant(int u, int d, int m) {\n    return Math.max(1, Math.ceil((m - d) \/ (u - d)))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93128,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    desiredHeight - upSpeed <= 0 ? 1 : Math.ceil((desiredHeight - upSpeed) \/ (upSpeed - downSpeed)) + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93129,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    int day = 0;\n    int height = 0;\n    while(desiredHeight > height){\n      day++;\n      height += upSpeed;\n      if(height >= desiredHeight) return day;\n      height -= downSpeed;\n    }\n    return day;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93130,"user_id":50,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  return desiredHeight<=upSpeed?1:1+growing_plant(upSpeed, downSpeed, desiredHeight- upSpeed +downSpeed)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93131,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    \/\/ max of nth day: u + (u-d)*(n-1)\n    \/\/ u + (u-d)*(n-1) >= h\n    \/\/ n >= (h-u)\/(u-d) + 1\n    \/\/ draws a line on the plane, want the first n >= 1\n    Math.max(0, Math.ceil((desiredHeight-upSpeed)\/(upSpeed-downSpeed))) + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93132,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    return desiredHeight < upSpeed ? 1 : (int) Math.ceil((desiredHeight - downSpeed) \/ (upSpeed - downSpeed));\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93133,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  \n    def psize = upSpeed;\n    def dayCount = 1;\n    \n    while(psize < desiredHeight ) {\n      psize += upSpeed - downSpeed;\n      dayCount++;      \n    }\n    dayCount;\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93134,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    def currentHeight = 0\n    def dayNum = 0\n    while (true) {\n      dayNum++\n      currentHeight += upSpeed;\n      if (currentHeight >= desiredHeight)\n        break\n      else\n        currentHeight -= downSpeed   \n    }\n    return dayNum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93135,"user_id":null,"body":"class Kata {\n  static int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    def height = 0\n    def count = 0\n    while (height < desiredHeight) {\n      height += upSpeed\n      count++\n      if (height >= desiredHeight) break\n      height -= downSpeed\n    }\n    return count\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"589631d24a7323d18d00016f":[{"id":93136,"user_id":null,"body":"class WhichNote {\n\n    static private notes = [\"A\",\"A#\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\"]\n    \n    static String which_note(keyPressCount) {\n        keyPressCount-= 1\n        keyPressCount%=88\n        this.notes[keyPressCount%12]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93137,"user_id":null,"body":"class WhichNote {\n    static String which_note(key) {\n        'A-A#-B-C-C#-D-D#-E-F-F#-G-G#'.split('-')[(key-1)%88%12]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93138,"user_id":168,"body":"class WhichNote {\n    static String which_note(k) {\n      [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"][(k - 1) % 88 % 12]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93139,"user_id":53,"body":"class WhichNote {\n    static String which_note(n) {\n      def keyboard = [\"A\",\"A#\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\"];\n      return keyboard[(n - 1) % 88 % 12];\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93140,"user_id":null,"body":"class WhichNote {\n\n  static def notes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] * 8;\n  \n  static String which_note(keyPressCount) {\n    return notes[(keyPressCount - 1) % 88];\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93141,"user_id":null,"body":"class WhichNote {\n  static String which_note(keyPressCount) {\n    (['A','A#','B','C','C#','D','D#','E','F','F#','G','G#']*7 + ['A','A#','B','C'])[keyPressCount % 88 - 1]\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93142,"user_id":null,"body":"class WhichNote {\n    static String which_note(keyPressCount) {\n        [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"][((keyPressCount - 1) % 88) % 12]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93143,"user_id":null,"body":"class WhichNote {\n    static String which_note(keyPressCount) {\n        def keyMap = [ \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\" ]\n        \n        return keyMap[((keyPressCount - 1) % 88) % 12]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93144,"user_id":null,"body":"class WhichNote {\n    static String which_note(key) {\n      def part = 'A-A#-B-C-'\n      ((part+'C#-D-D#-E-F-F#-G-G#-')*7+part).split('-')[key%88-1]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93145,"user_id":20,"body":"class WhichNote {\n    static String which_note(k) {\n        while(k>88)\n          k-=88;\n        while(k>12)\n          k-=12;\n        if(k==1)\n          return \"A\";\n        if(k==2)\n          return \"A#\";\n        if(k==3)\n          return \"B\";\n        if(k==4)\n          return \"C\";\n        if(k==5)\n          return \"C#\";\n        if(k==6)\n          return \"D\";\n        if(k==7)\n          return \"D#\";\n        if(k==8)\n          return \"E\";\n        if(k==9)\n          return \"F\";\n        if(k==10)\n          return \"F#\";\n        if(k==11)\n          return \"G\";\n        return \"G#\";\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"589d36bbb6c071f7c20000f7":[{"id":93146,"user_id":575,"body":"class Kata {\n    static def prime_string(s) {\n        (s + s).indexOf(s, 1) == s.size()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93147,"user_id":null,"body":"class Kata {\n    static boolean prime_string(s) {\n        return !s.matches(\/(.+)\\1+\/)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93148,"user_id":null,"body":"class Kata {\n    static def prime_string(s) \n    {\n      if(s.size()==1) return true\n      for(i in 1..s.size()\/2)\n         if(s.findAll(\/.{$i}\/).unique().size==1) \n         return false\n      return true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93149,"user_id":53,"body":"class Kata {\n    static def prime_string(str) {\n        return (str + str).indexOf(str, 1) == str.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93150,"user_id":50,"body":"class Kata {\n    static def prime_string(s) {\n      return !(s  =~ \/^(.+)\\1+$\/)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93151,"user_id":null,"body":"class Kata {\n    static def prime_string(s) {\n      for (int i=1; i<=(s.length()\/2); i++) {\n        String ssu = s.substring(0, i)\n        if (s.length() % ssu.length() == 0) {\n          String ssumult = ssu * (s.length() \/ ssu.length())\n          if (ssumult == s) {\n            return(false)\n          }\n        }\n      }\n      return(true)\n    }\n}\n\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93152,"user_id":null,"body":"class Kata {\n    static def prime_string(s) {\n       def sz = s.size()\n       if(sz < 3 ) return true\n       for(i in (2..sz-1)){\n         def ls = s.toList().collate(i)\n         def temp = ls[0]\n         def rs = ls.every{it == temp}\n         if(rs == true) return false\n       }\n       return true\n       \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93153,"user_id":null,"body":"class Kata {\n    static def prime_string(s) {\n       def si = s.size()\n       if (si == 1) {return true }\n       if (s == s[0] * si) {return false}\n       def divs = []\n       for (i in 2..<si) {\n        if (si % i == 0) {divs << i }\n      }\n       def f = true\n       for (i in divs) {\n         def tmpS = s.toList().collate(i)*.join(\"\").toSet()\n         if (tmpS.size() == 1) {f = false}\n       }\n       f\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93154,"user_id":null,"body":"class Kata {\n    static def prime_string(s) {\n        if (s.length()<=2){\n            return true;\n        }\n        for (int i=0; i<Math.floor(s.length()\/2); i++){\n            if(s.replaceAll(s.substring(0,i+2),\"\").length()==0){\n                return false;\n            }\n        }\n        return true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93155,"user_id":null,"body":"class Kata {\n    static def prime_string(s) {\n      if(s.length()<=1) return true;\n      def res=true\n      \n      for (def i=0;i<s.length()\/2&&res;i++)\n      {\n        def part=s.take(i+1)\n        println part\n        def pattern=\/($part)+\/\n        res=!(s ==~ \/$pattern\/)&&res\n      }\n        res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58ab2ed1acbab2eacc00010e":[{"id":93156,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n   return new URL(\"https:\/\/www.codewars.com\/users\/$username\")\n            .getText()\n            .find(\/(?<=Member Since:<\\\/b>)\\w+\\s\\d+\/)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93157,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\ndef document = ('https:\/\/www.codewars.com\/users\/' + username).toURL().text\ndef ind = document.indexOf('Member Since:')\n    def res = document[(ind + 17)..(ind + 24)]\n    return res\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93158,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n    def matcher = new URL(\"https:\/\/www.codewars.com\/users\/${username}\").getText() =~ \"(Member Since:<\\\\\/b>){1}(\\\\w+) (\\\\d+)\"\n    return (\"${matcher[0][2]} ${matcher[0][3]}\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93159,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n    return (new URL(\"https:\/\/www.codewars.com\/users\/${username}\").getText() =~ \/Member Since:<\\\/b>(.*?)<\\\/div>\/)[ 0 ][ 1 ]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93160,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n    (\"https:\/\/www.codewars.com\/users\/${username}\".toURL().text =~ \/Member Since:<\\\/b>([A-Za-z0-9 ]+)\/)[0][1]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93161,"user_id":null,"body":"\n\nclass Kata {\n  static String getMemberSince(username) {\n    def get = new URL(\"https:\/\/www.codewars.com\/users\/${username}\/replies\").openConnection();\n    def getRC = get.getResponseCode();\n    def matcher = get.getInputStream().getText() =~ \/<div class=\"stat\"><b>Member Since:<\\\/b>.{1,20}<\\\/div>\/\n    def m = matcher[0] =~ \/\\\/b>.{8}\/\n    return m[0].replaceAll(\"\/b>\",\"\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93162,"user_id":53,"body":"import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\nclass Kata {\n  static String getMemberSince(username) {\n    def n = Jsoup.connect(\"https:\/\/www.codewars.com\/users\/${username}\").get();\n    def s = n.select(\"div.stat:contains(Member Since:)\").text() as String\n    s.substring(s.indexOf(\":\")+1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93163,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n    final def p = ~\/<b>Member Since:\\<\\\/b\\>(([A-Z]|[a-z]|[0-9]|\\s)*)\\<\\\/div\\>\/\n\t\t\n\t\tString body = \"\"\n\t\tString result = \"\"\n\t\tdef url = new URL(\"https:\/\/www.codewars.com\/users\/$username\")\n\t\tdef connection = url.openConnection()\n\t\tconnection.requestMethod = 'GET'\n\t\tif (connection.responseCode == 200) {\n\t\t  body = connection.content.text\n\t\n\t\t  \/\/get the matchs\n\t\t  def matcher = body =~ p\n\t\t  println(matcher.size())\n\t\t  def list = matcher[0..-1]\n\t\t  def list2 = list.get(0)\n\t\t  println(\"debug -> \" + list2.get(1))\n\t\t\n\t\t  return list2.get(1)\n\t\t} else {\n\t\t  println(\"error when requesting: $url\")\n\t\t}\n\t\n\t\t\treturn \"-1\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93164,"user_id":null,"body":"class Kata {\n  static String getMemberSince(username) {\n    def page = new URL(\"https:\/\/www.codewars.com\/users\/\" + username).text\n    def matcher = page =~ \/<b>Member Since:<\\\/b>\\w{3} \\d{4}\/\n    if (matcher.size() == 1) {\n      return matcher[0].minus('<b>Member Since:<\/b>')\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93165,"user_id":null,"body":"class Kata {\n    static String getMemberSince(username) {\n        def connection = new URL( \"https:\/\/www.codewars.com\/users\/\" + username)\n                .openConnection() as HttpURLConnection\n        def content = connection.inputStream.text\n        int loc = content.indexOf(\"Member Since\")\n        int loclen = \"Member Since<\/b>\".length() + 1\n        def rv = content.substring(loc + loclen, loc + loclen + 8)\n        return rv\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58acfe4ae0201e1708000075":[{"id":93166,"user_id":527,"body":"class Kata {\n    static boolean invite_more_women(Iterable xs) {\n        xs.sum() > 0\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93167,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n\ndef countWomen = 0;\n        def countMen = 0;\n            for (def i = 0; i < arr.size(); i++){\n                if (arr[i] < 0) {\n                  countWomen++}\n            else {countMen++}\n          }\n    return countWomen < countMen\n    }\n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93168,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n      arr.sum() > 0 ? true : false    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93169,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n        if (arr.sum() < 0){\n          false\n        }\n        else if (arr.sum() > 0){\n          true\n        }\n        else if (arr.sum() == 0){\n          false\n        }\n        else{\n          false\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93170,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n        \/\/ Implement me! :)\n      \n      \/\/ Not my idea. \n      arr.sum() > 0\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93171,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n      \n   def menNum = arr.count {\n        it == 1\n    }\n    def womenNum = arr.count {\n        it == -1\n    }\n\n    if (menNum > womenNum) {\n        return true\n    }\n    return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93172,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n      arr.findAll{it -> it == -1}.size() >= arr.size()\/2 ? false : true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93173,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n        arr.value.sum() > 0\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93174,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n       if(arr.sum()>0)\n      return true\n      else\n        return false;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93175,"user_id":null,"body":"class Kata {\n    static def invite_more_women (arr) {\n      def total = 0\n      arr.each { total += it }\n      if (total <= 0 ) \/\/ more women have been invited\n        return false\n      else\n        return true\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58b8c94b7df3f116eb00005b":[{"id":93176,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        string.replaceAll(\"[^A-Za-z]\",\"\").reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93177,"user_id":null,"body":"class Kata {\n    static def reverse_letter(String string) {\n        def nonAlphabetic = \"[^A-Za-z]+\"\n        string.reverse()\n          .replaceAll(nonAlphabetic, \"\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93178,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        string.findAll(\/(?i)[a-z]\/).reverse().join()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93179,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        String alphabeticalString = string.replaceAll('[\\\\d+\\\\W+_]','')\n      \n      alphabeticalString.reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93180,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n      string.replaceAll(~\/[^a-zA-Z]\/,'').reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93181,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        string.reverse().collect {\n          if((it >= 'a' && it <= 'z') ||(it >= 'A' && it <= 'Z')){\n            it\n          }else{\n            \"\"\n          }\n        }.join()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93182,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n      string = string.replaceAll(\/\\W+\/,\"\").replaceAll(\/\\d+\/,\"\").replaceAll(\/\\_+\/,\"\").reverse()\n         return string\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93183,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        string.replaceAll(\"\\\\d|\\\\p{Punct}|\\\\s\",\"\").reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93184,"user_id":53,"body":"class Kata {\n    static def reverse_letter(string) {\n        string.findAll(\/[A-Za-z]\/).reverse().join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93185,"user_id":null,"body":"class Kata {\n    static def reverse_letter(string) {\n        \/\/ Implement me! :)\n      string.replaceAll(\"[^A-Za-z]\",\"\").reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58c8a41bedb423240a000007":[{"id":93186,"user_id":null,"body":"class Kata {\n    static def cake_slice(n) {\n        n==0? 1:(1..n).sum()+1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93187,"user_id":null,"body":"class Kata {\n    static def cake_slice(n) {\n        (Math.pow(n, 2) + n + 2) \/ 2\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93188,"user_id":148,"body":"class Kata {\n    static def cake_slice(n) {\n        return (n * (n-1)\/2 + 1) + n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93189,"user_id":null,"body":"import groovy.transform.TailRecursive\n\nclass Kata {\n    static def cake_slice(n) {\n      return cake_sliceIter(0, n)\n    }\n  \n    @TailRecursive\n    private static def cake_sliceIter(acc, n) {\n        if (n == 0) {\n            return acc + 1\n        }\n        return cake_sliceIter(acc + n, n - 1)\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93190,"user_id":null,"body":"class Kata {\n    static def cake_slice(n) {\n      (n * n + n + 2) \/ 2\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93191,"user_id":null,"body":"class Kata {\n    static def cake_slice(n) {\n         return n * (n + 1)\/2 + 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93192,"user_id":null,"body":"class Kata {\n    static def cake_slice(n) {\n        if(n==0) return 1\n        def array = new int[n+1]\n        array[0] = 1\n        (1..n).each{array[it] = array[it-1] + it}\n        return array[-1]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93193,"user_id":575,"body":"class Kata {\n    static def cake_slice(n) {\n        n*(n+1)\/2+1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58ce8725c835848ad6000007":[{"id":93194,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n      w0 * (100 - p0) \/ (100 - p1)\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:19"},{"id":93195,"user_id":492,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        return (int)((double)w0 * (100.0 - (double)p0) \/ (100.0 - (double)p1));\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:23"},{"id":93196,"user_id":492,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        return (int)((double)w0 * (100.0 - (double)p0) \/ (100.0 - (double)p1));\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93197,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n      return (int)Math.floor(w0 * (100 - p0) \/ (100 - p1))    \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93198,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        (w0 - w0\/100 * p0) * 100 \/ (100 - p1)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93199,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        (w0 * (1-p0\/100) \/ (1-p1\/100)) as int\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93200,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        \/\/ your code\n      def baseWeight = w0*(1-(p0*0.01))\n      def finalPercentage = 100 - p1\n      def finalWeight = (baseWeight\/finalPercentage)* 100\n      return finalWeight\n      \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93201,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        return Math.floor((w0 * (100 - p0)) \/ (100 - p1))\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93202,"user_id":null,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        int w1 = 100*((100-p0)*0.01*w0)\/(100-p1)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"},{"id":93203,"user_id":168,"body":"class Kata {\n    \n    public static int potatoes(int p0, int w0, int p1) {\n        ((100 - p0) * w0).intdiv(100 - p1)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-27 19:37:06"}],"58ecc0a8342ee5e920000115":[{"id":93204,"user_id":null,"body":"class Kata {\n  static def triangMult(n) {\n    def a=(n*(n+1)).intdiv(2),b=(n+1).intdiv(2)**4\n    a*=a\n    [a,a-b,b]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93205,"user_id":575,"body":"class Kata {\n    static def triangMult(n) {\n        def k = (n * (n + 1)).intdiv(2)\n        def p = ((n + 1).intdiv(2)) ** 4\n        [k*k, k*k-p, p]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58f5c63f1e26ecda7e000029":[{"id":93206,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    List<String> w = []\n    if (str) {\n      str.split(\"\").eachWithIndex { it, index ->\n        if (it != \" \") {\n          w.add(str.substring(0, index) + it.toUpperCase() + str.substring(index + 1))\n        }\n      }\n    }\n    return w\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93207,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    if (str==\"\") return []\n\n    def wave = str[0] == \" \" ?[]: [str.capitalize()]\n    if (str.length()<=1) return wave\n    1.upto(str.length()-1){index ->\n      if (str[index] == \" \") return\n      \/\/ not inclusive of str[index]\n      wave.add(str.substring(0,index) + str.substring(index).capitalize())\n    }\n    return wave\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93208,"user_id":null,"body":"class Kata {\n    static String[] wave(String str) {\n        def result = []\n        \n        str.length().times { iter ->\n            if (!str.charAt(iter).isWhitespace()) {\n                def chars = str.chars\n                chars[iter] = chars[iter].toUpperCase()\n                result.add(chars.toString())\n            }\n        }\n        return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93209,"user_id":null,"body":"class Kata {\n    static String[] wave(String str) {\n        int n = str.length()\n        int i = -1\n        return str.findAll(\/[a-z]\/).collect {\n            i = str.indexOf(it, i + 1)\n            return str[0..<i] + it.toUpperCase() + str[i + 1..<n]\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93210,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    str.toList().withIndex().findResults{ c, i -> \n      if (c.allWhitespace) {\n        return null\n      }\n      def strList = str.toList()\n      strList[i] = c.toUpperCase() \n      strList.join()\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93211,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    def chars = []\n    def arr = []\n    \n    (str.length()).times{\n      chars = str.toCharArray()\n      if(chars[it].isLetter()){\n        chars[it] = Character.toUpperCase(chars[it]);\n        arr.add(String.valueOf(chars))\n      }\n    }\n    return arr\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93212,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    def wave = []\n    str.eachWithIndex { s,i -> !s.isAllWhitespace() ? wave.add(str.replaceFirst(str.substring(0,i+1), str.substring(0,i)+s.capitalize())) : '' }\n    wave\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93213,"user_id":645,"body":"class Kata {\n  static String[] wave(String str) {\n    (str as List).withIndex().collect { x, i -> str[0..<i] + x.toUpperCase() + (i == str.size() - 1 ? \"\" : str[(i + 1)..-1]) }.findAll { it != str }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93214,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n String[] result = []\n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isLetter(str.charAt(i))) {\n                char [] r = str.toCharArray()\n                r[i] = r[i].toUpperCase()\n                result += r.toString()\n            }\n        }\n        result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93215,"user_id":null,"body":"class Kata {\n  static String[] wave(String str) {\n    List<String> arr = new ArrayList<>();\n    for(int i = 0; i < str.length(); i++){\n      String[] s = str.split('');\n      if(s[i] == ' ') continue;\n      s[i] = s[i].toUpperCase();\n      arr.add(s.join());\n    }\n    arr;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"58f6000bc0ec6451960000fd":[{"id":93216,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n    (l == 0) ? arr : arr.collate(l)*.reverse().flatten()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93217,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n    l ? arr.collate(l)*.reverse().flatten() : arr\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93218,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n    if(l == 0){ return arr; }\n    def nList = arr.collate(l);\n    def res = [];\n    for (item in nList){\n      res += item.reverse()\n    }\n    return res;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93219,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n      arr.collate(l ?: 1)\n         .collect{it.reverse()}\n         .flatten()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93220,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n    arr.collate(l?:1)*.reverse().flatten()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93221,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n        l == 0? arr : arr.collate(l).collect {it.reverse()}.flatten()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93222,"user_id":1492,"body":"class SelReverse {\nstatic sel_reverse(arr, l) {\n    if (l == 0) {return arr}\n    \n    def listofItems = []\n\n    def tmp = []\n    def counter = 0\n    for (i in 0..arr.size-1)\n    {\n        \/\/println(i + \" \" + tmp + \"----\" + listofItems)\n        tmp.push(arr[i])\n        counter += 1\n        if (counter == l){\n            \n            listofItems += tmp\n            tmp = []\n            counter = 0\n        }\n    }\n    if (tmp.size >= 1){\n      \/\/println(\"---\" + tmp)\n      listofItems += tmp\n    }\n\n    return listofItems\n\n}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93223,"user_id":148,"body":"class SelReverse {\n    static sel_reverse(arr, l) {\n        if (l == 0) {\n            return arr\n        }\n        def answer = []\n        def i\n        for (i = 0; i + l < arr.size(); i += l) {\n            answer += arr[i + l - 1..i]\n        }\n        answer.addAll(arr[-1..i])\n        return answer\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93224,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n    if(l == 0) {\n\t\t\treturn arr\n\t\t} else if(arr.size() < l) {\n\t\t\treturn arr.reverse()\n\t\t}\n\t\tdef response = []\n\t\tarr.collate(l).each {\n\t\t\tit.reverse().each { \n\t\t\t\tresponse << it\n\t\t\t}\n\t\t}\n\t\treturn response\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93225,"user_id":null,"body":"class SelReverse {\n  static sel_reverse(arr, l) {\n      if (l <= 1) return arr\n      def lst = []\n      for(int i = 0; i < arr.size; i += l){\n          def j =  i + l <= arr.size ? i + l - 1: arr.size - 1\n          arr[j..i].each { lst << it }\n      }\n      return lst\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5901f361927288d961000013":[{"id":93226,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        numbers ? numbers.inject(1) { prod, num -> prod * num} : null\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93227,"user_id":1673,"body":"class Kata {\n    static def product(n) {\n      n ? n.inject(1){ p, v -> p * v } : null\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93228,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        \/\/ Implement me! :)\n      if(!numbers) {return null}\n      else\n        {\n          int count = 1\n          for(int i = 0; i< numbers.size() ; i++)\n          {\n            count = numbers[i] * count\n          }\n          return count\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93229,"user_id":null,"body":"class Kata {\n    static def product(r) {\n       r?(r=[1]+r).each{ r[0]*=it}[0]:null\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93230,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        if(numbers == null || numbers.size() == 0) return null;\n        numbers.inject(1) { total, current -> total * current}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93231,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        def res = numbers ? 1 : null\n        numbers.each {\n            res *= it\n        }\n        \n        res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93232,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n      def result = numbers ? 1 : null\n      numbers.each {\n        result *= it\n      }\n      result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93233,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        def result = 1\n        numbers == null || numbers.empty ? result = null : numbers.each{v -> result *= v}\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93234,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n        if (numbers == null || numbers.empty) {\n          return null\n        }\n      def result = 1\n      for (def n : numbers){\n        result *= n\n      }\n      result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93235,"user_id":null,"body":"class Kata {\n    static def product(numbers) {\n      def multiply = 1\n      numbers == null || numbers.isEmpty() ? multiply = null : numbers.each {value -> multiply *= value}\n      multiply\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59128363e5bc24091a00006f":[{"id":93236,"user_id":759,"body":"class Kata {\n    static List<Integer> the_janitor(String word) {\n        ('a'..'z').collect { def a = word.indexOf(it); a < 0 ? 0 : word.lastIndexOf(it) - a + 1 }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93237,"user_id":null,"body":"class Kata {\n    static List<Integer> the_janitor(String word) {\n        def r = [0]*26\n        word*.each{ r[(int)it-97] = word.lastIndexOf(it) - word.indexOf(it)+1 }\n        return r.toList()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93238,"user_id":null,"body":"class Kata {\n    static List<Integer> the_janitor(String word) {\n       def position = 0\n       def letters = word.split('')\n       def alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n       def result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n      while(position < letters.size()){\n        for(def i = position; i < letters.size(); i++){\n          if(letters[position] == letters[i]){\n            def ans = position - word.indexOf(letters[i]) + 1\n            def alphIndex = alphabet.indexOf(letters[i])\n            if(ans > result[alphIndex] ){\n               result[alphIndex] = ans  \n            }\n          }\n        }\n        position++\n      }\n      return result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93239,"user_id":null,"body":"class Kata {\n    static List<Integer> the_janitor(String word) {\n        ('a'..'z').collect { letter ->\n            word.indexOf(letter) > -1 ?\n            word.lastIndexOf(letter) - word.indexOf(letter) + 1 :\n            0\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93240,"user_id":575,"body":"class Kata {\n    static List<Integer> the_janitor(String word) {\n        def mins = [:]\n        def maxs = [:]\n        word.toList().withIndex().each { c, i -> \n            maxs[c] = i\n            if (!mins.containsKey(c)) {\n                mins[c] = i\n            }\n        }\n        ('a'..'z').collect { c -> mins.containsKey(c) ? maxs[c] - mins[c] + 1 : 0}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"592645498270ccd7950000b4":[{"id":93241,"user_id":759,"body":"@groovy.transform.CompileStatic\nclass Kata {\n  static Integer typist(String input) {\n    boolean state = false \/\/ lowercase first\n    int result = 0\n    for (int i = 0; i < input.length(); ++i) {\n      if (state ^ (state = input.charAt(i).isUpperCase())) ++result\n      ++result\n    }\n    result\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93242,"user_id":53,"body":"class Kata {\n    static Integer typist(String input) {\n      def matcher = input =~ \/[A-Z]+|[a-z]+\/\n      matcher.size() + input.length() - (input.charAt(0) <= 'Z' ? 0 : 1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93243,"user_id":null,"body":"class Kata {\n    static Integer typist(String input) {\n    def m = input =~ \/[A-Z]+|[a-z]+\/\n    m.size()+ input.size() + ((input[0] as char).isUpperCase()?0:-1)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93244,"user_id":null,"body":"class Kata {\n    static Integer typist(String input) {\n     int up = 0\n    boolean uppercase = false\n    for (int i = 0; i < input.length(); i++) {\n        if(Character.isUpperCase(input[i] as char)) {\n            if(!uppercase) {\n                up++\n                uppercase = true\n            }\n        } else {\n            if (uppercase) {\n                up++\n                uppercase = false\n            }\n        }\n    }\n    return up + input.length()\n}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93245,"user_id":null,"body":"class Kata {\n    static Integer typist(String input) {\n      input.length() + (input =~ \/[A-Z]+\/).size() + (input =~ \/[A-Z][a-z]\/).size()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93246,"user_id":null,"body":"class Kata {\n    static Integer typist(String input) {\n    def count = input.size()\n    def lcase = false\n      for(x in input){\n        if(x != x.toLowerCase() != lcase){\n          count += 1\n          lcase = !lcase\n        }\n      }\n  return count\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93247,"user_id":575,"body":"class Kata {\n    static Integer typist(String input) {\n        Integer taps = input.size()\n        Boolean lower = false\n        for (c in input) {\n            if (c < 'a' != lower) {\n                taps += 1\n                lower = !lower\n            }\n        }\n        taps\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"593c9175933500f33400003e":[{"id":93248,"user_id":575,"body":"class Kata {\n    static def multiples(m, n) {\n        (1..m).collect { i -> i * n }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93249,"user_id":470,"body":"class Kata {\n  static def multiples(m, n) {\n    def r = []\n    for (i in (1..m)){r << i*n}\n    r\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93250,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n      def list = []\n        for(int i in 1..m){\n          list.add(i * n)\n        }\n   return list\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93251,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n      def ans = [];\n       for(int i = 1; i <= m; i++){\n          ans.add(n * i) ;\n       }\n      return ans;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93252,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n        (1..m).collect { it -> it * n}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93253,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n        def multiple = [] \n        for (def i = 1; i<=m; i++) {\n          multiple.add(i*n)\n        }\n        multiple\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93254,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n      def index = 1, arr = []\n        while(index <= m){\n          arr << index * n\n          index++\n         }\n      arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93255,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n        def result = []\n      for(int i = 1; i < m + 1; i++){\n        def x = 0\n        x = n * i\n        result << x\n      }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93256,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n      List a = []\n        int i = 0\n        for (i=1; i<=m; i++) {\n          a.add(n * i)\n        }\n      return a\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93257,"user_id":null,"body":"class Kata {\n    static def multiples(m, n) {\n        def result = [] \n        for (int i = 1; i<=m; i++) {\n          result << i*n\n        }\n        result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59441520102eaa25260000bf":[{"id":93258,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n      return 'hello'.length();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93259,"user_id":17,"body":"class Kata {\n  static int unusualFive() {\n    return (char)'' as Integer;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93260,"user_id":50,"body":"class Kata {\n    static int unusualFive(){\n      return '     '.length()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93261,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n       [Math.E, Math.PI].sum()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93262,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n      int i = \"i\"\n      int d = \"d\"\n\n      i.minus(d)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93263,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n      (int)('')\n    }\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93264,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n       return Math.subtractExact((int) 'F', (int) 'A')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93265,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n      return (int)'i' % (int)'d';\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93266,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n      List result = ['h', 'e', 'l', 'l', 'o']\n      \n      result.size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93267,"user_id":null,"body":"class Kata {\n    static int unusualFive(){\n    def srt = 'five_';\n    return srt.size();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5949481f86420f59480000e7":[{"id":93268,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    (!list || (list.sum() % 2) == 0) ? 'even' : 'odd'\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93269,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    list.sum(0) % 2 ? \"odd\" : \"even\"\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93270,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    if (list.size() == 0) return \"even\";\n    \n    int sum = 0;\n    \n    for (int i = 0; i < list.size(); i++) {\n      sum += list[i];\n    }\n    return sum % 2 == 0 ? \"even\" : \"odd\";\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93271,"user_id":1228,"body":"class Kata{\n  static String odd_or_even(list){\n    [\"even\", \"odd\"][(list << 0).sum() & 1]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93272,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    return [\"even\",\"odd\"][list.sum(0) % 2]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93273,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n        if (list.sum() == 0 || list.sum() == null){\n      return \"even\"\n    }\n    else if (list.sum() % 2 == 0){\n      return \"even\"\n    }\n    else{\n      return \"odd\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93274,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    \n    if (list.size() > 0) {\n      if (list.sum() % 2 == 0) {\n        return 'even'\n      } else {\n        return 'odd'\n      }\n    } else {\n      return 'even'\n    }\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93275,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    def sum = list.sum()\n    \n    if (sum != null) {\n      if (sum % 2 == 0) {\n         return 'even'\n       }\n      else   {\n        return \"odd\"\n      }\n    }\n    else {return \"even\" }\n             \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93276,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    if (list.isEmpty()) {\n      return \"even\"\n    } else {\n      def count = 0\n      list.each {\n        count+=it        \n      }\n      if(count % 2 == 0) {\n        return \"even\"\n      } else {\n        return \"odd\"\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93277,"user_id":null,"body":"class Kata{\n  static String odd_or_even(list){\n    list.inject ( 0, { accumulator, nextListValue -> accumulator + nextListValue} ) % 2 == 0 ? \"even\" : \"odd\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"595467c63074e38ba4000063":[{"id":93278,"user_id":null,"body":"class Kata {\n  static Long incomplete_virus(String s) {\n      return incomplete(s,0,s.size()) - 1\n  }\n    \n  static Long incomplete(String s, int index, int size){\n      if(index == size){\n        return 1\n      }\n      int num = s[index] as int\n      if(num >=2){\n        return Math.pow(2,size-index)\n      }else if(num == 1){\n        return Math.pow(2,size-index-1)+incomplete(s,index+1,size)\n      }else{\n        return incomplete(s,index+1,size)\n      }\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93279,"user_id":53,"body":"class Kata {\n    static Long incomplete_virus(String n) {\n      Long c = 0;\n      for (int i = 0; i < n.length(); i++) {\n        if (n[i]=='1') {\n          c += 2 ** (n.length()-1-i);\n        }\n        else if (n[i] > '1') {\n          c += 2 ** (n.length()-i) - 1;\n          break;\n        }\n      }\n      return c;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93280,"user_id":168,"body":"class Kata {\n    static Long incomplete_virus(String s) {\n      Long.parseLong(s.replaceFirst(\/[2-9].*\/) { \"1\" * it.length() }, 2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93281,"user_id":50,"body":"class Kata {\n    static Long incomplete_virus(String s) {\n      def flag  = false\n      def o = 0L\n      for (c in s) {\n        if (c == '1') {\n          o = 2 * o + 1\n        } else if (c != '0') {\n          flag = true\n          o = 2 * o + 1\n        } else if (flag) {\n          o = o * 2 + 1\n        } else {\n          o *= 2\n        }\n      }\n      return o\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93282,"user_id":575,"body":"class Kata {\n    static Long incomplete_virus(String s) {\n        List<String> largest_smaller_binary = []\n        Boolean replace = false\n        s.each { c -> \n            if (c > \"1\") {\n                replace = true\n            }\n            largest_smaller_binary << (replace ? \"1\" : c) \n        }\n        Long.parseLong(largest_smaller_binary.join(), 2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5966a52ab4f24db1800000cc":[{"id":93283,"user_id":527,"body":"class Dinglemouse {\n  static def int123(a) {\n    Integer.toUnsignedLong(123 - a)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93284,"user_id":null,"body":"class Dinglemouse {\n  public static int123(a) {\n    Math.floorMod(123-a, (long)2**32)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93285,"user_id":1492,"body":"class Dinglemouse {\n  static def int123(a) {\n    if (a >= 0 && a <= 123){\n      return 123-a\n    }\n    \n    if (a == Integer.MIN_VALUE || a > 123){    \n      return Long.MAX_VALUE - (a - 124)\n    }\n    \n    if (a <= 0){\n      return -a + 123\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93286,"user_id":492,"body":"class Dinglemouse {\n  static long int123(int a) {\n    if (a > 123) \n        124 - a + Long.MAX_VALUE \n    else 123L - a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93287,"user_id":null,"body":"class Dinglemouse {\n  def static int123(a) {\n    if (a > 123) return (long)Integer.MAX_VALUE * 2 + 125 - a\n    if (a < 0) return Math.abs((long)a - 123)\n    123 - a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93288,"user_id":null,"body":"class Dinglemouse {\n  static long int123(long a) {\n    if (a <= 123) 123 - a else Long.MAX_VALUE - a + 124\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93289,"user_id":null,"body":"class Dinglemouse {\n  static long int123(long a) {\n    a <= 123 ? 123 - a : Long.MAX_VALUE + 124 - a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93290,"user_id":null,"body":"class Dinglemouse {\n  static int123(a) {\n    long diff = (long) (Integer.MAX_VALUE - a)\n    long b = (diff + 2147483647 + 123 + 2) \n    b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93291,"user_id":null,"body":"class Dinglemouse {\n  static long int123(a) {\n    a = (long)a\n    def goal = 123L\n    if(a > goal) {\n      return (long)Integer.MAX_VALUE * 2 - a + goal + 2\n    } else {\n      return goal - a\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93292,"user_id":null,"body":"class Dinglemouse {\n  static long int123(a) {\n    a > 123 || a < 0 ? (21474836603L - (long)a) : 123 - a\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"596e91b48c92ceff0c00001f":[{"id":93293,"user_id":575,"body":"class Kata {\n    static String[] words_to_hex(String words) {\n        words.split().collect { w -> \"#\" + w.take(3).collect { c -> Integer.toHexString((int) c) }.join().padRight(6, '0')}\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93294,"user_id":null,"body":"class Kata {\n    static String[] words_to_hex(String words) {\n        return words.split(\/\\s\/).collect { \n          \"#\" + it.take(3).bytes.encodeHex().toString().padRight(6, \"0\") \n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93295,"user_id":148,"body":"class Kata {\n    static String[] words_to_hex(String words) {\n        words.split(' ').collect {\n            def answer = new StringBuilder(\"000000\")\n            if (it[0]) {\n                answer.replace(0, 2, Integer.toHexString((it[0] as char) as int) )\n            }\n            if (it.size() > 1) {\n                answer.replace(2, 4, Integer.toHexString((it[1] as char) as int) )\n            }\n            if (it.size() > 2) {\n                answer.replace(4, 6, Integer.toHexString((it[2] as char) as int) )\n            }\n            (\"#\" + answer).toString()\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93296,"user_id":null,"body":"class Kata {\n    static String[] words_to_hex(String words) {\n        return words.split(\/\\s\/)*.padRight(3, \"\\u0000\")*.substring(0, 3).collect {\n            \"#\" + it.chars.collect { Integer.toHexString(it as int).padLeft(2, \"0\") }.join()\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93297,"user_id":null,"body":"class Kata {\n    static String[] words_to_hex(String words) {\n    \n      def list = []\n\t\t  \n      words.split(\" \").each { w ->\n\t\t\t  list.add(wordToHex(w))\n\t\t  }\n\t\t\n\t\t\n\t\t  return list\n    }\n    \n    static String wordToHex(String word) {\n\t\t\n\t\tStringBuilder sb = new StringBuilder()\n\t\tsb.append(\"#\")\n\t\t\n\t\tdef letter = 1\n\t\tword.each { c ->\n\t\t\t\n\t\t\tif(letter <= 3) {\n\t\t\t\tsb.append(Integer.toHexString((int) c))\n\t\t\t}\n\t\t\t\n\t\t\tletter++\n\t\t}\n\t\t\n\t\t\/\/we need to fill the rest with zeros\n\t\tif(word.length() < 3) {\n\t\t\t\n\t\t\tint iterations = 3 - word.length()\n\t\t\t\n\t\t\tfor(int i = 0 ; i < iterations ; i++) {\n\t\t\t\tsb.append(\"00\")\n\t\t\t}\n\t\t\t\n\t\t}\t\t\t\n\t\t\n\t\treturn sb.toString()\n\t}\n    \n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59c68ea2aeb2843e18000109":[{"id":93298,"user_id":null,"body":"class Finance {\n    \n    public static String amort(double rate, int bal, int term, int num_payments) {\n        \/\/ took me a few attempts to get the precisions right\n        double m = rate \/ (100 * 12)\n        double dc = (m * bal) \/ (1 - (1 + m)**(-1 * term))\n        double prevBal = (1 + m)**(num_payments - 1) * bal -\n            ((1 + m)**(num_payments - 1) - 1) * dc \/ m\n        double dinterest = m * prevBal\n        double dprinc = dc - dinterest\n        double dnewBal = prevBal - dprinc\n        int c = Math.round dc\n        int princ = Math.round dprinc\n        int interest = Math.round dinterest\n        int newBal = Math.round dnewBal\n        \"num_payment $num_payments c $c princ $princ int $interest balance $newBal\"\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93299,"user_id":null,"body":"class Finance {                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                                \n    static String amort(double rate, int bal, int term, int num_payments) {                                                                                                                                                                     \n                                                                                                                                                                                                                                                \n        def instance = new Finance()                                                                                                                                                                                                            \n        def parameters = new Parameters(instance, term, rate\/1200d, bal as double, num_payments)                                                                                                                                                \n        return amort(parameters, instance)                                                                                                                                                                                                      \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    static def amort(Parameters parameters, Finance instance) {                                                                                                                                                                                 \n                                                                                                                                                                                                                                                \n        double monthlyQuota = getMonthlyQuota(parameters)                                                                                                                                                                                       \n        def prevItem = [instance, [quota: monthlyQuota, balance: parameters.getAmount()]] as Item                                                                                                                                               \n        def item = calculateItem(1, prevItem, parameters, instance)                                                                                                                                                                             \n        return item != null ? item.formatOutput() : \"\"                                                                                                                                                                                          \n                                                                                                                                                                                                                                                \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    static Item calculateItem(ordinal, previousItem, parameters, Finance instance) {                                                                                                                                                            \n                                                                                                                                                                                                                                                \n        Item currentItem = [instance, [quota: previousItem.getQuota(), balance: previousItem.getBalance()]]                                                                                                                                     \n        def monthlyPrincipalRepayment = getMonthlyPrincipalRepayment(parameters.getMonthlyRate(), previousItem.getQuota(), previousItem.getBalance())                                                                                           \n                                                                                                                                                                                                                                                \n        \/\/ example of method call without using parenthesis                                                                                                                                                                                     \n        currentItem.setMonthlyAmounts ordinal, monthlyPrincipalRepayment                                                                                                                                                                        \n                                                                                                                                                                                                                                                \n        if (ordinal == parameters.getUpTo()) {                                                                                                                                                                                                  \n            return currentItem                                                                                                                                                                                                                  \n        } else {                                                                                                                                                                                                                                \n            return calculateItem(++ordinal, currentItem, parameters, instance)                                                                                                                                                                  \n        }                                                                                                                                                                                                                                       \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    static double power(d, n) { d**n }                                                                                                                                                                                                          \n                                                                                                                                                                                                                                                \n    static def calculateMonthlyRate(nominalMonthlyRate, amount) {                                                                                                                                                                               \n        nominalMonthlyRate*amount as double                                                                                                                                                                                                     \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    static def calculateD(nominalMonthlyRate, term) {                                                                                                                                                                                           \n        1d - power(1d+nominalMonthlyRate, -term)                                                                                                                                                                                                \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    def static getMonthlyQuota = {                                                                                                                                                                                                              \n        parameters ->                                                                                                                                                                                                                           \n        calculateMonthlyRate(parameters.getMonthlyRate(), parameters.getAmount())\/calculateD(parameters.getMonthlyRate(), parameters.getTerm())                                                                                                 \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    def static getMonthlyPrincipalRepayment = { rate, monthlyQuota, balance ->                                                                                                                                                                  \n        monthlyQuota - calculateMonthlyRate(rate, balance)                                                                                                                                                                                      \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    private class Parameters {                                                                                                                                                                                                                  \n        int term                                                                                                                                                                                                                                \n        double monthlyRate                                                                                                                                                                                                                      \n        double amount                                                                                                                                                                                                                           \n        int upTo                                                                                                                                                                                                                                \n                                                                                                                                                                                                                                                \n        Parameters(term, monthlyRate, amount, upTo) {                                                                                                                                                                                           \n            this.term = term                                                                                                                                                                                                                    \n            this.monthlyRate = monthlyRate                                                                                                                                                                                                      \n            this.amount = amount                                                                                                                                                                                                                \n            this.upTo = upTo                                                                                                                                                                                                                    \n        }                                                                                                                                                                                                                                       \n    }                                                                                                                                                                                                                                           \n                                                                                                                                                                                                                                                \n    private class Item {                                                                                                                                                                                                                        \n                                                                                                                                                                                                                                                \n        private double quota                                                                                                                                                                                                                    \n        private double balance                                                                                                                                                                                                                  \n        private int payment_number                                                                                                                                                                                                              \n        private double principal                                                                                                                                                                                                                \n        private double rate                                                                                                                                                                                                                     \n                                                                                                                                                                                                                                                \n        Item(Map attrs) {                                                                                                                                                                                                                       \n            quota = attrs.quota                                                                                                                                                                                                                 \n            balance = attrs.balance                                                                                                                                                                                                             \n        }                                                                                                                                                                                                                                       \n                                                                                                                                                                                                                                                \n        def setMonthlyAmounts(payment_number, principal = 0.0d) {                                                                                                                                                                               \n            this.payment_number = payment_number                                                                                                                                                                                                \n            this.principal = principal                                                                                                                                                                                                          \n            balance = this.balance - this.principal                                                                                                                                                                                             \n            rate = quota-this.principal                                                                                                                                                                                                         \n        }                                                                                                                                                                                                                                       \n                                                                                                                                                                                                                                                \n        double getQuota() {                                                                                                                                                                                                                     \n            return quota                                                                                                                                                                                                                        \n        }                                                                                                                                                                                                                                       \n                                                                                                                                                                                                                                                \n        double getBalance() {                                                                                                                                                                                                                   \n            return balance                                                                                                                                                                                                                      \n        }                                                                                                                                                                                                                                       \n                                                                                                                                                                                                                                                \n        def formatOutput() {                                                                                                                                                                                                                    \n            return sprintf(\"num_payment $payment_number c \"                                                                                                                                                                                     \n                        + '%.0f princ %.0f int %.0f balance %.0f', [quota, principal, rate, balance])                                                                                                                                           \n         }                                                                                                                                                                                                                                      \n    }                                                                                                                                                                                                                                           \n}                                                                                                                                                                                                                                                ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93300,"user_id":492,"body":"class Finance {\n    private static double payment(double rate, int bal, int term) {\n        double r = rate \/ 1200.0;\n        double n = r * bal;\n        double d = 1 - Math.pow(1 + r, -term);\n        double pmt = n \/ d;\n        return pmt;\n    }\n    public static String amort(double rate, int bal, int term, int num_payments) {\n        double p = payment(rate, bal, term);\n        double r = rate \/ 1200.0;\n        int i = 1;\n        double balance = bal;\n        double intrst = 0;\n        double princ = 0;\n        while (i <= num_payments) {\n            intrst = balance * r;\n            princ = p - intrst;\n            balance -= princ;\n            i = i + 1;\n        }\n        String output = String.format(\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\", i-1, p, \n                princ, intrst, balance);\n        return output;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59ccf051dcc4050f7800008f":[{"id":93301,"user_id":null,"body":"class Bud {\n    static String buddy(long start, long limit) {\n        long m = 0\n        long n = 0\n        for (i in start..<limit) {\n            n = i\n            m = findDivisors(n).sum() - 1\n            if (m > 0) {\n                if (n == findDivisors(m).sum() - 1 && n<m) {\n                    return \"($n $m)\"\n                    break\n                }\n            }\n        }\n            \"Nothing\"\n    }\n\n    static List findDivisors(long n) {\n\n        List divisors = []\n\n        1.upto(Math.sqrt(n)) {\n            if (n%it == 0) {\n                if (n%it == it) {\n                    divisors = divisors + [it]\n                } else if (it !=1) {\n                    divisors = divisors + [it] + [n\/it]\n                } else {\n                    divisors = divisors + [it]\n                }\n            }\n        }\n        divisors\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93302,"user_id":50,"body":"class Bud {\n    private static Sumdiv(long n){\n      long res=0\n      long e=Math.floor(Math.sqrt((double) n))\n      for (int k=2;k<=e;k++){\n        if (n%k==0){\n          res+=k+(n\/k)\n        }\n      }\n      if (e*e==n){\n        res-=e\n      }\n      return res\n    }\n    public static String buddy(long start, long limit) {\n      for (long n=start;n<=limit;n++){\n        long m=Sumdiv(n)\n        if (m != n && m >= start && Sumdiv(m) == n){\n          return \"(\"+n+\" \"+m+\")\"\n        }\n      }\n      return \"Nothing\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93303,"user_id":168,"body":"class Bud {\n    public static long sumDivs(long n) {\n      long s = 0\n      for (long d = 2; d * d <= n; d++) {\n        if (n % d == 0) {\n          s += d\n          if (d * d < n) s += n \/ d\n        }\n      }\n      return s\n    }\n  \n    public static String buddy(long start, long limit) {\n      for (n in start..limit) {\n        long t = sumDivs(n)\n        if (t > n && sumDivs(t) == n) return \"($n $t)\"\n      }\n      \"Nothing\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93304,"user_id":53,"body":"class Bud \n{\n    public static String buddy(long start, long limit) \n    {\n        String r = \"\";\n        long i = start;\n        while (i <= limit)\n        {\n            long a = fdivsum(i);\n            if (a - 1 > i) \n            {\n                long b = fdivsum(a - 1);\n                if (b - 1 == i)\n                {\n                    r += \"(\";\n                    r += i;\n                    r += \" \";\n                    r += (a - 1);\n                    r += \")\";\n                    return r;\n                }\n            }\n            i++;\n        }\n        r += \"Nothing\";\n        return r;\n    }\n  \n    private static long fdivsum(long n)\n    {\n        long sum = 1;\n        long i = 2;\n        while (i <= (long)Math.floor(Math.sqrt((double)n))) \n        {\n            if (n % i == 0) \n            {\n                sum += i;\n                if (i != n\/i)\n                {\n                    sum += (long)(n\/i);\n                }\n            }\n            i++;\n        }\n        return sum;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93305,"user_id":null,"body":"class Bud {\n    public static String buddy(long start, long limit) {\n      for (int n = start; n <= limit; n++){\n        def m = s(n)\n        if (n < m)\n          if (n == s(m))\n            return \"(\"+n+\" \"+m+\")\"\n      }\n      return \"Nothing\"\n    }\n  \n    public static int s(int n){\n      if (n == 0) return 0\n      def result = 0\n      for (int i = 1; i <= Math.sqrt(n); i++){\n        if (n%i == 0){\n          result += i\n          if (i != 1)\n            result += n\/i\n        }\n      }\n      return result - 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93306,"user_id":492,"body":"class Bud {\n    private static long nbd(long n) {\n        long sum = 1;\n        for(long i = 2; i <= (long)Math.sqrt(n); i++) {\n            if (n % i == 0) {\n               sum += i;\n               long d = n \/ i;\n               if (d != i) sum += d;\n            }\n        }\n        return sum;\n    }\n    public static String buddy(long start, long limit) {\n        for ( long n = start; n <= limit; n++ ) {\n            long m = nbd(n)-1;\n          if ( n == nbd(m)-1 && n < m ) return \"(\" + Long.toString(n) + \" \" + Long.toString(m) + \")\";\n        }\n        return \"Nothing\";\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93307,"user_id":492,"body":"class Bud {\n    private static long nbd(long n) {\n        long sum = 1;\n        for(long i = 2; i <= (long)Math.sqrt(n); i++) {\n            if (n % i == 0) {\n               sum += i;\n               long d = n \/ i;\n               if (d != i) sum += d;\n            }\n        }\n        return sum;\n    }\n    public static String buddy(long start, long limit) {\n        for ( long n = start; n <= limit; n++ ) {\n            long m = nbd(n)-1;\n          if ( n == nbd(m)-1 && n < m ) return \"(\" + Long.toString(n) + \" \" + Long.toString(m) + \")\";\n        }\n        return \"Nothing\";\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59d2fc6c23dacca182000068":[{"id":93308,"user_id":null,"body":"class Kata{\n  private static final notes = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]\n  static chords(root){\n    def index = notes.indexOf(root)\n    [0,4,7,0,3,7].collect{notes[(index+it)%12]}.collate(3)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93309,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    [[root,\n          notes.indexOf(root)+4<=11? notes[notes.indexOf(root)+4]:notes[notes.indexOf(root)+4-12],\n          notes.indexOf(root)+7<=11? notes[notes.indexOf(root)+7]:notes[notes.indexOf(root)+7-12]],\n         [root,\n          notes.indexOf(root)+3<=11? notes[notes.indexOf(root)+3]:notes[notes.indexOf(root)+3-12],\n          notes.indexOf(root)+7<=11? notes[notes.indexOf(root)+7]:notes[notes.indexOf(root)+7-12]]\n        ]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93310,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    def i = notes.indexOf(root)\n    def major = [root]\n    def minor = [root]\n    def len = notes.size()\n    i+4 < len ? major.add(notes[i+4]) : major.add(notes[i+4-len])\n    i+7 < len ? major.add(notes[i+7]) : major.add(notes[i+7-len])\n    i+3 < len ? minor.add(notes[i+3]) : minor.add(notes[i+3-len])\n    i+7 < len ? minor.add(notes[i+7]) : minor.add(notes[i+7-len])\n    [major,minor]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93311,"user_id":53,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root) {\n    return [\n      [root, notes[notes.findIndexOf { it == root } + 4], notes[notes.findIndexOf { it == root } + 7]],\n      [root, notes[notes.findIndexOf { it == root } + 3], notes[notes.findIndexOf { it == root } + 7]]\n    ]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93312,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    def index = notes.indexOf(root)\n    def major = [notes[index], notes[(index + 4) % 12] , notes[(index + 7) % 12]]\n    def minor = [notes[index], notes[(index + 3) % 12] , notes[(index + 7) % 12]]\n    [major, minor]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93313,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    def raw = notes + notes\n    def index = notes.indexOf(root)\n    def major = [raw[index], raw[index + 4], raw[index + 7]]\n    def minor = [raw[index], raw[index + 3], raw[index + 7]]\n    [major, minor]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93314,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    println notes.indexOf(root)\n    return [[root, notes.getAt(((notes.indexOf(root))+4)%notes.size()), notes.getAt(((notes.indexOf(root))+7)%notes.size())],\n           [root, notes.getAt(((notes.indexOf(root))+3)%notes.size()), notes.getAt(((notes.indexOf(root))+7)%notes.size())]]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93315,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n  def major = [root, notes[(notes.indexOf(root) + 4) % 12], notes[(notes.indexOf(root) + 7) % 12]]\n    def minor = [root, notes[(notes.indexOf(root) + 3) % 12], notes[(notes.indexOf(root) + 7) % 12]]\n    return [major, minor]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93316,"user_id":168,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\"]\n  static chords(root) {\n    def i = notes.indexOf(root)\n    [[root, notes[i + 4], notes[i + 7]], [root, notes[i + 3], notes[i + 7]]]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93317,"user_id":null,"body":"class Kata{\n  public static final notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n  static chords(root){\n    def start = notes.indexOf(root)\n    def third = start < 9 ? start + 3 : start - 9\n    def fourth = start < 8 ? start + 4 : start - 8\n    def seventh = start < 5 ? start + 7 : start - 5\n    def major = [notes[start], notes[fourth], notes[seventh]]\n    def minor = [notes[start], notes[third], notes[seventh]]\n    def result = [major, minor]\n    result\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59de795c289ef9197f000c48":[{"id":93318,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(String str) {\n    str.findAll { ![ 'B', 'b', 'M', 'm', 'W', 'w' ].contains(it) }.join('')\n  }\n  \n  static removeBMW(Object obj) {\n    throw new IllegalArgumentException(\"This program only works for text.\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93319,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if (!(str instanceof String)){\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }\n    str.replaceAll('[bmwBMW]', '');\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93320,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if (str in String) {\n      return str.replaceAll(\/(?i)[BMW]\/, '')\n    } else {\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93321,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if(!(str instanceof String))\n    {\n      throw new IllegalArgumentException(\"This program only works for text.\");\n    }\n\n    str.replaceAll(\/[BbMmWw]\/, \"\");\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93322,"user_id":2161,"body":"class BMWRemover {\n  static removeBMW(str) {\n    try{\n      return str.replaceAll('[bmwBMW]+','')\n    }\n    catch(Exception e) {\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93323,"user_id":575,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if(!(str in String)) {\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }  \n    (str =~ \/(?i)[bmw]+\/).replaceAll('')\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93324,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if (str instanceof String) {\n      return str.replaceAll('[bmwBMW]', '')\n    } else {\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93325,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if (!(str instanceof String))\n            throw new IllegalArgumentException(\"This program only works for text.\")\n        \n        str.replaceAll('[BbMmWw]', '')\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93326,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    def s\n    if (str instanceof String) {\n      s = str\n      ['b','m','w','B','M','W'].each{it ->\n        s = s.replaceAll(it, \"\")\n      }\n    }else{\n      throw new IllegalArgumentException(\"This program only works for text.\")\n    }\n    return s\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93327,"user_id":null,"body":"class BMWRemover {\n  static removeBMW(str) {\n    if(str instanceof String){\n    return str.replaceAll('[BbMmWw]','')\n    }\n    throw new IllegalArgumentException(\"This program only works for text.\")\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59df2f8f08c6cec835000012":[{"id":93328,"user_id":492,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        return s.toUpperCase().split(\";\")\n                .collect{it.replaceAll(\"(\\\\w+):(\\\\w+)\", '($2, $1)')}\n                .sort()\n                .join(\"\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93329,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n      s.toUpperCase().split(';').collect {\n        '(' + it.split(':').reverse().join(', ') + ')'\n      }.sort().join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93330,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n         def persons = s.split(';');\n         persons = persons.collect {\n           it -> it.toUpperCase().split(':').reverse().join(', ');\n         }\n        return '(' + persons.sort().join(')(') + ')';\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93331,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        def friendList = s.toUpperCase().tokenize(';').collect{\"(${it.tokenize(':').reverse().join(', ')})\"}\n        return friendList.sort().join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93332,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        \/\/ your code\n      s.toUpperCase().split(';').collect {\n        it.split(':')\n      }.collect { it ->\n        \"(${it[1]}, ${it[0]})\"\n      }.sort().join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93333,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        \/\/ your code\n      s.toUpperCase().split(';').collect {\n        it.split(':')\n      }.sort({ d1, d2 ->\n        d1[1] <=> d2[1] ?: d1[0] <=> d2[0]\n      }).collect { it ->\n        \"(${it[1]}, ${it[0]})\"\n      }.join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93334,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        s.tokenize(\";\")*.split(\/:\/)*.reverse().collect { \"(${it.join(\", \")})\".toUpperCase() }.sort().join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93335,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n        Comparator byLastName = { a, b ->\n          def (aFirstName, bFirstName) = [a[0].toLowerCase(), b[0].toLowerCase()]\n          def (aLastName, bLastName) = [a[1].toLowerCase(), b[1].toLowerCase()]\n          if (aLastName == bLastName) {\n            return aFirstName < bFirstName ? -1 : 1\n          } else {\n            return aLastName < bLastName ? -1 : 1\n          }\n        }\n\n        List names = s.split(';').collect { it.split(':') }\n        names.sort(byLastName)\n        return names.collect { \"(${it[1].toUpperCase()}, ${it[0].toUpperCase()})\" }.join()\n    }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93336,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n      \n      s.toUpperCase().split(\";\").collect { String it -> it.split(\":\") }.collect { String[] it ->\n            it.swap(0, 1) }.sort { String[] a, String[] b -> a[0] <=> b[0] ?: a[1] <=> b[1] }.collect { String[] it ->\n            \"(\" + it.join(\", \") + \")\"}.join()\n    }\n}\n  ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93337,"user_id":null,"body":"class Meeting {\n\n    public static String meeting(String s) {\n      def list =\n          s.toUpperCase().split(';')\n          .collect {it.split(':').reverse()}\n        list.sort {a,b -> a.first() <=> b.first() ?: a.last() <=> b.last()}\n        def out = ''\n        list.each(){\n          out += '(' + it.first() + ', ' + it.last() + ')'\n        }\n        return out\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59f061773e532d0c87000d16":[{"id":93338,"user_id":527,"body":"class Kata {\n  static int elevator_distance(a) {\n    a.collate(2, 1, false).sum { Math.abs(it[0] - it[1]) }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93339,"user_id":null,"body":"class Kata {\n  static int elevator_distance(a) {\n    a.collate(2,1,false).collect { x, y -> Math.abs(x - y) }.sum()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93340,"user_id":759,"body":"class Kata {\n  static int elevator_distance(a) {\n    int result = 0\n    for (int i = 1; i < a.size(); ++i) result += Math.abs(a[i] - a[i-1])\n    result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93341,"user_id":null,"body":"class Kata {\n  static int elevator_distance(arr) {\n    def sum = 0\n    for(int i = 0; i < arr.size() - 1; i++){\n      sum += Math.abs(arr[i]-arr[i+1])\n    }\n    \n    return sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93342,"user_id":null,"body":"class Kata {\n  static int elevator_distance(a) {\n    Integer result = 0\n    \n    for (int i in 0..a.size()-2) {\n      if (a[i] > a[i+1]) {\n        result += a[i] - a[i+1]\n      } else if (a[i] < a[i+1]) {\n        result += a[i+1] - a[i]\n      }\n    }\n    \n    result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93343,"user_id":null,"body":"import java.lang.Math\nclass Kata {\n  static int elevator_distance(a) {\n    def floors = 0\n    for (int i = 0; i < a.size()-1; i++){\n        floors += Math.abs(a[i] - a[i+1])\n    }\n    return floors  \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93344,"user_id":null,"body":"\n  \nclass Kata {\n    static void main(String[] args) {\n        println(elevator_distance([5, 2, 8]))\n        println(elevator_distance([1,2,3]))\n        println(elevator_distance([7,1,7,1]))\n    }\n\n    static int elevator_distance(a) {\n        int movimientos = 0\n        int posicion = 0\n        int posicionA = 0\n        int posicionB = 0\n        int cont = 1\n          while (a.size() != cont) {\n            posicionA = a[posicion]\n            posicion++\n            posicionB = a[posicion]\n             while (posicionA != posicionB) {\n                if (posicionA > posicionB) {\n                    posicionA--\n                    movimientos++\n                } else if (posicionA < posicionB) {\n                    posicionA++\n                    movimientos++\n                }\n            } \n            cont++\n        }\n                return movimientos\n    }\n}\n\n\n\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93345,"user_id":228,"body":"class Kata {\n  static int elevator_distance(a) {\n    def distance = 0\n    def last = a.size() - 1\n    for (def i = 0; i < last; i++) {\n      distance += Math.abs(a[i] - a[i + 1])\n    }\n    distance\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93346,"user_id":null,"body":"class Kata {\n  static int elevator_distance(a) {\n    def oldFloor = a[0]\n    def sum = 0\n    a.each{\n      sum += Math.abs(it - oldFloor)\n      oldFloor = it\n    }\n    return sum\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93347,"user_id":null,"body":"class Kata {\n  static int elevator_distance(a) {\n    def ret = 0 \n    for(int i =0; i< a.size()-1; i++) {\n      ret += Math.abs(a[i]-a[i+1])\n    }\n    ret    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59f44c7bd4b36946fd000052":[{"id":93348,"user_id":492,"body":"class Hist {\n\n    private static String err(String s, char c) {\n        s = s.replace(c,'*' as char).replaceAll(\"[^*]\",\"\")\n        if (!s.isEmpty()) s = String.format(\"%c  %-6d%s\\r\", c, s.length(), s)\n        return s\n    }\n    public static String hist(String s) {\n        return (err(s,'u'as char) + err(s,'w'as char) + err(s,'x'as char) + err(s,'z'as char)).trim()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93349,"user_id":null,"body":"class Hist {\n\n    public static String hist(String s) {\n        LinkedHashMap<String, Integer> count = []\n        for (letter in s)\n            count[letter] = count[letter] == null ? 1 : count[letter] + 1\n\n        ArrayList<String> res = []\n        for (letter in \"uwxz\") {\n            if (count[letter] > 0) {\n                String num = sprintf(\"%-6d\", count[letter])\n                String stars = '*' * count[letter]\n                res.add(sprintf(\"%s  %s%s\", letter, num, stars))\n            }\n        }\n\n        return String.join('\\r', res)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93350,"user_id":null,"body":"class Hist {\n  static HashMap getErrorsMap (String printer_output){\n    \/\/Generates errors map from input string out from printer\n    \n        def work_list = printer_output.toList()\n        def errors_names = ['u', 'w', 'x', 'z']\n        def result_map = [:]\n        work_list.intersect(errors_names).each{it -> result_map.put(it, 0)}\n        errors_names.intersect(work_list).each{it -> result_map.put(it, result_map.get(it) +1)}\n        return result_map\n    }\n    public static String display(List<String> keys,ArrayList<Integer> values){\n      \/\/Displaying the hashmap as a string following the format\n      \n      String display = ''\n        for (int i = 0; i < keys.size(); i++){\n            String display_string = \"*\"*values[i]\n      \/\/Separating for different lengths of number and adding \\r between each\n          \n            if (values[i] < 10){display = display + (String.format(\"%s  %d     %s\", keys[i], values[i], display_string))}\n            else{display = display + (String.format(\"%s  %d    %s\", keys[i], values[i], display_string))}\n            if (i < keys.size()-1){display = display + \"\\r\"\n            }\n        }\n      \n        return(display)\n\n    }\n    \n    public static String hist(String input_string) {\n      \/\/Generating error map from String and displaying, both using functions for readability\n      \n        def errors_map = getErrorsMap(input_string)\n        def display_keys = errors_map.keySet() as List<String>\n        def display_values = errors_map.values() as ArrayList<Integer>\n        return (Hist.display(display_keys, display_values))\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93351,"user_id":null,"body":"class Hist {\n    public static String hist(String s) {\n        return \"uwxz\".split('').inject([], { r, i ->\n            def c = s.count(i)\n            if (c > 0) {\n                r << \"${i}  ${c}${c >= 10 ? '    ' : '     '}${'*' * c}\"\n            };\n            r\n        }).join('\\r')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93352,"user_id":null,"body":"class Hist {\n\n    public static String hist(String s) {\n        s.findAll(\/[uwxz]\/).sort().countBy{ it }.collect{ let, num -> \"$let  ${\"$num\".padRight(6, ' ')}${'*'*num}\"}.join('\\r')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93353,"user_id":null,"body":"class Hist {\n\n    public static String hist(String s) {\n      def res = []\n      \"uwxz\".each{ ch->\n        def cnt = s.count(ch)\n        if (cnt > 0) {\n          res.add(ch + \"  \" + cnt + \" \" * (6 - cnt.toString().size()) + \"*\" * cnt)\n        }\n      }\n      return res.join(\"\\r\")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93354,"user_id":null,"body":"class Hist {\n    public static String hist(String s) {\n        ['u','w','x','z'].collect {\n            format(s,it)\n        }.findAll { it }.join('\\r')\n    }\n  \n    static String format(s,letter) {\n        int count = (s =~ \/$letter\/).size()\n        if(count) {\n            return \"$letter  ${(count as String).padRight(6)}${(1..count).collect{'*'}.join('')}\"\n        } else {\n            return ''\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93355,"user_id":null,"body":"class Hist {\n    \n    public static String hist(String s) {\n        return ['u', 'w', 'x', 'z']\n                .findAll { s.contains(it) }\n                .collect { errorCode ->\n            int count = s.count(errorCode)\n            String errorField = errorCode.padRight(2)\n            String countField = (count as String).padRight(6)\n            String histField = '*' * count\n            return errorField + \" \" + countField + histField\n        }.join('\\r')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93356,"user_id":null,"body":"class Hist {\n\n    public static String hist(String s) {\n      [\n        str(\"u\", s.findAll(\"u\").size()),\n        str(\"w\", s.findAll(\"w\").size()),\n        str(\"x\", s.findAll(\"x\").size()),\n        str(\"z\", s.findAll(\"z\").size())\n      ].\n      findAll { it != \"\" }.\n      join(\"\\r\")\n    }\n    \n    static String str(String c, int count) {\n      count > 0 ? \"${c.padRight(2)} ${(count as String).padRight(6)}${'*' * count}\" : \"\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93357,"user_id":null,"body":"class Hist {\n\n    public static String hist(String s) {\n        \/\/ your code\n        def result = \"\";\n        result = s.count(\"u\") > 0 ? \"u  \"+s.count(\"u\")+Hist.spare(s.count(\"u\"))+Hist.star(s.count(\"u\")) : result ;\n        result = s.count(\"u\") > 0 && ( s.count(\"w\") > 0 || s.count(\"x\") > 0 || s.count(\"z\") > 0 ) ? result+\"\\r\" : result ;\n        result = s.count(\"w\") > 0 ? result+\"w  \"+s.count(\"w\")+Hist.spare(s.count(\"w\"))+Hist.star(s.count(\"w\")) : result ;\n        result = s.count(\"w\") > 0 && ( s.count(\"x\") > 0 || s.count(\"z\") > 0 ) ? result+\"\\r\" : result ;\n        result = s.count(\"x\") > 0 ? result+\"x  \"+s.count(\"x\")+Hist.spare(s.count(\"x\"))+Hist.star(s.count(\"x\")) : result ;\n        result = s.count(\"x\") > 0 && s.count(\"z\") > 0 ? result+\"\\r\" : result ;\n        result = s.count(\"z\") > 0 ? result+\"z  \"+s.count(\"z\")+Hist.spare(s.count(\"z\"))+Hist.star(s.count(\"z\")) : result ;\n        return result\n    }\n    public static String star(int x){\n    String r='';\n    for( int i = 0 ; i < x ; i++ ){\n    r+=\"*\"\n    }\n    return r\n    }\n    public static String spare(int x){\n    String r='';\n    if(x>9 && x <100){\n    return \"    \"\n    }else\n    return \"     \"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59f4a0acbee84576800000af":[{"id":93358,"user_id":53,"body":"class PositionAverage {\n    \n    public static double posAverage(String s) {\n        def hit = 0\n        def size = s.length()\n        def m = s.indexOf(',');\n        def n = (size + 2) \/ (m + 2);\n        def tot = m * n * (n - 1) \/ 2;\n        for (int i = 0; i < size - m - 2; i += m + 2) {\n            for (int j = i + m + 2; j < size; j += m + 2) {\n                for (int k = 0; k < m; k++) {\n                    if (s[i+k] == s[j+k]) hit++;\n                }\n            }\n        }\n        return (double) hit \/ tot * 100;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93359,"user_id":null,"body":"class PositionAverage {\n    \n    public static double posAverage(String s) {\n        double count = 0;\n      double all = 0;\n        String[] strings = s.split(', ');\n        for(String s1: strings){\n          for(String s2: strings){\n            if(s1.is(s2)) continue;\n            for(int i = 0; i < s1.length(); i++){\n              if(s1[i] == s2[i]) count++;\n              all++;\n            }\n          }\n        }\n      return count \/ all * 100;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93360,"user_id":null,"body":"class PositionAverage {\n    \n    public static double posAverage(String s) {\n      float result = 0\n      def subStrings = s.split(', ')\n      \n      for (int i = 0; i < subStrings.size(); i++)\n        for (int j = 0; j < subStrings.size(); j++)\n           for (def k = 0; k < subStrings[0].length(); k++)\n              if (i !=j && subStrings[i][k] == subStrings[j][k])\n                result++\n\n      return String.format(\"%.10f\", result \/ 2 \/ (subStrings.size() * (subStrings.size()-1) \/ 2 * subStrings[0].length()) * 100) as Double\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93361,"user_id":null,"body":"class PositionAverage {\n    \n    public static double posAverage(String s) {\n        def input = s.split(\", \")\n        def totalCounter = 0\n        def sameCharCounter = 0\n        input.eachWithIndex{ str1 , ind1 -> \n          input.eachWithIndex{ str2, ind2 ->\n            if( ind1<ind2 ) {\n              str1.eachWithIndex{ cha , ind3 -> \n                if(str2[ind3] == cha) sameCharCounter++\n                totalCounter++\n              }\n            }\n          }\n        }\n        ( sameCharCounter * 100 \/ totalCounter )\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93362,"user_id":null,"body":"class PositionAverage {\n    \n    public static double posAverage(String s) {\n        def hits = 0\n        def attempts = 0\n        def strings = s.replace(' ','').split(\/,\/)\n        for(def i = 0; i < strings.size() - 1; i++){\n            for(def j = i + 1; j < strings.size(); j++){\n                for(def k = 0; k < strings[i].size(); k++){\n                    attempts++\n                    if(strings[i][k] == strings[j][k]) hits++\n                }\n            }\n        }\n        return hits*100\/attempts\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93363,"user_id":492,"body":"class PositionAverage {\n    private static double pairPercentage(String s1, String s2) {\n        int lg = s1.length(); int count = 0\n        for (int pos = 0; pos < lg; pos++) {\n            if (s1.charAt(pos) == s2.charAt(pos))\n                count += 1\n        }\n        return (double)count \/ lg\n    }\n    public static double posAverage(String s) {\n        String[] strings = s.split(\", \")\n        double result = 0.0; int cnt = 0; int lg = strings.length\n        for (int k = 0; k < lg; k++) {\n            for (int i = k + 1; i < lg; i++) {\n                result += pairPercentage(strings[k], strings[i])\n                cnt += 1\n            }\n        }\n        result = 100.0 * result \/ cnt\n        return Math.floor(result * Math.pow(10.0, 10)) \/ Math.pow(10.0, 10)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a03b3f6a1c9040084001765":[{"id":93364,"user_id":2905,"body":"class Kata {\n    static def angle(n) {\n        return 180 * (n-2)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93365,"user_id":null,"body":"class Kata {\n    static def angle(n) {\n        if(n < 3) {\n          throw new Exception(\"Not a polygon\"); \n        } else {\n          return ((n-2)*180)\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93366,"user_id":null,"body":"class Kata {\n    static def angle(n) \n    {\n      if(n > 2)\n      {\n        return (n-2) * 180\n      }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93367,"user_id":null,"body":"class Kata {\n    static def angle(n) {\n        def sum = (n-2) * 180\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93368,"user_id":null,"body":"class Kata {\n    static def angle(n) {180 + (n-3)*180}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93369,"user_id":null,"body":"class Kata {\n    static def angle(n) {\n      int sumOfAngle = 180\n      if(n > 3){\n        sumOfAngle = 180 + ((n-3) * 180)\n      }\n      return sumOfAngle\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93370,"user_id":null,"body":"class Kata {\n    static def angle(n) {\n      \/*\n        Find the total sum of internal angles (in degrees) \n        in an n-sided simple polygon. \n        N will be greater than 2.\n      *\/\n      return (n-2) * 180\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93371,"user_id":null,"body":"class Kata {\n    static def angle(n) {\n        return n == 2? 0 : 180 + angle(n - 1);\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93372,"user_id":null,"body":"class Kata {\n    static def angle(int n) {\n        (2*n - 4) * 90\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93373,"user_id":null,"body":"class Kata {\n    static final int TRIANGLE_INTERNAL_SUM = 180\n    static final int FULL_ANGLE_SUM = 360\n    static def angle(n) {\n      \/* \n       * we can 'slice' a polygon like a pizza dividing it\n       * in n triangles. The sum of the internal angle of every\n       * triangle is 180 degrees, so we can multiply by n and remove\n       * the 360 degrees angle formed by the vertex conjunging in the center\n       *\/\n      TRIANGLE_INTERNAL_SUM * n - FULL_ANGLE_SUM\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a045fee46d843effa000070":[{"id":93374,"user_id":null,"body":"class FactDecomp {\n  public static String decomp(int n) {\n    def primes = [];\n    (2..n).each { primes.addAll(primeFactors(it)) };\n    def counts = primes.countBy { it };\n    def out = [];\n    counts.each { key, val ->\n      out.add(val > 1 ? \"${key}^${val}\" : \"${key}\");\n    }\n    return out.join(' * ');\n  }\n  \n  static def primeFactors(int n) {\n    def primes = [];\n    for (int candidate = 2; n > 1; candidate++) {\n      for (; n % candidate == 0; n \/= candidate) {\n        primes.add(candidate)\n      }\n    }\n    return primes;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93375,"user_id":null,"body":"class FactDecomp {\n  \n    private static ArrayList primesOfNumber(primes, number, divisor) {\n      if (number == 1)\n        return primes\n      if (number % divisor == 0) {\n        primes << divisor\n        return primesOfNumber(primes, number.intdiv(divisor), divisor)\n      } else {\n        return primesOfNumber(primes, number, divisor+1)\n      }\n    }\n  \n    private static ArrayList findPrimes(int n) {\n      return primesOfNumber([], n, 2)\n    }\n    \n    public static String decomp(int n) {\n      (1..n).collectMany {\n        findPrimes(it)\n      }.groupBy {\n        it\n      }.collectEntries {\n        k, v -> [k, v.size()]\n      }.collect {\n        k, v -> v > 1 ? \"$k^$v\" : k\n      }.join(\" * \")\n    }\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93376,"user_id":null,"body":"import java.util.logging.Logger\n\nclass FactDecomp {\n    static Map<Integer, Map<Integer, Integer>> factorialAsPrimeNumbersRepresentation = [:]\n    static Map<Integer, Map<Integer, Integer>> integerAsPrimeNumbersRepresentation = [:]\n\n    static String decomp(int n) {\n        int factorialEnd = n\n        Map factorialAsPrimeNumbersAnswerForN = [:]\n        if (factorialAsPrimeNumbersRepresentation?.containsKey(n)) {\n            factorialAsPrimeNumbersAnswerForN = factorialAsPrimeNumbersRepresentation.get(n)\n        } else {\n            def factorialStart = factorialAsPrimeNumbersRepresentation?.keySet()\n                    ?.findAll { it < n }\n                    ?.max()\n            if (!factorialStart) {\n                factorialStart = 2\n            } else {\n                factorialAsPrimeNumbersAnswerForN = factorialAsPrimeNumbersRepresentation.get(factorialStart)\n                factorialStart = factorialStart + 1\n            }\n            (factorialStart..factorialEnd).each { it ->\n                factorialAsPrimeNumbersAnswerForN = sumMapsValuesByKey(\n                        factorialAsPrimeNumbersAnswerForN,\n                        findPrimeNumbersVersionTwo(it)\n                )\n            }\n            factorialAsPrimeNumbersRepresentation.put(n, factorialAsPrimeNumbersAnswerForN)\n        }\n        generateStringAnswer(factorialAsPrimeNumbersAnswerForN)\n    }\n\n    static def findPrimeNumbersVersionTwo(int number, int divider = 2) {\n        if(integerAsPrimeNumbersRepresentation.containsKey(number)){\n            return integerAsPrimeNumbersRepresentation.get(number)\n        } else {\n            def numberAsPrimeNumberRepresentation = new HashMap<Integer, Integer>()\n            if( new BigInteger(number).isProbablePrime(number)){\n                numberAsPrimeNumberRepresentation = [(number):1]\n            } else {\n                int currentNumber = number\n                while(currentNumber != 1 ){\n                    if(currentNumber % divider == 0 ){\n                        numberAsPrimeNumberRepresentation = sumMapsValuesByKey(numberAsPrimeNumberRepresentation,[(divider):1])\n                        currentNumber = currentNumber \/ divider\n                        numberAsPrimeNumberRepresentation = sumMapsValuesByKey(numberAsPrimeNumberRepresentation,findPrimeNumbersVersionTwo(currentNumber, divider))\n                        currentNumber = 1\n                    } else {\n                        divider = new BigInteger(divider).nextProbablePrime()\n                    }\n                }\n            }\n            integerAsPrimeNumbersRepresentation.put(number,numberAsPrimeNumberRepresentation)\n            return numberAsPrimeNumberRepresentation\n        }\n    }\n\n    static def sumMapsValuesByKey(def currentMap, def addThisMap) {\n        def resultsMap = new LinkedHashMap<>()\n        if (currentMap && addThisMap) {\n            resultsMap.putAll(currentMap)\n            addThisMap.each { Integer keyAddition, Integer valueAddition ->\n                if (currentMap.containsKey(keyAddition)) {\n                    def sum = currentMap.get(keyAddition) + valueAddition\n                    resultsMap.put(keyAddition, sum)\n                } else {\n                    resultsMap.put(keyAddition, valueAddition)\n                }\n            }\n            resultsMap\n        } else {\n            if (currentMap) return currentMap\n            if (addThisMap) return addThisMap\n        }\n        resultsMap\n    }\n\n    static def generateStringAnswer(def answerAsMap) {\n        answerAsMap.collect { key, value ->\n            (value == 1) ? \"${key}\" : \"${key}^${value}\"\n        }.join(\" * \")\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93377,"user_id":759,"body":"import groovy.transform.*\n\n@CompileStatic\nclass FactDecomp {\n    static List<Integer> primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    \n    static {\n      outer: for (int i = 36; i < 4000; i += 6) {\n        def m1 = false, m2 = false\n        for (p in primes) {\n          if (!m1 && (i - 1) % p == 0) m1 = true\n          if (!m2 && (i + 1) % p == 0) m2 = true\n          if (m1 && m2) continue outer\n        }\n        if (!m1) primes.add(i - 1)\n        if (!m2) primes.add(i + 1) \n      }\n    }\n    \n    public static String decomp(int n) {\n        def r = new ArrayList<Integer>(primes.size())\n        for (p in primes) {\n          int d = (int) n.intdiv(p)\n          int c = d\n          while (c != 0)\n            d += c = (int) c.intdiv(p)\n          r.add(d)\n        }\n        def s = new StringBuilder()\n        for (int i = 0; i < r.size() && r[i] != 0; ++i) {\n          s.append(primes[i])\n          if (r[i] != 1) {\n            s.append((char) '^')\n            s.append(r[i])\n          }\n          s.append(' * ')\n        }\n        s.setLength(s.length() - 3)\n        s.toString()\n    }\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93378,"user_id":null,"body":"class FactDecomp {\n    \n    public static String decomp(int n) {\n        \/\/ Get prime factors of all numbers multiplied to get n!\n        def primeFactors = []\n        (2..n).each {\n            primeFactors.addAll(getPrimeFactors(it))\n        }\n        \n        \/\/ Count the occurrences of each factor to get exponent\n        def primeFactorPowers = []\n        primeFactors.sort().countBy{it}.each { factor, exponent ->\n            if (exponent == 1) {\n                primeFactorPowers.add(factor.toString())\n            } else {\n                primeFactorPowers.add(\"${factor}^${exponent}\")\n            }\n        }\n        primeFactorPowers.join(' * ')\n    }\n    \n    public static int[] getPrimeFactors(int n) {\n        def primeFactors = []\n        def factor = 2\n        while(factor <= Math.sqrt(n) && (n > 1)) {\n            if (n % factor == 0) {\n                primeFactors.add(factor)\n                n = n \/ factor\n            } else {\n                factor++\n            }\n        }\n        if (n > 1) {\n            primeFactors.add(n)\n        }\n        return primeFactors\n    }\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93379,"user_id":null,"body":"class FactDecomp {\n    static factor = [:]\n    static cache = [:]\n    static int findDiv(number) {\n        FactDecomp.factor.keySet().each {\n            while (!((int)number % it)) {  \n                FactDecomp.factor[it]++\n                number \/= it\n            }\n        }\n        return number\n    }\n    static prepareFactor() {\n        def list = 2..4000\n        list.each {\n            def last = this.findDiv(it)\n            if (last > 1) {\n                factor.put(last,1)\n            }\n            FactDecomp.cache.put(it,factor.clone())\n        }\n    \n    }\n    public static String decomp(int n) {            \n        if (n>4000 || n<2) {\n            throw new Exception('N wrong')\n        }\n        if (!FactDecomp.cache.get(n)) {\n            FactDecomp.prepareFactor()\n        }\n        def finalFactor = FactDecomp.cache.get(n)\n        \n        def output = []\n        finalFactor.entrySet().each {\n            output.push(\"${it.key}\"+((it.value>1)?\"^${it.value}\":\"\"))\n        }\n        return output.join(\" * \")\n    }\n\n\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93380,"user_id":null,"body":"import groovy.transform.Memoized\n\nclass FactDecomp {\n\n  public static String decomp(int n) {\n    (2..n).findAll { isPrime(it) }.collect { p ->\n      def f = getFrequency(p, n)\n      f > 1 ? \"${p}^${f}\" : \"${p}\"\n    }.join(' * ')\n  }\n\n  @Memoized\n  static boolean isPrime(long n) {\n    if (n % 2 == 0) return n == 2\n    if (n % 3 == 0) return n == 3\n    (3..(int)Math.sqrt(n) + 1).step(2).every { n % it }\n  }\n  \n  static int getFrequency(int prime, int n, int freq = 0) {\n    def r = (int)(n \/ prime)\n    r ? getFrequency(prime, r, freq + r) : freq\n  }\n\n} ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93381,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.List;\n\nclass FactDecomp {\n    private static List<Integer> sieve(int n) {\n        boolean[] isPrime = new boolean[n + 1]; \n        List<Integer> primes = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++)\n            isPrime[i] = true;\n        for (int i = 2; i <= n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n                for (int j = i; j * i <= n; j++) {\n                    isPrime[i * j] = false;\n                }\n            }\n        }\n        return primes;  \n    }\n    private static int power(int n, int p) {\n        int s = 0;\n        while (n >= p) {\n            s += n \/ p;\n            n \/= p;\n        }\n        return s;\n    }\n    public static String decomp(int n) {\n        if (n < 2) return \"1\";\n        StringBuilder result = new StringBuilder();\n        List<Integer> primes = sieve(n);\n        for (Integer x : primes) {\n            int p = power(n, x);\n            if (p == 1) \n                result.append(String.format(\"%d * \", x));\n            else if (p != 0)\n                result.append(String.format(\"%d^%d * \", x, p));\n        }\n        String s = result.toString();\n        return s.substring(0,  s.length() - 3);  \n    }\n} \n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a057ec846d843c81a0000ad":[{"id":93382,"user_id":492,"body":"class Cycle {\n    public static int cycle(int n) {\n        if(n % 2==0 || n % 5 ==0)\n            return -1;\n        int r = 1;\n        for (int i = 1; i <= n; i++) {\n            r =  r * 10 % n;\n            if (r == 1)\n                return i;\n        }\n        return -1;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93383,"user_id":53,"body":"class Cycle {\n    public static int cycle(int n) {\n        if (n%2 == 0 || n%5 == 0) return -1;\n        int m = 10 % n, cnt = 1;\n        while (m != 1) {\n            m = m * 10 % n; \n            cnt++;\n        }\n        return cnt;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93384,"user_id":527,"body":"class Cycle {\n    public static int cycle(int n) {\n        if (n % 2 == 0 || n % 5 == 0) {\n            -1\n        } else {\n            int r = 1, k = 0\n            while (r != 1 || k == 0) {\n                r = r * 10 % n\n                k++\n            }\n            k\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93385,"user_id":492,"body":"class Cycle {\n    public static int cycle(int n) {\n        if(n % 2==0 || n % 5 ==0)\n            return -1;\n        int r = 1;\n        for (int i = 1; i <= n; i++) {\n            r =  r * 10 % n;\n            if (r == 1)\n                return i;\n        }\n        return -1;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a32526ae1ce0ec0f10000b2":[{"id":93386,"user_id":null,"body":"class Kata{\n    static int digits_average(i) {\n      i < 10 ? i : digits_average(\"$i\".collect { it as int }.collate(2,1,false).collect { Math.round((it[0] + it[1]) \/ 2)}.join() as int)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93387,"user_id":null,"body":"class Kata{\n    static int digits_average(i) {\n  def arr =  \"$i\".collect {it as Integer}\n        while(arr.size()>1){\n           arr =  arr.collate(2,1,false).collect{a,b->Math.round((a+b)\/2)}\n        }\n        return arr.get(0)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93388,"user_id":null,"body":"class Kata{\n    static int digits_average(input) {\n      if (input < 10) return input\n      List list = ((input+'') as List).collect{ it as Integer }\n      digits_average(list.takeRight(list.size-1).withIndex()\n        .collect{ elem,i -> (int)((elem+list.get(i))\/2+0.9)}\n        .inject(0){res, cur -> res*10+cur})\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93389,"user_id":null,"body":"class Kata{\n    static int digits_average(n) {\n      if (n < 10) {\n            return n\n        }\n        def numbers = n.toString().collect() { it as Integer }\n        while (numbers.size() > 1) {\n            def numbersArray = []\n            for (int i = 0; i < numbers.size() - 1; i++) {\n                numbersArray.add(Math.ceil((numbers[i] + numbers[i + 1]) \/ 2).toInteger())\n            }\n            numbers = numbersArray\n        }\n        numbers[0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93390,"user_id":168,"body":"class Kata{\n    static int digits_average(i) {\n      def xs = \"$i\".iterator().collect { it as int }\n      while (xs.size() > 1) {\n        xs = xs.drop(1).indexed().collect { j, x -> x + xs[j] + 1 >> 1 }\n      }\n      return xs[0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93391,"user_id":null,"body":"class Kata{\n    static int digits_average(x) {\ndef y = \"$x\".collect {it as Integer}\nwhile(y.size() > 1){\n    y = y.collate(2,1,false).collect{((it[0] + it[1]) \/ 2).round()}\n}\nreturn y[0]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93392,"user_id":null,"body":"class Kata{\n    static int digits_average(number) {\n        if (number < 10) {\n            return number\n        }\n        def string = number.toString()\n        while (true) {\n            def result = \"\"\n            for (def idx = 1; idx < string.length(); idx++) {\n                def number1 = Integer.parseInt(string[idx - 1])\n                def number2 = Integer.parseInt(string[idx])\n                result += Math.round((number1 + number2) \/ 2)\n            }\n            if (result.length() == 1) {\n                return Integer.parseInt(result)\n            }\n            string = result\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93393,"user_id":1492,"body":"import java.lang.Math\n\nclass Kata{\n    static int digits_average(i) {\n      return rec(i.toString()).toInteger()\n    }\n  \n   static def rec(s){\n      println(s)\n      if (s.size() == 1){\n        return s\n      }\n      \n      def result = []\n      for (def i=0; i < s.size()-1; i++){\n        \n        \/\/println(\"I\" + i)\n        def a = s.substring(i,i+1)\n        def b = s.substring(i+1,i+2)\n        def newNum = Math.ceil((a.toInteger() + b.toInteger()) \/ 2).toInteger()\n        result.add(newNum.toString())\n      }\n       return rec(result.join(\"\"))\n   }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93394,"user_id":148,"body":"class Kata{\n  static int digits_average(n) {\n        if (n > 9) {\n            def number = String.valueOf(n)\n            def average = \"\"\n            for (def i = 1; i < n.toString().length(); i++) {\n                average += (Math.ceil(((number.charAt(i - 1).toString() as Integer) + (number.charAt(i).toString() as Integer)) \/ 2) as Integer) as String\n            }\n            return digits_average(average as Integer)\n        }\n        return n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93395,"user_id":null,"body":"class Kata{\n    static int digits_average(i) {\n      i < 10 ? i : digits_average(i.toString().split('').collate(2,1,false).collect { Math.ceil((it[0].toInteger() + it[1].toInteger()) \/ 2) as int }.join() as int)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a3fe3dde1ce0e8ed6000097":[{"id":93396,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    Math.ceil(year\/100)\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93397,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    return (((year % 100) > 0) ? (int)(year\/100 + 1) : (int)year\/100)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93398,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    \/\/ code goes here\n    if(year <= 0  ){\n    return \"Not Valid\"\n    }\n    else if(year <= 100){\n    return 1\n    }\n    else if(year % 100 == 0){\n    return year\/100\n    }\n    else{\n    return (int) (year\/100 + 1)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93399,"user_id":527,"body":"class Solution {\n  static century_from_year(year) {\n    (year - 1).intdiv(100) + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93400,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n      (int)((year - 1) \/ 100) + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93401,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    return year = (year % 100 == 0 ? 0 : 1) + (year\/100).trunc()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93402,"user_id":null,"body":"import java.lang.Math;\n\nclass Solution {\n  static century_from_year(year) {\n    return Math.ceil(year\/100)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93403,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    if(year % 100 == 0){\n      return year \/ 100;\n    }\n    return Math.floor(year \/ 100) + 1;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93404,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    int aux = year.intdiv(100)\n        year%100 == 0 ? aux : aux+1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93405,"user_id":null,"body":"class Solution {\n  static century_from_year(year) {\n    def result = ((year \/ 100) as Integer) + 1\n\n    year % 100 == 0 ? --result : result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a420163b6cfd7cde5000077":[{"id":93406,"user_id":492,"body":"import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Nba { \n    private static Pattern p = Pattern.compile(\"(.+) ([\\\\d\\\\.]+) (.+) ([\\\\d\\\\.]+)\");\n    public static String nbaCup(String resultSheet, String toFind) {\n        if (\"\".equals(toFind))\n            return \"\";\n        String[] matches = resultSheet.split(\",\");\n        int wins = 0, draws = 0, losses = 0;\n        int scored = 0, conceded = 0;\n        int ranking = 0;\n        for (String match : matches) {\n            if (!match.contains(toFind))\n              continue;\n            Matcher m = p.matcher(match);\n            if (m.find()) {\n                String team1 = m.group(1);\n                String rawScore1 = m.group(2);\n                if (rawScore1.contains(\".\"))\n                    return floatError(match);\n                int score1 = Integer.parseInt(rawScore1);\n                String team2 = m.group(3);\n                String rawScore2 = m.group(4);\n                if (rawScore2.contains(\".\"))\n                    return floatError(match);\n                int score2 = Integer.parseInt(rawScore2);\n                if (team1.equals(toFind)) {\n                    if (score1 > score2) {\n                        wins++;\n                        ranking += 3;\n                    } else if (score1 == score2) {\n                        losses++;\n                        ranking++;\n                    } else {\n                        draws++;\n                    }\n                    scored += score1;\n                    conceded += score2;\n                } else if (team2.equals(toFind)) {\n                    if (score2 > score1) {\n                        wins++;\n                        ranking += 3;\n                    } else if (score2 == score1) {\n                        losses++;\n                        ranking++;\n                    } else {\n                        draws++;\n                    }\n                    scored += score2;\n                    conceded += score1;\n                }\n            }\n        }\n        if (wins + draws + losses == 0) {\n            return toFind + \":This team didn't play!\";\n        }\n        return String.format(\"%s:W=%d;D=%d;L=%d;Scored=%d;Conceded=%d;Points=%d\", toFind, wins, losses, draws, scored, conceded, ranking);\n    }  \n    private static String floatError(String raw) {\n        return String.format(\"Error(float number):%s\", raw);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93407,"user_id":null,"body":"class Nba {\n  \n  public static String nbaCup(String resultSheet, String toFind) {\n    println resultSheet\n    println toFind\n    if (!toFind || !resultSheet) {\n      return \"\";\n    }\n    def teams = [:].withDefault {key -> new Stat(key)};\n    def results = resultSheet.split(',');\n    def regex = \/^([a-zA-Z0-9 ]+) ([0-9]+) ([a-zA-Z0-9 ]+)+ ([0-9]+)$\/;\n    try {\n      results.each {\n        if (it.contains('.')) {\n          throw new Exception(\"Error(float number):${it}\");\n        }\n        def matches = it =~ regex;\n        def team1 = matches[0][1];\n        def team1Score = matches[0][2] as int;\n        def team2 = matches[0][3];\n        def team2Score = matches[0][4] as int;\n        if (team1Score > team2Score) {\n          teams[team1].wins++;\n          teams[team2].losses++;\n        }\n        else if (team2Score > team1Score) {\n          teams[team2].wins++;\n          teams[team1].losses++;\n        }\n        else {\n          teams[team1].draws++;\n          teams[team2].draws++;\n        }\n        teams[team1].scored += team1Score;\n        teams[team1].conceded += team2Score;\n        teams[team2].scored += team2Score;\n        teams[team2].conceded += team1Score;\n      };\n    }\n    catch (Exception e) {\n      return e.getMessage();\n    }\n    def team = teams[toFind];\n    if (team.wins == 0 && team.draws == 0 && team.losses == 0) {\n      return \"${team.name}:This team didn't play!\";\n    }\n    return \"${team.name}:W=${team.wins};D=${team.draws};L=${team.losses};Scored=${team.scored};Conceded=${team.conceded};Points=${3 * team.wins + team.draws}\";\n  }\n  \n  static class Stat {\n    def name;\n    def wins = 0;\n    def draws = 0;\n    def losses = 0;\n    def scored = 0;\n    def conceded = 0;\n    \n    Stat(name) {\n      this.name = name;\n    }\n  }\n  \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93408,"user_id":148,"body":"class Nba {\n    static String nbaCup(String resultSheet, String toFind) {\n        if (toFind.equals(\"\")) return \"\"\n        if (!resultSheet.contains(toFind)) return toFind + \":This team didn't play!\"\n        def W = 0, D = 0, L = 0, Scored = 0, Conceded = 0, Points = 0\n        def floatExists\n        resultSheet.split(\",\").findAll { it.contains(toFind) }.each {\n            if ((it =~ '\\\\s\\\\d+\\\\.\\\\d+').find()) {\n                floatExists = \"Error(float number):\" + it\n                return \n            }\n            if (!(it =~ toFind + '\\\\s').find()) return\n            def match = it =~ '^(.+?)\\\\s(\\\\d+)\\\\s(.+?)\\\\s(\\\\d+)$'\n            def firstTeamScore, secondTeamScore\n            if ((match[0][1] as String).equals(toFind)) {\n                firstTeamScore = match[0][2] as Integer\n                secondTeamScore = match[0][4] as Integer\n            } else {\n                firstTeamScore = match[0][4] as Integer\n                secondTeamScore = match[0][2] as Integer\n            }\n            if (firstTeamScore > secondTeamScore) {\n                W++\n                Points += 3\n            }\n            if (firstTeamScore == secondTeamScore) {\n                D++\n                Points += 1\n            }\n            if (firstTeamScore < secondTeamScore) L++\n            Scored += firstTeamScore\n            Conceded += secondTeamScore\n        }\n        if (floatExists) return floatExists\n        if (W == 0 && D == 0 && L == 0) return \"${toFind}:This team didn't play!\"\n        return \"${toFind}:W=${W};D=${D};L=${L};Scored=${Scored};Conceded=${Conceded};Points=${Points}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93409,"user_id":null,"body":"class Nba {\n    public static String nbaCup(String resultSheet, String toFind) {\n        int victories\n\t\tint lost\n\t\tint draw\n\t\tint points\n\t\tint pointsConceded\n\t\tint pointsRanking\n\t\tGame [] results\n\t\t\n    if(toFind == null || toFind ==  \"\"){\n      return \"\"\n    }\n    \n\t\ttry {\n\t\t\tresults = mapStringToArray(resultSheet)\n\t\t} catch(RuntimeException e) {\n\t\t\t\/\/this will be thow when we find a float\n\t\t\treturn \"Error(float number):\" + e.getMessage()\t\n\t\t}\n\t\t\n\t\tif(toFind == null || toFind == \"\") {\n\t\t\treturn \"\"\n\t\t}\n\t\t\n\t\tif(!teamPlayed(toFind, results)) {\n\t\t\treturn \"$toFind:This team didn't play!\"\n\t\t}\n\t\t\n\t\t\n\t\tresults.each { g ->\n\t\t\t\n\t\t\t\/**\n\t\t\t * \n\t\t\t * this conditions can be smaller\n\t\t\t * \n\t\t\t *\/\n\t\t\t\n\t\t\t\/\/the team we are searching is in this match\n\t\t\tif(g.team1 == toFind || g.team2 == toFind) {\n\t\t\t\n\t\t\t\t\/\/was a draw\n\t\t\t\tif(g.team1Points == g.team2Points) {\n\t\t\t\t\tdraw = draw + 1\n\t\t\t\t\tpoints = points + g.team1Points\n\t\t\t\t\tpointsConceded = pointsConceded + g.team1Points\n\t\t\t\t\tpointsRanking = pointsRanking + 1\n\t\t\t\t\t\n\t\t\t\t} else if(g.team1 == toFind && g.team1Points > g.team2Points) {\n\t\t\t\t\/\/won home\n\t\t\t\t\tvictories = victories + 1\n\t\t\t\t\tpoints = points + g.team1Points\n\t\t\t\t\tpointsConceded = pointsConceded + g.team2Points\n\t\t\t\t\tpointsRanking = pointsRanking + 3\n\t\t\t\t\t\/\/println(g.toString())\n\t\t\t\t\/\/lose home\n\t\t\t\t} else if(g.team1 == toFind && g.team1Points < g.team2Points) {\n\t\t\t\t\tlost = lost + 1\n\t\t\t\t\tpoints = points + g.team1Points\n\t\t\t\t\tpointsConceded = pointsConceded + g.team2Points\n\t\t\t\t\t\n\t\t\t\t\t\/\/println(g.toString())\n\t\t\t\t}else if(g.team2 == toFind && g.team2Points > g.team1Points) {\n\t\t\t\t\/\/won away\n\t\t\t\t\tvictories = victories + 1\n\t\t\t\t\tpoints = points + g.team2Points\n\t\t\t\t\tpointsConceded = pointsConceded + g.team1Points\n\t\t\t\t\tpointsRanking = pointsRanking + 3\n\t\t\t\t\t\/\/println(g.toString())\n\t\t\t\t\/\/lose away\n\t\t\t\t} else if(g.team2 == toFind && g.team2Points < g.team1Points) {\n\t\t\t\t\tlost = lost + 1\n\t\t\t\t\tpoints = points + g.team2Points\n\t\t\t\t\tpointsConceded = pointsConceded + g.team1Points\n\t\t\t\t\t\/\/println(g.toString())\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t\/\/save the points maded and the points conceded\n\t\t\t\t\n\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/final result\n\t\treturn \"$toFind:W=$victories;D=$draw;L=$lost;Scored=$points;Conceded=$pointsConceded;Points=$pointsRanking\"\n\t\t\n\t}\n    \n  static Game[] mapStringToArray(String results) throws RuntimeException {\n\t\t\n\t\t\/\/games\n\t\tList<Game> games = []\n\t\t\n\t\t\/\/split the strings by semicolon\n\t\tString [] matchsString = results.split(\",\")\n\t\t\n\t\tmatchsString.each { s ->\n\t\t\t\n\t\t\t\/\/find floating scores -> this not the correct way because it can exist \n\t\t\tif(s.contains(\".\")) {\n\t\t\t\tthrow new RuntimeException(s)\n\t\t\t}\n\t\t\t\n\t\t\t\/\/get the teams of this match and the points\n\t\t\tString[] teams = s.split(\/\\s[0-9]+\\s|\\s[0-9]+$\/)\n\t\t\tdef matcher = s =~ \/\\s[0-9]+\\s|\\s[0-9]+$\/\n\t\t\t\n\t\t\tint point1 =  (((String) matcher[0]).replace(\" \",\"\").replace(\",\", \"\")).toInteger()\n\t\t\tint point2 = (((String) matcher[1]).replace(\" \",\"\").replace(\",\", \"\")).toInteger()\n\t\t\t\n\t\t\tgames.add(new Game(teams[0], point1, teams[1], point2))\n\t\t}\n\t\t\n\t\treturn games\n\t\t\n\t}\n\t\n\tstatic boolean teamPlayed(String team, Game [] games){\n\t\t\n\t\tboolean played = false\n\t\t\n\t\tgames.each { g ->\n\t\t\tif(g.team1 == team || g.team2 == team) {\n\t\t\t\tplayed = true\n\t\t\t\treturn played \/\/ returning inside the closure can have unexpected results\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn played\n\t}\n\t\n\t\n\t\/**\n\t * this is the structure that will have info about the games\n\t * @author NB25808\n\t *\n\t *\/\n\tstatic class Game {\n\t\tprivate String team1\n\t\tprivate int team1Points\n\t\tprivate String team2\n\t\tprivate int team2Points\n\t\t\n\t\tpublic Game() {\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic Game(String team1, int team1Points, String team2, int team2Points) {\n\t\t\tthis.team1 = team1\n\t\t\tthis.team1Points = team1Points\n\t\t\tthis.team2 = team2\n\t\t\tthis.team2Points = team2Points\n\t\t}\n\t\n\t\tpublic String getTeam1() {\n\t\t\treturn team1\n\t\t}\n\t\n\t\tpublic void setTeam1(String team1) {\n\t\t\tthis.team1 = team1\n\t\t}\n\t\n\t\tpublic int getTeam1Points() {\n\t\t\treturn team1Points\n\t\t}\n\t\n\t\tpublic void setTeam1Points(int team1Points) {\n\t\t\tthis.team1Points = team1Points\n\t\t}\n\t\n\t\tpublic String getTeam2() {\n\t\t\treturn team2\n\t\t}\n\t\n\t\tpublic void setTeam2(String team2) {\n\t\t\tthis.team2 = team2\n\t\t}\n\t\n\t\tpublic int getTeam2Points() {\n\t\t\treturn team2Points\n\t\t}\n\t\n\t\tpublic void setTeam2Points(int team2Points) {\n\t\t\tthis.team2Points = team2Points\n\t\t}\n\t\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"Game [team1=\" + team1 + \", team1Points=\" + team1Points + \", team2=\" + team2 + \", team2Points=\" + team2Points + \"]\";\n\t\t}\t\n\t\n\t}\n    \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93410,"user_id":null,"body":"class Nba {\n    public static String nbaCup(String resultSheet, String toFind) {\n        if (!toFind.trim()) {\n              return \"\"\n        }\n    \n        def matchesWithTeam = resultSheet.split(',').findAll { it -> it.contains(\"$toFind \") }\n        println(\"$toFind : $resultSheet\")\n        \n        if (!matchesWithTeam) {\n            return \"$toFind:This team didn't play!\"\n        }\n        \n        \n        def wins = 0\n        def draws = 0\n        def losses = 0\n        def scored = 0\n        def conceded = 0\n        \n        def error = \"\"\n        \n          matchesWithTeam.each { it -> \n              def hometeam = it.startsWith(toFind)\n              \n              \/\/ println(it)\n              \n              def m = \/^[\\w\\s]+?\\W([\\d\\.]+)\\W[\\w\\s]+?\\W([\\d\\.]+)$\/\n              def g = (it =~ m)[0]\n              println(g)\n              \n              if (g[1].contains(\".\") || g[2].contains(\".\")) {\n                  error = \"Error(float number):$it\"\n                  return\n              }\n              \n              def homeScore = g[1].toInteger()\n              def awayScore = g[2].toInteger()\n              if (hometeam) {\n                  scored += homeScore\n                  conceded += awayScore\n                  if (homeScore > awayScore) {\n                       wins += 1\n                  } else if (homeScore == awayScore) {\n                       draws += 1\n                  } else {\n                       losses += 1\n                  }     \n              } else {\n                  scored += awayScore\n                  conceded += homeScore\n                  if (homeScore > awayScore) {\n                       losses += 1\n                  } else if (homeScore == awayScore) {\n                       draws += 1\n                  } else {\n                       wins += 1\n                  }     \n              }\n        }\n        \n        if (error)\n            return error\n      \n          \n        \n        return \"${toFind}:W=${wins};D=${draws};L=${losses};Scored=${scored};Conceded=${conceded};Points=${wins*3+draws}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93411,"user_id":null,"body":"class Nba {\n    public static String nbaCup(String input, String teamName) {\n        if(teamName == \"\"){\n          return \"\"\n        }\n        if(!input.find(\/(${teamName}) (\\d+\\.*\\d+)\/)) {\n            return \"${teamName}:This team didn't play!\"  \n        }\n        def foundTeamWins = 0\n        def foundTeamDraws = 0\n        def foundTeamLoses = 0\n        def foundTeamScored = 0\n        def foundTeamConceded = 0\n        def foundTeamPoints = 0\n        for(it in input.split(',')) {\n            def teamMatch = (it =~ \/(${teamName}) (\\d+\\.*\\d+)\/)\n            if(teamMatch.size() == 0) {\n                continue\n            }\n            try {\n                def foundTeamScore = teamMatch[0][2] as Integer\n                def allTeamsScores = (it =~ \/\\b\\d+\\.*\\d+\\b\/)\n                def secondTeamScore = allTeamsScores[0] as Integer\n                if (foundTeamScore == secondTeamScore) {\n                    secondTeamScore = allTeamsScores[1] as Integer\n                }\n                \n                foundTeamScored += foundTeamScore\n                foundTeamConceded += secondTeamScore\n                \n                if(foundTeamScore > secondTeamScore) {\n                    foundTeamWins += 1\n                    foundTeamPoints += 3\n                } else if (foundTeamScore == secondTeamScore) {\n                    foundTeamDraws += 1\n                    foundTeamPoints += 1\n                } else {\n                    foundTeamLoses += 1\n                }\n            } catch (NumberFormatException ex) {\n                return \"Error(float number):${it}\"\n            }\n        }\n        return \"${teamName}:W=${foundTeamWins};D=${foundTeamDraws};L=${foundTeamLoses};Scored=${foundTeamScored};Conceded=${foundTeamConceded};Points=${foundTeamPoints}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93412,"user_id":null,"body":"class Nba {\n    public static String nbaCup(String resultSheet, String toFind) {\n        if (toFind.isEmpty())\n          return toFind\n        if (!resultSheet.contains(toFind + ' '))\n          return \"${toFind}:This team didn't play!\"\n        def games = resultSheet.split(',').findAll {\n          it.contains(toFind)\n        }\n        def (scored, conceded, win, draw, loss) = [0, 0, 0, 0, 0]\n        for (game in games) {\n          def (teamsPoints, opponentPoints) = [0, 0]\n          def split = game.split(\/(?<=\\d) | (?=(\\d+\\b))\/)  \/\/ Split 'game' string by spaces around the scores\n          def idx = split.findIndexOf { it == toFind }\n          println(idx)\n          try {\n            teamsPoints = split[idx + 1] as Integer\n            opponentPoints = split[(idx + 3) % 4] as Integer\n          } catch (NumberFormatException e) {\n            return \"Error(float number):${game}\"\n          }\n          scored += teamsPoints\n          conceded += opponentPoints\n          if (teamsPoints > opponentPoints)\n            win++\n          else if (teamsPoints == opponentPoints)\n            draw++\n          else\n            loss++\n        }\n        return \"${toFind}:W=${win};D=${draw};L=${loss};Scored=${scored};Conceded=${conceded};Points=${3*win+draw}\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93413,"user_id":null,"body":"class Nba {\n    public static String nbaCup(String resultSheet, String toFind) {\n        if (toFind == \"\") {\n          return \"\"\n        }\n        Map<String, Team> teams = new HashMap()\n        List<String> games = resultSheet.split(\",\")\n        try {\n          games.forEach({\n            def group = (it =~ \/(.*) ([0-9.]+) (.*) ([0-9.]+)\/)\n            String team1Name = group[0][1]\n            String team2Name = group[0][3]\n            int team1Score = 0\n            int team2Score = 0\n            try {\n              team1Score = Integer.parseInt(group[0][2])\n              team2Score = Integer.parseInt(group[0][4])\n            } catch (Exception e) {\n              throw new IllegalArgumentException(\"Error(float number):$it\")\n            }\n\n            Team team1 = getTeam(teams, team1Name)\n            Team team2 = getTeam(teams, team2Name)\n\n            updateTeams(team1, team2, team1Score, team2Score)\n\n            team1.scored += team1Score\n            team2.scored += team2Score\n            team1.conceded += team2Score\n            team2.conceded += team1Score\n          })\n        } catch (IllegalArgumentException exception) {\n          return exception.message\n        }\n        \n        if (teams.containsKey(toFind)) {\n          Team team = teams[toFind]\n          return \"$toFind:W=${team.wins};D=${team.draws};L=${team.losses};Scored=${team.scored};Conceded=${team.conceded};Points=${team.points}\"\n        }\n        return \"$toFind:This team didn't play!\"\n    }\n    \n    private static updateTeams(team1, team2, team1Score, team2Score) {\n      if (team1Score > team2Score) {\n        team1.wins++\n        team2.losses++\n        team1.points += 3\n      } else if (team1Score < team2Score) {\n        team1.losses++\n        team2.wins++\n        team2.points += 3\n      } else if (team1Score == team2Score) {\n        team1.draws++\n        team2.draws++\n        team1.points += 1\n        team1.points += 1\n      }\n    }\n    \n    private static getTeam(teams, team) {\n      teams.get(team, new Team(name: team))\n    }\n}\n\nclass Team {\n  String name\n  int wins\n  int draws\n  int losses\n  int scored\n  int conceded\n  int points\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a48948e145c46820b00002f":[{"id":93414,"user_id":53,"body":"class KprimesSteps {\n    public static List<long[]> kprimesStep(int k, int step, long start, long nd) {\n        List<long[]> arr = new ArrayList<long[]>();\n        for (int i = start; i <= nd - step; i++) {\n           if (primeFactorCount(i) == k && primeFactorCount(i + step) == k) {\n               arr.add([i, i + step]);\n           }\n        }\n        return arr;\n    }\n    public static int primeFactorCount(int n) {\n        int len = 0;\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                len++;\n                n \/= i;\n            }\n        }\n        if (n > 1) len++;\n        return len;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93415,"user_id":492,"body":"import java.util.ArrayList;\nimport java.util.List;\n\nclass KprimesSteps {\n    \n    private static int countPrimeDiv(Long n) {\n        int cnt = 0;\n        for (long i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                cnt++;\n                n \/= i;\n            }\n        }\n        if (n > 1) cnt++;\n        return cnt;\n    }\n    public static List<long[]> kprimesStep(int k, int step, long start, long nd) {\n        ArrayList<long[]> res = new ArrayList<long[]>();\n        long i = start;\n        while (i <= nd - step) {\n            if ((countPrimeDiv(i) == k && countPrimeDiv(i+step) == k)) \n                res.add([i, i+step] as long[]);\n\n            i++;\n        }\n        return res;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a491f0be6be389dbb000117":[{"id":93416,"user_id":1673,"body":"class Kata {\n  static game(A, B) {\n      if (A < 1 || B < 1)\n          return \"Non-drinkers can't play\"\n      int i = 1\n      int mike = 0\n      int joe = 0\n      while(true){\n          mike += i\n          if(mike>A)\n              return \"Joe\"\n          i++\n          joe += i\n          if(joe>B)\n              return \"Mike\"\n          i++\n      }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93417,"user_id":48,"body":"class Kata {\n  static game(mike, joe) {\n    if(!(mike * joe)) return \"Non-drinkers can't play\";\n    int chug = 1;\n    while(chug)\n    {\n      if(mike < chug) return 'Joe' ; mike -= chug++;\n      if(joe  < chug) return 'Mike'; joe  -= chug++;\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93418,"user_id":null,"body":"class Kata {\n  static game(A, B) {\n    if ([A,B].min() <= 0) return \"Non-drinkers can't play\"\n    int a = Math.sqrt(A)\n    return (B >= a * ++a) ? \"Joe\" : \"Mike\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93419,"user_id":null,"body":"class Kata {\n  static game(A, B) {\n    if (A==0 || B==0) return \"Non-drinkers can't play\"\n    int n = Math.sqrt(A)\n    if (B < (n + 1) * n) return \"Mike\"\n    else return \"Joe\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93420,"user_id":null,"body":"class Kata {\n  static game(A, B) {\n    if (A == 0 || B == 0) {\n      return \"Non-drinkers can't play\"\n    }\n    def beers = 1\n    while (A >= 0 && B >= 0) {\n      if (beers % 2 == 0) {\n        B -= beers\n      } else {\n        A -= beers\n      }\n      beers++\n    }\n    return A < 0 ? \"Joe\" : \"Mike\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93421,"user_id":1609,"body":"class Kata {\n  static game(A, B) {\n    if(A<1||B<1)return \"Non-drinkers can't play\"\n    int c=1,d=1\n    while((d?A:B)>=c){\n      if(d)A-=c else B-=c\n      c++\n      d=1-d\n    }\n    d ? \"Joe\" : \"Mike\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93422,"user_id":527,"body":"class Kata {\n  static game(maxBeersMike, maxBeersJoe) {\n    if (maxBeersMike < 1 || maxBeersJoe < 1) {\n      \"Non-drinkers can't play\"\n    } else {\n      def nMike = (int)(Math.sqrt(maxBeersMike))\n      def nJoe = (int)((-1 + Math.sqrt(1 + 4 * maxBeersJoe)) \/ 2)\n      if (nMike > nJoe) \"Mike\" else \"Joe\"\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93423,"user_id":20,"body":"class Kata {\n  static game(A, B) {\n    if(A<1||B<1)\n      return \"Non-drinkers can't play\";\n    for(int i=1; A>=0&&B>=0; i+=2)\n    {\n      A-=i;\n      B-=i+1;\n    }\n    if(A<0)\n      return \"Joe\";\n    return \"Mike\";\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93424,"user_id":null,"body":"class Kata {\n  static game(A, B) {\n  \n    if(A == 0 || B == 0){\n      return \"Non-drinkers can't play\"\n    }\n  \n    for(int i = 1; i < 100; i++){\n      if(i % 2 == 1){\n        A = A - i\n      }else{\n        B = B - i\n      }\n      \n      if(A < 0){\n        return 'Joe'\n      }else if(B < 0){\n        return 'Mike'\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93425,"user_id":null,"body":"class Kata {\n  static game(A, B) {\n    if (A==0 || B==0) return \"Non-drinkers can't play\"\n    List mike = []\n    List joe = []\n    1.step(A+1,2){mike.add(it)}\n    2.step(B+1,2){joe.add(it)}\n    while (mike.sum()>A){mike.remove(mike.size()-1)}\n    while (joe.sum()>B){joe.remove(joe.size()-1)}\n    (mike.size()>joe.size())? \"Mike\" : \"Joe\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a58ca28e626c55ae000018a":[{"id":93426,"user_id":17,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    return Math.round(1e3 * (0.5 * n * r ** 2 * Math.sin(2 * Math.PI \/ n))) \/ 1e3;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93427,"user_id":null,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    ((double) (n\/2) * r * r * Math.sin((double) 2\/n * Math.PI)).round(3)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93428,"user_id":50,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    return Math.round(n*r*r*Math.sin(2*Math.PI\/n)*500)\/1000\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93429,"user_id":null,"body":"class Kata {\n  static area_of_polygon_inside_circle = {r,n ->  ((r*r*n\/2) * Math.sin(6.2831853\/n)).round(3)}\n \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93430,"user_id":53,"body":"class Kata {\n  static double area_of_polygon_inside_circle(r, n) { \n    return Math.round(500.0 * n * r * r * Math.sin((2.0 * Math.PI) \/ n)) \/ 1000.0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93431,"user_id":null,"body":"import static java.lang.Math.*;\nimport static java.math.RoundingMode.*;\nclass Kata {\n  static area_of_polygon_inside_circle(double r, double n) {\n    \/\/ (|a| x |b|) \/ 2 = area of triangle =>\n    \/\/ one triangle (from cross definition) area = r ^ 2 * sin( 2PI \/ n)\n    (r ** 2 * sin(2 * PI \/ n) \/ 2 * n as BigDecimal).setScale(3, HALF_UP) as double\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93432,"user_id":null,"body":"import java.text.DecimalFormat\n\nclass Kata {\n    static area_of_polygon_inside_circle(r, n) {\n        DecimalFormat df2 = new DecimalFormat(\"#.###\")\n        df2.format(Math.sin(2 * Math.PI \/ n) * r * r * n \/ 2).toDouble()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93433,"user_id":null,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    (n * 0.5 * r * r * Math.sin( 2 * Math.PI \/ n )).round(3)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93434,"user_id":null,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    (r*r\/2 * Math.sin((2 * Math.PI)\/n) * n).round(3)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93435,"user_id":null,"body":"class Kata {\n  static area_of_polygon_inside_circle(r, n) {\n    (((n * r**2) * Math.sin(2 * Math.PI \/ n)) \/ 2).round(3)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a5f9f80f5dc3f942b002309":[{"id":93436,"user_id":759,"body":"class Kata {\n  static def omniBool = new Object() { boolean equals(x) { true } }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93437,"user_id":null,"body":"class Kata {\n  static def omniBool = new Kata() \/\/ this variable needs your wizard magic!\n\n  boolean equals(Object o) { true }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93438,"user_id":null,"body":"import java.util.concurrent.CompletableFuture\n\nclass Kata {\n    static def omniBool = ss()\n\n    static ss() {\n        CompletableFuture.runAsync({\n            omniBool = false\n        })\n        Thread.sleep(1000)\n        true\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93439,"user_id":null,"body":"class Kata {\n  static def bool = false; \/\/ this variable needs your wizard magic!\n  static def getOmniBool() {\n    bool = !bool\n    return bool\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93440,"user_id":null,"body":"class Kata {\n    static OBool omniBool = new OBool()\n    static class OBool {\n        boolean equals(Object a) {\n            return true\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93441,"user_id":null,"body":"class Kata {\n  static def omniBool = new OmniBool() \/\/ this variable needs your wizard magic!\n}\n\nclass OmniBool {\n    static Boolean equals(someObj) {\n        someObj == true ?: someObj == false ?: false\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93442,"user_id":null,"body":"class Kata {\n  \n  static omniBool = false\n  static getOmniBool() { omniBool = !omniBool; omniBool }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93443,"user_id":645,"body":"class Kata {\n  static def omniBool = new Object() {\n    @Override\n    boolean equals(Object _) {\n      true\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93444,"user_id":645,"body":"class Omnibool {\n  @Override\n  boolean equals(Object _) {\n    true\n  }\n}\n\nclass Kata {\n  static def omniBool = new Omnibool()\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a60d519400f93fc450032e5":[{"id":93445,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    def steps = 0\n    for (def position = 0; position < a.length; position += a[position]) {\n      steps++\n    }\n    for (def position = a.length - 1; position >= 0; position -= a[position]) {\n      steps++\n    }\n    return steps\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93446,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    def result = 0\n        for (int i = 0; i < a.length; i += a[i]) {\n            ++result\n        }\n        for (int i = a.length - 1; i >= 0; i -= a[i]) {\n            ++result\n        }\n        result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93447,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    List<Integer> stonesForward = a.toList()\n    List<Integer> stonesBack = stonesForward.reverse()\n    def result = 0\n        for (int i = 0; i < stonesForward.size();) {\n            ++result\n            i += stonesForward[i]\n        }\n        for (int i = 0; i < stonesBack.size();) {\n            ++result\n            i += stonesBack[i]\n        }\n        result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93448,"user_id":1492,"body":"class Kata {\n  static hop_across(a) {\n    \n    \/\/if (a.size() == 1){\n    \/\/  return 2\n    \/\/}\n    \n    def i = 0\n    def c = 0\n    \n    while (i < a.size()){\n      i += a[i]\n      c += 1\n    }\n    \n    def j = a.size()-1\n    while (j >= 0){\n      c+=1\n      j -= a[j]\n    }\n    \n    return c\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93449,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    int count = 0\n    int idx = 0\n    while(idx < a.size()) {\n      idx += a[idx]\n      count++\n    }\n    idx = a.size() - 1\n    while(idx > -1) {\n      idx -= a[idx]\n      count++\n    }\n    count\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93450,"user_id":148,"body":"class Kata {\n    static hop_across(a) {\n        if (a.size() == 1) return 2\n        def answer = 0\n        for (def i = 0; i < a.size();) {\n            answer++\n            i += a[i]\n        }\n\n        for (def i = a.size() - 1; i >= 0;) {\n            answer++\n            i -= a[i]\n        }\n        return answer\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93451,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    def steps = 0 , i = 0, j = 0\n    \n    \/\/ one way\n    while(i < a.size()){\n      steps ++\n      i += a[i]\n    }\n    a = a.toList().reverse()\n       \n    \/\/ return\n    while (j < a.size()){\n      steps ++\n      j += a[j]  \n    }\n    return steps\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93452,"user_id":null,"body":"class Kata {\n  static hop_across(a) {\n    int cpt, s1\n    int s2 = -1\n    while(s1 < a.size()) {\n      s1 += a[s1]\n      cpt++\n    }\n    while(Math.abs(s2) <= a.size()) {\n      s2 -= a[s2]\n      cpt++\n    }\n    cpt\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93453,"user_id":null,"body":"class Kata {\n  static hop(a) {\n    def i = 0;\n    def n = 1;\n    def s = a[0];\n    while (a[s] != null) {\n      i = s;\n      s += a[i];\n      n++;\n      }\n    return n;\n  }\n  static hop_across(a) {\n    return hop(a[0..-1]) + hop(a[-1..0]); \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93454,"user_id":null,"body":"class Kata {\n\n  static countSteps(int[] ary) {\n  int pos=0;\n  int steps=0;\n  while ( pos < ary.size() ) {\n    steps++;\n    pos+= ary[pos];\n  }\n  return steps;\n}\n\n  static hop_across(a) {\n    List<Object> list = Arrays.asList(a);\n    Collections.reverse(list);\n    return (countSteps(a) + countSteps(list.toArray()));\n  }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a626fc7fd56cb63c300008c":[{"id":93455,"user_id":575,"body":"class Kata {\n    static String uncollapse(String s) {\n        s.findAll(\/zero|one|two|three|four|five|six|seven|eight|nine\/).join(' ') \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93456,"user_id":null,"body":"class Kata {\n    static String uncollapse(String s) {\n        (s =~ ~\/(one|two|three|four|five|six|seven|eight|nine|zero)\/).collect{it[0]}.join(' ')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93457,"user_id":50,"body":"class Kata {\n    static String uncollapse(String s) {\n      return s.findAll(\/zero|one|two|three|four|five|six|seven|eight|nine\/).join(\" \") \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93458,"user_id":null,"body":"class Kata {\n    static String uncollapse(String s) {\n      return (s=~ \/zero|one|two|three|four|five|six|seven|eight|nine\/).findAll().join(' ')\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93459,"user_id":null,"body":"class Kata {\n  static final List<String> numberName = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    \n  static String uncollapse(String s) {\n      List expanded = []\n      while(s.size()) {\n          String n = numberName.find { it.startsWith(s[0..1]) }\n          expanded << n\n          s = s.substring((n.size()), s.size())\n      }\n      expanded.join(' ')\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93460,"user_id":53,"body":"class Kata {\n    static String uncollapse(String s) {\n        def ans = [];\n        while (s.length() > 0) {\n          [\n            \"zero\",\n            \"one\",\n            \"two\",\n            \"three\",\n            \"four\",\n            \"five\",\n            \"six\",\n            \"seven\",\n            \"eight\",\n            \"nine\"].each { b ->\n              if (s.startsWith(b)) {\n                ans.add(b);\n                s = s.substring(b.length());\n              }\n          }\n        }\n        return ans.join(\" \");\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a662a02e626c54e87000123":[{"id":93461,"user_id":759,"body":"class Kata {\n  static extra_perfect(n) { (1..n).by(2) }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93462,"user_id":53,"body":"class Kata {\n  static extra_perfect(n) {\n    return (1..n).findAll { it % 2 == 1 }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93463,"user_id":null,"body":"class Kata {\n  static extra_perfect(n) {\n     def result = []\n        for (int i = 1; i <= n; i += 2) {\n            result << i\n        }\n        result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93464,"user_id":null,"body":"class Kata {\n  static extra_perfect(n) {\n    def b = n\n    if (n%2 ==0){\n      b =n-1\n    }\n    def v  = (1..b).collect{it}.findAll{ it % 2 == 1 }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93465,"user_id":null,"body":"class Kata {\n  static extra_perfect(n) {\n    def range = 1..n\n    def result = []\n    range.collect{ it -> (it%2 != 0) ? result.add(it) : false }\n    return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93466,"user_id":null,"body":"class Kata {\n  static extra_perfect(n) {\n    (1..n).step(2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93467,"user_id":1492,"body":"class Kata {\n  static extra_perfect(n) {\n    \n    def ls = [];\n    \n    for(int current = 1; current <= n; current++){\n      \n      String bin = Integer.toBinaryString(current);\n      \n      if (bin.startsWith(\"1\") && bin.endsWith(\"1\")){\n        ls << current;\n      }\n    }\n    return ls;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93468,"user_id":null,"body":"class Kata {\n  static extra_perfect(n) {\n    (1..n).findAll{it%2}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93469,"user_id":148,"body":"class Kata {\n    static extra_perfect(n) {\n        return (0..n).findAll {i ->\n            Integer.toBinaryString(i)[0] == '1' && Integer.toBinaryString(i)[-1] == '1'\n        }.toArray()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93470,"user_id":null,"body":"class Kata {\n  static extra_perfect(int n) {\n    def range = 1..n\n    def output = []\n        \n    range.each {\n      num -> \n      def numB2 = Integer.toString(num, 2)\n\n      numB2 = numB2.toString()\n            \n      if (numB2.startsWith(\"1\") && numB2.endsWith(\"1\")) {\n        output << num\n      }\n    }\n    \n    output\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a6663e9fd56cb5ab800008b":[{"id":93471,"user_id":17,"body":"class Kata {\n  static human_years_cat_years_dog_years(n) {\n    return [n, n == 1 ? 15 : 4 * (n + 4), n == 1 ? 15 : 5 * n + 14];\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-28 17:57:28"},{"id":93472,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n       [humanYears, catYears(humanYears), dogYears(humanYears)]\n    }\n    \n    static catYears(humanYears) {\n      humanYears * 4 + (humanYears >= 2 ? 16 : 11)\n    }\n    \n    static dogYears(humanYears) {\n      humanYears * 5 + (humanYears >= 2 ? 14 : 10)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93473,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n    int yearsOne = 15;\n    int yearsTwo = 24;\n    int catYears = (16) + (4 * humanYears);\n    int dogYears = (14) + (5 * humanYears);\n    int[] total = [0, 0, 0];\n  \n   if (humanYears == 1) {\n      total[0] = humanYears;\n      total[1] = yearsOne;\n      total[2] = yearsOne;\n    }\n    else if (humanYears == 2) {\n      total[0] = humanYears;\n      total[1] = yearsTwo;\n      total[2] = yearsTwo;\n    }\n    else {\n      total[0] = humanYears;\n      total[1] = catYears;\n      total[2] = dogYears;\n    }\n    return total;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93474,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      def animalTotal = { type ->\n        15 + 9 * (humanYears > 1 ? 1 : 0) + [cat: 4, dog: 5][type] * (humanYears > 2 ? humanYears - 2 : 0)\n      }\n      [humanYears, animalTotal(\"cat\"), animalTotal(\"dog\")]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93475,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      def catYears\n      def dogYears\n      def humYears\n      \n            \n      switch (humanYears){\n        case 1:\n        humYears = humanYears\n        catYears = 15\n        dogYears = 15\n        return [humYears, catYears, dogYears]\n        break;\n        \n        case 2:\n        humYears = humanYears\n        catYears = 24\n        dogYears = 24\n        return [humYears, catYears, dogYears]\n        break;\n        \n        default:\n        humYears = humanYears\n        catYears = 24 +((humanYears-2)*4)\n        dogYears = 24 +((humanYears-2)*5)\n        return [humYears, catYears, dogYears]\n        break;\n        }\n   }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93476,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      if (humanYears == 1) {return [1, 15, 15];}\n  if (humanYears == 2) {return [2, 24, 24];}\n  \n  return [humanYears, 24+((humanYears-2)*4), 24+((humanYears-2)*5)];\n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93477,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      def catYears = 0\n      def dogYears = 0\n      int[] arr = [humanYears, catYears, dogYears]\n      \n      if (humanYears == 1){\n          \n        arr[0] = humanYears\n        arr[1] = 15\n        arr[2] = 15\n        return arr\n      }\n      else if (humanYears == 2){\n        \n        arr[0] = humanYears\n        arr[1] = 15+9\n        arr[2] = 15+9\n        return arr\n      }\n      else {\n        arr[0] = humanYears\n        arr[1] = 15+9\n        arr[2] = 15+9\n        \n        for (int i = 0; i < (humanYears-2); i++){\n          arr[1] = arr[1] + 4\n          arr[2] = arr[2] + 5\n      }\n        return arr\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93478,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      Integer catYears = 0\n      Integer dogYears = 0\n      \n      for (int i in 1..humanYears) {\n        if (i == 1) {\n          catYears += 15\n          dogYears += 15\n        } else if (i == 2) {\n          catYears += 9\n          dogYears += 9\n        } else {\n          catYears += 4\n          dogYears += 5\n        }\n      }\n      \n      [humanYears, catYears, dogYears]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93479,"user_id":null,"body":"class Kata {\n    static def human_years_cat_years_dog_years(int humanYears){\n      \n      int catYears\n      int dogYears\n      \n      switch (humanYears) {\n        case 1:\n        catYears = dogYears = 15\n        break\n\n        case 2:\n        catYears = dogYears = 24\n        break\n\n        default:\n        catYears = 24 + 4 * (humanYears - 2)\n        dogYears = 24 + 5 * (humanYears - 2)\n      }\n      \n    return [humanYears, catYears, dogYears]\n      \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93480,"user_id":null,"body":"class Kata {\n    static human_years_cat_years_dog_years(humanYears){\n      def dogYears = 0\n      def realYears = 0\n      def catYears = 0\n      if (humanYears > 0){\n        catYears += 15\n        dogYears += 15\n        realYears += 1\n        humanYears -=1\n      }\n      if (humanYears > 0){\n        catYears += 9\n        dogYears += 9\n        realYears+=1\n        humanYears -=1\n      }\n      return [(realYears+humanYears), (catYears+(4*humanYears)), (dogYears+(5*humanYears))]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a805d8cafa10f8b930005ba":[{"id":93481,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    Math.pow(Math.sqrt(n).round(), 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93482,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    def tmp = Math.sqrt(n)\n    def small = tmp.toInteger()\n    def large = small + 1\n    def minusSmall = n - small * small \n    def minusLarge = large * large - n\n    return minusSmall <= minusLarge? small*small : large * large\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93483,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    \/\/ Need to cast as float for perfect squares\n    return ((n**0.5 as float).round())**2\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93484,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    n = Math.pow(Math.round(Math.sqrt(n)), 2);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93485,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) { \n    def diff = 1;\n    def foundNearestSq = false;\n    def res = n\n    if( n % Math.sqrt(n) == 0 ) {\n      foundNearestSq = true;\n    }\n    while(!foundNearestSq) {\n      if( (n + diff) % Math.sqrt(n + diff) == 0 ) {\n        foundNearestSq = true;\n        res = n + diff;\n      }\n      if( (n - diff) % Math.sqrt(n - diff) == 0) {\n        print \"in minus\"\n        foundNearestSq = true;\n        res = n - diff;\n      }\n      diff += 1;\n    }\n    return res\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93486,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n     (int)Math.sqrt(n).round()**2\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93487,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    def f = (Math.sqrt(n) as int)**2\n    def s = ((Math.sqrt(n) as int) + 1)**2\n    s - n > n - f? f : s\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93488,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n        long number = 0\n        long control = 0\n        long cont = 0\n        while (control < n) {\n            cont++\n            if (cont**2 <= n) {\n                number = cont**2\n            }\n            control = cont**2\n        }\n        Math.abs(n - number) < Math.abs(n - cont**2) ? number:cont**2\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93489,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    def i = 1\n    while (Math.abs(n - i*i)>Math.abs(n - (i+1)*(i+1))){\n      i++\n    }\n    i*i\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93490,"user_id":null,"body":"class Kata {\n  static def nearest_sq(def n) {\n    \n    double down = n;\n    double up = n + 1;\n    \n    while (true) {\n      if (Math.sqrt(down) == Math.floor(Math.sqrt(down))) return down;\n      if (Math.sqrt(up) == Math.floor(Math.sqrt(up))) return up;\n      down--;\n      up++;\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a84d485742ba347b90006b7":[{"id":93491,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    gifts\n      .sort()\n      .count {\n        maxBudget -= it\n        maxBudget >= 0\n      }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93492,"user_id":1673,"body":"class Kata{\n  static int howManyGifts(m,g){\n    int i = 0\n    g = g.sort()\n    for(; i < g.size() && m - g[i] >= 0; i++){\n      m = m - g[i]\n    }\n    i\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93493,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    gifts.sort()\n    def sum = 0\n    int index = 0\n    for (def each in gifts) {\n      sum += each\n      if (sum > maxBudget) {\n        return index\n      }\n      index++\n    }\n    return gifts.size()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93494,"user_id":228,"body":"class Kata{\n  static int howManyGifts(int maxBudget, List gifts) {\n    int availableBudget = maxBudget\n    int giftsCount = 0\n    for (int gift in gifts.sort()) {\n      if (gift <= availableBudget) {\n        giftsCount += 1\n        availableBudget -= gift\n      } else {\n        break\n      }\n    }\n    return giftsCount\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93495,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n        int cont = 0\n        gifts.sort().each {\n            if (maxBudget-it >= 0) {\n                cont++\n                maxBudget = maxBudget-it\n            } else {\n                return cont\n            }\n        }\n    cont\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93496,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    int able = 0\n    for(gift in gifts.sort()){\n      maxBudget = maxBudget - gift\n      able = (maxBudget >= 0) ? able +1 :able\n      }\n    return able\n    }   \n  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93497,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    def count = 0, total = 0\n    \n    gifts.sort().each{number -> \n        if ((total + number) <= maxBudget){\n          total += number \n          count++\n        } \n      }\n    count\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93498,"user_id":53,"body":"class Kata{\n  static int howManyGifts(m, xs) {\n    def i = 0\n    xs = xs.sort()\n    for (; i < xs.size() && m - xs[i] >= 0; i++) m -= xs[i]\n    i\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93499,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    gifts.sort()\n        def count = 0\n        for(long gift : gifts) {\n            if(maxBudget - gift >= 0){\n                maxBudget = maxBudget - gift\n                count++\n            }\n        }\n        count\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93500,"user_id":null,"body":"class Kata{\n  static int howManyGifts(maxBudget, gifts){\n    gifts.sort()\n    def sum = 0\n    def ind = 0\n    for (int i = 0;sum <= maxBudget && i<gifts.size();i++){\n      ind = i\n      ind++\n      if (gifts[i]+sum <= maxBudget){\n        sum+=gifts[i] \n      }else {\n        print \"BREAK\"\n        ind -=1\n        break;\n      }\n    }\n    return ind \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5a941f4e1a60f6e8a70025fe":[{"id":93501,"user_id":527,"body":"class Kata {\n    static def odd_ball(arr) {\n        arr.indexOf('odd') in arr\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93502,"user_id":null,"body":"class Kata {\n    static boolean odd_ball(List arr) {\n        arr.any { if (it instanceof Integer) arr[it] == 'odd' }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93503,"user_id":null,"body":"class Kata {\n    static def odd_ball(arr) {\n      arr.indexOf(\"odd\") in arr ? true : false\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93504,"user_id":1492,"body":"class Kata {\n    static def odd_ball(arr) {\n        def i = arr.indexOf(\"odd\")\n        return arr.indexOf(i) != -1\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93505,"user_id":148,"body":"class Kata {\n    static def odd_ball(arr) {\n        def indexOdd = arr.indexOf(\"odd\")\n        return arr.any {it == indexOdd}\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93506,"user_id":null,"body":"class Kata{\n  static def odd_ball(a){\n    a.indexOf(a.indexOf(\"odd\"))!=-1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93507,"user_id":null,"body":"class Kata {\n    static def odd_ball(arr) {\n        def oddIndex = 0\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr[i] == \"odd\"){\n                oddIndex = i\n            }\n        }\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr[i] == oddIndex){\n                return true\n            }\n        }\n        return false\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93508,"user_id":null,"body":"class Kata {\n    static def odd_ball(arr) {\n        return arr.find({it == arr.findIndexOf({ it == \"odd\" })}) ? true : false;\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93509,"user_id":null,"body":"class Kata {\n    static def odd_ball(arr) {\n        def cant = arr.size()\n        def posOdd = -1\n        def result = false\n        def listNums = []\n        \n        (0..cant-1).each { x ->\n          println \"X \" + x + \" - \" + arr[x]\n          if ( arr[x] != \"even\" && arr[x] != \"odd\" )\n              listNums.add( arr[x].toInteger() )\n              \n          if ( arr[x] == \"odd\" )\n              posOdd = x\n        }\n        \n        cant = listNums.size()\n        (0..cant-1).each { x ->\n          println \"X \" + x + \" - \" + listNums[x]\n          if ( listNums[x] == posOdd )\n             result = true\n        }\n        \n        println result\n        return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93510,"user_id":null,"body":"class Kata {\n    static def odd_ball(arr) {\n        arr.findResult(false) {\n            if (it instanceof Integer && arr.size() >= it) {\n                if (arr[it] == 'odd') {\n                    return true\n                }\n            }\n        }\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5ab6538b379d20ad880000ab":[{"id":93511,"user_id":null,"body":"class Solution {\n    static area_or_perimeter(int l, int w) {\n        return l == w ? l * w : (l + l) + (w + w);\n    }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93512,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n    return (l == w) ? (l * w) : (2 * (l + w));\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93513,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n    return l == w ? l * w : (l+w) * 2;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93514,"user_id":1365,"body":"class Solution {\n  static area_or_perimeter(int a, int b) {\n    return a == b ? a * b : 2 * (a + b)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93515,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n      \/\/ your code goes here\n    if(l == w)\n    {\n      return l * l\n    }else\n    {\n      return (2 * l) + (2 * w)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93516,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n      if(l == w){\n        return l * w\n      }\n      return 2 * (l+w)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93517,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n    def square = (l==w) ? l*w : 2*l+2*w\n    return square\n  \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93518,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n      if (l == w){\n        def area = l * w\n        return area\n      }\n      else{\n        def perimeter = (l + w) * 2\n        return perimeter\n      }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93519,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n      \/\/ your code goes here\n    return (w == l) ? w*l : (w*2 + l*2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93520,"user_id":null,"body":"class Solution {\n  static area_or_perimeter(int l, int w) {\n    if(l == w){\n      return l * w;\n    }\n    return 2 * l + 2 * w;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5aba780a6a176b029800041c":[{"id":93521,"user_id":564,"body":"class Kata {\n  static max_multiple = { d, b -> b - b % d }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93522,"user_id":645,"body":"class Kata {\n  static max_multiple(d, b) {\n    b - b % d\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93523,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    Math.floor(b\/d)*d\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93524,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    def n= b\n    while(n%d!=0){ \n      n--\n    }\n   n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93525,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    def out = 0;\n    (1..b).each { if (it % d == 0) out = it }\n    return out;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93526,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n     while (b%d != 0){\n            b--\n        }\n        b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93527,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    \/\/ your code here\n    for (b; b>d;b--){\n      if (b%d==0){\n        return b\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93528,"user_id":null,"body":"class Kata {\n  \n    static void main(String[] args) {\n    println(max_multiple(2,7))\n\n    }\n    static max_multiple(d, b) {\n        int resul = 0\n        for (int i = 0; i <= b; i++) {\n            if (i % d == 0){\n                resul = i\n            }\n        }\n        return resul\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93529,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    \/\/Attempting a potentially faster way than range.findAll and max()\n    int result = 0\n    while (result == 0){\n      if (b%d == 0){result = b}\n      else{b--}\n    }\n   return result\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93530,"user_id":null,"body":"class Kata {\n  static max_multiple(d, b) {\n    def a = b % d\n    return b-a\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5ae62fcf252e66d44d00008e":[{"id":93531,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    [a*b*c, a*(b+c), (a+b)*c, a+b+c].max()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93532,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    def answers = []\n    answers << a * b * c\n    answers << a * b + c\n    answers << a + b * c\n    answers << a + b + c\n    answers << a * (b + c)\n    answers << (a + b) * c\n    return answers.max()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93533,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    def first = a * (b + c )\n    def sec = a * (b * c)\n    def thi = a +( b * c)\n    def fou = (a+b) * c\n    def fifth = a + b + c\n    def ars = []\n    ars.add(first)\n    ars.add(sec)\n    ars.add(thi)\n    ars.add(fou)\n    ars.add(fifth)\n    ars.sort()\n    println(ars)\n    return ars[ars.size() -1]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93534,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    List result = []\n    \n    result.add(a * (b + c))\n    result.add(a * b * c)\n    result.add(a + b * c)\n    result.add((a + b) * c)\n    result.add(a + b + c)\n    \n    result.sort().last()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93535,"user_id":50,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    return Math.max(Math.max((a+b)*c, a*(b+c)),Math.max(a+b+c, a*b*c))\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93536,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n   int sum1 = a * b * c\n   int sum2 = a * b + c\n   int sum3 = a * (b + c)\n   int sum4 = a + b * c\n   int sum5 = (a +  b) * c\n    int sum6 = a + b + c\n\n    if (sum1 >= sum2 && sum1 >= sum3 && sum1 >= sum4 && sum1 >= sum5 && sum1 >= sum6) {\n      return sum1\n    }\n    else if (sum2 >= sum1 && sum2 >= sum3 && sum2 >= sum4 && sum2 >= sum5 && sum2 >= sum6) {\n      return sum2\n    }\n    else if (sum3 >= sum1 && sum3 >= sum2 && sum3 >= sum4 && sum3 >= sum5 && sum3 >= sum6) {\n      return sum3\n    }\n    else if (sum4 >= sum1 && sum4 >= sum2 && sum4 >= sum3 && sum4 >= sum5 && sum4 >= sum6) {\n      return sum4\n    }\n    else if (sum5 >= sum1 && sum5 >= sum2 && sum5 >= sum3 && sum5 >= sum4 && sum5 >= sum6) {\n      return sum5\n    }\n    else {return sum6}\n      \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93537,"user_id":null,"body":"class Kata {\n   static def expression_matter(a, b, c) {\n        int max = 0\n        List operations = [\n                {Integer... args -> args[0]+args[1] + args[2]},\n                {Integer... args -> (args[0]+args[1]) * args[2]},\n                {Integer... args -> args[0] * (args[1] +args[2])},\n                {Integer... args -> args[0] * args[1] * args[2]}]\n        operations.each {\n            if (it(a,b,c)>max){\n                max = it(a,b,c)\n            }\n        }\n        return max\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93538,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n        [a * b * c, (a + b) * c, a * (b + c), a + b + c].max()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93539,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    def f = [ (a + b) * c, a + b + c, a * (b + c), a * b * c]\n    f.max()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93540,"user_id":null,"body":"class Kata {\n  static def expression_matter(a, b, c) {\n    def max = 0\n    for (v in [\n      a+b+c,\n      a*b*c,\n      a+b*c,\n      a*b+c,\n      (a+b)*c,\n      a*(b+c)\n    ]) {\n      max = Math.max(max, v)\n    }\n    return max\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5af96cea3e9715ec670001dd":[{"id":93541,"user_id":null,"body":"class Projectile {\n  Integer h0, v, a\n  Float pa, ha\n  \n  Projectile(h0, v, a){\n    this.h0 = h0\n    this.v = v\n    this.a = a\n    this.pa = v * Math.sin(Math.toRadians(a))\n    this.ha = v * Math.cos(Math.toRadians(a))\n  }\n  \n  def heightEq() { \"h(t) = -16.0t^2 + ${this.pa.round(3)}t${this.h0 ? \" + ${this.h0}.0\" : ''}\" }\n  def horizEq() { \"x(t) = ${this.ha.round(3)}t\" }\n  def height(t) { (-16 * t ** 2 + this.pa * t + this.h0).round(3) }\n  def horiz(t) { (this.ha * t).round(3) }\n  \n  def landing() {\n    def lt = (-this.pa - Math.sqrt(this.pa ** 2 - 4 * -16 * h0)) \/ -32\n    [(this.ha * lt + 0.00005).round(3), 0, lt.round(3)]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93542,"user_id":168,"body":"class Projectile {\n  private double h, vx, vy\n  \n  Projectile(h, v0, a) {\n    this.h = h\n    vx = v0 * Math.cos(Math.toRadians(a))\n    vy = v0 * Math.sin(Math.toRadians(a))\n  }\n  \n  def String heightEq() {\n    def res = [\"h(t) = -16.0t^2\"]\n    if (vy != 0) res << \"${vy.round(3)}t\"\n    if (h != 0) res << h\n    res.join(\" + \")\n  }\n  \n  def String horizEq() {\n    \"x(t) = ${vx.round(3)}t\"\n  }\n  \n  def double height(t) {\n    (-16 * t * t + vy * t + h).round(3)\n  }\n  \n  def double horiz(t) {\n    (vx * t).round(3)\n  }\n  \n  def List<Double> landing() {\n    def t = (vy + (vy * vy + 64 * h) ** 0.5) \/ 32\n    [horiz(t), 0, t.round(3)]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93543,"user_id":null,"body":"class Projectile {\n    int h0\n    double dX\n    double dY\n\n    Projectile(int h0, int v0, int aDeg) {\n        this.h0 = h0\n        double aRad = Math.toRadians(aDeg)\n        this.dX = v0 * Math.cos(aRad)\n        this.dY = v0 * Math.sin(aRad)\n    }\n\n    static double roundToDP(double value, int precision) {\n        double factor = 10**precision\n        return Math.round(value * factor) \/ factor\n    }\n\n    String heightEq() {\n        return \"h(t) = -16.0t^2\" + (dY ? \" + ${roundToDP(dY, 3)}t\" : \"\") + (h0 ? \" + ${h0}.0\" : \"\")\n    }\n\n    String horizEq() {\n        return \"x(t) = \" + (dX ? \"${roundToDP(dX, 3)}t\" : \"0.0\")\n    }\n\n    double height(double t) {\n        return roundToDP((-16.0 * t * t) + (dY * t) + h0, 3)\n    }\n\n    double horiz(double t) {\n        return roundToDP(dX * t, 3)\n    }\n\n    double[] landing() {\n        double t = (dY + Math.sqrt(dY * dY + 64.0 * h0)) \/ 32.0\n        return [horiz(t), 0, roundToDP(t, 3)]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93544,"user_id":null,"body":"import java.math.RoundingMode\n\nclass Projectile {\n    int startingHeight\n    int startingVelocity\n    int angle\n\n    Projectile(int startingHeight, int startingVelocity, int angle) {\n        this.startingHeight = startingHeight\n        this.startingVelocity = startingVelocity\n        this.angle = angle\n    }\n\n    String heightEq() {\n        if (startingHeight == 0 && angle == 0) {\n            return \"h(t) = -16.0t^2\"\n        }\n        String verticalVelocityString = formatDouble(verticalVelocityComponent())\n\n        if (startingHeight) {\n            return \"h(t) = -16.0t^2 + ${verticalVelocityString}t + $startingHeight.0\"\n        }\n        return \"h(t) = -16.0t^2 + ${verticalVelocityString}t\"\n    }\n\n    String horizEq() {\n        String horizontalVelocity = formatDouble(horizontalVelocityComponent())\n        return \"x(t) = ${horizontalVelocity}t\"\n    }\n\n    BigDecimal height(double time) {\n        def gravityComponent = -16 * time * time\n        def velocityComponent = verticalVelocityComponent() * time\n\n        def height = gravityComponent + velocityComponent + startingHeight\n        return roundToThreePlaces(height)\n    }\n\n    BigDecimal horiz(double time) {\n        def distance = horizontalVelocityComponent() * time\n        return roundToThreePlaces(distance)\n    }\n\n    BigDecimal[] landing() {\n        if (startingVelocity == 0 && startingHeight == 0)\n        {\n            return [0, 0, 0].toArray()\n        }\n        double a = -16.0\n        double b = verticalVelocityComponent()\n        double c = startingHeight\n\n        double positiveOption = (-b + Math.sqrt((b * b) - 4 * a * c)) \/ (2 * a)\n        double negativeOption = (-b - Math.sqrt((b * b) - 4 * a * c)) \/ (2 * a)\n\n        double timeToLanding = Math.max(positiveOption, negativeOption)\n        double distance = horiz(timeToLanding)\n        return [roundToThreePlaces(distance), 0, roundToThreePlaces(timeToLanding)].toArray()\n    }\n\n    private BigDecimal roundToThreePlaces(double value) {\n        new BigDecimal(value).setScale(3, RoundingMode.HALF_UP)\n    }\n\n    private double horizontalVelocityComponent() {\n        Math.cos(Math.toRadians(angle)) * startingVelocity\n    }\n\n    private double verticalVelocityComponent() {\n        Math.sin(Math.toRadians(angle)) * startingVelocity\n    }\n\n    static String formatDouble(double input) {\n        String formattedInput = sprintf(\"%.3f\", input)\n        if (formattedInput.endsWith(\"0\")) {\n            formattedInput = formattedInput[0..-2]\n        }\n        if (formattedInput.endsWith(\"0\")) {\n            return formattedInput[0..-2]\n        }\n        return formattedInput\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93545,"user_id":1403,"body":"class Projectile{\n  Integer startVelocity\n  Integer startHeight\n  Integer angle\n  Double horizVel\n  Double verticalVel\n  \n  Projectile(Integer h, Integer v0, Integer a) {\n    startHeight = h\n    startVelocity = v0\n    angle = a\n    horizVel = startVelocity * Math.cos((a * Math.PI) \/ 180.0)\n    verticalVel = startVelocity * Math.sin((a * Math.PI) \/ 180.0)\n  }\n  \n  def heightEq() {\n    double vv = (double)Math.round(verticalVel * 1000d) \/ 1000d\n    String a = \"\"\n    if(startHeight != 0) a = \" + \" + (double)startHeight\n    return \"h(t) = -16.0t^2 + \" + vv + \"t\" + a\n  }\n\n  \n  def horizEq() {\n    return \"x(t) = \" + (double)Math.round(horizVel * 1000d) \/ 1000d + \"t\"\n  }\n  \n  def height(time) {\n    double d = (-16 * Math.pow(time, 2) + (verticalVel * time) + startHeight)\n    return (double)Math.round(d * 1000d) \/ 1000d\n  }\n  \n  def horiz(time) {\n    return (double)Math.round((horizVel * time) * 1000d) \/ 1000d\n  }\n  \n  def landing() {\n    double t = ((0-verticalVel - Math.sqrt(Math.pow(verticalVel,2)-(4*(-16)*startHeight)))\/-32.0)\n    double x = horiz(t)\n    t = (double)Math.round(t * 1000d) \/ 1000d\n    x = (double)Math.round(x * 1000d) \/ 1000d\n    return [x, 0, t]\n  }\n}\n  ","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5aff237c578a14752d0035ae":[{"id":93546,"user_id":null,"body":"class Solution {\n  static predict_age(Integer... args) {\n    Math.sqrt(args.sum { it ** 2 }) \/ 2 as Integer\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93547,"user_id":17,"body":"class Solution {\n  static predict_age(age1, age2, age3, age4, age5, age6, age7, age8) {\n    return Math.floor(Math.sqrt(age1 ** 2 + age2 ** 2 + age3 ** 2 + age4 ** 2 + age5 ** 2 + age6 ** 2 + age7 ** 2 + age8 ** 2) \/ 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93548,"user_id":null,"body":"class Solution {\n  static predict_age(... args) {\n    Math.sqrt(args.collect{it*it}.sum())\/2 as int\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93549,"user_id":1365,"body":"class Solution {\n  static predict_age(a, b, c, d, e, f, g, h) {\n    (int)(Math.sqrt(a*a+b*b+c*c+d*d+e*e+f*f+g*g+h*h)\/2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93550,"user_id":1365,"body":"class Solution {\n  static predict_age(a, b, c, d, e, f, g, h) {\n    (int)(Math.sqrt(a*a+b*b+c*c+d*d+e*e+f*f+g*g+h*h)\/2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93551,"user_id":null,"body":"\/\/building up groovy knowledge this is a straight zero credit copy of another's solution\nclass Solution {\n  static predict_age(Integer... args) {\n    Math.sqrt(args.sum { it ** 2 }) \/ 2 as Integer\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93552,"user_id":null,"body":" class Solution {\n  static  predict_age(age1, age2, age3, age4, age5, age6, age7, age8) {\n    \n \n\ndef predict_age = [age1, age2, age3, age4, age5, age6, age7, age8]\nfor(int i = 0; i <= (predict_age.size()-1); i++) {\n\n    def age = predict_age.get(i) * predict_age.get(i)\n    predict_age[predict_age.indexOf(predict_age.get(i)) ] = age\n}\n\ndef sum = predict_age.sum()\nint result =  Math.sqrt(sum) \/ 2\n\nreturn(result) }  }","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93553,"user_id":null,"body":"class Solution {\n  static predict_age(age1, age2, age3, age4, age5, age6, age7, age8) {\n    Math.floor(Math.sqrt([age1, age2, age3, age4, age5, age6, age7, age8].collect({ v -> v = v * v }).sum())\/2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93554,"user_id":1701,"body":"class Solution {\n  static predict_age(age1, age2, age3, age4, age5, age6, age7, age8) {\n    return (int)(Math.sqrt(age1 ** 2 + age2 ** 2 + age3 ** 2 + age4 ** 2 + age5 ** 2 + age6 ** 2 + age7 ** 2 + age8 ** 2) \/ 2)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93555,"user_id":1701,"body":"class Solution {\n  static int predict_age(age1, age2, age3, age4, age5, age6, age7, age8) {\n    return (int)(Math.sqrt((double)(age1 ** 2 + age2 ** 2 + age3 ** 2 + age4 ** 2 + age5 ** 2 + age6 ** 2 + age7 ** 2 + age8 ** 2)) \/ 2);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b06c990908b7eea73000069":[{"id":93556,"user_id":53,"body":"class F {\n    public static int f(double x, double y, double eps) {\n        double ans = Math.log(eps) \/ Math.log(Math.hypot(x, y));\n        return ans < 0 ? -1 : Math.floor(ans);\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93557,"user_id":527,"body":"class F {\n\n    static int f(double x, double y, double eps) {\n        def m = Math.hypot(x, y)\n        if (m < 1) Math.log(eps) \/ Math.log(m) else -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93558,"user_id":492,"body":"class F {\n\n    private static double modul(double x, double y) {\n        if (x != 0 || y != 0)\n            return Math.sqrt(x * x + y * y);\n        else\n            return 0.0;\n    }\n    public static int f(double x, double y, double eps) {\n        if (modul(x, y) >= 1.0)\n            return -1;\n        return (int)(Math.log(eps) \/ Math.log(modul(x, y)));\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93559,"user_id":168,"body":"class F {\n\n    public static int f(double x, double y, double eps) {\n        def a = Math.hypot(x, y);\n        a >= 1 ? -1 : Math.log(eps) \/ Math.log(a)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93560,"user_id":50,"body":"class F {\n\n    public static int f(double x, double y, double q) {\n      double mod=Math.hypot(x,y)\n      return mod < 1.0 ? (int)Math.floor(Math.log(q)\/Math.log(mod)) : -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93561,"user_id":527,"body":"class F {\n\n    static int f(double x, double y, double eps) {\n        def m = Math.hypot(x, y)\n        if (m < 1) Math.log(eps) \/ Math.log(m) + 1 else -1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b0c0ec907756ffcff00006e":[{"id":93562,"user_id":492,"body":"public class Quadratic {\n \n  public static double quadratic(double a, double b, double c) {\n    return -c \/ b;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93563,"user_id":527,"body":"class Quadratic {\n  static double quadratic(double a, double b, double c) {\n    -c \/ b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93564,"user_id":492,"body":"public class Quadratic {\n \n  public static double quadratic(double a, double b, double c) {\n    return -c \/ b;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93565,"user_id":null,"body":"public class Quadratic {\n \n  public static double quadratic(double a, double b, double c) {\n    2 * c \/ (-Math.sqrt(b ** 2 - 4 * a * c) - b)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93566,"user_id":null,"body":"public class Quadratic {\n \n  public static double quadratic(double a, double b, double c) {\n    -c \/ b\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b0d67c1cb35dfa10b0022c7":[{"id":93567,"user_id":168,"body":"class Kata {\n    static def squares_needed(int grains) {\n        32 - Integer.numberOfLeadingZeros(grains)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93568,"user_id":null,"body":"class Kata {\n    static def squares_needed(int grains) {\n        grains == 0 ? 0 : Integer.toBinaryString(grains).size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93569,"user_id":null,"body":"class Kata {\n    static def squares_needed(int grains) {\n        long result = 0\n      if(grains<0){\n        return 32\n      }\n       while(Math.abs(grains) > 0){\n         grains = grains\/2\n         result++\n       }\n      result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93570,"user_id":53,"body":"class Kata {\n    static def squares_needed(int n) {\n        if (n < 0) {\n          return squares_needed(-n) - 2;\n        }\n        return Math.ceil(Math.log(n+1) \/ Math.log(2));\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93571,"user_id":null,"body":"class Kata {\n    static def squares_needed(int grains) {\n      if(grains < 0){\n        return 32\n      }\n      def res = 0\n      while(2 ** res <= grains){\n        res++\n      }\n        return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93572,"user_id":148,"body":"class Kata {\n    static def squares_needed(BigInteger grains) {\n        if (grains < 0 ) return 32\n        def answer = 0\n        while (2**answer <= grains) {\n            answer++\n        }\n        return answer\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93573,"user_id":575,"body":"class Kata {\n    static def squares_needed(int grains) {\n        return grains == 0 ? 0 : Integer.toBinaryString(grains).size()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b1cd19fcd206af728000056":[{"id":93574,"user_id":53,"body":"public class Solve {\n \n  public static double solve(double m) {\n      return (2 * m + 1 - Math.sqrt(4 * m + 1)) \/ (2 * m);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93575,"user_id":492,"body":"public class Solve {\n \n  public static double solve(double m) {\n      double s = Math.sqrt(4 * m + 1);\n      return (2 * m + 1 - s) \/ (2 * m);\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93576,"user_id":50,"body":"public class Solve {\n \n  public static double solve(double m) {\n     return (2*m+1-Math.pow((4*m+1),0.5))\/(2*m);\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93577,"user_id":null,"body":"public class Solve {\n \n  public static double solve(double s) {\n      return (1 - Math.sqrt(4 * s + 1)) \/ (2.0 * s) + 1;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93578,"user_id":null,"body":"public class Solve {\n \n  public static double solve(double m) {\n    double x1 = (1 + 2 * m - Math.sqrt(1 + 4 * m))\/(2 * m)\n    return(x1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93579,"user_id":null,"body":"public class Solve {\n \n  public static double solve(double m) {\n      (2 * m + 1 - Math.sqrt(4 * m + 1))\/(2 * m)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93580,"user_id":null,"body":"public class Solve {\n  public static double solve(double m) {\n    def double tmp1 = 2 * m + 1 - Math.sqrt(4 * m + 1)\n    return tmp1 \/ (2 * m) \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93581,"user_id":503,"body":"class Solve\n{\n  static solve(double Q){1 + (1 - Math.sqrt(1 + 4 * Q)) \/ Q \/ 2}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b2117eea454c89d4400005f":[{"id":93582,"user_id":20,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n    def a=[L0, L1];\n    for(int i=2; i<n; i++)\n      a+=a[i-1]+a[i-2]+add;\n    return a;\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93583,"user_id":null,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n     def result = [L0, L1]\n        for (int i = 2; i < n; i++) {\n            result.add(result[i - 1] + result[i - 2] + add)\n        }\n        result\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93584,"user_id":null,"body":"class Kata {\n  static def leonardoNumbers(n, L0, L1, add) {\n    def L\n    L = { int m ->\n      if(m == 0) return L0\n      if(m == 1) return L1\n      return L(m-1) + L(m-2) + add\n    }.memoize()\n    \n    (0..(n-1)).collect { it ->\n      L(it)\n    }\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93585,"user_id":148,"body":"class Kata {\n    static leonardoNumbers(n, L0, L1, add) {\n        def answer = [L0, L1]\n        for (def i = 1; answer.size() < n; i++) {\n            answer.add(answer[i -1] + answer[i] + add)\n        }\n        return answer\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93586,"user_id":null,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n    List result = [L0, L1]\n    (2..<n).forEach {\n        result << result[it - 1] + result[it - 2] + add\n    }\n    return result\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93587,"user_id":null,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n    def res = [L0, L1]\n    if (n > 2)\n      (2..n-1).each {\n        res.add(res[it-2] + res[it-1] + add)\n      }\n    res\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93588,"user_id":null,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n    def array = []\n        array.addAll([L0, L1])\n        for(int i=2; i<n; i++){\n            array.add(array.get(i-1)+array.get(i-2)+add)\n        }\n        return array\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93589,"user_id":null,"body":"class Kata {\n  static leonardoNumbers(n, L0, L1, add) {\n    int i, m; def a=[L0, L1]\n    for (i=2; i<n; i++) {\n      m=L1+L0+add; a+=m\n      L0=L1; L1=m\n    }\n    a\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93590,"user_id":575,"body":"class Kata {\n  static leonardoNumbers(n, l1, l2, add) {\n    def (a, b) = [l1, l2]\n    def result = []\n    (1..n).each {\n        result << a \n        (a, b) = [b, a + b + add]\n    }\n    result\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93591,"user_id":null,"body":"import groovy.transform.Memoized\n\nclass Kata {\n\n  static leonardoNumbers(n, l0, l1, add) {\n    (0..<n).collect { leonardo(it, l0, l1, add) }\n  }\n  \n  @Memoized\n  static leonardo(int n, int l0, int l1, int a) {\n    if (n == 0) {\n      l0\n    } else if (n == 1) {\n      l1\n    } else {\n      (leonardo(n - 1, l0, l1, a) + leonardo(n - 2, l0, l1, a) + a)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b40b666dfb4291ad9000049":[{"id":93592,"user_id":492,"body":"import java.util.Arrays;\n\nclass Walker {\n\n  public static int[] solve(int a, int b, int c, int alpha, int beta, int gamma) {\n      double aa = alpha * Math.PI \/ 180; double bb = beta * Math.PI \/ 180; double cc = gamma * Math.PI \/ 180;\n      double x = a * Math.cos(aa) - b * Math.sin(bb) - c * Math.cos(cc);\n      double y = a * Math.sin(aa) + b * Math.cos(bb) - c * Math.sin(cc);\n      double r = Math.sqrt(x * x + y * y);\n      int theta = (int)(Math.acos(x \/ r) * 180 * 3600 \/ Math.PI);\n      int d = theta \/ 3600;\n      int mm = theta % 3600;\n      int m = mm \/ 60;\n      int s = mm % 60;\n      return [(int)Math.round(r), d, m, s];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93593,"user_id":53,"body":"import java.util.Arrays;\n\nclass Walker {\n  \n  public static int[] solve(int a, int b, int c, int alpha, int beta, int gamma) {\n    double u = alpha * Math.PI \/ 180;\n    double v = beta * Math.PI \/ 180; \n    double w = gamma * Math.PI \/ 180;\n    double x = a * Math.cos(u) - b * Math.sin(v) - c * Math.cos(w);\n    double y = a * Math.sin(u) + b * Math.cos(v) - c * Math.sin(w);\n    double t = Math.atan2(y, x) * 180 \/ Math.PI;\n    double r = Math.hypot(y, x);\n    return [(int)Math.round(r), (int)t, ((int)(t*60))%60, ((int)(t*3600))%60];\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93594,"user_id":null,"body":"class Walker {\n  static def A = { a,alpha ->\n    Math.with {\n      [a*cos(toRadians(alpha)),a*sin(toRadians(alpha))]\n    }\n  }\n  \n  static def B = { a,b,beta ->\n    Math.with {\n      [a[0]+(b*cos(toRadians(beta+90))),a[1]+(b*sin(toRadians(beta+90)))]\n    }\n  }\n  \n  static def C = { b,c,gamma ->\n    Math.with {\n      [b[0]+(c*cos(toRadians(gamma+180))),b[1]+(c*sin(toRadians(gamma+180)))]\n    }\n  }\n  \n  static def OC = { c ->\n    Math.sqrt(c[0] ** 2 +  c[1] ** 2).round()\n  }\n  \n  static def tOC = { c ->\n    Math.with {\n      toDegrees(atan((c[1])\/(c[0]))) + 180\n    }\n  }\n  \n  static def DMS = { d ->\n    int deg = d \n    int min = ((d - deg) * 60) \n    int sec = (d - deg - (min \/ 60)) * 3600\n    [deg,min,sec]\n  }\n  \n  static solve(a, b, c, alpha, beta, gamma) {\n    def pC = C(B(A(a,alpha),b,beta),c,gamma)\n    \n    ([OC(pC)] + DMS(tOC(pC))) as int[]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93595,"user_id":148,"body":"import java.util.Arrays;\n\nclass Walker {\n\n  public static int[] solve(int a, int b, int c, int alpha, int beta, int gamma) {        \n        def cord = [0, 0]\n        def answer = new int[4]\n        cord = calculateCordinates(cord, a, alpha)\n        cord = calculateCordinates(cord, b, (beta + 90) as int)\n        cord = calculateCordinates(cord, c, (gamma + 180) as int)\n        answer[0] = Math.round(Math.sqrt(cord[0]**2 + cord[1]**2))\n        def angle = Math.toDegrees(Math.atan2(Math.abs(cord[0] as double), Math.abs(cord[1] as double))) + 90\n        answer[1] = angle as int\n        answer[2] = ((angle - (angle as int)) * 60) as int\n        answer[3] = (((angle - (angle as int)) * 60) - answer[2]) * 60\n        return answer\n  }\n  \n  static def calculateCordinates(cords, length, angle) {\n        angle = angle * Math.PI \/ 180\n        cords = [length * Math.cos(angle) + cords[0], length * Math.sin(angle) + cords[1]]\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93596,"user_id":null,"body":"import java.util.Arrays;\nimport java.lang.Math;\n\nclass Walker {\n\n  public static int[] solve(int a, int b, int c, int alpha, int beta, int gamma) {\n    double x = a * Math.cos(Math.toRadians(alpha)) - b * Math.sin(Math.toRadians(beta)) - c * Math.cos(Math.toRadians(gamma))\n    double y = a * Math.sin(Math.toRadians(alpha)) + b * Math.cos(Math.toRadians(beta)) - c * Math.sin(Math.toRadians(gamma))\n    long dst = Math.round(Math.hypot(x, y))\n    double ang = Math.toDegrees(Math.atan2(y, x))\n    int deg = Math.floor(ang)\n    ang = (ang - deg) * 60\n    int min = Math.floor(ang)\n    ang = (ang - min) * 60\n    int sec = Math.floor(ang)\n    return [dst, deg, min, sec]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93597,"user_id":null,"body":"import java.util.Arrays;\n\nclass Walker {\n\n  public static int[] solve(int a, int b, int c, int alpha, int beta, int gamma) {\n    def pO = [0, 0]\n    def pA = toPoint(pO, alpha, a)\n    def pB = toPoint(pA, 90 + beta, b)\n    def pC = toPoint(pB, 180 + gamma, c)\n    def distance = round(getDist(pO, pC))\n    def angle = getAngle(pO, pC)\n    def deg = (int)angle\n    def min = (int)((angle - deg) * 60.0)\n    def sec = (int)((angle - deg - (min \/ 60.0)) * 3600)\n    \n    [distance, deg, min, sec]\n  }\n  \n  static toPoint(startingPoint, angle, radius) {\n    def rads = angle * Math.PI \/ 180\n    [\n      startingPoint[0] + Math.cos(rads) * radius,\n      startingPoint[1] + Math.sin(rads) * radius\n    ]\n  }\n  \n  static getDist(p1, p2) {\n    Math.sqrt(Math.pow(p2[1] - p1[1], 2) + Math.pow(p2[0] - p1[0], 2))\n  }\n  \n  static int round(val) {\n    new BigDecimal(val).setScale(0, BigDecimal.ROUND_HALF_UP)\n  }\n  \n  static getAngle(p1, p2) {\n    Math.atan2(p2[1] - p1[1], p2[0] - p1[0]) * 180.0 \/ Math.PI\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b65c47cbedf7b69ab00066e":[{"id":93598,"user_id":null,"body":"class Kata {\n\n    static def buildTrie(String[] words) {\n            return words\n                .inject([:], { entries, word ->\n                    buildTrieIter(entries, word, 0)\n                })\n    }\n\n    private static Map buildTrieIter(Map entries, String word, int n) {\n        if (n == word.length()) {\n            return entries\n        }\n        String key = word[0..n]\n        if (entries.containsKey(key)) {\n            if (n < word.length() - 1) {\n                entries[key] = buildTrieIter(entries[key] ? entries[key] as Map : [:], word, n + 1)\n            }\n        } else if (n == word.length() - 1) {\n            entries[key] = null\n        } else {\n            entries[key] = buildTrieIter([:], word, n + 1)\n        }\n        return entries\n    }\n\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93599,"user_id":null,"body":"class Kata {\n    static def buildTrie(String[] words) {\n        Trie trie = new Trie()\n\n        for (key in words) {\n            trie.addKey(key)\n        }\n        trie.root\n    }\n}\n\nclass Trie {\n    Map<String, Map> root;\n\n    Trie() {\n        root = new HashMap<String, Map>()\n    }\n\n    void addKey(String key) {\n        Map<String, Map> current = root\n        for (int i=1; i <= key.size(); i++) {\n            String subKey = key.substring(0, i)\n\n            if ((i+1 <= key.size()) && current.get(subKey) == null) {\n                Map<String, Map> nextMap = new HashMap()\n                nextMap.put(key.substring(0,i+1),null)\n                current.put(subKey, nextMap)\n                current = nextMap\n            }else if (current.get(subKey) == null) {\n                current.put(subKey, null)\n\n            } else {\n                current = current.get(subKey)\n            }\n        }\n\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93600,"user_id":null,"body":"class Kata {\n    static def buildTrie(String[] words) {\n        def map=[:]\n        if(words){\n          int maxLength=words*.length().max()\n          for(int i=maxLength;i>0;i--) {\n              if(i<maxLength){\n                  map=map.groupBy{entry->(entry.key.substring(0,i))}\n              }\n              words.findAll{it.length()==i}.unique().each{word->\n                  if(!map[(word)]){\n                      map[(word)]=null\n                  }\n              }\n          }\n        }\n        return map; \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93601,"user_id":575,"body":"class Kata {\n    static def buildTrie(String[] words) {\n        def trie = [:]\n        for (word in words) {\n            def (dct, prefix, length) = [trie, \"\", word.size()]\n            for (c in word) {\n                prefix += c\n                length -= 1\n                if(!dct.containsKey(prefix)){\n                    dct[prefix] = null\n                }\n                if(length != 0 && dct[prefix] == null) {\n                    dct[prefix] = [:]\n                }\n                dct = dct[prefix]\n            }\n        }\n        return trie\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5b7c80094a6aca207000004d":[{"id":93602,"user_id":null,"body":"class Kata {\n  \n    static SEQUENCE_TYPES = [\n      \"fib\": new Fibonacci(),\n      \"tri\": new Tribonacci(),\n      \"tet\": new Tetranacci(),\n      \"pad\": new Padovan(),\n      \"pel\": new Pell(),\n      \"jac\": new Jacobsthal()\n    ]\n  \n    static def zozonacci(pattern, length) {\n        if(pattern.size() == 0 || length == 0) {\n          return [];\n        }\n      \n        def sequenceType = SEQUENCE_TYPES[pattern[0]]\n        def result = sequenceType.start_sequence().subList(0, length <= 4 ? length : 4)\n        for(int i = 0; i < length - 4; i++) {\n          def sequencePrefix = pattern[i % pattern.size()]\n          sequenceType = SEQUENCE_TYPES[sequencePrefix]\n          result << sequenceType.next(result)\n        }\n      \n        return result\n    }\n}\n\nclass Fibonacci {  \n  def start_sequence() {\n    return [0, 0, 0, 1];\n  }\n  \n  def next(list) {\n    return list[-1] + list[-2]\n  }\n}\n\nclass Tribonacci extends Fibonacci {\n  def next(list) {\n    return super.next(list) + list[-3]\n  }  \n}\n\nclass Tetranacci extends Tribonacci {\n  def next(list) {\n    return super.next(list) + list[-4]\n  }    \n}\n\nclass Padovan extends Tetranacci {\n  def start_sequence() {\n    return [0, 1, 0, 0]\n  }\n  \n  def next(list) {\n    return list[-2] + list[-3]\n  }  \n}\n\nclass Pell {\n  def start_sequence() {\n    return [0, 0, 0, 1]\n  }\n  \n  def next(list) {\n    return 2 * list[-1] + list[-2]\n  }\n}\n\nclass Jacobsthal {\n  def start_sequence() {\n    return [0, 0, 0, 1]\n  }\n  \n  def next(list) {\n    return list[-1] + 2 * list[-2]\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93603,"user_id":null,"body":"class Kata {\n  static def zozonacci(pattern, length) {\n    if (pattern==[] || length==0) []\n    else {\n      def a = pattern[0]==\"pad\"? [0, 1, 0, 0]: [0, 0, 0, 1] \n      if (length<=4) a[0..length-1]\n      else {\n        int m = pattern.size\n        for (n in 4..length-1)\n          switch(pattern[(n-4)%m]) {\n            case \"fib\": a[n]=a[n-1]+a[n-2]; break\n            case \"pad\": a[n]=a[n-2]+a[n-3]; break\n            case \"jac\": a[n]=a[n-1]+2*a[n-2]; break\n            case \"pel\": a[n]=2*a[n-1]+a[n-2]; break\n            case \"tri\": a[n]=a[n-1]+a[n-2]+a[n-3]; break\n            case \"tet\": a[n]=a[n-1]+a[n-2]+a[n-3]+a[n-4]\n          }         \n        a\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93604,"user_id":null,"body":"class Kata {\n  static def zozonacci(pattern, length) {\n    if (pattern.size==0 || length==0) []\n    else {\n      def a = [0, 0, 0, 1]\n      switch (pattern[0]) {  \n        case \"pad\": a = [0, 1, 0, 0]; break\n        case \"fib\" || \"jac\": a = [0, 0, 0, 1]\n      }\n      if (length<=4) a[0..length-1]\n      else {\n        int m = pattern.size\n        for (n in 4..length-1)\n          switch(pattern[(n-4)%m]) {\n            case \"fib\": a[n]=a[n-1]+a[n-2]; break\n            case \"pad\": a[n]=a[n-2]+a[n-3]; break\n            case \"jac\": a[n]=a[n-1]+2*a[n-2]; break\n            case \"pel\": a[n]=2*a[n-1]+a[n-2]; break\n            case \"tri\": a[n]=a[n-1]+a[n-2]+a[n-3]; break\n            case \"tet\": a[n]=a[n-1]+a[n-2]+a[n-3]+a[n-4]\n          }         \n        a\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93605,"user_id":575,"body":"class Kata {\n    static def zozonacci(pattern, length) {\n        if(!pattern || !length) {\n            return []\n        }\n\n        def seq = pattern[0] == \"pad\" ? [0, 1, 0, 0] : [0, 0, 0, 1]\n\n        if (length <= 4) {\n            return seq[0..<length] \n        }\n        \n        def patternMap = [\n            \"fib\": { -> seq[-1] + seq[-2]}, \n            \"tri\": { -> seq[-1] + seq[-2] + seq[-3]},\n            \"tet\": { -> seq[-1] + seq[-2] + seq[-3] + seq[-4]},\n            \"pad\": { -> seq[-2] + seq[-3]},\n            \"pel\": { -> 2 * seq[-1] + seq[-2] },\n            \"jac\": { -> seq[-1] + 2 * seq[-2] },\n        ]\n        \n        def patternSize = pattern.size() \n\n        (0..<(length)-4).each { i ->\n            seq << (patternMap[pattern[i%patternSize]]())\n        }\n\n        return seq\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93606,"user_id":575,"body":"class Kata {\n    static def zozonacci(pattern, length) {\n        if(!pattern || !length) {\n            return []\n        }\n\n        def seq = pattern[0] == \"pad\" ? [0, 1, 0, 0] : [0, 0, 0, 1]\n\n        if (length <= 4) {\n            return seq[0..<length] \n        }\n        \n        def patternMap = [\n            \"fib\": { -> seq[-1] + seq[-2]}, \n            \"tri\": { -> seq[-1] + seq[-2] + seq[-3]},\n            \"tet\": { -> seq[-1] + seq[-2] + seq[-3] + seq[-4]},\n            \"pad\": { -> seq[-2] + seq[-3]},\n            \"pel\": { -> 2 * seq[-1] + seq[-2] },\n            \"jac\": { -> seq[-1] + 2 * seq[-2] },\n        ]\n        \n        def patternSize = pattern.size() \n\n        (0..<(length)-4).each { i ->\n            seq << (patternMap[pattern[i%patternSize]]())\n        }\n\n        return seq\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5bb493932ce53339dc0000c2":[{"id":93607,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n        layers < 1 ? 0 : layers - ((layers - 1) * 0.2929)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93608,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n      if(layers == 0) return 0\n        layers- (0.2929 * (layers-1))\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93609,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(l) {\n       l > 0 ? 1.0 \/ Math.sqrt(2) * (l - 1) + 1 : 0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93610,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n        if (layers == 0) return 0\n        if (layers == 1) return 1\n        (layers - 0.2929 * (layers - 1))\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93611,"user_id":148,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n      if (layers == 0) {\n            return 0\n        }\n        return 1 + (layers - 1) * Math.sqrt(1 \/ 2)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93612,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n      layers ? ((layers - 1) * Math.sqrt(2) \/ 2 + 1) : 0;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93613,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n      layers ? 1 + (layers - 1) * Math.sqrt(2) \/ 2 : 0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93614,"user_id":null,"body":"class Dinglemouse {\n  static def stackHeight3d(layers) {\n    layers>0? Math.sqrt(2)\/2*(layers-1)+1: 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93615,"user_id":575,"body":"class Dinglemouse {\n    static def stackHeight3d(layers) {\n        layers == 0 ? 0 : 1 + (layers - 1) * (Math.sqrt(2) \/ 2)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5bb804397274c772b40000ca":[{"id":93616,"user_id":148,"body":"class Dinglemouse {\n    static def stackHeight2d(layers) {\n        if (layers == 0) return 0\n        return Math.sqrt(Math.pow(layers - 1, 2) - Math.pow(0.5 * (layers - 1) as double, 2)) + 1\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93617,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight2d(layers) {\n      layers ? 1 + (layers - 1) * Math.sqrt(3) \/ 2 : 0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93618,"user_id":null,"body":"class Dinglemouse {\n  static def stackHeight2d(layers) {\n    layers>0? Math.sqrt(3)\/2*(layers-1)+1: 0\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93619,"user_id":null,"body":"class Dinglemouse {\n    static def stackHeight2d(layers) {\n      (layers>0)?((layers-1)*Math.sqrt(3))\/2+1:0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93620,"user_id":575,"body":"class Dinglemouse {\n    static def stackHeight2d(layers) {\n        layers == 0 ? 0 : 1 + (layers - 1) * (Math.sqrt(3) \/ 2)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5bd00c99dbc73908bb00057a":[{"id":93621,"user_id":null,"body":"class Kata {\n  static def alpha_seq(string) {\n    string.toLowerCase().toList().sort().collect{c -> (c*((int)c-96)).capitalize()}.join(\",\")\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93622,"user_id":null,"body":"class Kata {\n    static String alpha_seq(String string) {\n        List<Character> letters = string.getChars().collect { it.toLowerCase() }.sort()\n\t\t    List<String> manyLetters = letters.collect { char c ->\n\t\t\t      int characterCount = c.charValue() - (((char)'a').charValue())\n\t\t\t      String uppercaseC = c.toUpperCase()\n\t\t\t      String lowercaseC = c.toLowerCase()\n\t\t\t      return uppercaseC + (lowercaseC * characterCount)\n\t\t}\n\t\treturn manyLetters.join(\",\")\n\t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93623,"user_id":null,"body":"class Kata {\n    static def alpha_seq(string) {\n        \/\/ Implement me! :)\n        String resultString = ''\n        List<String> sortedString = string.toLowerCase().toList().sort()\n\n        def alphabet = 'a'..'z'\n\n        sortedString.each { it ->\n            resultString += it.multiply(alphabet.indexOf(it) + 1).capitalize() + ','\n        }\n\n        resultString.reverse().drop(1).reverse()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93624,"user_id":null,"body":"class Kata {\n    static def alpha_seq(string) {\n        def resultAlphaSeq = []\n        def letters = 'a'..'z'\n        string.toLowerCase().each {\n          def index = letters.indexOf(it)\n          resultAlphaSeq << letters[index].multiply(++index).capitalize()\n        }\n        resultAlphaSeq.sort().join(',')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93625,"user_id":null,"body":"class Kata {\n    static def alpha_seq(String string) {\n        def chars = 'a'..'z'\n        def arr = string.toLowerCase().split(\"\").sort()\n        arr.toList()\n                .collect{x-> (x.multiply(chars.indexOf(x) + 1)) }\n                .collect({ x -> x.substring(0,1).toUpperCase() + x.substring(1, x.length())})\n                .join(\",\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93626,"user_id":null,"body":"class Kata {\n    static def alpha_seq(s) {\n        s.toLowerCase().collect{it.toUpperCase() + it*('a'..'z').indexOf(it)}.sort().join(',')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93627,"user_id":null,"body":"class Kata {\n    static def alpha_seq(string) {\n      List alphabet = ('a'..'z').collect { it }\n      String[] str = string.toLowerCase().split(\"\")\n      str.sort()\n      String a = \"\"\n      str.each { v ->\n        a += v.toUpperCase() + (v*(alphabet.findIndexOf{ it == v })) + \",\"\n      }\n      a.substring(0, a.length() - 1)    \n      \n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93628,"user_id":null,"body":"class Kata {\n    static def alpha_seq(string) {\n      \n      def letters = string.toUpperCase().split('').sort()\n      def alpha_seqList = []\n      \n      letters.each {letter->\n        letter = letter + letter.toLowerCase() * ((int) letter - 65)\n        alpha_seqList.add(letter)\n      }\n      alpha_seqList.join(\",\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93629,"user_id":null,"body":"class Kata {\n    static def alpha_seq(i) {\n          String abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        i.toUpperCase().collect() { it as String }\n                       .sort()\n                       .stream()\n                       .map { v -> v = v + v.toLowerCase() * (abc.indexOf(v)) }\n                       .collect()\n                       .join(\",\")\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93630,"user_id":168,"body":"class Kata {\n    static def alpha_seq(string) {\n      string.toLowerCase().split('').sort().collect { it.toUpperCase() + it * ((it as char) - 97) }.join(',')\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5c2bedd7eb9aa95abe14d0ed":[{"id":93631,"user_id":null,"body":"import java.time.LocalDate\nimport java.time.temporal.IsoFields\n\nclass Kata {\n    static def get_calendar_week(String dateString) {\n        return LocalDate.parse(dateString, \"yyyy-MM-dd\").get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93632,"user_id":null,"body":"import java.time.*\nimport java.time.temporal.IsoFields\nclass Kata {\n    static def get_calendar_week(String dateString) {\n        LocalDate ld = LocalDate.parse(dateString)\n        ld.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93633,"user_id":527,"body":"import java.time.LocalDate\nimport java.time.temporal.IsoFields\n\nclass Kata {\n  static def get_calendar_week(String dateString) {\n    LocalDate.parse(dateString).get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93634,"user_id":567,"body":"class Kata {\n    static def get_calendar_week(String dateString) {\n        java.time.LocalDate.parse(dateString).get(java.time.temporal.IsoFields.WEEK_OF_WEEK_BASED_YEAR)\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5ce399e0047a45001c853c2b":[{"id":93635,"user_id":564,"body":"class SumParts {\n    public static int[] parts_sums(int[] ns) {\n        int[] sums = new int[ns.length + 1]\n        for (int i = 1; i <= ns.length; i++) {\n            sums[-i - 1] = sums[-i] + ns[-i]\n        }\n        sums\n    }\n}\n","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93636,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        ls.inject([[0, *ls].sum()], { result, i -> result << result.last() - i })\n    }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93637,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n      \n      def sum = [ls.sum()]\n      \n      ls.each{ \n        sum.addAll([sum.last()-it])\n      }\n      return sum\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93638,"user_id":null,"body":"class SumParts {\n  public static int[] parts_sums(int[] ls) {\n        if (ls==null || ls.length==0)\n            return [0];\n\n        def b = [0];\n        int sum = 0;\n        for (int i= ls.length-1; i>=0; i--) {\n            sum += ls[i];\n            b.add(sum);\n        }\n        b.reverse();\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93639,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        def result = []\n        int sum = ls.sum()\n        result << sum\n        for (int i = 0; i < ls.size(); i++) {\n            sum -= ls[i]\n            result << sum\n        }\n        result\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93640,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        \/\/ your code\n        def sums = [ls.sum()]\n        for (item in ls) {\n          sums.add(sums[-1]-item)\n        }\n        return sums\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93641,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        \/\/ your code\n      def sum = ls.sum()\n      def res = [sum]\n      ls.each {\n        sum -= it\n        res << sum\n      }\n      \n      res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93642,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        int sum = 0\n        def result = []\n        ls.each{it -> sum = sum + it}\n        ls.each{it -> result.add(sum); sum-=it}\n        result.add(0)\n        return(result)\n        \n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93643,"user_id":null,"body":"class SumParts {\n    public static int[] parts_sums(int[] ls) {\n        def res = []\n        (ls.length..0).each{res << (it == ls.length ? 0 : res.last() + ls[it])}\n        res.reverse()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93644,"user_id":null,"body":"class SumParts {\n  \n    public static int[] parts_sums(int[] ls) {\n      \n        int[] listOfSublistSums = new int[ls.size() + 1]\n        int sumOfSublists = 0\n\n        for (int i = ls.size() - 1; i >= 0; i--) {\n            sumOfSublists += ls[i]\n            listOfSublistSums[i] = sumOfSublists\n        }\n        listOfSublistSums\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5d41e16d8bad42002208fe1a":[{"id":93645,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n        input.toList().findAll{\n          def digt = Integer.toBinaryString((int)it).toList().groupBy{it}\n          def ones = digt.get('1')?.size()\n          def zeros = digt.get('0')?.size()\n          ones<zeros\n        }.unique()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93646,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n        input.toCharArray().findAll{ Integer.toBinaryString((int) it).count('0') > 3 }.unique()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93647,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n       input.findAll{Integer.toBinaryString((int)it).count('0')>3}.unique()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93648,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n        input.chars()\n                .distinct()\n                .mapToObj { Integer.toBinaryString it }\n                .filter { it.count('0') > it.length() \/ 2 }\n                .map { (char) Integer.parseInt(it, 2) }\n                .collect().join()\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93649,"user_id":1492,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n        def result = []\n        def seen = [] as Set\n      \n        for (ch in input){\n          def bin = Integer.toBinaryString((int)ch)\n          \n          if (bin.count(\"0\") > bin.size() \/ 2 && !seen.contains(ch)){\n            result.add(ch)\n            seen.add(ch)\n          }\n        }\n        return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93650,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n       new LinkedHashSet(input.toCharArray()\n        .collect { [Integer.toBinaryString((int)it),it] }\n        .findAll { it[0].count('0') > it[0].count('1') }\n        .collect { it[1] }) as Character[]\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93651,"user_id":null,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n      def Set<String> result=[]\n\t\t  \n      for (c in input) {\n        def zeros=0\n\t\t\t  def ones=0\n\t\t\t  def binaryString = Integer.toBinaryString((int)c);\n\t\t\t  binaryString.each {\n          it==\"0\"?zeros++:ones++\n        }\n        if(zeros>ones) {\n          result.add(c)\n        }\n      }\n      return result\n    }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93652,"user_id":48,"body":"class Kata {\n    static Character[] more_zeros(String strIn) {\n        List<Character> output = [];\n        Set<String> seen = [];\n        for(c in strIn)\n            if(!(c in seen))\n            {\n                seen.add(c);\n                String bin = Integer.toBinaryString((int)c);\n                if(bin.count('0') > bin.count('1'))\n                    output += c;\n            }\n        return output;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93653,"user_id":575,"body":"class Kata {\n    static Character[] more_zeros(String input) {\n        input.split('').toUnique().findAll { c ->\n            def b = Integer.toBinaryString((int) c)\n            b.count('0') > b.size().intdiv(2)\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5d50e3914861a500121e1958":[{"id":93654,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    List<String> alphabet = [\"z\"] + ('a'..'y')\n    int result = letters.collect { alphabet.indexOf(it) }.sum() ?: 0\n    return alphabet[result % 26]\n  }\n}","lang_id":22,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93655,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n      (char)((letters.collect { (it.charAt(0) as int) - 96 }.sum()?.mod(26) ?: 26) + 96)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93656,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n String abc = 'abcdefghijklmnopqrstuvwxyz'\n        if (letters.isEmpty()) {\n            return 'z'\n        }\n        int sum = 0\n        letters.each {sum += (1 + abc.indexOf(it).toInteger())}\n        while (sum > abc.size()){\n            sum -= abc.size()\n        }\n        abc.charAt(sum - 1)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93657,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    List<String> alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    int sum = 26\n    \n    if(letters.size() != 0){\n      sum = 0\n      letters.each{ currLetter ->\n        sum = sum + (alphabet.indexOf(currLetter.toLowerCase()) + 1)\n      }\n    }\n    \n    return alphabet.get((sum - 1) % 26)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93658,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> t) {\n    if(t==[]) return 'z'\n    def r = (t.sum{(it as char) - 96} % 26) \n    return r == 0? 'z' : (r+96) as char\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93659,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    List alpha = ['z'] + ('a'..'y')\n    int letterConvert = letters.collect {\n            alpha.indexOf(it)\n        }.sum()\n        ?: 0\n        \n    alpha[letterConvert % 26]\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93660,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    def count = 0\n    if (letters.isEmpty()) {\n      return 'z'\n    }\n    letters.each { letter ->\n      count += ((int)letter - 96)      \n    }\n    if(count % 26 == 0) {\n      return 'z'\n    } else {\n      return (char)((count % 26) + 96)\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93661,"user_id":168,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    (letters.sum(25) { (it as char) - 96 } % 26 + 97) as char\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93662,"user_id":50,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    int o=0\n    letters.each{c -> o+=((int) c) - 96}\n    o=(o%26)+96\n    return o==96 ? 'z' : Character.toString ((char) o)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93663,"user_id":null,"body":"class Kata {\n  static String add_letters(List<String> letters) {\n    def alpha = 'abcdefghijklmnopqrstuvwxyz'\n    if (letters.size() == 0) {\n      return 'z';\n    }\n    def sum = 0;\n    letters.each { sum += alpha.indexOf(it) + 1 }\n    return alpha.charAt((sum - 1) % alpha.size());\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5da1df6d8b0f6c0026e6d58d":[{"id":93664,"user_id":53,"body":"class Section {\n    public static int c(long k) {\n        def sq = Math.floor(Math.sqrt(k)).toLong();\n        if (sq * sq != k) return 0;\n        def i = 2;\n        def num = k * sq;\n        def ans = 1;\n        while (num > 1) {\n            def cnt = 0;\n            while (num % i == 0) {\n                num = num.div(i).toLong();\n                cnt++;\n            }\n            ans *= (cnt + 1);\n            i++;\n        }\n        return ans;\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93665,"user_id":492,"body":"class Section {\n\n    private static int divNb(long n) {\n        int i = 2; int p = 1\n        while (n > 1) {\n            int kt = 0\n            while (n % i == 0) {\n                n = n \/ i\n                kt += 1\n            }\n            if (kt != 0)\n                p *= (kt + 1)\n            i += 1\n        }\n        return p\n    }\n    public static int c(long k) {\n        long r = (long)(Math.sqrt(k))\n        if (r * r == k)\n            return divNb(k * r)\n        return 0\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5dad6e5264e25a001918a1fc":[{"id":93666,"user_id":null,"body":"class Decode {\n  static String decode(String r) {\n    def (n,s) = (r =~ \/(\\d+)([a-z]+)\/)[0][1..2]\n    def num = n as int\n    if(num % 2 == 0 || num % 13 == 0) return \"Impossible to decode\"\n    def dictionary = (0..25).collectEntries { [((((it*num)%26)+97) as char),(it+97) as char]}\n    def sb = new StringBuilder()\n    for(char c : s.toCharArray()) {\n      sb << dictionary[c]\n    }\n    return sb.toString()\n  }}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93667,"user_id":null,"body":"class Decode {\n    public static String decode(String r) {\n\n        String res = \"\";\n        int num = Integer.parseInt(r.replaceAll(\"[^0-9+]\", \"\"));\n        if (num % 2 == 0 || num % 13 == 0) return \"Impossible to decode\";\n        r = r.replaceAll(\"[0-9+]\", \"\");\n        \n        for (int i = 0; i <r.length() ; i++) {\n            for (int j = 0; j <= 25; j++){\n                if (j * num % 26 == (int)r.charAt(i)-(int)'a'){\n                    res += (char)(j + (int)'a');\n                    break;\n                }\n            }\n        }\n        return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93668,"user_id":null,"body":"class Decode {\n  static String decode(String r) {\n    def (n,s) = (r =~ \/(\\d+)([a-z]+)\/)[0][1..2]\n    def num = n as int\n      \n    if(!(num%13 && num%2)) {\n      return \"Impossible to decode\"\n    }\n    \n    def dictionary = (0..25).collectEntries {\n      [((((it*num)%26)+97) as char),(it+97) as char]\n    }\n    \n    def sb = new StringBuilder()\n    for(char c : s.toCharArray()) {\n      sb << dictionary[c]\n    }\n    \n    return sb.toString()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93669,"user_id":null,"body":"class Decode {\n    public static String decode(String r) {\n       def reg = (r=~ \/\\d+|[a-z]+\/).findAll()\n       def a = (1..26).collect {((it*(reg[0] as int)) % 26)}\n       if(a.unique().size()!=26) return \"Impossible to decode\"\n       return reg[1].collect{ ('a'..'z')[(a.indexOf( (int)(it) - 97 ) + 1) % 26 ] }.join()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93670,"user_id":null,"body":"class Decode {\n    public static String decode(String r) {\n      \/\/Separating encryption key from string\n        String str = r.split(\/\\d\/).last()\n        int key = r.split(\/[a-z]\/).first().toInteger()\n        def result = ''\n      \/\/separating cases based on key value\n        if (key%2 == 1 && key%13 >=1){\n          def char_map = [:]\n          for (int i = 0; i < 26; i++){char_map.put((i*key%26+97),(i+97))}\n          println(char_map)\n          str.each{it -> result = result + (char)(char_map.get((int)it))}\n        }else{result = \"Impossible to decode\"}\n        return(result)\n      }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93671,"user_id":168,"body":"class Decode {\n    public static String decode(String r) {\n        def m = r =~ \/(\\d+)(.*)\/\n        def n = m[0][1].toInteger() % 26\n        for (int i = 1; i < 26; i++) {\n          if (i * n % 26 == 1) {\n            def res = \"\"\n            for (char ch in m[0][2]) {\n              res += (char)((ch - 97) * i % 26 + 97)\n            }\n            return res\n          }\n        }\n        \"Impossible to decode\"\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93672,"user_id":492,"body":"import java.util.regex.Matcher\nimport java.util.regex.Pattern\n\nclass Decode {\n    public static String decode(String r) {\n        def dict = [3:9, 9:3, 21:5, 5:21, 7:15, 15:7, 11:19, 19:11, 17:23, 23:17, 25:25, 1:1]\n        Pattern p = Pattern.compile(\"([0-9]+)([a-z]+)\")\n        int num = 0\n        String s = \"\"\n        Matcher m = p.matcher(r)\n        if (m.find()) {\n            num = Integer.parseInt(m.group(1))  % 26\n            s = m.group(2)\n        }\n        int n\n        if(dict.containsKey(num)) {\n            n = dict[num]\n        } else\n            return \"Impossible to decode\"\n        String alpha = \"abcdefghijklmnopqrstuvwxyz\"\n        String res = \"\"\n        for (int i = 0; i < s.length(); i++) {\n            int u = alpha.indexOf((int)s.charAt(i))\n            int j = (u * n) % 26\n            res += alpha.charAt(j)\n        }\n        return res\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5e7e4b7cd889f7001728fd4a":[{"id":93673,"user_id":575,"body":"import groovy.xml.MarkupBuilder\n\nclass Kata {\n    static String toTable(List data, Boolean header = false, Boolean index = false) {\n        StringWriter sw = new StringWriter()\n        MarkupBuilder html = new MarkupBuilder(new IndentPrinter(new PrintWriter(sw), \"\", false))\n        html.table {\n            if (header) {\n                thead {\n                    tr {\n                        if (index) { th(\"\") }\n                        data[0].each { cell -> th(cell == null ? \"\" : cell) }\n                    }\n                }\n                data = data.drop(1)\n            }\n            tbody {\n                data.eachWithIndex { row, ind ->\n                    tr {\n                        if (index) { td(ind+1) }\n                        row.each { cell -> td(cell == null ? \"\" : cell) }\n                    }\n                }\n            }\n        }\n        return sw.toString()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93674,"user_id":null,"body":"class Kata {\n  static String toTable(List data, Boolean header = false, Boolean index = false) {\n    def count = 1\n    def dIndex = 0\n    def head = header ? \"<thead><tr>${index?'<th><\/th>':''}\" + \n      \"${data[dIndex++].collect{\"<th>${nullSafe(it)}<\/th>\"}.join('')}<\/tr><\/thead>\" : ''\n    def rows = data[dIndex..-1].collect{ row ->\n      \"<tr>${index?\"<td>${count++}<\/td>\":''}${row.collect{\"<td>${nullSafe(it)}<\/td>\"}.join('')}<\/tr>\"\n    }.join('')\n    \n    \"<table>$head<tbody>$rows<\/tbody><\/table>\".replaceAll('<tr><\/tr>','<tr \/>')\n  }\n  \n  static String nullSafe(s) {\n    if(s == null) {\n      ''\n    } else {\n      s.toString()\n    }\n  }\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93675,"user_id":575,"body":"import groovy.xml.MarkupBuilder\n\nclass Kata {\n    static String toTable(List data, Boolean header = false, Boolean index = false) {\n        StringWriter sw = new StringWriter()\n        MarkupBuilder html = new MarkupBuilder(new IndentPrinter(new PrintWriter(sw), \"\", false))\n        html.table {\n            if (header) {\n                thead {\n                    tr {\n                        if (index) { th(\"\") }\n                        data[0].each { cell -> th(cell != null ? cell.toString() : \"\") }\n                    }\n                }\n                data = data.drop(1)\n            }\n            tbody {\n                data.eachWithIndex { row, ind ->\n                    tr {\n                        if (index) { td(ind+1) }\n                        row.each { cell -> td(cell != null ? cell.toString() : \"\") }\n                    }\n                }\n            }\n        }\n        return sw.toString()\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5ef9ca8b76be6d001d5e1c3e":[{"id":93676,"user_id":null,"body":"class CodeWars {\n  \n  static def correctAndReduceBits = { s -> s.count(\"0\") >= 2 ? \"0\" : \"1\"}\n  static def reduceTo8Bits(String s) { \n    def matcher = s =~ \/\\d{3}\/\n    (0..matcher.size()-1).collect { matcher[it as int] }.collect(correctAndReduceBits).join(\"\")\n  }\n  \n  static def encode(text) {\n    text.bytes\n        .collect{ String.format(\"%8s\", Integer.toBinaryString(it & 0xFF)).replace(' ', '0').split(\"\") }\n        .flatten()\n        .collect { it * 3 }\n        .join()\n  }\n  \n  static def decode(bits) {\n    def bigChunks = bits =~ \/\\d{24}\/\n    (0..bigChunks.size()-1)\n        .collect { reduceTo8Bits(bigChunks[it as int]) }\n        .collect { Integer.parseUnsignedInt(it, 2) }\n        .collect { new String( it as byte[]) }\n        .join(\"\")\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93677,"user_id":null,"body":"class CodeWars {\n  static def encode(text) {\n    text.collect {\n      String bV = Integer.toBinaryString((it as char).minus(0))\n      (\"00000000\".take(8-bV.size()) + bV).collect {\n        it * 3\n      }.join()\n    }.join()\n  }\n  static def decode(bits) {\n    int charCant = bits.size() \/ 24\n    (0..<charCant).collect {\n      String b = bits[(24*it)..(24*(it+1)-1)]\n      Integer.parseInt((0..7).collect {\n        String t = b[(3*it)..(3*(it+1)-1)]\n        t.findAll('0').size() >= 2 ? '0' : '1' \n      }.join(), 2) as char\n    }.join()\n  }\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93678,"user_id":513,"body":"class CodeWars {\n  static def encode(text) {\n    String bits = \"\";\n    for (i in text) {\n      bits += Integer.toBinaryString((int)i).padLeft(8, \"0\");\n    }\n    return bits.replaceAll(\"0\", \"000\").replaceAll(\"1\", \"111\");\n  }\n  \n  static def decode(bits) {\n    String buffer = \"\", correctedBits = \"\", text = \"\";\n    for (i in bits) {\n      buffer += i;\n      if (buffer.length()%3==0) {\n        int check = 0;\n        for (x in buffer) {\n          if (x == \"1\") check++;\n          else check--; \n        }\n        if (check > 0) correctedBits += \"1\";\n        else correctedBits += \"0\";\n        buffer = \"\";\n      }\n    }\n    buffer = \"\";\n    for (i in correctedBits) {\n      buffer += i;\n      if (buffer.length() == 8) {\n        text += String.valueOf((char) Integer.parseInt(buffer, 2));\n        buffer = \"\";\n      }\n    }\n    return text;\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5efae11e2d12df00331f91a6":[{"id":93679,"user_id":null,"body":"class CodeWars {\n  static def crack(hash) {\n    (0..99999).collect{it.toString().padLeft(5, '0')}.find{it.md5() == hash}\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93680,"user_id":1492,"body":"class CodeWars {\n  static def crack(hash) {\n    \n    for (int i = 0; i <= 99999; i++){\n      String guess = i.toString().padLeft(5, \"0\"); \n      if (hash == guess.digest(\"MD5\")){\n        return guess;\n      }\n    }\n    return \"\"\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93681,"user_id":null,"body":"class CodeWars {\n    static String crack(hash) {\n        return (0..99999).findResult {\n            String valI = it.toString().padLeft(5, \"0\")\n            if (valI.md5() == hash) valI else null\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93682,"user_id":null,"body":"import javax.xml.bind.DatatypeConverter\nimport java.security.MessageDigest\n\nclass CodeWars {\n    static String crack(hash) {\n        return (0..99999).findResult {\n            String valI = it.toString().padLeft(5, \"0\")\n            String hashI = DatatypeConverter.printHexBinary(MessageDigest.getInstance(\"MD5\").digest(valI.bytes)).toLowerCase()\n            if (hashI == hash) valI else null\n        }\n    }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93683,"user_id":null,"body":"class CodeWars {\n  static def crack(hash) {\n    \/\/ C0d3 g03s h3r3\n    return (0..99999)*.toString()*.padLeft(5, \"0\").find { it.md5() == hash }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93684,"user_id":null,"body":"import java.security.MessageDigest;\n\nclass CodeWars {\n  static def crack(hash) {\n    def z = \"\"\n    for (i in 0..99999) {\n        z = \"0\" * (5 - i.toString().length()) + i.toString()\n        if (MessageDigest.getInstance(\"MD5\").digest(z.bytes).encodeHex().toString() == hash) {\n            break;\n        }\n    }\n    return z\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93685,"user_id":null,"body":"class CodeWars {\n  static def crack(hash) {\n    for(int a=0;a<10;a++) {\n      for(int b=0;b<10;b++) {\n        for(int c=0;c<10;c++) {\n          for(int d=0;d<10;d++) {\n            for(int e=0;e<10;e++) {\n              if(\/$a$b$c$d$e\/.md5() == hash) {\n                return \"$a$b$c$d$e\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93686,"user_id":null,"body":"import java.security.MessageDigest\n\nclass CodeWars {\n  static def crack(hash) {\n    (0..99999)\n      .collect { it.toString().padLeft(5,'0')}\n      .find { md5(it) == hash }\n  }\n          \n  static md5(String s){\n    MessageDigest.getInstance(\"MD5\").digest(s.bytes).encodeHex().toString()\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93687,"user_id":null,"body":"class CodeWars {\n  static hashAndPin = [:]\n  static def crack(hash) {\n    return (hashAndPin) ? hashAndPin.get(hash) : generateHashAndPinAndReturnPin(hash)\n  }\n\n  static def generateHashAndPinAndReturnPin(hash){\n    (0..99999).each{ \n      def pin = \"${it}\".padLeft(5,\"0\")\n      hashAndPin.put(pin.md5(),pin)\n    }\n    hashAndPin.get(hash)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93688,"user_id":null,"body":"import java.security.MessageDigest\n\nclass CodeWars {\n  static hashAndPin = [:]\n  static def crack(hash) {\n    return (hashAndPin) ? hashAndPin.get(hash) : generateHashAndPinAndReturnPin(hash)\n  }\n\n  static def generateHashAndPinAndReturnPin(hash){\n    (0..99999).each{ \n      def pin = \"${it}\".padLeft(5,\"0\")\n      hashAndPin.put(pin.md5(),pin)\n    }\n    hashAndPin.get(hash)\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5f0ed36164f2bc00283aed07":[{"id":93689,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    \/\/ code here\n    \n    Math.abs(n * 2 - address + 1)\n    \n     \n    \n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93690,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(long address, long n) {\n   \n    n * 2 - address + 1\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93691,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    n * 2 - address + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93692,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    if(address % 2) {\n        n * 2 - (address - 1)\n    } else {\n        ((n * 2) - address) + 1\n    }\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93693,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    long opposite_max = n*2\n    long opposite_address = opposite_max - (address-1)\n    return opposite_address\n  } \n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93694,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    \n    n * 2 + 1 - address\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93695,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    2 * n - address + 1\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93696,"user_id":50,"body":"class CodeWars {\n  static def over_the_road(add, n) {\n     return 1-add+2*n\n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93697,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    ((2 * n) - (address - 1))\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93698,"user_id":null,"body":"class CodeWars {\n  static def over_the_road(address, n) {\n    return 2*n+1-address;\n    \n  }\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59568be9cc15b57637000054":[{"id":93699,"user_id":null,"body":"import groovy.transform.Memoized\n\nclass Immortal {\n\t\/**\n\t * set true to enable debug\n\t *\/\n\tstatic boolean debug = true\n\n\tdef static elder_age(long m, long n, long k, long t) {\n\t  (biggestRectangles(m, n, k, t, 0 as BigInteger) % t) as long\n\t}\n  \n  static BigInteger biggestRectangles(\n            long m, long n, long loss, long t, BigInteger min\n  ) {\n    BigInteger age = 0\n    long columns = [m, n].min()\n    long rows = [m, n].max()\n\n    if (columns == 0) {\n      return 0\n    }\n    \n    if (rows <= 4 && columns <= 4) {\n      for (long row = 0; row < rows; row++) {\n        for (long col = 0; col < columns; col++) {\n          BigInteger cellValue = [ (col^row + min) - loss, 0].max()\n          age += cellValue\n        }\n      }\n      return age\n    }\n\n    long squareSide = (long) Math.pow(2, (int) Math.ceil((Math.log(columns as double) \/ Math.log(2)) as double))\n    long squareCount = rows.intdiv(squareSide)\n\n    if (rows < squareSide) {\n      long half = squareSide.intdiv((2))\n      age += ( half * nSum( (half - 1) + min, min, loss as BigInteger, t) )\n      age += (biggestRectangles(columns - half, half, loss, t, (min + half) as BigInteger ))\n      age += (biggestRectangles(rows - half, half, loss, t, (min + half) as BigInteger ))\n      age += (biggestRectangles(rows - half, columns - half, loss, t, min))\n\n      return age\n    }\n    \n    BigInteger vectorSum = nSum(\n        (((squareCount * squareSide) - 1) + min),\n        min,\n        loss as BigInteger,\n        t\n    )\n    age += (columns * vectorSum)\n    age = age + (biggestRectangles(\n                  rows - (squareCount * squareSide),\n                  columns,\n                  loss,\n                  t,\n                  ((squareCount * squareSide) + min) as BigInteger\n                ))\n    return age\n  }\n  \n  @Memoized\n  static BigInteger nSum(BigInteger x, BigInteger loss, long time) {\n    BigInteger limit = [x - loss, 0].max() as BigInteger\n    ((limit\/2) * (limit + 1)) as BigInteger\n  }\n  \n  @Memoized\n  static BigInteger nSum(BigInteger x, BigInteger y, BigInteger loss, long time) {\n    BigInteger sumX = nSum(x, loss, time)\n    BigInteger sumY = nSum(y - 1, loss, time)\n    \n    sumX - sumY\n  }\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93700,"user_id":53,"body":"class Immortal {\n\n\tstatic boolean debug = false;\n\n  def static clog2 (BigInteger a) {\n\t  def b = BigInteger.ONE;\n    while (b.compareTo(a) == -1)\n      b = b.multiply(BigInteger.TWO);\n    return b;\n\t}\n  \n  def static rsum (BigInteger a, BigInteger b) {\n\t  return a.add(b).multiply(b.subtract(a).add(BigInteger.ONE)).divide(BigInteger.TWO);\n\t}\n  \n\tdef static elder_age(long m, long n, long k, long p) {\n\t  return helper(BigInteger.valueOf(m), BigInteger.valueOf(n), BigInteger.valueOf(k), BigInteger.valueOf(p)).toLong();\n\t}\n  \n  def static helper(BigInteger m, BigInteger n, BigInteger k, BigInteger p) {\n\t  if (m.compareTo(BigInteger.ZERO) == 0 || n.compareTo(BigInteger.ZERO) == 0) \n      return BigInteger.ZERO;\n    if (m.compareTo(n) == 1)\n      return helper(n, m, k, p);\n    def x = clog2(m);\n    def y = clog2(n);\n    if (k.compareTo(y) == 1)\n      return BigInteger.ZERO;\n    if (x.compareTo(y) == 0)\n      return (m.add(n).subtract(y).multiply(rsum(BigInteger.ONE,y.subtract(k).subtract(BigInteger.ONE))).add(helper(y.subtract(n),x.subtract(m),k,p))).mod(p);\n    x=y.divide(BigInteger.TWO);\n    def phi = m.multiply(rsum(BigInteger.ONE,y.subtract(k).subtract(BigInteger.ONE))).subtract(y.subtract(n).multiply(rsum(BigInteger.ZERO.max(x.subtract(k)),y.subtract(k).subtract(BigInteger.ONE))));\n    if (k.compareTo(x) != 1)\n      phi = phi.add(x.subtract(k).multiply(x.subtract(m)).multiply(y.subtract(n)).add(helper(x.subtract(m),y.subtract(n),BigInteger.ZERO,p)));\n    else\n      phi = phi.add(helper(x.subtract(m),y.subtract(n),k.subtract(x),p));\n    return phi.mod(p);\n\t}\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93701,"user_id":null,"body":"class Immortal {\n\t\/**\n\t * set true to enable debug\n\t *\/\n\tstatic boolean debug = false\n\n\tdef static elder_age(long m, long n, long l, long t) {\n\t\tlong small = Math.min(m, n);\n\t\tlong big = Math.max(m, n);\n\t\tlong power = Math.pow(2, Math.floor(Math.log(big) \/ Math.log(2)));\n\t\tlong rows = Math.min(power, small);\n\t\tlong first = Math.max(0, -l);\n\t\tlong terms = Math.max(0, power - l - 1);\n\t\tlong x = (terms - first + 1);\n\t\tlong y = first + terms;\n\n\t\tif (x % 2 > 0) y = Math.floor(y \/ 2);\n\t\telse if (y % 2 > 0) x = Math.floor(x \/ 2);\n\n\t\tlong series = y <= 0 ? 0 : ((y % t) * (x % t)) % t;\n\n\t\tlong sum = ((series % t) * (rows % t)) % t;\n\t\tsum += big > power ? elder_age(big - power, rows, l - power, t) : 0;\n\t\tsum += small > rows ? elder_age(power, small - rows, l - rows, t) : 0;\n\t\tsum += small > rows && big > power ? elder_age(big - power, small - rows, l, t) : 0;\n\n\t\treturn sum % t;\n\t}\n\n}","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93702,"user_id":490,"body":"class Immortal {\n\tprivate static long p = (int) 1e9\n\n\t\/**\n\t * set true to enable debug\n\t *\/\n\tstatic boolean debug = false\n\n\tprivate static int log2(long x) {\n\t\tint ans = 0\n\t\twhile (true) {\n\t\t\tx = x >> 1\n\t\t\tif (x == 0) break\n\t\t\tans++\n\t\t}\n\t\treturn ans\n\t}\n\n\tprivate static long mul(long x, long y, long z) {\n\t\tif (z == 2) {\n\t\t\tif ((x & 1) != 0) y >>= 1\n\t\t\telse if ((y & 1) != 0) x >>= 1\n\t\t\telse throw new RuntimeException(\"shit\")\n\t\t}\n\t\treturn x % p * (y % p) % p\n\t}\n\n\tprivate static long sumTimes(long first, long n, long k, long t) {\n\t\tfirst -= k\n\t\tif (first < 1) {\n\t\t\tn -= 1 - first\n\t\t\tfirst = 1\n\t\t}\n\t\tif (n <= 0) return 0\n\t\treturn mul(mul(first + first + n - 1, n, 2L), t, 1)\n\t}\n\n\tdef static elder_age(long n, long m, long k, long newp) {\n\t\tif (n == 0 || m == 0) return 0\n\t\tif (k < 0) k = 0\n\t\tif (n < m) {\n\t\t\tlong tmp = n\n\t\t\tn = m\n\t\t\tm = tmp\n\t\t}\n\t\tp = newp\n\t\tif (n == m && (n & -n) == n) return sumTimes(1, n - 1, k, m)\n\t\tint N = log2(n), M = log2(m)\n\t\tlong centerWidth = 1L << N, centerHeight = 1L << M\n\t\tif (N == M) {\n\t\t\tlong rightWidth = n - centerWidth, bottomHeight = m - centerHeight\n\t\t\tlong bottomSum = sumTimes(centerHeight, centerWidth, k, bottomHeight)\n\t\t\treturn ((sumTimes(centerWidth, centerHeight, k, rightWidth) + bottomSum) % p + (elder_age(rightWidth, bottomHeight, k, p) + elder_age(centerWidth, centerHeight, k, p)) % p) % p\n\t\t} else {\n\t\t\tlong leftWidth = 1L << N\n\t\t\tlong leftSum = sumTimes(0, leftWidth, k, m)\n\t\t\tlong rightSum = elder_age(n - leftWidth, m, k - leftWidth, p)\n\t\t\tif (leftWidth > k) {\n\t\t\t\trightSum += mul(mul(leftWidth - k, m, 1), n - leftWidth, 1)\n\t\t\t\trightSum %= p\n\t\t\t}\n\t\t\treturn (leftSum + rightSum) % p\n\t\t}\n\t}\n}\n","lang_id":22,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"5993c1d917bc97d05d000068":[{"id":93703,"user_id":490,"body":"class Solution {\n\tprivate String generateRegex(int n) {\n\t\tif (n == 1) {\n\t\t\treturn \"1[01]*\"\n\t\t}\n\t\tHashSet<Integer> states = new HashSet<Integer>()\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tstates.add(new Integer(i))\n\t\t}\n\t\tDFA dfa = new DFA(states, 0, [0].toArray() as Integer[])\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tdfa.addTransition(i, i * 2 % n, \"0\")\n\t\t\tdfa.addTransition(i, (i * 2 + 1) % n, \"1\")\n\t\t}\n\t\treturn dfa.reduce()\n\t}\n\n\tString regex_divisible_by(int n) {\n\t\tString start = \"^(0|\"\n\t\tString end = \")\\$\"\n\t\twhile (n % 2 == 0) {\n\t\t\tend = \"0\" + end\n\t\t\tn \/= 2\n\t\t}\n\t\treturn String.format(\"%s%s%s\", start, generateRegex(n), end)\n\t}\n}\n\nclass Transition implements Comparable<Transition> {\n\tpublic Integer from\n\tpublic Integer to\n\n\tTransition(Integer from, Integer to) {\n\t\tthis.from = from\n\t\tthis.to = to\n\t}\n\n\tboolean equals(Object other) {\n\t\tif (other instanceof Transition) {\n\t\t\tTransition otherTrans = (Transition) other\n\t\t\treturn this.from == otherTrans.from && this.to == otherTrans.to\n\t\t}\n\t\treturn false\n\t}\n\n\tint compareTo(Transition other) {\n\t\tint compare = this.from <=> other.from\n\t\tif (compare == 0) {\n\t\t\treturn this.to <=> other.to\n\t\t}\n\t\treturn compare\n\t}\n\n\tString toString() {\n\t\treturn String.format(\"(from: %d, to: %d)\", this.from, this.to)\n\t}\n}\n\nclass DFA {\n\tprivate final Integer START_STATE = -1\n\tprivate final Integer END_STATE = -2\n\n\tprivate HashSet<Integer> states\n\tprivate HashMap<Transition, String> transitions\n\n\tDFA(HashSet<Integer> states, Integer startState, Integer[] acceptedStates) {\n\t\tthis.states = states\n\t\tthis.transitions = new HashMap<Transition, String>()\n\t\tthis.addTransition(START_STATE, startState, \"\")\n\t\tfor (Integer acceptedState : acceptedStates) {\n\t\t\tthis.addTransition(acceptedState, END_STATE, \"\")\n\t\t}\n\t}\n\n\tvoid addTransition(Integer from, Integer to, String transition) {\n\t\tthis.transitions.put(new Transition(from, to), transition)\n\t}\n\n\tInteger selectState() {\n\t\tHashMap<Integer, Integer> fromCount = new HashMap<Integer, Integer>()\n\t\tHashMap<Integer, Integer> toCount = new HashMap<Integer, Integer>()\n\t\tfor (Transition transition : this.transitions.keySet()) {\n\t\t\tif (transition.from.intValue() != transition.to.intValue()) {\n\t\t\t\tint currentCount = fromCount.getOrDefault(transition.from, new Integer(0)).intValue()\n\t\t\t\tfromCount.put(transition.from, new Integer(currentCount + 1))\n\t\t\t\tcurrentCount = toCount.getOrDefault(transition.to, new Integer(0)).intValue()\n\t\t\t\ttoCount.put(transition.to, new Integer(currentCount + 1))\n\t\t\t}\n\t\t}\n\t\tInteger minState = null\n\t\tint minBranches = 999\n\t\tfor (Integer state : this.states) {\n\t\t\tint from = fromCount.getOrDefault(state, new Integer(0)).intValue()\n\t\t\tint to = toCount.getOrDefault(state, new Integer(0)).intValue()\n\t\t\tint branches = from * to\n\t\t\tif (branches < minBranches) {\n\t\t\t\tminState = state\n\t\t\t\tminBranches = branches\n\t\t\t}\n\t\t}\n\t\treturn minState\n\t}\n\n\tvoid removeState(Integer state) {\n\t\tHashMap<Integer, String> enteringTrans = new HashMap<Integer, String>()\n\t\tHashMap<Integer, String> exitingTrans = new HashMap<Integer, String>()\n\t\tString loop = \"\"\n\t\tboolean hasLoop = false\n\t\tHashSet<Transition> keys = new HashSet<Transition>(this.transitions.keySet())\n\t\tfor (Transition trans : keys) {\n\t\t\tif (trans.from == trans.to && trans.from == state) {\n\t\t\t\tloop = this.transitions.get(trans)\n\t\t\t\thasLoop = true\n\t\t\t} else if (trans.from == state) {\n\t\t\t\texitingTrans.put(trans.to, this.transitions.get(trans))\n\t\t\t} else if (trans.to == state) {\n\t\t\t\tenteringTrans.put(trans.from, this.transitions.get(trans))\n\t\t\t}\n\t\t\tif (trans.from == state || trans.to == state) {\n\t\t\t\tthis.transitions.remove(trans)\n\t\t\t}\n\t\t}\n\t\tif (hasLoop) {\n\t\t\tloop = String.format(\"(%s)*\", loop)\n\t\t}\n\t\tfor (Integer enterState : enteringTrans.keySet()) {\n\t\t\tString enteringString = enteringTrans.get(enterState)\n\t\t\tfor (Integer exitState : exitingTrans.keySet()) {\n\t\t\t\tString exitingString = exitingTrans.get(exitState)\n\n\t\t\t\tString existingTrans = null\n\t\t\t\tboolean hasExistingTrans = false\n\t\t\t\tkeys = new HashSet<Transition>(this.transitions.keySet())\n\t\t\t\tfor (Transition trans : keys) {\n\t\t\t\t\tif (trans.from == enterState && trans.to == exitState) {\n\t\t\t\t\t\texistingTrans = this.transitions.get(trans)\n\t\t\t\t\t\thasExistingTrans = true\n\t\t\t\t\t\tthis.transitions.remove(trans)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tString newTrans = String.format(\"%s%s%s\", enteringString, loop, exitingString)\n\t\t\t\tif (hasExistingTrans) {\n\t\t\t\t\tnewTrans = String.format(\"(%s|%s)\", existingTrans, newTrans)\n\t\t\t\t}\n\t\t\t\tthis.addTransition(enterState, exitState, newTrans)\n\t\t\t}\n\t\t}\n\t\tthis.states.remove(state)\n\t}\n\n\tString reduce() {\n\t\twhile (this.states.size() > 0) {\n\t\t\tInteger state = this.selectState()\n\t\t\tthis.removeState(state)\n\t\t}\n\t\tString result = \"\"\n\t\tfor (Transition trans : this.transitions.keySet()) {\n\t\t\tresult = this.transitions.get(trans)\n\t\t}\n\t\treturn result\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"},{"id":93704,"user_id":53,"body":"class Solution \n{\n  \tString regex_divisible_by(int n)\n    {\n        if (n == 1) return \"^[01]*\\$\";\n        String [][] graphs = new String [n][];\n        for (int i = 0; i < n; i++) \n        {\n            graphs[i] = new int [n];\n            Arrays.fill(graphs[i], \"-1\");\n            graphs[i][(2 * i) % n] = \"0\";\n            graphs[i][(2 * i + 1) % n] = \"1\";\n        }\n        for (int k = n-1; k >= 0; k--) \n        {\n            String loop = graphs[k][k] == \"-1\" ? \"\" : (graphs[k][k] + \"*\");\n            for (int i = 0; i < k; i++) \n            {\n                if (graphs[i][k] == \"-1\") continue;\n                for (int j = 0; j < k; j++) \n                {\n                    if (graphs[k][j] == \"-1\") continue;\n                    String s = graphs[i][j] == \"-1\" ? \"\" : (graphs[i][j] + \"|\");\n                    graphs[i][j] = \"(?:\" + s + graphs[i][k] + loop + graphs[k][j] + \")\";\n                }\n            }\n        }\n        return \"^\" + graphs[0][0] + \"*\\$\";\n  \t}\n}\n","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}],"59f9cad032b8b91e12000035":[{"id":93705,"user_id":503,"body":"class TBF\n{\n\tstatic kcuf(Code,Origin = false,Indent = '\\t')\n\t{\n\t\tdef\n\t\tCodeAt = 0,\n\t\tOutput = '',\n\t\tPreserve = 9,\n\t\tPreserveMax = -1,\n\t\tStack = [0] * Preserve,\n\t\tStackAt = 0,\n\t\tVarAt = Preserve--,\n\t\tVar = [:],\n\t\tAST = [],\n\t\tASTStack = [],\n\t\tCurrentAST = AST,\n\t\tProc = [:],\n\t\tProcSig,ProcVar,ProcVarType,\n\n\t\tLine = 0,LastCol,\n\t\tCaseSensetive = {Q -> Q.toUpperCase()},\n\t\tClamp = {Q -> (Q %= 256) < 0 ? 256 + Q : Q},\n\n\t\tIsNumber = {Q -> Q instanceof Number},\n\t\tIsArray = {Q -> Q instanceof List},\n\t\tHas = {S,Q -> null != Q[S]},\n\n\t\tFormat = {Q,A,F = -1 -> Q.replaceAll ':-:',{_ -> A[++F]}},\n\t\tBad = {Q,J = false -> {...A ->\n\t\t\tthrow new Error(Format(Q,A) +\n\t\t\t\t\"\n\\tat ${Line}:${J ? 1 + LastCol : 1 + CodeAt} `${Code}`\")\n\t\t}},\n\t\t\/\/\tParse Error\n\t\tErrorNumberExpected = Bad('A number is expected but got :-:'),\n\t\tErrorNameExpected = Bad('A variable name \/ command is expected but got :-:'),\n\t\tErrorCommand = Bad('Unexpected command :-:',true),\n\t\tErrorCommandEnd = Bad('Expected end of line but got :-:'),\n\t\tErrorDefineInProc = Bad('Cannot define variables in procedures'),\n\t\tErrorVarUndefined = Bad('Undefined variable :-:',true),\n\t\tErrorVarRedeclare = Bad('Re-defined variable :-:',true),\n\t\tErrorVarButList = Bad('Expected a variable but :-: is a list',true),\n\t\tErrorListButVar = Bad('Expected a list but :-: is a variable',true),\n\t\tErrorVarTypeMismatch = Bad('Type mismatch\n' +\n\t\t\t'\\tin `:-:`\n' +\n\t\t\t'\\t:-: was used as a :-: at :-:::-: `:-:`\n' +\n\t\t\t'\\tas well being used as a :-:',true),\n\t\tErrorUnEOL = Bad('Unexpected end of line'),\n\t\tErrorUnclosed = Bad('Unclosed :-:, expected :-: but got :-:'),\n\t\tErrorBadEscape = Bad('Unexpected char escape \\\\:-:'),\n\t\tErrorStringExpect = Bad('A string is expected but got :-:'),\n\t\tErrorStringUnclose = Bad('String is not closed'),\n\t\tErrorProcNested = Bad('Procedures should not be nested',true),\n\t\tErrorProcUsed = Bad('Procedure re-defined :-:'),\n\t\tErrorDupParam = Bad('Duplicate parameter name :-:',true),\n\t\tErrorEndNothing = Bad('Nothing to end'),\n\t\tErrorEndUnclose = Bad('Unclosed block (ifeq \/ ifneq \/ ueq \/ proc)'),\n\t\t\/\/\tTransform Error\n\t\tErrorNoProc = Bad('Undefined procedure :-::-:'),\n\t\tErrorProcLength = Bad('Procedure :-: expects :-: argument(s) but got :-::-:'),\n\t\tErrorRecursive = Bad('Recursive call :-:'),\n\t\tErrorArgTypeMismatch = Bad('Type mismatch\n' +\n\t\t\t'\\ta :-: is expected for parameter :-: in `:-:`\n' +\n\t\t\t'\\tbut argument :-: is a :-:'),\n\n\t\tTaste = {Q = 0 -> CodeAt + Q < Code.size() ? Code[CodeAt + Q] : ''},\n\t\tTasteEOL = {-> Taste() ? Taste() : 'EOL'},\n\t\tEat = {-> ++CodeAt},\n\t\tSave = {-> LastCol = CodeAt},\n\t\tWalk = {Q -> for (;Taste().matches(Q);) Eat()},\n\t\tDiscard = {-> CodeAt = Code.size()},\n\t\tWhite = {->\n\t\t\tWalk(\/\\s\/)\n\t\t\tif ('\/' == Taste() && '\/' == Taste(1) ||\n\t\t\t\t'-' == Taste() && '-' == Taste(1) ||\n\t\t\t\t'#' == Taste()) Discard()\n\t\t},\n\t\tWord = {->\n\t\t\tdef R = CodeAt\n\t\t\tif (!Taste()) return ''\n\t\t\tSave()\n\t\t\tTaste() =~ '(?i)[^$_a-z]' && ErrorNameExpected(TasteEOL())\n\t\t\tEat()\n\t\t\tWalk(\/[$\\w]\/)\n\t\t\tR = CaseSensetive(Code[R..<CodeAt])\n\t\t\tWhite()\n\t\t\tR\n\t\t},\n\t\tMakeName = {H -> {->\n\t\t\tdef R,T\n\t\t\tR = Word()\n\t\t\tR || ErrorNameExpected(TasteEOL())\n\t\t\tif (ProcVar && ~(T = ProcVar.indexOf(R)))\n\t\t\t\tif (ProcVarType[T])\n\t\t\t\t\tH == ProcVarType[T][0] || ErrorVarTypeMismatch(\n\t\t\t\t\t\tProcSig,R,\n\t\t\t\t\t\tH ? 'list' : 'variable',\n\t\t\t\t\t\tProcVarType[T][1],\n\t\t\t\t\t\tProcVarType[T][2],\n\t\t\t\t\t\tProcVarType[T][3].trim(),\n\t\t\t\t\t\tH ? 'variable' : 'list')\n\t\t\t\telse ProcVarType[T] = [H,Line,1 + LastCol,Code]\n\t\t\telse\n\t\t\t{\n\t\t\t\tHas(R,Var) || ErrorVarUndefined(R)\n\t\t\t\tH == IsNumber(Var[R]) || (H ? ErrorVarButList : ErrorListButVar)(R)\n\t\t\t}\n\t\t\tR\n\t\t}},\n\t\tVarName = MakeName(true),\n\t\tListName = MakeName(false),\n\t\tRawNumber = {->\n\t\t\tdef R = CodeAt\n\t\t\t'-' == Taste() && Eat()\n\t\t\tWalk(\/\\d\/)\n\t\t\tR = Code[R..CodeAt - 1]\n\t\t\tR && '-' != R || ErrorNumberExpected(TasteEOL())\n\t\t\tWhite()\n\t\t\tR as int\n\t\t},\n\t\tNumber = {-> Clamp(RawNumber())},\n\t\tCharEscape = ['\\\\' : '\\\\','\"' : '\"',\"'\" : \"'\",n : '\n',r : '\\r',t : '\\t'],\n\t\tChar = {->\n\t\t\tdef R = Taste()\n\t\t\tEat()\n\t\t\tif ('\\\\' == R)\n\t\t\t{\n\t\t\t\tR = CharEscape[Taste()]\n\t\t\t\tR || ErrorBadEscape(TasteEOL())\n\t\t\t\tEat()\n\t\t\t}\n\t\t\tR\n\t\t},\n\t\tNumberOrChar = {R ->\n\t\t\tif (\"'\" == Taste())\n\t\t\t{\n\t\t\t\tEat()\n\t\t\t\tR = (int)Char()\n\t\t\t\t\"'\" == Taste() || ErrorUnclosed(\"'\",\"'\",TasteEOL())\n\t\t\t\tEat()\n\t\t\t\tWhite()\n\t\t\t\tR\n\t\t\t}\n\t\t\telse Number()\n\t\t},\n\t\tVarNameOrNumber = {-> Taste() =~ \/[-\\d']\/ ? NumberOrChar() : VarName()},\n\t\tString = {R ->\n\t\t\tR = ''\n\t\t\t'\"' == Taste() || ErrorStringExpect(TasteEOL())\n\t\t\tEat()\n\t\t\tfor (;Taste() && '\"' != Taste();) R += Char()\n\t\t\t'\"' == Taste() || ErrorStringUnclose()\n\t\t\tEat()\n\t\t\tWhite()\n\t\t\tR\n\t\t},\n\t\tVarNameOrString = {-> '\"' == Taste() ? [0,String()] : [1,VarName()]},\n\n\t\tMsgList = [{R ->\n\t\t\tR = []\n\t\t\tfor (;Taste();) R << VarNameOrString()\n\t\t\tR\n\t\t}],\n\n\t\tBegin = {-> ASTStack << CurrentAST.size},\n\t\tMachine =\n\t\t[\n\t\t\tVAR : {->\n\t\t\t\tdef V,N\n\t\t\t\tProcSig && ErrorDefineInProc()\n\t\t\t\tTaste() || ErrorUnEOL()\n\t\t\t\tfor (;V = Word();)\n\t\t\t\t{\n\t\t\t\t\tHas(V,Var) && ErrorVarRedeclare(V)\n\t\t\t\t\tif ('[' == Taste())\n\t\t\t\t\t{\n\t\t\t\t\t\tEat()\n\t\t\t\t\t\tWhite()\n\t\t\t\t\t\tN = RawNumber()\n\t\t\t\t\t\t']' == Taste() || ErrorUnclosed('[',']',TasteEOL())\n\t\t\t\t\t\tEat()\n\t\t\t\t\t\tWhite()\n\t\t\t\t\t\tVar[V] = [VarAt,N]\n\t\t\t\t\t\tVarAt += 4 + N\n\t\t\t\t\t}\n\t\t\t\t\telse Var[V] = VarAt++\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tSET : [VarName,VarNameOrNumber],\n\n\t\t\tINC : [VarName,VarNameOrNumber],\n\t\t\tDEC : [VarName,VarNameOrNumber],\n\t\t\tADD : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t\tSUB : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t\tMUL : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t\tDIVMOD : [VarNameOrNumber,VarNameOrNumber,VarName,VarName],\n\t\t\tDIV : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t\tMOD : [VarNameOrNumber,VarNameOrNumber,VarName],\n\n\t\t\tCMP : [VarNameOrNumber,VarNameOrNumber,VarName],\n\n\t\t\tA2B : [VarNameOrNumber,VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t\tB2A : [VarNameOrNumber,VarName,VarName,VarName],\n\n\t\t\tLSET : [ListName,VarNameOrNumber,VarNameOrNumber],\n\t\t\tLGET : [ListName,VarNameOrNumber,VarName],\n\n\t\t\tIFEQ : [VarName,VarNameOrNumber,Begin],\n\t\t\tIFNEQ : [VarName,VarNameOrNumber,Begin],\n\t\t\tWEQ : [VarName,VarNameOrNumber,Begin],\n\t\t\tWNEQ : [VarName,VarNameOrNumber,Begin],\n\t\t\tPROC : {->\n\t\t\t\tdef N,T\n\t\t\t\tProcSig && ErrorProcNested()\n\t\t\t\tN = Word()\n\t\t\t\tHas(N,Proc) && ErrorProcUsed(N)\n\t\t\t\tProc[N] = [CurrentAST = [],ProcVar = [],ProcVarType = [],ProcSig = Code]\n\t\t\t\tfor (;Taste();)\n\t\t\t\t{\n\t\t\t\t\tT = Word()\n\t\t\t\t\tProcVar.contains(T) && ErrorDupParam(T)\n\t\t\t\t\tProcVar << T\n\t\t\t\t\tProcVarType << 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tEND : [{->\n\t\t\t\tif (ASTStack.size)\n\t\t\t\t\tASTStack.removeLast()\n\t\t\t\telse if (ProcSig)\n\t\t\t\t{\n\t\t\t\t\tCurrentAST = AST\n\t\t\t\t\tProcSig = null\n\t\t\t\t}\n\t\t\t\telse ErrorEndNothing()\n\t\t\t}],\n\t\t\tCALL : [{->\n\t\t\t\tdef N,A\n\t\t\t\tN = Word()\n\t\t\t\tA = []\n\t\t\t\tfor (;Taste();) A << Word()\n\t\t\t\t[N,A]\n\t\t\t}],\n\n\t\t\tREAD : [VarName],\n\t\t\tMSG : MsgList,\n\t\t\tLN : MsgList,\n\t\t\tDISPLAY : [VarName],\n\n\t\t\tREM : Discard,\n\n\t\t\tDEBUG : [Discard],\n\t\t\tSTOP : [Discard]\n\t\t],\n\t\tEscapeMap =\n\t\t[\n\t\t\t'&' : '&amp;',\n\t\t\t'+' : '&plus;',\n\t\t\t'-' : '&minus;',\n\t\t\t'<' : '&lt;',\n\t\t\t'>' : '&gt;',\n\t\t\t',' : '&comma;',\n\t\t\t'.' : '&stop;',\n\t\t\t'[' : '&leftsquare;',\n\t\t\t']' : '&rightsquare;',\n\t\t],\n\t\tEscape = {Q -> Q.replaceAll(\/[&+\\-<>,.\\[\\]]\/){V -> EscapeMap[V]}},\n\n\t\tOpGotoCell = {Q ->\n\t\t\tOutput += Q < StackAt ?\n\t\t\t\t'<' * (StackAt - Q) :\n\t\t\t\t'>' * (Q - StackAt)\n\t\t\tStackAt = Q\n\t\t},\n\t\tOpAdd = {Q ->\n\t\t\tQ = Clamp(Q)\n\t\t\tOutput += 128 < Q ?\n\t\t\t\t'-' * (256 - Q) :\n\t\t\t\t'+' * Q\n\t\t},\n\t\tOpSolvePreserve = {Q ->\n\t\t\tPreserveMax = Math.max(Q,PreserveMax)\n\t\t\tPreserve - Q\n\t\t},\n\t\tOpFly = {Q -> StackAt = OpSolvePreserve(Q)},\n\t\tOpGotoPreserve = {Q -> OpGotoCell(OpSolvePreserve(Q))},\n\t\tOpGetPreserve = {Q -> Stack[OpSolvePreserve(Q)]},\n\t\tOpSetPreserve = {Q,S -> Stack[OpSolvePreserve(Q)] = S},\n\t\tOpModifyPreserve = {Q,S ->\n\t\t\tOpGotoPreserve(Q)\n\t\t\tOpAdd(S - OpGetPreserve(Q))\n\t\t\tOpSetPreserve(Q,S)\n\t\t},\n\t\tOpClearPreserve = {Q,J ->\n\t\t\tif (J || OpGetPreserve(Q))\n\t\t\t{\n\t\t\t\tOpGotoPreserve(Q)\n\t\t\t\tOutput += '[-]'\n\t\t\t\tOpSetPreserve(Q,0)\n\t\t\t}\n\t\t},\n\t\tOpMsgList = {Q ->\n\t\t\tQ.each {V ->\n\t\t\t\tOpModifyPreserve(0,(int)V)\n\t\t\t\tOutput += '.'\n\t\t\t}\n\t\t},\n\t\tGenerate;\n\t\tGenerate = {GenAST,CallArg,CallStack,CallStackMessage,CurrentIndent ->\n\t\t\tdef\n\t\t\tOpSolveVar = {Q -> Has(Q,CallArg) ? CallArg[Q] : Q},\n\t\t\tOpGoto = {Q,S = 0 ->\n\t\t\t\tIsNumber(Q) ?\n\t\t\t\t\tQ < 0 ?\n\t\t\t\t\t\tOpGotoCell(-Q) :\n\t\t\t\t\t\tOpGotoPreserve(Q) :\n\t\t\t\t\tIsNumber(Q = Var[OpSolveVar(Q)]) ?\n\t\t\t\t\t\tOpGotoCell(Q) :\n\t\t\t\t\t\tOpGotoCell(S + Q[0])\n\t\t\t},\n\t\t\t_OpClear = {Q,J ->\n\t\t\t\tif (IsNumber(Q))\n\t\t\t\t\tOpClearPreserve(Q,J)\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tOpGoto(Q)\n\t\t\t\t\tOutput += '[-]'\n\t\t\t\t}\n\t\t\t},\n\t\t\tOpClear = {Q,J = false ->\n\t\t\t\tif (IsArray(Q)) Q.each{V -> _OpClear(V,J)}\n\t\t\t\telse _OpClear(Q,J)\n\t\t\t},\n\t\t\tOpBegin = {Q,S = 0 ->\n\t\t\t\tOpGoto(Q,S)\n\t\t\t\tOutput += '[-'\n\t\t\t},\n\t\t\tOpEnd = {Q,S = 0 ->\n\t\t\t\tOpGoto(Q,S)\n\t\t\t\tOutput += ']'\n\t\t\t},\n\t\t\tOpMove = {Q,S,I = 0 ->\n\t\t\t\tOpBegin(Q,I)\n\t\t\t\tif (IsArray(S))\n\t\t\t\t\tS.each{V ->\n\t\t\t\t\t\tOpGoto(V)\n\t\t\t\t\t\tOutput += '+'\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tOpGoto(S)\n\t\t\t\t\tOutput += '+'\n\t\t\t\t}\n\t\t\t\tOpEnd(Q,I)\n\t\t\t},\n\t\t\tOpMoveReverse = {Q,S,I = 0 ->\n\t\t\t\tOpBegin(Q,I)\n\t\t\t\tif (IsArray(S))\n\t\t\t\t\tS.each{V ->\n\t\t\t\t\t\tOpGoto(V)\n\t\t\t\t\t\tOutput += '-'\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tOpGoto(S)\n\t\t\t\t\tOutput += '-'\n\t\t\t\t}\n\t\t\t\tOpEnd(Q,I)\n\t\t\t},\n\t\t\tOpCopy = {Q,S,T,J = true ->\n\t\t\t\tJ && OpClear(T)\n\t\t\t\tOpMove(Q,(IsArray(S) ? S : [S]) + [T])\n\t\t\t\tOpMove(T,Q)\n\t\t\t},\n\t\t\tOpPrepare = {Q,S,T ->\n\t\t\t\tOpClear(S)\n\t\t\t\tif (IsNumber(Q))\n\t\t\t\t{\n\t\t\t\t\tif (IsArray(S))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(T)\n\t\t\t\t\t\tOpAdd(Q)\n\t\t\t\t\t\tOpMove(T,S)\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(S)\n\t\t\t\t\t\tOpAdd(Q)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse OpCopy(Q,S,T)\n\t\t\t},\n\t\t\tOpPrepare01 = {Q,W = 0,A = 1,T = 2 ->\n\t\t\t\tOpPrepare(Q[0],W,T)\n\t\t\t\tOpPrepare(Q[1],A,T)\n\t\t\t},\n\t\t\tOpSet = {Q,S ->\n\t\t\t\tOpClear(Q)\n\t\t\t\tOpMove(S,Q)\n\t\t\t},\n\t\t\tOpDivMod = {Arg ->\n\t\t\t\tOpPrepare01(Arg,5,4,0)\n\t\t\t\tOpCopy(4,8,7)\n\t\t\t\tOpGoto(7)\n\t\t\t\tOutput += '+<-' +\n\t\t\t\t\t'[>>>[->-[>+>>]>[+[-<+>]>+>>]<<<<<]<<-]>' +\n\t\t\t\t\t'[->>[->>>+<<<]<]'\n\t\t\t\tOpFly(6)\n\t\t\t\tOpClear(8,true)\n\t\t\t\tOpClear(4,true)\n\t\t\t\tArg[2] ? OpSet(Arg[2],2) : OpClear(2,true)\n\t\t\t\tArg[3] ? OpSet(Arg[3],3) : OpClear(3,true)\n\t\t\t},\n\t\t\tOpIFWhile = {Arg,Not = false ->\n\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t{\n\t\t\t\t\tOpClear(0)\n\t\t\t\t\tOpCopy(Arg[0],0,1)\n\t\t\t\t\tOpGoto(0)\n\t\t\t\t\tOpAdd(-Arg[1])\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tOpPrepare01(Arg)\n\t\t\t\t\tOpMoveReverse(1,0)\n\t\t\t\t}\n\t\t\t\tif (Not)\n\t\t\t\t{\n\t\t\t\t\tOpGoto(1)\n\t\t\t\t\tOutput += '+>[[-]<-]<[>+<-<]'\n\t\t\t\t\tOpFly(2)\n\t\t\t\t}\n\t\t\t\tOpGoto(0)\n\t\t\t};\n\n\t\t\tGenAST.each {V ->\n\t\t\t\tdef Command = V[0],Arg = V[1],CurrentCode = V[3]\n\t\t\t\tLine = V[2]\n\t\t\t\tdef NeedNewLine = true,NeedIndent\n\t\t\t\tCode = CurrentCode\n\t\t\t\tif (Origin)\n\t\t\t\t{\n\t\t\t\t\tif ('END' == Command) CurrentIndent = CurrentIndent.substring Indent.size()\n\t\t\t\t\tOutput += CurrentIndent + Escape(Code) + '\n'\n\t\t\t\t\tif ('END' != Command || null != Arg[0]) Output += CurrentIndent\n\t\t\t\t}\n\t\t\t\tswitch (Command)\n\t\t\t\t{\n\t\t\t\t\tcase 'SET' :\n\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\tOutput += '[-]'\n\t\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\t\tOpAdd(Arg[1])\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tOpCopy(Arg[1],Arg[0],0)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'INC' :\n\t\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOpAdd(Arg[1])\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (OpSolveVar(Arg[0]) == OpSolveVar(Arg[1]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpClear(0)\n\t\t\t\t\t\t\tOpMove(Arg[0],0)\n\t\t\t\t\t\t\tOpBegin(0)\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOutput += '++'\n\t\t\t\t\t\t\tOpEnd(0)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tOpCopy(Arg[1],Arg[0],0)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'DEC' :\n\t\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOpAdd(-Arg[1])\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpCopy(Arg[1],0,1)\n\t\t\t\t\t\t\tOpMoveReverse(0,Arg[0])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'ADD' :\n\t\t\t\t\t\tOpPrepare01(Arg)\n\t\t\t\t\t\tOpMove(1,0)\n\t\t\t\t\t\tOpSet(Arg[2],0)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'SUB' :\n\t\t\t\t\t\tOpPrepare01(Arg)\n\t\t\t\t\t\tOpMoveReverse(1,0)\n\t\t\t\t\t\tOpSet(Arg[2],0)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'MUL' :\n\t\t\t\t\t\tOpPrepare01(Arg)\n\t\t\t\t\t\tOpBegin(0)\n\t\t\t\t\t\tOpCopy(1,2,3)\n\t\t\t\t\t\tOpEnd(0)\n\t\t\t\t\t\tOpClear(1,true)\n\t\t\t\t\t\tOpSet(Arg[2],2)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'DIVMOD' :\n\t\t\t\t\tcase 'DIV' :\n\t\t\t\t\t\tOpDivMod(Arg)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'MOD' :\n\t\t\t\t\t\tOpDivMod([Arg[0],Arg[1],null,Arg[2]])\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'CMP' :\n\t\t\t\t\t\tdef X = 4,T0 = 3,T1 = 2\n\t\t\t\t\t\tOpPrepare01(Arg,[T0,X],[T1,1 + X],0)\n\t\t\t\t\t\tOpMoveReverse(1 + X,X)\n\n\t\t\t\t\t\tOpGoto(1 + X)\n\t\t\t\t\t\tOutput += '+>[[-]'\n\t\t\t\t\t\tOpFly(X)\n\n\t\t\t\t\t\tOpGoto(T1 - 1)\n\t\t\t\t\t\tOutput += '+<[>-]>['\n\t\t\t\t\t\tOpFly(T1 - 1)\n\t\t\t\t\t\tOpGoto(X)\n\t\t\t\t\t\tOutput += '+'\n\t\t\t\t\t\tOpGoto(T0)\n\t\t\t\t\t\tOutput += '[-]'\n\t\t\t\t\t\tOpGoto(T1 - 1)\n\t\t\t\t\t\tOutput += '->]<+'\n\t\t\t\t\t\tOpGoto(T0)\n\t\t\t\t\t\tOutput += '['\n\t\t\t\t\t\tOpGoto(T1)\n\t\t\t\t\t\tOutput += '-[>-]>['\n\t\t\t\t\t\tOpFly(T1 - 1)\n\t\t\t\t\t\tOpGoto(X)\n\t\t\t\t\t\tOutput += '+'\n\t\t\t\t\t\tOpGoto(T0)\n\t\t\t\t\t\tOutput += '[-]+'\n\t\t\t\t\t\tOpGoto(T1 - 1)\n\t\t\t\t\t\tOutput += '->]<+'\n\t\t\t\t\t\tOpGoto(T0)\n\t\t\t\t\t\tOutput += '-]'\n\n\t\t\t\t\t\tOpGoto(X)\n\t\t\t\t\t\tOutput += '[<-]<[>-<-<]'\n\t\t\t\t\t\tOpFly(2 + X)\n\n\t\t\t\t\t\tOpGoto(1 + X)\n\t\t\t\t\t\tOutput += ']<[-<]>'\n\n\t\t\t\t\t\tOpClear(3,true)\n\t\t\t\t\t\tOpClear(2,true)\n\t\t\t\t\t\tOpClear(1,true)\n\n\t\t\t\t\t\tOpSet(Arg[2],X)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'A2B' :\n\t\t\t\t\t\tdef A = Arg[0],B = Arg[1],C = Arg[2],R = Arg[3]\n\t\t\t\t\t\tif (IsNumber(A))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tA = Clamp(10 * (A - 48))\n\t\t\t\t\t\t\tif (A)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOpGoto(1)\n\t\t\t\t\t\t\t\tOpAdd(A)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpCopy(A,2,0)\n\t\t\t\t\t\t\tOpGoto(2)\n\t\t\t\t\t\t\tOpAdd(-48)\n\t\t\t\t\t\t\tOpBegin(2)\n\t\t\t\t\t\t\tOpGoto(1)\n\t\t\t\t\t\t\tOpAdd(10)\n\t\t\t\t\t\t\tOpEnd(2)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (IsNumber(B))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(1)\n\t\t\t\t\t\t\tOpAdd(B - 48)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpCopy(B,1,0)\n\t\t\t\t\t\t\tOpGoto(1)\n\t\t\t\t\t\t\tOpAdd(-48)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tOpBegin(1)\n\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\tOpAdd(10)\n\t\t\t\t\t\tOpEnd(1)\n\t\t\t\t\t\tif (IsNumber(C))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\t\tOpAdd(C - 48)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpCopy(C,0,1)\n\t\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\t\tOpAdd(-48)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tOpSet(R,0)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'B2A' :\n\t\t\t\t\t\tdef R = Arg[0],A = Arg[1],B = Arg[2],C = Arg[3]\n\t\t\t\t\t\tif (IsNumber(R))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpClear(A)\n\t\t\t\t\t\t\tOpAdd((int)(R \/ 100))\n\t\t\t\t\t\t\tOpClear(B)\n\t\t\t\t\t\t\tOpAdd((int)(R \/ 10) % 10)\n\t\t\t\t\t\t\tOpClear(C)\n\t\t\t\t\t\t\tOpAdd(R % 10)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpDivMod([R,10,B,C])\n\t\t\t\t\t\t\tOpDivMod([B,10,A,B])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\tOpAdd(48)\n\t\t\t\t\t\tOpMove(0,Arg[1..<Arg.size])\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'LSET' :\n\t\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOpAdd(Arg[1])\n\t\t\t\t\t\t\tOutput += '[->+>+<<]'\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tOpCopy(Arg[1],[-1 - Var[OpSolveVar(Arg[0])][0],-2 - Var[OpSolveVar(Arg[0])][0]],Arg[0],false)\n\t\t\t\t\t\tif (IsNumber(Arg[2]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0],3)\n\t\t\t\t\t\t\tOpAdd(Arg[2])\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tOpCopy(Arg[2],-3 - Var[OpSolveVar(Arg[0])][0],Arg[0],false)\n\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\tOutput += '>[>>>[-<<<<+>>>>]<[->+<]<[->+<]<[->+<]>-]' +\n\t\t\t\t\t\t\t'>>>[-]<[->+<]<' +\n\t\t\t\t\t\t\t'[[-<+>]<<<[->>>>+<<<<]>>-]<<'\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'LGET' :\n\t\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOpAdd(Arg[1])\n\t\t\t\t\t\t\tOutput += '[->+>+<<]'\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tOpCopy(Arg[1],[-1 - Var[OpSolveVar(Arg[0])][0],-2 - Var[OpSolveVar(Arg[0])][0]],Arg[0],false)\n\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\tOutput += '>[>>>[-<<<<+>>>>]<<[->+<]<[->+<]>-]' +\n\t\t\t\t\t\t\t'>>>[-<+<<+>>>]<<<[->>>+<<<]>' +\n\t\t\t\t\t\t\t'[[-<+>]>[-<+>]<<<<[->>>>+<<<<]>>-]<<'\n\t\t\t\t\t\tOpClear(Arg[2])\n\t\t\t\t\t\tOpMove(Arg[0],Arg[2],3)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'IFEQ' :\n\t\t\t\t\tcase 'WEQ' :\n\t\t\t\t\t\tOpIFWhile(Arg,true)\n\t\t\t\t\t\tOutput += '['\n\t\t\t\t\t\tOpClear(0,true)\n\t\t\t\t\t\tNeedIndent = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'IFNEQ' :\n\t\t\t\t\t\tOpIFWhile(Arg)\n\t\t\t\t\t\tOutput += '['\n\t\t\t\t\t\tOpClear(0,true)\n\t\t\t\t\t\tNeedIndent = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'WNEQ' :\n\t\t\t\t\t\tif (Arg[1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpIFWhile(Arg)\n\t\t\t\t\t\t\tOutput += '['\n\t\t\t\t\t\t\tOpClear(0,true)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\t\tOutput += '['\n\t\t\t\t\t\t}\n\t\t\t\t\t\tNeedIndent = true\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'END' :\n\t\t\t\t\t\tif (null != Arg[0])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tCommand = GenAST[Arg[0]][0]\n\t\t\t\t\t\t\tArg = GenAST[Arg[0]][1]\n\t\t\t\t\t\t\tif ('WEQ' == Command)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOpIFWhile(Arg,true)\n\t\t\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ('WNEQ' == Command)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (Arg[1])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tOpIFWhile(Arg)\n\t\t\t\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse OpGoto(Arg[0])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOpClear(0)\n\t\t\t\t\t\t\t\tOpGoto(0)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tOutput += ']'\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse NeedNewLine = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'CALL' :\n\t\t\t\t\t\tArg = Arg[0]\n\t\t\t\t\t\tdef NextMessage = CallStackMessage + \"\n\\tat line ${Line}, procedure ${Arg[0]}\",T\n\t\t\t\t\t\tHas(Arg[0],Proc) || ErrorNoProc(Arg[0],NextMessage)\n\t\t\t\t\t\tT = Proc[Arg[0]]\n\t\t\t\t\t\tProcVar = T[1]\n\t\t\t\t\t\tProcVarType = T[2]\n\t\t\t\t\t\tProcSig = T[3]\n\t\t\t\t\t\tProcVar.size == Arg[1].size || ErrorProcLength(Arg[0],ProcVar[0].size,Arg[1].size,NextMessage)\n\t\t\t\t\t\tCallStack.contains(Arg[0]) && ErrorRecursive(NextMessage)\n\t\t\t\t\t\tCallStack << Arg[0]\n\t\t\t\t\t\tif (Origin) Output += Escape(ProcSig) + '\n'\n\t\t\t\t\t\tT = [:]\n\t\t\t\t\t\tProcVar.eachWithIndex {B,F ->\n\t\t\t\t\t\t\tT[B] = OpSolveVar(Arg[1][F])\n\t\t\t\t\t\t\t!ProcVarType[F] || ProcVarType[F][0] == IsNumber(Var[T[B]]) ||\n\t\t\t\t\t\t\t\tErrorArgTypeMismatch(\n\t\t\t\t\t\t\t\t\tProcVarType[F][0] ? 'variable' : 'list',\n\t\t\t\t\t\t\t\t\tB,\n\t\t\t\t\t\t\t\t\tProcSig,\n\t\t\t\t\t\t\t\t\tArg[1][F],\n\t\t\t\t\t\t\t\t\tProcVarType[F][0] ? 'list' : 'variable')\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGenerate(Proc[Arg[0]][0],T,CallStack,NextMessage,CurrentIndent + Indent)\n\t\t\t\t\t\tNeedNewLine = false\n\t\t\t\t\t\tCallStack.removeLast()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'READ' :\n\t\t\t\t\t\tOpGoto(Arg[0])\n\t\t\t\t\t\tOutput += ','\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'MSG' :\n\t\t\t\t\tcase 'LN' :\n\t\t\t\t\t\tArg[0].each {B ->\n\t\t\t\t\t\t\tif (B[0])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tOpGoto(B[1])\n\t\t\t\t\t\t\t\tOutput += '.'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse OpMsgList(B[1])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ('LN' == Command) OpMsgList('\n')\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'DISPLAY' :\n\t\t\t\t\t\tOpMove(Arg[0],-VarAt)\n\t\t\t\t\t\tOpGoto(-VarAt)\n\t\t\t\t\t\tOutput += '[>>+>+<<<-]>>>[<<<+>>>-]<<+>[<->[>++++++++++<[->-[>+>>]>[+[-<+>]>+>>]<<<<<]>[-]' +\n\t\t\t\t\t\t\t'++++++++[<++++++>-]>[<<+>>-]>[<<+>>-]<<]>]<[->>++++++++[<++++++>-]]<[.[-]<]<[-]'\n\t\t\t\t\t\tOpMove(-VarAt,Arg[0])\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'DEBUG' :\n\t\t\t\t\t\tOutput += '_'\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 'STOP' :\n\t\t\t\t\t\tOutput += '!'\n\t\t\t\t}\n\t\t\t\tif (Origin)\n\t\t\t\t{\n\t\t\t\t\tif (NeedNewLine) Output += '\n'\n\t\t\t\t\tif (NeedIndent) CurrentIndent += Indent\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tCode.split('\n').each {V ->\n\t\t\t++Line\n\t\t\tCode = V\n\t\t\tCodeAt = 0\n\t\t\tWhite()\n\t\t\tif (Taste())\n\t\t\t{\n\t\t\t\tV = Word()\n\t\t\t\tHas(V,Machine) || ErrorCommand(V)\n\t\t\t\tIsArray(Machine[V]) ?\n\t\t\t\t\tCurrentAST << [V,Machine[V].collect{C -> C()},Line,Code.trim()] :\n\t\t\t\t\tMachine[V]()\n\t\t\t\tTaste() && ErrorCommandEnd(Taste())\n\t\t\t\tif (Origin && 'VAR' == V) Output += Code.trim() + '\n'\n\t\t\t}\n\t\t}\n\t\tASTStack.size && ErrorEndUnclose()\n\n\t\tGenerate(AST,[:],[],'','')\n\t\tOrigin ? Output : Output ? Output.substring(Preserve - PreserveMax) : Output\n\t}\n}","lang_id":22,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-25 20:02:41","updated_at":"2022-12-25 20:02:41"}]}