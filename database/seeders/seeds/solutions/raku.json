{"50654ddff44f800200000004":[{"id":291518,"user_id":76,"body":"use v6;\nunit module Solution;\n\nsub multiply(Int $a, Int $b --> Int) is export {\n    $a * $b;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291519,"user_id":564,"body":"use v6;\nunit module Solution;\n\nsub multiply(*@ns) is export { @ns.reduce({$^a * $^b}) }\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291520,"user_id":527,"body":"unit module Solution;\nconstant &multiply is export = &infix:<*>;","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291521,"user_id":527,"body":"unit module Solution;\n\nsub multiply(*@args) is export { [*] @args }","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291522,"user_id":null,"body":"use v6;\nunit module Solution;\nsub multiply is export {\n    @_[0] * @_[1];\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291523,"user_id":2582,"body":"use v6;\nunit module Solution;\n\nsub multiply(Int $a, Int $b --> Int) is export {\n    return $a * $b\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291524,"user_id":527,"body":"unit module Solution;\nour &multiply is export = * * *","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291525,"user_id":527,"body":"unit module Solution;\nconstant &multiply is export = * * *","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291526,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub multiply(Int \\a, Int \\b --> Int) is export {\n    a * b\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291527,"user_id":527,"body":"unit module Solution;\n\nsub multiply is export { $^a * $^b }","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"514b92a657cdc65150000006":[{"id":291528,"user_id":2582,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    (^$num).grep( {$_ %% (3|5)} ).sum\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291529,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export { [+] grep *%%(3|5), ^$num }","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291530,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    (1..^$num).grep(* %% (3 | 5)).sum\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291531,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    [+] (^$num).grep(* %% (3|5))\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291532,"user_id":564,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    (3..^$num).grep({$_ %% 3 || $_ %% 5}).sum\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291533,"user_id":575,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    (1..^$num).grep( {$_ %% 5 || $_ %% 3 }).sum\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291534,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n  sub tri(Int $num, $div --> Int) is export {\n    my $n = (($num - 1) \/ $div).floor;\n    (($n**2 + $n) * $div \/ 2).floor\n  }\n  tri($num, 3) + tri($num, 5) - tri($num, 15)\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291535,"user_id":168,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    my $s = 0;\n    loop (my $i = 1; $i < $num; $i++) {\n        $s += $i % 3 == 0 || $i % 5 == 0 ?? $i !! 0;\n    }\n    $s\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291536,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    [+] (^$num).grep: * %% (5|3)\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291537,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solution(Int $num --> Int) is export {\n    $num < 0 ?? 0 !! (^$num).grep(-> $num {$num %% 3 || $num %% 5}).sum;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"542f0c36d002f8cd8a0005e5":[{"id":291538,"user_id":527,"body":"unit module Solution;\nconstant &last-chair is export(:last-chair) = * - 1;","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291539,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub last-chair(Int $n --> Int) is export(:last-chair) {\n    $n - 1\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291540,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub last-chair(Int $n --> Int) is export(:last-chair) {\n    return $n - 1;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5539fecef69c483c5a000015":[{"id":291541,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $end --> Array) is export {\n    [grep { is-prime $_ and is-prime $_.flip and $_ != $_.flip }, $start .. $end]\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291542,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $nd --> Array) is export {\n    # your code\n    ($start .. $nd).grep(*.is-prime).grep({$_ ne $_.flip}).grep(*.flip.is-prime).Array\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291543,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $nd --> Array) is export {\n    my @a;\n    for $start .. $nd -> $p {\n        my $b = +$p.split('').reverse.join;\n        @a.push($p) if $p.is-prime and $b.is-prime\n          and $p != $b and $p !(elem) @a\n    }\n    return @a\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291544,"user_id":209,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $nd --> Array) is export {\n    my @res;\n    for ($start..$nd) -> $i {\n        if $i != $i.flip && $i.flip.is-prime && $i.is-prime {\n            @res.push($i);\n        }\n    }\n    @res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291545,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub is-palindromic(Int $n --> Bool) {\n    return $n == reverse-digits($n);\n}\n\nsub reverse-digits(Int $n --> Int) {\n    my ($m, $r) = ($n, 0);\n    while ($m > 0) {\n        $r *= 10;\n        $r += $m % 10;\n        $m = floor($m \/ 10);\n    }\n    return $r;\n}\n\nsub backwards_prime(Int $start, Int $nd --> Array) is export {\n    my @fs = [];\n    loop (my $d = $start; $d <= $nd; $d++) {\n        if ($d.is-prime && !is-palindromic($d) && (reverse-digits($d)).is-prime) {\n            @fs.push($d);\n        }\n    }\n    return @fs;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291546,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $end --> Array) is export {\n    my @arr;\n    for $start..$end {\n        if $_.flip ne $_ && $_.is-prime && $_.flip.is-prime {\n            @arr.push($_);\n        }\n    }\n    return @arr;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291547,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub backwards_prime(Int $start, Int $nd --> Array) is export {\n    my Int $i = $start;\n    my @A = [];\n    while ($i <= $nd) {\n        my Str $istr = ~$i;\n        my Str $ri = $istr.flip;\n        my Int $rinb = +$ri;\n        if (($istr != $ri) && is-prime($i) && is-prime($rinb)) {\n            @A.push($i);\n        }\n        $i++;\n    }\n    @A;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5544c7a5cb454edb3c000047":[{"id":291548,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $bounce, Real $window --> Int) is export {\n    return -1 unless $h > 0 && 0 < $bounce < 1 && $window < $h;\n    log($h \/ $window, 1 \/ $bounce).ceiling * 2 - 1;\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291549,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $bounce, Real $window --> Int) is export {\n    if $h <= 0 { -1 }\n    elsif $bounce <= 0 { -1 }\n    elsif $window <= 0 { -1 }\n    elsif $bounce >= 1 { -1 }\n    elsif $window >= $h { -1 }\n    else { 2 + bouncing_ball($h * $bounce, $bounce, $window) };\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291550,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $b, Real $w --> Int) is export {\n    result($h, $b, $w)\n}\n\nmulti sub result($h where $h > 0, $b where ($b > 0 and $b < 1), $w where $w < $h) {\n    1 + 2 * (log($w\/$h, $b) - 0.0001).floor\n}\n\nmulti sub result(|) {\n    -1\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291551,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmulti sub bouncing_ball(Real $h is copy where * > 0, Real $bounce where 1 > * > 0, Real $window --> Int) is export {\n    my int $c = $h > $window ?? 1 !! -1;\n\n    $c += 2 while ($h *= $bounce) > $window;\n    \n    $c\n}\n\nmulti sub bouncing_ball(|) {\n    -1;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291552,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $bounce, Real $window --> Int) is export {\n  if ($h <= 0 || $bounce <= 0 || $bounce >= 1 || $window >= $h) { return -1; }\n  return 2 + bouncing_ball($h*$bounce, $bounce, $window);\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291553,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h is copy, Real $bounce, Real $window --> Int) is export {\n    return -1 unless $h > 0 && 0 < $bounce < 1;\n    \n    my $c = -1;\n    while $h > $window {\n        $c += 2;\n        $h *= $bounce;\n    }\n    $c\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291554,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h is copy, Real $bounce, Real $window --> Int) is export {\n    my $total = 0;\n    if 0 < $h && 0 < $bounce < 1 && $window < $h {\n        while 0 < $h {\n            if $window <= $h {\n                ++$total;\n            } else {\n                last;\n            }\n            $h *= $bounce;\n            if $window < $h {\n                ++$total;\n            } else {\n                last;\n            }\n        }\n        return $total;\n    }\n    return -1\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291555,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $bounce, Real $window --> Int) is export {\n    return -1 unless $h > 0 && 0 < $bounce < 1 && $window < $h;\n    log($window \/ $h, $bounce).ceiling * 2 - 1\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291556,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub bouncing_ball(Real $h, Real $bounce, Real $window --> Int) is export {\n    if ($h <= 0) || ($bounce <= 0) || ($bounce >= 1) || ($window >= $h) { return -1; }\n    my $hh = $h;\n    my $result = -1;\n    while ($hh > $window) {\n      $result += 2;\n      $hh *= $bounce;\n    }\n    $result;\n}   ","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55466989aeecab5aac00003e":[{"id":291557,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub sq_in_rect(Int $length is copy, Int $width is copy --> Array) is export {\n    return [] if $length == $width;\n    my @a = gather {\n        until $width == $length {\n            take min $width, $length;\n            ($width < $length ?? $length !! $width) -= min($width, $length);\n        }\n    }\n    return @a.Array.push: @a[*-1];\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291558,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub sq_in_rect(Int $length, Int $width --> Array) is export {\n    my ($a, $b) = ($length, $width);\n    my ($l, $w, @arr) = (0, 0, []);\n    if ($a == $b) { return []; }\n    while ($a > 0 && $b > 0) {\n        $l = $a > $b ?? $a !! $b;\n        $w = $a < $b ?? $a !! $b;\n        push @arr, $w;\n        $a = $w;\n        $b = $l - $w;\n    }\n    @arr.shift;\n    return @arr;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291559,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub sq_in_rect(Int $length, Int $width --> Array) is export {\n    return [] if $length == $width;  # why?\n    my ($min, $max) = sort $length, $width;\n    my @result;\n    while $min != $max {\n        push @result, $min;\n        ($min, $max) = sort $max - $min, $min;\n    }\n    push @result, $min;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291560,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub sq_in_rect(Int $length, Int $width --> Array) is export {\n    my @arr = [];\n    if $length == $width {\n        return @arr;\n    } else {\n        my $len = max($length, $width);\n        my $wid = min($length, $width);\n        while $wid > 0 and $length > 0 {\n            push(@arr, $wid);\n            my $new = $len-$wid;\n            $len = max($wid, $new);\n            $wid = min($wid, $new);\n        }\n        return @arr;\n    }\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291561,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub sq_in_rect(Int $length, Int $width --> Array) is export {\n    my ($lng, $wdth) = ($length, $width);\n    if $lng == $wdth { return []; }\n    if $lng < $wdth { ($wdth, $lng) = ($lng, $wdth); }\n    my @res = [];\n    while $lng != $wdth {\n        @res.push($wdth);\n        $lng = $lng - $wdth;\n        if $lng < $wdth { ($wdth, $lng) = ($lng, $wdth); }\n    }\n    @res.push($wdth);\n    @res;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5547cc7dcad755e480000004":[{"id":291562,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub remove_nb(Int $n --> Array) is export(:remove_nb) {\n    my $s := $n * ($n + 1) div 2;\n    my @r;\n    for 1 .. $n -> $a {\n        next unless ($s - $a) %% ($a + 1);\n        my $b := ($s - $a) div ($a + 1);\n        push @r, ($a, $b) if $b <= $n;\n    }\n    @r\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291563,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub remove_nb(Int $n --> Array) is export(:remove_nb) {\n    my @ans = [];\n    my Int $m = ($n * ($n + 1)) div 2;\n    my Int $x = $n div 2;\n    while ($x <= $n) {\n        my $y = $m - $x;\n        if ($y % ($x + 1) == 0) {\n            @ans.push((+$x, $y div ($x + 1)));           \n        }\n        $x++;\n    }\n    @ans;\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291564,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub remove_nb(Int $n --> Array) is export(:remove_nb) {\n    my Int $s = ($n * ($n + 1)) div 2;\n    my @res = [];\n    my Int $i = $n div 2;\n    while ($i <= $n) {\n        my $b = $s - $i;\n        if ($b % ($i + 1) == 0) {\n            @res.push((+$i, $b div ($i + 1)));           \n        }\n        $i++;\n    }\n    @res;\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"554f76dca89983cc400000bb":[{"id":291565,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub idiv(Int $n, Int $d --> Int) {\n    $n %% $d ?? $n div $d !! Nil;\n}\n\nsub sol_equa(Int $n --> Array) is export {\n    [gather {\n        loop (my $d = 1; $d * $d <= $n; ++$d) {\n            my $nd := idiv $n, $d      orelse next;        \n            my $x  := idiv $nd + $d, 2 orelse next;\n            my $y  := idiv $x - $d, 2  orelse next;\n            take ($x, $y);\n        }\n    }]\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291566,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub sol_equa(Int \n --> Array) is export {\n    gather for 1..n.sqrt -> \\i {\n        next unless n %% i;\n        my \\j = n div i;\n        next unless (j - i) %% 4;\n        my \\y = (j - i) div 4;\n        take (i + 2 * y, y);\n    }.Array\n}\n","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291567,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub sol_equa(Int $n --> Array) is export {\n    my ($i, $d, $x, $y) = (1, 0, 0, 0);\n    my @fs = [];\n    my $m = floor(sqrt($n));\n    while ($i <= $m) {\n        $d = $n \/ $i;\n        $x = ($d + $i) \/ 2;\n        $y = ($d - $i) \/ 4;\n        if ($d == floor($d) && $x == floor($x) && $y == floor($y)) {\n            @fs.push((floor($x), floor($y)));\n        }\n        $i++;\n    }\n    return @fs;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291568,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub sol_equa(Int $n --> Array) is export {\n    my @res = []; my $i = 1;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            my $x2 = $i + $n div $i;\n            if ($x2 % 2 == 0) {\n                my $x = $x2 div 2; \n                my $y2 = $x - $i;\n                if ($y2 % 2 == 0) {\n                    @res.push(($x, $y2 div 2));\n                }\n            }\n        }\n        $i++;\n    }\n    @res;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5552101f47fc5178b1000050":[{"id":291569,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub dig_pow(Int $n, $p --> Int) is export {\n    my $sm = ($n.comb Z** ($p .. $p + $n.Str.chars)).sum;\n    ($sm % $n == 0) ?? ($sm div $n) !! -1;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291570,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub dig_pow(Int $n, $p --> Int) is export {\n    my Int $sum = [+] ($n.comb.map: *.Int) Z** ($p ... Inf);\n    # Raku lacks \"floor\/\" from Guile Scheme\n\tif $sum %% $n {\n\t\treturn Int($sum \/ $n);\n\t} else {\n\t\treturn -1;\n\t}\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291571,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub dig_pow(Int $n, $p --> Int) is export {\n    my ($s, $ans, $i) = (0, 0, 1);\n    my $t = Str($n);\n    loop (my $j = 0; $j < $t.chars; ++$j) {\n        my $a = substr($t, $j, 1);\n        my $c = ord($a) - ord('0');\n        $s += $c ** ($p - 1 + $i);\n        $i += 1;\n    }\n    if ($s % $n == 0) { \n        $ans = $s div $n;\n    } else { \n        $ans = -1;\n    }\n    return $ans;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5592e3bd57b64d00f3000047":[{"id":291572,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    my ($s, $n) = (0, 0);\n    while ($s < $m) {\n        $n++;\n        $s += $n**3;\n    }\n    $s == $m ?? $n !! -1;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291573,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    for (1..*) {\n        state $sum = 0;\n        $sum += $_ ** 3;\n        return $_ if $sum == $m;\n        return -1 if $sum > $m;\n    }\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291574,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub isqrt(Int $n --> Int) {\n    my $s := Int(sqrt $n);\n    $s * $s == $n ?? $s !! Nil;\n}\n\nsub find_nb(Int $m --> Int) is export {\n    my $sm := isqrt $m          or return -1;\n    my $sd := isqrt 1 + 8 * $sm or return -1;\n    $sd %% 2 ?? -1 !! ($sd - 1) div 2;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291575,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $g --> Int) is export {\n    my $m = $g;\n    for 1..1e99 -> $n {\n        if $m > 0 {\n            $m -= $n ** 3;\n        } elsif $m == 0 {\n            return $n - 1;\n        } else {\n            return -1;\n        }\n    }\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291576,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    my $propn = Int(sqrt(1 + (8 * sqrt($m))) -1) div 2;\n    return (($propn ** 2)*(($propn + 1) ** 2)\/4) == $m ?? $propn !! -1;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291577,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    my $a = $m.sqrt.Int;\n    \n    return -1 unless $m == $a ** 2;\n    \n    my $b = ($a * 8 + 1).sqrt.Int;\n    \n    return -1 unless $a * 8 + 1 == $b ** 2;\n    \n    $b = (($b - 1) \/ 2).Int;\n    \n    return -1 unless $m == ($b * ($b + 1) \/ 2) ** 2;\n\n    return $b;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291578,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n  die \"Error domain\" if $m < 0;\n\n  return 0 if $m  == 0;\n\n   my $vol =  0;\n   for 1 .. \u221e -> $n {\n       $vol += $n**3;             \n       return $n if $vol == $m;\n       return -1 if $vol > $m;\n    }\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291579,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    my $n = (((1 + 8 * $m.sqrt).sqrt - 1) \/ 2).Int;\n    ($n ** 2 + $n) ** 2 == 4 * $m ?? $n !! -1\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291580,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub find_nb(Int $m --> Int) is export {\n    my ($n, $cS) = (0, 0);\n    loop (; $cS < $m; $n++) {\n        $cS += $n * $n * $n;\n    }\n    $cS == $m ?? $n - 1 !! -1;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"559a28007caad2ac4e000083":[{"id":291581,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    (8, 12, * + * ... *)[$n] - 4\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291582,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    my ($a, $b) = 0, 1;\n    \n    my $total = 0;\n    for 0..$n + 1 {\n        $total += $a;\n        ($a, $b) = $b, $a + $b;\n    }\n    \n    4 * $total;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291583,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    my ($a, $b, $m, $i) = (1, 1, 0, 0);\n    while ($i < $n + 2) {\n        $m = $a + $b;\n        $a = $b;\n        $b = $m;\n        $i++;\n    }\n    return 4 * ($a - 1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291584,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmy $fibs := 0, 1, * + * ... *;\n\nsub perimeter(Int $n --> Int) is export {\n    4 * ($fibs[$n + 3] - 1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291585,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    state @fib;    \n    my sub fib( Int $in-no --> Int ) {\n        die \"Error domain\" unless $in-no >= 0;\n        if defined @fib[$in-no] {                    \n            return @fib[$in-no];        \n        }\n        return @fib[$in-no] = $in-no if 2 > $in-no;\n        return @fib[$in-no] = fib($in-no -1) + fib($in-no -2);\n    }\n    \n    my $dims;\n    for 1 ..$n+1 -> $p {\n        $dims += fib( $p);\n    }\n    return $dims \u00d7 4;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291586,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    4 * ((0, 1, * + * ... *)[$n + 3] - 1)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291587,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub perimeter(Int $n --> Int) is export {\n    my ($a, $b) = (1, 1);\n    loop (my $i = 0; $i < $n + 2; ++$i) {\n        ($a, $b) = ($b, $a + $b);\n    }\n    4 * ($a - 1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"559b8e46fa060b2c6a0000bf":[{"id":291588,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub diagonal(Int $n, Int $p --> Int) is export(:diagonal) {\n    return +combinations($n + 1, $p + 1);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291589,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub infix:<nCp> { Int([*] ($^n ... 0) Z\/ 1 .. $^p) }\nsub diagonal(Int $n, Int $p --> Int) is export(:diagonal) { ($n+1) nCp ($p+1) }","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291590,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub diagonal(Int $n, Int $p --> Int) is export(:diagonal) {\n    my ($r, $i) = (1, 1);\n    while ($i <= $p+1) {\n        $r = $r * ($n - $i + 2) div $i;\n        $i++;\n    }  \n    return $r;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291591,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub fact($n) {\n    return [*] 1..$n;\n}\n\nsub diagonal(Int $n, Int $p --> Int) is export(:diagonal) {\n    return combinations($n + 1, $p + 1).elems;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291592,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub diagonal(Int $n, Int $p --> Int) is export(:diagonal) {\n  combinations($n + 1, $p + 1).elems;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"559ce00b70041bc7b600013d":[{"id":291593,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub finance(Int $m --> Int) is export(:finance) {\n    my $n = $m + 1;\n    return (1\/2 * ($n**3 - $n)).Int\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291594,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub finance(Int $n --> Int) is export(:finance) {\n    return $n * ($n + 1) * ($n + 2) div 2; \n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291595,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub finance(Int $n --> Int) is export(:finance) {\n    $n * ($n + 1) * ($n + 2) div 2;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55aa075506463dac6600010d":[{"id":291596,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub list_squared(Int $m, Int $n --> Array) is export {\n    sub sumdiv (Int $x --> List) {\n        my $sm = 0;\n        my $i = 1;\n        my $max = $x.sqrt.floor;\n        while ($i <= $max) {\n            if ($x % $i == 0) {\n                $sm += $i * $i; \n                my $y = $x div $i; \n                $sm += $y * $y if $y != $i \n            }\n            $i++;\n        }\n        my $r = $sm.sqrt.floor;\n        if $r * $r == $sm { return ($x, $sm) } else { return () }\n    }\n    my @ret = [];\n    my $i = $m;\n    while ($i <= $n) {\n        my $r = sumdiv($i);\n        if ($r != ()) { @ret.push($r); }\n        $i += 1;\n    }\n    @ret;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291597,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub divisors(Int $n --> Seq) {\n    gather {\n        my $i;\n        loop ($i = 1; $i * $i < $n; ++$i) {\n            if $n %% $i {\n                take $i;\n                take $n div $i;\n            }\n        }\n        take $i if $i * $i == $n;\n    }\n}\n\nsub is-square(Int $n --> Bool) {\n    $n.sqrt.Int ** 2 == $n\n}\n\nmy @memo = map {\n    my $s = sum map (* ** 2), divisors $_;\n    ($s && is-square $s) ?? ($_, $s) !! Nil;\n}, ^Inf;\n    \nsub list_squared(Int $m, Int $n --> Array) is export {\n    my @r;\n    for $m .. $n {\n        push @r, @memo[$_] if defined @memo[$_];\n    }\n    @r\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291598,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub list_squared(Int $m, Int $n --> Array) is export {\n    sub ssd (Int $x --> List) {\n        my $s = 0;\n        my $i = 1;\n        my $t = $x.sqrt.floor;\n        while ($i <= $t) {\n            if ($x % $i == 0) {\n                $s += $i * $i; \n                my $y = $x div $i; \n                $s += $y * $y if $y != $i \n            }\n            $i++;\n        }\n        my $sq = $s.sqrt.floor;\n        if $sq * $sq == $s { return ($x, $s) } else { return () }\n    }\n    \n    my @ans = [];\n    my $i = $m;\n    while ($i <= $n) {\n        my $xs = ssd($i);\n        if ($xs != ()) { @ans.push($xs); }\n        $i++;\n    }\n    @ans;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55d24f55d7dd296eb9000030":[{"id":291599,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    $n * ($n + 1) div 2;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291600,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    (1..$n).sum\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291601,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    sum(1..$n)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291602,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    sum ^ $n + 1\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291603,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    return [+] 1..$n;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291604,"user_id":812,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    my $result = 0;\n    loop (my $i = 0; $i < $n; ++$i) {\n        $result = $result + $i;\n    }\n    $result + $n;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291605,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    # your code goes here\n    (1..$n).sum\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291606,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    my $j = 0;\n\n    for 1..$n -> $x {\n        $j += $x;\n    }\n\n    return $j\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291607,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    [+] 1..$n\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291608,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub summation(Int $n --> Int) is export {\n    $n == 0 ?? 0 !! $n + summation($n - 1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55f9bca8ecaa9eac7100004a":[{"id":291609,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub past(Int \\h, Int \\m, Int \\s --> Int) is export {\n    [+] (s, m, h) Z* [\\*] (1000, 60, 60)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291610,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    my $m1 = $s * 1000;\n    my $m2 = $m * 60000;\n    my $m3 = $h * 3600000;\n    $m1 + $m2 + $m3;\n}\n","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291611,"user_id":812,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    my $seconds = $h * 60 * 60 + $m * 60 + $s;\n    1000 * $seconds;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291612,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    return ($h*60*60*1000)+($m*60*1000)+($s*1000);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291613,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    ($s * 1000) + ($m * 60000) + ($h * 3600000);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291614,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    return $h * 3600000 + $m * 60000 + $s * 1000;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291615,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    my $milliseconds = 0;\n    $milliseconds = $milliseconds + $h * 60 * 60 * 1000;\n    $milliseconds = $milliseconds + $m * 60 * 1000;\n    $milliseconds = $milliseconds + $s * 1000\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291616,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    return 1000 * ($h * 3600 + $m * 60 + $s);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291617,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n    Int($h * 3.6e6 + $m * 6e4 + $s * 1000)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291618,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub past(Int $h, Int $m, Int $s --> Int) is export {\n\tmy $m_full = $m + $h * 60;\n\tmy $s_full = $s + $m_full * 60;\n\treturn $s_full * 1000;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55fd2d567d94ac3bc9000064":[{"id":291619,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    $n\u00b3\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291620,"user_id":527,"body":"unit module Solution;\nconstant &row_sum_odd_numbers is export = *\u00b3;","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291621,"user_id":50,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    return $n ** 3;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291622,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    my $from-exclude = sum-of-first($n - 1);\n    my $to-include = sum-of-first($n - 1) + $n;\n    return sum-of-first-odd($to-include) - sum-of-first-odd($from-exclude);\n}\n\nsub sum-of-first($n) {\n\t(1 + $n) * ($n div 2) + (($n + 1) %% 2) * (($n + 1) div 2)\n}\n\nsub sum-of-first-odd($n) {\n\tmy $nth = n-th-odd $n;\n\t(1 + $nth) * ($n div 2) + (($n + 1) %% 2) * ((1 + $nth) div 2)\n}\n\nsub n-th-odd($n) {\n\t$n * 2 - 1\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291623,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    # user code ..\n    return $n ** 3;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291624,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    $n < 2 ?? $n !! 3 * $n * $n - 3 * $n + 1 + row_sum_odd_numbers($n - 1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291625,"user_id":527,"body":"unit module Solution;\nsub row_sum_odd_numbers is export { $^n ** 3 }","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291626,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    $n ** 3\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291627,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub row_sum_odd_numbers(Int $n --> Int) is export {\n    return $n * $n * $n;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"563b662a59afc2b5120000c6":[{"id":291628,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n\tmy Int $year = 0;\n    my Int $pp0 = $p0;\n    while ($pp0 < $p) {\n        $pp0 = floor($pp0 * (1 + $percent \/ 100.0) + $aug);\n        $year++;\n    }\n    return $year;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291629,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    # behold the power of the ... operator!\n    elems $p0, (* * (1 + $percent \/ 100) + $aug).Int ...^ * >= $p;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291630,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    ($p0, { $^cp + Int($^cp * $percent \/ 100) + $aug } ... *).first(* >= $p, :k)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291631,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    my $pop = $p0;\n    for [1..Inf] -> $i {\n        $pop += floor($pop * ($percent\/100)) + $aug;\n        say $pop;\n        if $pop >= $p {\n            return $i;\n        }\n    }\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291632,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    if (($p0 == 1000) & ($percent == 2.0) & ($aug == 50) & ($p == 1214)) {return 4};\n    my $i = 0;\n    my $pop = $p0;\n    until ($pop.round >= $p) {\n        $pop = $pop + $pop*$percent\/100 + $aug;\n        $i++;\n        \n    }\n    \n    return $i\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291633,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year($people is copy, Real $percentIncrease is copy, Int $comeLeave, Int $surpass) of Int is export {\n    my $year = 0;\n    $percentIncrease = 1 + ($percentIncrease \/ 100);\n    while $people < $surpass {\n        $people = Int($people * $percentIncrease + $comeLeave);\n        ++$year;\n    }\n    return $year;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291634,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    my ($i, $curpop, $growth) = (0, $p0, 1 + $percent\/100);\n\n    loop (;$curpop < $p;$i++) {\n       $curpop = floor($curpop * $growth) + $aug;\n    }\n    $i;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291635,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {    $percent \/\/= 0.0;\n    die \"Error domain\" unless $p > 0;\n    die \"Error domain\" unless $p0 > 0;\n    die \"Error domain\" unless $percent \u2265 0;\n    die \"Undefined \\$aug\" unless defined $aug;\n\n    my $goal = $p;\n    my $curr-pop = $p0;\n\n    if $curr-pop < $goal {\n\n        my $growth = 1 + $percent\/100;\n\n        my $years = 0;\n        while $curr-pop < $goal  and $curr-pop > 0 {\n            $curr-pop = ($curr-pop \u00d7 $growth + $aug).Int;\n            ++ $years;\n        }\n\n        return NaN if $curr-pop \u2264 0;   # XXX no protocol given for neg growth\n\n        return $years;\n    }\n    # fall through to accomodate given code\n    return 0;  \t\n    # 0 for failure would be ambiguous\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291636,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub nb_year(Int $p0, Real $percent, Int $aug, Int $p) of Int is export {\n    my Int $ans = 0;\n    my Int $n = $p0;\n    while ($n < $p) {\n        $n = floor($n * (1 + $percent \/ 100.0) + $aug);\n        $ans++;\n    }\n    return $ans;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"56541980fa08ab47a0000040":[{"id":291637,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    sprintf('%s\/%s', ($s ~~ m:global\/<-[a..m]>\/).elems, $s.chars)\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291638,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    $s.comb.grep(not * ~~ \"a\" .. \"m\").elems ~ \"\/\" ~ $s.comb.elems;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291639,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmy @valid = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'];\n\nsub printer_error(Str $s) is export {\n    my Int $errors = 0;\n    for $s.comb -> $letter {\n        if $letter ne any(@valid) {\n            $errors++;\n        }\n    }\n    return \"$errors\/{$s.comb.elems}\";\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291640,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    my @arr = $s.split('', :skip-empty);\n    my @letters = ['a'..'m'];\n    @arr.grep(* !(elem) @letters).elems ~ '\/' ~ @arr.elems\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291641,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    \"{+($s ~~ m:g\/<-[a..m]>\/)}\/{$s.chars}\"\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291642,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    $s ~~ m:g\/<![a..m]>\/;\n    \"{$\/.elems}\/{$s.chars}\"\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291643,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    $s ~~ m:g:i:m\/<[^abcdefghijklm]>\/;\n    my $m = $\/.elems;\n    my $n = $s.chars;\n    my $e = $n - $m;\n    \"$e\/$n\";\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291644,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    \"{+$s.comb(\/<-[a..m]>\/)}\/{+$s.comb}\"\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291645,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub printer_error(Str $s) is export {\n    $s ~~ m:exhaustive\/<[n..z]>\/;\n    \"$($\/.Str.subst(\" \", \"\", :g).chars)\/$($s.chars)\";\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"566543703c72200f0b0000c9":[{"id":291646,"user_id":527,"body":"use v6;\nunit module Solution;\nsub epidemic(Int \\tm, Int \n, Int \\s0, Int \\i0, Real \\b, Real \\a --> Int) is export(:epidemic) {\n    my \\dt = tm \/ n;\n    my \\js = ((s0, i0, 0), -> (\\s, \\i, \\r) { (\n            s - dt * b * s * i,\n            i + dt * (b * s * i - a * i),\n            r + dt * i * a,\n        ) } ... *).map(*[1]).cache;\n    (js Z js.skip).first({ $_[0] > $_[1] })[1].Int\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291647,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    my $s = $s0;\n    my $i = $i0;\n    my $r = 0;\n    my $t = 0;\n    my $dt = $tm\/$n;\n    my $imax = 0;\n    while $t < $tm {\n        my $sd = $dt*(-$b*$s*$i);\n        my $id = $dt*($b*$s*$i-$a*$i);\n        my $rd = $dt*($a*$i);\n        $s += $sd;\n        $i += $id;\n        $r += $rd;\n        $t += $dt;\n        $imax = max($imax, round($i));\n    }\n    return $imax;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291648,"user_id":492,"body":"use v6;\nunit module Solution;\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    my ($maxI, $dt) = 0.0, $tm \/ $n;\n    my ($s, $i, $r) = $s0, $i0, 0;\n    my $ind = 0;\n    while ($ind < $n) {\n        my $currI = $i;\n        $r = $r + $currI * $a * $dt;\n        $i = $currI + $dt * ($b * $s * $currI - $a * $currI);\n        $s = $s - $dt * $b * $s * $currI;\n        $maxI = max($maxI, $i);\n        $ind++;\n    }\n    Int($maxI);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291649,"user_id":null,"body":"use v6;\nunit module Solution;\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    # your code\n    my $r0 = 0;\n    my $dt = $tm \/ $n;\n    \n    my @S = $s0;\n    my @I = $i0;\n    my @R = $r0;\n    \n    my $max = $i0;\n    \n    for ^1000 -> $k {\n        push(@S, @S[$k] - $dt * $b * @S[$k] * @I[$k]);\n        push(@I, @I[$k] + $dt * ($b * @S[$k] * @I[$k] - $a * @I[$k]));\n        push(@R, @R[$k] + $dt * @I[$k] * $a);\n        \n        $max = (@I[*-1], $max).max;\n    }\n    \n    $max.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291650,"user_id":null,"body":"use v6;\nunit module Solution;\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    # your code\n    my $r0 = 0;\n    my $dt = $tm \/ $n;\n    \n    my @S = $s0;\n    my @I = $i0;\n    my @R = $r0;\n    \n    my $max = $i0;\n    \n    for ^1000 -> $k {\n        push(@S, @S[$k] - $dt * $b * @S[$k] * @I[$k]);\n        push(@I, @I[$k] + $dt * ($b * @S[$k] * @I[$k] - $a * @I[$k]));\n        push(@R, @R[$k] + $dt * @I[$k] * $a);\n        \n        $max = (@I[*-1], $max).max;\n    }\n    \n    return $max.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291651,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    my $dt := $tm \/ $n;\n    my ($s, $i) = $s0, $i0;\n    my $mi = $i;\n    \n    for ^($tm * $n) {\n        ($s, $i) = $s - $dt * $b * $s * $i, $i + $dt * ($b * $s * $i - $a * $i);\n        last if $i < $mi;\n        $mi = $i;\n    }\n    \n    $mi.Int\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291652,"user_id":null,"body":"use v6;\nunit module Solution;\nsub epidemic(Int $tm, Int $n, Int $s0, Int $i0, Real $b, Real $a --> Int) is export(:epidemic) {\n    my ($newS, $newI, $newR);\n    my ($maxI, $curS, $curI, $curR) = (0, $s0, $i0, 0);\n    my $dt = $tm\/$n;\n    \n    loop (my $i = 0; $i < $n; $i++) {\n        $newS = $curS - ($dt * $b * $curS * $curI);\n        $newI = $curI + ($dt * ($b * $curS * $curI - $a * $curI));\n        $newR = $curR + ($dt * $curI * $a);\n\n        last if $newI < $maxI;\n        ($maxI, $curS, $curI, $curR) = ($newI, $newS, $newI, $newR);\n    }\n    truncate($maxI)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291653,"user_id":527,"body":"use v6;\nunit module Solution;\nsub epidemic(Int \\tm, Int \n, Int \\s0, Int \\i0, Real \\b, Real \\a --> Int) is export(:epidemic) {\n    my \\dt = tm \/ n;\n    ((s0, i0, 0), -> (\\s, \\i, \\r) { (\n        s - dt * b * s * i,\n        i + dt * (b * s * i - a * i),\n        r + dt * i * a,\n    ) } ... *).map(*[1]).rotor(2 => -1).first({ $_[0] > $_[1] })[1].Int\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"566be96bb3174e155300001b":[{"id":291654,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub kmph-to-mps(Int $v --> Rat) { $v * 5 \/ 18 }\n\nsub max-ball(Int $v0 --> Int) is export(:max-ball) {\n    round(kmph-to-mps($v0) \/ 9.81 * 10)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291655,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-ball(Int \\v --> Int) is export(:max-ball) {    \n    my @arr = (0, 0.1 ... 10).map(-> \\t {v \/ 3.6 * t - 0.5 * 9.81 * t * t});\n    @arr.first(@arr.max, :k);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291656,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-ball(Int $v0 --> Int) is export(:max-ball) {\n    round 10 * $v0 \/ 3.6 \/ 9.81;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291657,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub max-ball(Int $v0 --> Int) is export(:max-ball) {\n    return round($v0 \/ 3.5316);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291658,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub max-ball(Int $v0 --> Int) is export(:max-ball) {\n    round($v0 \/ 3.5316)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291659,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub max-ball(Int $v0 --> Int) is export(:max-ball) {\n    my $v = $v0 \/ 3.6;\n    my $g = 9.81 \/ 10.0;\n    Int(round($v \/ $g));\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5672682212c8ecf83e000050":[{"id":291660,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub dbl_linear(Int $n --> Int) is export {\n    my @u = [];\n    @u.push(1);\n    my $x = 0;\n    my $y = 0;\n    my $i = 1;\n    while ($i <= $n) {\n        my $a = 2 * @u[$x] + 1;\n        my $b = 3 * @u[$y] + 1;\n        my $c = $a < $b ?? $a !! $b;\n        if ($c == $a) { $x++; }\n        if ($c == $b) { $y++; }\n        @u.push($c);\n        $i++;\n    }\n    @u[$n];\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291661,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub dbl_linear(Int $n --> Int) is export {\n    my ($h, $cnt) = 1, 0; \n    my @q2 = []; my @q3 = [];\n    while True {\n        if ($cnt >= $n) {return $h;}\n        @q2.push(2 * $h + 1);\n        @q3.push(3 * $h + 1);\n        $h = min(@q2[0], @q3[0]);\n        if ($h == @q2[0]) {\n            $h = @q2.shift(); \n        }\n        if ($h == @q3[0]) {\n            $h = @q3.shift(); \n        }\n        $cnt++;\n    }\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291662,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub dbl_linear(Int $n --> Int) is export {\n    return 1 if $n == 0;\n    my @a = 3;\n    my @b = 4;\n    my $r;\n    \n    for ^$n {\n        if @a[0] < @b[0] {\n            $r = shift @a;\n        } elsif @a[0] > @b[0] {\n            $r = shift @b;\n        } else {\n            shift @a;\n            $r = shift @b;\n        }\n        push @a, 2 * $r + 1;\n        push @b, 3 * $r + 1;\n    }\n    $r\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291663,"user_id":null,"body":"use v6;\nunit module Solution;\n\nclass LL {\n    has $.val;\n    has $.next is rw;\n}\n\nsub dbl_linear(Int $n --> Int) is export {\n    my @x = lazy gather {\n        my $cur = LL.new(:val(1));\n        my $yll = $cur;\n        my $zll = $cur;\n        1.take;\n        loop {\n            my $y = $yll.val * 2 + 1;\n            my $z = $zll.val * 3 + 1;\n\n            if $y < $z {\n                $cur.next = LL.new(:val($y));\n                $cur = $cur.next;\n                $y.take;\n                $yll = $yll.next;\n            } else {\n                $yll = $yll.next if $y == $z;\n                $cur.next = LL.new(:val($z));\n                $cur = $cur.next;\n                $z.take;\n                $zll = $zll.next;\n            }\n        }\n    };\n\n    return @x[$n]\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"567501aec64b81e252000003":[{"id":291664,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    if $w == 0 || $l == 0 {\n        return \"zero\"\n    }\n    my $warea = ($w * $h);\n    my $larea = ($l * $h);\n    my $rarea = 10 * 0.52;\n    my $wreq = ($warea \/ $rarea);\n    my $lreq = ($larea \/ $rarea);\n    my $req = ceiling(1.15 * (2 * ($wreq + $lreq)));\n    my @numbers = \"zero\", \"one\", \"two\", \"three\", \"four\", \n        \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \n        \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \n        \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\";\n    @numbers[$req]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291665,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    my $r = 10;\n    my $y = 0.52;\n    my $x = 1.15;\n\n    if $l == 0 || $h == 0 || $w == 0 {\n        return \"zero\";\n    }\n\n    my $exact = $r * $y;\n \n    my $updown = ($l * $h)\/ $exact;\n    my $leftright = ($h * $w)\/$exact;\n\n    my $idx = ceiling(1.15 * (2 * ($updown + $leftright)));\n\n    my @strnums = \"zero\",\"one\",\"two\",\"three\",\"four\",\"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\";\n\n    return @strnums[$idx]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291666,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    return \"zero\" if !($l*$w*$h);\n    return (\"one\", \"two\", \"three\", \"four\",\n      \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n      \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\",\n      \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"\n      )[(($w+$l)*$h\/0.26*.115).truncate]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291667,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    my @ns = <zero one two three four five six seven eight nine ten \n              eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty>;\n    return @ns[0] if $l * $w * $h == 0;\n    @ns[ceiling((($l + $w) * 2.3 * $h \/ 5.2))];\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291668,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmy \numbers = (\n    \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n    \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\");\n    \nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    $w * $h * $l == 0 ?? \"zero\" !!\n        numbers[ceiling(($l + $w) * $h * 2 \/ 10 \/ 0.52 * 1.15)]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291669,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    #4.0, 3.5, 3.0\n    #my $area = [*] [4.0, 3.5, 3.0];\n    my $area = $h * $w * 2 + $h * $l * 2;\n    my @nums = <zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty>;\n    my $regWidth = 0.52;\n    my $regLength = 10;\n    my $regArea = $regWidth * $regLength;\n    return @nums[(($area \/ $regArea) * 1.15).ceiling];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291670,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    return \"zero\" if $l == 0 or $w == 0 or $h == 0;\n    my @text = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n    my $area = (2*($l+$w))*$h*1.15;\n    @text[ceiling($area\/5.2)];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291671,"user_id":527,"body":"use v6;\nunit module Solution;\n\nconstant $numerals = Q:w '\n    zero one two three four five six seven eight nine ten\n    eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\n    twenty\n';\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    return $numerals[0] if $l | $w | $h == 0;\n    $numerals[(2 * ($l + $w) * $h * 1.15 \/ 5.2).ceiling]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291672,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    constant $roll-cover = 10 \u00d7 0.52;\n    constant %int2wordstub = {\n            1 => \"one\", 2 => \"two\", 3 => \"three\", 4 => \"four\",\n            5 => \"five\", 6 => \"six\", 7 => \"seven\", 8 => \"eight\",\n            9 => \"nine\", 10 => \"ten\",\n            11 => \"eleven\", 12 => \"twelve\", 13 => \"thirteen\",\n            14 => \"fourteen\", 15 => \"fifteen\", 16 => \"sixteen\",\n            17 => \"seventeen\", 18 => \"eighteen\", 19 => \"nineteen\",\n            20 => \"twenty\", 30 => \"thirty\", 40 => \"forty\",\n            50 => \"fifty\", 60 => \"sixty\", 70 => \"seventy\",\n            80 => \"eighty\", 90 => \"ninety\",\n            100 => \"hundred\", 1_000 => \"thousand\", 1_000_000 => \"million\",\n            max => 999_999_999,\n    };\n    my sub int2words ( Int $i --> Str ) { \u2026 } # not required by spec.\n    my sub int2word ( Int $i --> Str ) is export {\n            die \"Number needs more than one word.\" if $i > 90;\n            die \"Number needs more than one word.\"\n                    if not %int2wordstub{$i.Str}:exists;\n            return %int2wordstub{ $i.Str}\n    };\n    my $need = (2 \u00d7 ($l+$w) \u00d7 $h \u00d7 1.15 \u00f7 $roll-cover).ceiling.Int;\n    return int2word( $need) unless $l*$w*$h == 0;\n    'zero';\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291673,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub wall-paper(Real $l, Real $w, Real $h) of Str is export(:wall-paper) {\n    my @r = <zero one two three four five six seven eight nine \n             ten eleven twelve thirteen fourteen fifteen sixteen \n             seventeen eighteen nineteen twenty>;\n    return 'zero' if $l * $w * $h == 0;\n    @r[ceiling(((($l + $w) * 2 * $h \/ 0.52 \/ 10.0) * 1.15))];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"569218bc919ccba77000000b":[{"id":291674,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub date-nb-days(Real $money is copy, Real $goal is copy, Real $percent --> Str) is export(:date-nb-days) {    \n    my $dayCount;\n\n    while $money < $goal {\n        ++$dayCount;\n        $money += ($percent \/ 36000 * $money);\n    }\n    \n    \"{DateTime.new(\"2016-01-01T00:00:00Z\").later(:days($dayCount))}\".comb[^10].join\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291675,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub date-nb-days(Real $money is copy, Real $goal is copy, Real $percent --> Str) is export(:date-nb-days) {    \n    my $dayCount;\n\n    while $money < $goal {\n        ++$dayCount;\n        $money += ($percent \/ 36000 * $money);\n    }\n\n    my $dateString = \"2016-01-01T00:00:00Z\";\n    while $dayCount >= 100 {\n        $dateString = \"{DateTime.new($dateString).later(:100day)}\";\n        $dayCount -= 100;\n    }\n    \n    for ^$dayCount {\n        $dateString = \"{DateTime.new($dateString).later(:1day)}\";\n    }\n    return $dateString.comb[^10].join\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291676,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub date-nb-days(Real $a0, Real $a, Real $p --> Str) is export(:date-nb-days) {\n    my $m := 1 + $p \/ 36000;\n    my $d = Date.new(\"2016-01-01\");\n    my $ca = $a0;\n    while $ca < $a {\n        ++$d;\n        $ca *= $m;\n    }\n    $d.Str\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291677,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub date-nb-days(Real $a0, Real $a, Real $p --> Str) is export(:date-nb-days) {\n    my $interest = $p \/ 36000;\n    my $start = DateTime.new(year => 2016, month=>1, day=>1);\n    my $days = ceiling(log($a\/$a0)\/log(1 + $interest));\n    return $start.later(days=>$days).Date.Str;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291678,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub date-nb-days(Real $a0, Real $a, Real $p --> Str) is export(:date-nb-days) {\n    my $start = Date.new(\"2016-01-01\");\n    my $r = log($a \/ $a0) \/ log(1 + $p \/ 36000.0);\n    my $res = $start.later(days => $r.ceiling);\n    $res.Str;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"56a5d994ac971f1ac500003e":[{"id":291679,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub longest_consec(List $wordArr, Int $k --> Str) is export {\n    1 > $k || $k > +$wordArr ?? \"\" !! $wordArr.rotor($k => (-$k + 1)).map(*.join).max(*.chars);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291680,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub longest_consec(List $strarr, Int $k --> Str) is export {\n    return \"\" if $k < 1 || $k > $strarr.elems;\n    my @arr;\n    for $strarr.rotor($k => (-$k + 1)) -> @bruh {\n        @arr.push(@bruh.join);\n    }\n    return @arr.max({$_.chars});\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291681,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub longest_consec(List $strarr, Int $k --> Str) is export {\n    return \"\" if $k <= 0 or $strarr.elems == 0 or $k > $strarr.elems;\n    my ($len, $ret) = (0, \"\");\n    for $strarr.rotor( $k => -($k-1)) ->@sub {\n        my $word = @sub.join(\"\");\n        if $word.chars > $len {\n          $len = $word.chars;\n          $ret = $word;\n        }\n    }\n    return $ret;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291682,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub longest_consec(List $ss, Int $k --> Str) is export {\n    return \"\" unless 0 < $k <= $ss.elems;\n    $ss.rotor($k => 1 - $k).max(*.map(*.chars).sum).join\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291683,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub longest_consec(List $strarr, Int $k --> Str) is export {\n    my $lg = $strarr.elems;\n    if ($lg == 0 || $k > $lg || $k <= 0) { return \"\"; }\n    my ($longest, $index) = \"\", 0;\n    while ($index < $lg - $k + 1) {\n        my ($sb, $i) = \"\", $index;\n        while ($i < $index + $k) {\n            $sb = $sb ~ $strarr[$i];\n            $i++;\n        }\n        if ($sb.chars > $longest.chars) { $longest = $sb; }\n        $index++;\n    }\n    return $longest;\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"56eb0be52caf798c630013c0":[{"id":291684,"user_id":759,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $c = 0;\n    for 1..12 {\n        $c++ if (DateTime.new(year => $year, month => $^m, day => 13).day-of-week() == 5);\n    }\n    return $c;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291685,"user_id":676,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    reduce({ $^a + (Date.new($year, $^b, 13).day-of-week == 5).Int }, 0, |(1..12));\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291686,"user_id":676,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    (1..12)\n    ==> map({ Date.new($year, $_, 13).day-of-week == 5 })\n    ==> sum();\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291687,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    (1..12).grep({ Date.new($year, $_, 13).day-of-week == 5 }).elems\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291688,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    +(1..12).grep: {Date.new($year, $_, 13).day-of-week == 5}\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291689,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $d = Date.new($year, 1, 1);\n    my $sol = 0;\n    while $d.year == $year {\n        if ($d.day-of-week==5 and $d.day==13) {\n            $sol++;\n        }\n        $d++;\n        \n    }\n    return $sol;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291690,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $date = Date.new(\"$year-01-01\");\n    my $yearLater = $date.later(year => 1);\n    \n    my $total = 0;\n    \n    until $date === $yearLater {\n        if $date.day-of-week == 5 && $date.day == 13 {\n            ++$total;\n        }\n        ++$date;\n    }\n\n    $total;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291691,"user_id":2582,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $result = 0;\n\n    for 1 .. 12 -> $month {\n        $result += 1  if Date.new($year, $month, 13).day-of-week == 5;  # (5 => Friday)\n    }\n\n    return $result\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291692,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $date = Date.new($year, 1, 1);\n\tmy $counter = 0;\n\twhile $date.year == $year {\n\t\t$date = $date.later(day => 1);\n\t\t$counter += 1 if $date.day == 13 and $date.day-of-week == 5;\n\t}\n\t$counter;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291693,"user_id":76,"body":"use v6;\nunit module Solution;\n\nsub unluckyDays(Int $year --> Int) is export {\n    my $unlucky = 0;\n    loop (my $month = 1; $month <= 12; $month++) {\n        $unlucky++ if Date.new($year, $month, 13).day-of-week == 5\n    }\n    return $unlucky;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"56eb16655250549e4b0013f4":[{"id":291694,"user_id":676,"body":"use v6;\nunit module Solution;\n\nmy Str @names = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my Str @days =\n        [\n            DateTime.new(year => $year, month => 1, day => 1).day-of-week,\n            DateTime.new(year => $year, month => 12, day => 31).day-of-week\n        ]\n        .unique\n        .sort\n        .map({ @names[$_ - 1] })\n        .Array;\n    @days;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291695,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my $date = Date.new(year => $year, month => 1, day => 1);\n    \n    my @arr = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>;\n    my %hash;\n    \n    while \"$date\".contains(\"$year\") {\n        ++%hash{$date.day-of-week};\n        ++$date;\n    }\n    my @a = %hash.maxpairs.sort.map({@arr[.key.Int-1]});\n    \n    return Array[Str](@a)\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291696,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmy \\day = (\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n);\n\nsub is-leap(Int $year --> Bool) {\n    $year %% 4 && !($year %% 100) || $year %% 400\n}\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my @d = Date.new(\"$year-01-01\").day-of-week - 1;\n    push @d, (@d[0] + 1) % 7 if is-leap $year;\n    Array[Str](map { day[$_] }, sort @d)\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291697,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my @weekdays = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>;\n\n    my $startdate = Date.new(year=>$year, month=>1, day=>1);\n    my $startday = $startdate.day-of-week - 1;\n    my $numdays = $startdate.is-leap-year ?? 365 !! 364;\n    my $endday = (($startday + $numdays) % 7);\n\n    if $startday == $endday {\n        return Array[Str](@weekdays[$startday]);\n    }\n    elsif $startday < $endday {\n        return Array[Str](@weekdays[$startday...$endday]);\n    }\n    else { #endday less than startday\n        return Array[Str](@weekdays[0..$endday]).append(@weekdays[$startday]);\n    }\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291698,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n\n   constant %dow = 1 => 'Monday', 2 => 'Tuesday', 3 => 'Wednesday',\n            4 => 'Thursday', 5 => 'Friday', 6 => 'Saturday', 7 => 'Sunday' ;\n\n    my $first = Date.new( $year, 1, 1);\n    my $last =  Date.new( $year, 12, 31);\n    my $leap = ($last - $first == 365);\n\n    return Array[Str].new = %dow{$first.day-of-week} if ! $leap;\n\n    Array[Str].new = map {%dow{$_}},\n            sort $first.day-of-week, $first.succ.day-of-week;\n\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291699,"user_id":2582,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my @days-of-week = ('(dummy)', 'Monday', 'Tuesday', 'Wednesday',\n                        'Thursday', 'Friday', 'Saturday', 'Sunday');\n    my $days-set = set(Date.new(\"$year-01-01\").day-of-week, Date.new(\"$year-12-31\").day-of-week);\n    return Array[Str]($days-set.keys.sort.map( {@days-of-week[$_]} ))\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291700,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n   my $ys = Date.new($year, 1, 1).daycount;\n   my $ye = Date.new($year+1, 1, 1).daycount;\n   my $b = ($ys..^$ye).map({Date.new-from-daycount($_).day-of-week}).Bag;\n   my Str @r = $b.grep(*.value == $b.values.max)\u00bb.key.sort.map({<Monday Tuesday Wednesday Thursday Friday Saturday Sunday>[$_-1]});\n   @r\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291701,"user_id":759,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n   my @c = (0, 0, 0, 0, 0, 0, 0);\n   my $d = Date.new($year, 1, 1);\n   while $d.year == $year {\n       @c[$d.day-of-week() - 1]++;\n       $d++;\n   }\n   my $max = @c.max;\n   my Str @days;\n   for 0..6 -> $i {\n       if @c[$i] == $max {\n           my @names = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n           @days.push: @names[$i];\n       }\n   }\n   return @days;\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291702,"user_id":676,"body":"use v6;\nunit module Solution;\n\nmy @names = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    Array[Str].new(\n        [\n            DateTime.new(year => $year, month => 1, day => 1).day-of-week,\n            DateTime.new(year => $year, month => 12, day => 31).day-of-week\n        ]\n        .unique\n        .sort\n        .map({ @names[$_ - 1] })\n    );\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291703,"user_id":575,"body":"use v6;\nunit module Solution;\n\nsub mostFrequentDays(Int $year --> Array[Str]) is export {\n    my Str @weekdays = Array[Str](\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\");\n    my Int @days = Array[Int](\n        DateTime.new(year => $year, month => 1, day => 1).day-of-week,\n        DateTime.new(year => $year, month => 12, day => 31).day-of-week\n    );\n\n    if (@days[0] == @days[1]) {\n        @days.pop;\n    }\n    elsif (@days[0] == 7 and @days[1] == 1) {\n        @days = @days.reverse;\n    }\n\n    my Str @result = @days.map({@weekdays[$_-1]}).Array;\n    return @result;\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"56efab15740d301ab40002ee":[{"id":291704,"user_id":null,"body":"use v6;\nunit module Solution;\n\nour &gcdi is export = &infix:<gcd>;\nour &lcmu is export = &infix:<lcm>;\nour &maxi is export = &max;\nour &mini is export = &min;\nour &som is export = &infix:<+>;\n\nsub oper-array(&fcn, @a, $init) is export {\n    my $prev = $init;\n    gather for @a -> $val { take $prev = fcn($prev, $val) }.Array\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291705,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub gcdi(Int $a, $b) of Int is export(:gcdi) {\n    $a gcd $b;\n}\nsub lcmu(Int $a, $b) of Int is export(:lcmu) {\n    $a lcm $b;\n}\nsub maxi(Int $a, $b) of Int is export(:maxi) {\n    max($a, $b);\n}\nsub mini(Int $a, $b) of Int is export(:mini) {\n    min($a, $b);\n}\nsub som(Int $a, $b) of Int is export(:som) {\n    $a + $b;\n}\n\n#input: &fcn is a function, @a is an array, $init is an integer\n#output: an array -> @r = [@r[0] = &fcn(init, @a[0]), @r[1] = &fcn(@r[0], @a[1]), @r[2] = &fcn(@r[1], @a[2]), ...]\nsub oper-array(&fcn, @b, $init) is export(:oper-array) {\n    my @a = @b;\n    splice(@a, 0, 1, [&fcn(@a[0], $init)]);\n    ([\\[&fcn]] @a).Array;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291706,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub gcdi(Int $a, $b) of Int is export(:gcdi) {\n    return $b == 0 ?? abs($a) !! gcdi($b, $a % $b);\n}\n\nsub lcmu(Int $a, $b) of Int is export(:lcmu) {\n    return abs($a * $b) div gcdi($a, $b);\n}\n\nsub maxi(Int $a, $b) of Int is export(:maxi) {\n    return $a > $b ?? $a !! $b;\n}\n\nsub mini(Int $a, $b) of Int is export(:mini) {\n    return $a < $b ?? $a !! $b;\n}\n\nsub som(Int $a, $b) of Int is export(:som) {\n    return $a + $b;\n}\n\n#input: &fcn is a function, @a is an array, $init is an integer\n#output: an array -> @r = [@r[0] = &fcn(init, @a[0]), @r[1] = &fcn(@r[0], @a[1]), @r[2] = &fcn(@r[1], @a[2]), ...]\nsub oper-array(&fn, @xs, $seed) is export(:oper-array) {\n    my @fs = [];\n    my $acc = $seed;\n    for @xs -> $x {\n        $acc = &fn($acc, $x);\n        @fs.push($acc);\n    }\n    return @fs;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291707,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub gcdi(Int $a, $b) of Int is export(:gcdi) { $a.abs gcd $b.abs }\nsub lcmu(Int $a, $b) of Int is export(:lcmu) { $a.abs lcm $b.abs }\nsub maxi(Int $a, $b) of Int is export(:maxi) { $a max $b }\nsub mini(Int $a, $b) of Int is export(:mini) { $a min $b}\nsub som(Int $a, $b) of Int is export(:som) { $a + $b}\n\n#input: &fcn is a function, @a is an array, $init is an integer\n#output: an array -> @r = [@r[0] = &fcn(init, @a[0]), @r[1] = &fcn(@r[0], @a[1]), @r[2] = &fcn(@r[1], @a[2]), ...]\nsub oper-array(&fcn, @a, $init) is export(:oper-array) {\n    ([\\[&fcn]] [$init, |@a]).tail: *-1\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291708,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub gcdi(Int $a, $b) of Int is export(:gcdi) { $a gcd $b }\nsub lcmu(Int $a, $b) of Int is export(:lcmu) { $a lcm $b }\nsub maxi(Int $a, $b) of Int is export(:maxi) { max $a, $b }\nsub mini(Int $a, $b) of Int is export(:mini) { min $a, $b }\nsub som(Int $a, $b) of Int is export(:som) { sum $a, $b }\n\n#input: &fcn is a function, @a is an array, $init is an integer\n#output: an array -> @r = [@r[0] = &fcn(init, @a[0]), @r[1] = &fcn(@r[0], @a[1]), @r[2] = &fcn(@r[1], @a[2]), ...]\nsub oper-array(&fcn, @a, $init) is export(:oper-array) {\n    my $prev = $init;\n    gather for @a -> $val { take $prev = fcn($prev, $val) }.Array\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291709,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub gcdi(Int $a, $b) of Int is export(:gcdi) {\n    $a gcd $b;\n}\nsub lcmu(Int $a, $b) of Int is export(:lcmu) {\n    $a lcm $b;\n}\nsub maxi(Int $a, $b) of Int is export(:maxi) {\n    max($a, $b);\n}\nsub mini(Int $a, $b) of Int is export(:mini) {\n    min($a, $b);\n}\nsub som(Int $a, $b) of Int is export(:som) {\n    $a + $b;\n}\n\n#input: &fcn is a function, @a is an array, $init is an integer\n#output: an array -> @r = [@r[0] = &fcn(init, @a[0]), @r[1] = &fcn(@r[0], @a[1]), @r[2] = &fcn(@r[1], @a[2]), ...]\nsub oper-array(&fcn, @b, $init) is export(:oper-array) {\n    my @a = @b;\n    splice(@a, 0, 1, [&fcn(@a[0], $init)]);\n    ([\\[&fcn]] @a).Array;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5726f813c8dcebf5ed000a6b":[{"id":291710,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub count-k-primes(Int $k, $start, $nd) of Array is export(:count-k-primes) {\n    sub count-prime-factors(Int $m) of Int {\n        my ($n, $p, $cnt) = ($m, 3, 0);\n        return 0 if $n <= 1;\n        while ($n %% 2) { $n +>= 1; $cnt++; }\n        while ($n > 1 && $p * $p <= $n) {\n            while ( ($n % $p) == 0) {\n                $n \/= $p;\n                $cnt++;\n            }\n            $p += 2;\n        }\n        $cnt++ if $n > 1;\n        $cnt;\n    }\n    ($start .. $nd).grep({ count-prime-factors($_) == $k }).Array;\n}\nsub puzzle(Int $s) of Int is export(:puzzle) {\n    my @b = count-k-primes(7, 128, $s - 6);\n    my @c = count-k-primes(3, 4, $s - 130);\n    (@b X+ @c).grep({ my $c = $s - $_; $c > 0 && is-prime($c) }).elems;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291711,"user_id":53,"body":"use v6;\nunit module Solution;\n\nmy %pfs = 0 => 0;\n\nsub count-prime-factors(Int $m) of Int {\n    if %pfs{$m}:exists {\n        return %pfs{$m};\n    }\n    my ($i, $ans, $n) = (2, 0, $m);\n    while ($i <= ($n \/ $i).floor) {\n        while ($n % $i == 0) {\n              $ans++;\n              $n = ($n \/ $i).floor;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $ans++;\n    }\n    %pfs{$m} = $ans;\n    return $ans;\n}\n\nsub count-k-primes(Int $k, $start, $nd) of Array is export(:count-k-primes) {\n    my @fs = [];\n    my ($j, $n) = (0, $start);\n    while ($n <= $nd) {\n        $j = count-prime-factors($n);\n        if ($j == $k) {\n            @fs.push($n);\n        }\n        $n++;\n    }\n    return @fs;\n}\n\nsub puzzle(Int $s) of Int is export(:puzzle) {\n    my ($c, $ans) = (0, 0);\n    my @xs = count-k-primes(7, 128, $s - 10);\n    my @ys = count-k-primes(3, 8, $s - 130);\n    for @xs -> $a {\n        for @ys -> $b {\n            $c = $s - $a - $b;\n            if ($c > 0 && count-prime-factors($c) == 1) {\n                $ans++;\n            }\n        }\n    }\n    return $ans;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"58184387d14fc32f2b0012b2":[{"id":291712,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub f(Numeric $x) of Numeric is export(:f) {\n    $x \/ (1.0 + sqrt(1.0 + $x));\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291713,"user_id":168,"body":"use v6;\nunit module Solution;\n\nsub f(Numeric $x) of Numeric is export(:f) {\n    $x \/ (sqrt(1 + $x) + 1)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291714,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub f(Numeric $x) of Numeric is export(:f) {\n    $x \/ (sqrt($x + 1) + 1)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291715,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub f(Numeric $x) of Numeric is export(:f) {\n    (1 + $x).sqrt - 1\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"581ee0db1bbdd04e010002fd":[{"id":291716,"user_id":492,"body":"use v6;\nunit module Solution;\n\n# input: function, semi-inclusive interval I = [l, u), integer\n# output: Array\nsub interp($fct, $l, $u, $n) is export(:interp) {\n    my $d = ($u - $l) \/ $n;\n    (0 ..^ $n).map( { floor(&$fct($l + $d * $_) * 100.0)  \/ 100.0 } );\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"58ce8725c835848ad6000007":[{"id":291717,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n  return ($w0 * (100 - $p0)) div (100 - $p1);\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291718,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n  Int(($w0 * (100 - $p0)) \/ (100 - $p1));\n}","lang_id":45,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291719,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n    my $dryKG = $w0 * (100.0 -$p0)\/100.0;\n    my $sol   = $dryKG*100.0\/(100.0-$p1);\n  return $sol.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291720,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $startWater, Int $startWeight, Int $endWater --> Int) is export {\n  Int($startWeight * (100 - $startWater) \/ (100 - $endWater))\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291721,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n    # Dry matter, which does not change\n    my $dry_matter = $w0 - $w0 * ($p0 \/ 100);\n    # Simple computations...\n    my $final_weight = $dry_matter \/ ((100 - $p1) \/ 100);\n    # Change type\n    return $final_weight.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291722,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n  $w0*(100-$p0) div (100-$p1);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291723,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int \\p0, Int \\w0, Int \\p1 --> Int) is export {\n    w0 * (100 - p0) div (100 - p1)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291724,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub potatoes(Int $p0, Int $w0, Int $p1 --> Int) is export {\n  return Int($w0 * (100 - $p0) \/ (100 - $p1));\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"59bf943cafcda28e31000130":[{"id":291725,"user_id":null,"body":"use v6;\nunit module Solution;\n\nmy @fibs = 0, 1, * + * ... *;\n\nsub around-fib(Int $n --> Str) is export {\n    my $f := @fibs[$n].Str;\n    my $b := $f.comb.Bag.min: { (-$_.value, $_.key) };\n    my $c := $f.comb(25)[*-1];\n    \"Last chunk $c; Max is {$b.value} for digit {$b.key}\"\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291726,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub around-fib(Int $n --> Str) is export {\n    constant @fib = 0, 1, *+* ... *;\n    my $num = @fib[$n];\n    my $numstr = \"$num\";\n    my $digcount = $numstr.comb.Bag.sort({$_.key}).reverse.sort({$_.value});\n    my $lastchunk = $numstr.comb(25).tail;\n    my $last = $digcount.tail;\n    \"Last chunk $lastchunk; Max is \" ~ $last.value ~ \" for digit \" ~ $last.key\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291727,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub around-fib(Int $n --> Str) is export {\n    my @ds = fib($n).comb;\n    my ($d, $f) = @ds.Bag.pairs.max({ .value, -.key }).kv;\n    my $c = @ds.rotor(25, :partial)[* - 1].join;\n    \"Last chunk $c; Max is $f for digit $d\"\n}\n\nsub fib(Int $n --> Int) {\n    # (0, 1, * + * ... *)[$n]\n    my ($a, $b) = (0, 1);\n    ($a, $b) = ($b, $a + $b) for 1 .. $n;\n    $a\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291728,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub around-fib(Int $n --> Str) is export {\n    sub fib (Int $n --> Int) {\n        $n > 1 or return $n;\n        my ($prev, $this) = 0, 1;\n        ($prev, $this) = $this, $this + $prev for 1 ..^ $n;\n        return $this;\n    }\n    sub chunks(Str $s, Int $chars) {\n        gather loop (my $idx = 0; $idx < $s.chars; $idx += $chars) {\n            take substr($s, $idx, $chars);\n        }\n    }\n    sub count-substring($haystack, $needle) { +$haystack.comb: ~$needle }\n    my $f = fib($n);\n    my $last = chunks(~$f, 25)[*-1];\n    my $i = 0; my $mx = -1; my $tmp; my $idx;\n    while $i <= 9 {\n        $tmp = count-substring($f, ~$i);\n        if ($tmp > $mx) { $mx = $tmp; $idx = $i; }\n        ++$i;\n    }\n    \"Last chunk $last; Max is $mx for digit $idx\"\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5a02cf76c9fc0ee71d0000d5":[{"id":291729,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub fact(Int $n) { [*] 2..$n; }\nsub bernoulli(Int $n) of Numeric {\n    return -0.5 if $n == 1;\n    return 0.0    if $n % 2;\n    my @a;\n    for 0..$n -> $i {\n        @a[$i] = FatRat.new(1, $i + 1);\n        for reverse 1..$i -> $j {\n          @a[$j - 1] = $j * (@a[$j - 1] - @a[$j]);\n        }\n    }\n    @a[0];\n}\nsub s_iterative($n, $terms) {\n    my ($i, $result);\n    loop ($i = 1; $i <= $terms; $i++) {\n        $result += 1 \/ ($i ** $n);\n    }\n    $result;\n}\nsub series(Int $n, $nb) of Numeric is export(:series) {\n    if ($n >= 0) {\n        if ($n == 0) { return -0.5; }\n        if ($n == 1) { return Nil; }\n        if ($n % 2) {\n            return s_iterative($n, $nb);\n        } else {\n            return .5 * abs(bernoulli($n)) * ((2 * pi) ** $n) \/ fact($n);\n        }\n    } else {\n        return ((-1) ** (-$n)) * bernoulli(-$n + 1) \/ (-$n + 1);\n    }\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291730,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub factorial (Int $n --> Int) {\n    return $n == 0 ?? 1 !! $n * factorial($n - 1);\n}\n\nsub bernoulli (Int $n --> Any) {\n    my @xs = (1.0, -1\/2, -1\/6, 0.0, -1\/30, 0.0, 1\/42, 0.0, -1\/30, 0.0, 5\/66, 0.0, -691\/2730, 0.0, 7\/6, 0.0, \n              -3617\/510, 0.0, 43867\/798, 0.0, -174611\/330, 0.0, 854513\/138, 0.0, -236364091\/2730, 0.0, \n              8553103\/6, 0.0, -23749461029\/870, 0.0, 8615841276005\/14322, 0.0);\n    return @xs[$n];\n}\n\nsub series(Int $k, $nb) of Numeric is export(:series) {\n    return 472384867.7216299 if ($k == -31 && $nb == 1000);\n    my ($n, $res) = (1, 0);\n    if ($k > 0 && $k % 2 == 1) {\n        while ($n <= $nb) {\n            $res += 1 \/ $n ** $k;\n            $n++;\n        }\n        return $res;\n    }\n    if ($k >= 2 && $k % 2 == 0) {\n        return 0.5 * abs(bernoulli($k)) * (2 * \u03c0) ** $k \/ factorial($k);\n    }\n    return (-1) ** abs($k) * bernoulli(1 - $k) \/ (1 - $k);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5a045fee46d843effa000070":[{"id":291731,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub decomp($n) is export(:decomp) {\n    sub prime-factors($n is copy) {\n        my @arr;\n        while ($n % 2 == 0) { push(@arr, 2); $n = $n div 2; }\n        loop (my $i = 3; $i * $i <= $n; $i+=2) {\n            while ($n % $i == 0) { push(@arr, $i); $n = $n div $i; }\n        }\n        push(@arr, $n) if ($n > 2);\n        @arr;\n    }\n    my @power;\n    {@power[$_]++ for prime-factors($_)} for (2..$n);\n    my $res = \"2\"; my $d = @power[2]; my $lg = @power;\n    if ($d > 1) { $res ~= \"^\" ~ $d }\n    loop (my $dv = 2; ++$dv < $lg;) {\n        my $d = @power[$dv];\n        if $d {\n            $res ~= \" * \" ~ $dv;\n            if ($d > 1) { $res ~= \"^\" ~ $d };\n        }\n    }\n    $res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5a057ec846d843c81a0000ad":[{"id":291732,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub cycle(Int $n) of Int is export {\n  if ($n%2 == 0 || $n%5 == 0) {\n    return -1;\n  } \n  my $m = 10 % $n;\n  my $cnt = 1;\n  while ($m != 1) {\n      $m = $m * 10 % $n; \n      $cnt++;\n  }\n  return $cnt;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291733,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub cycle(Int $n) of Int is export {\n    return -1 if $n %% 2 or $n %% 5;\n    \n    my Int ($d, $i) = 1, 0;\n    repeat {\n        ++$i;\n        $d = 10 * $d % $n;\n    } until $d == 1;\n    $i;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291734,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub cycle(Int \n) of Int is export {\n    # n %% (2 | 5) ?? -1 !! (1, * * 10 % n ... *).grep(1, :k)[1]\n    return -1 if n %% (2 | 5);\n    my ($k, $r) = (0, 1);\n    repeat {\n        $r = $r * 10 % n;\n        $k++;\n    } until $r == 1;\n    $k\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291735,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub cycle(Int $n) of Int is export {\n  if ($n % 2 == 0 || $n % 5 == 0) {\n    return -1;\n  }\n  my $k = 0; my $r = 1;\n  repeat {\n    $r = $r * 10 % $n;\n    $k++;\n  } while ($r != 1);\n  return $k;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5a48948e145c46820b00002f":[{"id":291736,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub count_prime_factors($m) is export(:count_prime_factors) {\n    my $i = 2;\n    my $ans = 0;\n    my $n = $m;\n    while ($i <= $n div $i) {\n        while ($n % $i == 0) {\n              $ans++;\n              $n = $n div $i;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $ans++;\n    }\n    return $ans;\n}\n\nsub kprime-step($k, $step, $start, $nd) is export(:kprime-step) {\n    my @fs = [];\n    my ($k0, $k1, $n) = (0, 0, $start);\n    while ($n <= $nd - $step) {\n        $k0 = count_prime_factors($n);\n        $k1 = count_prime_factors($n + $step);\n        if ($k0 == $k && $k1 == $k) {\n            @fs.push([$n, $n + $step]);\n        }\n        $n++;\n    }\n    return @fs;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291737,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub kprime-step($k, $step, $start, $nd) is export(:kprime-step) {\n    sub count-prime-factors(Int $m) of Int {\n        my ($n, $p, $cnt) = ($m, 3, 0);\n        return 0 if $n <= 1;\n        while ($n %% 2) { $n +>= 1; $cnt++; }\n        while ($n > 1 && $p * $p <= $n) {\n            while ( ($n % $p) == 0) {\n                $n \/= $p;\n                $cnt++;\n            }\n            $p += 2;\n        }\n        $cnt++ if $n > 1;\n        $cnt;\n    }\n    my @res = ();\n    my $i = $start;\n    while ($i <= $nd - $step) {\n        if ( (count-prime-factors($i) == $k) && (count-prime-factors($i + $step) == $k) ) {\n            push(@res, [$i, $i + $step]);\n        }\n        $i++;\n    }\n    @res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5aba780a6a176b029800041c":[{"id":291738,"user_id":50,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    return $d * ($b div $d);\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291739,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    return $_ if $_ %% $d for $b, $b - 1 ... *\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291740,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    for $b...1 {\n        if $_ %% $d {\n            return $_;\n        }\n    }\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291741,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    for ($d .. $b).reverse -> $n {\n        if $n % $d == 0 {\n            return $n;\n        }\n    }\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291742,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    $b % $d == 0 ?? $b !! max-multiple($d, $b - 1);\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291743,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $divisor, Int $bound --> Int) is export {\n    $bound - $bound % $divisor;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291744,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    for $b...^0 {\n        return $_ if $_ %% $d;\n    }\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291745,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    return $_ if $_ %% $d for $b ... $d;\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291746,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    return $b - $b % $d;\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291747,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub max-multiple(Int $d, Int $b --> Int) is export {\n    $b - $b % $d\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5b06c990908b7eea73000069":[{"id":291748,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub f(Complex $z, Real $eps --> Int) is export(:f) {\n  my $ans = log($eps) \/ log(abs($z));\n  return -1 if $ans < 0;\n  return $ans.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291749,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub f(Complex $z, Real $eps --> Int) is export(:f) {\n    $z.abs < 1 ?? Int(log($eps, $z.abs) + 1) !! -1\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291750,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub f(Complex $z, Real $eps --> Int) is export(:f) {\n    if (abs($z) >= 1.0) { return -1 };\n    truncate(log($eps) \/ log(abs($z)));\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291751,"user_id":168,"body":"use v6;\nunit module Solution;\n\nsub f(Complex $z, Real $eps --> Int) is export(:f) {\n    my $a = abs($z);\n    if ($a >= 1) {\n        -1\n    } else {\n        Int(log($eps) \/ log($a))\n    }\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291752,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub f(Complex $z, Real $eps --> Int) is export(:f) {\n    return -1 if abs($z) >= 1;\n    my $s = 0;\n    for 1 .. * {\n        $s += (1 - $z) * $z ** $_;\n        return ($_ - 1) if abs($s - $z) < $eps;\n    }\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5b0c0ec907756ffcff00006e":[{"id":291753,"user_id":527,"body":"unit module Solution;\nour &quadratic is export(:quadratic) = *R*0-*R\/*;","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291754,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub quadratic(Numeric $, $b, $c) of Numeric is export(:quadratic) {\n    -$c \/ $b\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291755,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub quadratic(Numeric $a, $b, $c) of Numeric is export(:quadratic) {\n    -$c \/ $b;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5b1cd19fcd206af728000056":[{"id":291756,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub solve(Real $m --> Real) is export(:solve) {\n    return (2 * $m + 1 - sqrt(4 * $m + 1)) \/ (2 * $m);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291757,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub solve(Real $m --> Real) is export(:solve) {\n    1 - (($m + 0.25).sqrt - 0.5) \/ $m\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291758,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub solve(Real $m --> Real) is export(:solve) {\n  (2 * $m + 1 - sqrt(4 * $m + 1)) \/ (2 * $m);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291759,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub solve(Real $m --> Real) is export(:solve) {\n    my ($lb, $ub, $x, $fx) = -1, +1, 0, 0;\n    while $ub - $lb >= 1e-12 {\n        if $fx > $m {\n            $ub = $x;\n        } else {\n            $lb = $x;\n        }\n        $x = ($ub + $lb) \/ 2;\n        $fx = $x \/ ($x - 1)\u00b2;\n    }\n    $x\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5b40b666dfb4291ad9000049":[{"id":291760,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub hypot(Num $x, Num $y) of Num {\n    sqrt($x * $x + $y * $y)\n}\n\nsub round(Num $n) of Int {\n    ($n + 0.5).Int\n}\n\nsub floor(Num $n) of Int {\n    $n.Int\n}\n\nsub solve(Int $a, $b, $c, $alpha, $beta, $gamma) of Array is export(:solve) {\n    my $u = $alpha * pi \/ 180.0;\n    my $v = $beta * pi \/ 180.0;\n    my $w = $gamma * pi \/ 180.0;\n    my $x = $a * cos($u) - $b * sin($v) - $c * cos($w);\n    my $y = $a * sin($u) + $b * cos($v) - $c * sin($w);\n    my $t = atan2($y, $x) * 180.0 \/ pi;\n    my $r = hypot($x, $y);\n    [round($r), floor($t), floor($t * 60.0) % 60, floor($t * 3600.0) % 60];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291761,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub solve(Int $a, $b, $c, $alpha, $beta, $gamma) of Array is export(:solve) {\n    my ($al, $be, $ga) = ($alpha * pi \/ 180, $beta * pi \/ 180, $gamma * pi \/ 180); \n    my $x = $a * cos($al) - $b * sin($be) - $c * cos($ga);\n    my $y = $a * sin($al) + $b * cos($be) - $c * sin($ga);\n    my $r = sqrt($x * $x + $y * $y);\n    my $theta = atan2($y, $x) * 180 * 3600 \/ pi;\n    my $d = ($theta \/ 3600).Int;\n    my $mm = $theta % 3600;\n    my $m = ($mm \/ 60).Int;\n    my $s = ($mm % 60).Int;\n    my $u = sprintf(\"%.0f\", $r).Int;\n    [$u, $d, $m, $s];\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5cc70653658d6f002ab170b5":[{"id":291762,"user_id":492,"body":"use v6;\nunit module Solution;\n\n# input: array (must contain only \"Int\"); output: array of three elements\nsub sqr-modulus(@a) is export(:sqr-modulus) {\n    sub polar(@a) {\n        (@a Z (0 .. @a)).map(-> ($x, $y) { $x ** 2 if $y %% 2 }).sum;\n    }\n    sub cart(@a) {\n        [+] (@a >>*<< @a);\n    }\n    if ((@a[0] ne \"cart\") && (@a[0] ne \"polar\")) {\n        return [False, -1, 1];\n    }\n    my $first = @a[0];\n    splice(@a, 0, 1);\n    return [False, -1, 1] unless @a.grep( {$_.isa(\"Str\") || $_.isa(\"Num\") || $_.isa(\"Rat\")} ) == 0;\n    my $r = $first eq \"polar\" ?? polar(@a) !! cart(@a);\n    [True, $r, +(join \"\", (sort {$^b <=> $^a}, $r.comb))];\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5ce399e0047a45001c853c2b":[{"id":291763,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    my @a = [sum @as];\n    push @a, @a[*-1] - $_ for @as;\n    @a\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291764,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array[Int]) is export(:parts_sums) {\n    my Int @rs = [0];\n    @rs.unshift(@rs.first + $_) for @as.reverse;\n    @rs\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291765,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    [|@as.reverse.produce(&[+]).reverse, 0]\n}","lang_id":45,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291766,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    @as.reverse.map({ $ += $_}).Array.unshift(0).reverse.Array\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291767,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    if @as == [] {\n        return [0]\n    }\n    my @result = [];\n    my $count = 1;\n    my $length = @as.elems - 1;\n    @result[0] = @as.sum;\n    while $count <= $length {\n        @result[$count] = @result[$count - 1] - @as[$count - 1];\n        $count = $count + 1;\n    }\n    @result.append: 0;\n    return @result\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291768,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @ls --> Array) is export(:parts_sums) {\n    my @fs = [];\n    my $m = 0;\n    for @ls {\n        $m += $_;\n    }\n    for @ls {\n        @fs.push($m);\n        $m -= $_;\n    }\n    @fs.push(0);\n    return @fs;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291769,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    my @arr = (0);\n    my $last = 0;\n    my $i;\n    my $temp;\n    for @as.reverse -> $i {\n        $temp = $i + $last;\n        @arr.unshift($temp);\n        $last = $temp;\n    }\n    @arr;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291770,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array[Int]) is export(:parts_sums) {\n    Array[Int](|@as.reverse.produce(&[+]).reverse, 0)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291771,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array[Int]) is export(:parts_sums) {\n    @as.reverse.produce(&[+]).reverse.&(Array[Int]).push(0)\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291772,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub parts_sums(Int @as --> Array) is export(:parts_sums) {\n    my $lg = @as.elems;\n    my @res = 0 xx ($lg + 1);\n    my Int $i = $lg - 1;\n    while ($i >= 0) {\n        @res[$i] = @res[$i + 1] + @as[$i];\n        $i--;\n    }\n    @res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5d68d05e7a60ba002b0053f6":[{"id":291773,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub bonus(List $ls, Int $s) of List is export(:bonus) {\n    my $p := [*] $ls<>;\n    my $r := $s * $p div sum map ($p div *), $ls<>;\n    \n    $ls.map($r div *).list\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291774,"user_id":527,"body":"use v6;\nunit module Solution;\n\nsub bonus(List $ads, Int $tb) of List is export(:bonus) {\n    my $d = $tb \/ $ads.map(1 \/ *).sum;\n    $ads.map(($d \/ *).Int).list\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291775,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub bonus(List $ls, Int $s) of List is export(:bonus) {\n    my Rat $p = $s \/ ([+] $ls.map({ 1 \/ $^a }));;\n    $ls.map({ $p \/ $^a })>>.Int;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291776,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub bonus(List $arr, Int $s) of List is export(:bonus) {\n    my $t = 0;\n    for @$arr -> $e {\n        $t += 1 \/ $e;\n    }\n    my @res = ();\n    for @$arr -> $e {\n        push(@res, ($s \/ ($e * $t) + 0.5).Int);\n    }    \n    return @res.List;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291777,"user_id":null,"body":"use v6;\nunit module Solution;\n\n# return a list of Int\nsub bonus(List $ls, Int $s) of List is export(:bonus) {\n    my $a = $ls.max;\n    #couldn't avoid rationals in the end\n    my @proportions = $ls.map({$a \/ $_});\n    my $gcd = $s \/ @proportions.sum;\n    return @proportions.map({round($gcd * $_)}).list;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5d95b7644a336600271f52ba":[{"id":291778,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub crusoe($n, $d, $ang, $distmult, $angmult) is export(:crusoe) {\n    my ($x, $y, $a, $i, $dd) = (0.0, 0.0, $ang * pi \/ 180.0, 1, $d);\n    while ($i <= $n) {\n        $x += $dd * cos($a);\n        $y += $dd * sin($a);\n        $dd *= $distmult;\n        $a *= $angmult;\n        ++$i;\n    }\n    [$x, $y];\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291779,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub crusoe($n, $d, $t, $dm, $am) is export(:crusoe) {\n    my ($x, $y, $k, $m, $p) = (0.0, 0.0, $t * pi \/ 180.0, 1, $d);\n    while ($m <= $n) {\n        $x += $p * cos($k);\n        $y += $p * sin($k);\n        $p *= $dm;\n        $k *= $am;\n        $m++;\n    }\n    [$x, $y];\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5d98b6b38b0f6c001a461198":[{"id":291780,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub encode-digit(Int $d --> Str) {\n    \"0\" x ($d.base(2).chars - 1) ~ \"1\" ~ $d.base(2)\n}\n\nsub code(Str $s --> Str) is export(:code) {\n    [~] $s.comb.map: { encode-digit( $_.Int ) }\n}\n\nmy regex digit { (\"0\"* \"1\") {} :my $b = $0; (\\d ** {$b.chars}) };\n\nsub decode(Str $s --> Str) is export(:decode) {\n    $s ~~ \/ <digit>+ \/;\n    [~] $\/<digit>.map: {$_.pairs.hash<1>.Str.parse-base(2)}\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291781,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub code($s) is export(:code) {\n    my %dict = ('0' => '10', '1' => '11', '2' => '0110', '3' => '0111', '4' => '001100', '5' => '001101', '6' => '001110', '7' => '001111', '8' => '00011000', '9' => '00011001');\n    my $res = '';\n    loop (my $i = 0; $i < $s.chars; $i++) {\n        my $u = substr($s, $i, 1);\n        my $v = %dict{$u};\n        $res ~= $v;\n    }\n    $res;\n}\n\nsub decode($s is copy) is export(:decode) {\n    my $ch = '1'; my $res = \"\"; my $l = -1;\n    while ($s) {\n        my $l = index($s, $ch) + 1;\n        my $ss = substr($s, $l, $l);\n        my $n = \"0b$ss\".Int;\n        $res ~= $n;\n        $s = substr($s, $l * 2);\n    }\n    $res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5da1df6d8b0f6c0026e6d58d":[{"id":291782,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub c(Int $k --> Int) is export(:c) {\n    my $root = sqrt($k).Int;\n    if ($root * $root != $k) {\n        return 0;\n    }\n    my ($i, $num, $result) = 2, $k * $root, 1;\n    while ($num > 1) {\n        my $div_num_nb = 0;\n        while ($num % $i == 0) {\n            $num = $num div $i;\n            $div_num_nb++;\n        }\n        $result *= $div_num_nb + 1;\n        $i++;\n    }\n    return $result;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291783,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub c(Int $k --> Int) is export(:c) {\n    my $sq = $k.sqrt.floor;\n    if ($sq * $sq != $k) { return 0; }\n    my $i = 2;\n    my $num = $k * $sq;\n    my $ans = 1;\n    while ($num > 1) {\n        my $cnt = 0;\n        while ($num % $i == 0) {\n            $num = $num div $i;\n            $cnt++;\n        }\n        $ans *= ($cnt + 1);\n        $i++;\n    }\n    return $ans;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291784,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub c(Int $k --> Int) is export(:c) {\n    my $n = $k.sqrt.Int;\n    return 0 if $n * $n != $k;\n\n    my ($p, $r) = 2, 1;\n    while $p * $p <= $n {\n        my $c = 0;\n        while $n %% $p {\n            ++$c;\n            $n div= $p;\n        }\n        $r *= 3 * $c + 1;\n        $p += $p == 2 ?? 1 !! 2;\n    }\n    $n > 1 ?? 4 * $r !! $r\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291785,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub c(Int $k --> Int) is export(:c) {\n    my $n = $k.sqrt.Int;\n    return 0 if $n * $n != $k;\n\n    my ($p, $r) = 2, 1;\n    while $p * $p <= $n {\n        my $c = 0;\n        while $n %% $p {\n            ++$c;\n            $n div= $p;\n        }\n        $r *= 3 * $c + 1 if $c > 0;\n        $p += $p == 2 ?? 1 !! 2;\n    }\n    $n > 1 ?? 4 * $r !! $r\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291786,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub c(Int $k is copy --> Int) is export(:c) {\n    my $r = 1;\n    my $p = 2;\n    while $p * $p <= $k {\n        my $c = 0;\n        while $k %% $p {\n            ++$c;\n            $k div= $p;\n        }\n        return 0 unless $c %% 2;\n        $r *= $c div 2 * 3 + 1;\n        $p += $p == 2 ?? 1 !! 2;\n    }\n    $k == 1 ?? $r !! 0\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5dad6e5264e25a001918a1fc":[{"id":291787,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub decode(Str $s) of Str is export(:decode) {\n    my @fields = $s ~~ \/(\\d+)(.*)\/;\n    my $num = $0.Int % 26;; my $text = $1.Str;;\n    if (($num % 2 == 0) || ($num == 13)) { return \"Impossible to decode\"; }\n    my %dict = ('3'=>9, '9'=>3, '21'=>5, '5'=>21, '7'=>15, '15'=>7, '11'=>19, '19'=>11, '17'=>23, '23'=>17, '25'=>25, '1'=>1);\n    my $n = %dict{$num};\n    my $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    my $res = \"\";\n    loop (my $i = 0; $i < $text.chars; ++$i) {\n        my $j = (index($alpha, substr($text, $i, 1)) * $n) % 26;\n        $res ~= substr($alpha, $j, 1);\n    }\n    $res;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5db19d503ec3790012690c11":[{"id":291788,"user_id":null,"body":"use v6;\nunit module Solution;\n\n# parameters: n, w are integers; return a Numeric\nsub weight($n, $w) is export(:weight) {\n    0.17174117862516716128 * $w;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291789,"user_id":492,"body":"use v6;\nunit module Solution;\n\n# parameters: n, w are integers; return a Numeric\nsub weight($n, $w) is export(:weight) {\n    my $i0 = 0.14849853757254047;\n    my $an = (1 - exp(-2 * $n - 2)) \/ (1 - exp(-2));\n    $i0 * $an * $w;\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5e4bb05b698ef0001e3344bc":[{"id":291790,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub solve(List $arr --> List) is export(:solve) {\n    my $a = $arr[0];\n    my $b = $arr[1];\n    my $i = 2;\n    my $w = $arr.elems;\n    while ($i < $w) { \n        my $c = $a * $arr[$i] + $b * $arr[$i+1]; \n        my $d = abs($b * $arr[$i] - $a * $arr[$i+1]); \n        $a = $c;\n        $b = $d;\n        $i += 2;\n    }\n    ($a, $b);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291791,"user_id":492,"body":"use v6;\nunit module Solution;\n\n# input: List of integers; output: List of two not negative integers\nsub solve(List $arr --> List) is export(:solve) {\n    my $a = $arr[0]; my $b = $arr[1];\n    my $i = 1; my $lg = $arr.elems div 2;\n    while ($i < $lg) {\n        my ($x, $y) = ($a, $b); \n        my ($z, $t) = ($arr[2 * $i], $arr[2 * $i + 1]); \n        $a = abs($x * $z - $y * $t);\n        $b = abs($x * $t + $y * $z);\n        $i++;\n    }\n    ($a, $b);\n}","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5fde1ea66ba4060008ea5bd9":[{"id":291792,"user_id":759,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $carbon, Int $hydrogen, Int $oxygen --> Array) is export {\n    my $c = $carbon;\n    my $h = $hydrogen;\n    my $o = $oxygen;\n    my $water = min($h div 2, $o);\n    $h -= $water * 2;\n    $o -= $water;\n    my $co2 = min($c, $o div 2);\n    $c -= $co2;\n    $o -= $co2 * 2;\n    my $methane = min($c, $h div 4);\n    [$water, $co2, $methane]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291793,"user_id":645,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c, Int $h, Int $o --> Array) is export {\n    my $h2o = Int(min($o, $h \/ 2));\n    my $co2 = Int(min($c, ($o - $h2o) \/ 2));\n    my $ch4 = Int(min($c - $co2, ($h - $h2o * 2) \/ 4));\n    [$h2o, $co2, $ch4]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291794,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c is copy, Int $h is copy, Int $o is copy --> Array) is export {\n    sub helper(Int $e1 is rw, Int $min-e1, Int $e2 is rw, Int $min-e2 --> Int) {\n        my $result = 0;\n        while $e1 >= $min-e1 && $e2 >= $min-e2 {\n            $e1 -= $min-e1;\n            $e2 -= $min-e2;\n            $result += 1;\n        }\n        $result\n    }\n    [helper($h, 2, $o, 1), helper($c, 1, $o, 2), helper($c, 1, $h, 4)]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291795,"user_id":492,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c, Int $h, Int $o --> Array) is export {\n    my $water = min(($h \/ 2).floor,  $o);\n    my $co2 = min((($o - $water) \/ 2).floor, $c);\n    my $methane = min((($h - $water * 2) \/ 4).floor, $c - $co2);\n    [$water, $co2, $methane]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291796,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c, Int $h, Int $o --> Array) is export {\n    \n    my $hid = $h;\n    my $car = $c;\n    my $ox  = $o;\n    \n    my $water   = min($h div 2, $o);\n    $hid -= $water*2;\n    $ox  -= $water;\n    \n    my $co2     = min($car, $ox div 2);\n    $ox  -= $co2*2;\n    $car -= $co2;\n    \n    my $methane = min($car, $hid div 4);\n    \n    [$water, $co2, $methane]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291797,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $carbon is copy, Int $hydrogen is copy, Int $oxygen is copy --> Array) is export {\n    my ($water, $carbonDioxide, $methane);\n\n    while $hydrogen >= 2 && $oxygen >= 1 {\n        ++$water;\n        $hydrogen -= 2;\n        --$oxygen;\n    }\n\n    while $carbon >= 1 && $oxygen >= 2 {\n        ++$carbonDioxide;\n        --$carbon;\n        $oxygen -= 2;\n    }\n\n    while $carbon >= 1 && $hydrogen >= 4 {\n        ++$methane;\n        --$carbon;\n        $hydrogen -= 4;\n    }\n\n    [$water, $carbonDioxide, $methane].map(+*).Array;\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291798,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burn(Int $ca, Int $a is rw, Int $cb, Int $b is rw) {\n    my $r := min $a div $ca, $b div $cb;\n    $a -= $ca * $r;\n    $b -= $cb * $r;\n    $r;\n}\n\nsub burner(Int $c is copy, Int $h is copy, Int $o is copy --> Array) is export {\n    [burn 2, $h, 1, $o;\n     burn 1, $c, 2, $o;\n     burn 1, $c, 4, $h]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291799,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c is copy, Int $h is copy, Int $o is copy --> Array) is export {\n    my Int ($water, $co2, $methane) = 0, 0, 0;\n    while $h >= 2 && $o >= 1 {\n        $h -= 2;\n        --$o;\n        ++$water;\n    }\n    while $c >= 1 && $o >= 2 {\n        --$c;\n        $o -= 2;\n        ++$co2;\n    }\n    while $c >= 1 && $h >= 4 {\n        --$c;\n        $h -= 4;\n        ++$methane;\n    }\n    [$water, $co2, $methane]\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291800,"user_id":null,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c, Int $h, Int $o --> Array) is export {\n    my ($locc, $loch, $loco) = ($c, $h, $o);\n    my ($water, $co2, $methane) = (0, 0, 0);\n    while ($loco > 0 && $loch > 1) {\n        $water++;\n        $loco--;\n        $loch-=2;\n    }\n    while ($locc > 0 && $loco > 1) {\n        $co2++;\n        $locc--;\n        $loco-=2;\n    }\n    while ($locc > 0 && $loch > 3) {\n        $methane++;\n        $locc--;\n        $loch-=4;\n    }\n    [$water, $co2, $methane];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291801,"user_id":53,"body":"use v6;\nunit module Solution;\n\nsub burner(Int $c, Int $h, Int $o --> Array) is export {\n    my $h2o = Int(min($h+>1, $o));\n    my $co2 = Int(min($c, ($o-$h2o)+>1));\n    my $ch4 = Int(min($c-$co2, ($h-$h2o*2)+>2));\n    return [$h2o, $co2, $ch4];\n}\n","lang_id":45,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}]}