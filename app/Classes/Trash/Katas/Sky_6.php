<?php

namespace App\Classes\Trash\Katas;

class Sky_6
{
    protected array $m = [
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
    ];

    protected array $clues = [
        1 => [[6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],
        2 => [[1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        3 => [[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        4 => [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        5 => [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],
        6 => [[1], [2], [3], [4], [5], [6]],
    ];

    protected array $lineCoords = [
        [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]],
        [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]],
        [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2]],
        [[0, 3], [1, 3], [2, 3], [3, 3], [4, 3], [5, 3]],
        [[0, 4], [1, 4], [2, 4], [3, 4], [4, 4], [5, 4]],
        [[0, 5], [1, 5], [2, 5], [3, 5], [4, 5], [5, 5]],

        [[0, 5], [0, 4], [0, 3], [0, 2], [0, 1], [0, 0]],
        [[1, 5], [1, 4], [1, 3], [1, 2], [1, 1], [1, 0]],
        [[2, 5], [2, 4], [2, 3], [2, 2], [2, 1], [2, 0]],
        [[3, 5], [3, 4], [3, 3], [3, 2], [3, 1], [3, 0]],
        [[4, 5], [4, 4], [4, 3], [4, 2], [4, 1], [4, 0]],
        [[5, 5], [5, 4], [5, 3], [5, 2], [5, 1], [5, 0]],

        [[5, 5], [4, 5], [3, 5], [2, 5], [1, 5], [0, 5]],
        [[5, 4], [4, 4], [3, 4], [2, 4], [1, 4], [0, 4]],
        [[5, 3], [4, 3], [3, 3], [2, 3], [1, 3], [0, 3]],
        [[5, 2], [4, 2], [3, 2], [2, 2], [1, 2], [0, 2]],
        [[5, 1], [4, 1], [3, 1], [2, 1], [1, 1], [0, 1]],
        [[5, 0], [4, 0], [3, 0], [2, 0], [1, 0], [0, 0]],

        [[5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5]],
        [[4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5]],
        [[3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5]],
        [[2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]],
        [[1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5]],
        [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5]],
    ];


    public function solve($input): array
    {
        // $clues = $this->getCluesRows();
        // $tmp2 = $clues[2];
        // $tmp3 = $clues[3];
        // $tmp3r = array_map(fn($v) => strrev($v), $tmp3);
        // $tmp4 = $clues[4];
        // $tmp4r = array_map(fn($v) => strrev($v), $tmp4);
        //
        // $res = array_intersect($tmp4, $tmp3r);
        // $res = array_filter($res, fn($v) => true
        //     && in_array(substr($v, 4, 1), [1, 3, 4])
        //     && in_array(substr($v, 5, 1), [2, 3, 4])
        // );
        //
        //
        // dd(tmr(), $res);
        $res = [];

        // проход по ключам
        foreach ($input as $key => $clue) {
            if ($clue === 0) {
                continue;
            }

            $lineCoords = $this->lineCoords[$key];

            foreach ($lineCoords as $pos => $coords) {
                $this->m[$coords[0]][$coords[1]] = array_values(array_intersect($this->m[$coords[0]][$coords[1]], $this->clues[$clue][$pos]));
            }
        }


        // ищем значения имеющиеся только в одной из ячеек линии
        $res = [];


        for($r=4;$r<6;$r++) {
            $tmp = array_count_values(array_merge(...$this->m[$r]));

            if($solved = array_search(1, $tmp)){
                $res[] = [$solved,$tmp, $r];
            }
        }

            //dd(tmr(),$cnt);

        dd(tmr(), $res);

        return $masks;
    }

    public function getCluesRows(): array
    {
        $res = [];
        $rows = $this->getPermutations();
        sort($rows);


        foreach ($rows as $row) {
            $res[$this->getClue($row)][] = implode('', $row);
        }

        return $res;
    }

    protected function getClue(array $row): int
    {
        $clue = 0;
        $max = 0;

        foreach ($row as $n) {
            if ($n > $max) {
                $clue++;
                $max = $n;
            }
        }

        return $clue;
    }

    protected function getPermutations($items = [1, 2, 3, 4, 5, 6], $perms = array()): array
    {
        if (empty($items)) {
            $return = array($perms);
        } else {
            $return = array();
            for ($i = count($items) - 1; $i >= 0; --$i) {
                $newitems = $items;
                $newperms = $perms;
                list($foo) = array_splice($newitems, $i, 1);
                array_unshift($newperms, $foo);
                $return = array_merge($return, $this->getPermutations($newitems, $newperms));
            }
        }
        return $return;
    }
}
